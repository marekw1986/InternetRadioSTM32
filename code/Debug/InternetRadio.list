
InternetRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186d0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002504  080188b4  080188b4  000288b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adb8  0801adb8  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801adb8  0801adb8  0002adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adc0  0801adc0  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adc0  0801adc0  0002adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801adc4  0801adc4  0002adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0801adc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000919c  200000b0  0801ae78  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000924c  0801ae78  0003924c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049dba  00000000  00000000  000300d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008cec  00000000  00000000  00079e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024b0  00000000  00000000  00082b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021e8  00000000  00000000  00085030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000315f7  00000000  00000000  00087218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f5e7  00000000  00000000  000b880f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc3e6  00000000  00000000  000e7df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c41dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d84  00000000  00000000  001c4258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	00000000 	.word	0x00000000
 8000204:	0801889c 	.word	0x0801889c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b4 	.word	0x200000b4
 8000220:	0801889c 	.word	0x0801889c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t timer = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 fd63 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f883 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f9e9 	bl	8000910 <MX_GPIO_Init>
  MX_LWIP_Init();
 800053e:	f006 fa29 	bl	8006994 <MX_LWIP_Init>
  MX_USART1_UART_Init();
 8000542:	f000 f9bb 	bl	80008bc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000546:	f006 f9ad 	bl	80068a4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800054a:	f016 fed7 	bl	80172fc <MX_USB_HOST_Init>
  MX_SPI3_Init();
 800054e:	f000 f931 	bl	80007b4 <MX_SPI3_Init>
  MX_RTC_Init();
 8000552:	f000 f8dd 	bl	8000710 <MX_RTC_Init>
  MX_SPI1_Init();
 8000556:	f000 f8f7 	bl	8000748 <MX_SPI1_Init>
  MX_TIM4_Init();
 800055a:	f000 f961 	bl	8000820 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);									//Required for delay_us
 800055e:	482e      	ldr	r0, [pc, #184]	; (8000618 <main+0xf0>)
 8000560:	f004 ff30 	bl	80053c4 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056a:	482c      	ldr	r0, [pc, #176]	; (800061c <main+0xf4>)
 800056c:	f002 f896 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	482a      	ldr	r0, [pc, #168]	; (8000620 <main+0xf8>)
 8000578:	f002 f890 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4828      	ldr	r0, [pc, #160]	; (8000624 <main+0xfc>)
 8000584:	f002 f88a 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <main+0xf8>)
 800058e:	f002 f885 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <main+0xf8>)
 8000598:	f002 f880 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TST_GPIO_Port, TST_Pin, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	481f      	ldr	r0, [pc, #124]	; (8000620 <main+0xf8>)
 80005a4:	f002 f87a 	bl	800269c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2101      	movs	r1, #1
 80005ac:	481d      	ldr	r0, [pc, #116]	; (8000624 <main+0xfc>)
 80005ae:	f002 f875 	bl	800269c <HAL_GPIO_WritePin>

  res = f_mount(&FatFS, "0:", 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	491c      	ldr	r1, [pc, #112]	; (8000628 <main+0x100>)
 80005b6:	481d      	ldr	r0, [pc, #116]	; (800062c <main+0x104>)
 80005b8:	f00b f922 	bl	800b800 <f_mount>
 80005bc:	4603      	mov	r3, r0
 80005be:	70fb      	strb	r3, [r7, #3]
  if (res != FR_OK) {printf("f_mount error code: %i\r\n", res);}
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <main+0xaa>
 80005c6:	78fb      	ldrb	r3, [r7, #3]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4819      	ldr	r0, [pc, #100]	; (8000630 <main+0x108>)
 80005cc:	f017 fa86 	bl	8017adc <iprintf>
 80005d0:	e002      	b.n	80005d8 <main+0xb0>
  else {printf("f_mount OK\r\n");}
 80005d2:	4818      	ldr	r0, [pc, #96]	; (8000634 <main+0x10c>)
 80005d4:	f017 faf6 	bl	8017bc4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if ( ((uint32_t)(millis()-timer)) > 25000 ) {
 80005d8:	f000 fd68 	bl	80010ac <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d912      	bls.n	8000610 <main+0xe8>
		timer = millis();
 80005ea:	f000 fd5f 	bl	80010ac <HAL_GetTick>
 80005ee:	6078      	str	r0, [r7, #4]
		printf("Minelo %lu sekund od startu...\r\n", timer/1000);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <main+0x110>)
 80005f4:	fba2 2303 	umull	r2, r3, r2, r3
 80005f8:	099b      	lsrs	r3, r3, #6
 80005fa:	4619      	mov	r1, r3
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <main+0x114>)
 80005fe:	f017 fa6d 	bl	8017adc <iprintf>
		HAL_GPIO_TogglePin(TST_GPIO_Port, TST_Pin);
 8000602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <main+0xf8>)
 8000608:	f002 f860 	bl	80026cc <HAL_GPIO_TogglePin>
		usb_write();
 800060c:	f000 fa56 	bl	8000abc <usb_write>
	}

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000610:	f016 fe9a 	bl	8017348 <MX_USB_HOST_Process>
	if ( ((uint32_t)(millis()-timer)) > 25000 ) {
 8000614:	e7e0      	b.n	80005d8 <main+0xb0>
 8000616:	bf00      	nop
 8000618:	2000028c 	.word	0x2000028c
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40011000 	.word	0x40011000
 8000628:	080188b4 	.word	0x080188b4
 800062c:	200003d8 	.word	0x200003d8
 8000630:	080188b8 	.word	0x080188b8
 8000634:	080188d4 	.word	0x080188d4
 8000638:	10624dd3 	.word	0x10624dd3
 800063c:	080188e0 	.word	0x080188e0

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800064a:	2238      	movs	r2, #56	; 0x38
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f017 f996 	bl	8017980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2220      	movs	r2, #32
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f017 f988 	bl	8017980 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000670:	2305      	movs	r3, #5
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000686:	2300      	movs	r3, #0
 8000688:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000694:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000698:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fcde 	bl	8004064 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ae:	f000 fa59 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 ffde 	bl	8004690 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006da:	f000 fa43 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80006de:	2311      	movs	r3, #17
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f9ec 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006fa:	f000 fa33 	bl	8000b64 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006fe:	4b03      	ldr	r3, [pc, #12]	; (800070c <SystemClock_Config+0xcc>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	3770      	adds	r7, #112	; 0x70
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	42420070 	.word	0x42420070

08000710 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_RTC_Init+0x30>)
 8000716:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MX_RTC_Init+0x34>)
 8000718:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_RTC_Init+0x30>)
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_RTC_Init+0x30>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_RTC_Init+0x30>)
 800072c:	f004 fc64 	bl	8004ff8 <HAL_RTC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000736:	f000 fa15 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000036c 	.word	0x2000036c
 8000744:	40002800 	.word	0x40002800

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_SPI1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x64>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x64>)
 8000774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000778:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x64>)
 800077c:	2238      	movs	r2, #56	; 0x38
 800077e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x64>)
 8000794:	220a      	movs	r2, #10
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_SPI1_Init+0x64>)
 800079a:	f004 fd40 	bl	800521e <HAL_SPI_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a4:	f000 f9de 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000380 	.word	0x20000380
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_SPI3_Init+0x64>)
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_SPI3_Init+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_SPI3_Init+0x64>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_SPI3_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_SPI3_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_SPI3_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_SPI3_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_SPI3_Init+0x64>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_SPI3_Init+0x64>)
 80007e8:	2230      	movs	r2, #48	; 0x30
 80007ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_SPI3_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_SPI3_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_SPI3_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_SPI3_Init+0x64>)
 8000800:	220a      	movs	r2, #10
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_SPI3_Init+0x64>)
 8000806:	f004 fd0a 	bl	800521e <HAL_SPI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000810:	f000 f9a8 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200002d4 	.word	0x200002d4
 800081c:	40003c00 	.word	0x40003c00

08000820 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_TIM4_Init+0x94>)
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_TIM4_Init+0x98>)
 8000840:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_TIM4_Init+0x94>)
 8000844:	2247      	movs	r2, #71	; 0x47
 8000846:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_TIM4_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_TIM4_Init+0x94>)
 8000850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000854:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_TIM4_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_TIM4_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000862:	4814      	ldr	r0, [pc, #80]	; (80008b4 <MX_TIM4_Init+0x94>)
 8000864:	f004 fd5f 	bl	8005326 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f979 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4619      	mov	r1, r3
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_TIM4_Init+0x94>)
 8000880:	f004 fdf2 	bl	8005468 <HAL_TIM_ConfigClockSource>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f96b 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_TIM4_Init+0x94>)
 800089c:	f004 ff9e 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008a6:	f000 f95d 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000028c 	.word	0x2000028c
 80008b8:	40000800 	.word	0x40000800

080008bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART1_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART1_UART_Init+0x4c>)
 80008f4:	f004 ffd8 	bl	80058a8 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f931 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000032c 	.word	0x2000032c
 800090c:	40013800 	.word	0x40013800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a4a      	ldr	r2, [pc, #296]	; (8000a54 <MX_GPIO_Init+0x144>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093c:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x144>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a44      	ldr	r2, [pc, #272]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000942:	f043 0320 	orr.w	r3, r3, #32
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b42      	ldr	r3, [pc, #264]	; (8000a54 <MX_GPIO_Init+0x144>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0320 	and.w	r3, r3, #32
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a3e      	ldr	r2, [pc, #248]	; (8000a54 <MX_GPIO_Init+0x144>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <MX_GPIO_Init+0x144>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a38      	ldr	r2, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x144>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <MX_GPIO_Init+0x144>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VS_XRST_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f242 0101 	movw	r1, #8193	; 0x2001
 800098a:	4833      	ldr	r0, [pc, #204]	; (8000a58 <MX_GPIO_Init+0x148>)
 800098c:	f001 fe86 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TST_Pin|VS_XDCS_Pin|VS_XCS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8000996:	4831      	ldr	r0, [pc, #196]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000998:	f001 fe80 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <MX_GPIO_Init+0x150>)
 80009a4:	f001 fe7a 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VS_XRST_Pin USB_EN_Pin */
  GPIO_InitStruct.Pin = VS_XRST_Pin|USB_EN_Pin;
 80009a8:	f242 0301 	movw	r3, #8193	; 0x2001
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ba:	f107 0310 	add.w	r3, r7, #16
 80009be:	4619      	mov	r1, r3
 80009c0:	4825      	ldr	r0, [pc, #148]	; (8000a58 <MX_GPIO_Init+0x148>)
 80009c2:	f001 fd11 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OVERCURRENT_Pin */
  GPIO_InitStruct.Pin = USB_OVERCURRENT_Pin;
 80009c6:	2320      	movs	r3, #32
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USB_OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	4821      	ldr	r0, [pc, #132]	; (8000a60 <MX_GPIO_Init+0x150>)
 80009da:	f001 fd05 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TST_Pin VS_XDCS_Pin VS_XCS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = TST_Pin|VS_XDCS_Pin|VS_XCS_Pin|SD_CS_Pin;
 80009de:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <MX_GPIO_Init+0x14c>)
 80009f8:	f001 fcf6 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80009fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_GPIO_Init+0x150>)
 8000a16:	f001 fce7 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_PRESENT_Pin */
  GPIO_InitStruct.Pin = SD_PRESENT_Pin;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_PRESENT_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_GPIO_Init+0x154>)
 8000a2e:	f001 fcdb 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VS_DREQ_Pin */
  GPIO_InitStruct.Pin = VS_DREQ_Pin;
 8000a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(VS_DREQ_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x14c>)
 8000a48:	f001 fcce 	bl	80023e8 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40011000 	.word	0x40011000
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	40010800 	.word	0x40010800
 8000a64:	40011400 	.word	0x40011400

08000a68 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *data, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d008      	beq.n	8000a8c <_write+0x24>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d005      	beq.n	8000a8c <_write+0x24>
   {
      errno = EBADF;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <_write+0x4c>)
 8000a82:	2209      	movs	r2, #9
 8000a84:	601a      	str	r2, [r3, #0]
      return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8a:	e00f      	b.n	8000aac <_write+0x44>
   }

   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <_write+0x50>)
 8000a98:	f004 ff53 	bl	8005942 <HAL_UART_Transmit>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8000aa0:	7dfb      	ldrb	r3, [r7, #23]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <_write+0x42>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	e000      	b.n	8000aac <_write+0x44>
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20009248 	.word	0x20009248
 8000ab8:	2000032c 	.word	0x2000032c

08000abc <usb_write>:

void usb_write (void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000ac2:	af00      	add	r7, sp, #0
    FRESULT res;
    FIL file;

    res = f_open(&file, "0:/test.txt", (FA_OPEN_ALWAYS | FA_WRITE));
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2212      	movs	r2, #18
 8000ac8:	4921      	ldr	r1, [pc, #132]	; (8000b50 <usb_write+0x94>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00a fee0 	bl	800b890 <f_open>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
    if (res != FR_OK) {
 8000ad6:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <usb_write+0x30>
        printf("f_open error code: %i\r\n", res);
 8000ade:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <usb_write+0x98>)
 8000ae6:	f016 fff9 	bl	8017adc <iprintf>
        return;
 8000aea:	e02d      	b.n	8000b48 <usb_write+0x8c>
    }
    if (f_size(&file) == 0) {
 8000aec:	463b      	mov	r3, r7
 8000aee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d105      	bne.n	8000b02 <usb_write+0x46>
        f_puts("To jest pierwsza linia\r\n", &file);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4817      	ldr	r0, [pc, #92]	; (8000b58 <usb_write+0x9c>)
 8000afc:	f00b fdfd 	bl	800c6fa <f_puts>
 8000b00:	e019      	b.n	8000b36 <usb_write+0x7a>
    }
    else {
        res = f_lseek(&file, f_size(&file));
 8000b02:	463b      	mov	r3, r7
 8000b04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00b fb59 	bl	800c1c4 <f_lseek>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
        if (res != FR_OK) {
 8000b18:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00a      	beq.n	8000b36 <usb_write+0x7a>
            printf("f_lseek error code: %i\r\n", res);
 8000b20:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <usb_write+0xa0>)
 8000b28:	f016 ffd8 	bl	8017adc <iprintf>
            f_close(&file);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00b fb20 	bl	800c174 <f_close>
            return;
 8000b34:	e008      	b.n	8000b48 <usb_write+0x8c>
        }
    }
    f_puts("To jest test.\n", &file);
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <usb_write+0xa4>)
 8000b3c:	f00b fddd 	bl	800c6fa <f_puts>
    f_close(&file);
 8000b40:	463b      	mov	r3, r7
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00b fb16 	bl	800c174 <f_close>
}
 8000b48:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08018904 	.word	0x08018904
 8000b54:	08018910 	.word	0x08018910
 8000b58:	08018928 	.word	0x08018928
 8000b5c:	08018944 	.word	0x08018944
 8000b60:	08018960 	.word	0x08018960

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x6>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_RTC_MspInit+0x3c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d110      	bne.n	8000c04 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000be2:	f003 fa33 	bl	800404c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_RTC_MspInit+0x40>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_RTC_MspInit+0x40>)
 8000bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_RTC_MspInit+0x40>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_RTC_MspInit+0x44>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40002800 	.word	0x40002800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	4242043c 	.word	0x4242043c

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a45      	ldr	r2, [pc, #276]	; (8000d48 <HAL_SPI_MspInit+0x130>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d13e      	bne.n	8000cb6 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c38:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a3d      	ldr	r2, [pc, #244]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c68:	2328      	movs	r3, #40	; 0x28
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0318 	add.w	r3, r7, #24
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4835      	ldr	r0, [pc, #212]	; (8000d50 <HAL_SPI_MspInit+0x138>)
 8000c7c:	f001 fbb4 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c80:	2310      	movs	r3, #16
 8000c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4619      	mov	r1, r3
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <HAL_SPI_MspInit+0x138>)
 8000c94:	f001 fba8 	bl	80023e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <HAL_SPI_MspInit+0x13c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <HAL_SPI_MspInit+0x13c>)
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb4:	e044      	b.n	8000d40 <HAL_SPI_MspInit+0x128>
  else if(hspi->Instance==SPI3)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <HAL_SPI_MspInit+0x140>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d13f      	bne.n	8000d40 <HAL_SPI_MspInit+0x128>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cca:	61d3      	str	r3, [r2, #28]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_SPI_MspInit+0x134>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4815      	ldr	r0, [pc, #84]	; (8000d5c <HAL_SPI_MspInit+0x144>)
 8000d06:	f001 fb6f 	bl	80023e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0318 	add.w	r3, r7, #24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480f      	ldr	r0, [pc, #60]	; (8000d5c <HAL_SPI_MspInit+0x144>)
 8000d20:	f001 fb62 	bl	80023e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_SPI_MspInit+0x13c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d3a:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_SPI_MspInit+0x13c>)
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	6053      	str	r3, [r2, #4]
}
 8000d40:	bf00      	nop
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40013000 	.word	0x40013000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40010000 	.word	0x40010000
 8000d58:	40003c00 	.word	0x40003c00
 8000d5c:	40011000 	.word	0x40011000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_TIM_Base_MspInit+0x34>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10b      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_TIM_Base_MspInit+0x38>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40000800 	.word	0x40000800
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_UART_MspInit+0x8c>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d131      	bne.n	8000e20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000e02:	f001 faf1 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000e1c:	f001 fae4 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <UsageFault_Handler+0x4>

08000e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7a:	f000 f905 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f001 fec3 	bl	8002c14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20008f84 	.word	0x20008f84

08000e98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e00a      	b.n	8000ec0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eaa:	f3af 8000 	nop.w
 8000eae:	4601      	mov	r1, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf0      	blt.n	8000eaa <_read+0x12>
	}

return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef8:	605a      	str	r2, [r3, #4]
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
	return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d205      	bcs.n	8000f70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <_sbrk+0x6c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20010000 	.word	0x20010000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	200000cc 	.word	0x200000cc
 8000f9c:	20009250 	.word	0x20009250
 8000fa0:	20009248 	.word	0x20009248

08000fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fb0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fb2:	e003      	b.n	8000fbc <LoopCopyDataInit>

08000fb4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fb6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fb8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fba:	3104      	adds	r1, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fc0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fc4:	d3f6      	bcc.n	8000fb4 <CopyDataInit>
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fc8:	e002      	b.n	8000fd0 <LoopFillZerobss>

08000fca <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fcc:	f842 3b04 	str.w	r3, [r2], #4

08000fd0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fd4:	d3f9      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd6:	f7ff ffe5 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f016 fc83 	bl	80178e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff faa3 	bl	8000528 <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r3, =_sidata
 8000fe4:	0801adc8 	.word	0x0801adc8
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fec:	200000b0 	.word	0x200000b0
  ldr r2, =_sbss
 8000ff0:	200000b0 	.word	0x200000b0
  ldr r3, = _ebss
 8000ff4:	2000924c 	.word	0x2000924c

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f945 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fda8 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f95d 	bl	8001306 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001064:	f000 f925 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000608 	.word	0x20000608

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	20000608 	.word	0x20000608

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_Delay+0x40>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4906      	ldr	r1, [pc, #24]	; (800119c <__NVIC_EnableIRQ+0x34>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800127c:	f7ff ff90 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff2d 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff42 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff90 	bl	80011f4 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5f 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff35 	bl	8001168 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa2 	bl	8001258 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001330:	4bac      	ldr	r3, [pc, #688]	; (80015e4 <HAL_ETH_Init+0x2c4>)
 8001332:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e14a      	b.n	80015dc <HAL_ETH_Init+0x2bc>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f005 fb60 	bl	8006a20 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8001360:	4ba1      	ldr	r3, [pc, #644]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4aa0      	ldr	r2, [pc, #640]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 8001366:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800136a:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 800136c:	4b9e      	ldr	r3, [pc, #632]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	499c      	ldr	r1, [pc, #624]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001392:	f7ff fe8b 	bl	80010ac <HAL_GetTick>
 8001396:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001398:	e011      	b.n	80013be <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800139a:	f7ff fe87 	bl	80010ac <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a8:	d909      	bls.n	80013be <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e10e      	b.n	80015dc <HAL_ETH_Init+0x2bc>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e4      	bne.n	800139a <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f023 031c 	bic.w	r3, r3, #28
 80013de:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013e0:	f003 fb24 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 80013e4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <HAL_ETH_Init+0x2cc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d908      	bls.n	8001400 <HAL_ETH_Init+0xe0>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4a7f      	ldr	r2, [pc, #508]	; (80015f0 <HAL_ETH_Init+0x2d0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d804      	bhi.n	8001400 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e00b      	b.n	8001418 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4a7b      	ldr	r2, [pc, #492]	; (80015f0 <HAL_ETH_Init+0x2d0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d907      	bls.n	8001418 <HAL_ETH_Init+0xf8>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_ETH_Init+0x2d4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d803      	bhi.n	8001418 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f043 030c 	orr.w	r3, r3, #12
 8001416:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001420:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001424:	2100      	movs	r1, #0
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fb0c 	bl	8001a44 <HAL_ETH_WritePHYRegister>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001436:	6939      	ldr	r1, [r7, #16]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fcc1 	bl	8001dc0 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0c8      	b.n	80015dc <HAL_ETH_Init+0x2bc>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800144a:	20ff      	movs	r0, #255	; 0xff
 800144c:	f7ff fe38 	bl	80010c0 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8096 	beq.w	8001586 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800145a:	f7ff fe27 	bl	80010ac <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	461a      	mov	r2, r3
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa83 	bl	8001974 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800146e:	f7ff fe1d 	bl	80010ac <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4293      	cmp	r3, r2
 800147e:	d90f      	bls.n	80014a0 <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fc9a 	bl	8001dc0 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e09d      	b.n	80015dc <HAL_ETH_Init+0x2bc>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0da      	beq.n	8001460 <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ae:	2100      	movs	r1, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fac7 	bl	8001a44 <HAL_ETH_WritePHYRegister>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fc7c 	bl	8001dc0 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e083      	b.n	80015dc <HAL_ETH_Init+0x2bc>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fdea 	bl	80010ac <HAL_GetTick>
 80014d8:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	461a      	mov	r2, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fa46 	bl	8001974 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014e8:	f7ff fde0 	bl	80010ac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d90f      	bls.n	800151a <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fc5d 	bl	8001dc0 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e060      	b.n	80015dc <HAL_ETH_Init+0x2bc>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0da      	beq.n	80014da <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001524:	f107 030c 	add.w	r3, r7, #12
 8001528:	461a      	mov	r2, r3
 800152a:	2110      	movs	r1, #16
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fa21 	bl	8001974 <HAL_ETH_ReadPHYRegister>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fc3e 	bl	8001dc0 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e045      	b.n	80015dc <HAL_ETH_Init+0x2bc>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	e002      	b.n	800156a <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	e026      	b.n	80015ca <HAL_ETH_Init+0x2aa>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e021      	b.n	80015ca <HAL_ETH_Init+0x2aa>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001596:	4313      	orrs	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	2100      	movs	r1, #0
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa50 	bl	8001a44 <HAL_ETH_WritePHYRegister>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_ETH_Init+0x2a2>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015ae:	6939      	ldr	r1, [r7, #16]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 fc05 	bl	8001dc0 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00c      	b.n	80015dc <HAL_ETH_Init+0x2bc>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015c2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015c6:	f7ff fd7b 	bl	80010c0 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fbf7 	bl	8001dc0 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3720      	adds	r7, #32
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	03938700 	.word	0x03938700
 80015e8:	40010000 	.word	0x40010000
 80015ec:	01312cff 	.word	0x01312cff
 80015f0:	02160ebf 	.word	0x02160ebf
 80015f4:	039386ff 	.word	0x039386ff

080015f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_ETH_DMATxDescListInit+0x20>
 8001614:	2302      	movs	r3, #2
 8001616:	e052      	b.n	80016be <HAL_ETH_DMATxDescListInit+0xc6>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e030      	b.n	8001696 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	4413      	add	r3, r2
 800163c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001644:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	461a      	mov	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	d208      	bcs.n	800168a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	4413      	add	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	e002      	b.n	8001690 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3ca      	bcc.n	8001634 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a8:	3310      	adds	r3, #16
 80016aa:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ETH_DMARxDescListInit+0x20>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e056      	b.n	8001796 <HAL_ETH_DMARxDescListInit+0xce>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e034      	b.n	800176e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	4413      	add	r3, r2
 800170c:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001714:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800171c:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	d208      	bcs.n	8001762 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	461a      	mov	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	e002      	b.n	8001768 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3c6      	bcc.n	8001704 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	330c      	adds	r3, #12
 8001782:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ETH_TransmitFrame+0x24>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e0cd      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0b8      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da09      	bge.n	800180c <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2212      	movs	r2, #18
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0a9      	b.n	8001960 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001812:	4293      	cmp	r3, r2
 8001814:	d915      	bls.n	8001842 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	4a54      	ldr	r2, [pc, #336]	; (800196c <HAL_ETH_TransmitFrame+0x1cc>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_ETH_TransmitFrame+0x1cc>)
 8001826:	fba3 1302 	umull	r1, r3, r3, r2
 800182a:	0a9b      	lsrs	r3, r3, #10
 800182c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	e001      	b.n	8001846 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001842:	2301      	movs	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d11c      	bne.n	8001886 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800185a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001866:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001876:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
 8001884:	e04b      	b.n	800191e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e044      	b.n	8001916 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800189a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b0:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ba:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3b01      	subs	r3, #1
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d116      	bne.n	80018f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ETH_TransmitFrame+0x1d0>)
 80018da:	fb02 f203 	mul.w	r2, r2, r3
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018f2:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001902:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3b6      	bcc.n	800188c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	3314      	adds	r3, #20
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	3314      	adds	r3, #20
 800193c:	2204      	movs	r2, #4
 800193e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	3304      	adds	r3, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	ac02b00b 	.word	0xac02b00b
 8001970:	fffffa0c 	.word	0xfffffa0c

08001974 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	460b      	mov	r3, r1
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b82      	cmp	r3, #130	; 0x82
 8001994:	d101      	bne.n	800199a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	e050      	b.n	8001a3c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2282      	movs	r2, #130	; 0x82
 800199e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 031c 	and.w	r3, r3, #28
 80019b0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8a1b      	ldrh	r3, [r3, #16]
 80019b6:	02db      	lsls	r3, r3, #11
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f023 0302 	bic.w	r3, r3, #2
 80019d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e6:	f7ff fb61 	bl	80010ac <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ec:	e015      	b.n	8001a1a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019ee:	f7ff fb5d 	bl	80010ac <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fc:	d309      	bcc.n	8001a12 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e014      	b.n	8001a3c <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e4      	bne.n	80019ee <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b42      	cmp	r3, #66	; 0x42
 8001a64:	d101      	bne.n	8001a6a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
 8001a68:	e04e      	b.n	8001b08 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2242      	movs	r2, #66	; 0x42
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 031c 	and.w	r3, r3, #28
 8001a80:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8a1b      	ldrh	r3, [r3, #16]
 8001a86:	02db      	lsls	r3, r3, #11
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	019b      	lsls	r3, r3, #6
 8001a94:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff faf4 	bl	80010ac <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac6:	e015      	b.n	8001af4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ac8:	f7ff faf0 	bl	80010ac <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d309      	bcc.n	8001aec <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e00d      	b.n	8001b08 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1e4      	bne.n	8001ac8 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ETH_Start+0x16>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e01f      	b.n	8001b66 <HAL_ETH_Start+0x56>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fb3e 	bl	80021b8 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fb75 	bl	800222c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fc08 	bl	8002358 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fba9 	bl	80022a0 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fbd4 	bl	80022fc <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ETH_Stop+0x16>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e01f      	b.n	8001bc4 <HAL_ETH_Stop+0x56>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fb9a 	bl	80022ce <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fbc5 	bl	800232a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fb60 	bl	8002266 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fbd6 	bl	8002358 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb20 	bl	80021f2 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_ETH_ConfigMAC+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e0e4      	b.n	8001db2 <HAL_ETH_ConfigMAC+0x1e6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80b1 	beq.w	8001d62 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <HAL_ETH_ConfigMAC+0x1f0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c18:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001c1e:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001c24:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001c2a:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001c30:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001c36:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001c3c:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001c42:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001c48:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001c4e:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001c54:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001c5a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fa24 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001c88:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c8e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c94:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001c9a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ca0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ca6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cb2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cb4:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f9fe 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cd4:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cde:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cfc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d02:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d08:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001d0e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d14:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff f9c7 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff f9b4 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	61da      	str	r2, [r3, #28]
 8001d60:	e01e      	b.n	8001da0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d70:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff f994 	bl	80010c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	ff20810f 	.word	0xff20810f

08001dc0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b0      	sub	sp, #192	; 0xc0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ddc:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de4:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001dee:	2300      	movs	r3, #0
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0c:	e001      	b.n	8001e12 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e16:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e2c:	2340      	movs	r3, #64	; 0x40
 8001e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e98:	4baa      	ldr	r3, [pc, #680]	; (8002144 <ETH_MACDMAConfig+0x384>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ea4:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001ea8:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001eac:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001eb2:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001eb6:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001eba:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001ec0:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001ec4:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001ec8:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001ecc:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001ed0:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001ed4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ed6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff f8e3 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f02:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f08:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f0c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f12:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001f18:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f1e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f30:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f32:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7ff f8be 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4c:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f56:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f60:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f70:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f74:	4013      	ands	r3, r2
 8001f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f7e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f84:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f8a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001f8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f90:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001f96:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f9c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb0:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff f87f 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fca:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001fcc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001fd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff f86a 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff4:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffe:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002004:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002008:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002016:	2300      	movs	r3, #0
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800201a:	2304      	movs	r3, #4
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800201e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800202a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002036:	2300      	movs	r3, #0
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800203a:	2300      	movs	r3, #0
 800203c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002046:	3318      	adds	r3, #24
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800204e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <ETH_MACDMAConfig+0x388>)
 8002054:	4013      	ands	r3, r2
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800205a:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 800205c:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800205e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002060:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002062:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002064:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002066:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002068:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 800206a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800206c:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 800206e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 8002072:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002076:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 800207a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800207c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	3318      	adds	r3, #24
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	3318      	adds	r3, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff f80a 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	3318      	adds	r3, #24
 80020b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ba:	601a      	str	r2, [r3, #0]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020c0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 80020c4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020c8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80020ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020cc:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 80020ce:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80020d2:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe ffe5 	bl	80010c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002102:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10f      	bne.n	800212c <ETH_MACDMAConfig+0x36c>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	331c      	adds	r3, #28
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	331c      	adds	r3, #28
 800212a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	461a      	mov	r2, r3
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f809 	bl	800214c <ETH_MACAddressConfig>
}
 800213a:	bf00      	nop
 800213c:	37c0      	adds	r7, #192	; 0xc0
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	ff20810f 	.word	0xff20810f
 8002148:	f8de3f23 	.word	0xf8de3f23

0800214c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3305      	adds	r3, #5
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3204      	adds	r2, #4
 8002164:	7812      	ldrb	r2, [r2, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <ETH_MACAddressConfig+0x64>)
 800216e:	4413      	add	r3, r2
 8002170:	461a      	mov	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3303      	adds	r3, #3
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	061a      	lsls	r2, r3, #24
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3302      	adds	r3, #2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	4313      	orrs	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <ETH_MACAddressConfig+0x68>)
 800219e:	4413      	add	r3, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40028040 	.word	0x40028040
 80021b4:	40028044 	.word	0x40028044

080021b8 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0208 	orr.w	r2, r2, #8
 80021d2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021dc:	2001      	movs	r0, #1
 80021de:	f000 f8e5 	bl	80023ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0208 	bic.w	r2, r2, #8
 800220c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 f8c8 	bl	80023ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0204 	orr.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002250:	2001      	movs	r0, #1
 8002252:	f000 f8ab 	bl	80023ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0204 	bic.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 f88e 	bl	80023ac <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b0:	3318      	adds	r3, #24
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c0:	3318      	adds	r3, #24
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022de:	3318      	adds	r3, #24
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	3318      	adds	r3, #24
 80022f0:	601a      	str	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	3318      	adds	r3, #24
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0202 	orr.w	r2, r2, #2
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	3318      	adds	r3, #24
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	3318      	adds	r3, #24
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0202 	bic.w	r2, r2, #2
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	3318      	adds	r3, #24
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	3318      	adds	r3, #24
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237c:	3318      	adds	r3, #24
 800237e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	3318      	adds	r3, #24
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800238e:	2001      	movs	r0, #1
 8002390:	f000 f80c 	bl	80023ac <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	3318      	adds	r3, #24
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <ETH_Delay+0x34>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <ETH_Delay+0x38>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0a5b      	lsrs	r3, r3, #9
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023c8:	bf00      	nop
  }
  while (Delay --);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	60fa      	str	r2, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f9      	bne.n	80023c8 <ETH_Delay+0x1c>
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000000 	.word	0x20000000
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b08b      	sub	sp, #44	; 0x2c
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e127      	b.n	800264c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023fc:	2201      	movs	r2, #1
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 8116 	bne.w	8002646 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b12      	cmp	r3, #18
 8002420:	d034      	beq.n	800248c <HAL_GPIO_Init+0xa4>
 8002422:	2b12      	cmp	r3, #18
 8002424:	d80d      	bhi.n	8002442 <HAL_GPIO_Init+0x5a>
 8002426:	2b02      	cmp	r3, #2
 8002428:	d02b      	beq.n	8002482 <HAL_GPIO_Init+0x9a>
 800242a:	2b02      	cmp	r3, #2
 800242c:	d804      	bhi.n	8002438 <HAL_GPIO_Init+0x50>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d031      	beq.n	8002496 <HAL_GPIO_Init+0xae>
 8002432:	2b01      	cmp	r3, #1
 8002434:	d01c      	beq.n	8002470 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002436:	e048      	b.n	80024ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002438:	2b03      	cmp	r3, #3
 800243a:	d043      	beq.n	80024c4 <HAL_GPIO_Init+0xdc>
 800243c:	2b11      	cmp	r3, #17
 800243e:	d01b      	beq.n	8002478 <HAL_GPIO_Init+0x90>
          break;
 8002440:	e043      	b.n	80024ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002442:	4a89      	ldr	r2, [pc, #548]	; (8002668 <HAL_GPIO_Init+0x280>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d026      	beq.n	8002496 <HAL_GPIO_Init+0xae>
 8002448:	4a87      	ldr	r2, [pc, #540]	; (8002668 <HAL_GPIO_Init+0x280>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d806      	bhi.n	800245c <HAL_GPIO_Init+0x74>
 800244e:	4a87      	ldr	r2, [pc, #540]	; (800266c <HAL_GPIO_Init+0x284>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d020      	beq.n	8002496 <HAL_GPIO_Init+0xae>
 8002454:	4a86      	ldr	r2, [pc, #536]	; (8002670 <HAL_GPIO_Init+0x288>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01d      	beq.n	8002496 <HAL_GPIO_Init+0xae>
          break;
 800245a:	e036      	b.n	80024ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800245c:	4a85      	ldr	r2, [pc, #532]	; (8002674 <HAL_GPIO_Init+0x28c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0xae>
 8002462:	4a85      	ldr	r2, [pc, #532]	; (8002678 <HAL_GPIO_Init+0x290>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d016      	beq.n	8002496 <HAL_GPIO_Init+0xae>
 8002468:	4a84      	ldr	r2, [pc, #528]	; (800267c <HAL_GPIO_Init+0x294>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0xae>
          break;
 800246e:	e02c      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	623b      	str	r3, [r7, #32]
          break;
 8002476:	e028      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	623b      	str	r3, [r7, #32]
          break;
 8002480:	e023      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	3308      	adds	r3, #8
 8002488:	623b      	str	r3, [r7, #32]
          break;
 800248a:	e01e      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	330c      	adds	r3, #12
 8002492:	623b      	str	r3, [r7, #32]
          break;
 8002494:	e019      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800249e:	2304      	movs	r3, #4
 80024a0:	623b      	str	r3, [r7, #32]
          break;
 80024a2:	e012      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d105      	bne.n	80024b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ac:	2308      	movs	r3, #8
 80024ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	611a      	str	r2, [r3, #16]
          break;
 80024b6:	e008      	b.n	80024ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	615a      	str	r2, [r3, #20]
          break;
 80024c2:	e002      	b.n	80024ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
          break;
 80024c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	d801      	bhi.n	80024d4 <HAL_GPIO_Init+0xec>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	e001      	b.n	80024d8 <HAL_GPIO_Init+0xf0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2bff      	cmp	r3, #255	; 0xff
 80024de:	d802      	bhi.n	80024e6 <HAL_GPIO_Init+0xfe>
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x104>
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	3b08      	subs	r3, #8
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	210f      	movs	r1, #15
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	401a      	ands	r2, r3
 80024fe:	6a39      	ldr	r1, [r7, #32]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8096 	beq.w	8002646 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800251a:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_GPIO_Init+0x298>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_GPIO_Init+0x298>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_GPIO_Init+0x298>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002532:	4a54      	ldr	r2, [pc, #336]	; (8002684 <HAL_GPIO_Init+0x29c>)
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4b      	ldr	r2, [pc, #300]	; (8002688 <HAL_GPIO_Init+0x2a0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x19e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <HAL_GPIO_Init+0x2a4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x19a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a49      	ldr	r2, [pc, #292]	; (8002690 <HAL_GPIO_Init+0x2a8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x196>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_GPIO_Init+0x2ac>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x192>
 8002576:	2303      	movs	r3, #3
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x1a0>
 800257a:	2304      	movs	r3, #4
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x1a0>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x1a0>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x1a0>
 8002586:	2300      	movs	r3, #0
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002598:	493a      	ldr	r1, [pc, #232]	; (8002684 <HAL_GPIO_Init+0x29c>)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4938      	ldr	r1, [pc, #224]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
 80025be:	e006      	b.n	80025ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	4933      	ldr	r1, [pc, #204]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025da:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	492e      	ldr	r1, [pc, #184]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
 80025e6:	e006      	b.n	80025f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4929      	ldr	r1, [pc, #164]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002602:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	4924      	ldr	r1, [pc, #144]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	43db      	mvns	r3, r3
 8002618:	491f      	ldr	r1, [pc, #124]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 800261a:	4013      	ands	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800262a:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	491a      	ldr	r1, [pc, #104]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	60cb      	str	r3, [r1, #12]
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	4915      	ldr	r1, [pc, #84]	; (8002698 <HAL_GPIO_Init+0x2b0>)
 8002642:	4013      	ands	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f aed0 	bne.w	80023fc <HAL_GPIO_Init+0x14>
  }
}
 800265c:	bf00      	nop
 800265e:	372c      	adds	r7, #44	; 0x2c
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	10210000 	.word	0x10210000
 800266c:	10110000 	.word	0x10110000
 8002670:	10120000 	.word	0x10120000
 8002674:	10310000 	.word	0x10310000
 8002678:	10320000 	.word	0x10320000
 800267c:	10220000 	.word	0x10220000
 8002680:	40021000 	.word	0x40021000
 8002684:	40010000 	.word	0x40010000
 8002688:	40010800 	.word	0x40010800
 800268c:	40010c00 	.word	0x40010c00
 8002690:	40011000 	.word	0x40011000
 8002694:	40011400 	.word	0x40011400
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	041a      	lsls	r2, r3, #16
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43d9      	mvns	r1, r3
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	400b      	ands	r3, r1
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	611a      	str	r2, [r3, #16]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002700:	b08f      	sub	sp, #60	; 0x3c
 8002702:	af0a      	add	r7, sp, #40	; 0x28
 8002704:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e054      	b.n	80027ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f014 fe42 	bl	80173b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2203      	movs	r2, #3
 8002734:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 faba 	bl	8005cc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	687e      	ldr	r6, [r7, #4]
 800275c:	466d      	mov	r5, sp
 800275e:	f106 0410 	add.w	r4, r6, #16
 8002762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800276e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002772:	1d33      	adds	r3, r6, #4
 8002774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002776:	6838      	ldr	r0, [r7, #0]
 8002778:	f003 fa4e 	bl	8005c18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fab0 	bl	8005ce8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	687e      	ldr	r6, [r7, #4]
 8002790:	466d      	mov	r5, sp
 8002792:	f106 0410 	add.w	r4, r6, #16
 8002796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027a6:	1d33      	adds	r3, r6, #4
 80027a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f003 fbb4 	bl	8005f18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027c2:	b590      	push	{r4, r7, lr}
 80027c4:	b089      	sub	sp, #36	; 0x24
 80027c6:	af04      	add	r7, sp, #16
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	4608      	mov	r0, r1
 80027cc:	4611      	mov	r1, r2
 80027ce:	461a      	mov	r2, r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	70fb      	strb	r3, [r7, #3]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70bb      	strb	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_HCD_HC_Init+0x28>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e07f      	b.n	80028ea <HAL_HCD_HC_Init+0x128>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	333d      	adds	r3, #61	; 0x3d
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3338      	adds	r3, #56	; 0x38
 8002816:	787a      	ldrb	r2, [r7, #1]
 8002818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800282c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	3339      	adds	r3, #57	; 0x39
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	333f      	adds	r3, #63	; 0x3f
 8002852:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002856:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002860:	b2d8      	uxtb	r0, r3
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	333a      	adds	r3, #58	; 0x3a
 8002870:	4602      	mov	r2, r0
 8002872:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002874:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002878:	2b00      	cmp	r3, #0
 800287a:	da0a      	bge.n	8002892 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	333b      	adds	r3, #59	; 0x3b
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e009      	b.n	80028a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	333b      	adds	r3, #59	; 0x3b
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	333c      	adds	r3, #60	; 0x3c
 80028b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80028ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	787c      	ldrb	r4, [r7, #1]
 80028c2:	78ba      	ldrb	r2, [r7, #2]
 80028c4:	78f9      	ldrb	r1, [r7, #3]
 80028c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	4623      	mov	r3, r4
 80028d8:	f003 fc5e 	bl	8006198 <USB_HC_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_HCD_HC_Halt+0x1e>
 800290c:	2302      	movs	r3, #2
 800290e:	e00f      	b.n	8002930 <HAL_HCD_HC_Halt+0x3e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fe3b 	bl	800659c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	70fb      	strb	r3, [r7, #3]
 800294a:	460b      	mov	r3, r1
 800294c:	70bb      	strb	r3, [r7, #2]
 800294e:	4613      	mov	r3, r2
 8002950:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	333b      	adds	r3, #59	; 0x3b
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	787a      	ldrb	r2, [r7, #1]
 8002978:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800297a:	7c3b      	ldrb	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d114      	bne.n	80029aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3342      	adds	r3, #66	; 0x42
 8002990:	2203      	movs	r2, #3
 8002992:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	7f3a      	ldrb	r2, [r7, #28]
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e009      	b.n	80029be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	3342      	adds	r3, #66	; 0x42
 80029ba:	2202      	movs	r2, #2
 80029bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80029be:	787b      	ldrb	r3, [r7, #1]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	f200 80d6 	bhi.w	8002b72 <HAL_HCD_HC_SubmitRequest+0x23a>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	08002b5d 	.word	0x08002b5d
 80029d4:	08002a49 	.word	0x08002a49
 80029d8:	08002ad3 	.word	0x08002ad3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029dc:	7c3b      	ldrb	r3, [r7, #16]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	f040 80c9 	bne.w	8002b76 <HAL_HCD_HC_SubmitRequest+0x23e>
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80c5 	bne.w	8002b76 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80029ec:	8b3b      	ldrh	r3, [r7, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	3351      	adds	r3, #81	; 0x51
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	3351      	adds	r3, #81	; 0x51
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	3342      	adds	r3, #66	; 0x42
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a30:	e0a1      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	3342      	adds	r3, #66	; 0x42
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
      break;
 8002a46:	e096      	b.n	8002b76 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a48:	78bb      	ldrb	r3, [r7, #2]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d120      	bne.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3351      	adds	r3, #81	; 0x51
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	3342      	adds	r3, #66	; 0x42
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a78:	e07e      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e073      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3350      	adds	r3, #80	; 0x50
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3342      	adds	r3, #66	; 0x42
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
      break;
 8002aba:	e05d      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	3342      	adds	r3, #66	; 0x42
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]
      break;
 8002ad0:	e052      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ad2:	78bb      	ldrb	r3, [r7, #2]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d120      	bne.n	8002b1a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3351      	adds	r3, #81	; 0x51
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3342      	adds	r3, #66	; 0x42
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b02:	e039      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3342      	adds	r3, #66	; 0x42
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
      break;
 8002b18:	e02e      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3350      	adds	r3, #80	; 0x50
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3342      	adds	r3, #66	; 0x42
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
      break;
 8002b44:	e018      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	3342      	adds	r3, #66	; 0x42
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
      break;
 8002b5a:	e00d      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	3342      	adds	r3, #66	; 0x42
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002b76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3344      	adds	r3, #68	; 0x44
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	8b39      	ldrh	r1, [r7, #24]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4403      	add	r3, r0
 8002b9c:	3348      	adds	r3, #72	; 0x48
 8002b9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	334c      	adds	r3, #76	; 0x4c
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3339      	adds	r3, #57	; 0x39
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	335d      	adds	r3, #93	; 0x5d
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	3338      	adds	r3, #56	; 0x38
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f003 fbb9 	bl	800637c <USB_HC_StartXfer>
 8002c0a:	4603      	mov	r3, r0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f934 	bl	8005e98 <USB_GetMode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 80ef 	bne.w	8002e16 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 f919 	bl	8005e74 <USB_ReadInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80e5 	beq.w	8002e14 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f910 	bl	8005e74 <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5e:	d104      	bne.n	8002c6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 f900 	bl	8005e74 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7e:	d104      	bne.n	8002c8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f8f0 	bl	8005e74 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c9e:	d104      	bne.n	8002caa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 f8e0 	bl	8005e74 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d103      	bne.n	8002cc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f8d2 	bl	8005e74 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cda:	d115      	bne.n	8002d08 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ce4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d108      	bne.n	8002d08 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f014 fb9c 	bl	8017434 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 f986 	bl	8006014 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 f8b1 	bl	8005e74 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d102      	bne.n	8002d24 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f001 f920 	bl	8003f64 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f8a3 	bl	8005e74 <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d106      	bne.n	8002d46 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f014 fb5f 	bl	80173fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2208      	movs	r2, #8
 8002d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 f892 	bl	8005e74 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d5a:	d138      	bne.n	8002dce <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 fc0b 	bl	800657c <USB_HC_ReadInterrupt>
 8002d66:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e025      	b.n	8002dba <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d98:	d106      	bne.n	8002da8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8cd 	bl	8002f40 <HCD_HC_IN_IRQHandler>
 8002da6:	e005      	b.n	8002db4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fcd7 	bl	8003762 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d3d4      	bcc.n	8002d6e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 f84e 	bl	8005e74 <USB_ReadInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d101      	bne.n	8002de6 <HAL_HCD_IRQHandler+0x1d2>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_HCD_IRQHandler+0x1d4>
 8002de6:	2300      	movs	r3, #0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d014      	beq.n	8002e16 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0210 	bic.w	r2, r2, #16
 8002dfa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f001 f805 	bl	8003e0c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0210 	orr.w	r2, r2, #16
 8002e10:	619a      	str	r2, [r3, #24]
 8002e12:	e000      	b.n	8002e16 <HAL_HCD_IRQHandler+0x202>
      return;
 8002e14:	bf00      	nop
    }
  }
}
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_HCD_Start+0x16>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e013      	b.n	8002e5a <HAL_HCD_Start+0x3e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 ff32 	bl	8005ca8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 f945 	bl	80060da <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_HCD_Stop+0x16>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e00d      	b.n	8002e94 <HAL_HCD_Stop+0x32>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fc87 	bl	8006798 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 f8ec 	bl	8006086 <USB_ResetPort>
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	781b      	ldrb	r3, [r3, #0]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	334c      	adds	r3, #76	; 0x4c
 8002efc:	681b      	ldr	r3, [r3, #0]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 f92e 	bl	8006176 <USB_GetCurrentFrame>
 8002f1a:	4603      	mov	r3, r0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 f90a 	bl	800614a <USB_GetHostSpeed>
 8002f36:	4603      	mov	r3, r0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d119      	bne.n	8002fa4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2304      	movs	r3, #4
 8002f80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	0151      	lsls	r1, r2, #5
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	440a      	add	r2, r1
 8002f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	60d3      	str	r3, [r2, #12]
 8002fa2:	e0ce      	b.n	8003142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d12c      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335d      	adds	r3, #93	; 0x5d
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	0151      	lsls	r1, r2, #5
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	440a      	add	r2, r1
 8002ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fac4 	bl	800659c <USB_HC_Halt>
 8003014:	e095      	b.n	8003142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d109      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2320      	movs	r3, #32
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	e080      	b.n	8003142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b08      	cmp	r3, #8
 8003054:	d134      	bne.n	80030c0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	0151      	lsls	r1, r2, #5
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	440a      	add	r2, r1
 800306c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	335d      	adds	r3, #93	; 0x5d
 8003086:	2205      	movs	r2, #5
 8003088:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	2310      	movs	r3, #16
 800309a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	461a      	mov	r2, r3
 80030aa:	2308      	movs	r3, #8
 80030ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fa6f 	bl	800659c <USB_HC_Halt>
 80030be:	e040      	b.n	8003142 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d6:	d134      	bne.n	8003142 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fa4a 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	2310      	movs	r3, #16
 8003118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	335d      	adds	r3, #93	; 0x5d
 800312a:	2208      	movs	r2, #8
 800312c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003140:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003158:	d122      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	0151      	lsls	r1, r2, #5
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	440a      	add	r2, r1
 8003170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fa09 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	461a      	mov	r2, r3
 8003198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800319e:	e2dc      	b.n	800375a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 80dd 	bne.w	8003372 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	335d      	adds	r3, #93	; 0x5d
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	3358      	adds	r3, #88	; 0x58
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2301      	movs	r3, #1
 80031f0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	333f      	adds	r3, #63	; 0x3f
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	333f      	adds	r3, #63	; 0x3f
 8003218:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800321a:	2b02      	cmp	r3, #2
 800321c:	d121      	bne.n	8003262 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	0151      	lsls	r1, r2, #5
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	440a      	add	r2, r1
 8003234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003238:	f043 0302 	orr.w	r3, r3, #2
 800323c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f003 f9a7 	bl	800659c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	461a      	mov	r2, r3
 800325c:	2310      	movs	r3, #16
 800325e:	6093      	str	r3, [r2, #8]
 8003260:	e070      	b.n	8003344 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	333f      	adds	r3, #63	; 0x3f
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d12a      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	440a      	add	r2, r1
 800328e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003296:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	335c      	adds	r3, #92	; 0x5c
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	335c      	adds	r3, #92	; 0x5c
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4601      	mov	r1, r0
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f014 f8c2 	bl	8017450 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032cc:	e03a      	b.n	8003344 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	333f      	adds	r3, #63	; 0x3f
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d12f      	bne.n	8003344 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	3350      	adds	r3, #80	; 0x50
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	f083 0301 	eor.w	r3, r3, #1
 800330e:	b2d8      	uxtb	r0, r3
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	3350      	adds	r3, #80	; 0x50
 8003320:	4602      	mov	r2, r0
 8003322:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	b2d8      	uxtb	r0, r3
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	335c      	adds	r3, #92	; 0x5c
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4601      	mov	r1, r0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f014 f886 	bl	8017450 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	3350      	adds	r3, #80	; 0x50
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	f083 0301 	eor.w	r3, r3, #1
 800335a:	b2d8      	uxtb	r0, r3
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	3350      	adds	r3, #80	; 0x50
 800336c:	4602      	mov	r2, r0
 800336e:	701a      	strb	r2, [r3, #0]
}
 8003370:	e1f3      	b.n	800375a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	f040 811a 	bne.w	80035be <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	0151      	lsls	r1, r2, #5
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	440a      	add	r2, r1
 80033a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a4:	f023 0302 	bic.w	r3, r3, #2
 80033a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	335d      	adds	r3, #93	; 0x5d
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d10a      	bne.n	80033d6 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e0d9      	b.n	800358a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	335d      	adds	r3, #93	; 0x5d
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d10a      	bne.n	8003402 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	335c      	adds	r3, #92	; 0x5c
 80033fc:	2205      	movs	r2, #5
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e0c3      	b.n	800358a <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	335d      	adds	r3, #93	; 0x5d
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d00a      	beq.n	800342e <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	335d      	adds	r3, #93	; 0x5d
 8003428:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800342a:	2b08      	cmp	r3, #8
 800342c:	d156      	bne.n	80034dc <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	3358      	adds	r3, #88	; 0x58
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4403      	add	r3, r0
 8003450:	3358      	adds	r3, #88	; 0x58
 8003452:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	3358      	adds	r3, #88	; 0x58
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d914      	bls.n	8003494 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	3358      	adds	r3, #88	; 0x58
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	440b      	add	r3, r1
 800348c:	335c      	adds	r3, #92	; 0x5c
 800348e:	2204      	movs	r2, #4
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e009      	b.n	80034a8 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	335c      	adds	r3, #92	; 0x5c
 80034a4:	2202      	movs	r2, #2
 80034a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e056      	b.n	800358a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335d      	adds	r3, #93	; 0x5d
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d123      	bne.n	800353a <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	335c      	adds	r3, #92	; 0x5c
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800351c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003524:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	e027      	b.n	800358a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	440b      	add	r3, r1
 8003548:	335d      	adds	r3, #93	; 0x5d
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b07      	cmp	r3, #7
 800354e:	d11c      	bne.n	800358a <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3358      	adds	r3, #88	; 0x58
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c59      	adds	r1, r3, #1
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4403      	add	r3, r0
 8003572:	3358      	adds	r3, #88	; 0x58
 8003574:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	335c      	adds	r3, #92	; 0x5c
 8003586:	2204      	movs	r2, #4
 8003588:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2302      	movs	r3, #2
 800359a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	b2d8      	uxtb	r0, r3
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	335c      	adds	r3, #92	; 0x5c
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4601      	mov	r1, r0
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f013 ff4a 	bl	8017450 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035bc:	e0cd      	b.n	800375a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d13e      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	3358      	adds	r3, #88	; 0x58
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4403      	add	r3, r0
 8003616:	3358      	adds	r3, #88	; 0x58
 8003618:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	335d      	adds	r3, #93	; 0x5d
 800362a:	2206      	movs	r2, #6
 800362c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f002 ffaf 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	461a      	mov	r2, r3
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	6093      	str	r3, [r2, #8]
}
 8003650:	e083      	b.n	800375a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d178      	bne.n	800375a <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	440b      	add	r3, r1
 8003676:	333f      	adds	r3, #63	; 0x3f
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d122      	bne.n	80036c4 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	3358      	adds	r3, #88	; 0x58
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 ff6d 	bl	800659c <USB_HC_Halt>
 80036c2:	e041      	b.n	8003748 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	333f      	adds	r3, #63	; 0x3f
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	440b      	add	r3, r1
 80036e8:	333f      	adds	r3, #63	; 0x3f
 80036ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d12b      	bne.n	8003748 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3358      	adds	r3, #88	; 0x58
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	335d      	adds	r3, #93	; 0x5d
 8003714:	2203      	movs	r2, #3
 8003716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f002 ff2a 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	461a      	mov	r2, r3
 8003756:	2310      	movs	r3, #16
 8003758:	6093      	str	r3, [r2, #8]
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	460b      	mov	r3, r1
 800376c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d119      	bne.n	80037c6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	2304      	movs	r3, #4
 80037a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80037c4:	e31e      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d141      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	461a      	mov	r2, r3
 80037ea:	2320      	movs	r3, #32
 80037ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	333d      	adds	r3, #61	; 0x3d
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 82ff 	bne.w	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	333d      	adds	r3, #61	; 0x3d
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	335c      	adds	r3, #92	; 0x5c
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	440a      	add	r2, r1
 8003844:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fe9f 	bl	800659c <USB_HC_Halt>
}
 800385e:	e2d1      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d13f      	bne.n	80038f6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	335d      	adds	r3, #93	; 0x5d
 8003886:	2204      	movs	r2, #4
 8003888:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	333d      	adds	r3, #61	; 0x3d
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	3358      	adds	r3, #88	; 0x58
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fe5d 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	461a      	mov	r2, r3
 80038f0:	2340      	movs	r3, #64	; 0x40
 80038f2:	6093      	str	r3, [r2, #8]
}
 80038f4:	e286      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390c:	d122      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	440a      	add	r2, r1
 8003924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fe2f 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	461a      	mov	r2, r3
 800394c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003950:	6093      	str	r3, [r2, #8]
}
 8003952:	e257      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d135      	bne.n	80039d6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	3358      	adds	r3, #88	; 0x58
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	440a      	add	r2, r1
 8003994:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fdf7 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	2301      	movs	r3, #1
 80039be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	335d      	adds	r3, #93	; 0x5d
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
}
 80039d4:	e216      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d12b      	bne.n	8003a44 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f8:	461a      	mov	r2, r3
 80039fa:	2308      	movs	r3, #8
 80039fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fdb7 	bl	800659c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	335d      	adds	r3, #93	; 0x5d
 8003a3e:	2205      	movs	r2, #5
 8003a40:	701a      	strb	r2, [r3, #0]
}
 8003a42:	e1df      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d135      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	440b      	add	r3, r1
 8003a68:	3358      	adds	r3, #88	; 0x58
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	440b      	add	r3, r1
 8003a7c:	335d      	adds	r3, #93	; 0x5d
 8003a7e:	2203      	movs	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f002 fd75 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	6093      	str	r3, [r2, #8]
}
 8003ac4:	e19e      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d12b      	bne.n	8003b34 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fd48 	bl	800659c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	440b      	add	r3, r1
 8003b1a:	335d      	adds	r3, #93	; 0x5d
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	6093      	str	r3, [r2, #8]
}
 8003b32:	e167      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4a:	d135      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 fd10 	bl	800659c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	440b      	add	r3, r1
 8003bb0:	335d      	adds	r3, #93	; 0x5d
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	701a      	strb	r2, [r3, #0]
}
 8003bb6:	e125      	b.n	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	f040 811a 	bne.w	8003e04 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bea:	f023 0302 	bic.w	r3, r3, #2
 8003bee:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	335d      	adds	r3, #93	; 0x5d
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d137      	bne.n	8003c76 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	440b      	add	r3, r1
 8003c14:	335c      	adds	r3, #92	; 0x5c
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	440b      	add	r3, r1
 8003c28:	333f      	adds	r3, #63	; 0x3f
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d00b      	beq.n	8003c48 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	333f      	adds	r3, #63	; 0x3f
 8003c40:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	f040 80c5 	bne.w	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	3351      	adds	r3, #81	; 0x51
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f083 0301 	eor.w	r3, r3, #1
 8003c5e:	b2d8      	uxtb	r0, r3
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3351      	adds	r3, #81	; 0x51
 8003c70:	4602      	mov	r2, r0
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e0ad      	b.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	335d      	adds	r3, #93	; 0x5d
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d10a      	bne.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	335c      	adds	r3, #92	; 0x5c
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e097      	b.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	335d      	adds	r3, #93	; 0x5d
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d10a      	bne.n	8003cce <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	2202      	movs	r2, #2
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e081      	b.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	440b      	add	r3, r1
 8003cdc:	335d      	adds	r3, #93	; 0x5d
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10a      	bne.n	8003cfa <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	335c      	adds	r3, #92	; 0x5c
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e06b      	b.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	335d      	adds	r3, #93	; 0x5d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d00a      	beq.n	8003d26 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	335d      	adds	r3, #93	; 0x5d
 8003d20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d155      	bne.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	3358      	adds	r3, #88	; 0x58
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1c59      	adds	r1, r3, #1
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4403      	add	r3, r0
 8003d48:	3358      	adds	r3, #88	; 0x58
 8003d4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3358      	adds	r3, #88	; 0x58
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d914      	bls.n	8003d8c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	3358      	adds	r3, #88	; 0x58
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	335c      	adds	r3, #92	; 0x5c
 8003d86:	2204      	movs	r2, #4
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e009      	b.n	8003da0 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	335c      	adds	r3, #92	; 0x5c
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dbe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2302      	movs	r3, #2
 8003de2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	b2d8      	uxtb	r0, r3
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	335c      	adds	r3, #92	; 0x5c
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f013 fb26 	bl	8017450 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	0c5b      	lsrs	r3, r3, #17
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e40:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d003      	beq.n	8003e50 <HCD_RXQLVL_IRQHandler+0x44>
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	f000 8082 	beq.w	8003f52 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e4e:	e083      	b.n	8003f58 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d07f      	beq.n	8003f56 <HCD_RXQLVL_IRQHandler+0x14a>
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	3344      	adds	r3, #68	; 0x44
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d074      	beq.n	8003f56 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3344      	adds	r3, #68	; 0x44
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	b292      	uxth	r2, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	f001 ffcc 	bl	8005e24 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	440b      	add	r3, r1
 8003e9a:	3344      	adds	r3, #68	; 0x44
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4403      	add	r3, r0
 8003eb0:	3344      	adds	r3, #68	; 0x44
 8003eb2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	440b      	add	r3, r1
 8003ec2:	334c      	adds	r3, #76	; 0x4c
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	18d1      	adds	r1, r2, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4403      	add	r3, r0
 8003ed8:	334c      	adds	r3, #76	; 0x4c
 8003eda:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HCD_RXQLVL_IRQHandler+0x154>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d031      	beq.n	8003f56 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f08:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f10:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	3350      	adds	r3, #80	; 0x50
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2d8      	uxtb	r0, r3
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	3350      	adds	r3, #80	; 0x50
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	701a      	strb	r2, [r3, #0]
      break;
 8003f50:	e001      	b.n	8003f56 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003f56:	bf00      	nop
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	1ff80000 	.word	0x1ff80000

08003f64 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f90:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d10b      	bne.n	8003fb4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f013 fa36 	bl	8017418 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d132      	bne.n	8004024 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f043 0308 	orr.w	r3, r3, #8
 8003fc4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d126      	bne.n	800401e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d113      	bne.n	8004000 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fe2:	d106      	bne.n	8003ff2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 f812 	bl	8006014 <USB_InitFSLSPClkSel>
 8003ff0:	e011      	b.n	8004016 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 f80b 	bl	8006014 <USB_InitFSLSPClkSel>
 8003ffe:	e00a      	b.n	8004016 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d106      	bne.n	8004016 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800400e:	461a      	mov	r2, r3
 8004010:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004014:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f013 fa27 	bl	801746a <HAL_HCD_PortEnabled_Callback>
 800401c:	e002      	b.n	8004024 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f013 fa31 	bl	8017486 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b20      	cmp	r3, #32
 800402c:	d103      	bne.n	8004036 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f043 0320 	orr.w	r3, r3, #32
 8004034:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	420e0020 	.word	0x420e0020

08004064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e304      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8087 	beq.w	8004192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004084:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b04      	cmp	r3, #4
 800408e:	d00c      	beq.n	80040aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004090:	4b8f      	ldr	r3, [pc, #572]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	d112      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
 800409c:	4b8c      	ldr	r3, [pc, #560]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4b89      	ldr	r3, [pc, #548]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06c      	beq.n	8004190 <HAL_RCC_OscConfig+0x12c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d168      	bne.n	8004190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e2de      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x76>
 80040cc:	4b80      	ldr	r3, [pc, #512]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7f      	ldr	r2, [pc, #508]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e02e      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x98>
 80040e2:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a7a      	ldr	r2, [pc, #488]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b78      	ldr	r3, [pc, #480]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a77      	ldr	r2, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0xbc>
 8004106:	4b72      	ldr	r3, [pc, #456]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xd4>
 8004120:	4b6b      	ldr	r3, [pc, #428]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a6a      	ldr	r2, [pc, #424]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b68      	ldr	r3, [pc, #416]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fc ffb4 	bl	80010ac <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004148:	f7fc ffb0 	bl	80010ac <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e292      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b5d      	ldr	r3, [pc, #372]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xe4>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fc ffa0 	bl	80010ac <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004170:	f7fc ff9c 	bl	80010ac <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e27e      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x10c>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419e:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041aa:	4b49      	ldr	r3, [pc, #292]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
 80041b6:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b43      	ldr	r3, [pc, #268]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e252      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4939      	ldr	r1, [pc, #228]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fc ff55 	bl	80010ac <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fc ff51 	bl	80010ac <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e233      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4927      	ldr	r1, [pc, #156]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fc ff34 	bl	80010ac <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fc ff30 	bl	80010ac <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e212      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d03a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d019      	beq.n	80042ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x274>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fc ff14 	bl	80010ac <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004288:	f7fc ff10 	bl	80010ac <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1f2      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCC_OscConfig+0x26c>)
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 fbf2 	bl	8004a90 <RCC_Delay>
 80042ac:	e01c      	b.n	80042e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_RCC_OscConfig+0x274>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b4:	f7fc fefa 	bl	80010ac <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ba:	e00f      	b.n	80042dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042bc:	f7fc fef6 	bl	80010ac <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d908      	bls.n	80042dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1d8      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	42420000 	.word	0x42420000
 80042d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	4b9b      	ldr	r3, [pc, #620]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e9      	bne.n	80042bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80a6 	beq.w	8004442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042fa:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004306:	4b91      	ldr	r3, [pc, #580]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4a90      	ldr	r2, [pc, #576]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004310:	61d3      	str	r3, [r2, #28]
 8004312:	4b8e      	ldr	r3, [pc, #568]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b8b      	ldr	r3, [pc, #556]	; (8004550 <HAL_RCC_OscConfig+0x4ec>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d118      	bne.n	8004360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCC_OscConfig+0x4ec>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a87      	ldr	r2, [pc, #540]	; (8004550 <HAL_RCC_OscConfig+0x4ec>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fc feb7 	bl	80010ac <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fc feb3 	bl	80010ac <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e195      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	4b7e      	ldr	r3, [pc, #504]	; (8004550 <HAL_RCC_OscConfig+0x4ec>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x312>
 8004368:	4b78      	ldr	r3, [pc, #480]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4a77      	ldr	r2, [pc, #476]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	e02d      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x334>
 800437e:	4b73      	ldr	r3, [pc, #460]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a72      	ldr	r2, [pc, #456]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b70      	ldr	r3, [pc, #448]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a6f      	ldr	r2, [pc, #444]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
 8004396:	e01c      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x356>
 80043a0:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a69      	ldr	r2, [pc, #420]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	4b67      	ldr	r3, [pc, #412]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	4a66      	ldr	r2, [pc, #408]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6213      	str	r3, [r2, #32]
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x36e>
 80043ba:	4b64      	ldr	r3, [pc, #400]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a63      	ldr	r2, [pc, #396]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a60      	ldr	r2, [pc, #384]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fc fe67 	bl	80010ac <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fc fe63 	bl	80010ac <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e143      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	4b54      	ldr	r3, [pc, #336]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x37e>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004406:	f7fc fe51 	bl	80010ac <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fc fe4d 	bl	80010ac <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e12d      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	4b49      	ldr	r3, [pc, #292]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b45      	ldr	r3, [pc, #276]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a44      	ldr	r2, [pc, #272]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 808c 	beq.w	8004564 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d10e      	bne.n	8004478 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800445a:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004462:	2b08      	cmp	r3, #8
 8004464:	d108      	bne.n	8004478 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004466:	4b39      	ldr	r3, [pc, #228]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d101      	bne.n	8004478 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e103      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	2b02      	cmp	r3, #2
 800447e:	d14e      	bne.n	800451e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004480:	4b32      	ldr	r3, [pc, #200]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800448c:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0ef      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <HAL_RCC_OscConfig+0x4f0>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fc fe01 	bl	80010ac <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044ae:	f7fc fdfd 	bl	80010ac <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b64      	cmp	r3, #100	; 0x64
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0df      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80044c0:	4b22      	ldr	r3, [pc, #136]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80044cc:	4b1f      	ldr	r3, [pc, #124]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	491c      	ldr	r1, [pc, #112]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	4918      	ldr	r1, [pc, #96]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCC_OscConfig+0x4f0>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fc fdd9 	bl	80010ac <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044fe:	f7fc fdd5 	bl	80010ac <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	; 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0b7      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004510:	4b0e      	ldr	r3, [pc, #56]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x49a>
 800451c:	e022      	b.n	8004564 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_RCC_OscConfig+0x4e8>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_RCC_OscConfig+0x4f0>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fc fdbc 	bl	80010ac <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004536:	e00f      	b.n	8004558 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004538:	f7fc fdb8 	bl	80010ac <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d908      	bls.n	8004558 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e09a      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	40007000 	.word	0x40007000
 8004554:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004558:	4b4b      	ldr	r3, [pc, #300]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e9      	bne.n	8004538 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8088 	beq.w	800467e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456e:	4b46      	ldr	r3, [pc, #280]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	d068      	beq.n	800464c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d14d      	bne.n	800461e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004582:	4b42      	ldr	r3, [pc, #264]	; (800468c <HAL_RCC_OscConfig+0x628>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fc fd90 	bl	80010ac <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fc fd8c 	bl	80010ac <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e06e      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d10f      	bne.n	80045d8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80045b8:	4b33      	ldr	r3, [pc, #204]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4931      	ldr	r1, [pc, #196]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c6:	4b30      	ldr	r3, [pc, #192]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f023 020f 	bic.w	r2, r3, #15
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	492d      	ldr	r1, [pc, #180]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	430b      	orrs	r3, r1
 80045ea:	4927      	ldr	r1, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <HAL_RCC_OscConfig+0x628>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fc fd59 	bl	80010ac <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fc fd55 	bl	80010ac <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e037      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x59a>
 800461c:	e02f      	b.n	800467e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x628>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fc fd42 	bl	80010ac <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7fc fd3e 	bl	80010ac <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e020      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x5c8>
 800464a:	e018      	b.n	800467e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e013      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_OscConfig+0x624>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	429a      	cmp	r2, r3
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	42420060 	.word	0x42420060

08004690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0d0      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b67      	ldr	r3, [pc, #412]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 0207 	bic.w	r2, r3, #7
 80046ba:	4965      	ldr	r1, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800470e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d040      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d115      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e073      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e06b      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4936      	ldr	r1, [pc, #216]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004780:	f7fc fc94 	bl	80010ac <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fc fc90 	bl	80010ac <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e053      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d210      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 0207 	bic.w	r2, r3, #7
 80047c6:	4922      	ldr	r1, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4601      	mov	r1, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	5cd3      	ldrb	r3, [r2, r3]
 8004832:	fa21 f303 	lsr.w	r3, r1, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1cc>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1d0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc fbf2 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40022000 	.word	0x40022000
 8004854:	40021000 	.word	0x40021000
 8004858:	0801ab7c 	.word	0x0801ab7c
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004868:	b091      	sub	sp, #68	; 0x44
 800486a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800486c:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1b4>)
 800486e:	f107 0414 	add.w	r4, r7, #20
 8004872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004874:	c407      	stmia	r4!, {r0, r1, r2}
 8004876:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800487a:	1d3c      	adds	r4, r7, #4
 800487c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800487e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	637b      	str	r3, [r7, #52]	; 0x34
 8004886:	2300      	movs	r3, #0
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
 800488a:	2300      	movs	r3, #0
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488e:	2300      	movs	r3, #0
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800489e:	4b60      	ldr	r3, [pc, #384]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x50>
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x56>
 80048b2:	e0a7      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b4:	4b5b      	ldr	r3, [pc, #364]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048b8:	e0a7      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	0c9b      	lsrs	r3, r3, #18
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80048c6:	4413      	add	r3, r2
 80048c8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 808d 	beq.w	80049f4 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80048da:	4b51      	ldr	r3, [pc, #324]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80048e6:	4413      	add	r3, r2
 80048e8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80048ec:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80048ee:	4b4c      	ldr	r3, [pc, #304]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d06a      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80048fa:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	3301      	adds	r3, #1
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004908:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3302      	adds	r3, #2
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	fb03 f502 	mul.w	r5, r3, r2
 8004928:	fb01 f004 	mul.w	r0, r1, r4
 800492c:	4428      	add	r0, r5
 800492e:	fba1 5603 	umull	r5, r6, r1, r3
 8004932:	1983      	adds	r3, r0, r6
 8004934:	461e      	mov	r6, r3
 8004936:	4629      	mov	r1, r5
 8004938:	4632      	mov	r2, r6
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	0154      	lsls	r4, r2, #5
 8004944:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004948:	014b      	lsls	r3, r1, #5
 800494a:	4619      	mov	r1, r3
 800494c:	4622      	mov	r2, r4
 800494e:	1b49      	subs	r1, r1, r5
 8004950:	eb62 0206 	sbc.w	r2, r2, r6
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	0194      	lsls	r4, r2, #6
 800495e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	1a5b      	subs	r3, r3, r1
 8004966:	eb64 0402 	sbc.w	r4, r4, r2
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	00e2      	lsls	r2, r4, #3
 8004974:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004978:	00d9      	lsls	r1, r3, #3
 800497a:	460b      	mov	r3, r1
 800497c:	4614      	mov	r4, r2
 800497e:	195b      	adds	r3, r3, r5
 8004980:	eb44 0406 	adc.w	r4, r4, r6
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	0262      	lsls	r2, r4, #9
 800498e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004992:	0259      	lsls	r1, r3, #9
 8004994:	460b      	mov	r3, r1
 8004996:	4614      	mov	r4, r2
 8004998:	4698      	mov	r8, r3
 800499a:	46a1      	mov	r9, r4
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	4619      	mov	r1, r3
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	fb03 f502 	mul.w	r5, r3, r2
 80049ae:	fb01 f004 	mul.w	r0, r1, r4
 80049b2:	4428      	add	r0, r5
 80049b4:	fba1 3403 	umull	r3, r4, r1, r3
 80049b8:	1902      	adds	r2, r0, r4
 80049ba:	4614      	mov	r4, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	4640      	mov	r0, r8
 80049c2:	4649      	mov	r1, r9
 80049c4:	f7fb fc2e 	bl	8000224 <__aeabi_uldivmod>
 80049c8:	4603      	mov	r3, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ce:	e007      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049d4:	fb02 f203 	mul.w	r2, r2, r3
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80049e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80049e4:	461a      	mov	r2, r3
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f2:	e004      	b.n	80049fe <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	4a0c      	ldr	r2, [pc, #48]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1c4>)
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3744      	adds	r7, #68	; 0x44
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a16:	bf00      	nop
 8004a18:	08018970 	.word	0x08018970
 8004a1c:	08018980 	.word	0x08018980
 8004a20:	40021000 	.word	0x40021000
 8004a24:	007a1200 	.word	0x007a1200
 8004a28:	003d0900 	.word	0x003d0900

08004a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b02      	ldr	r3, [pc, #8]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	20000000 	.word	0x20000000

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a44:	f7ff fff2 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a48:	4601      	mov	r1, r0
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	0801ab8c 	.word	0x0801ab8c

08004a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a6c:	f7ff ffde 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a70:	4601      	mov	r1, r0
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0adb      	lsrs	r3, r3, #11
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7e:	5cd3      	ldrb	r3, [r2, r3]
 8004a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	0801ab8c 	.word	0x0801ab8c

08004a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <RCC_Delay+0x34>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <RCC_Delay+0x38>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0a5b      	lsrs	r3, r3, #9
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aac:	bf00      	nop
  }
  while (Delay --);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1e5a      	subs	r2, r3, #1
 8004ab2:	60fa      	str	r2, [r7, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f9      	bne.n	8004aac <RCC_Delay+0x1c>
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	10624dd3 	.word	0x10624dd3

08004acc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d07d      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af0:	4b8b      	ldr	r3, [pc, #556]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a87      	ldr	r2, [pc, #540]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b06:	61d3      	str	r3, [r2, #28]
 8004b08:	4b85      	ldr	r3, [pc, #532]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b18:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d118      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b24:	4b7f      	ldr	r3, [pc, #508]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a7e      	ldr	r2, [pc, #504]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b30:	f7fc fabc 	bl	80010ac <HAL_GetTick>
 8004b34:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	e008      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fc fab8 	bl	80010ac <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e0e5      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b56:	4b72      	ldr	r3, [pc, #456]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02e      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d027      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b74:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b8a:	4a65      	ldr	r2, [pc, #404]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9a:	f7fc fa87 	bl	80010ac <HAL_GetTick>
 8004b9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fc fa83 	bl	80010ac <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e0ae      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ee      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc4:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4953      	ldr	r1, [pc, #332]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bd6:	7efb      	ldrb	r3, [r7, #27]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	4a4f      	ldr	r2, [pc, #316]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf4:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4947      	ldr	r1, [pc, #284]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c12:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	4940      	ldr	r1, [pc, #256]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	4938      	ldr	r1, [pc, #224]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8004c42:	4b37      	ldr	r3, [pc, #220]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d148      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8004c64:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d138      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004c70:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e042      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8004c90:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	4920      	ldr	r1, [pc, #128]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	491c      	ldr	r1, [pc, #112]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fc f9f7 	bl	80010ac <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cc2:	f7fc f9f3 	bl	80010ac <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b64      	cmp	r3, #100	; 0x64
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e020      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cd4:	4b12      	ldr	r3, [pc, #72]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ce0:	e009      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e00f      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d008      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d02:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4904      	ldr	r1, [pc, #16]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42420440 	.word	0x42420440
 8004d2c:	42420070 	.word	0x42420070

08004d30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b093      	sub	sp, #76	; 0x4c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004d38:	4ba9      	ldr	r3, [pc, #676]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8004d3a:	f107 0418 	add.w	r4, r7, #24
 8004d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d40:	c407      	stmia	r4!, {r0, r1, r2}
 8004d42:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004d44:	4ba7      	ldr	r3, [pc, #668]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d46:	f107 0408 	add.w	r4, r7, #8
 8004d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d54:	2300      	movs	r3, #0
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44
 8004d58:	2300      	movs	r3, #0
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d60:	2300      	movs	r3, #0
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
 8004d64:	2300      	movs	r3, #0
 8004d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	f200 8124 	bhi.w	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004f41 	.word	0x08004f41
 8004d84:	08004fa7 	.word	0x08004fa7
 8004d88:	08004fc3 	.word	0x08004fc3
 8004d8c:	08004e9f 	.word	0x08004e9f
 8004d90:	08004fc3 	.word	0x08004fc3
 8004d94:	08004fc3 	.word	0x08004fc3
 8004d98:	08004fc3 	.word	0x08004fc3
 8004d9c:	08004ef1 	.word	0x08004ef1
 8004da0:	08004fc3 	.word	0x08004fc3
 8004da4:	08004fc3 	.word	0x08004fc3
 8004da8:	08004fc3 	.word	0x08004fc3
 8004dac:	08004fc3 	.word	0x08004fc3
 8004db0:	08004fc3 	.word	0x08004fc3
 8004db4:	08004fc3 	.word	0x08004fc3
 8004db8:	08004fc3 	.word	0x08004fc3
 8004dbc:	08004dc1 	.word	0x08004dc1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004dc0:	4b89      	ldr	r3, [pc, #548]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dc6:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80f9 	beq.w	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	0c9b      	lsrs	r3, r3, #18
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004de0:	4413      	add	r3, r2
 8004de2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d03e      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004df2:	4b7d      	ldr	r3, [pc, #500]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dfe:	4413      	add	r3, r2
 8004e00:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8004e04:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004e06:	4b78      	ldr	r3, [pc, #480]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01c      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004e12:	4b75      	ldr	r3, [pc, #468]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004e20:	4b71      	ldr	r3, [pc, #452]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	0a1b      	lsrs	r3, r3, #8
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8004e2e:	4a6f      	ldr	r2, [pc, #444]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e38:	fb02 f203 	mul.w	r2, r2, r3
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	fb02 f303 	mul.w	r3, r2, r3
 8004e48:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4a:	e007      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e4c:	4a67      	ldr	r2, [pc, #412]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004e5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e60:	461a      	mov	r2, r3
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	e004      	b.n	8004e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	4a5f      	ldr	r2, [pc, #380]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8004e7a:	4b5b      	ldr	r3, [pc, #364]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d102      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8004e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004e8c:	e09b      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          frequency = (2 * pllclk) / 3;
 8004e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004e9c:	e093      	b.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8004e9e:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004eaa:	f7ff fcdb 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004eae:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004eb0:	e08b      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8085 	beq.w	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004ec0:	4b49      	ldr	r3, [pc, #292]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	3301      	adds	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8004ece:	4b46      	ldr	r3, [pc, #280]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	0b1b      	lsrs	r3, r3, #12
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	3302      	adds	r3, #2
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004edc:	4a43      	ldr	r2, [pc, #268]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004eee:	e06c      	b.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d103      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8004efc:	f7ff fcb2 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004f00:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004f02:	e064      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8004f04:	4b38      	ldr	r3, [pc, #224]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d05e      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004f10:	4b35      	ldr	r3, [pc, #212]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	0b1b      	lsrs	r3, r3, #12
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	3302      	adds	r3, #2
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8004f2c:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004f3e:	e046      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004f40:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f50:	d108      	bne.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8004f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
 8004f62:	e01f      	b.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004f70:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 8004f7c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
 8004f82:	e00f      	b.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d120      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      {
        frequency = HSE_VALUE / 128U;
 8004f9c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fa0:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004fa2:	e016      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004fa6:	f7ff fd5f 	bl	8004a68 <HAL_RCC_GetPCLK2Freq>
 8004faa:	4602      	mov	r2, r0
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	0b9b      	lsrs	r3, r3, #14
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
    }
    default:
    {
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e006      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004fc6:	bf00      	nop
 8004fc8:	e004      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
      break;
 8004fd2:	bf00      	nop
    }
  }
  return (frequency);
 8004fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	374c      	adds	r7, #76	; 0x4c
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08018990 	.word	0x08018990
 8004fe4:	080189a0 	.word	0x080189a0
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	007a1200 	.word	0x007a1200
 8004ff0:	003d0900 	.word	0x003d0900
 8004ff4:	aaaaaaab 	.word	0xaaaaaaab

08004ff8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e084      	b.n	8005118 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	7c5b      	ldrb	r3, [r3, #17]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fb fdd6 	bl	8000bd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f87a 	bl	8005124 <HAL_RTC_WaitForSynchro>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e06b      	b.n	8005118 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f89c 	bl	800517e <RTC_EnterInitMode>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e060      	b.n	8005118 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0207 	bic.w	r2, r2, #7
 8005064:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800506e:	4b2c      	ldr	r3, [pc, #176]	; (8005120 <HAL_RTC_Init+0x128>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <HAL_RTC_Init+0x128>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <HAL_RTC_Init+0x128>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4926      	ldr	r1, [pc, #152]	; (8005120 <HAL_RTC_Init+0x128>)
 8005088:	4313      	orrs	r3, r2
 800508a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005094:	d003      	beq.n	800509e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e00e      	b.n	80050bc <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800509e:	2001      	movs	r0, #1
 80050a0:	f7ff fe46 	bl	8004d30 <HAL_RCCEx_GetPeriphCLKFreq>
 80050a4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d104      	bne.n	80050b6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2204      	movs	r2, #4
 80050b0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e030      	b.n	8005118 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 010f 	bic.w	r1, r3, #15
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	0c1a      	lsrs	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	b291      	uxth	r1, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f870 	bl	80051ce <RTC_ExitInitMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00c      	b.n	8005118 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005116:	2300      	movs	r3, #0
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40006c00 	.word	0x40006c00

08005124 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e01d      	b.n	8005176 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0208 	bic.w	r2, r2, #8
 8005148:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800514a:	f7fb ffaf 	bl	80010ac <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005150:	e009      	b.n	8005166 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005152:	f7fb ffab 	bl	80010ac <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005160:	d901      	bls.n	8005166 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e007      	b.n	8005176 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ee      	beq.n	8005152 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800518a:	f7fb ff8f 	bl	80010ac <HAL_GetTick>
 800518e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005190:	e009      	b.n	80051a6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005192:	f7fb ff8b 	bl	80010ac <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a0:	d901      	bls.n	80051a6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e00f      	b.n	80051c6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ee      	beq.n	8005192 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0210 	orr.w	r2, r2, #16
 80051c2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0210 	bic.w	r2, r2, #16
 80051e8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80051ea:	f7fb ff5f 	bl	80010ac <HAL_GetTick>
 80051ee:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051f0:	e009      	b.n	8005206 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80051f2:	f7fb ff5b 	bl	80010ac <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005200:	d901      	bls.n	8005206 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e007      	b.n	8005216 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ee      	beq.n	80051f2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e076      	b.n	800531e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005240:	d009      	beq.n	8005256 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	61da      	str	r2, [r3, #28]
 8005248:	e005      	b.n	8005256 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fb fcd1 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	ea42 0103 	orr.w	r1, r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	0c1a      	lsrs	r2, r3, #16
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f002 0204 	and.w	r2, r2, #4
 80052fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e041      	b.n	80053bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fb fd07 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f000 f937 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e037      	b.n	800544c <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_TIM_Base_Start+0x94>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_TIM_Base_Start+0x52>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d00e      	beq.n	8005416 <HAL_TIM_Base_Start+0x52>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a17      	ldr	r2, [pc, #92]	; (800545c <HAL_TIM_Base_Start+0x98>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_TIM_Base_Start+0x52>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <HAL_TIM_Base_Start+0x9c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_TIM_Base_Start+0x52>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <HAL_TIM_Base_Start+0xa0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d111      	bne.n	800543a <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d010      	beq.n	800544a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	e007      	b.n	800544a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	bc80      	pop	{r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00

08005468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIM_ConfigClockSource+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e0a6      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x166>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800549e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d067      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x120>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d80b      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x6c>
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d073      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x140>
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d802      	bhi.n	80054ca <HAL_TIM_ConfigClockSource+0x62>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d06f      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054c8:	e078      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d06c      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x140>
 80054ce:	2b30      	cmp	r3, #48	; 0x30
 80054d0:	d06a      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054d2:	e073      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d00d      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x8c>
 80054d8:	2b70      	cmp	r3, #112	; 0x70
 80054da:	d804      	bhi.n	80054e6 <HAL_TIM_ConfigClockSource+0x7e>
 80054dc:	2b50      	cmp	r3, #80	; 0x50
 80054de:	d033      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0xe0>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d041      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054e4:	e06a      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d066      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x152>
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d017      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80054f2:	e063      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6899      	ldr	r1, [r3, #8]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f000 f94b 	bl	800579e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005516:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e04c      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6899      	ldr	r1, [r3, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f000 f934 	bl	800579e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005544:	609a      	str	r2, [r3, #8]
      break;
 8005546:	e039      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	461a      	mov	r2, r3
 8005556:	f000 f8ab 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2150      	movs	r1, #80	; 0x50
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f902 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005566:	e029      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	461a      	mov	r2, r3
 8005576:	f000 f8c9 	bl	800570c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2160      	movs	r1, #96	; 0x60
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f8f2 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005586:	e019      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	f000 f88b 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2140      	movs	r1, #64	; 0x40
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f8e2 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 80055a6:	e009      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 f8d9 	bl	800576a <TIM_ITRx_SetConfig>
        break;
 80055b8:	e000      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	; (80056a0 <TIM_Base_SetConfig+0xc8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00f      	beq.n	8005610 <TIM_Base_SetConfig+0x38>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d00b      	beq.n	8005610 <TIM_Base_SetConfig+0x38>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <TIM_Base_SetConfig+0xcc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_Base_SetConfig+0x38>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <TIM_Base_SetConfig+0xd0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_Base_SetConfig+0x38>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a28      	ldr	r2, [pc, #160]	; (80056ac <TIM_Base_SetConfig+0xd4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d108      	bne.n	8005622 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <TIM_Base_SetConfig+0xc8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00f      	beq.n	800564a <TIM_Base_SetConfig+0x72>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d00b      	beq.n	800564a <TIM_Base_SetConfig+0x72>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <TIM_Base_SetConfig+0xcc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_Base_SetConfig+0x72>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_Base_SetConfig+0xd0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_Base_SetConfig+0x72>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_Base_SetConfig+0xd4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <TIM_Base_SetConfig+0xc8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d103      	bne.n	8005690 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	615a      	str	r2, [r3, #20]
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00

080056b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 030a 	bic.w	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f023 0210 	bic.w	r2, r3, #16
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 0307 	orr.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e04b      	b.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d00e      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a15      	ldr	r2, [pc, #84]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10c      	bne.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00

080058a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e03f      	b.n	800593a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fa64 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2224      	movs	r2, #36	; 0x24
 80058d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f905 	bl	8005afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695a      	ldr	r2, [r3, #20]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b08a      	sub	sp, #40	; 0x28
 8005946:	af02      	add	r7, sp, #8
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	d17c      	bne.n	8005a5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_UART_Transmit+0x2c>
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e075      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005978:	2b01      	cmp	r3, #1
 800597a:	d101      	bne.n	8005980 <HAL_UART_Transmit+0x3e>
 800597c:	2302      	movs	r3, #2
 800597e:	e06e      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	; 0x21
 8005992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005996:	f7fb fb89 	bl	80010ac <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	88fa      	ldrh	r2, [r7, #6]
 80059a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d108      	bne.n	80059c4 <HAL_UART_Transmit+0x82>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e003      	b.n	80059cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80059d4:	e02a      	b.n	8005a2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f840 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e036      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	3302      	adds	r3, #2
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e007      	b.n	8005a1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1cf      	bne.n	80059d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2140      	movs	r1, #64	; 0x40
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f810 	bl	8005a66 <UART_WaitOnFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e006      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e000      	b.n	8005a5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	e02c      	b.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7e:	d028      	beq.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	f7fb fb11 	bl	80010ac <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d21d      	bcs.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005aa4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0201 	bic.w	r2, r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e00f      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d0c3      	beq.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b36:	f023 030c 	bic.w	r3, r3, #12
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2c      	ldr	r2, [pc, #176]	; (8005c10 <UART_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d103      	bne.n	8005b6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b64:	f7fe ff80 	bl	8004a68 <HAL_RCC_GetPCLK2Freq>
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	e002      	b.n	8005b72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b6c:	f7fe ff68 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8005b70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009a      	lsls	r2, r3, #2
 8005b7c:	441a      	add	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	4a22      	ldr	r2, [pc, #136]	; (8005c14 <UART_SetConfig+0x118>)
 8005b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	0119      	lsls	r1, r3, #4
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009a      	lsls	r2, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <UART_SetConfig+0x118>)
 8005baa:	fba3 0302 	umull	r0, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2064      	movs	r0, #100	; 0x64
 8005bb2:	fb00 f303 	mul.w	r3, r0, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <UART_SetConfig+0x118>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc8:	4419      	add	r1, r3
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009a      	lsls	r2, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <UART_SetConfig+0x118>)
 8005be2:	fba3 0302 	umull	r0, r3, r3, r2
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2064      	movs	r0, #100	; 0x64
 8005bea:	fb00 f303 	mul.w	r3, r0, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	3332      	adds	r3, #50	; 0x32
 8005bf4:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <UART_SetConfig+0x118>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	f003 020f 	and.w	r2, r3, #15
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	440a      	add	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40013800 	.word	0x40013800
 8005c14:	51eb851f 	.word	0x51eb851f

08005c18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c18:	b084      	sub	sp, #16
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	f107 001c 	add.w	r0, r7, #28
 8005c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d122      	bne.n	8005c76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f922 	bl	8005eb4 <USB_CoreReset>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
 8005c74:	e010      	b.n	8005c98 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f916 	bl	8005eb4 <USB_CoreReset>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ca4:	b004      	add	sp, #16
 8005ca6:	4770      	bx	lr

08005ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 0201 	bic.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d106      	bne.n	8005d14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60da      	str	r2, [r3, #12]
 8005d12:	e00b      	b.n	8005d2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	e001      	b.n	8005d2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e003      	b.n	8005d34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d2c:	2032      	movs	r0, #50	; 0x32
 8005d2e:	f7fb f9c7 	bl	80010c0 <HAL_Delay>

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	019b      	lsls	r3, r3, #6
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a08      	ldr	r2, [pc, #32]	; (8005d80 <USB_FlushTxFifo+0x44>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d0f0      	beq.n	8005d56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr
 8005d80:	00030d40 	.word	0x00030d40

08005d84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2210      	movs	r2, #16
 8005d94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <USB_FlushRxFifo+0x3c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e006      	b.n	8005db6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d0f0      	beq.n	8005d96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bc80      	pop	{r7}
 8005dbe:	4770      	bx	lr
 8005dc0:	00030d40 	.word	0x00030d40

08005dc4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	71fb      	strb	r3, [r7, #7]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005de2:	88bb      	ldrh	r3, [r7, #4]
 8005de4:	3303      	adds	r3, #3
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e00f      	b.n	8005e10 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	031a      	lsls	r2, r3, #12
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3304      	adds	r3, #4
 8005e08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d3eb      	bcc.n	8005df0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e00b      	b.n	8005e60 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3304      	adds	r3, #4
 8005e58:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d3ef      	bcc.n	8005e48 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e68:	69fb      	ldr	r3, [r7, #28]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3724      	adds	r7, #36	; 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <USB_CoreReset+0x60>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e01b      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	daf2      	bge.n	8005ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <USB_CoreReset+0x60>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d0f0      	beq.n	8005eea <USB_CoreReset+0x36>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	00030d40 	.word	0x00030d40

08005f18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f18:	b084      	sub	sp, #16
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	f107 001c 	add.w	r0, r7, #28
 8005f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f66:	2110      	movs	r1, #16
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fee7 	bl	8005d3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ff08 	bl	8005d84 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e015      	b.n	8005fa6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	461a      	mov	r2, r3
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f8c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d3e5      	bcc.n	8005f7a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f892 	bl	80060da <USB_DriveVbus>

  HAL_Delay(200U);
 8005fb6:	20c8      	movs	r0, #200	; 0xc8
 8005fb8:	f7fb f882 	bl	80010c0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc8:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <USB_HostInit+0xf0>)
 8005fd4:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a0c      	ldr	r2, [pc, #48]	; (800600c <USB_HostInit+0xf4>)
 8005fda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f043 0210 	orr.w	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	4b08      	ldr	r3, [pc, #32]	; (8006010 <USB_HostInit+0xf8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006002:	b004      	add	sp, #16
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	00600080 	.word	0x00600080
 800600c:	004000e0 	.word	0x004000e0
 8006010:	a3200008 	.word	0xa3200008

08006014 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006032:	f023 0303 	bic.w	r3, r3, #3
 8006036:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800604c:	4313      	orrs	r3, r2
 800604e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605c:	461a      	mov	r2, r3
 800605e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006062:	6053      	str	r3, [r2, #4]
 8006064:	e009      	b.n	800607a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d106      	bne.n	800607a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	461a      	mov	r2, r3
 8006074:	f241 7370 	movw	r3, #6000	; 0x1770
 8006078:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060b6:	2064      	movs	r0, #100	; 0x64
 80060b8:	f7fb f802 	bl	80010c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060ca:	200a      	movs	r0, #10
 80060cc:	f7fa fff8 	bl	80010c0 <HAL_Delay>

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <USB_DriveVbus+0x44>
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d106      	bne.n	800611e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800611c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d109      	bne.n	800613e <USB_DriveVbus+0x64>
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	0c5b      	lsrs	r3, r3, #17
 8006168:	f003 0303 	and.w	r3, r3, #3
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	b29b      	uxth	r3, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
	...

08006198 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	70fb      	strb	r3, [r7, #3]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70bb      	strb	r3, [r7, #2]
 80061ae:	4613      	mov	r3, r2
 80061b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	461a      	mov	r2, r3
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d867      	bhi.n	80062a6 <USB_HC_Init+0x10e>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <USB_HC_Init+0x44>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006269 	.word	0x08006269
 80061e4:	080061ed 	.word	0x080061ed
 80061e8:	0800622b 	.word	0x0800622b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f8:	461a      	mov	r2, r3
 80061fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80061fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006200:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	da51      	bge.n	80062ac <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	440a      	add	r2, r1
 800621e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006226:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006228:	e040      	b.n	80062ac <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	461a      	mov	r2, r3
 8006238:	f240 639d 	movw	r3, #1693	; 0x69d
 800623c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800623e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da34      	bge.n	80062b0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006264:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006266:	e023      	b.n	80062b0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	461a      	mov	r2, r3
 8006276:	f240 2325 	movw	r3, #549	; 0x225
 800627a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800627c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006280:	2b00      	cmp	r3, #0
 8006282:	da17      	bge.n	80062b4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	440a      	add	r2, r1
 800629a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062a2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062a4:	e006      	b.n	80062b4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
      break;
 80062aa:	e004      	b.n	80062b6 <USB_HC_Init+0x11e>
      break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <USB_HC_Init+0x11e>
      break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <USB_HC_Init+0x11e>
      break;
 80062b4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	2101      	movs	r1, #1
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062d0:	4313      	orrs	r3, r2
 80062d2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da03      	bge.n	80062f0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	e001      	b.n	80062f4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80062f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d103      	bne.n	8006304 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e001      	b.n	8006308 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006308:	787b      	ldrb	r3, [r7, #1]
 800630a:	059b      	lsls	r3, r3, #22
 800630c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006310:	78bb      	ldrb	r3, [r7, #2]
 8006312:	02db      	lsls	r3, r3, #11
 8006314:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006318:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800631a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800631e:	049b      	lsls	r3, r3, #18
 8006320:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006324:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006326:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006328:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800632c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	0159      	lsls	r1, r3, #5
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	440b      	add	r3, r1
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006344:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800634a:	2b03      	cmp	r3, #3
 800634c:	d10f      	bne.n	800636e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4413      	add	r3, r2
 8006356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	440a      	add	r2, r1
 8006364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800636c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	785b      	ldrb	r3, [r3, #1]
 800638e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006394:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d018      	beq.n	80063d0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	8912      	ldrh	r2, [r2, #8]
 80063a6:	4413      	add	r3, r2
 80063a8:	3b01      	subs	r3, #1
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	8912      	ldrh	r2, [r2, #8]
 80063ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80063b4:	8bfa      	ldrh	r2, [r7, #30]
 80063b6:	8a7b      	ldrh	r3, [r7, #18]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d90b      	bls.n	80063d4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80063bc:	8a7b      	ldrh	r3, [r7, #18]
 80063be:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80063c0:	8bfb      	ldrh	r3, [r7, #30]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	8912      	ldrh	r2, [r2, #8]
 80063c6:	fb02 f203 	mul.w	r2, r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	611a      	str	r2, [r3, #16]
 80063ce:	e001      	b.n	80063d4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80063d0:	2301      	movs	r3, #1
 80063d2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	8912      	ldrh	r2, [r2, #8]
 80063e2:	fb02 f203 	mul.w	r2, r2, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063f2:	8bfb      	ldrh	r3, [r7, #30]
 80063f4:	04d9      	lsls	r1, r3, #19
 80063f6:	4b5f      	ldr	r3, [pc, #380]	; (8006574 <USB_HC_StartXfer+0x1f8>)
 80063f8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80063fa:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	7a9b      	ldrb	r3, [r3, #10]
 8006400:	075b      	lsls	r3, r3, #29
 8006402:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	0148      	lsls	r0, r1, #5
 800640a:	69b9      	ldr	r1, [r7, #24]
 800640c:	4401      	add	r1, r0
 800640e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006412:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006414:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	440a      	add	r2, r1
 8006444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800644c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	7c7b      	ldrb	r3, [r7, #17]
 800645e:	075b      	lsls	r3, r3, #29
 8006460:	6979      	ldr	r1, [r7, #20]
 8006462:	0148      	lsls	r0, r1, #5
 8006464:	69b9      	ldr	r1, [r7, #24]
 8006466:	4401      	add	r1, r0
 8006468:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	4413      	add	r3, r2
 8006478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a3e      	ldr	r2, [pc, #248]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 8006480:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006482:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800648a:	4a3b      	ldr	r2, [pc, #236]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 800648c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006496:	4b38      	ldr	r3, [pc, #224]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649e:	4a36      	ldr	r2, [pc, #216]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	e005      	b.n	80064b0 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064a4:	4b34      	ldr	r3, [pc, #208]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ac:	4a32      	ldr	r2, [pc, #200]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064b0:	4b31      	ldr	r3, [pc, #196]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b8:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b2b      	ldr	r3, [pc, #172]	; (8006578 <USB_HC_StartXfer+0x1fc>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d148      	bne.n	800656a <USB_HC_StartXfer+0x1ee>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d044      	beq.n	800656a <USB_HC_StartXfer+0x1ee>
  {
    switch (hc->ep_type)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	79db      	ldrb	r3, [r3, #7]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d831      	bhi.n	800654c <USB_HC_StartXfer+0x1d0>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <USB_HC_StartXfer+0x174>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006501 	.word	0x08006501
 80064fc:	08006525 	.word	0x08006525
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	3303      	adds	r3, #3
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800650a:	89fa      	ldrh	r2, [r7, #14]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	b29b      	uxth	r3, r3
 8006512:	429a      	cmp	r2, r3
 8006514:	d91c      	bls.n	8006550 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	619a      	str	r2, [r3, #24]
        }
        break;
 8006522:	e015      	b.n	8006550 <USB_HC_StartXfer+0x1d4>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	3303      	adds	r3, #3
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800652e:	89fa      	ldrh	r2, [r7, #14]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	b29b      	uxth	r3, r3
 800653a:	429a      	cmp	r2, r3
 800653c:	d90a      	bls.n	8006554 <USB_HC_StartXfer+0x1d8>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	619a      	str	r2, [r3, #24]
        }
        break;
 800654a:	e003      	b.n	8006554 <USB_HC_StartXfer+0x1d8>

      default:
        break;
 800654c:	bf00      	nop
 800654e:	e002      	b.n	8006556 <USB_HC_StartXfer+0x1da>
        break;
 8006550:	bf00      	nop
 8006552:	e000      	b.n	8006556 <USB_HC_StartXfer+0x1da>
        break;
 8006554:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68d9      	ldr	r1, [r3, #12]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	785a      	ldrb	r2, [r3, #1]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	b29b      	uxth	r3, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fc2d 	bl	8005dc4 <USB_WritePacket>
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	1ff80000 	.word	0x1ff80000
 8006578:	200000d0 	.word	0x200000d0

0800657c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	b29b      	uxth	r3, r3
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	0c9b      	lsrs	r3, r3, #18
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <USB_HC_Halt+0x3a>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d16c      	bne.n	80066b0 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d143      	bne.n	800668a <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	440a      	add	r2, r1
 8006618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006620:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006640:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	440a      	add	r2, r1
 8006658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006660:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	3301      	adds	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666e:	d81d      	bhi.n	80066ac <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006686:	d0ec      	beq.n	8006662 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006688:	e080      	b.n	800678c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066aa:	e06f      	b.n	800678c <USB_HC_Halt+0x1f0>
          break;
 80066ac:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066ae:	e06d      	b.n	800678c <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d143      	bne.n	8006768 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	440a      	add	r2, r1
 8006716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800671e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	440a      	add	r2, r1
 8006736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800673e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3301      	adds	r3, #1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674c:	d81d      	bhi.n	800678a <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006764:	d0ec      	beq.n	8006740 <USB_HC_Halt+0x1a4>
 8006766:	e011      	b.n	800678c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	440a      	add	r2, r1
 800677e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e000      	b.n	800678c <USB_HC_Halt+0x1f0>
          break;
 800678a:	bf00      	nop
    }
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fa8d 	bl	8005cc8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80067ae:	2110      	movs	r1, #16
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fac3 	bl	8005d3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff fae4 	bl	8005d84 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	e01f      	b.n	8006802 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f6:	461a      	mov	r2, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	3301      	adds	r3, #1
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d9dc      	bls.n	80067c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e034      	b.n	8006878 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006824:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006834:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3301      	adds	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006854:	d80c      	bhi.n	8006870 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686c:	d0ec      	beq.n	8006848 <USB_StopHost+0xb0>
 800686e:	e000      	b.n	8006872 <USB_StopHost+0xda>
        break;
 8006870:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	3301      	adds	r3, #1
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d9c7      	bls.n	800680e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006884:	461a      	mov	r2, r3
 8006886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006892:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fa07 	bl	8005ca8 <USB_EnableGlobalInt>

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80068a8:	4908      	ldr	r1, [pc, #32]	; (80068cc <MX_FATFS_Init+0x28>)
 80068aa:	4809      	ldr	r0, [pc, #36]	; (80068d0 <MX_FATFS_Init+0x2c>)
 80068ac:	f005 ffaa 	bl	800c804 <FATFS_LinkDriver>
 80068b0:	4603      	mov	r3, r0
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <MX_FATFS_Init+0x30>)
 80068b6:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068b8:	4907      	ldr	r1, [pc, #28]	; (80068d8 <MX_FATFS_Init+0x34>)
 80068ba:	4808      	ldr	r0, [pc, #32]	; (80068dc <MX_FATFS_Init+0x38>)
 80068bc:	f005 ffa2 	bl	800c804 <FATFS_LinkDriver>
 80068c0:	4603      	mov	r3, r0
 80068c2:	461a      	mov	r2, r3
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <MX_FATFS_Init+0x3c>)
 80068c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068c8:	bf00      	nop
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000610 	.word	0x20000610
 80068d0:	0801ac14 	.word	0x0801ac14
 80068d4:	20000ed0 	.word	0x20000ed0
 80068d8:	2000060c 	.word	0x2000060c
 80068dc:	2000000c 	.word	0x2000000c
 80068e0:	20000840 	.word	0x20000840

080068e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc80      	pop	{r7}
 80068f0:	4770      	bx	lr
	...

080068f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <USER_initialize+0x20>)
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <USER_initialize+0x20>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	20000009 	.word	0x20000009

08006918 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <USER_status+0x20>)
 8006924:	2201      	movs	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <USER_status+0x20>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	20000009 	.word	0x20000009

0800693c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800694c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006968:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	603a      	str	r2, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
 8006980:	460b      	mov	r3, r1
 8006982:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
    return res;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800699a:	f006 f892 	bl	800cac2 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800699e:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <MX_LWIP_Init+0x70>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80069a4:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <MX_LWIP_Init+0x74>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <MX_LWIP_Init+0x78>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <MX_LWIP_Init+0x7c>)
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <MX_LWIP_Init+0x80>)
 80069b6:	9301      	str	r3, [sp, #4]
 80069b8:	2300      	movs	r3, #0
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <MX_LWIP_Init+0x78>)
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <MX_LWIP_Init+0x74>)
 80069c0:	4910      	ldr	r1, [pc, #64]	; (8006a04 <MX_LWIP_Init+0x70>)
 80069c2:	4815      	ldr	r0, [pc, #84]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069c4:	f006 fc7c 	bl	800d2c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80069c8:	4813      	ldr	r0, [pc, #76]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069ca:	f006 fd61 	bl	800d490 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069d0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80069d4:	089b      	lsrs	r3, r3, #2
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80069e0:	480d      	ldr	r0, [pc, #52]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069e2:	f006 fd63 	bl	800d4ac <netif_set_up>
 80069e6:	e002      	b.n	80069ee <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80069e8:	480b      	ldr	r0, [pc, #44]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069ea:	f006 fda3 	bl	800d534 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80069ee:	490b      	ldr	r1, [pc, #44]	; (8006a1c <MX_LWIP_Init+0x88>)
 80069f0:	4809      	ldr	r0, [pc, #36]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069f2:	f006 fdc1 	bl	800d578 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80069f6:	4808      	ldr	r0, [pc, #32]	; (8006a18 <MX_LWIP_Init+0x84>)
 80069f8:	f00c fec6 	bl	8013788 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80069fc:	bf00      	nop
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000f0c 	.word	0x20000f0c
 8006a08:	20000f10 	.word	0x20000f10
 8006a0c:	20000f14 	.word	0x20000f14
 8006a10:	08017145 	.word	0x08017145
 8006a14:	08006e01 	.word	0x08006e01
 8006a18:	20000ed4 	.word	0x20000ed4
 8006a1c:	08006e6d 	.word	0x08006e6d

08006a20 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	; 0x30
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a28:	f107 0320 	add.w	r3, r7, #32
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	605a      	str	r2, [r3, #4]
 8006a32:	609a      	str	r2, [r3, #8]
 8006a34:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a46      	ldr	r2, [pc, #280]	; (8006b54 <HAL_ETH_MspInit+0x134>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	f040 8085 	bne.w	8006b4c <HAL_ETH_MspInit+0x12c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a42:	4b45      	ldr	r3, [pc, #276]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	4a44      	ldr	r2, [pc, #272]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a4c:	6153      	str	r3, [r2, #20]
 8006a4e:	4b42      	ldr	r3, [pc, #264]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	4a3e      	ldr	r2, [pc, #248]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	6153      	str	r3, [r2, #20]
 8006a66:	4b3c      	ldr	r3, [pc, #240]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4a38      	ldr	r2, [pc, #224]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a7c:	6153      	str	r3, [r2, #20]
 8006a7e:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a8a:	4b33      	ldr	r3, [pc, #204]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a90:	f043 0310 	orr.w	r3, r3, #16
 8006a94:	6193      	str	r3, [r2, #24]
 8006a96:	4b30      	ldr	r3, [pc, #192]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aa2:	4b2d      	ldr	r3, [pc, #180]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	4a2c      	ldr	r2, [pc, #176]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006aa8:	f043 0304 	orr.w	r3, r3, #4
 8006aac:	6193      	str	r3, [r2, #24]
 8006aae:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aba:	4b27      	ldr	r3, [pc, #156]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006ac0:	f043 0308 	orr.w	r3, r3, #8
 8006ac4:	6193      	str	r3, [r2, #24]
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <HAL_ETH_MspInit+0x138>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	60bb      	str	r3, [r7, #8]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ada:	2303      	movs	r3, #3
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ade:	f107 0320 	add.w	r3, r7, #32
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	481d      	ldr	r0, [pc, #116]	; (8006b5c <HAL_ETH_MspInit+0x13c>)
 8006ae6:	f7fb fc7f 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8006aea:	2382      	movs	r3, #130	; 0x82
 8006aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af6:	f107 0320 	add.w	r3, r7, #32
 8006afa:	4619      	mov	r1, r3
 8006afc:	4818      	ldr	r0, [pc, #96]	; (8006b60 <HAL_ETH_MspInit+0x140>)
 8006afe:	f7fb fc73 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b02:	2304      	movs	r3, #4
 8006b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b06:	2302      	movs	r3, #2
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b0e:	f107 0320 	add.w	r3, r7, #32
 8006b12:	4619      	mov	r1, r3
 8006b14:	4812      	ldr	r0, [pc, #72]	; (8006b60 <HAL_ETH_MspInit+0x140>)
 8006b16:	f7fb fc67 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006b1a:	2330      	movs	r3, #48	; 0x30
 8006b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b22:	2300      	movs	r3, #0
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b26:	f107 0320 	add.w	r3, r7, #32
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	480b      	ldr	r0, [pc, #44]	; (8006b5c <HAL_ETH_MspInit+0x13c>)
 8006b2e:	f7fb fc5b 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006b32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b40:	f107 0320 	add.w	r3, r7, #32
 8006b44:	4619      	mov	r1, r3
 8006b46:	4807      	ldr	r0, [pc, #28]	; (8006b64 <HAL_ETH_MspInit+0x144>)
 8006b48:	f7fb fc4e 	bl	80023e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3730      	adds	r7, #48	; 0x30
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40028000 	.word	0x40028000
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40011000 	.word	0x40011000
 8006b60:	40010800 	.word	0x40010800
 8006b64:	40010c00 	.word	0x40010c00

08006b68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006b74:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <low_level_init+0x144>)
 8006b76:	4a4e      	ldr	r2, [pc, #312]	; (8006cb0 <low_level_init+0x148>)
 8006b78:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006b7a:	4b4c      	ldr	r3, [pc, #304]	; (8006cac <low_level_init+0x144>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006b80:	4b4a      	ldr	r3, [pc, #296]	; (8006cac <low_level_init+0x144>)
 8006b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b86:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b88:	4b48      	ldr	r3, [pc, #288]	; (8006cac <low_level_init+0x144>)
 8006b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b8e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006b90:	4b46      	ldr	r3, [pc, #280]	; (8006cac <low_level_init+0x144>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006b96:	2300      	movs	r3, #0
 8006b98:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006b9e:	23e1      	movs	r3, #225	; 0xe1
 8006ba0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x05;
 8006ba2:	2305      	movs	r3, #5
 8006ba4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x16;
 8006ba6:	2316      	movs	r3, #22
 8006ba8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x57;
 8006baa:	2357      	movs	r3, #87	; 0x57
 8006bac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006bae:	4a3f      	ldr	r2, [pc, #252]	; (8006cac <low_level_init+0x144>)
 8006bb0:	f107 0308 	add.w	r3, r7, #8
 8006bb4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006bb6:	4b3d      	ldr	r3, [pc, #244]	; (8006cac <low_level_init+0x144>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006bbc:	4b3b      	ldr	r3, [pc, #236]	; (8006cac <low_level_init+0x144>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006bc2:	4b3a      	ldr	r3, [pc, #232]	; (8006cac <low_level_init+0x144>)
 8006bc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006bc8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006bca:	4838      	ldr	r0, [pc, #224]	; (8006cac <low_level_init+0x144>)
 8006bcc:	f7fa fba8 	bl	8001320 <HAL_ETH_Init>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006be0:	f043 0304 	orr.w	r3, r3, #4
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006bec:	2304      	movs	r3, #4
 8006bee:	4a31      	ldr	r2, [pc, #196]	; (8006cb4 <low_level_init+0x14c>)
 8006bf0:	4931      	ldr	r1, [pc, #196]	; (8006cb8 <low_level_init+0x150>)
 8006bf2:	482e      	ldr	r0, [pc, #184]	; (8006cac <low_level_init+0x144>)
 8006bf4:	f7fa fd00 	bl	80015f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006bf8:	2308      	movs	r3, #8
 8006bfa:	4a30      	ldr	r2, [pc, #192]	; (8006cbc <low_level_init+0x154>)
 8006bfc:	4930      	ldr	r1, [pc, #192]	; (8006cc0 <low_level_init+0x158>)
 8006bfe:	482b      	ldr	r0, [pc, #172]	; (8006cac <low_level_init+0x144>)
 8006c00:	f7fa fd62 	bl	80016c8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2206      	movs	r2, #6
 8006c08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006c0c:	4b27      	ldr	r3, [pc, #156]	; (8006cac <low_level_init+0x144>)
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	781a      	ldrb	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006c18:	4b24      	ldr	r3, [pc, #144]	; (8006cac <low_level_init+0x144>)
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	785a      	ldrb	r2, [r3, #1]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006c24:	4b21      	ldr	r3, [pc, #132]	; (8006cac <low_level_init+0x144>)
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	789a      	ldrb	r2, [r3, #2]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <low_level_init+0x144>)
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	78da      	ldrb	r2, [r3, #3]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <low_level_init+0x144>)
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	791a      	ldrb	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <low_level_init+0x144>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	795a      	ldrb	r2, [r3, #5]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006c62:	f043 030a 	orr.w	r3, r3, #10
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006c6e:	480f      	ldr	r0, [pc, #60]	; (8006cac <low_level_init+0x144>)
 8006c70:	f7fa ff4e 	bl	8001b10 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	461a      	mov	r2, r3
 8006c7a:	210b      	movs	r1, #11
 8006c7c:	480b      	ldr	r0, [pc, #44]	; (8006cac <low_level_init+0x144>)
 8006c7e:	f7fa fe79 	bl	8001974 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f043 030b 	orr.w	r3, r3, #11
 8006c88:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	210b      	movs	r1, #11
 8006c90:	4806      	ldr	r0, [pc, #24]	; (8006cac <low_level_init+0x144>)
 8006c92:	f7fa fed7 	bl	8001a44 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006c96:	f107 0310 	add.w	r3, r7, #16
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	210b      	movs	r1, #11
 8006c9e:	4803      	ldr	r0, [pc, #12]	; (8006cac <low_level_init+0x144>)
 8006ca0:	f7fa fe68 	bl	8001974 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006ca4:	bf00      	nop
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20003f78 	.word	0x20003f78
 8006cb0:	40028000 	.word	0x40028000
 8006cb4:	20003fc0 	.word	0x20003fc0
 8006cb8:	20000f18 	.word	0x20000f18
 8006cbc:	20000f58 	.word	0x20000f58
 8006cc0:	20003ef8 	.word	0x20003ef8

08006cc4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006cce:	4b4b      	ldr	r3, [pc, #300]	; (8006dfc <low_level_output+0x138>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006ce6:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <low_level_output+0x138>)
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	623b      	str	r3, [r7, #32]
 8006cf4:	e05a      	b.n	8006dac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da03      	bge.n	8006d06 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006cfe:	23f8      	movs	r3, #248	; 0xf8
 8006d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006d04:	e05c      	b.n	8006dc0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	895b      	ldrh	r3, [r3, #10]
 8006d0a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006d10:	e02f      	b.n	8006d72 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	18d0      	adds	r0, r2, r3
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	18d1      	adds	r1, r2, r3
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006d26:	3304      	adds	r3, #4
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f010 fe1e 	bl	801796a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	da03      	bge.n	8006d44 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006d3c:	23f8      	movs	r3, #248	; 0xf8
 8006d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006d42:	e03d      	b.n	8006dc0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006d54:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006d60:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006d6c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d8c8      	bhi.n	8006d12 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	18d0      	adds	r0, r2, r3
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4619      	mov	r1, r3
 8006d92:	f010 fdea 	bl	801796a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	623b      	str	r3, [r7, #32]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1a1      	bne.n	8006cf6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	4811      	ldr	r0, [pc, #68]	; (8006dfc <low_level_output+0x138>)
 8006db6:	f7fa fcf3 	bl	80017a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <low_level_output+0x138>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc8:	3314      	adds	r3, #20
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <low_level_output+0x138>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ddc:	3314      	adds	r3, #20
 8006dde:	2220      	movs	r2, #32
 8006de0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006de2:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <low_level_output+0x138>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dea:	3304      	adds	r3, #4
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006df0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3728      	adds	r7, #40	; 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20003f78 	.word	0x20003f78

08006e00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <ethernetif_init+0x1c>
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <ethernetif_init+0x48>)
 8006e10:	f240 220b 	movw	r2, #523	; 0x20b
 8006e14:	490d      	ldr	r1, [pc, #52]	; (8006e4c <ethernetif_init+0x4c>)
 8006e16:	480e      	ldr	r0, [pc, #56]	; (8006e50 <ethernetif_init+0x50>)
 8006e18:	f010 fe60 	bl	8017adc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2273      	movs	r2, #115	; 0x73
 8006e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2274      	movs	r2, #116	; 0x74
 8006e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <ethernetif_init+0x54>)
 8006e30:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <ethernetif_init+0x58>)
 8006e36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fe95 	bl	8006b68 <low_level_init>

  return ERR_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	080189b0 	.word	0x080189b0
 8006e4c:	080189cc 	.word	0x080189cc
 8006e50:	080189dc 	.word	0x080189dc
 8006e54:	080156f1 	.word	0x080156f1
 8006e58:	08006cc5 	.word	0x08006cc5

08006e5c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e60:	f7fa f924 	bl	80010ac <HAL_GetTick>
 8006e64:	4603      	mov	r3, r0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006e82:	089b      	lsrs	r3, r3, #2
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d05d      	beq.n	8006f4a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d03f      	beq.n	8006f16 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4830      	ldr	r0, [pc, #192]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006e9e:	f7fa fdd1 	bl	8001a44 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8006ea2:	f7fa f903 	bl	80010ac <HAL_GetTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	461a      	mov	r2, r3
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	482b      	ldr	r0, [pc, #172]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006eb4:	f7fa fd5e 	bl	8001974 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006eb8:	f7fa f8f8 	bl	80010ac <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec6:	d828      	bhi.n	8006f1a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0eb      	beq.n	8006eaa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2110      	movs	r1, #16
 8006eda:	4821      	ldr	r0, [pc, #132]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006edc:	f7fa fd4a 	bl	8001974 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d004      	beq.n	8006ef4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	e002      	b.n	8006efa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006f04:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
 8006f0a:	e016      	b.n	8006f3a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006f0c:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	e011      	b.n	8006f3a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006f16:	bf00      	nop
 8006f18:	e000      	b.n	8006f1c <ethernetif_update_config+0xb0>
          goto error;
 8006f1a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	08db      	lsrs	r3, r3, #3
 8006f22:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	2100      	movs	r1, #0
 8006f34:	480a      	ldr	r0, [pc, #40]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f36:	f7fa fd85 	bl	8001a44 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4808      	ldr	r0, [pc, #32]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f3e:	f7fa fe45 	bl	8001bcc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006f42:	4807      	ldr	r0, [pc, #28]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f44:	f7fa fde4 	bl	8001b10 <HAL_ETH_Start>
 8006f48:	e002      	b.n	8006f50 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006f4a:	4805      	ldr	r0, [pc, #20]	; (8006f60 <ethernetif_update_config+0xf4>)
 8006f4c:	f7fa fe0f 	bl	8001b6e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f807 	bl	8006f64 <ethernetif_notify_conn_changed>
}
 8006f56:	bf00      	nop
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20003f78 	.word	0x20003f78

08006f64 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f76:	b590      	push	{r4, r7, lr}
 8006f78:	b089      	sub	sp, #36	; 0x24
 8006f7a:	af04      	add	r7, sp, #16
 8006f7c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f84:	7919      	ldrb	r1, [r3, #4]
 8006f86:	2350      	movs	r3, #80	; 0x50
 8006f88:	2206      	movs	r2, #6
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fc43 	bl	8008816 <USBH_FindInterface>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2bff      	cmp	r3, #255	; 0xff
 8006f98:	d002      	beq.n	8006fa0 <USBH_MSC_InterfaceInit+0x2a>
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d901      	bls.n	8006fa4 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e0ef      	b.n	8007184 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fc19 	bl	80087e0 <USBH_SelectInterface>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e0e3      	b.n	8007184 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006fc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fc6:	f010 fcb1 	bl	801792c <malloc>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e0d0      	b.n	8007184 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	68b8      	ldr	r0, [r7, #8]
 8006fea:	f010 fcc9 	bl	8017980 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	211a      	movs	r1, #26
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b25b      	sxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	da16      	bge.n	8007034 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	211a      	movs	r1, #26
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	211a      	movs	r1, #26
 8007022:	fb01 f303 	mul.w	r3, r1, r3
 8007026:	4413      	add	r3, r2
 8007028:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800702c:	881a      	ldrh	r2, [r3, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	815a      	strh	r2, [r3, #10]
 8007032:	e015      	b.n	8007060 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	211a      	movs	r1, #26
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8007044:	781a      	ldrb	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	211a      	movs	r1, #26
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	4413      	add	r3, r2
 8007056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	211a      	movs	r1, #26
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	da16      	bge.n	80070a6 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	211a      	movs	r1, #26
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8007088:	781a      	ldrb	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	211a      	movs	r1, #26
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800709e:	881a      	ldrh	r2, [r3, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	815a      	strh	r2, [r3, #10]
 80070a4:	e015      	b.n	80070d2 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	211a      	movs	r1, #26
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	211a      	movs	r1, #26
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070cc:	881a      	ldrh	r2, [r3, #0]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	799b      	ldrb	r3, [r3, #6]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f002 fca9 	bl	8009a42 <USBH_AllocPipe>
 80070f0:	4603      	mov	r3, r0
 80070f2:	461a      	mov	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	79db      	ldrb	r3, [r3, #7]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fc9f 	bl	8009a42 <USBH_AllocPipe>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fda3 	bl	8007c58 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	7959      	ldrb	r1, [r3, #5]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	7998      	ldrb	r0, [r3, #6]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	8912      	ldrh	r2, [r2, #8]
 800712a:	9202      	str	r2, [sp, #8]
 800712c:	2202      	movs	r2, #2
 800712e:	9201      	str	r2, [sp, #4]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	4623      	mov	r3, r4
 8007134:	4602      	mov	r2, r0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fc54 	bl	80099e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	7919      	ldrb	r1, [r3, #4]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	79d8      	ldrb	r0, [r3, #7]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	8952      	ldrh	r2, [r2, #10]
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	2202      	movs	r2, #2
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4623      	mov	r3, r4
 800715e:	4602      	mov	r2, r0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 fc3f 	bl	80099e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f010 fb00 	bl	8017774 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	795b      	ldrb	r3, [r3, #5]
 8007178:	2200      	movs	r2, #0
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f010 faf9 	bl	8017774 <USBH_LL_SetToggle>

  return USBH_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}

0800718c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	795b      	ldrb	r3, [r3, #5]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	795b      	ldrb	r3, [r3, #5]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f002 fc38 	bl	8009a22 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	795b      	ldrb	r3, [r3, #5]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f002 fc62 	bl	8009a82 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	791b      	ldrb	r3, [r3, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	791b      	ldrb	r3, [r3, #4]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f002 fc25 	bl	8009a22 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	791b      	ldrb	r3, [r3, #4]
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f002 fc4f 	bl	8009a82 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	4618      	mov	r0, r3
 8007200:	f010 fb9c 	bl	801793c <free>
    phost->pActiveClass->pData = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800720a:	2200      	movs	r2, #0
 800720c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800722a:	2301      	movs	r3, #1
 800722c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	7b9b      	ldrb	r3, [r3, #14]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d004      	beq.n	8007240 <USBH_MSC_ClassRequest+0x28>
 8007236:	2b03      	cmp	r3, #3
 8007238:	d03f      	beq.n	80072ba <USBH_MSC_ClassRequest+0xa2>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d000      	beq.n	8007240 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800723e:	e04b      	b.n	80072d8 <USBH_MSC_ClassRequest+0xc0>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fce9 	bl	8007c1c <USBH_MSC_BOT_REQ_GetMaxLUN>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d104      	bne.n	800725e <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
        status = USBH_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d136      	bne.n	80072d2 <USBH_MSC_ClassRequest+0xba>
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d804      	bhi.n	8007278 <USBH_MSC_ClassRequest+0x60>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3301      	adds	r3, #1
 8007276:	e000      	b.n	800727a <USBH_MSC_ClassRequest+0x62>
 8007278:	2302      	movs	r3, #2
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	6013      	str	r3, [r2, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800727e:	2300      	movs	r3, #0
 8007280:	73bb      	strb	r3, [r7, #14]
 8007282:	e014      	b.n	80072ae <USBH_MSC_ClassRequest+0x96>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	2134      	movs	r1, #52	; 0x34
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	3392      	adds	r3, #146	; 0x92
 8007292:	2202      	movs	r2, #2
 8007294:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	2134      	movs	r1, #52	; 0x34
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	4413      	add	r3, r2
 80072a2:	33c1      	adds	r3, #193	; 0xc1
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	3301      	adds	r3, #1
 80072ac:	73bb      	strb	r3, [r7, #14]
 80072ae:	7bba      	ldrb	r2, [r7, #14]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d3e5      	bcc.n	8007284 <USBH_MSC_ClassRequest+0x6c>
      break;
 80072b8:	e00b      	b.n	80072d2 <USBH_MSC_ClassRequest+0xba>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80072ba:	2100      	movs	r1, #0
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 ff62 	bl	8009186 <USBH_ClrFeature>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <USBH_MSC_ClassRequest+0xbe>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	7bda      	ldrb	r2, [r3, #15]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	739a      	strb	r2, [r3, #14]
      break;
 80072d0:	e001      	b.n	80072d6 <USBH_MSC_ClassRequest+0xbe>
      break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <USBH_MSC_ClassRequest+0xc0>
      break;
 80072d6:	bf00      	nop
  }

  return status;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80072fe:	2301      	movs	r3, #1
 8007300:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	7b1b      	ldrb	r3, [r3, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <USBH_MSC_Process+0x2e>
 800730a:	2b01      	cmp	r3, #1
 800730c:	f000 8271 	beq.w	80077f2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007310:	e272      	b.n	80077f8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007318:	461a      	mov	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	f080 824f 	bcs.w	80077c2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800732a:	4619      	mov	r1, r3
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	2334      	movs	r3, #52	; 0x34
 8007330:	fb03 f301 	mul.w	r3, r3, r1
 8007334:	4413      	add	r3, r2
 8007336:	3391      	adds	r3, #145	; 0x91
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007342:	4619      	mov	r1, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	2334      	movs	r3, #52	; 0x34
 8007348:	fb03 f301 	mul.w	r3, r3, r1
 800734c:	4413      	add	r3, r2
 800734e:	3390      	adds	r3, #144	; 0x90
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b08      	cmp	r3, #8
 8007354:	f200 8243 	bhi.w	80077de <USBH_MSC_Process+0x4fa>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <USBH_MSC_Process+0x7c>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007385 	.word	0x08007385
 8007364:	080077df 	.word	0x080077df
 8007368:	0800744d 	.word	0x0800744d
 800736c:	080075d1 	.word	0x080075d1
 8007370:	080073ab 	.word	0x080073ab
 8007374:	0800769d 	.word	0x0800769d
 8007378:	080077df 	.word	0x080077df
 800737c:	080077df 	.word	0x080077df
 8007380:	080077b1 	.word	0x080077b1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800738a:	4619      	mov	r1, r3
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	2334      	movs	r3, #52	; 0x34
 8007390:	fb03 f301 	mul.w	r3, r3, r1
 8007394:	4413      	add	r3, r2
 8007396:	3390      	adds	r3, #144	; 0x90
 8007398:	2204      	movs	r2, #4
 800739a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80073a8:	e222      	b.n	80077f0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073b0:	b2d9      	uxtb	r1, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073b8:	461a      	mov	r2, r3
 80073ba:	2334      	movs	r3, #52	; 0x34
 80073bc:	fb03 f302 	mul.w	r3, r3, r2
 80073c0:	3398      	adds	r3, #152	; 0x98
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4413      	add	r3, r2
 80073c6:	3307      	adds	r3, #7
 80073c8:	461a      	mov	r2, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 ff66 	bl	800829c <USBH_MSC_SCSI_Inquiry>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073e0:	4619      	mov	r1, r3
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	2334      	movs	r3, #52	; 0x34
 80073e6:	fb03 f301 	mul.w	r3, r3, r1
 80073ea:	4413      	add	r3, r2
 80073ec:	3390      	adds	r3, #144	; 0x90
 80073ee:	2202      	movs	r2, #2
 80073f0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d10c      	bne.n	8007412 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073fe:	4619      	mov	r1, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	2334      	movs	r3, #52	; 0x34
 8007404:	fb03 f301 	mul.w	r3, r3, r1
 8007408:	4413      	add	r3, r2
 800740a:	3390      	adds	r3, #144	; 0x90
 800740c:	2205      	movs	r2, #5
 800740e:	701a      	strb	r2, [r3, #0]
            break;
 8007410:	e1e7      	b.n	80077e2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b04      	cmp	r3, #4
 8007416:	f040 81e4 	bne.w	80077e2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007420:	4619      	mov	r1, r3
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	2334      	movs	r3, #52	; 0x34
 8007426:	fb03 f301 	mul.w	r3, r3, r1
 800742a:	4413      	add	r3, r2
 800742c:	3390      	adds	r3, #144	; 0x90
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007438:	4619      	mov	r1, r3
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	2334      	movs	r3, #52	; 0x34
 800743e:	fb03 f301 	mul.w	r3, r3, r1
 8007442:	4413      	add	r3, r2
 8007444:	3391      	adds	r3, #145	; 0x91
 8007446:	2202      	movs	r2, #2
 8007448:	701a      	strb	r2, [r3, #0]
            break;
 800744a:	e1ca      	b.n	80077e2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fe62 	bl	8008120 <USBH_MSC_SCSI_TestUnitReady>
 800745c:	4603      	mov	r3, r0
 800745e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d149      	bne.n	80074fa <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800746c:	4619      	mov	r1, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	2334      	movs	r3, #52	; 0x34
 8007472:	fb03 f301 	mul.w	r3, r3, r1
 8007476:	4413      	add	r3, r2
 8007478:	3392      	adds	r3, #146	; 0x92
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00c      	beq.n	800749a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007486:	4619      	mov	r1, r3
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	2334      	movs	r3, #52	; 0x34
 800748c:	fb03 f301 	mul.w	r3, r3, r1
 8007490:	4413      	add	r3, r2
 8007492:	33c1      	adds	r3, #193	; 0xc1
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e00b      	b.n	80074b2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074a0:	4619      	mov	r1, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	2334      	movs	r3, #52	; 0x34
 80074a6:	fb03 f301 	mul.w	r3, r3, r1
 80074aa:	4413      	add	r3, r2
 80074ac:	33c1      	adds	r3, #193	; 0xc1
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074b8:	4619      	mov	r1, r3
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	2334      	movs	r3, #52	; 0x34
 80074be:	fb03 f301 	mul.w	r3, r3, r1
 80074c2:	4413      	add	r3, r2
 80074c4:	3390      	adds	r3, #144	; 0x90
 80074c6:	2203      	movs	r2, #3
 80074c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074d0:	4619      	mov	r1, r3
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	2334      	movs	r3, #52	; 0x34
 80074d6:	fb03 f301 	mul.w	r3, r3, r1
 80074da:	4413      	add	r3, r2
 80074dc:	3391      	adds	r3, #145	; 0x91
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074e8:	4619      	mov	r1, r3
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	2334      	movs	r3, #52	; 0x34
 80074ee:	fb03 f301 	mul.w	r3, r3, r1
 80074f2:	4413      	add	r3, r2
 80074f4:	3392      	adds	r3, #146	; 0x92
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d14a      	bne.n	8007596 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007506:	4619      	mov	r1, r3
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	2334      	movs	r3, #52	; 0x34
 800750c:	fb03 f301 	mul.w	r3, r3, r1
 8007510:	4413      	add	r3, r2
 8007512:	3392      	adds	r3, #146	; 0x92
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d00c      	beq.n	8007534 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007520:	4619      	mov	r1, r3
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	2334      	movs	r3, #52	; 0x34
 8007526:	fb03 f301 	mul.w	r3, r3, r1
 800752a:	4413      	add	r3, r2
 800752c:	33c1      	adds	r3, #193	; 0xc1
 800752e:	2201      	movs	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	e00b      	b.n	800754c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800753a:	4619      	mov	r1, r3
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	2334      	movs	r3, #52	; 0x34
 8007540:	fb03 f301 	mul.w	r3, r3, r1
 8007544:	4413      	add	r3, r2
 8007546:	33c1      	adds	r3, #193	; 0xc1
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007552:	4619      	mov	r1, r3
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	2334      	movs	r3, #52	; 0x34
 8007558:	fb03 f301 	mul.w	r3, r3, r1
 800755c:	4413      	add	r3, r2
 800755e:	3390      	adds	r3, #144	; 0x90
 8007560:	2205      	movs	r2, #5
 8007562:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800756a:	4619      	mov	r1, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	2334      	movs	r3, #52	; 0x34
 8007570:	fb03 f301 	mul.w	r3, r3, r1
 8007574:	4413      	add	r3, r2
 8007576:	3391      	adds	r3, #145	; 0x91
 8007578:	2201      	movs	r2, #1
 800757a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007582:	4619      	mov	r1, r3
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	2334      	movs	r3, #52	; 0x34
 8007588:	fb03 f301 	mul.w	r3, r3, r1
 800758c:	4413      	add	r3, r2
 800758e:	3392      	adds	r3, #146	; 0x92
 8007590:	2202      	movs	r2, #2
 8007592:	701a      	strb	r2, [r3, #0]
            break;
 8007594:	e127      	b.n	80077e6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b04      	cmp	r3, #4
 800759a:	f040 8124 	bne.w	80077e6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075a4:	4619      	mov	r1, r3
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	2334      	movs	r3, #52	; 0x34
 80075aa:	fb03 f301 	mul.w	r3, r3, r1
 80075ae:	4413      	add	r3, r2
 80075b0:	3390      	adds	r3, #144	; 0x90
 80075b2:	2201      	movs	r2, #1
 80075b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075bc:	4619      	mov	r1, r3
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	2334      	movs	r3, #52	; 0x34
 80075c2:	fb03 f301 	mul.w	r3, r3, r1
 80075c6:	4413      	add	r3, r2
 80075c8:	3391      	adds	r3, #145	; 0x91
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]
            break;
 80075ce:	e10a      	b.n	80077e6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075d6:	b2d9      	uxtb	r1, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075de:	461a      	mov	r2, r3
 80075e0:	2334      	movs	r3, #52	; 0x34
 80075e2:	fb03 f302 	mul.w	r3, r3, r2
 80075e6:	3390      	adds	r3, #144	; 0x90
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	3304      	adds	r3, #4
 80075ee:	461a      	mov	r2, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdd8 	bl	80081a6 <USBH_MSC_SCSI_ReadCapacity>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d120      	bne.n	8007642 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007606:	4619      	mov	r1, r3
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	2334      	movs	r3, #52	; 0x34
 800760c:	fb03 f301 	mul.w	r3, r3, r1
 8007610:	4413      	add	r3, r2
 8007612:	3390      	adds	r3, #144	; 0x90
 8007614:	2201      	movs	r2, #1
 8007616:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800761e:	4619      	mov	r1, r3
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	2334      	movs	r3, #52	; 0x34
 8007624:	fb03 f301 	mul.w	r3, r3, r1
 8007628:	4413      	add	r3, r2
 800762a:	3391      	adds	r3, #145	; 0x91
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007636:	3301      	adds	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007640:	e0d3      	b.n	80077ea <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b02      	cmp	r3, #2
 8007646:	d10c      	bne.n	8007662 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800764e:	4619      	mov	r1, r3
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	2334      	movs	r3, #52	; 0x34
 8007654:	fb03 f301 	mul.w	r3, r3, r1
 8007658:	4413      	add	r3, r2
 800765a:	3390      	adds	r3, #144	; 0x90
 800765c:	2205      	movs	r2, #5
 800765e:	701a      	strb	r2, [r3, #0]
            break;
 8007660:	e0c3      	b.n	80077ea <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b04      	cmp	r3, #4
 8007666:	f040 80c0 	bne.w	80077ea <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007670:	4619      	mov	r1, r3
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	2334      	movs	r3, #52	; 0x34
 8007676:	fb03 f301 	mul.w	r3, r3, r1
 800767a:	4413      	add	r3, r2
 800767c:	3390      	adds	r3, #144	; 0x90
 800767e:	2201      	movs	r2, #1
 8007680:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007688:	4619      	mov	r1, r3
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	2334      	movs	r3, #52	; 0x34
 800768e:	fb03 f301 	mul.w	r3, r3, r1
 8007692:	4413      	add	r3, r2
 8007694:	3391      	adds	r3, #145	; 0x91
 8007696:	2202      	movs	r2, #2
 8007698:	701a      	strb	r2, [r3, #0]
            break;
 800769a:	e0a6      	b.n	80077ea <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076a2:	b2d9      	uxtb	r1, r3
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076aa:	461a      	mov	r2, r3
 80076ac:	2334      	movs	r3, #52	; 0x34
 80076ae:	fb03 f302 	mul.w	r3, r3, r2
 80076b2:	3398      	adds	r3, #152	; 0x98
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	3304      	adds	r3, #4
 80076ba:	461a      	mov	r2, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fe92 	bl	80083e6 <USBH_MSC_SCSI_RequestSense>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d145      	bne.n	8007758 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d2:	4619      	mov	r1, r3
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	2334      	movs	r3, #52	; 0x34
 80076d8:	fb03 f301 	mul.w	r3, r3, r1
 80076dc:	4413      	add	r3, r2
 80076de:	339c      	adds	r3, #156	; 0x9c
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b06      	cmp	r3, #6
 80076e4:	d00c      	beq.n	8007700 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ec:	4619      	mov	r1, r3
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	2334      	movs	r3, #52	; 0x34
 80076f2:	fb03 f301 	mul.w	r3, r3, r1
 80076f6:	4413      	add	r3, r2
 80076f8:	339c      	adds	r3, #156	; 0x9c
 80076fa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d117      	bne.n	8007730 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007712:	4293      	cmp	r3, r2
 8007714:	d80c      	bhi.n	8007730 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800771c:	4619      	mov	r1, r3
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	2334      	movs	r3, #52	; 0x34
 8007722:	fb03 f301 	mul.w	r3, r3, r1
 8007726:	4413      	add	r3, r2
 8007728:	3390      	adds	r3, #144	; 0x90
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
                  break;
 800772e:	e05f      	b.n	80077f0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007736:	4619      	mov	r1, r3
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	2334      	movs	r3, #52	; 0x34
 800773c:	fb03 f301 	mul.w	r3, r3, r1
 8007740:	4413      	add	r3, r2
 8007742:	3390      	adds	r3, #144	; 0x90
 8007744:	2201      	movs	r2, #1
 8007746:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800774e:	3301      	adds	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d10c      	bne.n	8007778 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007764:	4619      	mov	r1, r3
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	2334      	movs	r3, #52	; 0x34
 800776a:	fb03 f301 	mul.w	r3, r3, r1
 800776e:	4413      	add	r3, r2
 8007770:	3390      	adds	r3, #144	; 0x90
 8007772:	2208      	movs	r2, #8
 8007774:	701a      	strb	r2, [r3, #0]
            break;
 8007776:	e03a      	b.n	80077ee <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b04      	cmp	r3, #4
 800777c:	d137      	bne.n	80077ee <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007784:	4619      	mov	r1, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	2334      	movs	r3, #52	; 0x34
 800778a:	fb03 f301 	mul.w	r3, r3, r1
 800778e:	4413      	add	r3, r2
 8007790:	3390      	adds	r3, #144	; 0x90
 8007792:	2201      	movs	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800779c:	4619      	mov	r1, r3
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	2334      	movs	r3, #52	; 0x34
 80077a2:	fb03 f301 	mul.w	r3, r3, r1
 80077a6:	4413      	add	r3, r2
 80077a8:	3391      	adds	r3, #145	; 0x91
 80077aa:	2202      	movs	r2, #2
 80077ac:	701a      	strb	r2, [r3, #0]
            break;
 80077ae:	e01e      	b.n	80077ee <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077b6:	3301      	adds	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80077c0:	e016      	b.n	80077f0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2201      	movs	r2, #1
 80077ce:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80077d6:	2102      	movs	r1, #2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
      break;
 80077dc:	e00c      	b.n	80077f8 <USBH_MSC_Process+0x514>
            break;
 80077de:	bf00      	nop
 80077e0:	e00a      	b.n	80077f8 <USBH_MSC_Process+0x514>
            break;
 80077e2:	bf00      	nop
 80077e4:	e008      	b.n	80077f8 <USBH_MSC_Process+0x514>
            break;
 80077e6:	bf00      	nop
 80077e8:	e006      	b.n	80077f8 <USBH_MSC_Process+0x514>
            break;
 80077ea:	bf00      	nop
 80077ec:	e004      	b.n	80077f8 <USBH_MSC_Process+0x514>
            break;
 80077ee:	bf00      	nop
      break;
 80077f0:	e002      	b.n	80077f8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]
      break;
 80077f6:	bf00      	nop
  }
  return error;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop

08007804 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af02      	add	r7, sp, #8
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007832:	2301      	movs	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	2134      	movs	r1, #52	; 0x34
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	3390      	adds	r3, #144	; 0x90
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b06      	cmp	r3, #6
 8007848:	d004      	beq.n	8007854 <USBH_MSC_RdWrProcess+0x3c>
 800784a:	2b07      	cmp	r3, #7
 800784c:	d037      	beq.n	80078be <USBH_MSC_RdWrProcess+0xa6>
 800784e:	2b05      	cmp	r3, #5
 8007850:	d06a      	beq.n	8007928 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007852:	e0a6      	b.n	80079a2 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007854:	78f9      	ldrb	r1, [r7, #3]
 8007856:	2300      	movs	r3, #0
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fea5 	bl	80085ae <USBH_MSC_SCSI_Read>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	2134      	movs	r1, #52	; 0x34
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	3390      	adds	r3, #144	; 0x90
 800787c:	2201      	movs	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	75fb      	strb	r3, [r7, #23]
      break;
 8007884:	e088      	b.n	8007998 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d109      	bne.n	80078a0 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	2134      	movs	r1, #52	; 0x34
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	4413      	add	r3, r2
 8007898:	3390      	adds	r3, #144	; 0x90
 800789a:	2205      	movs	r2, #5
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e07b      	b.n	8007998 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d178      	bne.n	8007998 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	2134      	movs	r1, #52	; 0x34
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	3390      	adds	r3, #144	; 0x90
 80078b4:	2208      	movs	r2, #8
 80078b6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80078b8:	2302      	movs	r3, #2
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	e06c      	b.n	8007998 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80078be:	78f9      	ldrb	r1, [r7, #3]
 80078c0:	2300      	movs	r3, #0
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fe05 	bl	80084d8 <USBH_MSC_SCSI_Write>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	2134      	movs	r1, #52	; 0x34
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	3390      	adds	r3, #144	; 0x90
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75fb      	strb	r3, [r7, #23]
      break;
 80078ee:	e055      	b.n	800799c <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d109      	bne.n	800790a <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	2134      	movs	r1, #52	; 0x34
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	3390      	adds	r3, #144	; 0x90
 8007904:	2205      	movs	r2, #5
 8007906:	701a      	strb	r2, [r3, #0]
      break;
 8007908:	e048      	b.n	800799c <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d145      	bne.n	800799c <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	2134      	movs	r1, #52	; 0x34
 8007916:	fb01 f303 	mul.w	r3, r1, r3
 800791a:	4413      	add	r3, r2
 800791c:	3390      	adds	r3, #144	; 0x90
 800791e:	2208      	movs	r2, #8
 8007920:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007922:	2302      	movs	r3, #2
 8007924:	75fb      	strb	r3, [r7, #23]
      break;
 8007926:	e039      	b.n	800799c <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	2234      	movs	r2, #52	; 0x34
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	3398      	adds	r3, #152	; 0x98
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4413      	add	r3, r2
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fd52 	bl	80083e6 <USBH_MSC_SCSI_RequestSense>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d113      	bne.n	8007974 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	2134      	movs	r1, #52	; 0x34
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	3390      	adds	r3, #144	; 0x90
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800795e:	78fb      	ldrb	r3, [r7, #3]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	2134      	movs	r1, #52	; 0x34
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	4413      	add	r3, r2
 800796a:	3391      	adds	r3, #145	; 0x91
 800796c:	2202      	movs	r2, #2
 800796e:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007970:	2302      	movs	r3, #2
 8007972:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d012      	beq.n	80079a0 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d10f      	bne.n	80079a0 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	2134      	movs	r1, #52	; 0x34
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	4413      	add	r3, r2
 800798c:	3390      	adds	r3, #144	; 0x90
 800798e:	2208      	movs	r2, #8
 8007990:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007992:	2302      	movs	r3, #2
 8007994:	75fb      	strb	r3, [r7, #23]
      break;
 8007996:	e003      	b.n	80079a0 <USBH_MSC_RdWrProcess+0x188>
      break;
 8007998:	bf00      	nop
 800799a:	e002      	b.n	80079a2 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800799c:	bf00      	nop
 800799e:	e000      	b.n	80079a2 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80079a0:	bf00      	nop

  }
  return error;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b0b      	cmp	r3, #11
 80079ca:	d10c      	bne.n	80079e6 <USBH_MSC_UnitIsReady+0x3a>
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	2134      	movs	r1, #52	; 0x34
 80079d2:	fb01 f303 	mul.w	r3, r1, r3
 80079d6:	4413      	add	r3, r2
 80079d8:	3391      	adds	r3, #145	; 0x91
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80079e0:	2301      	movs	r3, #1
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e001      	b.n	80079ea <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr

080079f6 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b086      	sub	sp, #24
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	460b      	mov	r3, r1
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b0b      	cmp	r3, #11
 8007a16:	d10d      	bne.n	8007a34 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007a18:	7afb      	ldrb	r3, [r7, #11]
 8007a1a:	2234      	movs	r2, #52	; 0x34
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	3390      	adds	r3, #144	; 0x90
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	2234      	movs	r2, #52	; 0x34
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f00f ff9d 	bl	801796a <memcpy>
    return USBH_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	e000      	b.n	8007a36 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007a34:	2302      	movs	r3, #2
  }
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af02      	add	r7, sp, #8
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00e      	beq.n	8007a82 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007a6a:	2b0b      	cmp	r3, #11
 8007a6c:	d109      	bne.n	8007a82 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	2134      	movs	r1, #52	; 0x34
 8007a74:	fb01 f303 	mul.w	r3, r1, r3
 8007a78:	4413      	add	r3, r2
 8007a7a:	3390      	adds	r3, #144	; 0x90
 8007a7c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d001      	beq.n	8007a86 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	e040      	b.n	8007b08 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2206      	movs	r2, #6
 8007a8a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	2134      	movs	r1, #52	; 0x34
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	3390      	adds	r3, #144	; 0x90
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007a9e:	7afb      	ldrb	r3, [r7, #11]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007aa8:	7af9      	ldrb	r1, [r7, #11]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fd7b 	bl	80085ae <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007abe:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007ac0:	e016      	b.n	8007af0 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	1ad2      	subs	r2, r2, r3
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d805      	bhi.n	8007ae6 <USBH_MSC_Read+0xa8>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007aec:	2302      	movs	r3, #2
 8007aee:	e00b      	b.n	8007b08 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff fe8f 	bl	8007818 <USBH_MSC_RdWrProcess>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d0e0      	beq.n	8007ac2 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2201      	movs	r2, #1
 8007b04:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af02      	add	r7, sp, #8
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007b3c:	2b0b      	cmp	r3, #11
 8007b3e:	d109      	bne.n	8007b54 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	2134      	movs	r1, #52	; 0x34
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3390      	adds	r3, #144	; 0x90
 8007b4e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d001      	beq.n	8007b58 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007b54:	2302      	movs	r3, #2
 8007b56:	e040      	b.n	8007bda <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2207      	movs	r2, #7
 8007b5c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	2134      	movs	r1, #52	; 0x34
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	3390      	adds	r3, #144	; 0x90
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007b7a:	7af9      	ldrb	r1, [r7, #11]
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fca7 	bl	80084d8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8007b90:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b92:	e016      	b.n	8007bc2 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ba4:	fb01 f303 	mul.w	r3, r1, r3
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d805      	bhi.n	8007bb8 <USBH_MSC_Write+0xa8>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d104      	bne.n	8007bc2 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e00b      	b.n	8007bda <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7ff fe26 	bl	8007818 <USBH_MSC_RdWrProcess>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d0e0      	beq.n	8007b94 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2221      	movs	r2, #33	; 0x21
 8007bee:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	22ff      	movs	r2, #255	; 0xff
 8007bf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 fc95 	bl	800953c <USBH_CtlReq>
 8007c12:	4603      	mov	r3, r0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	22a1      	movs	r2, #161	; 0xa1
 8007c2a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	22fe      	movs	r2, #254	; 0xfe
 8007c30:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007c44:	2201      	movs	r2, #1
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fc77 	bl	800953c <USBH_CtlReq>
 8007c4e:	4603      	mov	r3, r0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <USBH_MSC_BOT_Init+0x3c>)
 8007c6e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <USBH_MSC_BOT_Init+0x40>)
 8007c74:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	43425355 	.word	0x43425355
 8007c98:	20304050 	.word	0x20304050

08007c9c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	2b0a      	cmp	r3, #10
 8007cd0:	f200 81a1 	bhi.w	8008016 <USBH_MSC_BOT_Process+0x37a>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <USBH_MSC_BOT_Process+0x40>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	08007d33 	.word	0x08007d33
 8007ce4:	08007d9d 	.word	0x08007d9d
 8007ce8:	08007dbb 	.word	0x08007dbb
 8007cec:	08007e3f 	.word	0x08007e3f
 8007cf0:	08007e63 	.word	0x08007e63
 8007cf4:	08007efd 	.word	0x08007efd
 8007cf8:	08007f19 	.word	0x08007f19
 8007cfc:	08007f6b 	.word	0x08007f6b
 8007d00:	08007f9b 	.word	0x08007f9b
 8007d04:	08007ffd 	.word	0x08007ffd
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	78fa      	ldrb	r2, [r7, #3]
 8007d0c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	795a      	ldrb	r2, [r3, #5]
 8007d22:	2301      	movs	r3, #1
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	4613      	mov	r3, r2
 8007d28:	221f      	movs	r2, #31
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fe17 	bl	800995e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007d30:	e180      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	795b      	ldrb	r3, [r3, #5]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f00f fcf1 	bl	8017720 <USBH_LL_GetURBState>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007d42:	7d3b      	ldrb	r3, [r7, #20]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d118      	bne.n	8007d7a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da04      	bge.n	8007d66 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2203      	movs	r2, #3
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d64:	e159      	b.n	800801a <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d6e:	e154      	b.n	800801a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2207      	movs	r2, #7
 8007d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d78:	e14f      	b.n	800801a <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d7a:	7d3b      	ldrb	r3, [r7, #20]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d104      	bne.n	8007d8a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d88:	e147      	b.n	800801a <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8007d8a:	7d3b      	ldrb	r3, [r7, #20]
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	f040 8144 	bne.w	800801a <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	220a      	movs	r2, #10
 8007d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d9a:	e13e      	b.n	800801a <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	895a      	ldrh	r2, [r3, #10]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fdfc 	bl	80099a8 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	2204      	movs	r2, #4
 8007db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007db8:	e13c      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f00f fcad 	bl	8017720 <USBH_LL_GetURBState>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007dca:	7d3b      	ldrb	r3, [r7, #20]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d12d      	bne.n	8007e2c <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	8952      	ldrh	r2, [r2, #10]
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d910      	bls.n	8007dfe <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	8952      	ldrh	r2, [r2, #10]
 8007de6:	441a      	add	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	8952      	ldrh	r2, [r2, #10]
 8007df6:	1a9a      	subs	r2, r3, r2
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8007dfc:	e002      	b.n	8007e04 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2200      	movs	r2, #0
 8007e02:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	895a      	ldrh	r2, [r3, #10]
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fdc4 	bl	80099a8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007e20:	e0fd      	b.n	800801e <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2207      	movs	r2, #7
 8007e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e2a:	e0f8      	b.n	800801e <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8007e2c:	7d3b      	ldrb	r3, [r7, #20]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	f040 80f5 	bne.w	800801e <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2209      	movs	r2, #9
 8007e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e3c:	e0ef      	b.n	800801e <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	891a      	ldrh	r2, [r3, #8]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	7958      	ldrb	r0, [r3, #5]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	4603      	mov	r3, r0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 fd83 	bl	800995e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2206      	movs	r2, #6
 8007e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e60:	e0e8      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f00f fc59 	bl	8017720 <USBH_LL_GetURBState>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007e72:	7d3b      	ldrb	r3, [r7, #20]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d130      	bne.n	8007eda <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	8912      	ldrh	r2, [r2, #8]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d910      	bls.n	8007ea6 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	8912      	ldrh	r2, [r2, #8]
 8007e8e:	441a      	add	r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	8912      	ldrh	r2, [r2, #8]
 8007e9e:	1a9a      	subs	r2, r3, r2
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ea4:	e002      	b.n	8007eac <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00d      	beq.n	8007ed0 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	891a      	ldrh	r2, [r3, #8]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	7958      	ldrb	r0, [r3, #5]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fd48 	bl	800995e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007ece:	e0a8      	b.n	8008022 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2207      	movs	r2, #7
 8007ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ed8:	e0a3      	b.n	8008022 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007eda:	7d3b      	ldrb	r3, [r7, #20]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d104      	bne.n	8007eea <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ee8:	e09b      	b.n	8008022 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8007eea:	7d3b      	ldrb	r3, [r7, #20]
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	f040 8098 	bne.w	8008022 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007efa:	e092      	b.n	8008022 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	220d      	movs	r2, #13
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fd4d 	bl	80099a8 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2208      	movs	r2, #8
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f16:	e08d      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f00f fbfe 	bl	8017720 <USBH_LL_GetURBState>
 8007f24:	4603      	mov	r3, r0
 8007f26:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007f28:	7d3b      	ldrb	r3, [r7, #20]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d115      	bne.n	8007f5a <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f8aa 	bl	8008098 <USBH_MSC_DecodeCSW>
 8007f44:	4603      	mov	r3, r0
 8007f46:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007f48:	7d7b      	ldrb	r3, [r7, #21]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007f52:	e068      	b.n	8008026 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8007f54:	2302      	movs	r3, #2
 8007f56:	75fb      	strb	r3, [r7, #23]
      break;
 8007f58:	e065      	b.n	8008026 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007f5a:	7d3b      	ldrb	r3, [r7, #20]
 8007f5c:	2b05      	cmp	r3, #5
 8007f5e:	d162      	bne.n	8008026 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2209      	movs	r2, #9
 8007f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f68:	e05d      	b.n	8008026 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007f6a:	78fb      	ldrb	r3, [r7, #3]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f865 	bl	8008040 <USBH_MSC_BOT_Abort>
 8007f76:	4603      	mov	r3, r0
 8007f78:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007f7a:	7dbb      	ldrb	r3, [r7, #22]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2207      	movs	r2, #7
 8007f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007f88:	e04f      	b.n	800802a <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007f8a:	7dbb      	ldrb	r3, [r7, #22]
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d14c      	bne.n	800802a <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	220b      	movs	r2, #11
 8007f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f98:	e047      	b.n	800802a <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f84d 	bl	8008040 <USBH_MSC_BOT_Abort>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11d      	bne.n	8007fec <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	795b      	ldrb	r3, [r3, #5]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f00f fc0e 	bl	80177d8 <USBH_LL_GetToggle>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	7959      	ldrb	r1, [r3, #5]
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	f1c3 0301 	rsb	r3, r3, #1
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f00f fbd0 	bl	8017774 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f00f fbc9 	bl	8017774 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2209      	movs	r2, #9
 8007fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007fea:	e020      	b.n	800802e <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007fec:	7dbb      	ldrb	r3, [r7, #22]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d11d      	bne.n	800802e <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	220b      	movs	r2, #11
 8007ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ffa:	e018      	b.n	800802e <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fdf0 	bl	8007be2 <USBH_MSC_BOT_REQ_Reset>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d112      	bne.n	8008032 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008014:	e00d      	b.n	8008032 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008016:	bf00      	nop
 8008018:	e00c      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 800801a:	bf00      	nop
 800801c:	e00a      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 800801e:	bf00      	nop
 8008020:	e008      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 8008022:	bf00      	nop
 8008024:	e006      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 8008026:	bf00      	nop
 8008028:	e004      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 800802a:	bf00      	nop
 800802c:	e002      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 800802e:	bf00      	nop
 8008030:	e000      	b.n	8008034 <USBH_MSC_BOT_Process+0x398>
      break;
 8008032:	bf00      	nop
  }
  return status;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	460b      	mov	r3, r1
 800804a:	70fb      	strb	r3, [r7, #3]
 800804c:	4613      	mov	r3, r2
 800804e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008050:	2302      	movs	r3, #2
 8008052:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800805e:	78bb      	ldrb	r3, [r7, #2]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <USBH_MSC_BOT_Abort+0x2a>
 8008064:	2b01      	cmp	r3, #1
 8008066:	d009      	beq.n	800807c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008068:	e011      	b.n	800808e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	79db      	ldrb	r3, [r3, #7]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f888 	bl	8009186 <USBH_ClrFeature>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
      break;
 800807a:	e008      	b.n	800808e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	799b      	ldrb	r3, [r3, #6]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f87f 	bl	8009186 <USBH_ClrFeature>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
      break;
 800808c:	bf00      	nop
  }
  return status;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	791b      	ldrb	r3, [r3, #4]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f00f faa1 	bl	80175fc <USBH_LL_GetLastXferSize>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b0d      	cmp	r3, #13
 80080be:	d002      	beq.n	80080c6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80080c0:	2302      	movs	r3, #2
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e024      	b.n	8008110 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ca:	4a14      	ldr	r2, [pc, #80]	; (800811c <USBH_MSC_DecodeCSW+0x84>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d11d      	bne.n	800810c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d8:	429a      	cmp	r2, r3
 80080da:	d119      	bne.n	8008110 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
 80080ea:	e011      	b.n	8008110 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d102      	bne.n	80080fc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80080f6:	2301      	movs	r3, #1
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	e009      	b.n	8008110 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008102:	2b02      	cmp	r3, #2
 8008104:	d104      	bne.n	8008110 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008106:	2302      	movs	r3, #2
 8008108:	73fb      	strb	r3, [r7, #15]
 800810a:	e001      	b.n	8008110 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800810c:	2302      	movs	r3, #2
 800810e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	53425355 	.word	0x53425355

08008120 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800812c:	2302      	movs	r3, #2
 800812e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008140:	2b01      	cmp	r3, #1
 8008142:	d002      	beq.n	800814a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008144:	2b02      	cmp	r3, #2
 8008146:	d021      	beq.n	800818c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008148:	e028      	b.n	800819c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	220a      	movs	r2, #10
 800815c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	3363      	adds	r3, #99	; 0x63
 8008164:	2210      	movs	r2, #16
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f00f fc09 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2202      	movs	r2, #2
 8008182:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
      break;
 800818a:	e007      	b.n	800819c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fd83 	bl	8007c9c <USBH_MSC_BOT_Process>
 8008196:	4603      	mov	r3, r0
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	bf00      	nop
  }

  return error;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	460b      	mov	r3, r1
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80081b4:	2301      	movs	r3, #1
 80081b6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d002      	beq.n	80081d2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d027      	beq.n	8008220 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80081d0:	e05f      	b.n	8008292 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2208      	movs	r2, #8
 80081d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2280      	movs	r2, #128	; 0x80
 80081dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	220a      	movs	r2, #10
 80081e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3363      	adds	r3, #99	; 0x63
 80081ec:	2210      	movs	r2, #16
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f00f fbc5 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2225      	movs	r2, #37	; 0x25
 80081fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f103 0210 	add.w	r2, r3, #16
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800821a:	2301      	movs	r3, #1
 800821c:	75fb      	strb	r3, [r7, #23]
      break;
 800821e:	e038      	b.n	8008292 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008220:	7afb      	ldrb	r3, [r7, #11]
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fd39 	bl	8007c9c <USBH_MSC_BOT_Process>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d12d      	bne.n	8008290 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823a:	3303      	adds	r3, #3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008246:	3302      	adds	r3, #2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008254:	3301      	adds	r3, #1
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800825a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008272:	3307      	adds	r3, #7
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b29a      	uxth	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827e:	3306      	adds	r3, #6
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	b29b      	uxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	809a      	strh	r2, [r3, #4]
      break;
 8008290:	bf00      	nop
  }

  return error;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d002      	beq.n	80082c8 <USBH_MSC_SCSI_Inquiry+0x2c>
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d03d      	beq.n	8008342 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80082c6:	e089      	b.n	80083dc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2224      	movs	r2, #36	; 0x24
 80082cc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2280      	movs	r2, #128	; 0x80
 80082d2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	220a      	movs	r2, #10
 80082da:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3363      	adds	r3, #99	; 0x63
 80082e2:	220a      	movs	r2, #10
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f00f fb4a 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2212      	movs	r2, #18
 80082f0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	015b      	lsls	r3, r3, #5
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	2224      	movs	r2, #36	; 0x24
 8008314:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f103 0210 	add.w	r2, r3, #16
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
      break;
 8008340:	e04c      	b.n	80083dc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008342:	7afb      	ldrb	r3, [r7, #11]
 8008344:	4619      	mov	r1, r3
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fca8 	bl	8007c9c <USBH_MSC_BOT_Process>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d141      	bne.n	80083da <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008356:	2222      	movs	r2, #34	; 0x22
 8008358:	2100      	movs	r1, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f00f fb10 	bl	8017980 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	b2da      	uxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	b2da      	uxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	3301      	adds	r3, #1
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b25b      	sxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	da03      	bge.n	800839a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	709a      	strb	r2, [r3, #2]
 8008398:	e002      	b.n	80083a0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	1cd8      	adds	r0, r3, #3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083aa:	3308      	adds	r3, #8
 80083ac:	2208      	movs	r2, #8
 80083ae:	4619      	mov	r1, r3
 80083b0:	f00f fadb 	bl	801796a <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f103 000c 	add.w	r0, r3, #12
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c0:	3310      	adds	r3, #16
 80083c2:	2210      	movs	r2, #16
 80083c4:	4619      	mov	r1, r3
 80083c6:	f00f fad0 	bl	801796a <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	331d      	adds	r3, #29
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80083d4:	3220      	adds	r2, #32
 80083d6:	6812      	ldr	r2, [r2, #0]
 80083d8:	601a      	str	r2, [r3, #0]
      break;
 80083da:	bf00      	nop
  }

  return error;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	460b      	mov	r3, r1
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083f4:	2302      	movs	r3, #2
 80083f6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008408:	2b01      	cmp	r3, #1
 800840a:	d002      	beq.n	8008412 <USBH_MSC_SCSI_RequestSense+0x2c>
 800840c:	2b02      	cmp	r3, #2
 800840e:	d03d      	beq.n	800848c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008410:	e05d      	b.n	80084ce <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	220e      	movs	r2, #14
 8008416:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2280      	movs	r2, #128	; 0x80
 800841c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	220a      	movs	r2, #10
 8008424:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3363      	adds	r3, #99	; 0x63
 800842c:	2210      	movs	r2, #16
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f00f faa5 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2203      	movs	r2, #3
 800843a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	015b      	lsls	r3, r3, #5
 8008442:	b2da      	uxtb	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	220e      	movs	r2, #14
 800845e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	f103 0210 	add.w	r2, r3, #16
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008486:	2301      	movs	r3, #1
 8008488:	75fb      	strb	r3, [r7, #23]
      break;
 800848a:	e020      	b.n	80084ce <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	4619      	mov	r1, r3
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fc03 	bl	8007c9c <USBH_MSC_BOT_Process>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d115      	bne.n	80084cc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a6:	3302      	adds	r3, #2
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f003 030f 	and.w	r3, r3, #15
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ba:	7b1a      	ldrb	r2, [r3, #12]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c6:	7b5a      	ldrb	r2, [r3, #13]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	709a      	strb	r2, [r3, #2]
      break;
 80084cc:	bf00      	nop
  }

  return error;
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	460b      	mov	r3, r1
 80084e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80084e8:	2302      	movs	r3, #2
 80084ea:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d002      	beq.n	8008506 <USBH_MSC_SCSI_Write+0x2e>
 8008500:	2b02      	cmp	r3, #2
 8008502:	d047      	beq.n	8008594 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008504:	e04e      	b.n	80085a4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800850c:	461a      	mov	r2, r3
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	fb03 f202 	mul.w	r2, r3, r2
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	220a      	movs	r2, #10
 8008524:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3363      	adds	r3, #99	; 0x63
 800852c:	2210      	movs	r2, #16
 800852e:	2100      	movs	r1, #0
 8008530:	4618      	mov	r0, r3
 8008532:	f00f fa25 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	222a      	movs	r2, #42	; 0x2a
 800853a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800853e:	79fa      	ldrb	r2, [r7, #7]
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008546:	79ba      	ldrb	r2, [r7, #6]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800854e:	797a      	ldrb	r2, [r7, #5]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008560:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800856a:	f107 0320 	add.w	r3, r7, #32
 800856e:	781a      	ldrb	r2, [r3, #0]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2202      	movs	r2, #2
 8008582:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
      break;
 8008592:	e007      	b.n	80085a4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	4619      	mov	r1, r3
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f7ff fb7f 	bl	8007c9c <USBH_MSC_BOT_Process>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]
      break;
 80085a2:	bf00      	nop
  }

  return error;
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	460b      	mov	r3, r1
 80085bc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80085be:	2302      	movs	r3, #2
 80085c0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d002      	beq.n	80085dc <USBH_MSC_SCSI_Read+0x2e>
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d047      	beq.n	800866a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80085da:	e04e      	b.n	800867a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80085e2:	461a      	mov	r2, r3
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	fb03 f202 	mul.w	r2, r3, r2
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2280      	movs	r2, #128	; 0x80
 80085f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	220a      	movs	r2, #10
 80085fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3363      	adds	r3, #99	; 0x63
 8008602:	2210      	movs	r2, #16
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f00f f9ba 	bl	8017980 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2228      	movs	r2, #40	; 0x28
 8008610:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008614:	79fa      	ldrb	r2, [r7, #7]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800861c:	79ba      	ldrb	r2, [r7, #6]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008624:	797a      	ldrb	r2, [r7, #5]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800862c:	1d3b      	adds	r3, r7, #4
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008636:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008640:	f107 0320 	add.w	r3, r7, #32
 8008644:	781a      	ldrb	r2, [r3, #0]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2202      	movs	r2, #2
 8008658:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008664:	2301      	movs	r3, #1
 8008666:	75fb      	strb	r3, [r7, #23]
      break;
 8008668:	e007      	b.n	800867a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	4619      	mov	r1, r3
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fb14 	bl	8007c9c <USBH_MSC_BOT_Process>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]
      break;
 8008678:	bf00      	nop
  }

  return error;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008698:	2302      	movs	r3, #2
 800869a:	e029      	b.n	80086f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	79fa      	ldrb	r2, [r7, #7]
 80086a0:	f883 23c4 	strb.w	r2, [r3, #964]	; 0x3c4

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 f81f 	bl	80086f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f00e fedb 	bl	80174a4 <USBH_LL_Init>

  return USBH_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e008      	b.n	800871c <DeInitStateMachine+0x24>
  {
    phost->Pipes[i] = 0U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	32e0      	adds	r2, #224	; 0xe0
 8008710:	2100      	movs	r1, #0
 8008712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b0e      	cmp	r3, #14
 8008720:	d9f3      	bls.n	800870a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e009      	b.n	800873c <DeInitStateMachine+0x44>
  {
    phost->device.Data[i] = 0U;
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008742:	d3f1      	bcc.n	8008728 <DeInitStateMachine+0x30>
  }

  phost->gState = HOST_IDLE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2240      	movs	r2, #64	; 0x40
 8008768:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bc80      	pop	{r7}
 800878a:	4770      	bx	lr

0800878c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d017      	beq.n	80087d0 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b0:	1c59      	adds	r1, r3, #1
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	33dc      	adds	r3, #220	; 0xdc
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
 80087c8:	e004      	b.n	80087d4 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80087ca:	2302      	movs	r3, #2
 80087cc:	73fb      	strb	r3, [r7, #15]
 80087ce:	e001      	b.n	80087d4 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d204      	bcs.n	8008806 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8008804:	e001      	b.n	800880a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008806:	2302      	movs	r3, #2
 8008808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr

08008816 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008816:	b480      	push	{r7}
 8008818:	b087      	sub	sp, #28
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	4608      	mov	r0, r1
 8008820:	4611      	mov	r1, r2
 8008822:	461a      	mov	r2, r3
 8008824:	4603      	mov	r3, r0
 8008826:	70fb      	strb	r3, [r7, #3]
 8008828:	460b      	mov	r3, r1
 800882a:	70bb      	strb	r3, [r7, #2]
 800882c:	4613      	mov	r3, r2
 800882e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008834:	2300      	movs	r3, #0
 8008836:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f203 3336 	addw	r3, r3, #822	; 0x336
 800883e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008840:	e025      	b.n	800888e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	221a      	movs	r2, #26
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	3308      	adds	r3, #8
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	3302      	adds	r3, #2
 8008852:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	795b      	ldrb	r3, [r3, #5]
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	429a      	cmp	r2, r3
 800885c:	d002      	beq.n	8008864 <USBH_FindInterface+0x4e>
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	2bff      	cmp	r3, #255	; 0xff
 8008862:	d111      	bne.n	8008888 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008868:	78ba      	ldrb	r2, [r7, #2]
 800886a:	429a      	cmp	r2, r3
 800886c:	d002      	beq.n	8008874 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800886e:	78bb      	ldrb	r3, [r7, #2]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d109      	bne.n	8008888 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008878:	787a      	ldrb	r2, [r7, #1]
 800887a:	429a      	cmp	r2, r3
 800887c:	d002      	beq.n	8008884 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800887e:	787b      	ldrb	r3, [r7, #1]
 8008880:	2bff      	cmp	r3, #255	; 0xff
 8008882:	d101      	bne.n	8008888 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	e006      	b.n	8008896 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	3301      	adds	r3, #1
 800888c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d9d6      	bls.n	8008842 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008894:	23ff      	movs	r3, #255	; 0xff
}
 8008896:	4618      	mov	r0, r3
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f00e fe31 	bl	8017510 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80088ae:	2101      	movs	r1, #1
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f00e ff48 	bl	8017746 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d102      	bne.n	80088e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2203      	movs	r2, #3
 80088e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b0b      	cmp	r3, #11
 80088ea:	f200 8177 	bhi.w	8008bdc <USBH_Process+0x31c>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <USBH_Process+0x34>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008925 	.word	0x08008925
 80088f8:	08008947 	.word	0x08008947
 80088fc:	0800895b 	.word	0x0800895b
 8008900:	08008b77 	.word	0x08008b77
 8008904:	08008bdd 	.word	0x08008bdd
 8008908:	080089ff 	.word	0x080089ff
 800890c:	08008b2d 	.word	0x08008b2d
 8008910:	08008a2f 	.word	0x08008a2f
 8008914:	08008a4f 	.word	0x08008a4f
 8008918:	08008a6f 	.word	0x08008a6f
 800891c:	08008a9d 	.word	0x08008a9d
 8008920:	08008b5f 	.word	0x08008b5f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8157 	beq.w	8008be0 <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008938:	20c8      	movs	r0, #200	; 0xc8
 800893a:	f00e ff7f 	bl	801783c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f00e fe41 	bl	80175c6 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008944:	e14c      	b.n	8008be0 <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800894c:	2b01      	cmp	r3, #1
 800894e:	f040 8149 	bne.w	8008be4 <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008958:	e144      	b.n	8008be4 <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800896a:	2104      	movs	r1, #4
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008970:	2064      	movs	r0, #100	; 0x64
 8008972:	f00e ff63 	bl	801783c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f00e fe00 	bl	801757c <USBH_LL_GetSpeed>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2205      	movs	r2, #5
 800898a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800898c:	2100      	movs	r1, #0
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 f857 	bl	8009a42 <USBH_AllocPipe>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800899c:	2180      	movs	r1, #128	; 0x80
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f84f 	bl	8009a42 <USBH_AllocPipe>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7919      	ldrb	r1, [r3, #4]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80089c0:	b292      	uxth	r2, r2
 80089c2:	9202      	str	r2, [sp, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	9201      	str	r2, [sp, #4]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	4603      	mov	r3, r0
 80089cc:	2280      	movs	r2, #128	; 0x80
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 f808 	bl	80099e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7959      	ldrb	r1, [r3, #5]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80089e8:	b292      	uxth	r2, r2
 80089ea:	9202      	str	r2, [sp, #8]
 80089ec:	2200      	movs	r2, #0
 80089ee:	9201      	str	r2, [sp, #4]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4603      	mov	r3, r0
 80089f4:	2200      	movs	r2, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fff4 	bl	80099e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80089fc:	e101      	b.n	8008c02 <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f904 	bl	8008c0c <USBH_HandleEnum>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 80ee 	bne.w	8008be8 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d103      	bne.n	8008a26 <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2208      	movs	r2, #8
 8008a22:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8008a24:	e0e0      	b.n	8008be8 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2207      	movs	r2, #7
 8008a2a:	701a      	strb	r2, [r3, #0]
      break;
 8008a2c:	e0dc      	b.n	8008be8 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80d9 	beq.w	8008bec <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008a40:	2101      	movs	r1, #1
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008a4c:	e0ce      	b.n	8008bec <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb4d 	bl	80090f8 <USBH_SetCfg>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 80c5 	bne.w	8008bf0 <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2209      	movs	r2, #9
 8008a6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a6c:	e0c0      	b.n	8008bf0 <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fb5d 	bl	800913e <USBH_SetFeature>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f040 80b4 	bne.w	8008bf4 <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	220a      	movs	r2, #10
 8008a90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a92:	e0af      	b.n	8008bf4 <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	220a      	movs	r2, #10
 8008a98:	701a      	strb	r2, [r3, #0]
      break;
 8008a9a:	e0ab      	b.n	8008bf4 <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80a8 	beq.w	8008bf8 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e017      	b.n	8008ae6 <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	33dc      	adds	r3, #220	; 0xdc
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	791a      	ldrb	r2, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d108      	bne.n	8008ae0 <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	33dc      	adds	r3, #220	; 0xdc
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0e4      	beq.n	8008ab6 <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d016      	beq.n	8008b24 <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2206      	movs	r2, #6
 8008b0c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008b14:	2103      	movs	r1, #3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b1a:	e06d      	b.n	8008bf8 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	220d      	movs	r2, #13
 8008b20:	701a      	strb	r2, [r3, #0]
      break;
 8008b22:	e069      	b.n	8008bf8 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	220d      	movs	r2, #13
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e065      	b.n	8008bf8 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00f      	beq.n	8008b56 <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
 8008b42:	4603      	mov	r3, r0
 8008b44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d156      	bne.n	8008bfc <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	220b      	movs	r2, #11
 8008b52:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b54:	e052      	b.n	8008bfc <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	220d      	movs	r2, #13
 8008b5a:	701a      	strb	r2, [r3, #0]
      break;
 8008b5c:	e04e      	b.n	8008bfc <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d04b      	beq.n	8008c00 <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
      }
      break;
 8008b74:	e044      	b.n	8008c00 <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7ff fdba 	bl	80086f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      }

      if (phost->pUser != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8008bb2:	2105      	movs	r1, #5
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d107      	bne.n	8008bd4 <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff fe67 	bl	80088a0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bd2:	e016      	b.n	8008c02 <USBH_Process+0x342>
        USBH_LL_Start(phost);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f00e fc9b 	bl	8017510 <USBH_LL_Start>
      break;
 8008bda:	e012      	b.n	8008c02 <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 8008bdc:	bf00      	nop
 8008bde:	e010      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008be0:	bf00      	nop
 8008be2:	e00e      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008be4:	bf00      	nop
 8008be6:	e00c      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008be8:	bf00      	nop
 8008bea:	e00a      	b.n	8008c02 <USBH_Process+0x342>
    break;
 8008bec:	bf00      	nop
 8008bee:	e008      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008bf0:	bf00      	nop
 8008bf2:	e006      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008bf4:	bf00      	nop
 8008bf6:	e004      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008bf8:	bf00      	nop
 8008bfa:	e002      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008bfc:	bf00      	nop
 8008bfe:	e000      	b.n	8008c02 <USBH_Process+0x342>
      break;
 8008c00:	bf00      	nop
  }
  return USBH_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b07      	cmp	r3, #7
 8008c1e:	f200 80f8 	bhi.w	8008e12 <USBH_HandleEnum+0x206>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBH_HandleEnum+0x1c>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c49 	.word	0x08008c49
 8008c2c:	08008cbb 	.word	0x08008cbb
 8008c30:	08008cd3 	.word	0x08008cd3
 8008c34:	08008d49 	.word	0x08008d49
 8008c38:	08008d5f 	.word	0x08008d5f
 8008c3c:	08008d7b 	.word	0x08008d7b
 8008c40:	08008daf 	.word	0x08008daf
 8008c44:	08008de3 	.word	0x08008de3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008c48:	2108      	movs	r1, #8
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f984 	bl	8008f58 <USBH_Get_DevDesc>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f040 80df 	bne.w	8008e16 <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7919      	ldrb	r1, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008c7c:	b292      	uxth	r2, r2
 8008c7e:	9202      	str	r2, [sp, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	4603      	mov	r3, r0
 8008c88:	2280      	movs	r2, #128	; 0x80
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 feaa 	bl	80099e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7959      	ldrb	r1, [r3, #5]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008ca4:	b292      	uxth	r2, r2
 8008ca6:	9202      	str	r2, [sp, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fe96 	bl	80099e4 <USBH_OpenPipe>
      }
      break;
 8008cb8:	e0ad      	b.n	8008e16 <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 8008cba:	2112      	movs	r1, #18
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f94b 	bl	8008f58 <USBH_Get_DevDesc>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 80a8 	bne.w	8008e1a <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	705a      	strb	r2, [r3, #1]

      }
      break;
 8008cd0:	e0a3      	b.n	8008e1a <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f9eb 	bl	80090b0 <USBH_SetAddress>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 809e 	bne.w	8008e1e <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 8008ce2:	2002      	movs	r0, #2
 8008ce4:	f00e fdaa 	bl	801783c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7919      	ldrb	r1, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008d0a:	b292      	uxth	r2, r2
 8008d0c:	9202      	str	r2, [sp, #8]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	9201      	str	r2, [sp, #4]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4603      	mov	r3, r0
 8008d16:	2280      	movs	r2, #128	; 0x80
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fe63 	bl	80099e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7959      	ldrb	r1, [r3, #5]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8008d32:	b292      	uxth	r2, r2
 8008d34:	9202      	str	r2, [sp, #8]
 8008d36:	2200      	movs	r2, #0
 8008d38:	9201      	str	r2, [sp, #4]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fe4f 	bl	80099e4 <USBH_OpenPipe>
      }
      break;
 8008d46:	e06a      	b.n	8008e1e <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8008d48:	2109      	movs	r1, #9
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f92c 	bl	8008fa8 <USBH_Get_CfgDesc>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d165      	bne.n	8008e22 <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	705a      	strb	r2, [r3, #1]
      }
      break;
 8008d5c:	e061      	b.n	8008e22 <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f91e 	bl	8008fa8 <USBH_Get_CfgDesc>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d159      	bne.n	8008e26 <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2205      	movs	r2, #5
 8008d76:	705a      	strb	r2, [r3, #1]
      }
      break;
 8008d78:	e055      	b.n	8008e26 <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d010      	beq.n	8008da6 <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008d90:	23ff      	movs	r3, #255	; 0xff
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f92c 	bl	8008ff0 <USBH_Get_StringDesc>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d145      	bne.n	8008e2a <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2206      	movs	r2, #6
 8008da2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008da4:	e041      	b.n	8008e2a <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2206      	movs	r2, #6
 8008daa:	705a      	strb	r2, [r3, #1]
      break;
 8008dac:	e03d      	b.n	8008e2a <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d010      	beq.n	8008dda <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008dc4:	23ff      	movs	r3, #255	; 0xff
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f912 	bl	8008ff0 <USBH_Get_StringDesc>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d12d      	bne.n	8008e2e <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008dd8:	e029      	b.n	8008e2e <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2207      	movs	r2, #7
 8008dde:	705a      	strb	r2, [r3, #1]
      break;
 8008de0:	e025      	b.n	8008e2e <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00f      	beq.n	8008e0c <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8008df8:	23ff      	movs	r3, #255	; 0xff
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f8f8 	bl	8008ff0 <USBH_Get_StringDesc>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d115      	bne.n	8008e32 <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e0a:	e012      	b.n	8008e32 <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e10:	e00f      	b.n	8008e32 <USBH_HandleEnum+0x226>

    default:
      break;
 8008e12:	bf00      	nop
 8008e14:	e00e      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e16:	bf00      	nop
 8008e18:	e00c      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e1a:	bf00      	nop
 8008e1c:	e00a      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e1e:	bf00      	nop
 8008e20:	e008      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e22:	bf00      	nop
 8008e24:	e006      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e26:	bf00      	nop
 8008e28:	e004      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e2a:	bf00      	nop
 8008e2c:	e002      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <USBH_HandleEnum+0x228>
      break;
 8008e32:	bf00      	nop
  }
  return Status;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop

08008e40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	683a      	ldr	r2, [r7, #0]
 8008e4e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  USBH_HandleSof(phost);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f804 	bl	8008e80 <USBH_HandleSof>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b0b      	cmp	r3, #11
 8008e90:	d10a      	bne.n	8008ea8 <USBH_HandleSof+0x28>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d005      	beq.n	8008ea8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008ec0:	bf00      	nop
}
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr

08008eca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8008eda:	bf00      	nop
}
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bc80      	pop	{r7}
 8008ee2:	4770      	bx	lr

08008ee4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f00e fb08 	bl	8017546 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	791b      	ldrb	r3, [r3, #4]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fda0 	bl	8009a82 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	795b      	ldrb	r3, [r3, #5]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fd9a 	bl	8009a82 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af02      	add	r7, sp, #8
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4613      	mov	r3, r2
 8008f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f76:	2100      	movs	r1, #0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f864 	bl	8009046 <USBH_GetDescriptor>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	b292      	uxth	r2, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f000 f918 	bl	80091ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	331c      	adds	r3, #28
 8008fb8:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008fba:	887b      	ldrh	r3, [r7, #2]
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f83d 	bl	8009046 <USBH_GetDescriptor>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	72fb      	strb	r3, [r7, #11]
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d107      	bne.n	8008fe6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f203 3336 	addw	r3, r3, #822	; 0x336
 8008fdc:	887a      	ldrh	r2, [r7, #2]
 8008fde:	68f9      	ldr	r1, [r7, #12]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f963 	bl	80092ac <USBH_ParseCfgDesc>
  }

  return status;
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	72fb      	strb	r3, [r7, #11]
 8009000:	4613      	mov	r3, r2
 8009002:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800900c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009014:	893b      	ldrh	r3, [r7, #8]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	460b      	mov	r3, r1
 800901a:	2100      	movs	r1, #0
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f812 	bl	8009046 <USBH_GetDescriptor>
 8009022:	4603      	mov	r3, r0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d107      	bne.n	800903c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009032:	893a      	ldrh	r2, [r7, #8]
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa34 	bl	80094a4 <USBH_ParseStringDesc>
  }

  return status;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	72fb      	strb	r3, [r7, #11]
 8009054:	4613      	mov	r3, r2
 8009056:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	789b      	ldrb	r3, [r3, #2]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d11c      	bne.n	800909a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009066:	b2da      	uxtb	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2206      	movs	r2, #6
 8009070:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	893a      	ldrh	r2, [r7, #8]
 8009076:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009078:	893b      	ldrh	r3, [r7, #8]
 800907a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800907e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009082:	d104      	bne.n	800908e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f240 4209 	movw	r2, #1033	; 0x409
 800908a:	829a      	strh	r2, [r3, #20]
 800908c:	e002      	b.n	8009094 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8b3a      	ldrh	r2, [r7, #24]
 8009098:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800909a:	8b3b      	ldrh	r3, [r7, #24]
 800909c:	461a      	mov	r2, r3
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fa4b 	bl	800953c <USBH_CtlReq>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	789b      	ldrb	r3, [r3, #2]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10f      	bne.n	80090e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2205      	movs	r2, #5
 80090ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090e4:	2200      	movs	r2, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa27 	bl	800953c <USBH_CtlReq>
 80090ee:	4603      	mov	r3, r0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	789b      	ldrb	r3, [r3, #2]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10e      	bne.n	800912a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2209      	movs	r2, #9
 8009116:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	887a      	ldrh	r2, [r7, #2]
 800911c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800912a:	2200      	movs	r2, #0
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fa04 	bl	800953c <USBH_CtlReq>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	789b      	ldrb	r3, [r3, #2]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10f      	bne.n	8009172 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2203      	movs	r2, #3
 800915c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9e0 	bl	800953c <USBH_CtlReq>
 800917c:	4603      	mov	r3, r0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	789b      	ldrb	r3, [r3, #2]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d10f      	bne.n	80091ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2202      	movs	r2, #2
 800919e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f9bc 	bl	800953c <USBH_CtlReq>
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b085      	sub	sp, #20
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	4613      	mov	r3, r2
 80091da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	785a      	ldrb	r2, [r3, #1]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	3302      	adds	r3, #2
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	3303      	adds	r3, #3
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	b29b      	uxth	r3, r3
 8009200:	4313      	orrs	r3, r2
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	791a      	ldrb	r2, [r3, #4]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	795a      	ldrb	r2, [r3, #5]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	799a      	ldrb	r2, [r3, #6]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	79da      	ldrb	r2, [r3, #7]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	2b08      	cmp	r3, #8
 800922c:	d939      	bls.n	80092a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	3308      	adds	r3, #8
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b29a      	uxth	r2, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3309      	adds	r3, #9
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	4313      	orrs	r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	330a      	adds	r3, #10
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	330b      	adds	r3, #11
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	021b      	lsls	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	4313      	orrs	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	330c      	adds	r3, #12
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29a      	uxth	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	330d      	adds	r3, #13
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	b29b      	uxth	r3, r3
 800927a:	4313      	orrs	r3, r2
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	7b9a      	ldrb	r2, [r3, #14]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	7bda      	ldrb	r2, [r3, #15]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7c1a      	ldrb	r2, [r3, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	7c5a      	ldrb	r2, [r3, #17]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	745a      	strb	r2, [r3, #17]
  }
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	781a      	ldrb	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785a      	ldrb	r2, [r3, #1]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	3302      	adds	r3, #2
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	3303      	adds	r3, #3
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	021b      	lsls	r3, r3, #8
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	4313      	orrs	r3, r2
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	791a      	ldrb	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	795a      	ldrb	r2, [r3, #5]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	799a      	ldrb	r2, [r3, #6]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	79da      	ldrb	r2, [r3, #7]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	7a1a      	ldrb	r2, [r3, #8]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	2b09      	cmp	r3, #9
 8009326:	d95f      	bls.n	80093e8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009328:	2309      	movs	r3, #9
 800932a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800932c:	2300      	movs	r3, #0
 800932e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009330:	e051      	b.n	80093d6 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009332:	f107 0316 	add.w	r3, r7, #22
 8009336:	4619      	mov	r1, r3
 8009338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800933a:	f000 f8e5 	bl	8009508 <USBH_GetNextDesc>
 800933e:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	785b      	ldrb	r3, [r3, #1]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d146      	bne.n	80093d6 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800934c:	221a      	movs	r2, #26
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	3308      	adds	r3, #8
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	3302      	adds	r3, #2
 800935a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800935c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800935e:	69f8      	ldr	r0, [r7, #28]
 8009360:	f000 f846 	bl	80093f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800936a:	2300      	movs	r3, #0
 800936c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800936e:	e022      	b.n	80093b6 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009370:	f107 0316 	add.w	r3, r7, #22
 8009374:	4619      	mov	r1, r3
 8009376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009378:	f000 f8c6 	bl	8009508 <USBH_GetNextDesc>
 800937c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	2b05      	cmp	r3, #5
 8009384:	d117      	bne.n	80093b6 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800938a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800938e:	3201      	adds	r2, #1
 8009390:	00d2      	lsls	r2, r2, #3
 8009392:	211a      	movs	r1, #26
 8009394:	fb01 f303 	mul.w	r3, r1, r3
 8009398:	4413      	add	r3, r2
 800939a:	3308      	adds	r3, #8
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	3304      	adds	r3, #4
 80093a2:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80093a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093a6:	69b8      	ldr	r0, [r7, #24]
 80093a8:	f000 f850 	bl	800944c <USBH_ParseEPDesc>
            ep_ix++;
 80093ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80093b0:	3301      	adds	r3, #1
 80093b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	791b      	ldrb	r3, [r3, #4]
 80093ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80093be:	429a      	cmp	r2, r3
 80093c0:	d204      	bcs.n	80093cc <USBH_ParseCfgDesc+0x120>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	885a      	ldrh	r2, [r3, #2]
 80093c6:	8afb      	ldrh	r3, [r7, #22]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d8d1      	bhi.n	8009370 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80093cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093d0:	3301      	adds	r3, #1
 80093d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d804      	bhi.n	80093e8 <USBH_ParseCfgDesc+0x13c>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	885a      	ldrh	r2, [r3, #2]
 80093e2:	8afb      	ldrh	r3, [r7, #22]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d8a4      	bhi.n	8009332 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80093e8:	bf00      	nop
 80093ea:	3728      	adds	r7, #40	; 0x28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	785a      	ldrb	r2, [r3, #1]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	789a      	ldrb	r2, [r3, #2]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	78da      	ldrb	r2, [r3, #3]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	791a      	ldrb	r2, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	795a      	ldrb	r2, [r3, #5]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	799a      	ldrb	r2, [r3, #6]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	79da      	ldrb	r2, [r3, #7]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	7a1a      	ldrb	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	721a      	strb	r2, [r3, #8]
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	781a      	ldrb	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	785a      	ldrb	r2, [r3, #1]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	789a      	ldrb	r2, [r3, #2]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	78da      	ldrb	r2, [r3, #3]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	3304      	adds	r3, #4
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b29a      	uxth	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	3305      	adds	r3, #5
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	b29b      	uxth	r3, r3
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	b29b      	uxth	r3, r3
 800948a:	4313      	orrs	r3, r2
 800948c:	b29a      	uxth	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	799a      	ldrb	r2, [r3, #6]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	719a      	strb	r2, [r3, #6]
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr

080094a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	4613      	mov	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d120      	bne.n	80094fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	1e9a      	subs	r2, r3, #2
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bf28      	it	cs
 80094c8:	4613      	movcs	r3, r2
 80094ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3302      	adds	r3, #2
 80094d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80094d2:	2300      	movs	r3, #0
 80094d4:	82fb      	strh	r3, [r7, #22]
 80094d6:	e00b      	b.n	80094f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094d8:	8afb      	ldrh	r3, [r7, #22]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	781a      	ldrb	r2, [r3, #0]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	3301      	adds	r3, #1
 80094e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094ea:	8afb      	ldrh	r3, [r7, #22]
 80094ec:	3302      	adds	r3, #2
 80094ee:	82fb      	strh	r3, [r7, #22]
 80094f0:	8afa      	ldrh	r2, [r7, #22]
 80094f2:	8abb      	ldrh	r3, [r7, #20]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d3ef      	bcc.n	80094d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2200      	movs	r2, #0
 80094fc:	701a      	strb	r2, [r3, #0]
  }
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	881a      	ldrh	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	b29b      	uxth	r3, r3
 800951c:	4413      	add	r3, r2
 800951e:	b29a      	uxth	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009530:	68fb      	ldr	r3, [r7, #12]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr

0800953c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	789b      	ldrb	r3, [r3, #2]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d002      	beq.n	800955c <USBH_CtlReq+0x20>
 8009556:	2b02      	cmp	r3, #2
 8009558:	d00f      	beq.n	800957a <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 800955a:	e034      	b.n	80095c6 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2202      	movs	r2, #2
 8009572:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009574:	2301      	movs	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
      break;
 8009578:	e025      	b.n	80095c6 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f828 	bl	80095d0 <USBH_HandleControl>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d108      	bne.n	800959c <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
      break;
 800959a:	e013      	b.n	80095c4 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d108      	bne.n	80095b4 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80095ae:	2303      	movs	r3, #3
 80095b0:	75fb      	strb	r3, [r7, #23]
      break;
 80095b2:	e007      	b.n	80095c4 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d104      	bne.n	80095c4 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2201      	movs	r2, #1
 80095be:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80095c0:	2302      	movs	r3, #2
 80095c2:	75fb      	strb	r3, [r7, #23]
      break;
 80095c4:	bf00      	nop
  }
  return status;
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80095d8:	2301      	movs	r3, #1
 80095da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095dc:	2300      	movs	r3, #0
 80095de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	7e1b      	ldrb	r3, [r3, #24]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	2b0a      	cmp	r3, #10
 80095e8:	f200 814c 	bhi.w	8009884 <USBH_HandleControl+0x2b4>
 80095ec:	a201      	add	r2, pc, #4	; (adr r2, 80095f4 <USBH_HandleControl+0x24>)
 80095ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	08009621 	.word	0x08009621
 80095f8:	0800963b 	.word	0x0800963b
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096cb 	.word	0x080096cb
 8009604:	08009703 	.word	0x08009703
 8009608:	0800972f 	.word	0x0800972f
 800960c:	08009781 	.word	0x08009781
 8009610:	080097a3 	.word	0x080097a3
 8009614:	080097df 	.word	0x080097df
 8009618:	08009807 	.word	0x08009807
 800961c:	08009845 	.word	0x08009845
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f103 0110 	add.w	r1, r3, #16
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	795b      	ldrb	r3, [r3, #5]
 800962a:	461a      	mov	r2, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f939 	bl	80098a4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	761a      	strb	r2, [r3, #24]
      break;
 8009638:	e12f      	b.n	800989a <USBH_HandleControl+0x2ca>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	795b      	ldrb	r3, [r3, #5]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f00e f86d 	bl	8017720 <USBH_LL_GetURBState>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d11e      	bne.n	800968e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009658:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8adb      	ldrh	r3, [r3, #22]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009662:	7b7b      	ldrb	r3, [r7, #13]
 8009664:	2b80      	cmp	r3, #128	; 0x80
 8009666:	d103      	bne.n	8009670 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2203      	movs	r2, #3
 800966c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800966e:	e10b      	b.n	8009888 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_DATA_OUT;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2205      	movs	r2, #5
 8009674:	761a      	strb	r2, [r3, #24]
      break;
 8009676:	e107      	b.n	8009888 <USBH_HandleControl+0x2b8>
          if (direction == USB_D2H)
 8009678:	7b7b      	ldrb	r3, [r7, #13]
 800967a:	2b80      	cmp	r3, #128	; 0x80
 800967c:	d103      	bne.n	8009686 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2209      	movs	r2, #9
 8009682:	761a      	strb	r2, [r3, #24]
      break;
 8009684:	e100      	b.n	8009888 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_STATUS_IN;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2207      	movs	r2, #7
 800968a:	761a      	strb	r2, [r3, #24]
      break;
 800968c:	e0fc      	b.n	8009888 <USBH_HandleControl+0x2b8>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b04      	cmp	r3, #4
 8009692:	d003      	beq.n	800969c <USBH_HandleControl+0xcc>
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b02      	cmp	r3, #2
 8009698:	f040 80f6 	bne.w	8009888 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	220b      	movs	r2, #11
 80096a0:	761a      	strb	r2, [r3, #24]
      break;
 80096a2:	e0f1      	b.n	8009888 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6899      	ldr	r1, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	899a      	ldrh	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	791b      	ldrb	r3, [r3, #4]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f930 	bl	8009922 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2204      	movs	r2, #4
 80096c6:	761a      	strb	r2, [r3, #24]
      break;
 80096c8:	e0e7      	b.n	800989a <USBH_HandleControl+0x2ca>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	791b      	ldrb	r3, [r3, #4]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f00e f825 	bl	8017720 <USBH_LL_GetURBState>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d102      	bne.n	80096e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2209      	movs	r2, #9
 80096e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	d102      	bne.n	80096f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096ec:	2303      	movs	r3, #3
 80096ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096f0:	e0cc      	b.n	800988c <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	f040 80c9 	bne.w	800988c <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	220b      	movs	r2, #11
 80096fe:	761a      	strb	r2, [r3, #24]
      break;
 8009700:	e0c4      	b.n	800988c <USBH_HandleControl+0x2bc>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6899      	ldr	r1, [r3, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	899a      	ldrh	r2, [r3, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7958      	ldrb	r0, [r3, #5]
 800970e:	2301      	movs	r3, #1
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	4603      	mov	r3, r0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f8df 	bl	80098d8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2206      	movs	r2, #6
 800972a:	761a      	strb	r2, [r3, #24]
      break;
 800972c:	e0b5      	b.n	800989a <USBH_HandleControl+0x2ca>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	795b      	ldrb	r3, [r3, #5]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f00d fff3 	bl	8017720 <USBH_LL_GetURBState>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d103      	bne.n	800974c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2207      	movs	r2, #7
 8009748:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800974a:	e0a1      	b.n	8009890 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_STALL)
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	2b05      	cmp	r3, #5
 8009750:	d105      	bne.n	800975e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	220c      	movs	r2, #12
 8009756:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009758:	2303      	movs	r3, #3
 800975a:	73fb      	strb	r3, [r7, #15]
      break;
 800975c:	e098      	b.n	8009890 <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d103      	bne.n	800976c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2205      	movs	r2, #5
 8009768:	761a      	strb	r2, [r3, #24]
      break;
 800976a:	e091      	b.n	8009890 <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_ERROR)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	2b04      	cmp	r3, #4
 8009770:	f040 808e 	bne.w	8009890 <USBH_HandleControl+0x2c0>
          phost->Control.state = CTRL_ERROR;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	220b      	movs	r2, #11
 8009778:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800977a:	2302      	movs	r3, #2
 800977c:	73fb      	strb	r3, [r7, #15]
      break;
 800977e:	e087      	b.n	8009890 <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	791b      	ldrb	r3, [r3, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8ca 	bl	8009922 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 8009794:	b29a      	uxth	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2208      	movs	r2, #8
 800979e:	761a      	strb	r2, [r3, #24]

      break;
 80097a0:	e07b      	b.n	800989a <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	791b      	ldrb	r3, [r3, #4]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f00d ffb9 	bl	8017720 <USBH_LL_GetURBState>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097b2:	7bbb      	ldrb	r3, [r7, #14]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d105      	bne.n	80097c4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	220d      	movs	r2, #13
 80097bc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80097c2:	e067      	b.n	8009894 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_ERROR)
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	d103      	bne.n	80097d2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	220b      	movs	r2, #11
 80097ce:	761a      	strb	r2, [r3, #24]
      break;
 80097d0:	e060      	b.n	8009894 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_STALL)
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	2b05      	cmp	r3, #5
 80097d6:	d15d      	bne.n	8009894 <USBH_HandleControl+0x2c4>
          status = USBH_NOT_SUPPORTED;
 80097d8:	2303      	movs	r3, #3
 80097da:	73fb      	strb	r3, [r7, #15]
      break;
 80097dc:	e05a      	b.n	8009894 <USBH_HandleControl+0x2c4>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	795a      	ldrb	r2, [r3, #5]
 80097e2:	2301      	movs	r3, #1
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	4613      	mov	r3, r2
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f873 	bl	80098d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	220a      	movs	r2, #10
 8009802:	761a      	strb	r2, [r3, #24]
      break;
 8009804:	e049      	b.n	800989a <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	795b      	ldrb	r3, [r3, #5]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f00d ff87 	bl	8017720 <USBH_LL_GetURBState>
 8009812:	4603      	mov	r3, r0
 8009814:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d105      	bne.n	8009828 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	220d      	movs	r2, #13
 8009824:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009826:	e037      	b.n	8009898 <USBH_HandleControl+0x2c8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2209      	movs	r2, #9
 8009832:	761a      	strb	r2, [r3, #24]
      break;
 8009834:	e030      	b.n	8009898 <USBH_HandleControl+0x2c8>
        if (URB_Status == USBH_URB_ERROR)
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	2b04      	cmp	r3, #4
 800983a:	d12d      	bne.n	8009898 <USBH_HandleControl+0x2c8>
          phost->Control.state = CTRL_ERROR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	220b      	movs	r2, #11
 8009840:	761a      	strb	r2, [r3, #24]
      break;
 8009842:	e029      	b.n	8009898 <USBH_HandleControl+0x2c8>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7e5b      	ldrb	r3, [r3, #25]
 8009848:	3301      	adds	r3, #1
 800984a:	b2da      	uxtb	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	765a      	strb	r2, [r3, #25]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	7e5b      	ldrb	r3, [r3, #25]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d806      	bhi.n	8009866 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009864:	e019      	b.n	800989a <USBH_HandleControl+0x2ca>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800986c:	2106      	movs	r1, #6
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800987e:	2302      	movs	r3, #2
 8009880:	73fb      	strb	r3, [r7, #15]
      break;
 8009882:	e00a      	b.n	800989a <USBH_HandleControl+0x2ca>

    default:
      break;
 8009884:	bf00      	nop
 8009886:	e008      	b.n	800989a <USBH_HandleControl+0x2ca>
      break;
 8009888:	bf00      	nop
 800988a:	e006      	b.n	800989a <USBH_HandleControl+0x2ca>
      break;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <USBH_HandleControl+0x2ca>
      break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <USBH_HandleControl+0x2ca>
      break;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <USBH_HandleControl+0x2ca>
      break;
 8009898:	bf00      	nop
  }

  return status;
 800989a:	7bfb      	ldrb	r3, [r7, #15]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098b2:	79f9      	ldrb	r1, [r7, #7]
 80098b4:	2300      	movs	r3, #0
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	2308      	movs	r3, #8
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	2300      	movs	r3, #0
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2300      	movs	r3, #0
 80098c6:	2200      	movs	r2, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f00d fef8 	bl	80176be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af04      	add	r7, sp, #16
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4611      	mov	r1, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	460b      	mov	r3, r1
 80098e8:	80fb      	strh	r3, [r7, #6]
 80098ea:	4613      	mov	r3, r2
 80098ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098fc:	7979      	ldrb	r1, [r7, #5]
 80098fe:	7e3b      	ldrb	r3, [r7, #24]
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	9302      	str	r3, [sp, #8]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	2301      	movs	r3, #1
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	2300      	movs	r3, #0
 8009910:	2200      	movs	r2, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f00d fed3 	bl	80176be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b088      	sub	sp, #32
 8009926:	af04      	add	r7, sp, #16
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	4611      	mov	r1, r2
 800992e:	461a      	mov	r2, r3
 8009930:	460b      	mov	r3, r1
 8009932:	80fb      	strh	r3, [r7, #6]
 8009934:	4613      	mov	r3, r2
 8009936:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009938:	7979      	ldrb	r1, [r7, #5]
 800993a:	2300      	movs	r3, #0
 800993c:	9303      	str	r3, [sp, #12]
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	9302      	str	r3, [sp, #8]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	2301      	movs	r3, #1
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	2201      	movs	r2, #1
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f00d feb5 	bl	80176be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009954:	2300      	movs	r3, #0

}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b088      	sub	sp, #32
 8009962:	af04      	add	r7, sp, #16
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	4611      	mov	r1, r2
 800996a:	461a      	mov	r2, r3
 800996c:	460b      	mov	r3, r1
 800996e:	80fb      	strh	r3, [r7, #6]
 8009970:	4613      	mov	r3, r2
 8009972:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009982:	7979      	ldrb	r1, [r7, #5]
 8009984:	7e3b      	ldrb	r3, [r7, #24]
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	9302      	str	r3, [sp, #8]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	2301      	movs	r3, #1
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2302      	movs	r3, #2
 8009996:	2200      	movs	r2, #0
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f00d fe90 	bl	80176be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af04      	add	r7, sp, #16
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	4611      	mov	r1, r2
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	80fb      	strh	r3, [r7, #6]
 80099ba:	4613      	mov	r3, r2
 80099bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80099be:	7979      	ldrb	r1, [r7, #5]
 80099c0:	2300      	movs	r3, #0
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	88fb      	ldrh	r3, [r7, #6]
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	2301      	movs	r3, #1
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	2302      	movs	r3, #2
 80099d2:	2201      	movs	r2, #1
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f00d fe72 	bl	80176be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af04      	add	r7, sp, #16
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	70fb      	strb	r3, [r7, #3]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70bb      	strb	r3, [r7, #2]
 80099fa:	4613      	mov	r3, r2
 80099fc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099fe:	7878      	ldrb	r0, [r7, #1]
 8009a00:	78ba      	ldrb	r2, [r7, #2]
 8009a02:	78f9      	ldrb	r1, [r7, #3]
 8009a04:	8b3b      	ldrh	r3, [r7, #24]
 8009a06:	9302      	str	r3, [sp, #8]
 8009a08:	7d3b      	ldrb	r3, [r7, #20]
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	7c3b      	ldrb	r3, [r7, #16]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	4603      	mov	r3, r0
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f00d fe05 	bl	8017622 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f00d fe24 	bl	8017680 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f832 	bl	8009ab8 <USBH_GetFreePipe>
 8009a54:	4603      	mov	r3, r0
 8009a56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a58:	89fb      	ldrh	r3, [r7, #14]
 8009a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d009      	beq.n	8009a76 <USBH_AllocPipe+0x34>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009a62:	78fb      	ldrb	r3, [r7, #3]
 8009a64:	89fa      	ldrh	r2, [r7, #14]
 8009a66:	f002 020f 	and.w	r2, r2, #15
 8009a6a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	32e0      	adds	r2, #224	; 0xe0
 8009a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)pipe;
 8009a76:	89fb      	ldrh	r3, [r7, #14]
 8009a78:	b2db      	uxtb	r3, r3
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	2b0a      	cmp	r3, #10
 8009a92:	d80b      	bhi.n	8009aac <USBH_FreePipe+0x2a>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	32e0      	adds	r2, #224	; 0xe0
 8009a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	32e0      	adds	r2, #224	; 0xe0
 8009aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return USBH_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
 8009ac8:	e00e      	b.n	8009ae8 <USBH_GetFreePipe+0x30>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009aca:	7bfa      	ldrb	r2, [r7, #15]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	32e0      	adds	r2, #224	; 0xe0
 8009ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d102      	bne.n	8009ae2 <USBH_GetFreePipe+0x2a>
    {
      return (uint16_t)idx;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	e007      	b.n	8009af2 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	2b0a      	cmp	r3, #10
 8009aec:	d9ed      	bls.n	8009aca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr

08009afc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b06:	79fb      	ldrb	r3, [r7, #7]
 8009b08:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <disk_status+0x30>)
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	79fa      	ldrb	r2, [r7, #7]
 8009b14:	4905      	ldr	r1, [pc, #20]	; (8009b2c <disk_status+0x30>)
 8009b16:	440a      	add	r2, r1
 8009b18:	7b12      	ldrb	r2, [r2, #12]
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	200000f8 	.word	0x200000f8

08009b30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	4a0d      	ldr	r2, [pc, #52]	; (8009b78 <disk_initialize+0x48>)
 8009b42:	5cd3      	ldrb	r3, [r2, r3]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d111      	bne.n	8009b6c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	4a0b      	ldr	r2, [pc, #44]	; (8009b78 <disk_initialize+0x48>)
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <disk_initialize+0x48>)
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	79fa      	ldrb	r2, [r7, #7]
 8009b5e:	4906      	ldr	r1, [pc, #24]	; (8009b78 <disk_initialize+0x48>)
 8009b60:	440a      	add	r2, r1
 8009b62:	7b12      	ldrb	r2, [r2, #12]
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200000f8 	.word	0x200000f8

08009b7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <disk_read+0x3c>)
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	689c      	ldr	r4, [r3, #8]
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <disk_read+0x3c>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	7b18      	ldrb	r0, [r3, #12]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	47a0      	blx	r4
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd90      	pop	{r4, r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200000f8 	.word	0x200000f8

08009bbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	4a0a      	ldr	r2, [pc, #40]	; (8009bf8 <disk_write+0x3c>)
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	68dc      	ldr	r4, [r3, #12]
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <disk_write+0x3c>)
 8009bdc:	4413      	add	r3, r2
 8009bde:	7b18      	ldrb	r0, [r3, #12]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	47a0      	blx	r4
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd90      	pop	{r4, r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	200000f8 	.word	0x200000f8

08009bfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	4603      	mov	r3, r0
 8009c04:	603a      	str	r2, [r7, #0]
 8009c06:	71fb      	strb	r3, [r7, #7]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <disk_ioctl+0x38>)
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	79fa      	ldrb	r2, [r7, #7]
 8009c1a:	4906      	ldr	r1, [pc, #24]	; (8009c34 <disk_ioctl+0x38>)
 8009c1c:	440a      	add	r2, r1
 8009c1e:	7b10      	ldrb	r0, [r2, #12]
 8009c20:	79b9      	ldrb	r1, [r7, #6]
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4798      	blx	r3
 8009c26:	4603      	mov	r3, r0
 8009c28:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	200000f8 	.word	0x200000f8

08009c38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009c4c:	e007      	b.n	8009c5e <mem_cpy+0x26>
		*d++ = *s++;
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	1c53      	adds	r3, r2, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	6179      	str	r1, [r7, #20]
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	1e5a      	subs	r2, r3, #1
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1f2      	bne.n	8009c4e <mem_cpy+0x16>
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bc80      	pop	{r7}
 8009c70:	4770      	bx	lr

08009c72 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c72:	b480      	push	{r7}
 8009c74:	b087      	sub	sp, #28
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8009c82:	e005      	b.n	8009c90 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	617a      	str	r2, [r7, #20]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	1e5a      	subs	r2, r3, #1
 8009c94:	607a      	str	r2, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f4      	bne.n	8009c84 <mem_set+0x12>
}
 8009c9a:	bf00      	nop
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr

08009ca4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8009ca4:	b480      	push	{r7}
 8009ca6:	b089      	sub	sp, #36	; 0x24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009cbc:	bf00      	nop
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	1e5a      	subs	r2, r3, #1
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00d      	beq.n	8009ce4 <mem_cmp+0x40>
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	61fa      	str	r2, [r7, #28]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	61ba      	str	r2, [r7, #24]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	1acb      	subs	r3, r1, r3
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0ec      	beq.n	8009cbe <mem_cmp+0x1a>
	return r;
 8009ce4:	697b      	ldr	r3, [r7, #20]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3724      	adds	r7, #36	; 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr

08009cf0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009cfa:	e002      	b.n	8009d02 <chk_chr+0x12>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	607b      	str	r3, [r7, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d005      	beq.n	8009d16 <chk_chr+0x26>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d1f2      	bne.n	8009cfc <chk_chr+0xc>
	return *str;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	781b      	ldrb	r3, [r3, #0]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bc80      	pop	{r7}
 8009d22:	4770      	bx	lr

08009d24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60bb      	str	r3, [r7, #8]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	60fb      	str	r3, [r7, #12]
 8009d36:	e038      	b.n	8009daa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009d38:	492f      	ldr	r1, [pc, #188]	; (8009df8 <chk_lock+0xd4>)
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d029      	beq.n	8009da0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009d4c:	492a      	ldr	r1, [pc, #168]	; (8009df8 <chk_lock+0xd4>)
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4613      	mov	r3, r2
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d11e      	bne.n	8009da4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8009d66:	4924      	ldr	r1, [pc, #144]	; (8009df8 <chk_lock+0xd4>)
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	3304      	adds	r3, #4
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d110      	bne.n	8009da4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009d82:	491d      	ldr	r1, [pc, #116]	; (8009df8 <chk_lock+0xd4>)
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4613      	mov	r3, r2
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3308      	adds	r3, #8
 8009d92:	881a      	ldrh	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d102      	bne.n	8009da4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009d9e:	e007      	b.n	8009db0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009da0:	2301      	movs	r3, #1
 8009da2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d9c3      	bls.n	8009d38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d109      	bne.n	8009dca <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <chk_lock+0x9e>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d101      	bne.n	8009dc6 <chk_lock+0xa2>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e013      	b.n	8009dee <chk_lock+0xca>
 8009dc6:	2312      	movs	r3, #18
 8009dc8:	e011      	b.n	8009dee <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10b      	bne.n	8009de8 <chk_lock+0xc4>
 8009dd0:	4909      	ldr	r1, [pc, #36]	; (8009df8 <chk_lock+0xd4>)
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	330a      	adds	r3, #10
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de6:	d101      	bne.n	8009dec <chk_lock+0xc8>
 8009de8:	2310      	movs	r3, #16
 8009dea:	e000      	b.n	8009dee <chk_lock+0xca>
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr
 8009df8:	200000e0 	.word	0x200000e0

08009dfc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e02:	2300      	movs	r3, #0
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	e002      	b.n	8009e0e <enq_lock+0x12>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	607b      	str	r3, [r7, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d809      	bhi.n	8009e28 <enq_lock+0x2c>
 8009e14:	490a      	ldr	r1, [pc, #40]	; (8009e40 <enq_lock+0x44>)
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	440b      	add	r3, r1
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1ef      	bne.n	8009e08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	bf14      	ite	ne
 8009e2e:	2301      	movne	r3, #1
 8009e30:	2300      	moveq	r3, #0
 8009e32:	b2db      	uxtb	r3, r3
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	200000e0 	.word	0x200000e0

08009e44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e02b      	b.n	8009eac <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009e54:	4955      	ldr	r1, [pc, #340]	; (8009fac <inc_lock+0x168>)
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d11b      	bne.n	8009ea6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009e6e:	494f      	ldr	r1, [pc, #316]	; (8009fac <inc_lock+0x168>)
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4613      	mov	r3, r2
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d10d      	bne.n	8009ea6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009e8a:	4948      	ldr	r1, [pc, #288]	; (8009fac <inc_lock+0x168>)
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	440b      	add	r3, r1
 8009e98:	3308      	adds	r3, #8
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d006      	beq.n	8009eb4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d9d0      	bls.n	8009e54 <inc_lock+0x10>
 8009eb2:	e000      	b.n	8009eb6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009eb4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d145      	bne.n	8009f48 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e002      	b.n	8009ec8 <inc_lock+0x84>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d809      	bhi.n	8009ee2 <inc_lock+0x9e>
 8009ece:	4937      	ldr	r1, [pc, #220]	; (8009fac <inc_lock+0x168>)
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1ef      	bne.n	8009ec2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d101      	bne.n	8009eec <inc_lock+0xa8>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e05a      	b.n	8009fa2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009ef2:	482e      	ldr	r0, [pc, #184]	; (8009fac <inc_lock+0x168>)
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4403      	add	r3, r0
 8009f00:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009f08:	4828      	ldr	r0, [pc, #160]	; (8009fac <inc_lock+0x168>)
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	4413      	add	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4403      	add	r3, r0
 8009f16:	3304      	adds	r3, #4
 8009f18:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009f20:	4922      	ldr	r1, [pc, #136]	; (8009fac <inc_lock+0x168>)
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	3308      	adds	r3, #8
 8009f30:	4602      	mov	r2, r0
 8009f32:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f34:	491d      	ldr	r1, [pc, #116]	; (8009fac <inc_lock+0x168>)
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	330a      	adds	r3, #10
 8009f44:	2200      	movs	r2, #0
 8009f46:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00c      	beq.n	8009f68 <inc_lock+0x124>
 8009f4e:	4917      	ldr	r1, [pc, #92]	; (8009fac <inc_lock+0x168>)
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	4613      	mov	r3, r2
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	330a      	adds	r3, #10
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <inc_lock+0x124>
 8009f64:	2300      	movs	r3, #0
 8009f66:	e01c      	b.n	8009fa2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10b      	bne.n	8009f86 <inc_lock+0x142>
 8009f6e:	490f      	ldr	r1, [pc, #60]	; (8009fac <inc_lock+0x168>)
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4613      	mov	r3, r2
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	330a      	adds	r3, #10
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	b299      	uxth	r1, r3
 8009f84:	e001      	b.n	8009f8a <inc_lock+0x146>
 8009f86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f8a:	4808      	ldr	r0, [pc, #32]	; (8009fac <inc_lock+0x168>)
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4403      	add	r3, r0
 8009f98:	330a      	adds	r3, #10
 8009f9a:	460a      	mov	r2, r1
 8009f9c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr
 8009fac:	200000e0 	.word	0x200000e0

08009fb0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	607b      	str	r3, [r7, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d82e      	bhi.n	800a022 <dec_lock+0x72>
		n = Files[i].ctr;
 8009fc4:	491b      	ldr	r1, [pc, #108]	; (800a034 <dec_lock+0x84>)
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	4413      	add	r3, r2
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	330a      	adds	r3, #10
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009fd8:	89fb      	ldrh	r3, [r7, #14]
 8009fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fde:	d101      	bne.n	8009fe4 <dec_lock+0x34>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <dec_lock+0x40>
 8009fea:	89fb      	ldrh	r3, [r7, #14]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ff0:	4910      	ldr	r1, [pc, #64]	; (800a034 <dec_lock+0x84>)
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	440b      	add	r3, r1
 8009ffe:	330a      	adds	r3, #10
 800a000:	89fa      	ldrh	r2, [r7, #14]
 800a002:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a004:	89fb      	ldrh	r3, [r7, #14]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d108      	bne.n	800a01c <dec_lock+0x6c>
 800a00a:	490a      	ldr	r1, [pc, #40]	; (800a034 <dec_lock+0x84>)
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	440b      	add	r3, r1
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	737b      	strb	r3, [r7, #13]
 800a020:	e001      	b.n	800a026 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a022:	2302      	movs	r3, #2
 800a024:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a026:	7b7b      	ldrb	r3, [r7, #13]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	200000e0 	.word	0x200000e0

0800a038 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a040:	2300      	movs	r3, #0
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e016      	b.n	800a074 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a046:	490f      	ldr	r1, [pc, #60]	; (800a084 <clear_lock+0x4c>)
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4613      	mov	r3, r2
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	440b      	add	r3, r1
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d108      	bne.n	800a06e <clear_lock+0x36>
 800a05c:	4909      	ldr	r1, [pc, #36]	; (800a084 <clear_lock+0x4c>)
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4613      	mov	r3, r2
 800a062:	005b      	lsls	r3, r3, #1
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3301      	adds	r3, #1
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d9e5      	bls.n	800a046 <clear_lock+0xe>
	}
}
 800a07a:	bf00      	nop
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr
 800a084:	200000e0 	.word	0x200000e0

0800a088 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d038      	beq.n	800a110 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a0a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	f7ff fd83 	bl	8009bbc <disk_write>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
 800a0c0:	e026      	b.n	800a110 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	1ad2      	subs	r2, r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d218      	bcs.n	800a110 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	e010      	b.n	800a10a <sync_window+0x82>
					wsect += fs->fsize;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	f7ff fd5c 	bl	8009bbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3b01      	subs	r3, #1
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d8eb      	bhi.n	800a0e8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800a110:	7bfb      	ldrb	r3, [r7, #15]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d01b      	beq.n	800a16c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff ffa7 	bl	800a088 <sync_window>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d113      	bne.n	800a16c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	2301      	movs	r3, #1
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	f7ff fd14 	bl	8009b7c <disk_read>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a15e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a160:	2301      	movs	r3, #1
 800a162:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ff82 	bl	800a088 <sync_window>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f040 809b 	bne.w	800a2c6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a196:	2b03      	cmp	r3, #3
 800a198:	f040 8088 	bne.w	800a2ac <sync_fs+0x136>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	f040 8082 	bne.w	800a2ac <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff fd5e 	bl	8009c72 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2255      	movs	r2, #85	; 0x55
 800a1ba:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	22aa      	movs	r2, #170	; 0xaa
 800a1c2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2252      	movs	r2, #82	; 0x52
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2252      	movs	r2, #82	; 0x52
 800a1d0:	705a      	strb	r2, [r3, #1]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2261      	movs	r2, #97	; 0x61
 800a1d6:	709a      	strb	r2, [r3, #2]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2241      	movs	r2, #65	; 0x41
 800a1dc:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2272      	movs	r2, #114	; 0x72
 800a1e2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2272      	movs	r2, #114	; 0x72
 800a1ea:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2241      	movs	r2, #65	; 0x41
 800a1f2:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2261      	movs	r2, #97	; 0x61
 800a1fa:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a204:	b2da      	uxtb	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a212:	b29b      	uxth	r3, r3
 800a214:	0a1b      	lsrs	r3, r3, #8
 800a216:	b29b      	uxth	r3, r3
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a226:	0c1b      	lsrs	r3, r3, #16
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a236:	0e1b      	lsrs	r3, r3, #24
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a246:	b2da      	uxtb	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a254:	b29b      	uxth	r3, r3
 800a256:	0a1b      	lsrs	r3, r3, #8
 800a258:	b29b      	uxth	r3, r3
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a278:	0e1b      	lsrs	r3, r3, #24
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a288:	1c5a      	adds	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a296:	6879      	ldr	r1, [r7, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f7ff fc8c 	bl	8009bbc <disk_write>
			fs->fsi_flag = 0;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff fca0 	bl	8009bfc <disk_ioctl>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	3b02      	subs	r3, #2
 800a2de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2e6:	3b02      	subs	r3, #2
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d301      	bcc.n	800a2f2 <clust2sect+0x22>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e00a      	b.n	800a308 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	fb03 f202 	mul.w	r2, r3, r2
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a306:	4413      	add	r3, r2
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr

0800a312 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b086      	sub	sp, #24
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d905      	bls.n	800a32e <get_fat+0x1c>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d302      	bcc.n	800a334 <get_fat+0x22>
		val = 1;	/* Internal error */
 800a32e:	2301      	movs	r3, #1
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e0a0      	b.n	800a476 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a338:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a340:	2b02      	cmp	r3, #2
 800a342:	d044      	beq.n	800a3ce <get_fat+0xbc>
 800a344:	2b03      	cmp	r3, #3
 800a346:	d063      	beq.n	800a410 <get_fat+0xfe>
 800a348:	2b01      	cmp	r3, #1
 800a34a:	f040 808a 	bne.w	800a462 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4413      	add	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	0a5b      	lsrs	r3, r3, #9
 800a366:	4413      	add	r3, r2
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fed5 	bl	800a11a <move_window>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d178      	bne.n	800a468 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	60fa      	str	r2, [r7, #12]
 800a37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	5cd3      	ldrb	r3, [r2, r3]
 800a384:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	0a5b      	lsrs	r3, r3, #9
 800a390:	4413      	add	r3, r2
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff fec0 	bl	800a11a <move_window>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d165      	bne.n	800a46c <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	5cd3      	ldrb	r3, [r2, r3]
 800a3aa:	021b      	lsls	r3, r3, #8
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <get_fat+0xb2>
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	091b      	lsrs	r3, r3, #4
 800a3c2:	e002      	b.n	800a3ca <get_fat+0xb8>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3ca:	617b      	str	r3, [r7, #20]
			break;
 800a3cc:	e053      	b.n	800a476 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	4413      	add	r3, r2
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fe9c 	bl	800a11a <move_window>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d143      	bne.n	800a470 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	b21a      	sxth	r2, r3
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	b21b      	sxth	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b21b      	sxth	r3, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	617b      	str	r3, [r7, #20]
			break;
 800a40e:	e032      	b.n	800a476 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	09db      	lsrs	r3, r3, #7
 800a41a:	4413      	add	r3, r2
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f7ff fe7b 	bl	800a11a <move_window>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d124      	bne.n	800a474 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	4413      	add	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	3303      	adds	r3, #3
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	061a      	lsls	r2, r3, #24
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	3302      	adds	r3, #2
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	041b      	lsls	r3, r3, #16
 800a448:	4313      	orrs	r3, r2
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	3201      	adds	r2, #1
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	0212      	lsls	r2, r2, #8
 800a452:	4313      	orrs	r3, r2
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	4313      	orrs	r3, r2
 800a45a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a45e:	617b      	str	r3, [r7, #20]
			break;
 800a460:	e009      	b.n	800a476 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800a462:	2301      	movs	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	e006      	b.n	800a476 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a468:	bf00      	nop
 800a46a:	e004      	b.n	800a476 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a46c:	bf00      	nop
 800a46e:	e002      	b.n	800a476 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a470:	bf00      	nop
 800a472:	e000      	b.n	800a476 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a474:	bf00      	nop
		}
	}

	return val;
 800a476:	697b      	ldr	r3, [r7, #20]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d905      	bls.n	800a49e <put_fat+0x1e>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d302      	bcc.n	800a4a4 <put_fat+0x24>
		res = FR_INT_ERR;
 800a49e:	2302      	movs	r3, #2
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e0f3      	b.n	800a68c <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d074      	beq.n	800a598 <put_fat+0x118>
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	f000 8099 	beq.w	800a5e6 <put_fat+0x166>
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	f040 80df 	bne.w	800a678 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	085b      	lsrs	r3, r3, #1
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	0a5b      	lsrs	r3, r3, #9
 800a4d2:	4413      	add	r3, r2
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7ff fe1f 	bl	800a11a <move_window>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4e0:	7ffb      	ldrb	r3, [r7, #31]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f040 80cb 	bne.w	800a67e <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	617a      	str	r2, [r7, #20]
 800a4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00d      	beq.n	800a51e <put_fat+0x9e>
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b25b      	sxtb	r3, r3
 800a508:	f003 030f 	and.w	r3, r3, #15
 800a50c:	b25a      	sxtb	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	011b      	lsls	r3, r3, #4
 800a514:	b25b      	sxtb	r3, r3
 800a516:	4313      	orrs	r3, r2
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	e001      	b.n	800a522 <put_fat+0xa2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	0a5b      	lsrs	r3, r3, #9
 800a538:	4413      	add	r3, r2
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fdec 	bl	800a11a <move_window>
 800a542:	4603      	mov	r3, r0
 800a544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a546:	7ffb      	ldrb	r3, [r7, #31]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f040 809a 	bne.w	800a682 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <put_fat+0xec>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	091b      	lsrs	r3, r3, #4
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	e00e      	b.n	800a58a <put_fat+0x10a>
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b25b      	sxtb	r3, r3
 800a572:	f023 030f 	bic.w	r3, r3, #15
 800a576:	b25a      	sxtb	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	0a1b      	lsrs	r3, r3, #8
 800a57c:	b25b      	sxtb	r3, r3
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	b25b      	sxtb	r3, r3
 800a584:	4313      	orrs	r3, r2
 800a586:	b25b      	sxtb	r3, r3
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a596:	e079      	b.n	800a68c <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	0a1b      	lsrs	r3, r3, #8
 800a5a2:	4413      	add	r3, r2
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff fdb7 	bl	800a11a <move_window>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5b0:	7ffb      	ldrb	r3, [r7, #31]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d167      	bne.n	800a686 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5be:	68fa      	ldr	r2, [r7, #12]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	701a      	strb	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	0a1b      	lsrs	r3, r3, #8
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	b2d2      	uxtb	r2, r2
 800a5da:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a5e4:	e052      	b.n	800a68c <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	09db      	lsrs	r3, r3, #7
 800a5f0:	4413      	add	r3, r2
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7ff fd90 	bl	800a11a <move_window>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5fe:	7ffb      	ldrb	r3, [r7, #31]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d142      	bne.n	800a68a <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4413      	add	r3, r2
 800a610:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	3303      	adds	r3, #3
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	061a      	lsls	r2, r3, #24
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	3302      	adds	r3, #2
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	041b      	lsls	r3, r3, #16
 800a622:	4313      	orrs	r3, r2
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	3201      	adds	r2, #1
 800a628:	7812      	ldrb	r2, [r2, #0]
 800a62a:	0212      	lsls	r2, r2, #8
 800a62c:	4313      	orrs	r3, r2
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	7812      	ldrb	r2, [r2, #0]
 800a632:	4313      	orrs	r3, r2
 800a634:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	b2da      	uxtb	r2, r3
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	701a      	strb	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	b29b      	uxth	r3, r3
 800a64a:	0a1b      	lsrs	r3, r3, #8
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	3301      	adds	r3, #1
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	701a      	strb	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	0c1a      	lsrs	r2, r3, #16
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	3302      	adds	r3, #2
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	0e1a      	lsrs	r2, r3, #24
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	3303      	adds	r3, #3
 800a66a:	b2d2      	uxtb	r2, r2
 800a66c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a676:	e009      	b.n	800a68c <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 800a678:	2302      	movs	r3, #2
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e006      	b.n	800a68c <put_fat+0x20c>
			if (res != FR_OK) break;
 800a67e:	bf00      	nop
 800a680:	e004      	b.n	800a68c <put_fat+0x20c>
			if (res != FR_OK) break;
 800a682:	bf00      	nop
 800a684:	e002      	b.n	800a68c <put_fat+0x20c>
			if (res != FR_OK) break;
 800a686:	bf00      	nop
 800a688:	e000      	b.n	800a68c <put_fat+0x20c>
			if (res != FR_OK) break;
 800a68a:	bf00      	nop
		}
	}

	return res;
 800a68c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3720      	adds	r7, #32
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d905      	bls.n	800a6b2 <remove_chain+0x1c>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d302      	bcc.n	800a6b8 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	73fb      	strb	r3, [r7, #15]
 800a6b6:	e043      	b.n	800a740 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a6bc:	e036      	b.n	800a72c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a6be:	6839      	ldr	r1, [r7, #0]
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe26 	bl	800a312 <get_fat>
 800a6c6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d035      	beq.n	800a73a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d102      	bne.n	800a6da <remove_chain+0x44>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	73fb      	strb	r3, [r7, #15]
 800a6d8:	e032      	b.n	800a740 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e0:	d102      	bne.n	800a6e8 <remove_chain+0x52>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	e02b      	b.n	800a740 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fec7 	bl	800a480 <put_fat>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d120      	bne.n	800a73e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a706:	d00f      	beq.n	800a728 <remove_chain+0x92>
				fs->free_clust++;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	b2da      	uxtb	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d3c2      	bcc.n	800a6be <remove_chain+0x28>
 800a738:	e002      	b.n	800a740 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a73a:	bf00      	nop
 800a73c:	e000      	b.n	800a740 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a73e:	bf00      	nop
		}
	}

	return res;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b086      	sub	sp, #24
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10f      	bne.n	800a77a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a760:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <create_chain+0x2a>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	429a      	cmp	r2, r3
 800a772:	d31c      	bcc.n	800a7ae <create_chain+0x64>
 800a774:	2301      	movs	r3, #1
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	e019      	b.n	800a7ae <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a77a:	6839      	ldr	r1, [r7, #0]
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff fdc8 	bl	800a312 <get_fat>
 800a782:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d801      	bhi.n	800a78e <create_chain+0x44>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e076      	b.n	800a87c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a794:	d101      	bne.n	800a79a <create_chain+0x50>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	e070      	b.n	800a87c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d201      	bcs.n	800a7aa <create_chain+0x60>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	e068      	b.n	800a87c <create_chain+0x132>
		scl = clst;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d307      	bcc.n	800a7d4 <create_chain+0x8a>
			ncl = 2;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d901      	bls.n	800a7d4 <create_chain+0x8a>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e053      	b.n	800a87c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a7d4:	6979      	ldr	r1, [r7, #20]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff fd9b 	bl	800a312 <get_fat>
 800a7dc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00e      	beq.n	800a802 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ea:	d002      	beq.n	800a7f2 <create_chain+0xa8>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <create_chain+0xac>
			return cs;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	e042      	b.n	800a87c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d1d9      	bne.n	800a7b2 <create_chain+0x68>
 800a7fe:	2300      	movs	r3, #0
 800a800:	e03c      	b.n	800a87c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a802:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a804:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a808:	6979      	ldr	r1, [r7, #20]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f7ff fe38 	bl	800a480 <put_fat>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <create_chain+0xe4>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff fe2b 	bl	800a480 <put_fat>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11a      	bne.n	800a86a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a846:	d018      	beq.n	800a87a <create_chain+0x130>
			fs->free_clust--;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a84e:	1e5a      	subs	r2, r3, #1
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	b2da      	uxtb	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a868:	e007      	b.n	800a87a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d102      	bne.n	800a876 <create_chain+0x12c>
 800a870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a874:	e000      	b.n	800a878 <create_chain+0x12e>
 800a876:	2301      	movs	r3, #1
 800a878:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a87a:	697b      	ldr	r3, [r7, #20]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a894:	3304      	adds	r3, #4
 800a896:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	0a5b      	lsrs	r3, r3, #9
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a8a2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	613a      	str	r2, [r7, #16]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <clmt_clust+0x3c>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e010      	b.n	800a8e2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d307      	bcc.n	800a8d8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a8d6:	e7e9      	b.n	800a8ac <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a8d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	4413      	add	r3, r2
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr

0800a8ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a906:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d007      	beq.n	800a91e <dir_sdi+0x32>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a914:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d301      	bcc.n	800a922 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a91e:	2302      	movs	r3, #2
 800a920:	e074      	b.n	800aa0c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10c      	bne.n	800a942 <dir_sdi+0x56>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a92e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a932:	2b03      	cmp	r3, #3
 800a934:	d105      	bne.n	800a942 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a93c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a940:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d111      	bne.n	800a96c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a94e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a952:	461a      	mov	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	4293      	cmp	r3, r2
 800a958:	d301      	bcc.n	800a95e <dir_sdi+0x72>
			return FR_INT_ERR;
 800a95a:	2302      	movs	r3, #2
 800a95c:	e056      	b.n	800aa0c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a964:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a968:	613b      	str	r3, [r7, #16]
 800a96a:	e032      	b.n	800a9d2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a972:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a97a:	e01e      	b.n	800a9ba <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a982:	6979      	ldr	r1, [r7, #20]
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff fcc4 	bl	800a312 <get_fat>
 800a98a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a992:	d101      	bne.n	800a998 <dir_sdi+0xac>
 800a994:	2301      	movs	r3, #1
 800a996:	e039      	b.n	800aa0c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d907      	bls.n	800a9ae <dir_sdi+0xc2>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d301      	bcc.n	800a9b2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e02c      	b.n	800aa0c <dir_sdi+0x120>
			idx -= ic;
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d2dc      	bcs.n	800a97c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9c8:	6979      	ldr	r1, [r7, #20]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fc80 	bl	800a2d0 <clust2sect>
 800a9d0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <dir_sdi+0xf8>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e013      	b.n	800aa0c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	091a      	lsrs	r2, r3, #4
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	441a      	add	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	f003 030f 	and.w	r3, r3, #15
 800aa00:	015b      	lsls	r3, r3, #5
 800aa02:	441a      	add	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <dir_next+0x26>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <dir_next+0x2a>
		return FR_NO_FILE;
 800aa3a:	2304      	movs	r3, #4
 800aa3c:	e0dd      	b.n	800abfa <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 80c6 	bne.w	800abd6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10b      	bne.n	800aa7a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa68:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	f0c0 80b0 	bcc.w	800abd6 <dir_next+0x1c2>
				return FR_NO_FILE;
 800aa76:	2304      	movs	r3, #4
 800aa78:	e0bf      	b.n	800abfa <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	091b      	lsrs	r3, r3, #4
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800aa84:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800aa88:	3a01      	subs	r2, #1
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 80a2 	bne.w	800abd6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7ff fc36 	bl	800a312 <get_fat>
 800aaa6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d801      	bhi.n	800aab2 <dir_next+0x9e>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e0a3      	b.n	800abfa <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aab8:	d101      	bne.n	800aabe <dir_next+0xaa>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e09d      	b.n	800abfa <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aac4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d374      	bcc.n	800abb8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d101      	bne.n	800aad8 <dir_next+0xc4>
 800aad4:	2304      	movs	r3, #4
 800aad6:	e090      	b.n	800abfa <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7ff fe2f 	bl	800a74a <create_chain>
 800aaec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <dir_next+0xe4>
 800aaf4:	2307      	movs	r3, #7
 800aaf6:	e080      	b.n	800abfa <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <dir_next+0xee>
 800aafe:	2302      	movs	r3, #2
 800ab00:	e07b      	b.n	800abfa <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab08:	d101      	bne.n	800ab0e <dir_next+0xfa>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e075      	b.n	800abfa <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fab7 	bl	800a088 <sync_window>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <dir_next+0x110>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e06a      	b.n	800abfa <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff f89e 	bl	8009c72 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800ab42:	6979      	ldr	r1, [r7, #20]
 800ab44:	4610      	mov	r0, r2
 800ab46:	f7ff fbc3 	bl	800a2d0 <clust2sect>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	e01b      	b.n	800ab8e <dir_next+0x17a>
						dp->fs->wflag = 1;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff fa8d 	bl	800a088 <sync_window>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <dir_next+0x164>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e040      	b.n	800abfa <dir_next+0x1e6>
						dp->fs->winsect++;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab7e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800ab82:	3201      	adds	r2, #1
 800ab84:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	613b      	str	r3, [r7, #16]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab94:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ab98:	461a      	mov	r2, r3
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d3da      	bcc.n	800ab56 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aba6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	1a8a      	subs	r2, r1, r2
 800abb4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abc6:	6979      	ldr	r1, [r7, #20]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7ff fb81 	bl	800a2d0 <clust2sect>
 800abce:	4602      	mov	r2, r0
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800abe6:	461a      	mov	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	015b      	lsls	r3, r3, #5
 800abf0:	441a      	add	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}

0800ac02 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fe6c 	bl	800a8ec <dir_sdi>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d131      	bne.n	800ac82 <dir_alloc+0x80>
		n = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7ff fa72 	bl	800a11a <move_window>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11f      	bne.n	800ac80 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2be5      	cmp	r3, #229	; 0xe5
 800ac4a:	d005      	beq.n	800ac58 <dir_alloc+0x56>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d107      	bne.n	800ac68 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d102      	bne.n	800ac6c <dir_alloc+0x6a>
 800ac66:	e00c      	b.n	800ac82 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fed0 	bl	800aa14 <dir_next>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0d1      	beq.n	800ac22 <dir_alloc+0x20>
 800ac7e:	e000      	b.n	800ac82 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800ac80:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	d101      	bne.n	800ac8c <dir_alloc+0x8a>
 800ac88:	2307      	movs	r3, #7
 800ac8a:	73fb      	strb	r3, [r7, #15]
	return res;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	331b      	adds	r3, #27
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	b21a      	sxth	r2, r3
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	331a      	adds	r3, #26
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b21b      	sxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b21b      	sxth	r3, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d10f      	bne.n	800ace4 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	3315      	adds	r3, #21
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	b21a      	sxth	r2, r3
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	3314      	adds	r3, #20
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	b21b      	sxth	r3, r3
 800acd6:	4313      	orrs	r3, r2
 800acd8:	b21b      	sxth	r3, r3
 800acda:	b29b      	uxth	r3, r3
 800acdc:	041b      	lsls	r3, r3, #16
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

	return cl;
 800ace4:	68fb      	ldr	r3, [r7, #12]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	bc80      	pop	{r7}
 800acee:	4770      	bx	lr

0800acf0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	331a      	adds	r3, #26
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	0a1b      	lsrs	r3, r3, #8
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	331b      	adds	r3, #27
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	0c1a      	lsrs	r2, r3, #16
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3314      	adds	r3, #20
 800ad1c:	b2d2      	uxtb	r2, r2
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	3315      	adds	r3, #21
 800ad2e:	b2d2      	uxtb	r2, r2
 800ad30:	701a      	strb	r2, [r3, #0]
}
 800ad32:	bf00      	nop
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bc80      	pop	{r7}
 800ad3a:	4770      	bx	lr

0800ad3c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad44:	2100      	movs	r1, #0
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fdd0 	bl	800a8ec <dir_sdi>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <dir_find+0x1e>
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	e03b      	b.n	800add2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7ff f9d6 	bl	800a11a <move_window>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d128      	bne.n	800adca <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ad7e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <dir_find+0x56>
 800ad8c:	2304      	movs	r3, #4
 800ad8e:	75fb      	strb	r3, [r7, #23]
 800ad90:	e01e      	b.n	800add0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	330b      	adds	r3, #11
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <dir_find+0x7a>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ada6:	220b      	movs	r2, #11
 800ada8:	4619      	mov	r1, r3
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f7fe ff7a 	bl	8009ca4 <mem_cmp>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00b      	beq.n	800adce <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800adb6:	2100      	movs	r1, #0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff fe2b 	bl	800aa14 <dir_next>
 800adbe:	4603      	mov	r3, r0
 800adc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d0c8      	beq.n	800ad5a <dir_find+0x1e>
 800adc8:	e002      	b.n	800add0 <dir_find+0x94>
		if (res != FR_OK) break;
 800adca:	bf00      	nop
 800adcc:	e000      	b.n	800add0 <dir_find+0x94>
			break;
 800adce:	bf00      	nop

	return res;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ade2:	2101      	movs	r1, #1
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ff0c 	bl	800ac02 <dir_alloc>
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d126      	bne.n	800ae42 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7ff f989 	bl	800a11a <move_window>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d117      	bne.n	800ae42 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae18:	2220      	movs	r2, #32
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fe ff28 	bl	8009c72 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae2e:	220b      	movs	r2, #11
 800ae30:	4619      	mov	r1, r3
 800ae32:	f7fe ff01 	bl	8009c38 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	60fb      	str	r3, [r7, #12]
 800ae5c:	e002      	b.n	800ae64 <create_name+0x18>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3301      	adds	r3, #1
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b2f      	cmp	r3, #47	; 0x2f
 800ae6a:	d0f8      	beq.n	800ae5e <create_name+0x12>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b5c      	cmp	r3, #92	; 0x5c
 800ae72:	d0f4      	beq.n	800ae5e <create_name+0x12>
	sfn = dp->fn;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae7a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ae7c:	220b      	movs	r2, #11
 800ae7e:	2120      	movs	r1, #32
 800ae80:	68b8      	ldr	r0, [r7, #8]
 800ae82:	f7fe fef6 	bl	8009c72 <mem_set>
	si = i = b = 0; ni = 8;
 800ae86:	2300      	movs	r3, #0
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	613b      	str	r3, [r7, #16]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	2308      	movs	r3, #8
 800ae94:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	1c5a      	adds	r2, r3, #1
 800ae9a:	617a      	str	r2, [r7, #20]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800aea4:	7fbb      	ldrb	r3, [r7, #30]
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d953      	bls.n	800af52 <create_name+0x106>
 800aeaa:	7fbb      	ldrb	r3, [r7, #30]
 800aeac:	2b2f      	cmp	r3, #47	; 0x2f
 800aeae:	d050      	beq.n	800af52 <create_name+0x106>
 800aeb0:	7fbb      	ldrb	r3, [r7, #30]
 800aeb2:	2b5c      	cmp	r3, #92	; 0x5c
 800aeb4:	d04d      	beq.n	800af52 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800aeb6:	7fbb      	ldrb	r3, [r7, #30]
 800aeb8:	2b2e      	cmp	r3, #46	; 0x2e
 800aeba:	d003      	beq.n	800aec4 <create_name+0x78>
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d30f      	bcc.n	800aee4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d102      	bne.n	800aed0 <create_name+0x84>
 800aeca:	7fbb      	ldrb	r3, [r7, #30]
 800aecc:	2b2e      	cmp	r3, #46	; 0x2e
 800aece:	d001      	beq.n	800aed4 <create_name+0x88>
 800aed0:	2306      	movs	r3, #6
 800aed2:	e073      	b.n	800afbc <create_name+0x170>
			i = 8; ni = 11;
 800aed4:	2308      	movs	r3, #8
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	230b      	movs	r3, #11
 800aeda:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800aedc:	7ffb      	ldrb	r3, [r7, #31]
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	77fb      	strb	r3, [r7, #31]
 800aee2:	e035      	b.n	800af50 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aee4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da08      	bge.n	800aefe <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800aeec:	7ffb      	ldrb	r3, [r7, #31]
 800aeee:	f043 0303 	orr.w	r3, r3, #3
 800aef2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aef4:	7fbb      	ldrb	r3, [r7, #30]
 800aef6:	3b80      	subs	r3, #128	; 0x80
 800aef8:	4a32      	ldr	r2, [pc, #200]	; (800afc4 <create_name+0x178>)
 800aefa:	5cd3      	ldrb	r3, [r2, r3]
 800aefc:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800aefe:	7fbb      	ldrb	r3, [r7, #30]
 800af00:	4619      	mov	r1, r3
 800af02:	4831      	ldr	r0, [pc, #196]	; (800afc8 <create_name+0x17c>)
 800af04:	f7fe fef4 	bl	8009cf0 <chk_chr>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <create_name+0xc6>
				return FR_INVALID_NAME;
 800af0e:	2306      	movs	r3, #6
 800af10:	e054      	b.n	800afbc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800af12:	7fbb      	ldrb	r3, [r7, #30]
 800af14:	2b40      	cmp	r3, #64	; 0x40
 800af16:	d907      	bls.n	800af28 <create_name+0xdc>
 800af18:	7fbb      	ldrb	r3, [r7, #30]
 800af1a:	2b5a      	cmp	r3, #90	; 0x5a
 800af1c:	d804      	bhi.n	800af28 <create_name+0xdc>
				b |= 2;
 800af1e:	7ffb      	ldrb	r3, [r7, #31]
 800af20:	f043 0302 	orr.w	r3, r3, #2
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e00c      	b.n	800af42 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800af28:	7fbb      	ldrb	r3, [r7, #30]
 800af2a:	2b60      	cmp	r3, #96	; 0x60
 800af2c:	d909      	bls.n	800af42 <create_name+0xf6>
 800af2e:	7fbb      	ldrb	r3, [r7, #30]
 800af30:	2b7a      	cmp	r3, #122	; 0x7a
 800af32:	d806      	bhi.n	800af42 <create_name+0xf6>
					b |= 1; c -= 0x20;
 800af34:	7ffb      	ldrb	r3, [r7, #31]
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	77fb      	strb	r3, [r7, #31]
 800af3c:	7fbb      	ldrb	r3, [r7, #30]
 800af3e:	3b20      	subs	r3, #32
 800af40:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	613a      	str	r2, [r7, #16]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	4413      	add	r3, r2
 800af4c:	7fba      	ldrb	r2, [r7, #30]
 800af4e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af50:	e7a1      	b.n	800ae96 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	441a      	add	r2, r3
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800af5c:	7fbb      	ldrb	r3, [r7, #30]
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d801      	bhi.n	800af66 <create_name+0x11a>
 800af62:	2304      	movs	r3, #4
 800af64:	e000      	b.n	800af68 <create_name+0x11c>
 800af66:	2300      	movs	r3, #0
 800af68:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <create_name+0x128>
 800af70:	2306      	movs	r3, #6
 800af72:	e023      	b.n	800afbc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2be5      	cmp	r3, #229	; 0xe5
 800af7a:	d102      	bne.n	800af82 <create_name+0x136>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2205      	movs	r2, #5
 800af80:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2b08      	cmp	r3, #8
 800af86:	d102      	bne.n	800af8e <create_name+0x142>
 800af88:	7ffb      	ldrb	r3, [r7, #31]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
 800af90:	f003 0303 	and.w	r3, r3, #3
 800af94:	2b01      	cmp	r3, #1
 800af96:	d103      	bne.n	800afa0 <create_name+0x154>
 800af98:	7fbb      	ldrb	r3, [r7, #30]
 800af9a:	f043 0310 	orr.w	r3, r3, #16
 800af9e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800afa0:	7ffb      	ldrb	r3, [r7, #31]
 800afa2:	f003 030c 	and.w	r3, r3, #12
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d103      	bne.n	800afb2 <create_name+0x166>
 800afaa:	7fbb      	ldrb	r3, [r7, #30]
 800afac:	f043 0308 	orr.w	r3, r3, #8
 800afb0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	330b      	adds	r3, #11
 800afb6:	7fba      	ldrb	r2, [r7, #30]
 800afb8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800afba:	2300      	movs	r3, #0
#endif
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	0801ab94 	.word	0x0801ab94
 800afc8:	08018a08 	.word	0x08018a08

0800afcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b2f      	cmp	r3, #47	; 0x2f
 800afdc:	d003      	beq.n	800afe6 <follow_path+0x1a>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b5c      	cmp	r3, #92	; 0x5c
 800afe4:	d102      	bne.n	800afec <follow_path+0x20>
		path++;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	3301      	adds	r3, #1
 800afea:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b1f      	cmp	r3, #31
 800affa:	d80a      	bhi.n	800b012 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800affc:	2100      	movs	r1, #0
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff fc74 	bl	800a8ec <dir_sdi>
 800b004:	4603      	mov	r3, r0
 800b006:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b010:	e045      	b.n	800b09e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b012:	463b      	mov	r3, r7
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff ff18 	bl	800ae4c <create_name>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d136      	bne.n	800b094 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fe88 	bl	800ad3c <dir_find>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b036:	7adb      	ldrb	r3, [r3, #11]
 800b038:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b04      	cmp	r3, #4
 800b044:	d128      	bne.n	800b098 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d123      	bne.n	800b098 <follow_path+0xcc>
 800b050:	2305      	movs	r3, #5
 800b052:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b054:	e020      	b.n	800b098 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d11d      	bne.n	800b09c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b066:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	330b      	adds	r3, #11
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b076:	2305      	movs	r3, #5
 800b078:	73fb      	strb	r3, [r7, #15]
 800b07a:	e010      	b.n	800b09e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fe06 	bl	800ac96 <ld_clust>
 800b08a:	4602      	mov	r2, r0
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b092:	e7be      	b.n	800b012 <follow_path+0x46>
			if (res != FR_OK) break;
 800b094:	bf00      	nop
 800b096:	e002      	b.n	800b09e <follow_path+0xd2>
				break;
 800b098:	bf00      	nop
 800b09a:	e000      	b.n	800b09e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b09c:	bf00      	nop
		}
	}

	return res;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d031      	beq.n	800b122 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	617b      	str	r3, [r7, #20]
 800b0c4:	e002      	b.n	800b0cc <get_ldnumber+0x24>
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b20      	cmp	r3, #32
 800b0d2:	d903      	bls.n	800b0dc <get_ldnumber+0x34>
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b3a      	cmp	r3, #58	; 0x3a
 800b0da:	d1f4      	bne.n	800b0c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b3a      	cmp	r3, #58	; 0x3a
 800b0e2:	d11c      	bne.n	800b11e <get_ldnumber+0x76>
			tp = *path;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	60fa      	str	r2, [r7, #12]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	3b30      	subs	r3, #48	; 0x30
 800b0f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d80e      	bhi.n	800b11a <get_ldnumber+0x72>
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	429a      	cmp	r2, r3
 800b102:	d10a      	bne.n	800b11a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d807      	bhi.n	800b11a <get_ldnumber+0x72>
					vol = (int)i;
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	3301      	adds	r3, #1
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	e002      	b.n	800b124 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b11e:	2300      	movs	r3, #0
 800b120:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b122:	693b      	ldr	r3, [r7, #16]
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	bc80      	pop	{r7}
 800b12c:	4770      	bx	lr
	...

0800b130 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b148:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fe ffe3 	bl	800a11a <move_window>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <check_fs+0x2e>
		return 3;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e04a      	b.n	800b1f4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b164:	3301      	adds	r3, #1
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	b21a      	sxth	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b172:	b21b      	sxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b21b      	sxth	r3, r3
 800b178:	4a20      	ldr	r2, [pc, #128]	; (800b1fc <check_fs+0xcc>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d001      	beq.n	800b182 <check_fs+0x52>
		return 2;
 800b17e:	2302      	movs	r3, #2
 800b180:	e038      	b.n	800b1f4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3336      	adds	r3, #54	; 0x36
 800b186:	3303      	adds	r3, #3
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	061a      	lsls	r2, r3, #24
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3336      	adds	r3, #54	; 0x36
 800b190:	3302      	adds	r3, #2
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	041b      	lsls	r3, r3, #16
 800b196:	4313      	orrs	r3, r2
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	3236      	adds	r2, #54	; 0x36
 800b19c:	3201      	adds	r2, #1
 800b19e:	7812      	ldrb	r2, [r2, #0]
 800b1a0:	0212      	lsls	r2, r2, #8
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1b0:	4a13      	ldr	r2, [pc, #76]	; (800b200 <check_fs+0xd0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d101      	bne.n	800b1ba <check_fs+0x8a>
		return 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e01c      	b.n	800b1f4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	3352      	adds	r3, #82	; 0x52
 800b1be:	3303      	adds	r3, #3
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	061a      	lsls	r2, r3, #24
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3352      	adds	r3, #82	; 0x52
 800b1c8:	3302      	adds	r3, #2
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	041b      	lsls	r3, r3, #16
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	3252      	adds	r2, #82	; 0x52
 800b1d4:	3201      	adds	r2, #1
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	0212      	lsls	r2, r2, #8
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1e8:	4a05      	ldr	r2, [pc, #20]	; (800b200 <check_fs+0xd0>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d101      	bne.n	800b1f2 <check_fs+0xc2>
		return 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e000      	b.n	800b1f4 <check_fs+0xc4>

	return 1;
 800b1f2:	2301      	movs	r3, #1
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	ffffaa55 	.word	0xffffaa55
 800b200:	00544146 	.word	0x00544146

0800b204 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b096      	sub	sp, #88	; 0x58
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	4613      	mov	r3, r2
 800b210:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7ff ff45 	bl	800b0a8 <get_ldnumber>
 800b21e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b222:	2b00      	cmp	r3, #0
 800b224:	da01      	bge.n	800b22a <find_volume+0x26>
 800b226:	230b      	movs	r3, #11
 800b228:	e2aa      	b.n	800b780 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b22a:	4a9e      	ldr	r2, [pc, #632]	; (800b4a4 <find_volume+0x2a0>)
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b232:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <find_volume+0x3a>
 800b23a:	230c      	movs	r3, #12
 800b23c:	e2a0      	b.n	800b780 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b242:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d01b      	beq.n	800b286 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fc51 	bl	8009afc <disk_status>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10c      	bne.n	800b286 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d007      	beq.n	800b282 <find_volume+0x7e>
 800b272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b276:	f003 0304 	and.w	r3, r3, #4
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b27e:	230a      	movs	r3, #10
 800b280:	e27e      	b.n	800b780 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800b282:	2300      	movs	r3, #0
 800b284:	e27c      	b.n	800b780 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b290:	b2da      	uxtb	r2, r3
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fe fc46 	bl	8009b30 <disk_initialize>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b2aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e262      	b.n	800b780 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b2ba:	79fb      	ldrb	r3, [r7, #7]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d007      	beq.n	800b2d0 <find_volume+0xcc>
 800b2c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b2cc:	230a      	movs	r3, #10
 800b2ce:	e257      	b.n	800b780 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b2d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2d8:	f7ff ff2a 	bl	800b130 <check_fs>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b2e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d155      	bne.n	800b396 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ee:	e029      	b.n	800b344 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b2f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f4:	011b      	lsls	r3, r3, #4
 800b2f6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2fa:	4413      	add	r3, r2
 800b2fc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	3304      	adds	r3, #4
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d012      	beq.n	800b32e <find_volume+0x12a>
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	330b      	adds	r3, #11
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	330a      	adds	r3, #10
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	4313      	orrs	r3, r2
 800b31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31c:	3209      	adds	r2, #9
 800b31e:	7812      	ldrb	r2, [r2, #0]
 800b320:	0212      	lsls	r2, r2, #8
 800b322:	4313      	orrs	r3, r2
 800b324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b326:	3208      	adds	r2, #8
 800b328:	7812      	ldrb	r2, [r2, #0]
 800b32a:	431a      	orrs	r2, r3
 800b32c:	e000      	b.n	800b330 <find_volume+0x12c>
 800b32e:	2200      	movs	r2, #0
 800b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b338:	440b      	add	r3, r1
 800b33a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b340:	3301      	adds	r3, #1
 800b342:	643b      	str	r3, [r7, #64]	; 0x40
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	2b03      	cmp	r3, #3
 800b348:	d9d2      	bls.n	800b2f0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b34a:	2300      	movs	r3, #0
 800b34c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <find_volume+0x156>
 800b354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b356:	3b01      	subs	r3, #1
 800b358:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b362:	4413      	add	r3, r2
 800b364:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b368:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d005      	beq.n	800b37c <find_volume+0x178>
 800b370:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b374:	f7ff fedc 	bl	800b130 <check_fs>
 800b378:	4603      	mov	r3, r0
 800b37a:	e000      	b.n	800b37e <find_volume+0x17a>
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <find_volume+0x192>
 800b38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38c:	3301      	adds	r3, #1
 800b38e:	643b      	str	r3, [r7, #64]	; 0x40
 800b390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b392:	2b03      	cmp	r3, #3
 800b394:	d9e1      	bls.n	800b35a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d101      	bne.n	800b3a2 <find_volume+0x19e>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e1ee      	b.n	800b780 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b3a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <find_volume+0x1aa>
 800b3aa:	230d      	movs	r3, #13
 800b3ac:	e1e8      	b.n	800b780 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	7b1b      	ldrb	r3, [r3, #12]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	b21a      	sxth	r2, r3
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b8:	7adb      	ldrb	r3, [r3, #11]
 800b3ba:	b21b      	sxth	r3, r3
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c4:	d001      	beq.n	800b3ca <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800b3c6:	230d      	movs	r3, #13
 800b3c8:	e1da      	b.n	800b780 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3cc:	7ddb      	ldrb	r3, [r3, #23]
 800b3ce:	021b      	lsls	r3, r3, #8
 800b3d0:	b21a      	sxth	r2, r3
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	7d9b      	ldrb	r3, [r3, #22]
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	b21b      	sxth	r3, r3
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d112      	bne.n	800b40c <find_volume+0x208>
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b3ec:	061a      	lsls	r2, r3, #24
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b3f4:	041b      	lsls	r3, r3, #16
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3fa:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b3fe:	0212      	lsls	r2, r2, #8
 800b400:	4313      	orrs	r3, r2
 800b402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b404:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b408:	4313      	orrs	r3, r2
 800b40a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b410:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	7c1a      	ldrb	r2, [r3, #16]
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b424:	2b01      	cmp	r3, #1
 800b426:	d006      	beq.n	800b436 <find_volume+0x232>
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d001      	beq.n	800b436 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800b432:	230d      	movs	r3, #13
 800b434:	e1a4      	b.n	800b780 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b43c:	461a      	mov	r2, r3
 800b43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b440:	fb02 f303 	mul.w	r3, r2, r3
 800b444:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	7b5a      	ldrb	r2, [r3, #13]
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <find_volume+0x26c>
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b460:	461a      	mov	r2, r3
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b468:	3b01      	subs	r3, #1
 800b46a:	4013      	ands	r3, r2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800b470:	230d      	movs	r3, #13
 800b472:	e185      	b.n	800b780 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	7c9b      	ldrb	r3, [r3, #18]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	b21a      	sxth	r2, r3
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	7c5b      	ldrb	r3, [r3, #17]
 800b480:	b21b      	sxth	r3, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	b21b      	sxth	r3, r3
 800b486:	b29a      	uxth	r2, r3
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b494:	f003 030f 	and.w	r3, r3, #15
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d004      	beq.n	800b4a8 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800b49e:	230d      	movs	r3, #13
 800b4a0:	e16e      	b.n	800b780 <find_volume+0x57c>
 800b4a2:	bf00      	nop
 800b4a4:	200000d4 	.word	0x200000d4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	7d1b      	ldrb	r3, [r3, #20]
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	b21a      	sxth	r2, r3
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	7cdb      	ldrb	r3, [r3, #19]
 800b4b4:	b21b      	sxth	r3, r3
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	b21b      	sxth	r3, r3
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b4be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d112      	bne.n	800b4ea <find_volume+0x2e6>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b4ca:	061a      	lsls	r2, r3, #24
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b4dc:	0212      	lsls	r2, r2, #8
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ec:	7bdb      	ldrb	r3, [r3, #15]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	b21a      	sxth	r2, r3
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	7b9b      	ldrb	r3, [r3, #14]
 800b4f6:	b21b      	sxth	r3, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	b21b      	sxth	r3, r3
 800b4fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b4fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <find_volume+0x304>
 800b504:	230d      	movs	r3, #13
 800b506:	e13b      	b.n	800b780 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b508:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b50c:	4413      	add	r3, r2
 800b50e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b510:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b514:	0912      	lsrs	r2, r2, #4
 800b516:	b292      	uxth	r2, r2
 800b518:	4413      	add	r3, r2
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b51c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	429a      	cmp	r2, r3
 800b522:	d201      	bcs.n	800b528 <find_volume+0x324>
 800b524:	230d      	movs	r3, #13
 800b526:	e12b      	b.n	800b780 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b530:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b534:	fbb3 f3f2 	udiv	r3, r3, r2
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <find_volume+0x340>
 800b540:	230d      	movs	r3, #13
 800b542:	e11d      	b.n	800b780 <find_volume+0x57c>
	fmt = FS_FAT12;
 800b544:	2301      	movs	r3, #1
 800b546:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b550:	4293      	cmp	r3, r2
 800b552:	d902      	bls.n	800b55a <find_volume+0x356>
 800b554:	2302      	movs	r3, #2
 800b556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b560:	4293      	cmp	r3, r2
 800b562:	d902      	bls.n	800b56a <find_volume+0x366>
 800b564:	2303      	movs	r3, #3
 800b566:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	1c9a      	adds	r2, r3, #2
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b578:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b57c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b580:	441a      	add	r2, r3
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	441a      	add	r2, r3
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d121      	bne.n	800b5e0 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <find_volume+0x3a6>
 800b5a6:	230d      	movs	r3, #13
 800b5a8:	e0ea      	b.n	800b780 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5b0:	061a      	lsls	r2, r3, #24
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b5b8:	041b      	lsls	r3, r3, #16
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5be:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b5c2:	0212      	lsls	r2, r2, #8
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5c8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	647b      	str	r3, [r7, #68]	; 0x44
 800b5de:	e025      	b.n	800b62c <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <find_volume+0x3ea>
 800b5ea:	230d      	movs	r3, #13
 800b5ec:	e0c8      	b.n	800b780 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f6:	441a      	add	r2, r3
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b602:	2b02      	cmp	r3, #2
 800b604:	d104      	bne.n	800b610 <find_volume+0x40c>
 800b606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b608:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	e00c      	b.n	800b62a <find_volume+0x426>
 800b610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b612:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b616:	4613      	mov	r3, r2
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	4413      	add	r3, r2
 800b61c:	085a      	lsrs	r2, r3, #1
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b62a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b634:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b638:	0a5b      	lsrs	r3, r3, #9
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d201      	bcs.n	800b642 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800b63e:	230d      	movs	r3, #13
 800b640:	e09e      	b.n	800b780 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b648:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	2280      	movs	r2, #128	; 0x80
 800b65c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b664:	2b03      	cmp	r3, #3
 800b666:	d177      	bne.n	800b758 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b66e:	021b      	lsls	r3, r3, #8
 800b670:	b21a      	sxth	r2, r3
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b678:	b21b      	sxth	r3, r3
 800b67a:	4313      	orrs	r3, r2
 800b67c:	b21b      	sxth	r3, r3
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d16a      	bne.n	800b758 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b684:	3301      	adds	r3, #1
 800b686:	4619      	mov	r1, r3
 800b688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b68a:	f7fe fd46 	bl	800a11a <move_window>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d161      	bne.n	800b758 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b6a2:	021b      	lsls	r3, r3, #8
 800b6a4:	b21a      	sxth	r2, r3
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b6ac:	b21b      	sxth	r3, r3
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	b21b      	sxth	r3, r3
 800b6b2:	4a35      	ldr	r2, [pc, #212]	; (800b788 <find_volume+0x584>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d14f      	bne.n	800b758 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	78db      	ldrb	r3, [r3, #3]
 800b6bc:	061a      	lsls	r2, r3, #24
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	789b      	ldrb	r3, [r3, #2]
 800b6c2:	041b      	lsls	r3, r3, #16
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6c8:	7852      	ldrb	r2, [r2, #1]
 800b6ca:	0212      	lsls	r2, r2, #8
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6d0:	7812      	ldrb	r2, [r2, #0]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	4a2d      	ldr	r2, [pc, #180]	; (800b78c <find_volume+0x588>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d13e      	bne.n	800b758 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6dc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b6e0:	061a      	lsls	r2, r3, #24
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b6e8:	041b      	lsls	r3, r3, #16
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ee:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b6f2:	0212      	lsls	r2, r2, #8
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6f8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	4a24      	ldr	r2, [pc, #144]	; (800b790 <find_volume+0x58c>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d129      	bne.n	800b758 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b70a:	061a      	lsls	r2, r3, #24
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b712:	041b      	lsls	r3, r3, #16
 800b714:	4313      	orrs	r3, r2
 800b716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b718:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b71c:	0212      	lsls	r2, r2, #8
 800b71e:	4313      	orrs	r3, r2
 800b720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b722:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b726:	431a      	orrs	r2, r3
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b734:	061a      	lsls	r2, r3, #24
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	4313      	orrs	r3, r2
 800b740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b742:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b746:	0212      	lsls	r2, r2, #8
 800b748:	4313      	orrs	r3, r2
 800b74a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b74c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b750:	431a      	orrs	r2, r3
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b75e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <find_volume+0x590>)
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	3301      	adds	r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <find_volume+0x590>)
 800b76c:	801a      	strh	r2, [r3, #0]
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <find_volume+0x590>)
 800b770:	881a      	ldrh	r2, [r3, #0]
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b778:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b77a:	f7fe fc5d 	bl	800a038 <clear_lock>
#endif

	return FR_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3758      	adds	r7, #88	; 0x58
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	ffffaa55 	.word	0xffffaa55
 800b78c:	41615252 	.word	0x41615252
 800b790:	61417272 	.word	0x61417272
 800b794:	200000dc 	.word	0x200000dc

0800b798 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d022      	beq.n	800b7f0 <validate+0x58>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d01d      	beq.n	800b7f0 <validate+0x58>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d016      	beq.n	800b7f0 <validate+0x58>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7c8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d10c      	bne.n	800b7f0 <validate+0x58>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7dc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe f98b 	bl	8009afc <disk_status>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	f003 0301 	and.w	r3, r3, #1
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b7f0:	2309      	movs	r3, #9
 800b7f2:	e000      	b.n	800b7f6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b812:	f107 0310 	add.w	r3, r7, #16
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff fc46 	bl	800b0a8 <get_ldnumber>
 800b81c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	2b00      	cmp	r3, #0
 800b822:	da01      	bge.n	800b828 <f_mount+0x28>
 800b824:	230b      	movs	r3, #11
 800b826:	e02d      	b.n	800b884 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b828:	4a18      	ldr	r2, [pc, #96]	; (800b88c <f_mount+0x8c>)
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b830:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d006      	beq.n	800b846 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b838:	69b8      	ldr	r0, [r7, #24]
 800b83a:	f7fe fbfd 	bl	800a038 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	490d      	ldr	r1, [pc, #52]	; (800b88c <f_mount+0x8c>)
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <f_mount+0x6a>
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d001      	beq.n	800b86e <f_mount+0x6e>
 800b86a:	2300      	movs	r3, #0
 800b86c:	e00a      	b.n	800b884 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b86e:	f107 0108 	add.w	r1, r7, #8
 800b872:	f107 030c 	add.w	r3, r7, #12
 800b876:	2200      	movs	r2, #0
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fcc3 	bl	800b204 <find_volume>
 800b87e:	4603      	mov	r3, r0
 800b880:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b882:	7dfb      	ldrb	r3, [r7, #23]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200000d4 	.word	0x200000d4

0800b890 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800b896:	af00      	add	r7, sp, #0
 800b898:	f107 030c 	add.w	r3, r7, #12
 800b89c:	6018      	str	r0, [r3, #0]
 800b89e:	f107 0308 	add.w	r3, r7, #8
 800b8a2:	6019      	str	r1, [r3, #0]
 800b8a4:	1dfb      	adds	r3, r7, #7
 800b8a6:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <f_open+0x26>
 800b8b2:	2309      	movs	r3, #9
 800b8b4:	e1f2      	b.n	800bc9c <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800b8b6:	f107 030c 	add.w	r3, r7, #12
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b8c2:	1dfb      	adds	r3, r7, #7
 800b8c4:	1dfa      	adds	r2, r7, #7
 800b8c6:	7812      	ldrb	r2, [r2, #0]
 800b8c8:	f002 021f 	and.w	r2, r2, #31
 800b8cc:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b8ce:	1dfb      	adds	r3, r7, #7
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f023 0301 	bic.w	r3, r3, #1
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	f107 0320 	add.w	r3, r7, #32
 800b8e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff fc8d 	bl	800b204 <find_volume>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b8f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f040 81cf 	bne.w	800bc98 <f_open+0x408>
		INIT_BUF(dj);
 800b8fa:	f107 0320 	add.w	r3, r7, #32
 800b8fe:	f107 0214 	add.w	r2, r7, #20
 800b902:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800b906:	f107 0308 	add.w	r3, r7, #8
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	f107 0320 	add.w	r3, r7, #32
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff fb5a 	bl	800afcc <follow_path>
 800b918:	4603      	mov	r3, r0
 800b91a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800b91e:	f107 0320 	add.w	r3, r7, #32
 800b922:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b926:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b92a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d11a      	bne.n	800b968 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800b932:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b936:	2b00      	cmp	r3, #0
 800b938:	d103      	bne.n	800b942 <f_open+0xb2>
				res = FR_INVALID_NAME;
 800b93a:	2306      	movs	r3, #6
 800b93c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b940:	e012      	b.n	800b968 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b942:	1dfb      	adds	r3, r7, #7
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bf14      	ite	ne
 800b94e:	2301      	movne	r3, #1
 800b950:	2300      	moveq	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	f107 0320 	add.w	r3, r7, #32
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fe f9e1 	bl	8009d24 <chk_lock>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b968:	1dfb      	adds	r3, r7, #7
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	f003 031c 	and.w	r3, r3, #28
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 80cc 	beq.w	800bb0e <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800b976:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d01f      	beq.n	800b9be <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b97e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b982:	2b04      	cmp	r3, #4
 800b984:	d10e      	bne.n	800b9a4 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b986:	f7fe fa39 	bl	8009dfc <enq_lock>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d006      	beq.n	800b99e <f_open+0x10e>
 800b990:	f107 0320 	add.w	r3, r7, #32
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fa20 	bl	800adda <dir_register>
 800b99a:	4603      	mov	r3, r0
 800b99c:	e000      	b.n	800b9a0 <f_open+0x110>
 800b99e:	2312      	movs	r3, #18
 800b9a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b9a4:	1dfb      	adds	r3, r7, #7
 800b9a6:	1dfa      	adds	r2, r7, #7
 800b9a8:	7812      	ldrb	r2, [r2, #0]
 800b9aa:	f042 0208 	orr.w	r2, r2, #8
 800b9ae:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b9b0:	f107 0320 	add.w	r3, r7, #32
 800b9b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9b8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800b9bc:	e014      	b.n	800b9e8 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b9be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b9c2:	330b      	adds	r3, #11
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	f003 0311 	and.w	r3, r3, #17
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <f_open+0x146>
					res = FR_DENIED;
 800b9ce:	2307      	movs	r3, #7
 800b9d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b9d4:	e008      	b.n	800b9e8 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b9d6:	1dfb      	adds	r3, r7, #7
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <f_open+0x158>
						res = FR_EXIST;
 800b9e2:	2308      	movs	r3, #8
 800b9e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b9e8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f040 80af 	bne.w	800bb50 <f_open+0x2c0>
 800b9f2:	1dfb      	adds	r3, r7, #7
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 80a8 	beq.w	800bb50 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800ba00:	f7fa ff70 	bl	80068e4 <get_fattime>
 800ba04:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800ba08:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba0c:	330e      	adds	r3, #14
 800ba0e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800ba12:	b2d2      	uxtb	r2, r2
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	0a1b      	lsrs	r3, r3, #8
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba24:	330f      	adds	r3, #15
 800ba26:	b2d2      	uxtb	r2, r2
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ba2e:	0c1a      	lsrs	r2, r3, #16
 800ba30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba34:	3310      	adds	r3, #16
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800ba3e:	0e1a      	lsrs	r2, r3, #24
 800ba40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba44:	3311      	adds	r3, #17
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800ba4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba4e:	330b      	adds	r3, #11
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800ba54:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba58:	331c      	adds	r3, #28
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba62:	331d      	adds	r3, #29
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba6c:	331e      	adds	r3, #30
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ba76:	331f      	adds	r3, #31
 800ba78:	2200      	movs	r2, #0
 800ba7a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800ba7c:	f107 0320 	add.w	r3, r7, #32
 800ba80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba84:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff f904 	bl	800ac96 <ld_clust>
 800ba8e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800ba92:	2100      	movs	r1, #0
 800ba94:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800ba98:	f7ff f92a 	bl	800acf0 <st_clust>
				dj.fs->wflag = 1;
 800ba9c:	f107 0320 	add.w	r3, r7, #32
 800baa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800baaa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d04e      	beq.n	800bb50 <f_open+0x2c0>
					dw = dj.fs->winsect;
 800bab2:	f107 0320 	add.w	r3, r7, #32
 800bab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baba:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800babe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800bac2:	f107 0320 	add.w	r3, r7, #32
 800bac6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baca:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fde1 	bl	800a696 <remove_chain>
 800bad4:	4603      	mov	r3, r0
 800bad6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800bada:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d136      	bne.n	800bb50 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bae2:	f107 0320 	add.w	r3, r7, #32
 800bae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baea:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800baee:	3a01      	subs	r2, #1
 800baf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800baf4:	f107 0320 	add.w	r3, r7, #32
 800baf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bafc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fb0a 	bl	800a11a <move_window>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bb0c:	e020      	b.n	800bb50 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bb0e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d11c      	bne.n	800bb50 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bb16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bb1a:	330b      	adds	r3, #11
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	f003 0310 	and.w	r3, r3, #16
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d003      	beq.n	800bb2e <f_open+0x29e>
					res = FR_NO_FILE;
 800bb26:	2304      	movs	r3, #4
 800bb28:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800bb2c:	e010      	b.n	800bb50 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bb2e:	1dfb      	adds	r3, r7, #7
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00a      	beq.n	800bb50 <f_open+0x2c0>
 800bb3a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bb3e:	330b      	adds	r3, #11
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <f_open+0x2c0>
						res = FR_DENIED;
 800bb4a:	2307      	movs	r3, #7
 800bb4c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800bb50:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d13d      	bne.n	800bbd4 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb58:	1dfb      	adds	r3, r7, #7
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f003 0308 	and.w	r3, r3, #8
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800bb64:	1dfb      	adds	r3, r7, #7
 800bb66:	1dfa      	adds	r2, r7, #7
 800bb68:	7812      	ldrb	r2, [r2, #0]
 800bb6a:	f042 0220 	orr.w	r2, r2, #32
 800bb6e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bb70:	f107 0320 	add.w	r3, r7, #32
 800bb74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb78:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bb7c:	f107 030c 	add.w	r3, r7, #12
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800bb86:	f107 030c 	add.w	r3, r7, #12
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bb90:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb94:	1dfb      	adds	r3, r7, #7
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f023 0301 	bic.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bf14      	ite	ne
 800bba0:	2301      	movne	r3, #1
 800bba2:	2300      	moveq	r3, #0
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	461a      	mov	r2, r3
 800bba8:	f107 0320 	add.w	r3, r7, #32
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe f948 	bl	8009e44 <inc_lock>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f107 030c 	add.w	r3, r7, #12
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800bbc0:	f107 030c 	add.w	r3, r7, #12
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d102      	bne.n	800bbd4 <f_open+0x344>
 800bbce:	2302      	movs	r3, #2
 800bbd0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800bbd4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d15d      	bne.n	800bc98 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800bbdc:	f107 030c 	add.w	r3, r7, #12
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	1dfa      	adds	r2, r7, #7
 800bbe4:	7812      	ldrb	r2, [r2, #0]
 800bbe6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800bbea:	f107 030c 	add.w	r3, r7, #12
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bbf6:	f107 0320 	add.w	r3, r7, #32
 800bbfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbfe:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7ff f847 	bl	800ac96 <ld_clust>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bc14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bc18:	331f      	adds	r3, #31
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	061a      	lsls	r2, r3, #24
 800bc1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800bc22:	331e      	adds	r3, #30
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bc2e:	321d      	adds	r2, #29
 800bc30:	7812      	ldrb	r2, [r2, #0]
 800bc32:	0212      	lsls	r2, r2, #8
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bc3a:	321c      	adds	r2, #28
 800bc3c:	7812      	ldrb	r2, [r2, #0]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	f107 030c 	add.w	r3, r7, #12
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800bc4a:	f107 030c 	add.w	r3, r7, #12
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800bc56:	f107 030c 	add.w	r3, r7, #12
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bc62:	f107 030c 	add.w	r3, r7, #12
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bc6e:	f107 0320 	add.w	r3, r7, #32
 800bc72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bc76:	f107 030c 	add.w	r3, r7, #12
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800bc80:	f107 030c 	add.w	r3, r7, #12
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc8a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bc8e:	f107 030c 	add.w	r3, r7, #12
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800bc98:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b08a      	sub	sp, #40	; 0x28
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
 800bcb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f7ff fd6a 	bl	800b798 <validate>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <f_write+0x2c>
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	e192      	b.n	800bff8 <f_write+0x352>
	if (fp->err)							/* Check error */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d003      	beq.n	800bce4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bce2:	e189      	b.n	800bff8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bcf2:	2307      	movs	r3, #7
 800bcf4:	e180      	b.n	800bff8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd06:	429a      	cmp	r2, r3
 800bd08:	f080 8158 	bcs.w	800bfbc <f_write+0x316>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bd10:	e154      	b.n	800bfbc <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 8114 	bne.w	800bf4a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd28:	0a5b      	lsrs	r3, r3, #9
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd32:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800bd3e:	7dbb      	ldrb	r3, [r7, #22]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d151      	bne.n	800bde8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10f      	bne.n	800bd6e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d121      	bne.n	800bda0 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fcf0 	bl	800a74a <create_chain>
 800bd6a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd6c:	e018      	b.n	800bda0 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d008      	beq.n	800bd8a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd7e:	4619      	mov	r1, r3
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7fe fd7f 	bl	800a884 <clmt_clust>
 800bd86:	6278      	str	r0, [r7, #36]	; 0x24
 800bd88:	e00a      	b.n	800bda0 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f7fe fcd6 	bl	800a74a <create_chain>
 800bd9e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 810f 	beq.w	800bfc6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d105      	bne.n	800bdba <f_write+0x114>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e11e      	b.n	800bff8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdc0:	d105      	bne.n	800bdce <f_write+0x128>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e114      	b.n	800bff8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d103      	bne.n	800bde8 <f_write+0x142>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d01d      	beq.n	800be32 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdfc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800be08:	2301      	movs	r3, #1
 800be0a:	f7fd fed7 	bl	8009bbc <disk_write>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d005      	beq.n	800be20 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be1c:	2301      	movs	r3, #1
 800be1e:	e0eb      	b.n	800bff8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f7fe fa45 	bl	800a2d0 <clust2sect>
 800be46:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d105      	bne.n	800be5a <f_write+0x1b4>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2202      	movs	r2, #2
 800be52:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be56:	2302      	movs	r3, #2
 800be58:	e0ce      	b.n	800bff8 <f_write+0x352>
			sect += csect;
 800be5a:	7dbb      	ldrb	r3, [r7, #22]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	4413      	add	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	0a5b      	lsrs	r3, r3, #9
 800be66:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d048      	beq.n	800bf00 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800be6e:	7dba      	ldrb	r2, [r7, #22]
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	4413      	add	r3, r2
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800be7a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800be7e:	4293      	cmp	r3, r2
 800be80:	d908      	bls.n	800be94 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be88:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800be8c:	461a      	mov	r2, r3
 800be8e:	7dbb      	ldrb	r3, [r7, #22]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be9a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	69b9      	ldr	r1, [r7, #24]
 800bea4:	f7fd fe8a 	bl	8009bbc <disk_write>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d005      	beq.n	800beba <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800beb6:	2301      	movs	r3, #1
 800beb8:	e09e      	b.n	800bff8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	69fa      	ldr	r2, [r7, #28]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d916      	bls.n	800bef8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	025b      	lsls	r3, r3, #9
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	4413      	add	r3, r2
 800bedc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bee0:	4619      	mov	r1, r3
 800bee2:	f7fd fea9 	bl	8009c38 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800beec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	025b      	lsls	r3, r3, #9
 800befc:	623b      	str	r3, [r7, #32]
				continue;
 800befe:	e047      	b.n	800bf90 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d01a      	beq.n	800bf42 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d212      	bcs.n	800bf42 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	2301      	movs	r3, #1
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	f7fd fe26 	bl	8009b7c <disk_read>
 800bf30:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e05a      	b.n	800bff8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf58:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bf5a:	6a3a      	ldr	r2, [r7, #32]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d901      	bls.n	800bf66 <f_write+0x2c0>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bf6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4413      	add	r3, r2
 800bf74:	6a3a      	ldr	r2, [r7, #32]
 800bf76:	69b9      	ldr	r1, [r7, #24]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fd fe5d 	bl	8009c38 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	4413      	add	r3, r2
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	441a      	add	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	441a      	add	r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	601a      	str	r2, [r3, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f47f aea7 	bne.w	800bd12 <f_write+0x6c>
 800bfc4:	e000      	b.n	800bfc8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bfc6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d905      	bls.n	800bfe4 <f_write+0x33e>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bfea:	f043 0320 	orr.w	r3, r3, #32
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3728      	adds	r7, #40	; 0x28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff fbc5 	bl	800b798 <validate>
 800c00e:	4603      	mov	r3, r0
 800c010:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 80a8 	bne.w	800c16a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c020:	f003 0320 	and.w	r3, r3, #32
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 80a0 	beq.w	800c16a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c034:	2b00      	cmp	r3, #0
 800c036:	d019      	beq.n	800c06c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c03e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c04a:	2301      	movs	r3, #1
 800c04c:	f7fd fdb6 	bl	8009bbc <disk_write>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c056:	2301      	movs	r3, #1
 800c058:	e088      	b.n	800c16c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c064:	b2da      	uxtb	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c078:	4619      	mov	r1, r3
 800c07a:	4610      	mov	r0, r2
 800c07c:	f7fe f84d 	bl	800a11a <move_window>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d16f      	bne.n	800c16a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c090:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	330b      	adds	r3, #11
 800c096:	781a      	ldrb	r2, [r3, #0]
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	330b      	adds	r3, #11
 800c09c:	f042 0220 	orr.w	r2, r2, #32
 800c0a0:	b2d2      	uxtb	r2, r2
 800c0a2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	331c      	adds	r3, #28
 800c0ae:	b2d2      	uxtb	r2, r2
 800c0b0:	701a      	strb	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	0a1b      	lsrs	r3, r3, #8
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	331d      	adds	r3, #29
 800c0c2:	b2d2      	uxtb	r2, r2
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c0cc:	0c1a      	lsrs	r2, r3, #16
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	331e      	adds	r3, #30
 800c0d2:	b2d2      	uxtb	r2, r2
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c0dc:	0e1a      	lsrs	r2, r3, #24
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	331f      	adds	r3, #31
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6938      	ldr	r0, [r7, #16]
 800c0f0:	f7fe fdfe 	bl	800acf0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c0f4:	f7fa fbf6 	bl	80068e4 <get_fattime>
 800c0f8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	3316      	adds	r3, #22
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	b29b      	uxth	r3, r3
 800c108:	0a1b      	lsrs	r3, r3, #8
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	3317      	adds	r3, #23
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	0c1a      	lsrs	r2, r3, #16
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	3318      	adds	r3, #24
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	0e1a      	lsrs	r2, r3, #24
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	3319      	adds	r3, #25
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	3312      	adds	r3, #18
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	3313      	adds	r3, #19
 800c138:	2200      	movs	r2, #0
 800c13a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c142:	f023 0320 	bic.w	r3, r3, #32
 800c146:	b2da      	uxtb	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe f808 	bl	800a176 <sync_fs>
 800c166:	4603      	mov	r3, r0
 800c168:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7ff ff3f 	bl	800c000 <f_sync>
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d116      	bne.n	800c1ba <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fb03 	bl	800b798 <validate>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10e      	bne.n	800c1ba <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fd ff04 	bl	8009fb0 <dec_lock>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d103      	bne.n	800c1ba <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b090      	sub	sp, #64	; 0x40
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7ff fae2 	bl	800b798 <validate>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c1da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <f_lseek+0x24>
 800c1e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1e6:	e247      	b.n	800c678 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c1f8:	e23e      	b.n	800c678 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80f2 	beq.w	800c3ea <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c20c:	d164      	bne.n	800c2d8 <f_lseek+0x114>
			tbl = fp->cltbl;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c218:	1d1a      	adds	r2, r3, #4
 800c21a:	627a      	str	r2, [r7, #36]	; 0x24
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	2302      	movs	r3, #2
 800c222:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c22a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d041      	beq.n	800c2b6 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	613b      	str	r3, [r7, #16]
 800c236:	2300      	movs	r3, #0
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	3302      	adds	r3, #2
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	3301      	adds	r3, #1
 800c248:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe f85d 	bl	800a312 <get_fat>
 800c258:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d805      	bhi.n	800c26c <f_lseek+0xa8>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c268:	2302      	movs	r3, #2
 800c26a:	e205      	b.n	800c678 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c272:	d105      	bne.n	800c280 <f_lseek+0xbc>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c27c:	2301      	movs	r3, #1
 800c27e:	e1fb      	b.n	800c678 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3301      	adds	r3, #1
 800c284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c286:	429a      	cmp	r2, r3
 800c288:	d0da      	beq.n	800c240 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d809      	bhi.n	800c2a6 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	1d1a      	adds	r2, r3, #4
 800c296:	627a      	str	r2, [r7, #36]	; 0x24
 800c298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	627a      	str	r2, [r7, #36]	; 0x24
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c2ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d3bd      	bcc.n	800c232 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2be:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c2c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d803      	bhi.n	800c2d0 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e1d1      	b.n	800c674 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c2d0:	2311      	movs	r3, #17
 800c2d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c2d6:	e1cd      	b.n	800c674 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <f_lseek+0x128>
				ofs = fp->fsize;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c2ea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 81bc 	beq.w	800c674 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7fe fabe 	bl	800a884 <clmt_clust>
 800c308:	4602      	mov	r2, r0
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c31c:	4619      	mov	r1, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	f7fd ffd6 	bl	800a2d0 <clust2sect>
 800c324:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d105      	bne.n	800c338 <f_lseek+0x174>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c334:	2302      	movs	r3, #2
 800c336:	e19f      	b.n	800c678 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	0a5b      	lsrs	r3, r3, #9
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c344:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c348:	3a01      	subs	r2, #1
 800c34a:	4013      	ands	r3, r2
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	4413      	add	r3, r2
 800c350:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 8189 	beq.w	800c674 <f_lseek+0x4b0>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	f000 8182 	beq.w	800c674 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d01d      	beq.n	800c3ba <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c384:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c390:	2301      	movs	r3, #1
 800c392:	f7fd fc13 	bl	8009bbc <disk_write>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d005      	beq.n	800c3a8 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e167      	b.n	800c678 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c3c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	f7fd fbd7 	bl	8009b7c <disk_read>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e14b      	b.n	800c678 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c3e8:	e144      	b.n	800c674 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d90a      	bls.n	800c40c <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c40a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c412:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	637b      	str	r3, [r7, #52]	; 0x34
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c41c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	f000 80c6 	beq.w	800c5b4 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c42e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c432:	025b      	lsls	r3, r3, #9
 800c434:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c436:	6a3b      	ldr	r3, [r7, #32]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	1e5a      	subs	r2, r3, #1
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	fbb2 f2f3 	udiv	r2, r2, r3
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	1e59      	subs	r1, r3, #1
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c450:	429a      	cmp	r2, r3
 800c452:	d312      	bcc.n	800c47a <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	1e5a      	subs	r2, r3, #1
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	425b      	negs	r3, r3
 800c45c:	401a      	ands	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c46a:	683a      	ldr	r2, [r7, #0]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c476:	63bb      	str	r3, [r7, #56]	; 0x38
 800c478:	e029      	b.n	800c4ce <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c480:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c484:	2b00      	cmp	r3, #0
 800c486:	d11e      	bne.n	800c4c6 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c48e:	2100      	movs	r1, #0
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe f95a 	bl	800a74a <create_chain>
 800c496:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d105      	bne.n	800c4aa <f_lseek+0x2e6>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	e0e6      	b.n	800c678 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b0:	d105      	bne.n	800c4be <f_lseek+0x2fa>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e0dc      	b.n	800c678 <f_lseek+0x4b4>
					fp->sclust = clst;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d06f      	beq.n	800c5b4 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 800c4d4:	e047      	b.n	800c566 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00d      	beq.n	800c500 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7fe f92c 	bl	800a74a <create_chain>
 800c4f2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <f_lseek+0x34c>
							ofs = bcs; break;
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	603b      	str	r3, [r7, #0]
 800c4fe:	e036      	b.n	800c56e <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fd ff02 	bl	800a312 <get_fat>
 800c50e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c516:	d105      	bne.n	800c524 <f_lseek+0x360>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c520:	2301      	movs	r3, #1
 800c522:	e0a9      	b.n	800c678 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	2b01      	cmp	r3, #1
 800c528:	d907      	bls.n	800c53a <f_lseek+0x376>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c530:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c536:	429a      	cmp	r2, r3
 800c538:	d305      	bcc.n	800c546 <f_lseek+0x382>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2202      	movs	r2, #2
 800c53e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c542:	2302      	movs	r3, #2
 800c544:	e098      	b.n	800c678 <f_lseek+0x4b4>
					fp->clust = clst;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	441a      	add	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d8b3      	bhi.n	800c4d6 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	441a      	add	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c584:	2b00      	cmp	r3, #0
 800c586:	d015      	beq.n	800c5b4 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c58e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c590:	4618      	mov	r0, r3
 800c592:	f7fd fe9d 	bl	800a2d0 <clust2sect>
 800c596:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d105      	bne.n	800c5aa <f_lseek+0x3e6>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e066      	b.n	800c678 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	0a5b      	lsrs	r3, r3, #9
 800c5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5b0:	4413      	add	r3, r2
 800c5b2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d041      	beq.n	800c646 <f_lseek+0x482>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c5c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d03b      	beq.n	800c646 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d01d      	beq.n	800c618 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c5e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f7fd fae4 	bl	8009bbc <disk_write>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c602:	2301      	movs	r3, #1
 800c604:	e038      	b.n	800c678 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c60c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c610:	b2da      	uxtb	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c61e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	2301      	movs	r3, #1
 800c626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c628:	f7fd faa8 	bl	8009b7c <disk_read>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c63a:	2301      	movs	r3, #1
 800c63c:	e01c      	b.n	800c678 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c642:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c652:	429a      	cmp	r2, r3
 800c654:	d90e      	bls.n	800c674 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c668:	f043 0320 	orr.w	r3, r3, #32
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c674:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3740      	adds	r7, #64	; 0x40
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	2b0a      	cmp	r3, #10
 800c690:	d103      	bne.n	800c69a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c692:	210d      	movs	r1, #13
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff fff3 	bl	800c680 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	db25      	blt.n	800c6f2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	60fa      	str	r2, [r7, #12]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	78fa      	ldrb	r2, [r7, #3]
 800c6b2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b3c      	cmp	r3, #60	; 0x3c
 800c6b8:	dd12      	ble.n	800c6e0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f103 010c 	add.w	r1, r3, #12
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	f107 0308 	add.w	r3, r7, #8
 800c6ca:	f7ff faec 	bl	800bca6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d101      	bne.n	800c6da <putc_bfd+0x5a>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e001      	b.n	800c6de <putc_bfd+0x5e>
 800c6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6de:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	609a      	str	r2, [r3, #8]
 800c6f0:	e000      	b.n	800c6f4 <putc_bfd+0x74>
	if (i < 0) return;
 800c6f2:	bf00      	nop
}
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c6fa:	b590      	push	{r4, r7, lr}
 800c6fc:	b097      	sub	sp, #92	; 0x5c
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800c710:	e009      	b.n	800c726 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	1c5a      	adds	r2, r3, #1
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	781a      	ldrb	r2, [r3, #0]
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	4611      	mov	r1, r2
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff ffad 	bl	800c680 <putc_bfd>
	while (*str)			/* Put the string */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f1      	bne.n	800c712 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	db16      	blt.n	800c762 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	461c      	mov	r4, r3
 800c73a:	f107 0208 	add.w	r2, r7, #8
 800c73e:	f107 030c 	add.w	r3, r7, #12
 800c742:	f103 010c 	add.w	r1, r3, #12
 800c746:	4613      	mov	r3, r2
 800c748:	4622      	mov	r2, r4
 800c74a:	f7ff faac 	bl	800bca6 <f_write>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d106      	bne.n	800c762 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	461a      	mov	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d101      	bne.n	800c762 <f_puts+0x68>
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	e001      	b.n	800c766 <f_puts+0x6c>
	return EOF;
 800c762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c766:	4618      	mov	r0, r3
 800c768:	375c      	adds	r7, #92	; 0x5c
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd90      	pop	{r4, r7, pc}
	...

0800c770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	4613      	mov	r3, r2
 800c77c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c77e:	2301      	movs	r3, #1
 800c780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c786:	4b1e      	ldr	r3, [pc, #120]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c788:	7b9b      	ldrb	r3, [r3, #14]
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d831      	bhi.n	800c7f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c790:	4b1b      	ldr	r3, [pc, #108]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c792:	7b9b      	ldrb	r3, [r3, #14]
 800c794:	b2db      	uxtb	r3, r3
 800c796:	461a      	mov	r2, r3
 800c798:	4b19      	ldr	r3, [pc, #100]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c79a:	2100      	movs	r1, #0
 800c79c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c79e:	4b18      	ldr	r3, [pc, #96]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7a0:	7b9b      	ldrb	r3, [r3, #14]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	4a16      	ldr	r2, [pc, #88]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c7ae:	4b14      	ldr	r3, [pc, #80]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7b0:	7b9b      	ldrb	r3, [r3, #14]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	4b12      	ldr	r3, [pc, #72]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7b8:	4413      	add	r3, r2
 800c7ba:	79fa      	ldrb	r2, [r7, #7]
 800c7bc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800c7be:	4b10      	ldr	r3, [pc, #64]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7c0:	7b9b      	ldrb	r3, [r3, #14]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	1c5a      	adds	r2, r3, #1
 800c7c6:	b2d1      	uxtb	r1, r2
 800c7c8:	4a0d      	ldr	r2, [pc, #52]	; (800c800 <FATFS_LinkDriverEx+0x90>)
 800c7ca:	7391      	strb	r1, [r2, #14]
 800c7cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7ce:	7dbb      	ldrb	r3, [r7, #22]
 800c7d0:	3330      	adds	r3, #48	; 0x30
 800c7d2:	b2da      	uxtb	r2, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	223a      	movs	r2, #58	; 0x3a
 800c7de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3302      	adds	r3, #2
 800c7e4:	222f      	movs	r2, #47	; 0x2f
 800c7e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3303      	adds	r3, #3
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	371c      	adds	r7, #28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bc80      	pop	{r7}
 800c7fe:	4770      	bx	lr
 800c800:	200000f8 	.word	0x200000f8

0800c804 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c80e:	2200      	movs	r2, #0
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff ffac 	bl	800c770 <FATFS_LinkDriverEx>
 800c818:	4603      	mov	r3, r0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800c822:	b480      	push	{r7}
 800c824:	b083      	sub	sp, #12
 800c826:	af00      	add	r7, sp, #0
 800c828:	4603      	mov	r3, r0
 800c82a:	71fb      	strb	r3, [r7, #7]
  return RES_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	bc80      	pop	{r7}
 800c836:	4770      	bx	lr

0800c838 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	73fb      	strb	r3, [r7, #15]
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4619      	mov	r1, r3
 800c84a:	4808      	ldr	r0, [pc, #32]	; (800c86c <USBH_status+0x34>)
 800c84c:	f7fb f8ae 	bl	80079ac <USBH_MSC_UnitIsReady>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <USBH_status+0x24>
  {
    res = RES_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	73fb      	strb	r3, [r7, #15]
 800c85a:	e001      	b.n	800c860 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	73fb      	strb	r3, [r7, #15]
  }
  
  return res;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20008bb4 	.word	0x20008bb4

0800c870 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b094      	sub	sp, #80	; 0x50
 800c874:	af02      	add	r7, sp, #8
 800c876:	60b9      	str	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
 800c87a:	603b      	str	r3, [r7, #0]
 800c87c:	4603      	mov	r3, r0
 800c87e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	f003 0303 	and.w	r3, r3, #3
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <USBH_read+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800c896:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c89a:	e02a      	b.n	800c8f2 <USBH_read+0x82>
#endif
  }
  else
  {
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 800c89c:	7bf9      	ldrb	r1, [r7, #15]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4815      	ldr	r0, [pc, #84]	; (800c8fc <USBH_read+0x8c>)
 800c8a8:	f7fb f8c9 	bl	8007a3e <USBH_MSC_Read>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800c8b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d103      	bne.n	800c8c2 <USBH_read+0x52>
  {
    res = RES_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c8c0:	e015      	b.n	800c8ee <USBH_read+0x7e>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800c8c2:	f107 0210 	add.w	r2, r7, #16
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	480c      	ldr	r0, [pc, #48]	; (800c8fc <USBH_read+0x8c>)
 800c8cc:	f7fb f893 	bl	80079f6 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800c8d0:	7f7b      	ldrb	r3, [r7, #29]
 800c8d2:	2b28      	cmp	r3, #40	; 0x28
 800c8d4:	d003      	beq.n	800c8de <USBH_read+0x6e>
 800c8d6:	2b3a      	cmp	r3, #58	; 0x3a
 800c8d8:	d001      	beq.n	800c8de <USBH_read+0x6e>
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	d103      	bne.n	800c8e6 <USBH_read+0x76>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE: 
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800c8e4:	e003      	b.n	800c8ee <USBH_read+0x7e>
      
    default:
      res = RES_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c8ec:	bf00      	nop
    }
  }
  
  return res;
 800c8ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3748      	adds	r7, #72	; 0x48
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20008bb4 	.word	0x20008bb4

0800c900 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b094      	sub	sp, #80	; 0x50
 800c904:	af02      	add	r7, sp, #8
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR; 
 800c910:	2301      	movs	r3, #1
 800c912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;  
 800c916:	2300      	movs	r3, #0
 800c918:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 0303 	and.w	r3, r3, #3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <USBH_write+0x2c>
      {
        break;
      }
    }
#else
    return res;
 800c926:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c92a:	e034      	b.n	800c996 <USBH_write+0x96>
#endif
  }
  else
  {
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800c92c:	7bf9      	ldrb	r1, [r7, #15]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	481a      	ldr	r0, [pc, #104]	; (800c9a0 <USBH_write+0xa0>)
 800c938:	f7fb f8ea 	bl	8007b10 <USBH_MSC_Write>
 800c93c:	4603      	mov	r3, r0
 800c93e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  }
  
  if(status == USBH_OK)
 800c942:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <USBH_write+0x52>
  {
    res = RES_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c950:	e01f      	b.n	800c992 <USBH_write+0x92>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 800c952:	f107 0210 	add.w	r2, r7, #16
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	4619      	mov	r1, r3
 800c95a:	4811      	ldr	r0, [pc, #68]	; (800c9a0 <USBH_write+0xa0>)
 800c95c:	f7fb f84b 	bl	80079f6 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 800c960:	7f7b      	ldrb	r3, [r7, #29]
 800c962:	2b27      	cmp	r3, #39	; 0x27
 800c964:	d009      	beq.n	800c97a <USBH_write+0x7a>
 800c966:	2b27      	cmp	r3, #39	; 0x27
 800c968:	dc02      	bgt.n	800c970 <USBH_write+0x70>
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d009      	beq.n	800c982 <USBH_write+0x82>
 800c96e:	e00c      	b.n	800c98a <USBH_write+0x8a>
 800c970:	2b28      	cmp	r3, #40	; 0x28
 800c972:	d006      	beq.n	800c982 <USBH_write+0x82>
 800c974:	2b3a      	cmp	r3, #58	; 0x3a
 800c976:	d004      	beq.n	800c982 <USBH_write+0x82>
 800c978:	e007      	b.n	800c98a <USBH_write+0x8a>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800c97a:	2302      	movs	r3, #2
 800c97c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c980:	e007      	b.n	800c992 <USBH_write+0x92>
      
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");      
      res = RES_NOTRDY;
 800c982:	2303      	movs	r3, #3
 800c984:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 800c988:	e003      	b.n	800c992 <USBH_write+0x92>
      
    default:
      res = RES_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c990:	bf00      	nop
    }
  }
  
  return res;   
 800c992:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c996:	4618      	mov	r0, r3
 800c998:	3748      	adds	r7, #72	; 0x48
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20008bb4 	.word	0x20008bb4

0800c9a4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b090      	sub	sp, #64	; 0x40
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	603a      	str	r2, [r7, #0]
 800c9ae:	71fb      	strb	r3, [r7, #7]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800c9ba:	79bb      	ldrb	r3, [r7, #6]
 800c9bc:	2b03      	cmp	r3, #3
 800c9be:	d850      	bhi.n	800ca62 <USBH_ioctl+0xbe>
 800c9c0:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <USBH_ioctl+0x24>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800c9d9 	.word	0x0800c9d9
 800c9cc:	0800c9e1 	.word	0x0800c9e1
 800c9d0:	0800ca0b 	.word	0x0800ca0b
 800c9d4:	0800ca37 	.word	0x0800ca37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC: 
    res = RES_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c9de:	e043      	b.n	800ca68 <USBH_ioctl+0xc4>
    
  /* Get number of sectors on the disk (DWORD) */  
  case GET_SECTOR_COUNT : 
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800c9e0:	f107 0208 	add.w	r2, r7, #8
 800c9e4:	79fb      	ldrb	r3, [r7, #7]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4822      	ldr	r0, [pc, #136]	; (800ca74 <USBH_ioctl+0xd0>)
 800c9ea:	f7fb f804 	bl	80079f6 <USBH_MSC_GetLUNInfo>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d106      	bne.n	800ca02 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ca00:	e032      	b.n	800ca68 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca08:	e02e      	b.n	800ca68 <USBH_ioctl+0xc4>
    
  /* Get R/W sector size (WORD) */  
  case GET_SECTOR_SIZE :	
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800ca0a:	f107 0208 	add.w	r2, r7, #8
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	4619      	mov	r1, r3
 800ca12:	4818      	ldr	r0, [pc, #96]	; (800ca74 <USBH_ioctl+0xd0>)
 800ca14:	f7fa ffef 	bl	80079f6 <USBH_MSC_GetLUNInfo>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d107      	bne.n	800ca2e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800ca1e:	8a3b      	ldrh	r3, [r7, #16]
 800ca20:	461a      	mov	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ca2c:	e01c      	b.n	800ca68 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca34:	e018      	b.n	800ca68 <USBH_ioctl+0xc4>
    
    /* Get erase block size in unit of sector (DWORD) */ 
  case GET_BLOCK_SIZE : 
    
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800ca36:	f107 0208 	add.w	r2, r7, #8
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	480d      	ldr	r0, [pc, #52]	; (800ca74 <USBH_ioctl+0xd0>)
 800ca40:	f7fa ffd9 	bl	80079f6 <USBH_MSC_GetLUNInfo>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <USBH_ioctl+0xb6>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800ca4a:	8a3b      	ldrh	r3, [r7, #16]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800ca58:	e006      	b.n	800ca68 <USBH_ioctl+0xc4>
      res = RES_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800ca60:	e002      	b.n	800ca68 <USBH_ioctl+0xc4>
    
  default:
    res = RES_PARERR;
 800ca62:	2304      	movs	r3, #4
 800ca64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  return res;
 800ca68:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3740      	adds	r7, #64	; 0x40
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20008bb4 	.word	0x20008bb4

0800ca78 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800ca82:	88fb      	ldrh	r3, [r7, #6]
 800ca84:	ba5b      	rev16	r3, r3
 800ca86:	b29b      	uxth	r3, r3
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bc80      	pop	{r7}
 800ca90:	4770      	bx	lr

0800ca92 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	061a      	lsls	r2, r3, #24
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	021b      	lsls	r3, r3, #8
 800caa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caa6:	431a      	orrs	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0a1b      	lsrs	r3, r3, #8
 800caac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cab0:	431a      	orrs	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	0e1b      	lsrs	r3, r3, #24
 800cab6:	4313      	orrs	r3, r2
}
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bc80      	pop	{r7}
 800cac0:	4770      	bx	lr

0800cac2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b082      	sub	sp, #8
 800cac6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800cacc:	f000 f8a6 	bl	800cc1c <mem_init>
  memp_init();
 800cad0:	f000 fb36 	bl	800d140 <memp_init>
  pbuf_init();
  netif_init();
 800cad4:	f000 fbee 	bl	800d2b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cad8:	f005 ffac 	bl	8012a34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cadc:	f001 fb52 	bl	800e184 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800cae0:	f005 fedc 	bl	801289c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800caf4:	4b40      	ldr	r3, [pc, #256]	; (800cbf8 <plug_holes+0x10c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d206      	bcs.n	800cb0c <plug_holes+0x20>
 800cafe:	4b3f      	ldr	r3, [pc, #252]	; (800cbfc <plug_holes+0x110>)
 800cb00:	f240 125d 	movw	r2, #349	; 0x15d
 800cb04:	493e      	ldr	r1, [pc, #248]	; (800cc00 <plug_holes+0x114>)
 800cb06:	483f      	ldr	r0, [pc, #252]	; (800cc04 <plug_holes+0x118>)
 800cb08:	f00a ffe8 	bl	8017adc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cb0c:	4b3e      	ldr	r3, [pc, #248]	; (800cc08 <plug_holes+0x11c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d306      	bcc.n	800cb24 <plug_holes+0x38>
 800cb16:	4b39      	ldr	r3, [pc, #228]	; (800cbfc <plug_holes+0x110>)
 800cb18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cb1c:	493b      	ldr	r1, [pc, #236]	; (800cc0c <plug_holes+0x120>)
 800cb1e:	4839      	ldr	r0, [pc, #228]	; (800cc04 <plug_holes+0x118>)
 800cb20:	f00a ffdc 	bl	8017adc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	791b      	ldrb	r3, [r3, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d006      	beq.n	800cb3a <plug_holes+0x4e>
 800cb2c:	4b33      	ldr	r3, [pc, #204]	; (800cbfc <plug_holes+0x110>)
 800cb2e:	f240 125f 	movw	r2, #351	; 0x15f
 800cb32:	4937      	ldr	r1, [pc, #220]	; (800cc10 <plug_holes+0x124>)
 800cb34:	4833      	ldr	r0, [pc, #204]	; (800cc04 <plug_holes+0x118>)
 800cb36:	f00a ffd1 	bl	8017adc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb42:	d906      	bls.n	800cb52 <plug_holes+0x66>
 800cb44:	4b2d      	ldr	r3, [pc, #180]	; (800cbfc <plug_holes+0x110>)
 800cb46:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800cb4a:	4932      	ldr	r1, [pc, #200]	; (800cc14 <plug_holes+0x128>)
 800cb4c:	482d      	ldr	r0, [pc, #180]	; (800cc04 <plug_holes+0x118>)
 800cb4e:	f00a ffc5 	bl	8017adc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800cb52:	4b29      	ldr	r3, [pc, #164]	; (800cbf8 <plug_holes+0x10c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	8812      	ldrh	r2, [r2, #0]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d01f      	beq.n	800cba6 <plug_holes+0xba>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	791b      	ldrb	r3, [r3, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d11b      	bne.n	800cba6 <plug_holes+0xba>
 800cb6e:	4b26      	ldr	r3, [pc, #152]	; (800cc08 <plug_holes+0x11c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d016      	beq.n	800cba6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cb78:	4b27      	ldr	r3, [pc, #156]	; (800cc18 <plug_holes+0x12c>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d102      	bne.n	800cb88 <plug_holes+0x9c>
      lfree = mem;
 800cb82:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <plug_holes+0x12c>)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	881a      	ldrh	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a19      	ldr	r2, [pc, #100]	; (800cbf8 <plug_holes+0x10c>)
 800cb94:	6812      	ldr	r2, [r2, #0]
 800cb96:	1a99      	subs	r1, r3, r2
 800cb98:	4b17      	ldr	r3, [pc, #92]	; (800cbf8 <plug_holes+0x10c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	8812      	ldrh	r2, [r2, #0]
 800cba0:	4413      	add	r3, r2
 800cba2:	b28a      	uxth	r2, r1
 800cba4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800cba6:	4b14      	ldr	r3, [pc, #80]	; (800cbf8 <plug_holes+0x10c>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	8852      	ldrh	r2, [r2, #2]
 800cbae:	4413      	add	r3, r2
 800cbb0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cbb2:	68ba      	ldr	r2, [r7, #8]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d01a      	beq.n	800cbf0 <plug_holes+0x104>
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	791b      	ldrb	r3, [r3, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d116      	bne.n	800cbf0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cbc2:	4b15      	ldr	r3, [pc, #84]	; (800cc18 <plug_holes+0x12c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d102      	bne.n	800cbd2 <plug_holes+0xe6>
      lfree = pmem;
 800cbcc:	4a12      	ldr	r2, [pc, #72]	; (800cc18 <plug_holes+0x12c>)
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	881a      	ldrh	r2, [r3, #0]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	4a06      	ldr	r2, [pc, #24]	; (800cbf8 <plug_holes+0x10c>)
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	1a99      	subs	r1, r3, r2
 800cbe2:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <plug_holes+0x10c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	8812      	ldrh	r2, [r2, #0]
 800cbea:	4413      	add	r3, r2
 800cbec:	b28a      	uxth	r2, r1
 800cbee:	805a      	strh	r2, [r3, #2]
  }
}
 800cbf0:	bf00      	nop
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20000108 	.word	0x20000108
 800cbfc:	08018a18 	.word	0x08018a18
 800cc00:	08018a48 	.word	0x08018a48
 800cc04:	08018a60 	.word	0x08018a60
 800cc08:	2000010c 	.word	0x2000010c
 800cc0c:	08018a88 	.word	0x08018a88
 800cc10:	08018aa4 	.word	0x08018aa4
 800cc14:	08018ac0 	.word	0x08018ac0
 800cc18:	20000110 	.word	0x20000110

0800cc1c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cc22:	4b18      	ldr	r3, [pc, #96]	; (800cc84 <mem_init+0x68>)
 800cc24:	3303      	adds	r3, #3
 800cc26:	f023 0303 	bic.w	r3, r3, #3
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	4b16      	ldr	r3, [pc, #88]	; (800cc88 <mem_init+0x6c>)
 800cc2e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cc30:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <mem_init+0x6c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cc3c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	; (800cc88 <mem_init+0x6c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800cc52:	4a0e      	ldr	r2, [pc, #56]	; (800cc8c <mem_init+0x70>)
 800cc54:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <mem_init+0x70>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cc5e:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <mem_init+0x70>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cc66:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cc68:	4b08      	ldr	r3, [pc, #32]	; (800cc8c <mem_init+0x70>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cc70:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <mem_init+0x6c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <mem_init+0x74>)
 800cc78:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cc7a:	bf00      	nop
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bc80      	pop	{r7}
 800cc82:	4770      	bx	lr
 800cc84:	200057a8 	.word	0x200057a8
 800cc88:	20000108 	.word	0x20000108
 800cc8c:	2000010c 	.word	0x2000010c
 800cc90:	20000110 	.word	0x20000110

0800cc94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d043      	beq.n	800cd2a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f003 0303 	and.w	r3, r3, #3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d006      	beq.n	800ccba <mem_free+0x26>
 800ccac:	4b22      	ldr	r3, [pc, #136]	; (800cd38 <mem_free+0xa4>)
 800ccae:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800ccb2:	4922      	ldr	r1, [pc, #136]	; (800cd3c <mem_free+0xa8>)
 800ccb4:	4822      	ldr	r0, [pc, #136]	; (800cd40 <mem_free+0xac>)
 800ccb6:	f00a ff11 	bl	8017adc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ccba:	4b22      	ldr	r3, [pc, #136]	; (800cd44 <mem_free+0xb0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d304      	bcc.n	800ccce <mem_free+0x3a>
 800ccc4:	4b20      	ldr	r3, [pc, #128]	; (800cd48 <mem_free+0xb4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d306      	bcc.n	800ccdc <mem_free+0x48>
 800ccce:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <mem_free+0xa4>)
 800ccd0:	f240 12af 	movw	r2, #431	; 0x1af
 800ccd4:	491d      	ldr	r1, [pc, #116]	; (800cd4c <mem_free+0xb8>)
 800ccd6:	481a      	ldr	r0, [pc, #104]	; (800cd40 <mem_free+0xac>)
 800ccd8:	f00a ff00 	bl	8017adc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ccdc:	4b19      	ldr	r3, [pc, #100]	; (800cd44 <mem_free+0xb0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d323      	bcc.n	800cd2e <mem_free+0x9a>
 800cce6:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <mem_free+0xb4>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d21e      	bcs.n	800cd2e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3b08      	subs	r3, #8
 800ccf4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	791b      	ldrb	r3, [r3, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d106      	bne.n	800cd0c <mem_free+0x78>
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <mem_free+0xa4>)
 800cd00:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800cd04:	4912      	ldr	r1, [pc, #72]	; (800cd50 <mem_free+0xbc>)
 800cd06:	480e      	ldr	r0, [pc, #56]	; (800cd40 <mem_free+0xac>)
 800cd08:	f00a fee8 	bl	8017adc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <mem_free+0xc0>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d202      	bcs.n	800cd22 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd1c:	4a0d      	ldr	r2, [pc, #52]	; (800cd54 <mem_free+0xc0>)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff fee2 	bl	800caec <plug_holes>
 800cd28:	e002      	b.n	800cd30 <mem_free+0x9c>
    return;
 800cd2a:	bf00      	nop
 800cd2c:	e000      	b.n	800cd30 <mem_free+0x9c>
    return;
 800cd2e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	08018a18 	.word	0x08018a18
 800cd3c:	08018aec 	.word	0x08018aec
 800cd40:	08018a60 	.word	0x08018a60
 800cd44:	20000108 	.word	0x20000108
 800cd48:	2000010c 	.word	0x2000010c
 800cd4c:	08018b10 	.word	0x08018b10
 800cd50:	08018b28 	.word	0x08018b28
 800cd54:	20000110 	.word	0x20000110

0800cd58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800cd64:	887b      	ldrh	r3, [r7, #2]
 800cd66:	3303      	adds	r3, #3
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800cd70:	887b      	ldrh	r3, [r7, #2]
 800cd72:	2b0b      	cmp	r3, #11
 800cd74:	d801      	bhi.n	800cd7a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cd76:	230c      	movs	r3, #12
 800cd78:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800cd7a:	887b      	ldrh	r3, [r7, #2]
 800cd7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd80:	d901      	bls.n	800cd86 <mem_trim+0x2e>
    return NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e0b1      	b.n	800ceea <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cd86:	4b5b      	ldr	r3, [pc, #364]	; (800cef4 <mem_trim+0x19c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d304      	bcc.n	800cd9a <mem_trim+0x42>
 800cd90:	4b59      	ldr	r3, [pc, #356]	; (800cef8 <mem_trim+0x1a0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d306      	bcc.n	800cda8 <mem_trim+0x50>
 800cd9a:	4b58      	ldr	r3, [pc, #352]	; (800cefc <mem_trim+0x1a4>)
 800cd9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cda0:	4957      	ldr	r1, [pc, #348]	; (800cf00 <mem_trim+0x1a8>)
 800cda2:	4858      	ldr	r0, [pc, #352]	; (800cf04 <mem_trim+0x1ac>)
 800cda4:	f00a fe9a 	bl	8017adc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cda8:	4b52      	ldr	r3, [pc, #328]	; (800cef4 <mem_trim+0x19c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d304      	bcc.n	800cdbc <mem_trim+0x64>
 800cdb2:	4b51      	ldr	r3, [pc, #324]	; (800cef8 <mem_trim+0x1a0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d301      	bcc.n	800cdc0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	e094      	b.n	800ceea <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3b08      	subs	r3, #8
 800cdc4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	4a4a      	ldr	r2, [pc, #296]	; (800cef4 <mem_trim+0x19c>)
 800cdca:	6812      	ldr	r2, [r2, #0]
 800cdcc:	1a9b      	subs	r3, r3, r2
 800cdce:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	881a      	ldrh	r2, [r3, #0]
 800cdd4:	8a7b      	ldrh	r3, [r7, #18]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	3b08      	subs	r3, #8
 800cddc:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cdde:	887a      	ldrh	r2, [r7, #2]
 800cde0:	8a3b      	ldrh	r3, [r7, #16]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d906      	bls.n	800cdf4 <mem_trim+0x9c>
 800cde6:	4b45      	ldr	r3, [pc, #276]	; (800cefc <mem_trim+0x1a4>)
 800cde8:	f240 2206 	movw	r2, #518	; 0x206
 800cdec:	4946      	ldr	r1, [pc, #280]	; (800cf08 <mem_trim+0x1b0>)
 800cdee:	4845      	ldr	r0, [pc, #276]	; (800cf04 <mem_trim+0x1ac>)
 800cdf0:	f00a fe74 	bl	8017adc <iprintf>
  if (newsize > size) {
 800cdf4:	887a      	ldrh	r2, [r7, #2]
 800cdf6:	8a3b      	ldrh	r3, [r7, #16]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d901      	bls.n	800ce00 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e074      	b.n	800ceea <mem_trim+0x192>
  }
  if (newsize == size) {
 800ce00:	887a      	ldrh	r2, [r7, #2]
 800ce02:	8a3b      	ldrh	r3, [r7, #16]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d101      	bne.n	800ce0c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	e06e      	b.n	800ceea <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ce0c:	4b39      	ldr	r3, [pc, #228]	; (800cef4 <mem_trim+0x19c>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	697a      	ldr	r2, [r7, #20]
 800ce12:	8812      	ldrh	r2, [r2, #0]
 800ce14:	4413      	add	r3, r2
 800ce16:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	791b      	ldrb	r3, [r3, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d131      	bne.n	800ce84 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ce26:	8a7a      	ldrh	r2, [r7, #18]
 800ce28:	887b      	ldrh	r3, [r7, #2]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	3308      	adds	r3, #8
 800ce30:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800ce32:	4b36      	ldr	r3, [pc, #216]	; (800cf0c <mem_trim+0x1b4>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d105      	bne.n	800ce48 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ce3c:	4b2d      	ldr	r3, [pc, #180]	; (800cef4 <mem_trim+0x19c>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	897b      	ldrh	r3, [r7, #10]
 800ce42:	4413      	add	r3, r2
 800ce44:	4a31      	ldr	r2, [pc, #196]	; (800cf0c <mem_trim+0x1b4>)
 800ce46:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ce48:	4b2a      	ldr	r3, [pc, #168]	; (800cef4 <mem_trim+0x19c>)
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	897b      	ldrh	r3, [r7, #10]
 800ce4e:	4413      	add	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	893a      	ldrh	r2, [r7, #8]
 800ce5c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8a7a      	ldrh	r2, [r7, #18]
 800ce62:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	897a      	ldrh	r2, [r7, #10]
 800ce68:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce72:	d039      	beq.n	800cee8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ce74:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <mem_trim+0x19c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	8812      	ldrh	r2, [r2, #0]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	897a      	ldrh	r2, [r7, #10]
 800ce80:	805a      	strh	r2, [r3, #2]
 800ce82:	e031      	b.n	800cee8 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ce84:	887b      	ldrh	r3, [r7, #2]
 800ce86:	f103 0214 	add.w	r2, r3, #20
 800ce8a:	8a3b      	ldrh	r3, [r7, #16]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d82b      	bhi.n	800cee8 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ce90:	8a7a      	ldrh	r2, [r7, #18]
 800ce92:	887b      	ldrh	r3, [r7, #2]
 800ce94:	4413      	add	r3, r2
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	3308      	adds	r3, #8
 800ce9a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ce9c:	4b15      	ldr	r3, [pc, #84]	; (800cef4 <mem_trim+0x19c>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	897b      	ldrh	r3, [r7, #10]
 800cea2:	4413      	add	r3, r2
 800cea4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800cea6:	4b19      	ldr	r3, [pc, #100]	; (800cf0c <mem_trim+0x1b4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d202      	bcs.n	800ceb6 <mem_trim+0x15e>
      lfree = mem2;
 800ceb0:	4a16      	ldr	r2, [pc, #88]	; (800cf0c <mem_trim+0x1b4>)
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	881a      	ldrh	r2, [r3, #0]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	8a7a      	ldrh	r2, [r7, #18]
 800cec8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	897a      	ldrh	r2, [r7, #10]
 800cece:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ced8:	d006      	beq.n	800cee8 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ceda:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <mem_trim+0x19c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68fa      	ldr	r2, [r7, #12]
 800cee0:	8812      	ldrh	r2, [r2, #0]
 800cee2:	4413      	add	r3, r2
 800cee4:	897a      	ldrh	r2, [r7, #10]
 800cee6:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cee8:	687b      	ldr	r3, [r7, #4]
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20000108 	.word	0x20000108
 800cef8:	2000010c 	.word	0x2000010c
 800cefc:	08018a18 	.word	0x08018a18
 800cf00:	08018b3c 	.word	0x08018b3c
 800cf04:	08018a60 	.word	0x08018a60
 800cf08:	08018b54 	.word	0x08018b54
 800cf0c:	20000110 	.word	0x20000110

0800cf10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800cf1a:	88fb      	ldrh	r3, [r7, #6]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <mem_malloc+0x14>
    return NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	e0c8      	b.n	800d0b6 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800cf24:	88fb      	ldrh	r3, [r7, #6]
 800cf26:	3303      	adds	r3, #3
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	f023 0303 	bic.w	r3, r3, #3
 800cf2e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800cf30:	88fb      	ldrh	r3, [r7, #6]
 800cf32:	2b0b      	cmp	r3, #11
 800cf34:	d801      	bhi.n	800cf3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cf36:	230c      	movs	r3, #12
 800cf38:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800cf3a:	88fb      	ldrh	r3, [r7, #6]
 800cf3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf40:	d901      	bls.n	800cf46 <mem_malloc+0x36>
    return NULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e0b7      	b.n	800d0b6 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800cf46:	4b5e      	ldr	r3, [pc, #376]	; (800d0c0 <mem_malloc+0x1b0>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	4b5d      	ldr	r3, [pc, #372]	; (800d0c4 <mem_malloc+0x1b4>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	83fb      	strh	r3, [r7, #30]
 800cf54:	e0a7      	b.n	800d0a6 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800cf56:	4b5b      	ldr	r3, [pc, #364]	; (800d0c4 <mem_malloc+0x1b4>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	8bfb      	ldrh	r3, [r7, #30]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	791b      	ldrb	r3, [r3, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f040 8098 	bne.w	800d09a <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	8bfb      	ldrh	r3, [r7, #30]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	f1a3 0208 	sub.w	r2, r3, #8
 800cf78:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	f0c0 808d 	bcc.w	800d09a <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	8bfb      	ldrh	r3, [r7, #30]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	f1a3 0208 	sub.w	r2, r3, #8
 800cf8e:	88fb      	ldrh	r3, [r7, #6]
 800cf90:	3314      	adds	r3, #20
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d327      	bcc.n	800cfe6 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800cf96:	8bfa      	ldrh	r2, [r7, #30]
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800cfa2:	4b48      	ldr	r3, [pc, #288]	; (800d0c4 <mem_malloc+0x1b4>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	8a7b      	ldrh	r3, [r7, #18]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	881a      	ldrh	r2, [r3, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	8bfa      	ldrh	r2, [r7, #30]
 800cfbe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	8a7a      	ldrh	r2, [r7, #18]
 800cfc4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfd4:	d00a      	beq.n	800cfec <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800cfd6:	4b3b      	ldr	r3, [pc, #236]	; (800d0c4 <mem_malloc+0x1b4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	8812      	ldrh	r2, [r2, #0]
 800cfde:	4413      	add	r3, r2
 800cfe0:	8a7a      	ldrh	r2, [r7, #18]
 800cfe2:	805a      	strh	r2, [r3, #2]
 800cfe4:	e002      	b.n	800cfec <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cfec:	4b34      	ldr	r3, [pc, #208]	; (800d0c0 <mem_malloc+0x1b0>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d127      	bne.n	800d046 <mem_malloc+0x136>
          struct mem *cur = lfree;
 800cff6:	4b32      	ldr	r3, [pc, #200]	; (800d0c0 <mem_malloc+0x1b0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cffc:	e005      	b.n	800d00a <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800cffe:	4b31      	ldr	r3, [pc, #196]	; (800d0c4 <mem_malloc+0x1b4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	69ba      	ldr	r2, [r7, #24]
 800d004:	8812      	ldrh	r2, [r2, #0]
 800d006:	4413      	add	r3, r2
 800d008:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d00a:	69bb      	ldr	r3, [r7, #24]
 800d00c:	791b      	ldrb	r3, [r3, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d004      	beq.n	800d01c <mem_malloc+0x10c>
 800d012:	4b2d      	ldr	r3, [pc, #180]	; (800d0c8 <mem_malloc+0x1b8>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d1f0      	bne.n	800cffe <mem_malloc+0xee>
          }
          lfree = cur;
 800d01c:	4a28      	ldr	r2, [pc, #160]	; (800d0c0 <mem_malloc+0x1b0>)
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d022:	4b27      	ldr	r3, [pc, #156]	; (800d0c0 <mem_malloc+0x1b0>)
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	4b28      	ldr	r3, [pc, #160]	; (800d0c8 <mem_malloc+0x1b8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d00b      	beq.n	800d046 <mem_malloc+0x136>
 800d02e:	4b24      	ldr	r3, [pc, #144]	; (800d0c0 <mem_malloc+0x1b0>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	791b      	ldrb	r3, [r3, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d006      	beq.n	800d046 <mem_malloc+0x136>
 800d038:	4b24      	ldr	r3, [pc, #144]	; (800d0cc <mem_malloc+0x1bc>)
 800d03a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d03e:	4924      	ldr	r1, [pc, #144]	; (800d0d0 <mem_malloc+0x1c0>)
 800d040:	4824      	ldr	r0, [pc, #144]	; (800d0d4 <mem_malloc+0x1c4>)
 800d042:	f00a fd4b 	bl	8017adc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d046:	88fa      	ldrh	r2, [r7, #6]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	4413      	add	r3, r2
 800d04c:	3308      	adds	r3, #8
 800d04e:	4a1e      	ldr	r2, [pc, #120]	; (800d0c8 <mem_malloc+0x1b8>)
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	4293      	cmp	r3, r2
 800d054:	d906      	bls.n	800d064 <mem_malloc+0x154>
 800d056:	4b1d      	ldr	r3, [pc, #116]	; (800d0cc <mem_malloc+0x1bc>)
 800d058:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d05c:	491e      	ldr	r1, [pc, #120]	; (800d0d8 <mem_malloc+0x1c8>)
 800d05e:	481d      	ldr	r0, [pc, #116]	; (800d0d4 <mem_malloc+0x1c4>)
 800d060:	f00a fd3c 	bl	8017adc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	f003 0303 	and.w	r3, r3, #3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d006      	beq.n	800d07c <mem_malloc+0x16c>
 800d06e:	4b17      	ldr	r3, [pc, #92]	; (800d0cc <mem_malloc+0x1bc>)
 800d070:	f240 22d6 	movw	r2, #726	; 0x2d6
 800d074:	4919      	ldr	r1, [pc, #100]	; (800d0dc <mem_malloc+0x1cc>)
 800d076:	4817      	ldr	r0, [pc, #92]	; (800d0d4 <mem_malloc+0x1c4>)
 800d078:	f00a fd30 	bl	8017adc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	f003 0303 	and.w	r3, r3, #3
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <mem_malloc+0x184>
 800d086:	4b11      	ldr	r3, [pc, #68]	; (800d0cc <mem_malloc+0x1bc>)
 800d088:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800d08c:	4914      	ldr	r1, [pc, #80]	; (800d0e0 <mem_malloc+0x1d0>)
 800d08e:	4811      	ldr	r0, [pc, #68]	; (800d0d4 <mem_malloc+0x1c4>)
 800d090:	f00a fd24 	bl	8017adc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	3308      	adds	r3, #8
 800d098:	e00d      	b.n	800d0b6 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800d09a:	4b0a      	ldr	r3, [pc, #40]	; (800d0c4 <mem_malloc+0x1b4>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	8bfb      	ldrh	r3, [r7, #30]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800d0a6:	8bfa      	ldrh	r2, [r7, #30]
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	f4ff af51 	bcc.w	800cf56 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3720      	adds	r7, #32
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20000110 	.word	0x20000110
 800d0c4:	20000108 	.word	0x20000108
 800d0c8:	2000010c 	.word	0x2000010c
 800d0cc:	08018a18 	.word	0x08018a18
 800d0d0:	08018b74 	.word	0x08018b74
 800d0d4:	08018a60 	.word	0x08018a60
 800d0d8:	08018b90 	.word	0x08018b90
 800d0dc:	08018bc0 	.word	0x08018bc0
 800d0e0:	08018bf0 	.word	0x08018bf0

0800d0e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	3303      	adds	r3, #3
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d100:	2300      	movs	r3, #0
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	e011      	b.n	800d12a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	461a      	mov	r2, r3
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	4413      	add	r3, r2
 800d122:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3301      	adds	r3, #1
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	885b      	ldrh	r3, [r3, #2]
 800d12e:	461a      	mov	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4293      	cmp	r3, r2
 800d134:	dbe7      	blt.n	800d106 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d136:	bf00      	nop
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d146:	2300      	movs	r3, #0
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	e009      	b.n	800d160 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d14c:	88fb      	ldrh	r3, [r7, #6]
 800d14e:	4a08      	ldr	r2, [pc, #32]	; (800d170 <memp_init+0x30>)
 800d150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d154:	4618      	mov	r0, r3
 800d156:	f7ff ffc5 	bl	800d0e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d15a:	88fb      	ldrh	r3, [r7, #6]
 800d15c:	3301      	adds	r3, #1
 800d15e:	80fb      	strh	r3, [r7, #6]
 800d160:	88fb      	ldrh	r3, [r7, #6]
 800d162:	2b08      	cmp	r3, #8
 800d164:	d9f2      	bls.n	800d14c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d166:	bf00      	nop
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	0801ac94 	.word	0x0801ac94

0800d174 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d012      	beq.n	800d1b0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f003 0303 	and.w	r3, r3, #3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d006      	beq.n	800d1ac <do_memp_malloc_pool+0x38>
 800d19e:	4b07      	ldr	r3, [pc, #28]	; (800d1bc <do_memp_malloc_pool+0x48>)
 800d1a0:	f240 1249 	movw	r2, #329	; 0x149
 800d1a4:	4906      	ldr	r1, [pc, #24]	; (800d1c0 <do_memp_malloc_pool+0x4c>)
 800d1a6:	4807      	ldr	r0, [pc, #28]	; (800d1c4 <do_memp_malloc_pool+0x50>)
 800d1a8:	f00a fc98 	bl	8017adc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	e000      	b.n	800d1b2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	08018c14 	.word	0x08018c14
 800d1c0:	08018c44 	.word	0x08018c44
 800d1c4:	08018c68 	.word	0x08018c68

0800d1c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d1d2:	79fb      	ldrb	r3, [r7, #7]
 800d1d4:	2b08      	cmp	r3, #8
 800d1d6:	d908      	bls.n	800d1ea <memp_malloc+0x22>
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <memp_malloc+0x3c>)
 800d1da:	f240 1287 	movw	r2, #391	; 0x187
 800d1de:	490a      	ldr	r1, [pc, #40]	; (800d208 <memp_malloc+0x40>)
 800d1e0:	480a      	ldr	r0, [pc, #40]	; (800d20c <memp_malloc+0x44>)
 800d1e2:	f00a fc7b 	bl	8017adc <iprintf>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e008      	b.n	800d1fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	4a08      	ldr	r2, [pc, #32]	; (800d210 <memp_malloc+0x48>)
 800d1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff ffbe 	bl	800d174 <do_memp_malloc_pool>
 800d1f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	08018c14 	.word	0x08018c14
 800d208:	08018ca4 	.word	0x08018ca4
 800d20c:	08018c68 	.word	0x08018c68
 800d210:	0801ac94 	.word	0x0801ac94

0800d214 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <do_memp_free_pool+0x22>
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <do_memp_free_pool+0x40>)
 800d22a:	f240 129d 	movw	r2, #413	; 0x19d
 800d22e:	490a      	ldr	r1, [pc, #40]	; (800d258 <do_memp_free_pool+0x44>)
 800d230:	480a      	ldr	r0, [pc, #40]	; (800d25c <do_memp_free_pool+0x48>)
 800d232:	f00a fc53 	bl	8017adc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08018c14 	.word	0x08018c14
 800d258:	08018cc4 	.word	0x08018cc4
 800d25c:	08018c68 	.word	0x08018c68

0800d260 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	6039      	str	r1, [r7, #0]
 800d26a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d26c:	79fb      	ldrb	r3, [r7, #7]
 800d26e:	2b08      	cmp	r3, #8
 800d270:	d907      	bls.n	800d282 <memp_free+0x22>
 800d272:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <memp_free+0x44>)
 800d274:	f240 12db 	movw	r2, #475	; 0x1db
 800d278:	490b      	ldr	r1, [pc, #44]	; (800d2a8 <memp_free+0x48>)
 800d27a:	480c      	ldr	r0, [pc, #48]	; (800d2ac <memp_free+0x4c>)
 800d27c:	f00a fc2e 	bl	8017adc <iprintf>
 800d280:	e00c      	b.n	800d29c <memp_free+0x3c>

  if (mem == NULL) {
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d008      	beq.n	800d29a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	4a09      	ldr	r2, [pc, #36]	; (800d2b0 <memp_free+0x50>)
 800d28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff ffbe 	bl	800d214 <do_memp_free_pool>
 800d298:	e000      	b.n	800d29c <memp_free+0x3c>
    return;
 800d29a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d29c:	3708      	adds	r7, #8
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08018c14 	.word	0x08018c14
 800d2a8:	08018ce4 	.word	0x08018ce4
 800d2ac:	08018c68 	.word	0x08018c68
 800d2b0:	0801ac94 	.word	0x0801ac94

0800d2b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d2b8:	bf00      	nop
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bc80      	pop	{r7}
 800d2be:	4770      	bx	lr

0800d2c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d105      	bne.n	800d2e0 <netif_add+0x20>
 800d2d4:	4b24      	ldr	r3, [pc, #144]	; (800d368 <netif_add+0xa8>)
 800d2d6:	22fb      	movs	r2, #251	; 0xfb
 800d2d8:	4924      	ldr	r1, [pc, #144]	; (800d36c <netif_add+0xac>)
 800d2da:	4825      	ldr	r0, [pc, #148]	; (800d370 <netif_add+0xb0>)
 800d2dc:	f00a fbfe 	bl	8017adc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3324      	adds	r3, #36	; 0x24
 800d2fe:	2204      	movs	r2, #4
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f00a fb3c 	bl	8017980 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2203      	movs	r2, #3
 800d30c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	69ba      	ldr	r2, [r7, #24]
 800d31a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800d31c:	4b15      	ldr	r3, [pc, #84]	; (800d374 <netif_add+0xb4>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	1c5a      	adds	r2, r3, #1
 800d322:	b2d1      	uxtb	r1, r2
 800d324:	4a13      	ldr	r2, [pc, #76]	; (800d374 <netif_add+0xb4>)
 800d326:	7011      	strb	r1, [r2, #0]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6a3a      	ldr	r2, [r7, #32]
 800d332:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	68f8      	ldr	r0, [r7, #12]
 800d33c:	f000 f81e 	bl	800d37c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	4798      	blx	r3
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <netif_add+0x90>
    return NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	e007      	b.n	800d360 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <netif_add+0xb8>)
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d358:	4a07      	ldr	r2, [pc, #28]	; (800d378 <netif_add+0xb8>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800d35e:	68fb      	ldr	r3, [r7, #12]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	08018d00 	.word	0x08018d00
 800d36c:	08018d34 	.word	0x08018d34
 800d370:	08018d4c 	.word	0x08018d4c
 800d374:	20000138 	.word	0x20000138
 800d378:	20008b60 	.word	0x20008b60

0800d37c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d003      	beq.n	800d398 <netif_set_addr+0x1c>
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10c      	bne.n	800d3b2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800d398:	68b9      	ldr	r1, [r7, #8]
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f000 f81a 	bl	800d3d4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 f861 	bl	800d46a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f84a 	bl	800d444 <netif_set_gw>
 800d3b0:	e00b      	b.n	800d3ca <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800d3b2:	6879      	ldr	r1, [r7, #4]
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f000 f858 	bl	800d46a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f000 f841 	bl	800d444 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 f805 	bl	800d3d4 <netif_set_ipaddr>
  }
}
 800d3ca:	bf00      	nop
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
	...

0800d3d4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <netif_set_ipaddr+0x18>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	e002      	b.n	800d3f2 <netif_set_ipaddr+0x1e>
 800d3ec:	4b14      	ldr	r3, [pc, #80]	; (800d440 <netif_set_ipaddr+0x6c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d01c      	beq.n	800d438 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3304      	adds	r3, #4
 800d402:	f107 020c 	add.w	r2, r7, #12
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f002 f845 	bl	800f498 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3304      	adds	r3, #4
 800d412:	f107 020c 	add.w	r2, r7, #12
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f005 fe63 	bl	80130e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <netif_set_ipaddr+0x56>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	e000      	b.n	800d42c <netif_set_ipaddr+0x58>
 800d42a:	2300      	movs	r3, #0
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d430:	2101      	movs	r1, #1
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f85d 	bl	800d4f2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800d438:	bf00      	nop
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	0801ad08 	.word	0x0801ad08

0800d444 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <netif_set_gw+0x16>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	e000      	b.n	800d45c <netif_set_gw+0x18>
 800d45a:	2300      	movs	r3, #0
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	bc80      	pop	{r7}
 800d468:	4770      	bx	lr

0800d46a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b083      	sub	sp, #12
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d002      	beq.n	800d480 <netif_set_netmask+0x16>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	e000      	b.n	800d482 <netif_set_netmask+0x18>
 800d480:	2300      	movs	r3, #0
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800d486:	bf00      	nop
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bc80      	pop	{r7}
 800d48e:	4770      	bx	lr

0800d490 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d498:	4a03      	ldr	r2, [pc, #12]	; (800d4a8 <netif_set_default+0x18>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bc80      	pop	{r7}
 800d4a6:	4770      	bx	lr
 800d4a8:	20008b64 	.word	0x20008b64

0800d4ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d113      	bne.n	800d4ea <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d4c8:	f043 0301 	orr.w	r3, r3, #1
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d4da:	f003 0304 	and.w	r3, r3, #4
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800d4e2:	2103      	movs	r1, #3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f804 	bl	800d4f2 <netif_issue_reports>
    }
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4fe:	78fb      	ldrb	r3, [r7, #3]
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d011      	beq.n	800d52c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3304      	adds	r3, #4
 800d50c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00c      	beq.n	800d52c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d518:	f003 0308 	and.w	r3, r3, #8
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d005      	beq.n	800d52c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3304      	adds	r3, #4
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f008 fbc8 	bl	8015cbc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800d52c:	bf00      	nop
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d012      	beq.n	800d570 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d550:	f023 0301 	bic.w	r3, r3, #1
 800d554:	b2da      	uxtb	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d562:	f003 0308 	and.w	r3, r3, #8
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f007 ff68 	bl	8015440 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  if (netif) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	61da      	str	r2, [r3, #28]
  }
}
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	bc80      	pop	{r7}
 800d596:	4770      	bx	lr

0800d598 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d598:	b480      	push	{r7}
 800d59a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d59c:	4b03      	ldr	r3, [pc, #12]	; (800d5ac <pbuf_pool_is_empty+0x14>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d5a2:	bf00      	nop
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bc80      	pop	{r7}
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	20008b68 	.word	0x20008b68

0800d5b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b088      	sub	sp, #32
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	71fb      	strb	r3, [r7, #7]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	80bb      	strh	r3, [r7, #4]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800d5c2:	79fb      	ldrb	r3, [r7, #7]
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d81c      	bhi.n	800d602 <pbuf_alloc+0x52>
 800d5c8:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <pbuf_alloc+0x20>)
 800d5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ce:	bf00      	nop
 800d5d0:	0800d5e5 	.word	0x0800d5e5
 800d5d4:	0800d5eb 	.word	0x0800d5eb
 800d5d8:	0800d5f1 	.word	0x0800d5f1
 800d5dc:	0800d5f7 	.word	0x0800d5f7
 800d5e0:	0800d5fd 	.word	0x0800d5fd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d5e4:	2336      	movs	r3, #54	; 0x36
 800d5e6:	82fb      	strh	r3, [r7, #22]
    break;
 800d5e8:	e014      	b.n	800d614 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d5ea:	2322      	movs	r3, #34	; 0x22
 800d5ec:	82fb      	strh	r3, [r7, #22]
    break;
 800d5ee:	e011      	b.n	800d614 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d5f0:	230e      	movs	r3, #14
 800d5f2:	82fb      	strh	r3, [r7, #22]
    break;
 800d5f4:	e00e      	b.n	800d614 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	82fb      	strh	r3, [r7, #22]
    break;
 800d5fa:	e00b      	b.n	800d614 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	82fb      	strh	r3, [r7, #22]
    break;
 800d600:	e008      	b.n	800d614 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800d602:	4ba5      	ldr	r3, [pc, #660]	; (800d898 <pbuf_alloc+0x2e8>)
 800d604:	f44f 728b 	mov.w	r2, #278	; 0x116
 800d608:	49a4      	ldr	r1, [pc, #656]	; (800d89c <pbuf_alloc+0x2ec>)
 800d60a:	48a5      	ldr	r0, [pc, #660]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d60c:	f00a fa66 	bl	8017adc <iprintf>
    return NULL;
 800d610:	2300      	movs	r3, #0
 800d612:	e15d      	b.n	800d8d0 <pbuf_alloc+0x320>
  }

  switch (type) {
 800d614:	79bb      	ldrb	r3, [r7, #6]
 800d616:	2b03      	cmp	r3, #3
 800d618:	f200 8134 	bhi.w	800d884 <pbuf_alloc+0x2d4>
 800d61c:	a201      	add	r2, pc, #4	; (adr r2, 800d624 <pbuf_alloc+0x74>)
 800d61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d622:	bf00      	nop
 800d624:	0800d7c5 	.word	0x0800d7c5
 800d628:	0800d851 	.word	0x0800d851
 800d62c:	0800d851 	.word	0x0800d851
 800d630:	0800d635 	.word	0x0800d635
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d634:	2008      	movs	r0, #8
 800d636:	f7ff fdc7 	bl	800d1c8 <memp_malloc>
 800d63a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d103      	bne.n	800d64a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800d642:	f7ff ffa9 	bl	800d598 <pbuf_pool_is_empty>
      return NULL;
 800d646:	2300      	movs	r3, #0
 800d648:	e142      	b.n	800d8d0 <pbuf_alloc+0x320>
    }
    p->type = type;
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	79ba      	ldrb	r2, [r7, #6]
 800d64e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800d656:	8afb      	ldrh	r3, [r7, #22]
 800d658:	3310      	adds	r3, #16
 800d65a:	69fa      	ldr	r2, [r7, #28]
 800d65c:	4413      	add	r3, r2
 800d65e:	3303      	adds	r3, #3
 800d660:	f023 0303 	bic.w	r3, r3, #3
 800d664:	461a      	mov	r2, r3
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f003 0303 	and.w	r3, r3, #3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d006      	beq.n	800d684 <pbuf_alloc+0xd4>
 800d676:	4b88      	ldr	r3, [pc, #544]	; (800d898 <pbuf_alloc+0x2e8>)
 800d678:	f240 1229 	movw	r2, #297	; 0x129
 800d67c:	4989      	ldr	r1, [pc, #548]	; (800d8a4 <pbuf_alloc+0x2f4>)
 800d67e:	4888      	ldr	r0, [pc, #544]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d680:	f00a fa2c 	bl	8017adc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	88ba      	ldrh	r2, [r7, #4]
 800d688:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d68a:	8afb      	ldrh	r3, [r7, #22]
 800d68c:	3303      	adds	r3, #3
 800d68e:	f023 0303 	bic.w	r3, r3, #3
 800d692:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800d696:	88bb      	ldrh	r3, [r7, #4]
 800d698:	4293      	cmp	r3, r2
 800d69a:	bf28      	it	cs
 800d69c:	4613      	movcs	r3, r2
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	69fa      	ldr	r2, [r7, #28]
 800d6aa:	8952      	ldrh	r2, [r2, #10]
 800d6ac:	441a      	add	r2, r3
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d906      	bls.n	800d6c6 <pbuf_alloc+0x116>
 800d6b8:	4b77      	ldr	r3, [pc, #476]	; (800d898 <pbuf_alloc+0x2e8>)
 800d6ba:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d6be:	497a      	ldr	r1, [pc, #488]	; (800d8a8 <pbuf_alloc+0x2f8>)
 800d6c0:	4877      	ldr	r0, [pc, #476]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d6c2:	f00a fa0b 	bl	8017adc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d6c6:	8afb      	ldrh	r3, [r7, #22]
 800d6c8:	3303      	adds	r3, #3
 800d6ca:	f023 0303 	bic.w	r3, r3, #3
 800d6ce:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d6d2:	d106      	bne.n	800d6e2 <pbuf_alloc+0x132>
 800d6d4:	4b70      	ldr	r3, [pc, #448]	; (800d898 <pbuf_alloc+0x2e8>)
 800d6d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d6da:	4974      	ldr	r1, [pc, #464]	; (800d8ac <pbuf_alloc+0x2fc>)
 800d6dc:	4870      	ldr	r0, [pc, #448]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d6de:	f00a f9fd 	bl	8017adc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d6ec:	88bb      	ldrh	r3, [r7, #4]
 800d6ee:	69fa      	ldr	r2, [r7, #28]
 800d6f0:	8952      	ldrh	r2, [r2, #10]
 800d6f2:	1a9b      	subs	r3, r3, r2
 800d6f4:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d6f6:	e061      	b.n	800d7bc <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d6f8:	2008      	movs	r0, #8
 800d6fa:	f7ff fd65 	bl	800d1c8 <memp_malloc>
 800d6fe:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800d706:	f7ff ff47 	bl	800d598 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d70a:	69f8      	ldr	r0, [r7, #28]
 800d70c:	f000 fac2 	bl	800dc94 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	e0dd      	b.n	800d8d0 <pbuf_alloc+0x320>
      }
      q->type = type;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	79ba      	ldrb	r2, [r7, #6]
 800d718:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d732:	4293      	cmp	r3, r2
 800d734:	dd06      	ble.n	800d744 <pbuf_alloc+0x194>
 800d736:	4b58      	ldr	r3, [pc, #352]	; (800d898 <pbuf_alloc+0x2e8>)
 800d738:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d73c:	495c      	ldr	r1, [pc, #368]	; (800d8b0 <pbuf_alloc+0x300>)
 800d73e:	4858      	ldr	r0, [pc, #352]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d740:	f00a f9cc 	bl	8017adc <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d754:	bf28      	it	cs
 800d756:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f103 0210 	add.w	r2, r3, #16
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	f003 0303 	and.w	r3, r3, #3
 800d772:	2b00      	cmp	r3, #0
 800d774:	d006      	beq.n	800d784 <pbuf_alloc+0x1d4>
 800d776:	4b48      	ldr	r3, [pc, #288]	; (800d898 <pbuf_alloc+0x2e8>)
 800d778:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800d77c:	494d      	ldr	r1, [pc, #308]	; (800d8b4 <pbuf_alloc+0x304>)
 800d77e:	4848      	ldr	r0, [pc, #288]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d780:	f00a f9ac 	bl	8017adc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	69fa      	ldr	r2, [r7, #28]
 800d78a:	8952      	ldrh	r2, [r2, #10]
 800d78c:	441a      	add	r2, r3
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d794:	429a      	cmp	r2, r3
 800d796:	d906      	bls.n	800d7a6 <pbuf_alloc+0x1f6>
 800d798:	4b3f      	ldr	r3, [pc, #252]	; (800d898 <pbuf_alloc+0x2e8>)
 800d79a:	f240 1255 	movw	r2, #341	; 0x155
 800d79e:	4942      	ldr	r1, [pc, #264]	; (800d8a8 <pbuf_alloc+0x2f8>)
 800d7a0:	483f      	ldr	r0, [pc, #252]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d7a2:	f00a f99b 	bl	8017adc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	895b      	ldrh	r3, [r3, #10]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	1a9b      	subs	r3, r3, r2
 800d7b6:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	dc9a      	bgt.n	800d6f8 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d7c2:	e07e      	b.n	800d8c2 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d7c4:	8afb      	ldrh	r3, [r7, #22]
 800d7c6:	3313      	adds	r3, #19
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	f023 0303 	bic.w	r3, r3, #3
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	88bb      	ldrh	r3, [r7, #4]
 800d7d2:	3303      	adds	r3, #3
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	f023 0303 	bic.w	r3, r3, #3
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	4413      	add	r3, r2
 800d7de:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d7e0:	897a      	ldrh	r2, [r7, #10]
 800d7e2:	88bb      	ldrh	r3, [r7, #4]
 800d7e4:	3303      	adds	r3, #3
 800d7e6:	f023 0303 	bic.w	r3, r3, #3
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d201      	bcs.n	800d7f2 <pbuf_alloc+0x242>
        return NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e06e      	b.n	800d8d0 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d7f2:	897b      	ldrh	r3, [r7, #10]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff fb8b 	bl	800cf10 <mem_malloc>
 800d7fa:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <pbuf_alloc+0x256>
      return NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	e064      	b.n	800d8d0 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d806:	8afb      	ldrh	r3, [r7, #22]
 800d808:	3310      	adds	r3, #16
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	4413      	add	r3, r2
 800d80e:	3303      	adds	r3, #3
 800d810:	f023 0303 	bic.w	r3, r3, #3
 800d814:	461a      	mov	r2, r3
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	88ba      	ldrh	r2, [r7, #4]
 800d81e:	811a      	strh	r2, [r3, #8]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	891a      	ldrh	r2, [r3, #8]
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	79ba      	ldrb	r2, [r7, #6]
 800d832:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	f003 0303 	and.w	r3, r3, #3
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d03f      	beq.n	800d8c0 <pbuf_alloc+0x310>
 800d840:	4b15      	ldr	r3, [pc, #84]	; (800d898 <pbuf_alloc+0x2e8>)
 800d842:	f240 1277 	movw	r2, #375	; 0x177
 800d846:	491c      	ldr	r1, [pc, #112]	; (800d8b8 <pbuf_alloc+0x308>)
 800d848:	4815      	ldr	r0, [pc, #84]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d84a:	f00a f947 	bl	8017adc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d84e:	e037      	b.n	800d8c0 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d850:	2007      	movs	r0, #7
 800d852:	f7ff fcb9 	bl	800d1c8 <memp_malloc>
 800d856:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	e036      	b.n	800d8d0 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	2200      	movs	r2, #0
 800d866:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	88ba      	ldrh	r2, [r7, #4]
 800d86c:	811a      	strh	r2, [r3, #8]
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	891a      	ldrh	r2, [r3, #8]
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	2200      	movs	r2, #0
 800d87a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	79ba      	ldrb	r2, [r7, #6]
 800d880:	731a      	strb	r2, [r3, #12]
    break;
 800d882:	e01e      	b.n	800d8c2 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d884:	4b04      	ldr	r3, [pc, #16]	; (800d898 <pbuf_alloc+0x2e8>)
 800d886:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800d88a:	490c      	ldr	r1, [pc, #48]	; (800d8bc <pbuf_alloc+0x30c>)
 800d88c:	4804      	ldr	r0, [pc, #16]	; (800d8a0 <pbuf_alloc+0x2f0>)
 800d88e:	f00a f925 	bl	8017adc <iprintf>
    return NULL;
 800d892:	2300      	movs	r3, #0
 800d894:	e01c      	b.n	800d8d0 <pbuf_alloc+0x320>
 800d896:	bf00      	nop
 800d898:	08018d74 	.word	0x08018d74
 800d89c:	08018da4 	.word	0x08018da4
 800d8a0:	08018dc0 	.word	0x08018dc0
 800d8a4:	08018de8 	.word	0x08018de8
 800d8a8:	08018e18 	.word	0x08018e18
 800d8ac:	08018e4c 	.word	0x08018e4c
 800d8b0:	08018e80 	.word	0x08018e80
 800d8b4:	08018e94 	.word	0x08018e94
 800d8b8:	08018ec4 	.word	0x08018ec4
 800d8bc:	08018ef0 	.word	0x08018ef0
    break;
 800d8c0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d8ce:	69fb      	ldr	r3, [r7, #28]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3720      	adds	r7, #32
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	71fb      	strb	r3, [r7, #7]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	80bb      	strh	r3, [r7, #4]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	2b04      	cmp	r3, #4
 800d8f0:	d81b      	bhi.n	800d92a <pbuf_alloced_custom+0x52>
 800d8f2:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <pbuf_alloced_custom+0x20>)
 800d8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f8:	0800d90d 	.word	0x0800d90d
 800d8fc:	0800d913 	.word	0x0800d913
 800d900:	0800d919 	.word	0x0800d919
 800d904:	0800d91f 	.word	0x0800d91f
 800d908:	0800d925 	.word	0x0800d925
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d90c:	2336      	movs	r3, #54	; 0x36
 800d90e:	81fb      	strh	r3, [r7, #14]
    break;
 800d910:	e014      	b.n	800d93c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d912:	2322      	movs	r3, #34	; 0x22
 800d914:	81fb      	strh	r3, [r7, #14]
    break;
 800d916:	e011      	b.n	800d93c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d918:	230e      	movs	r3, #14
 800d91a:	81fb      	strh	r3, [r7, #14]
    break;
 800d91c:	e00e      	b.n	800d93c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d91e:	2300      	movs	r3, #0
 800d920:	81fb      	strh	r3, [r7, #14]
    break;
 800d922:	e00b      	b.n	800d93c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d924:	2300      	movs	r3, #0
 800d926:	81fb      	strh	r3, [r7, #14]
    break;
 800d928:	e008      	b.n	800d93c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d92a:	4b1d      	ldr	r3, [pc, #116]	; (800d9a0 <pbuf_alloced_custom+0xc8>)
 800d92c:	f240 12c5 	movw	r2, #453	; 0x1c5
 800d930:	491c      	ldr	r1, [pc, #112]	; (800d9a4 <pbuf_alloced_custom+0xcc>)
 800d932:	481d      	ldr	r0, [pc, #116]	; (800d9a8 <pbuf_alloced_custom+0xd0>)
 800d934:	f00a f8d2 	bl	8017adc <iprintf>
    return NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	e02d      	b.n	800d998 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d93c:	89fb      	ldrh	r3, [r7, #14]
 800d93e:	3303      	adds	r3, #3
 800d940:	f023 0203 	bic.w	r2, r3, #3
 800d944:	88bb      	ldrh	r3, [r7, #4]
 800d946:	441a      	add	r2, r3
 800d948:	8bbb      	ldrh	r3, [r7, #28]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d901      	bls.n	800d952 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	e022      	b.n	800d998 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2200      	movs	r2, #0
 800d956:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d008      	beq.n	800d970 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d95e:	89fb      	ldrh	r3, [r7, #14]
 800d960:	3303      	adds	r3, #3
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	69ba      	ldr	r2, [r7, #24]
 800d968:	441a      	add	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	605a      	str	r2, [r3, #4]
 800d96e:	e002      	b.n	800d976 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	2200      	movs	r2, #0
 800d974:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2202      	movs	r2, #2
 800d97a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	88ba      	ldrh	r2, [r7, #4]
 800d980:	811a      	strh	r2, [r3, #8]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	891a      	ldrh	r2, [r3, #8]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	79ba      	ldrb	r2, [r7, #6]
 800d98e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2201      	movs	r2, #1
 800d994:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d996:	683b      	ldr	r3, [r7, #0]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	08018d74 	.word	0x08018d74
 800d9a4:	08018f0c 	.word	0x08018f0c
 800d9a8:	08018dc0 	.word	0x08018dc0

0800d9ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <pbuf_realloc+0x20>
 800d9be:	4b4b      	ldr	r3, [pc, #300]	; (800daec <pbuf_realloc+0x140>)
 800d9c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d9c4:	494a      	ldr	r1, [pc, #296]	; (800daf0 <pbuf_realloc+0x144>)
 800d9c6:	484b      	ldr	r0, [pc, #300]	; (800daf4 <pbuf_realloc+0x148>)
 800d9c8:	f00a f888 	bl	8017adc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7b1b      	ldrb	r3, [r3, #12]
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d012      	beq.n	800d9fa <pbuf_realloc+0x4e>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7b1b      	ldrb	r3, [r3, #12]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d00e      	beq.n	800d9fa <pbuf_realloc+0x4e>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7b1b      	ldrb	r3, [r3, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00a      	beq.n	800d9fa <pbuf_realloc+0x4e>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7b1b      	ldrb	r3, [r3, #12]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d006      	beq.n	800d9fa <pbuf_realloc+0x4e>
 800d9ec:	4b3f      	ldr	r3, [pc, #252]	; (800daec <pbuf_realloc+0x140>)
 800d9ee:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d9f2:	4941      	ldr	r1, [pc, #260]	; (800daf8 <pbuf_realloc+0x14c>)
 800d9f4:	483f      	ldr	r0, [pc, #252]	; (800daf4 <pbuf_realloc+0x148>)
 800d9f6:	f00a f871 	bl	8017adc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	891b      	ldrh	r3, [r3, #8]
 800d9fe:	887a      	ldrh	r2, [r7, #2]
 800da00:	429a      	cmp	r2, r3
 800da02:	d26f      	bcs.n	800dae4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800da04:	887b      	ldrh	r3, [r7, #2]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	8912      	ldrh	r2, [r2, #8]
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da0e:	887b      	ldrh	r3, [r7, #2]
 800da10:	827b      	strh	r3, [r7, #18]
  q = p;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da16:	e025      	b.n	800da64 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	895b      	ldrh	r3, [r3, #10]
 800da1c:	8a7a      	ldrh	r2, [r7, #18]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da28:	4293      	cmp	r3, r2
 800da2a:	dd06      	ble.n	800da3a <pbuf_realloc+0x8e>
 800da2c:	4b2f      	ldr	r3, [pc, #188]	; (800daec <pbuf_realloc+0x140>)
 800da2e:	f240 220b 	movw	r2, #523	; 0x20b
 800da32:	4932      	ldr	r1, [pc, #200]	; (800dafc <pbuf_realloc+0x150>)
 800da34:	482f      	ldr	r0, [pc, #188]	; (800daf4 <pbuf_realloc+0x148>)
 800da36:	f00a f851 	bl	8017adc <iprintf>
    q->tot_len += (u16_t)grow;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	891a      	ldrh	r2, [r3, #8]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	b29b      	uxth	r3, r3
 800da42:	4413      	add	r3, r2
 800da44:	b29a      	uxth	r2, r3
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <pbuf_realloc+0xb8>
 800da56:	4b25      	ldr	r3, [pc, #148]	; (800daec <pbuf_realloc+0x140>)
 800da58:	f240 220f 	movw	r2, #527	; 0x20f
 800da5c:	4928      	ldr	r1, [pc, #160]	; (800db00 <pbuf_realloc+0x154>)
 800da5e:	4825      	ldr	r0, [pc, #148]	; (800daf4 <pbuf_realloc+0x148>)
 800da60:	f00a f83c 	bl	8017adc <iprintf>
  while (rem_len > q->len) {
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	895b      	ldrh	r3, [r3, #10]
 800da68:	8a7a      	ldrh	r2, [r7, #18]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d8d4      	bhi.n	800da18 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	7b1b      	ldrb	r3, [r3, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d122      	bne.n	800dabc <pbuf_realloc+0x110>
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	895b      	ldrh	r3, [r3, #10]
 800da7a:	8a7a      	ldrh	r2, [r7, #18]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d01d      	beq.n	800dabc <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	7b5b      	ldrb	r3, [r3, #13]
 800da84:	f003 0302 	and.w	r3, r3, #2
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d117      	bne.n	800dabc <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	461a      	mov	r2, r3
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	b29a      	uxth	r2, r3
 800da98:	8a7b      	ldrh	r3, [r7, #18]
 800da9a:	4413      	add	r3, r2
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	4619      	mov	r1, r3
 800daa0:	6978      	ldr	r0, [r7, #20]
 800daa2:	f7ff f959 	bl	800cd58 <mem_trim>
 800daa6:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d106      	bne.n	800dabc <pbuf_realloc+0x110>
 800daae:	4b0f      	ldr	r3, [pc, #60]	; (800daec <pbuf_realloc+0x140>)
 800dab0:	f240 221d 	movw	r2, #541	; 0x21d
 800dab4:	4913      	ldr	r1, [pc, #76]	; (800db04 <pbuf_realloc+0x158>)
 800dab6:	480f      	ldr	r0, [pc, #60]	; (800daf4 <pbuf_realloc+0x148>)
 800dab8:	f00a f810 	bl	8017adc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	8a7a      	ldrh	r2, [r7, #18]
 800dac0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	895a      	ldrh	r2, [r3, #10]
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d004      	beq.n	800dadc <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 f8dc 	bl	800dc94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	2200      	movs	r2, #0
 800dae0:	601a      	str	r2, [r3, #0]
 800dae2:	e000      	b.n	800dae6 <pbuf_realloc+0x13a>
    return;
 800dae4:	bf00      	nop

}
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	08018d74 	.word	0x08018d74
 800daf0:	08018f30 	.word	0x08018f30
 800daf4:	08018dc0 	.word	0x08018dc0
 800daf8:	08018f48 	.word	0x08018f48
 800dafc:	08018f64 	.word	0x08018f64
 800db00:	08018f78 	.word	0x08018f78
 800db04:	08018f90 	.word	0x08018f90

0800db08 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	807b      	strh	r3, [r7, #2]
 800db14:	4613      	mov	r3, r2
 800db16:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <pbuf_header_impl+0x24>
 800db1e:	4b46      	ldr	r3, [pc, #280]	; (800dc38 <pbuf_header_impl+0x130>)
 800db20:	f240 223f 	movw	r2, #575	; 0x23f
 800db24:	4945      	ldr	r1, [pc, #276]	; (800dc3c <pbuf_header_impl+0x134>)
 800db26:	4846      	ldr	r0, [pc, #280]	; (800dc40 <pbuf_header_impl+0x138>)
 800db28:	f009 ffd8 	bl	8017adc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800db2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <pbuf_header_impl+0x32>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <pbuf_header_impl+0x36>
    return 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e078      	b.n	800dc30 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800db3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db42:	2b00      	cmp	r3, #0
 800db44:	da10      	bge.n	800db68 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800db46:	887b      	ldrh	r3, [r7, #2]
 800db48:	425b      	negs	r3, r3
 800db4a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	895b      	ldrh	r3, [r3, #10]
 800db50:	89fa      	ldrh	r2, [r7, #14]
 800db52:	429a      	cmp	r2, r3
 800db54:	d90a      	bls.n	800db6c <pbuf_header_impl+0x64>
 800db56:	4b38      	ldr	r3, [pc, #224]	; (800dc38 <pbuf_header_impl+0x130>)
 800db58:	f240 2247 	movw	r2, #583	; 0x247
 800db5c:	4939      	ldr	r1, [pc, #228]	; (800dc44 <pbuf_header_impl+0x13c>)
 800db5e:	4838      	ldr	r0, [pc, #224]	; (800dc40 <pbuf_header_impl+0x138>)
 800db60:	f009 ffbc 	bl	8017adc <iprintf>
 800db64:	2301      	movs	r3, #1
 800db66:	e063      	b.n	800dc30 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800db68:	887b      	ldrh	r3, [r7, #2]
 800db6a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	7b1b      	ldrb	r3, [r3, #12]
 800db70:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800db78:	89bb      	ldrh	r3, [r7, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <pbuf_header_impl+0x7c>
 800db7e:	89bb      	ldrh	r3, [r7, #12]
 800db80:	2b03      	cmp	r3, #3
 800db82:	d112      	bne.n	800dbaa <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685a      	ldr	r2, [r3, #4]
 800db88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db8c:	425b      	negs	r3, r3
 800db8e:	441a      	add	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	685a      	ldr	r2, [r3, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3310      	adds	r3, #16
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d238      	bcs.n	800dc12 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e042      	b.n	800dc30 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800dbaa:	89bb      	ldrh	r3, [r7, #12]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d002      	beq.n	800dbb6 <pbuf_header_impl+0xae>
 800dbb0:	89bb      	ldrh	r3, [r7, #12]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d124      	bne.n	800dc00 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dbb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	da0d      	bge.n	800dbda <pbuf_header_impl+0xd2>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	895b      	ldrh	r3, [r3, #10]
 800dbc2:	89fa      	ldrh	r2, [r7, #14]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d808      	bhi.n	800dbda <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685a      	ldr	r2, [r3, #4]
 800dbcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbd0:	425b      	negs	r3, r3
 800dbd2:	441a      	add	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	605a      	str	r2, [r3, #4]
 800dbd8:	e011      	b.n	800dbfe <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800dbda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dd0b      	ble.n	800dbfa <pbuf_header_impl+0xf2>
 800dbe2:	787b      	ldrb	r3, [r7, #1]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d008      	beq.n	800dbfa <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbf0:	425b      	negs	r3, r3
 800dbf2:	441a      	add	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	605a      	str	r2, [r3, #4]
 800dbf8:	e001      	b.n	800dbfe <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e018      	b.n	800dc30 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dbfe:	e008      	b.n	800dc12 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800dc00:	4b0d      	ldr	r3, [pc, #52]	; (800dc38 <pbuf_header_impl+0x130>)
 800dc02:	f240 2277 	movw	r2, #631	; 0x277
 800dc06:	4910      	ldr	r1, [pc, #64]	; (800dc48 <pbuf_header_impl+0x140>)
 800dc08:	480d      	ldr	r0, [pc, #52]	; (800dc40 <pbuf_header_impl+0x138>)
 800dc0a:	f009 ff67 	bl	8017adc <iprintf>
    return 1;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e00e      	b.n	800dc30 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	895a      	ldrh	r2, [r3, #10]
 800dc16:	887b      	ldrh	r3, [r7, #2]
 800dc18:	4413      	add	r3, r2
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	891a      	ldrh	r2, [r3, #8]
 800dc24:	887b      	ldrh	r3, [r7, #2]
 800dc26:	4413      	add	r3, r2
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	08018d74 	.word	0x08018d74
 800dc3c:	08018fac 	.word	0x08018fac
 800dc40:	08018dc0 	.word	0x08018dc0
 800dc44:	08018fb8 	.word	0x08018fb8
 800dc48:	08018fd8 	.word	0x08018fd8

0800dc4c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800dc58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff ff51 	bl	800db08 <pbuf_header_impl>
 800dc66:	4603      	mov	r3, r0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800dc7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc80:	2201      	movs	r2, #1
 800dc82:	4619      	mov	r1, r3
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff ff3f 	bl	800db08 <pbuf_header_impl>
 800dc8a:	4603      	mov	r3, r0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10b      	bne.n	800dcba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d106      	bne.n	800dcb6 <pbuf_free+0x22>
 800dca8:	4b3e      	ldr	r3, [pc, #248]	; (800dda4 <pbuf_free+0x110>)
 800dcaa:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dcae:	493e      	ldr	r1, [pc, #248]	; (800dda8 <pbuf_free+0x114>)
 800dcb0:	483e      	ldr	r0, [pc, #248]	; (800ddac <pbuf_free+0x118>)
 800dcb2:	f009 ff13 	bl	8017adc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e070      	b.n	800dd9c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	7b1b      	ldrb	r3, [r3, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d012      	beq.n	800dce8 <pbuf_free+0x54>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	7b1b      	ldrb	r3, [r3, #12]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d00e      	beq.n	800dce8 <pbuf_free+0x54>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7b1b      	ldrb	r3, [r3, #12]
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d00a      	beq.n	800dce8 <pbuf_free+0x54>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7b1b      	ldrb	r3, [r3, #12]
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d006      	beq.n	800dce8 <pbuf_free+0x54>
 800dcda:	4b32      	ldr	r3, [pc, #200]	; (800dda4 <pbuf_free+0x110>)
 800dcdc:	f240 22de 	movw	r2, #734	; 0x2de
 800dce0:	4933      	ldr	r1, [pc, #204]	; (800ddb0 <pbuf_free+0x11c>)
 800dce2:	4832      	ldr	r0, [pc, #200]	; (800ddac <pbuf_free+0x118>)
 800dce4:	f009 fefa 	bl	8017adc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800dce8:	2300      	movs	r3, #0
 800dcea:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dcec:	e052      	b.n	800dd94 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	89db      	ldrh	r3, [r3, #14]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <pbuf_free+0x70>
 800dcf6:	4b2b      	ldr	r3, [pc, #172]	; (800dda4 <pbuf_free+0x110>)
 800dcf8:	f240 22eb 	movw	r2, #747	; 0x2eb
 800dcfc:	492d      	ldr	r1, [pc, #180]	; (800ddb4 <pbuf_free+0x120>)
 800dcfe:	482b      	ldr	r0, [pc, #172]	; (800ddac <pbuf_free+0x118>)
 800dd00:	f009 feec 	bl	8017adc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	89db      	ldrh	r3, [r3, #14]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	81da      	strh	r2, [r3, #14]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	89db      	ldrh	r3, [r3, #14]
 800dd14:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd16:	8abb      	ldrh	r3, [r7, #20]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d139      	bne.n	800dd90 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7b1b      	ldrb	r3, [r3, #12]
 800dd26:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	7b5b      	ldrb	r3, [r3, #13]
 800dd2c:	f003 0302 	and.w	r3, r3, #2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d011      	beq.n	800dd58 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <pbuf_free+0xba>
 800dd40:	4b18      	ldr	r3, [pc, #96]	; (800dda4 <pbuf_free+0x110>)
 800dd42:	f240 22f9 	movw	r2, #761	; 0x2f9
 800dd46:	491c      	ldr	r1, [pc, #112]	; (800ddb8 <pbuf_free+0x124>)
 800dd48:	4818      	ldr	r0, [pc, #96]	; (800ddac <pbuf_free+0x118>)
 800dd4a:	f009 fec7 	bl	8017adc <iprintf>
        pc->custom_free_function(p);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
 800dd56:	e015      	b.n	800dd84 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800dd58:	89fb      	ldrh	r3, [r7, #14]
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d104      	bne.n	800dd68 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800dd5e:	6879      	ldr	r1, [r7, #4]
 800dd60:	2008      	movs	r0, #8
 800dd62:	f7ff fa7d 	bl	800d260 <memp_free>
 800dd66:	e00d      	b.n	800dd84 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800dd68:	89fb      	ldrh	r3, [r7, #14]
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d002      	beq.n	800dd74 <pbuf_free+0xe0>
 800dd6e:	89fb      	ldrh	r3, [r7, #14]
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d104      	bne.n	800dd7e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	2007      	movs	r0, #7
 800dd78:	f7ff fa72 	bl	800d260 <memp_free>
 800dd7c:	e002      	b.n	800dd84 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7fe ff88 	bl	800cc94 <mem_free>
        }
      }
      count++;
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
 800dd86:	3301      	adds	r3, #1
 800dd88:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	607b      	str	r3, [r7, #4]
 800dd8e:	e001      	b.n	800dd94 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800dd90:	2300      	movs	r3, #0
 800dd92:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1a9      	bne.n	800dcee <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	08018d74 	.word	0x08018d74
 800dda8:	08018fac 	.word	0x08018fac
 800ddac:	08018dc0 	.word	0x08018dc0
 800ddb0:	08018fe8 	.word	0x08018fe8
 800ddb4:	08019000 	.word	0x08019000
 800ddb8:	08019018 	.word	0x08019018

0800ddbc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ddc8:	e005      	b.n	800ddd6 <pbuf_clen+0x1a>
    ++len;
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1f6      	bne.n	800ddca <pbuf_clen+0xe>
  }
  return len;
 800dddc:	89fb      	ldrh	r3, [r7, #14]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bc80      	pop	{r7}
 800dde6:	4770      	bx	lr

0800dde8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d010      	beq.n	800de18 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	89db      	ldrh	r3, [r3, #14]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	89db      	ldrh	r3, [r3, #14]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d106      	bne.n	800de18 <pbuf_ref+0x30>
 800de0a:	4b05      	ldr	r3, [pc, #20]	; (800de20 <pbuf_ref+0x38>)
 800de0c:	f240 3239 	movw	r2, #825	; 0x339
 800de10:	4904      	ldr	r1, [pc, #16]	; (800de24 <pbuf_ref+0x3c>)
 800de12:	4805      	ldr	r0, [pc, #20]	; (800de28 <pbuf_ref+0x40>)
 800de14:	f009 fe62 	bl	8017adc <iprintf>
  }
}
 800de18:	bf00      	nop
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	08018d74 	.word	0x08018d74
 800de24:	0801903c 	.word	0x0801903c
 800de28:	08018dc0 	.word	0x08018dc0

0800de2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <pbuf_cat+0x16>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d107      	bne.n	800de52 <pbuf_cat+0x26>
 800de42:	4b20      	ldr	r3, [pc, #128]	; (800dec4 <pbuf_cat+0x98>)
 800de44:	f240 324d 	movw	r2, #845	; 0x34d
 800de48:	491f      	ldr	r1, [pc, #124]	; (800dec8 <pbuf_cat+0x9c>)
 800de4a:	4820      	ldr	r0, [pc, #128]	; (800decc <pbuf_cat+0xa0>)
 800de4c:	f009 fe46 	bl	8017adc <iprintf>
 800de50:	e034      	b.n	800debc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	60fb      	str	r3, [r7, #12]
 800de56:	e00a      	b.n	800de6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	891a      	ldrh	r2, [r3, #8]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	891b      	ldrh	r3, [r3, #8]
 800de60:	4413      	add	r3, r2
 800de62:	b29a      	uxth	r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1f0      	bne.n	800de58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	891a      	ldrh	r2, [r3, #8]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	895b      	ldrh	r3, [r3, #10]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d006      	beq.n	800de90 <pbuf_cat+0x64>
 800de82:	4b10      	ldr	r3, [pc, #64]	; (800dec4 <pbuf_cat+0x98>)
 800de84:	f240 3255 	movw	r2, #853	; 0x355
 800de88:	4911      	ldr	r1, [pc, #68]	; (800ded0 <pbuf_cat+0xa4>)
 800de8a:	4810      	ldr	r0, [pc, #64]	; (800decc <pbuf_cat+0xa0>)
 800de8c:	f009 fe26 	bl	8017adc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d006      	beq.n	800dea6 <pbuf_cat+0x7a>
 800de98:	4b0a      	ldr	r3, [pc, #40]	; (800dec4 <pbuf_cat+0x98>)
 800de9a:	f240 3256 	movw	r2, #854	; 0x356
 800de9e:	490d      	ldr	r1, [pc, #52]	; (800ded4 <pbuf_cat+0xa8>)
 800dea0:	480a      	ldr	r0, [pc, #40]	; (800decc <pbuf_cat+0xa0>)
 800dea2:	f009 fe1b 	bl	8017adc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	891a      	ldrh	r2, [r3, #8]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	891b      	ldrh	r3, [r3, #8]
 800deae:	4413      	add	r3, r2
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	08018d74 	.word	0x08018d74
 800dec8:	08019050 	.word	0x08019050
 800decc:	08018dc0 	.word	0x08018dc0
 800ded0:	08019088 	.word	0x08019088
 800ded4:	080190b8 	.word	0x080190b8

0800ded8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7ff ffa1 	bl	800de2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800deea:	6838      	ldr	r0, [r7, #0]
 800deec:	f7ff ff7c 	bl	800dde8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800def0:	bf00      	nop
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800df02:	2300      	movs	r3, #0
 800df04:	81fb      	strh	r3, [r7, #14]
 800df06:	2300      	movs	r3, #0
 800df08:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d008      	beq.n	800df22 <pbuf_copy+0x2a>
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <pbuf_copy+0x2a>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	891a      	ldrh	r2, [r3, #8]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	891b      	ldrh	r3, [r3, #8]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d209      	bcs.n	800df36 <pbuf_copy+0x3e>
 800df22:	4b54      	ldr	r3, [pc, #336]	; (800e074 <pbuf_copy+0x17c>)
 800df24:	f240 32bd 	movw	r2, #957	; 0x3bd
 800df28:	4953      	ldr	r1, [pc, #332]	; (800e078 <pbuf_copy+0x180>)
 800df2a:	4854      	ldr	r0, [pc, #336]	; (800e07c <pbuf_copy+0x184>)
 800df2c:	f009 fdd6 	bl	8017adc <iprintf>
 800df30:	f06f 030f 	mvn.w	r3, #15
 800df34:	e099      	b.n	800e06a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	895b      	ldrh	r3, [r3, #10]
 800df3a:	461a      	mov	r2, r3
 800df3c:	89fb      	ldrh	r3, [r7, #14]
 800df3e:	1ad2      	subs	r2, r2, r3
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	895b      	ldrh	r3, [r3, #10]
 800df44:	4619      	mov	r1, r3
 800df46:	89bb      	ldrh	r3, [r7, #12]
 800df48:	1acb      	subs	r3, r1, r3
 800df4a:	429a      	cmp	r2, r3
 800df4c:	db05      	blt.n	800df5a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	895a      	ldrh	r2, [r3, #10]
 800df52:	89bb      	ldrh	r3, [r7, #12]
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	817b      	strh	r3, [r7, #10]
 800df58:	e004      	b.n	800df64 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	895a      	ldrh	r2, [r3, #10]
 800df5e:	89fb      	ldrh	r3, [r7, #14]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	89fb      	ldrh	r3, [r7, #14]
 800df6a:	18d0      	adds	r0, r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	685a      	ldr	r2, [r3, #4]
 800df70:	89bb      	ldrh	r3, [r7, #12]
 800df72:	4413      	add	r3, r2
 800df74:	897a      	ldrh	r2, [r7, #10]
 800df76:	4619      	mov	r1, r3
 800df78:	f009 fcf7 	bl	801796a <memcpy>
    offset_to += len;
 800df7c:	89fa      	ldrh	r2, [r7, #14]
 800df7e:	897b      	ldrh	r3, [r7, #10]
 800df80:	4413      	add	r3, r2
 800df82:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800df84:	89ba      	ldrh	r2, [r7, #12]
 800df86:	897b      	ldrh	r3, [r7, #10]
 800df88:	4413      	add	r3, r2
 800df8a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	895b      	ldrh	r3, [r3, #10]
 800df90:	89fa      	ldrh	r2, [r7, #14]
 800df92:	429a      	cmp	r2, r3
 800df94:	d906      	bls.n	800dfa4 <pbuf_copy+0xac>
 800df96:	4b37      	ldr	r3, [pc, #220]	; (800e074 <pbuf_copy+0x17c>)
 800df98:	f240 32cd 	movw	r2, #973	; 0x3cd
 800df9c:	4938      	ldr	r1, [pc, #224]	; (800e080 <pbuf_copy+0x188>)
 800df9e:	4837      	ldr	r0, [pc, #220]	; (800e07c <pbuf_copy+0x184>)
 800dfa0:	f009 fd9c 	bl	8017adc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	895b      	ldrh	r3, [r3, #10]
 800dfa8:	89ba      	ldrh	r2, [r7, #12]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d906      	bls.n	800dfbc <pbuf_copy+0xc4>
 800dfae:	4b31      	ldr	r3, [pc, #196]	; (800e074 <pbuf_copy+0x17c>)
 800dfb0:	f240 32ce 	movw	r2, #974	; 0x3ce
 800dfb4:	4933      	ldr	r1, [pc, #204]	; (800e084 <pbuf_copy+0x18c>)
 800dfb6:	4831      	ldr	r0, [pc, #196]	; (800e07c <pbuf_copy+0x184>)
 800dfb8:	f009 fd90 	bl	8017adc <iprintf>
    if (offset_from >= p_from->len) {
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	895b      	ldrh	r3, [r3, #10]
 800dfc0:	89ba      	ldrh	r2, [r7, #12]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d304      	bcc.n	800dfd0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	895b      	ldrh	r3, [r3, #10]
 800dfd4:	89fa      	ldrh	r2, [r7, #14]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d114      	bne.n	800e004 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10c      	bne.n	800e004 <pbuf_copy+0x10c>
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d009      	beq.n	800e004 <pbuf_copy+0x10c>
 800dff0:	4b20      	ldr	r3, [pc, #128]	; (800e074 <pbuf_copy+0x17c>)
 800dff2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800dff6:	4924      	ldr	r1, [pc, #144]	; (800e088 <pbuf_copy+0x190>)
 800dff8:	4820      	ldr	r0, [pc, #128]	; (800e07c <pbuf_copy+0x184>)
 800dffa:	f009 fd6f 	bl	8017adc <iprintf>
 800dffe:	f06f 030f 	mvn.w	r3, #15
 800e002:	e032      	b.n	800e06a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <pbuf_copy+0x13a>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	895a      	ldrh	r2, [r3, #10]
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	891b      	ldrh	r3, [r3, #8]
 800e012:	429a      	cmp	r2, r3
 800e014:	d10d      	bne.n	800e032 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d009      	beq.n	800e032 <pbuf_copy+0x13a>
 800e01e:	4b15      	ldr	r3, [pc, #84]	; (800e074 <pbuf_copy+0x17c>)
 800e020:	f240 32de 	movw	r2, #990	; 0x3de
 800e024:	4919      	ldr	r1, [pc, #100]	; (800e08c <pbuf_copy+0x194>)
 800e026:	4815      	ldr	r0, [pc, #84]	; (800e07c <pbuf_copy+0x184>)
 800e028:	f009 fd58 	bl	8017adc <iprintf>
 800e02c:	f06f 0305 	mvn.w	r3, #5
 800e030:	e01b      	b.n	800e06a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d013      	beq.n	800e060 <pbuf_copy+0x168>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	895a      	ldrh	r2, [r3, #10]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	891b      	ldrh	r3, [r3, #8]
 800e040:	429a      	cmp	r2, r3
 800e042:	d10d      	bne.n	800e060 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d009      	beq.n	800e060 <pbuf_copy+0x168>
 800e04c:	4b09      	ldr	r3, [pc, #36]	; (800e074 <pbuf_copy+0x17c>)
 800e04e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e052:	490e      	ldr	r1, [pc, #56]	; (800e08c <pbuf_copy+0x194>)
 800e054:	4809      	ldr	r0, [pc, #36]	; (800e07c <pbuf_copy+0x184>)
 800e056:	f009 fd41 	bl	8017adc <iprintf>
 800e05a:	f06f 0305 	mvn.w	r3, #5
 800e05e:	e004      	b.n	800e06a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	f47f af67 	bne.w	800df36 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	08018d74 	.word	0x08018d74
 800e078:	08019104 	.word	0x08019104
 800e07c:	08018dc0 	.word	0x08018dc0
 800e080:	08019134 	.word	0x08019134
 800e084:	0801914c 	.word	0x0801914c
 800e088:	08019168 	.word	0x08019168
 800e08c:	08019178 	.word	0x08019178

0800e090 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b088      	sub	sp, #32
 800e094:	af00      	add	r7, sp, #0
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	4611      	mov	r1, r2
 800e09c:	461a      	mov	r2, r3
 800e09e:	460b      	mov	r3, r1
 800e0a0:	80fb      	strh	r3, [r7, #6]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d108      	bne.n	800e0c2 <pbuf_copy_partial+0x32>
 800e0b0:	4b30      	ldr	r3, [pc, #192]	; (800e174 <pbuf_copy_partial+0xe4>)
 800e0b2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800e0b6:	4930      	ldr	r1, [pc, #192]	; (800e178 <pbuf_copy_partial+0xe8>)
 800e0b8:	4830      	ldr	r0, [pc, #192]	; (800e17c <pbuf_copy_partial+0xec>)
 800e0ba:	f009 fd0f 	bl	8017adc <iprintf>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e054      	b.n	800e16c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d108      	bne.n	800e0da <pbuf_copy_partial+0x4a>
 800e0c8:	4b2a      	ldr	r3, [pc, #168]	; (800e174 <pbuf_copy_partial+0xe4>)
 800e0ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e0ce:	492c      	ldr	r1, [pc, #176]	; (800e180 <pbuf_copy_partial+0xf0>)
 800e0d0:	482a      	ldr	r0, [pc, #168]	; (800e17c <pbuf_copy_partial+0xec>)
 800e0d2:	f009 fd03 	bl	8017adc <iprintf>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e048      	b.n	800e16c <pbuf_copy_partial+0xdc>

  left = 0;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <pbuf_copy_partial+0x5a>
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d101      	bne.n	800e0ee <pbuf_copy_partial+0x5e>
    return 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e03e      	b.n	800e16c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	61fb      	str	r3, [r7, #28]
 800e0f2:	e034      	b.n	800e15e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800e0f4:	88bb      	ldrh	r3, [r7, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00a      	beq.n	800e110 <pbuf_copy_partial+0x80>
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	895b      	ldrh	r3, [r3, #10]
 800e0fe:	88ba      	ldrh	r2, [r7, #4]
 800e100:	429a      	cmp	r2, r3
 800e102:	d305      	bcc.n	800e110 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	895b      	ldrh	r3, [r3, #10]
 800e108:	88ba      	ldrh	r2, [r7, #4]
 800e10a:	1ad3      	subs	r3, r2, r3
 800e10c:	80bb      	strh	r3, [r7, #4]
 800e10e:	e023      	b.n	800e158 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	895a      	ldrh	r2, [r3, #10]
 800e114:	88bb      	ldrh	r3, [r7, #4]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e11a:	8b3a      	ldrh	r2, [r7, #24]
 800e11c:	88fb      	ldrh	r3, [r7, #6]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d901      	bls.n	800e126 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800e122:	88fb      	ldrh	r3, [r7, #6]
 800e124:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800e126:	8b7b      	ldrh	r3, [r7, #26]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	18d0      	adds	r0, r2, r3
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	88bb      	ldrh	r3, [r7, #4]
 800e132:	4413      	add	r3, r2
 800e134:	8b3a      	ldrh	r2, [r7, #24]
 800e136:	4619      	mov	r1, r3
 800e138:	f009 fc17 	bl	801796a <memcpy>
      copied_total += buf_copy_len;
 800e13c:	8afa      	ldrh	r2, [r7, #22]
 800e13e:	8b3b      	ldrh	r3, [r7, #24]
 800e140:	4413      	add	r3, r2
 800e142:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800e144:	8b7a      	ldrh	r2, [r7, #26]
 800e146:	8b3b      	ldrh	r3, [r7, #24]
 800e148:	4413      	add	r3, r2
 800e14a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800e14c:	88fa      	ldrh	r2, [r7, #6]
 800e14e:	8b3b      	ldrh	r3, [r7, #24]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	88fb      	ldrh	r3, [r7, #6]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d002      	beq.n	800e16a <pbuf_copy_partial+0xda>
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1c4      	bne.n	800e0f4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800e16a:	8afb      	ldrh	r3, [r7, #22]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	08018d74 	.word	0x08018d74
 800e178:	080191a4 	.word	0x080191a4
 800e17c:	08018dc0 	.word	0x08018dc0
 800e180:	080191c4 	.word	0x080191c4

0800e184 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e188:	bf00      	nop
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bc80      	pop	{r7}
 800e18e:	4770      	bx	lr

0800e190 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e194:	f000 fdf0 	bl	800ed78 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e198:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <tcp_tmr+0x28>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	3301      	adds	r3, #1
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	4b05      	ldr	r3, [pc, #20]	; (800e1b8 <tcp_tmr+0x28>)
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <tcp_tmr+0x28>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 0301 	and.w	r3, r3, #1
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e1b0:	f000 fb22 	bl	800e7f8 <tcp_slowtmr>
  }
}
 800e1b4:	bf00      	nop
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20000139 	.word	0x20000139

0800e1bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	e00a      	b.n	800e1e2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d102      	bne.n	800e1dc <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1f1      	bne.n	800e1cc <tcp_remove_listener+0x10>
      }
   }
}
 800e1e8:	bf00      	nop
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bc80      	pop	{r7}
 800e1f0:	4770      	bx	lr
	...

0800e1f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d105      	bne.n	800e20e <tcp_listen_closed+0x1a>
 800e202:	4b13      	ldr	r3, [pc, #76]	; (800e250 <tcp_listen_closed+0x5c>)
 800e204:	22c0      	movs	r2, #192	; 0xc0
 800e206:	4913      	ldr	r1, [pc, #76]	; (800e254 <tcp_listen_closed+0x60>)
 800e208:	4813      	ldr	r0, [pc, #76]	; (800e258 <tcp_listen_closed+0x64>)
 800e20a:	f009 fc67 	bl	8017adc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	7d1b      	ldrb	r3, [r3, #20]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d005      	beq.n	800e222 <tcp_listen_closed+0x2e>
 800e216:	4b0e      	ldr	r3, [pc, #56]	; (800e250 <tcp_listen_closed+0x5c>)
 800e218:	22c1      	movs	r2, #193	; 0xc1
 800e21a:	4910      	ldr	r1, [pc, #64]	; (800e25c <tcp_listen_closed+0x68>)
 800e21c:	480e      	ldr	r0, [pc, #56]	; (800e258 <tcp_listen_closed+0x64>)
 800e21e:	f009 fc5d 	bl	8017adc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e222:	2301      	movs	r3, #1
 800e224:	60fb      	str	r3, [r7, #12]
 800e226:	e00b      	b.n	800e240 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800e228:	4a0d      	ldr	r2, [pc, #52]	; (800e260 <tcp_listen_closed+0x6c>)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6879      	ldr	r1, [r7, #4]
 800e234:	4618      	mov	r0, r3
 800e236:	f7ff ffc1 	bl	800e1bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b03      	cmp	r3, #3
 800e244:	d9f0      	bls.n	800e228 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	080192f8 	.word	0x080192f8
 800e254:	08019328 	.word	0x08019328
 800e258:	08019334 	.word	0x08019334
 800e25c:	0801935c 	.word	0x0801935c
 800e260:	0801acd0 	.word	0x0801acd0

0800e264 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e264:	b5b0      	push	{r4, r5, r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af02      	add	r7, sp, #8
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	460b      	mov	r3, r1
 800e26e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d075      	beq.n	800e362 <tcp_close_shutdown+0xfe>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	7d1b      	ldrb	r3, [r3, #20]
 800e27a:	2b04      	cmp	r3, #4
 800e27c:	d003      	beq.n	800e286 <tcp_close_shutdown+0x22>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	7d1b      	ldrb	r3, [r3, #20]
 800e282:	2b07      	cmp	r3, #7
 800e284:	d16d      	bne.n	800e362 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d104      	bne.n	800e298 <tcp_close_shutdown+0x34>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e292:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e296:	d064      	beq.n	800e362 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7e9b      	ldrb	r3, [r3, #26]
 800e29c:	f003 0310 	and.w	r3, r3, #16
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <tcp_close_shutdown+0x4e>
 800e2a4:	4b59      	ldr	r3, [pc, #356]	; (800e40c <tcp_close_shutdown+0x1a8>)
 800e2a6:	f240 120f 	movw	r2, #271	; 0x10f
 800e2aa:	4959      	ldr	r1, [pc, #356]	; (800e410 <tcp_close_shutdown+0x1ac>)
 800e2ac:	4859      	ldr	r0, [pc, #356]	; (800e414 <tcp_close_shutdown+0x1b0>)
 800e2ae:	f009 fc15 	bl	8017adc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e2ba:	687c      	ldr	r4, [r7, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	1d1d      	adds	r5, r3, #4
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	8adb      	ldrh	r3, [r3, #22]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	8b12      	ldrh	r2, [r2, #24]
 800e2c8:	9201      	str	r2, [sp, #4]
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	462b      	mov	r3, r5
 800e2ce:	4622      	mov	r2, r4
 800e2d0:	f004 f85e 	bl	8012390 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 ffc5 	bl	800f264 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2da:	4b4f      	ldr	r3, [pc, #316]	; (800e418 <tcp_close_shutdown+0x1b4>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d105      	bne.n	800e2f0 <tcp_close_shutdown+0x8c>
 800e2e4:	4b4c      	ldr	r3, [pc, #304]	; (800e418 <tcp_close_shutdown+0x1b4>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	4a4b      	ldr	r2, [pc, #300]	; (800e418 <tcp_close_shutdown+0x1b4>)
 800e2ec:	6013      	str	r3, [r2, #0]
 800e2ee:	e013      	b.n	800e318 <tcp_close_shutdown+0xb4>
 800e2f0:	4b49      	ldr	r3, [pc, #292]	; (800e418 <tcp_close_shutdown+0x1b4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	60fb      	str	r3, [r7, #12]
 800e2f6:	e00c      	b.n	800e312 <tcp_close_shutdown+0xae>
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d104      	bne.n	800e30c <tcp_close_shutdown+0xa8>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68da      	ldr	r2, [r3, #12]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	60da      	str	r2, [r3, #12]
 800e30a:	e005      	b.n	800e318 <tcp_close_shutdown+0xb4>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	60fb      	str	r3, [r7, #12]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1ef      	bne.n	800e2f8 <tcp_close_shutdown+0x94>
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	60da      	str	r2, [r3, #12]
 800e31e:	4b3f      	ldr	r3, [pc, #252]	; (800e41c <tcp_close_shutdown+0x1b8>)
 800e320:	2201      	movs	r2, #1
 800e322:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	7d1b      	ldrb	r3, [r3, #20]
 800e328:	2b04      	cmp	r3, #4
 800e32a:	d10c      	bne.n	800e346 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	220a      	movs	r2, #10
 800e330:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e332:	4b3b      	ldr	r3, [pc, #236]	; (800e420 <tcp_close_shutdown+0x1bc>)
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	60da      	str	r2, [r3, #12]
 800e33a:	4a39      	ldr	r2, [pc, #228]	; (800e420 <tcp_close_shutdown+0x1bc>)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	f004 fa76 	bl	8012830 <tcp_timer_needed>
 800e344:	e00b      	b.n	800e35e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800e346:	4b37      	ldr	r3, [pc, #220]	; (800e424 <tcp_close_shutdown+0x1c0>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d102      	bne.n	800e356 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800e350:	f003 fae8 	bl	8011924 <tcp_trigger_input_pcb_close>
 800e354:	e003      	b.n	800e35e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	2001      	movs	r0, #1
 800e35a:	f7fe ff81 	bl	800d260 <memp_free>
        }
      }
      return ERR_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	e050      	b.n	800e404 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	7d1b      	ldrb	r3, [r3, #20]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d02e      	beq.n	800e3c8 <tcp_close_shutdown+0x164>
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d038      	beq.n	800e3e0 <tcp_close_shutdown+0x17c>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d142      	bne.n	800e3f8 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	8adb      	ldrh	r3, [r3, #22]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d021      	beq.n	800e3be <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e37a:	4b2b      	ldr	r3, [pc, #172]	; (800e428 <tcp_close_shutdown+0x1c4>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	d105      	bne.n	800e390 <tcp_close_shutdown+0x12c>
 800e384:	4b28      	ldr	r3, [pc, #160]	; (800e428 <tcp_close_shutdown+0x1c4>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	4a27      	ldr	r2, [pc, #156]	; (800e428 <tcp_close_shutdown+0x1c4>)
 800e38c:	6013      	str	r3, [r2, #0]
 800e38e:	e013      	b.n	800e3b8 <tcp_close_shutdown+0x154>
 800e390:	4b25      	ldr	r3, [pc, #148]	; (800e428 <tcp_close_shutdown+0x1c4>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	60bb      	str	r3, [r7, #8]
 800e396:	e00c      	b.n	800e3b2 <tcp_close_shutdown+0x14e>
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d104      	bne.n	800e3ac <tcp_close_shutdown+0x148>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68da      	ldr	r2, [r3, #12]
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	60da      	str	r2, [r3, #12]
 800e3aa:	e005      	b.n	800e3b8 <tcp_close_shutdown+0x154>
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	60bb      	str	r3, [r7, #8]
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1ef      	bne.n	800e398 <tcp_close_shutdown+0x134>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f7fe ff4d 	bl	800d260 <memp_free>
    break;
 800e3c6:	e01c      	b.n	800e402 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7ff ff13 	bl	800e1f4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	4816      	ldr	r0, [pc, #88]	; (800e42c <tcp_close_shutdown+0x1c8>)
 800e3d2:	f000 ff89 	bl	800f2e8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	2002      	movs	r0, #2
 800e3da:	f7fe ff41 	bl	800d260 <memp_free>
    break;
 800e3de:	e010      	b.n	800e402 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800e3e0:	6879      	ldr	r1, [r7, #4]
 800e3e2:	480d      	ldr	r0, [pc, #52]	; (800e418 <tcp_close_shutdown+0x1b4>)
 800e3e4:	f000 ff80 	bl	800f2e8 <tcp_pcb_remove>
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <tcp_close_shutdown+0x1b8>)
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800e3ee:	6879      	ldr	r1, [r7, #4]
 800e3f0:	2001      	movs	r0, #1
 800e3f2:	f7fe ff35 	bl	800d260 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800e3f6:	e004      	b.n	800e402 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 f819 	bl	800e430 <tcp_close_shutdown_fin>
 800e3fe:	4603      	mov	r3, r0
 800e400:	e000      	b.n	800e404 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bdb0      	pop	{r4, r5, r7, pc}
 800e40c:	080192f8 	.word	0x080192f8
 800e410:	08019374 	.word	0x08019374
 800e414:	08019334 	.word	0x08019334
 800e418:	20008b70 	.word	0x20008b70
 800e41c:	20008b6c 	.word	0x20008b6c
 800e420:	20008b80 	.word	0x20008b80
 800e424:	20008b84 	.word	0x20008b84
 800e428:	20008b7c 	.word	0x20008b7c
 800e42c:	20008b78 	.word	0x20008b78

0800e430 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d106      	bne.n	800e44c <tcp_close_shutdown_fin+0x1c>
 800e43e:	4b2c      	ldr	r3, [pc, #176]	; (800e4f0 <tcp_close_shutdown_fin+0xc0>)
 800e440:	f240 124d 	movw	r2, #333	; 0x14d
 800e444:	492b      	ldr	r1, [pc, #172]	; (800e4f4 <tcp_close_shutdown_fin+0xc4>)
 800e446:	482c      	ldr	r0, [pc, #176]	; (800e4f8 <tcp_close_shutdown_fin+0xc8>)
 800e448:	f009 fb48 	bl	8017adc <iprintf>

  switch (pcb->state) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	7d1b      	ldrb	r3, [r3, #20]
 800e450:	2b04      	cmp	r3, #4
 800e452:	d010      	beq.n	800e476 <tcp_close_shutdown_fin+0x46>
 800e454:	2b07      	cmp	r3, #7
 800e456:	d01b      	beq.n	800e490 <tcp_close_shutdown_fin+0x60>
 800e458:	2b03      	cmp	r3, #3
 800e45a:	d126      	bne.n	800e4aa <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f003 faed 	bl	8011a3c <tcp_send_fin>
 800e462:	4603      	mov	r3, r0
 800e464:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d11f      	bne.n	800e4ae <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2205      	movs	r2, #5
 800e472:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e474:	e01b      	b.n	800e4ae <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f003 fae0 	bl	8011a3c <tcp_send_fin>
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d114      	bne.n	800e4b2 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2205      	movs	r2, #5
 800e48c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e48e:	e010      	b.n	800e4b2 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f003 fad3 	bl	8011a3c <tcp_send_fin>
 800e496:	4603      	mov	r3, r0
 800e498:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d109      	bne.n	800e4b6 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2209      	movs	r2, #9
 800e4a6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e4a8:	e005      	b.n	800e4b6 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	e01c      	b.n	800e4e8 <tcp_close_shutdown_fin+0xb8>
    break;
 800e4ae:	bf00      	nop
 800e4b0:	e002      	b.n	800e4b8 <tcp_close_shutdown_fin+0x88>
    break;
 800e4b2:	bf00      	nop
 800e4b4:	e000      	b.n	800e4b8 <tcp_close_shutdown_fin+0x88>
    break;
 800e4b6:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d103      	bne.n	800e4c8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f003 fcdb 	bl	8011e7c <tcp_output>
 800e4c6:	e00d      	b.n	800e4e4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e4c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4d0:	d108      	bne.n	800e4e4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	7e9b      	ldrb	r3, [r3, #26]
 800e4d6:	f043 0308 	orr.w	r3, r3, #8
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e001      	b.n	800e4e8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e4e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	080192f8 	.word	0x080192f8
 800e4f4:	08019328 	.word	0x08019328
 800e4f8:	08019334 	.word	0x08019334

0800e4fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	7d1b      	ldrb	r3, [r3, #20]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d006      	beq.n	800e51a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	7e9b      	ldrb	r3, [r3, #26]
 800e510:	f043 0310 	orr.w	r3, r3, #16
 800e514:	b2da      	uxtb	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e51a:	2101      	movs	r1, #1
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7ff fea1 	bl	800e264 <tcp_close_shutdown>
 800e522:	4603      	mov	r3, r0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b08c      	sub	sp, #48	; 0x30
 800e530:	af02      	add	r7, sp, #8
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7d1b      	ldrb	r3, [r3, #20]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d106      	bne.n	800e54c <tcp_abandon+0x20>
 800e53e:	4b4d      	ldr	r3, [pc, #308]	; (800e674 <tcp_abandon+0x148>)
 800e540:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e544:	494c      	ldr	r1, [pc, #304]	; (800e678 <tcp_abandon+0x14c>)
 800e546:	484d      	ldr	r0, [pc, #308]	; (800e67c <tcp_abandon+0x150>)
 800e548:	f009 fac8 	bl	8017adc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	7d1b      	ldrb	r3, [r3, #20]
 800e550:	2b0a      	cmp	r3, #10
 800e552:	d108      	bne.n	800e566 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e554:	6879      	ldr	r1, [r7, #4]
 800e556:	484a      	ldr	r0, [pc, #296]	; (800e680 <tcp_abandon+0x154>)
 800e558:	f000 fec6 	bl	800f2e8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e55c:	6879      	ldr	r1, [r7, #4]
 800e55e:	2001      	movs	r0, #1
 800e560:	f7fe fe7e 	bl	800d260 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800e564:	e081      	b.n	800e66a <tcp_abandon+0x13e>
    int send_rst = 0;
 800e566:	2300      	movs	r3, #0
 800e568:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e572:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e578:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e580:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7d1b      	ldrb	r3, [r3, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d126      	bne.n	800e5de <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	8adb      	ldrh	r3, [r3, #22]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d02e      	beq.n	800e5f6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e598:	4b3a      	ldr	r3, [pc, #232]	; (800e684 <tcp_abandon+0x158>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d105      	bne.n	800e5ae <tcp_abandon+0x82>
 800e5a2:	4b38      	ldr	r3, [pc, #224]	; (800e684 <tcp_abandon+0x158>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	4a36      	ldr	r2, [pc, #216]	; (800e684 <tcp_abandon+0x158>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	e013      	b.n	800e5d6 <tcp_abandon+0xaa>
 800e5ae:	4b35      	ldr	r3, [pc, #212]	; (800e684 <tcp_abandon+0x158>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	61fb      	str	r3, [r7, #28]
 800e5b4:	e00c      	b.n	800e5d0 <tcp_abandon+0xa4>
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d104      	bne.n	800e5ca <tcp_abandon+0x9e>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68da      	ldr	r2, [r3, #12]
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	60da      	str	r2, [r3, #12]
 800e5c8:	e005      	b.n	800e5d6 <tcp_abandon+0xaa>
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	61fb      	str	r3, [r7, #28]
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1ef      	bne.n	800e5b6 <tcp_abandon+0x8a>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	60da      	str	r2, [r3, #12]
 800e5dc:	e00b      	b.n	800e5f6 <tcp_abandon+0xca>
      send_rst = reset;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	8adb      	ldrh	r3, [r3, #22]
 800e5e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5e8:	6879      	ldr	r1, [r7, #4]
 800e5ea:	4827      	ldr	r0, [pc, #156]	; (800e688 <tcp_abandon+0x15c>)
 800e5ec:	f000 fe7c 	bl	800f2e8 <tcp_pcb_remove>
 800e5f0:	4b26      	ldr	r3, [pc, #152]	; (800e68c <tcp_abandon+0x160>)
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e602:	4618      	mov	r0, r3
 800e604:	f000 fc85 	bl	800ef12 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d004      	beq.n	800e61a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e614:	4618      	mov	r0, r3
 800e616:	f000 fc7c 	bl	800ef12 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d004      	beq.n	800e62c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e626:	4618      	mov	r0, r3
 800e628:	f000 fc73 	bl	800ef12 <tcp_segs_free>
    if (send_rst) {
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00c      	beq.n	800e64c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	1d19      	adds	r1, r3, #4
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	8b1b      	ldrh	r3, [r3, #24]
 800e63c:	9301      	str	r3, [sp, #4]
 800e63e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	460b      	mov	r3, r1
 800e644:	6979      	ldr	r1, [r7, #20]
 800e646:	69b8      	ldr	r0, [r7, #24]
 800e648:	f003 fea2 	bl	8012390 <tcp_rst>
    last_state = pcb->state;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	7d1b      	ldrb	r3, [r3, #20]
 800e650:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e652:	6879      	ldr	r1, [r7, #4]
 800e654:	2001      	movs	r0, #1
 800e656:	f7fe fe03 	bl	800d260 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d004      	beq.n	800e66a <tcp_abandon+0x13e>
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	f06f 010c 	mvn.w	r1, #12
 800e666:	68f8      	ldr	r0, [r7, #12]
 800e668:	4798      	blx	r3
}
 800e66a:	bf00      	nop
 800e66c:	3728      	adds	r7, #40	; 0x28
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	080192f8 	.word	0x080192f8
 800e678:	08019390 	.word	0x08019390
 800e67c:	08019334 	.word	0x08019334
 800e680:	20008b80 	.word	0x20008b80
 800e684:	20008b7c 	.word	0x20008b7c
 800e688:	20008b70 	.word	0x20008b70
 800e68c:	20008b6c 	.word	0x20008b6c

0800e690 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e698:	2101      	movs	r1, #1
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff ff46 	bl	800e52c <tcp_abandon>
}
 800e6a0:	bf00      	nop
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e6b8:	4413      	add	r3, r2
 800e6ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e6c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e6c8:	bf28      	it	cs
 800e6ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e6ce:	b292      	uxth	r2, r2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	db08      	blt.n	800e6ec <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	e020      	b.n	800e72e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	dd03      	ble.n	800e702 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e700:	e014      	b.n	800e72c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e714:	d306      	bcc.n	800e724 <tcp_update_rcv_ann_wnd+0x7c>
 800e716:	4b08      	ldr	r3, [pc, #32]	; (800e738 <tcp_update_rcv_ann_wnd+0x90>)
 800e718:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e71c:	4907      	ldr	r1, [pc, #28]	; (800e73c <tcp_update_rcv_ann_wnd+0x94>)
 800e71e:	4808      	ldr	r0, [pc, #32]	; (800e740 <tcp_update_rcv_ann_wnd+0x98>)
 800e720:	f009 f9dc 	bl	8017adc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e72c:	2300      	movs	r3, #0
  }
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	080192f8 	.word	0x080192f8
 800e73c:	08019410 	.word	0x08019410
 800e740:	08019334 	.word	0x08019334

0800e744 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d106      	bne.n	800e766 <tcp_recved+0x22>
 800e758:	4b23      	ldr	r3, [pc, #140]	; (800e7e8 <tcp_recved+0xa4>)
 800e75a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e75e:	4923      	ldr	r1, [pc, #140]	; (800e7ec <tcp_recved+0xa8>)
 800e760:	4823      	ldr	r0, [pc, #140]	; (800e7f0 <tcp_recved+0xac>)
 800e762:	f009 f9bb 	bl	8017adc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e76a:	887b      	ldrh	r3, [r7, #2]
 800e76c:	4413      	add	r3, r2
 800e76e:	b29a      	uxth	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e778:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e77c:	d904      	bls.n	800e788 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e784:	851a      	strh	r2, [r3, #40]	; 0x28
 800e786:	e017      	b.n	800e7b8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d113      	bne.n	800e7b8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	2b07      	cmp	r3, #7
 800e796:	d003      	beq.n	800e7a0 <tcp_recved+0x5c>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	7d1b      	ldrb	r3, [r3, #20]
 800e79c:	2b09      	cmp	r3, #9
 800e79e:	d104      	bne.n	800e7aa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e7a8:	e006      	b.n	800e7b8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e7aa:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <tcp_recved+0xa4>)
 800e7ac:	f240 322d 	movw	r2, #813	; 0x32d
 800e7b0:	4910      	ldr	r1, [pc, #64]	; (800e7f4 <tcp_recved+0xb0>)
 800e7b2:	480f      	ldr	r0, [pc, #60]	; (800e7f0 <tcp_recved+0xac>)
 800e7b4:	f009 f992 	bl	8017adc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ff75 	bl	800e6a8 <tcp_update_rcv_ann_wnd>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e7c8:	db09      	blt.n	800e7de <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	7e9b      	ldrb	r3, [r3, #26]
 800e7ce:	f043 0302 	orr.w	r3, r3, #2
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f003 fb4f 	bl	8011e7c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	080192f8 	.word	0x080192f8
 800e7ec:	0801942c 	.word	0x0801942c
 800e7f0:	08019334 	.word	0x08019334
 800e7f4:	08019454 	.word	0x08019454

0800e7f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e7f8:	b5b0      	push	{r4, r5, r7, lr}
 800e7fa:	b08c      	sub	sp, #48	; 0x30
 800e7fc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e802:	4b97      	ldr	r3, [pc, #604]	; (800ea60 <tcp_slowtmr+0x268>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3301      	adds	r3, #1
 800e808:	4a95      	ldr	r2, [pc, #596]	; (800ea60 <tcp_slowtmr+0x268>)
 800e80a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e80c:	4b95      	ldr	r3, [pc, #596]	; (800ea64 <tcp_slowtmr+0x26c>)
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	3301      	adds	r3, #1
 800e812:	b2da      	uxtb	r2, r3
 800e814:	4b93      	ldr	r3, [pc, #588]	; (800ea64 <tcp_slowtmr+0x26c>)
 800e816:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e81c:	4b92      	ldr	r3, [pc, #584]	; (800ea68 <tcp_slowtmr+0x270>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e822:	e227      	b.n	800ec74 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e826:	7d1b      	ldrb	r3, [r3, #20]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d106      	bne.n	800e83a <tcp_slowtmr+0x42>
 800e82c:	4b8f      	ldr	r3, [pc, #572]	; (800ea6c <tcp_slowtmr+0x274>)
 800e82e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e832:	498f      	ldr	r1, [pc, #572]	; (800ea70 <tcp_slowtmr+0x278>)
 800e834:	488f      	ldr	r0, [pc, #572]	; (800ea74 <tcp_slowtmr+0x27c>)
 800e836:	f009 f951 	bl	8017adc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	7d1b      	ldrb	r3, [r3, #20]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d106      	bne.n	800e850 <tcp_slowtmr+0x58>
 800e842:	4b8a      	ldr	r3, [pc, #552]	; (800ea6c <tcp_slowtmr+0x274>)
 800e844:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e848:	498b      	ldr	r1, [pc, #556]	; (800ea78 <tcp_slowtmr+0x280>)
 800e84a:	488a      	ldr	r0, [pc, #552]	; (800ea74 <tcp_slowtmr+0x27c>)
 800e84c:	f009 f946 	bl	8017adc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	2b0a      	cmp	r3, #10
 800e856:	d106      	bne.n	800e866 <tcp_slowtmr+0x6e>
 800e858:	4b84      	ldr	r3, [pc, #528]	; (800ea6c <tcp_slowtmr+0x274>)
 800e85a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e85e:	4987      	ldr	r1, [pc, #540]	; (800ea7c <tcp_slowtmr+0x284>)
 800e860:	4884      	ldr	r0, [pc, #528]	; (800ea74 <tcp_slowtmr+0x27c>)
 800e862:	f009 f93b 	bl	8017adc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	7f5a      	ldrb	r2, [r3, #29]
 800e86a:	4b7e      	ldr	r3, [pc, #504]	; (800ea64 <tcp_slowtmr+0x26c>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d103      	bne.n	800e87a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e878:	e1fc      	b.n	800ec74 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e87a:	4b7a      	ldr	r3, [pc, #488]	; (800ea64 <tcp_slowtmr+0x26c>)
 800e87c:	781a      	ldrb	r2, [r3, #0]
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	7d1b      	ldrb	r3, [r3, #20]
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d108      	bne.n	800e8a4 <tcp_slowtmr+0xac>
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e898:	2b05      	cmp	r3, #5
 800e89a:	d903      	bls.n	800e8a4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e89c:	7ffb      	ldrb	r3, [r7, #31]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	77fb      	strb	r3, [r7, #31]
 800e8a2:	e0a2      	b.n	800e9ea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8aa:	2b0b      	cmp	r3, #11
 800e8ac:	d903      	bls.n	800e8b6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e8ae:	7ffb      	ldrb	r3, [r7, #31]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	77fb      	strb	r3, [r7, #31]
 800e8b4:	e099      	b.n	800e9ea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d032      	beq.n	800e926 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	4a6d      	ldr	r2, [pc, #436]	; (800ea80 <tcp_slowtmr+0x288>)
 800e8ca:	5cd3      	ldrb	r3, [r2, r3]
 800e8cc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e8d4:	7cfa      	ldrb	r2, [r7, #19]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d907      	bls.n	800e8ea <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e8f0:	7cfa      	ldrb	r2, [r7, #19]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d879      	bhi.n	800e9ea <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e8f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8f8:	f003 feda 	bl	80126b0 <tcp_zero_window_probe>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d173      	bne.n	800e9ea <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e904:	2200      	movs	r2, #0
 800e906:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e910:	2b06      	cmp	r3, #6
 800e912:	d86a      	bhi.n	800e9ea <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e91a:	3301      	adds	r3, #1
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e924:	e061      	b.n	800e9ea <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	db08      	blt.n	800e942 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e936:	b29b      	uxth	r3, r3
 800e938:	3301      	adds	r3, #1
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	b21a      	sxth	r2, r3
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e946:	2b00      	cmp	r3, #0
 800e948:	d04f      	beq.n	800e9ea <tcp_slowtmr+0x1f2>
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e956:	429a      	cmp	r2, r3
 800e958:	db47      	blt.n	800e9ea <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	7d1b      	ldrb	r3, [r3, #20]
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d018      	beq.n	800e994 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e968:	2b0c      	cmp	r3, #12
 800e96a:	bf28      	it	cs
 800e96c:	230c      	movcs	r3, #12
 800e96e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e976:	10db      	asrs	r3, r3, #3
 800e978:	b21b      	sxth	r3, r3
 800e97a:	461a      	mov	r2, r3
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e982:	4413      	add	r3, r2
 800e984:	7dfa      	ldrb	r2, [r7, #23]
 800e986:	493f      	ldr	r1, [pc, #252]	; (800ea84 <tcp_slowtmr+0x28c>)
 800e988:	5c8a      	ldrb	r2, [r1, r2]
 800e98a:	4093      	lsls	r3, r2
 800e98c:	b21a      	sxth	r2, r3
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	2200      	movs	r2, #0
 800e998:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	bf28      	it	cs
 800e9aa:	4613      	movcs	r3, r2
 800e9ac:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e9ae:	8abb      	ldrh	r3, [r7, #20]
 800e9b0:	085b      	lsrs	r3, r3, #1
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d206      	bcs.n	800e9da <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9d0:	005b      	lsls	r3, r3, #1
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9e6:	f003 fd49 	bl	801247c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	7d1b      	ldrb	r3, [r3, #20]
 800e9ee:	2b06      	cmp	r3, #6
 800e9f0:	d10f      	bne.n	800ea12 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	7e9b      	ldrb	r3, [r3, #26]
 800e9f6:	f003 0310 	and.w	r3, r3, #16
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d009      	beq.n	800ea12 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e9fe:	4b18      	ldr	r3, [pc, #96]	; (800ea60 <tcp_slowtmr+0x268>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	2b28      	cmp	r3, #40	; 0x28
 800ea0a:	d902      	bls.n	800ea12 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ea0c:	7ffb      	ldrb	r3, [r7, #31]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea14:	7a1b      	ldrb	r3, [r3, #8]
 800ea16:	f003 0308 	and.w	r3, r3, #8
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d05d      	beq.n	800eada <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800ea1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea20:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d003      	beq.n	800ea2e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800ea2a:	2b07      	cmp	r3, #7
 800ea2c:	d155      	bne.n	800eada <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea2e:	4b0c      	ldr	r3, [pc, #48]	; (800ea60 <tcp_slowtmr+0x268>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea3e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ea42:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ea46:	4910      	ldr	r1, [pc, #64]	; (800ea88 <tcp_slowtmr+0x290>)
 800ea48:	fba1 1303 	umull	r1, r3, r1, r3
 800ea4c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d91c      	bls.n	800ea8c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea52:	7ffb      	ldrb	r3, [r7, #31]
 800ea54:	3301      	adds	r3, #1
 800ea56:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800ea58:	7fbb      	ldrb	r3, [r7, #30]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	77bb      	strb	r3, [r7, #30]
 800ea5e:	e03c      	b.n	800eada <tcp_slowtmr+0x2e2>
 800ea60:	20008b74 	.word	0x20008b74
 800ea64:	2000013a 	.word	0x2000013a
 800ea68:	20008b70 	.word	0x20008b70
 800ea6c:	080192f8 	.word	0x080192f8
 800ea70:	080194a8 	.word	0x080194a8
 800ea74:	08019334 	.word	0x08019334
 800ea78:	080194d4 	.word	0x080194d4
 800ea7c:	08019500 	.word	0x08019500
 800ea80:	0801acc8 	.word	0x0801acc8
 800ea84:	0801acb8 	.word	0x0801acb8
 800ea88:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea8c:	4b97      	ldr	r3, [pc, #604]	; (800ecec <tcp_slowtmr+0x4f4>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	4b92      	ldr	r3, [pc, #584]	; (800ecf0 <tcp_slowtmr+0x4f8>)
 800eaa6:	fb03 f300 	mul.w	r3, r3, r0
 800eaaa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800eaac:	4991      	ldr	r1, [pc, #580]	; (800ecf4 <tcp_slowtmr+0x4fc>)
 800eaae:	fba1 1303 	umull	r1, r3, r1, r3
 800eab2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d910      	bls.n	800eada <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800eab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaba:	f003 fdbc 	bl	8012636 <tcp_keepalive>
 800eabe:	4603      	mov	r3, r0
 800eac0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800eac2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d107      	bne.n	800eada <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800eaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eacc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ead0:	3301      	adds	r3, #1
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d016      	beq.n	800eb10 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800eae2:	4b82      	ldr	r3, [pc, #520]	; (800ecec <tcp_slowtmr+0x4f4>)
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	1ad2      	subs	r2, r2, r3
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	440b      	add	r3, r1
 800eafa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d307      	bcc.n	800eb10 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fa04 	bl	800ef12 <tcp_segs_free>
      pcb->ooseq = NULL;
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	7d1b      	ldrb	r3, [r3, #20]
 800eb14:	2b03      	cmp	r3, #3
 800eb16:	d109      	bne.n	800eb2c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb18:	4b74      	ldr	r3, [pc, #464]	; (800ecec <tcp_slowtmr+0x4f4>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2b28      	cmp	r3, #40	; 0x28
 800eb24:	d902      	bls.n	800eb2c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eb26:	7ffb      	ldrb	r3, [r7, #31]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	7d1b      	ldrb	r3, [r3, #20]
 800eb30:	2b09      	cmp	r3, #9
 800eb32:	d109      	bne.n	800eb48 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb34:	4b6d      	ldr	r3, [pc, #436]	; (800ecec <tcp_slowtmr+0x4f4>)
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	6a1b      	ldr	r3, [r3, #32]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	2bf0      	cmp	r3, #240	; 0xf0
 800eb40:	d902      	bls.n	800eb48 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800eb42:	7ffb      	ldrb	r3, [r7, #31]
 800eb44:	3301      	adds	r3, #1
 800eb46:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb48:	7ffb      	ldrb	r3, [r7, #31]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d05d      	beq.n	800ec0a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb54:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eb56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb58:	f000 fb84 	bl	800f264 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d010      	beq.n	800eb84 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eb62:	4b65      	ldr	r3, [pc, #404]	; (800ecf8 <tcp_slowtmr+0x500>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d106      	bne.n	800eb7a <tcp_slowtmr+0x382>
 800eb6c:	4b63      	ldr	r3, [pc, #396]	; (800ecfc <tcp_slowtmr+0x504>)
 800eb6e:	f240 4289 	movw	r2, #1161	; 0x489
 800eb72:	4963      	ldr	r1, [pc, #396]	; (800ed00 <tcp_slowtmr+0x508>)
 800eb74:	4863      	ldr	r0, [pc, #396]	; (800ed04 <tcp_slowtmr+0x50c>)
 800eb76:	f008 ffb1 	bl	8017adc <iprintf>
        prev->next = pcb->next;
 800eb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7c:	68da      	ldr	r2, [r3, #12]
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	60da      	str	r2, [r3, #12]
 800eb82:	e00f      	b.n	800eba4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eb84:	4b5c      	ldr	r3, [pc, #368]	; (800ecf8 <tcp_slowtmr+0x500>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d006      	beq.n	800eb9c <tcp_slowtmr+0x3a4>
 800eb8e:	4b5b      	ldr	r3, [pc, #364]	; (800ecfc <tcp_slowtmr+0x504>)
 800eb90:	f240 428d 	movw	r2, #1165	; 0x48d
 800eb94:	495c      	ldr	r1, [pc, #368]	; (800ed08 <tcp_slowtmr+0x510>)
 800eb96:	485b      	ldr	r0, [pc, #364]	; (800ed04 <tcp_slowtmr+0x50c>)
 800eb98:	f008 ffa0 	bl	8017adc <iprintf>
        tcp_active_pcbs = pcb->next;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	4a55      	ldr	r2, [pc, #340]	; (800ecf8 <tcp_slowtmr+0x500>)
 800eba2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eba4:	7fbb      	ldrb	r3, [r7, #30]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d010      	beq.n	800ebcc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ebb2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb6:	1d1d      	adds	r5, r3, #4
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	8adb      	ldrh	r3, [r3, #22]
 800ebbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebbe:	8b12      	ldrh	r2, [r2, #24]
 800ebc0:	9201      	str	r2, [sp, #4]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	462b      	mov	r3, r5
 800ebc6:	4622      	mov	r2, r4
 800ebc8:	f003 fbe2 	bl	8012390 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	7d1b      	ldrb	r3, [r3, #20]
 800ebd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	2001      	movs	r0, #1
 800ebe6:	f7fe fb3b 	bl	800d260 <memp_free>

      tcp_active_pcbs_changed = 0;
 800ebea:	4b48      	ldr	r3, [pc, #288]	; (800ed0c <tcp_slowtmr+0x514>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d004      	beq.n	800ec00 <tcp_slowtmr+0x408>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f06f 010c 	mvn.w	r1, #12
 800ebfc:	68b8      	ldr	r0, [r7, #8]
 800ebfe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ec00:	4b42      	ldr	r3, [pc, #264]	; (800ed0c <tcp_slowtmr+0x514>)
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d035      	beq.n	800ec74 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800ec08:	e606      	b.n	800e818 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ec0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	7edb      	ldrb	r3, [r3, #27]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	7eda      	ldrb	r2, [r3, #27]
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	7f1b      	ldrb	r3, [r3, #28]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d323      	bcc.n	800ec74 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ec32:	4b36      	ldr	r3, [pc, #216]	; (800ed0c <tcp_slowtmr+0x514>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <tcp_slowtmr+0x460>
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec48:	6a3a      	ldr	r2, [r7, #32]
 800ec4a:	6912      	ldr	r2, [r2, #16]
 800ec4c:	6a39      	ldr	r1, [r7, #32]
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	4603      	mov	r3, r0
 800ec54:	777b      	strb	r3, [r7, #29]
 800ec56:	e001      	b.n	800ec5c <tcp_slowtmr+0x464>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800ec5c:	4b2b      	ldr	r3, [pc, #172]	; (800ed0c <tcp_slowtmr+0x514>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d000      	beq.n	800ec66 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800ec64:	e5d8      	b.n	800e818 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ec66:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d102      	bne.n	800ec74 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800ec6e:	6a38      	ldr	r0, [r7, #32]
 800ec70:	f003 f904 	bl	8011e7c <tcp_output>
  while (pcb != NULL) {
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f47f add4 	bne.w	800e824 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800ec80:	4b23      	ldr	r3, [pc, #140]	; (800ed10 <tcp_slowtmr+0x518>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ec86:	e068      	b.n	800ed5a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8a:	7d1b      	ldrb	r3, [r3, #20]
 800ec8c:	2b0a      	cmp	r3, #10
 800ec8e:	d006      	beq.n	800ec9e <tcp_slowtmr+0x4a6>
 800ec90:	4b1a      	ldr	r3, [pc, #104]	; (800ecfc <tcp_slowtmr+0x504>)
 800ec92:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ec96:	491f      	ldr	r1, [pc, #124]	; (800ed14 <tcp_slowtmr+0x51c>)
 800ec98:	481a      	ldr	r0, [pc, #104]	; (800ed04 <tcp_slowtmr+0x50c>)
 800ec9a:	f008 ff1f 	bl	8017adc <iprintf>
    pcb_remove = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eca2:	4b12      	ldr	r3, [pc, #72]	; (800ecec <tcp_slowtmr+0x4f4>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	2bf0      	cmp	r3, #240	; 0xf0
 800ecae:	d902      	bls.n	800ecb6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800ecb0:	7ffb      	ldrb	r3, [r7, #31]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ecb6:	7ffb      	ldrb	r3, [r7, #31]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d049      	beq.n	800ed50 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ecbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecbe:	f000 fad1 	bl	800f264 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d029      	beq.n	800ed1c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ecc8:	4b11      	ldr	r3, [pc, #68]	; (800ed10 <tcp_slowtmr+0x518>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d106      	bne.n	800ece0 <tcp_slowtmr+0x4e8>
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <tcp_slowtmr+0x504>)
 800ecd4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800ecd8:	490f      	ldr	r1, [pc, #60]	; (800ed18 <tcp_slowtmr+0x520>)
 800ecda:	480a      	ldr	r0, [pc, #40]	; (800ed04 <tcp_slowtmr+0x50c>)
 800ecdc:	f008 fefe 	bl	8017adc <iprintf>
        prev->next = pcb->next;
 800ece0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece2:	68da      	ldr	r2, [r3, #12]
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	60da      	str	r2, [r3, #12]
 800ece8:	e028      	b.n	800ed3c <tcp_slowtmr+0x544>
 800ecea:	bf00      	nop
 800ecec:	20008b74 	.word	0x20008b74
 800ecf0:	000124f8 	.word	0x000124f8
 800ecf4:	10624dd3 	.word	0x10624dd3
 800ecf8:	20008b70 	.word	0x20008b70
 800ecfc:	080192f8 	.word	0x080192f8
 800ed00:	08019530 	.word	0x08019530
 800ed04:	08019334 	.word	0x08019334
 800ed08:	0801955c 	.word	0x0801955c
 800ed0c:	20008b6c 	.word	0x20008b6c
 800ed10:	20008b80 	.word	0x20008b80
 800ed14:	08019588 	.word	0x08019588
 800ed18:	080195b8 	.word	0x080195b8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ed1c:	4b12      	ldr	r3, [pc, #72]	; (800ed68 <tcp_slowtmr+0x570>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d006      	beq.n	800ed34 <tcp_slowtmr+0x53c>
 800ed26:	4b11      	ldr	r3, [pc, #68]	; (800ed6c <tcp_slowtmr+0x574>)
 800ed28:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ed2c:	4910      	ldr	r1, [pc, #64]	; (800ed70 <tcp_slowtmr+0x578>)
 800ed2e:	4811      	ldr	r0, [pc, #68]	; (800ed74 <tcp_slowtmr+0x57c>)
 800ed30:	f008 fed4 	bl	8017adc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	4a0b      	ldr	r2, [pc, #44]	; (800ed68 <tcp_slowtmr+0x570>)
 800ed3a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ed3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ed46:	69b9      	ldr	r1, [r7, #24]
 800ed48:	2001      	movs	r0, #1
 800ed4a:	f7fe fa89 	bl	800d260 <memp_free>
 800ed4e:	e004      	b.n	800ed5a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800ed50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed52:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d193      	bne.n	800ec88 <tcp_slowtmr+0x490>
    }
  }
}
 800ed60:	bf00      	nop
 800ed62:	3728      	adds	r7, #40	; 0x28
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bdb0      	pop	{r4, r5, r7, pc}
 800ed68:	20008b80 	.word	0x20008b80
 800ed6c:	080192f8 	.word	0x080192f8
 800ed70:	080195e0 	.word	0x080195e0
 800ed74:	08019334 	.word	0x08019334

0800ed78 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ed7e:	4b2d      	ldr	r3, [pc, #180]	; (800ee34 <tcp_fasttmr+0xbc>)
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	3301      	adds	r3, #1
 800ed84:	b2da      	uxtb	r2, r3
 800ed86:	4b2b      	ldr	r3, [pc, #172]	; (800ee34 <tcp_fasttmr+0xbc>)
 800ed88:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ed8a:	4b2b      	ldr	r3, [pc, #172]	; (800ee38 <tcp_fasttmr+0xc0>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed90:	e048      	b.n	800ee24 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7f5a      	ldrb	r2, [r3, #29]
 800ed96:	4b27      	ldr	r3, [pc, #156]	; (800ee34 <tcp_fasttmr+0xbc>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d03f      	beq.n	800ee1e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ed9e:	4b25      	ldr	r3, [pc, #148]	; (800ee34 <tcp_fasttmr+0xbc>)
 800eda0:	781a      	ldrb	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	7e9b      	ldrb	r3, [r3, #26]
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d010      	beq.n	800edd4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	7e9b      	ldrb	r3, [r3, #26]
 800edb6:	f043 0302 	orr.w	r3, r3, #2
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f003 f85b 	bl	8011e7c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	7e9b      	ldrb	r3, [r3, #26]
 800edca:	f023 0303 	bic.w	r3, r3, #3
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	7e9b      	ldrb	r3, [r3, #26]
 800edd8:	f003 0308 	and.w	r3, r3, #8
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d009      	beq.n	800edf4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	7e9b      	ldrb	r3, [r3, #26]
 800ede4:	f023 0308 	bic.w	r3, r3, #8
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7ff fb1e 	bl	800e430 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00a      	beq.n	800ee18 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ee02:	4b0e      	ldr	r3, [pc, #56]	; (800ee3c <tcp_fasttmr+0xc4>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f819 	bl	800ee40 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <tcp_fasttmr+0xc4>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d000      	beq.n	800ee18 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ee16:	e7b8      	b.n	800ed8a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	607b      	str	r3, [r7, #4]
 800ee1c:	e002      	b.n	800ee24 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d1b3      	bne.n	800ed92 <tcp_fasttmr+0x1a>
    }
  }
}
 800ee2a:	bf00      	nop
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	2000013a 	.word	0x2000013a
 800ee38:	20008b70 	.word	0x20008b70
 800ee3c:	20008b6c 	.word	0x20008b6c

0800ee40 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ee40:	b590      	push	{r4, r7, lr}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee4c:	7b5b      	ldrb	r3, [r3, #13]
 800ee4e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee54:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00b      	beq.n	800ee7e <tcp_process_refused_data+0x3e>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6918      	ldr	r0, [r3, #16]
 800ee70:	2300      	movs	r3, #0
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	6879      	ldr	r1, [r7, #4]
 800ee76:	47a0      	blx	r4
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73fb      	strb	r3, [r7, #15]
 800ee7c:	e007      	b.n	800ee8e <tcp_process_refused_data+0x4e>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	68ba      	ldr	r2, [r7, #8]
 800ee82:	6879      	ldr	r1, [r7, #4]
 800ee84:	2000      	movs	r0, #0
 800ee86:	f000 f88c 	bl	800efa2 <tcp_recv_null>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ee8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d12a      	bne.n	800eeec <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ee96:	7bbb      	ldrb	r3, [r7, #14]
 800ee98:	f003 0320 	and.w	r3, r3, #32
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d033      	beq.n	800ef08 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eea4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eea8:	d005      	beq.n	800eeb6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeae:	3301      	adds	r3, #1
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00b      	beq.n	800eed8 <tcp_process_refused_data+0x98>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6918      	ldr	r0, [r3, #16]
 800eeca:	2300      	movs	r3, #0
 800eecc:	2200      	movs	r2, #0
 800eece:	6879      	ldr	r1, [r7, #4]
 800eed0:	47a0      	blx	r4
 800eed2:	4603      	mov	r3, r0
 800eed4:	73fb      	strb	r3, [r7, #15]
 800eed6:	e001      	b.n	800eedc <tcp_process_refused_data+0x9c>
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee0:	f113 0f0d 	cmn.w	r3, #13
 800eee4:	d110      	bne.n	800ef08 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800eee6:	f06f 030c 	mvn.w	r3, #12
 800eeea:	e00e      	b.n	800ef0a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800eeec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eef0:	f113 0f0d 	cmn.w	r3, #13
 800eef4:	d102      	bne.n	800eefc <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eef6:	f06f 030c 	mvn.w	r3, #12
 800eefa:	e006      	b.n	800ef0a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	68ba      	ldr	r2, [r7, #8]
 800ef00:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ef02:	f06f 0304 	mvn.w	r3, #4
 800ef06:	e000      	b.n	800ef0a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ef08:	2300      	movs	r3, #0
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3714      	adds	r7, #20
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd90      	pop	{r4, r7, pc}

0800ef12 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ef1a:	e007      	b.n	800ef2c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f809 	bl	800ef3a <tcp_seg_free>
    seg = next;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1f4      	bne.n	800ef1c <tcp_segs_free+0xa>
  }
}
 800ef32:	bf00      	nop
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b082      	sub	sp, #8
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00c      	beq.n	800ef62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d004      	beq.n	800ef5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fe fe9d 	bl	800dc94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ef5a:	6879      	ldr	r1, [r7, #4]
 800ef5c:	2003      	movs	r0, #3
 800ef5e:	f7fe f97f 	bl	800d260 <memp_free>
  }
}
 800ef62:	bf00      	nop
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ef72:	2003      	movs	r0, #3
 800ef74:	f7fe f928 	bl	800d1c8 <memp_malloc>
 800ef78:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <tcp_seg_copy+0x1a>
    return NULL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	e00a      	b.n	800ef9a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ef84:	2210      	movs	r2, #16
 800ef86:	6879      	ldr	r1, [r7, #4]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f008 fcee 	bl	801796a <memcpy>
  pbuf_ref(cseg->p);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fe ff28 	bl	800dde8 <pbuf_ref>
  return cseg;
 800ef98:	68fb      	ldr	r3, [r7, #12]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3710      	adds	r7, #16
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b084      	sub	sp, #16
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d009      	beq.n	800efca <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	891b      	ldrh	r3, [r3, #8]
 800efba:	4619      	mov	r1, r3
 800efbc:	68b8      	ldr	r0, [r7, #8]
 800efbe:	f7ff fbc1 	bl	800e744 <tcp_recved>
    pbuf_free(p);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7fe fe66 	bl	800dc94 <pbuf_free>
 800efc8:	e008      	b.n	800efdc <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800efca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d104      	bne.n	800efdc <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800efd2:	68b8      	ldr	r0, [r7, #8]
 800efd4:	f7ff fa92 	bl	800e4fc <tcp_close>
 800efd8:	4603      	mov	r3, r0
 800efda:	e000      	b.n	800efde <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
	...

0800efe8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	db01      	blt.n	800effe <tcp_kill_prio+0x16>
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	e000      	b.n	800f000 <tcp_kill_prio+0x18>
 800effe:	237f      	movs	r3, #127	; 0x7f
 800f000:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f00a:	4b16      	ldr	r3, [pc, #88]	; (800f064 <tcp_kill_prio+0x7c>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	617b      	str	r3, [r7, #20]
 800f010:	e01a      	b.n	800f048 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	7d5b      	ldrb	r3, [r3, #21]
 800f016:	7afa      	ldrb	r2, [r7, #11]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d312      	bcc.n	800f042 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f01c:	4b12      	ldr	r3, [pc, #72]	; (800f068 <tcp_kill_prio+0x80>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	6a1b      	ldr	r3, [r3, #32]
 800f024:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800f026:	68fa      	ldr	r2, [r7, #12]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d80a      	bhi.n	800f042 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <tcp_kill_prio+0x80>)
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	6a1b      	ldr	r3, [r3, #32]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	7d5b      	ldrb	r3, [r3, #21]
 800f040:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1e1      	bne.n	800f012 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f054:	6938      	ldr	r0, [r7, #16]
 800f056:	f7ff fb1b 	bl	800e690 <tcp_abort>
  }
}
 800f05a:	bf00      	nop
 800f05c:	3718      	adds	r7, #24
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	20008b70 	.word	0x20008b70
 800f068:	20008b74 	.word	0x20008b74

0800f06c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	2b08      	cmp	r3, #8
 800f07a:	d009      	beq.n	800f090 <tcp_kill_state+0x24>
 800f07c:	79fb      	ldrb	r3, [r7, #7]
 800f07e:	2b09      	cmp	r3, #9
 800f080:	d006      	beq.n	800f090 <tcp_kill_state+0x24>
 800f082:	4b1a      	ldr	r3, [pc, #104]	; (800f0ec <tcp_kill_state+0x80>)
 800f084:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f088:	4919      	ldr	r1, [pc, #100]	; (800f0f0 <tcp_kill_state+0x84>)
 800f08a:	481a      	ldr	r0, [pc, #104]	; (800f0f4 <tcp_kill_state+0x88>)
 800f08c:	f008 fd26 	bl	8017adc <iprintf>

  inactivity = 0;
 800f090:	2300      	movs	r3, #0
 800f092:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f094:	2300      	movs	r3, #0
 800f096:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f098:	4b17      	ldr	r3, [pc, #92]	; (800f0f8 <tcp_kill_state+0x8c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	617b      	str	r3, [r7, #20]
 800f09e:	e017      	b.n	800f0d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	7d1b      	ldrb	r3, [r3, #20]
 800f0a4:	79fa      	ldrb	r2, [r7, #7]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d10f      	bne.n	800f0ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f0aa:	4b14      	ldr	r3, [pc, #80]	; (800f0fc <tcp_kill_state+0x90>)
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d807      	bhi.n	800f0ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f0ba:	4b10      	ldr	r3, [pc, #64]	; (800f0fc <tcp_kill_state+0x90>)
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	617b      	str	r3, [r7, #20]
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e4      	bne.n	800f0a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f0dc:	2100      	movs	r1, #0
 800f0de:	6938      	ldr	r0, [r7, #16]
 800f0e0:	f7ff fa24 	bl	800e52c <tcp_abandon>
  }
}
 800f0e4:	bf00      	nop
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	080192f8 	.word	0x080192f8
 800f0f0:	08019608 	.word	0x08019608
 800f0f4:	08019334 	.word	0x08019334
 800f0f8:	20008b70 	.word	0x20008b70
 800f0fc:	20008b74 	.word	0x20008b74

0800f100 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f10e:	4b12      	ldr	r3, [pc, #72]	; (800f158 <tcp_kill_timewait+0x58>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	60fb      	str	r3, [r7, #12]
 800f114:	e012      	b.n	800f13c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f116:	4b11      	ldr	r3, [pc, #68]	; (800f15c <tcp_kill_timewait+0x5c>)
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	429a      	cmp	r2, r3
 800f124:	d807      	bhi.n	800f136 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f126:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <tcp_kill_timewait+0x5c>)
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1e9      	bne.n	800f116 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f148:	68b8      	ldr	r0, [r7, #8]
 800f14a:	f7ff faa1 	bl	800e690 <tcp_abort>
  }
}
 800f14e:	bf00      	nop
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	20008b80 	.word	0x20008b80
 800f15c:	20008b74 	.word	0x20008b74

0800f160 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f16a:	2001      	movs	r0, #1
 800f16c:	f7fe f82c 	bl	800d1c8 <memp_malloc>
 800f170:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d124      	bne.n	800f1c2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f178:	f7ff ffc2 	bl	800f100 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f17c:	2001      	movs	r0, #1
 800f17e:	f7fe f823 	bl	800d1c8 <memp_malloc>
 800f182:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d11b      	bne.n	800f1c2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f18a:	2009      	movs	r0, #9
 800f18c:	f7ff ff6e 	bl	800f06c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f190:	2001      	movs	r0, #1
 800f192:	f7fe f819 	bl	800d1c8 <memp_malloc>
 800f196:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d111      	bne.n	800f1c2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f19e:	2008      	movs	r0, #8
 800f1a0:	f7ff ff64 	bl	800f06c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1a4:	2001      	movs	r0, #1
 800f1a6:	f7fe f80f 	bl	800d1c8 <memp_malloc>
 800f1aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d107      	bne.n	800f1c2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f1b2:	79fb      	ldrb	r3, [r7, #7]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff ff17 	bl	800efe8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1ba:	2001      	movs	r0, #1
 800f1bc:	f7fe f804 	bl	800d1c8 <memp_malloc>
 800f1c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d03f      	beq.n	800f248 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f1c8:	2298      	movs	r2, #152	; 0x98
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f008 fbd7 	bl	8017980 <memset>
    pcb->prio = prio;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	79fa      	ldrb	r2, [r7, #7]
 800f1d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f1de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f1e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	22ff      	movs	r2, #255	; 0xff
 800f1f6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f1fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2206      	movs	r2, #6
 800f204:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2206      	movs	r2, #6
 800f20c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f214:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f21e:	4b0d      	ldr	r3, [pc, #52]	; (800f254 <tcp_alloc+0xf4>)
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <tcp_alloc+0xf8>)
 800f228:	781a      	ldrb	r2, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f234:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	4a08      	ldr	r2, [pc, #32]	; (800f25c <tcp_alloc+0xfc>)
 800f23c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4a07      	ldr	r2, [pc, #28]	; (800f260 <tcp_alloc+0x100>)
 800f244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f248:	68fb      	ldr	r3, [r7, #12]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3710      	adds	r7, #16
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	20008b74 	.word	0x20008b74
 800f258:	2000013a 	.word	0x2000013a
 800f25c:	0800efa3 	.word	0x0800efa3
 800f260:	006ddd00 	.word	0x006ddd00

0800f264 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d034      	beq.n	800f2de <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f278:	2b0a      	cmp	r3, #10
 800f27a:	d030      	beq.n	800f2de <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f280:	2b01      	cmp	r3, #1
 800f282:	d02c      	beq.n	800f2de <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d007      	beq.n	800f29c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe fcff 	bl	800dc94 <pbuf_free>
      pcb->refused_data = NULL;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2200      	movs	r2, #0
 800f29a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7ff fe36 	bl	800ef12 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fe2a 	bl	800ef12 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff fe25 	bl	800ef12 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	669a      	str	r2, [r3, #104]	; 0x68
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f2de:	bf00      	nop
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d105      	bne.n	800f308 <tcp_pcb_remove+0x20>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68da      	ldr	r2, [r3, #12]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	e013      	b.n	800f330 <tcp_pcb_remove+0x48>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e00c      	b.n	800f32a <tcp_pcb_remove+0x42>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	429a      	cmp	r2, r3
 800f318:	d104      	bne.n	800f324 <tcp_pcb_remove+0x3c>
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	68da      	ldr	r2, [r3, #12]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	60da      	str	r2, [r3, #12]
 800f322:	e005      	b.n	800f330 <tcp_pcb_remove+0x48>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	60fb      	str	r3, [r7, #12]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1ef      	bne.n	800f310 <tcp_pcb_remove+0x28>
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	2200      	movs	r2, #0
 800f334:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f336:	6838      	ldr	r0, [r7, #0]
 800f338:	f7ff ff94 	bl	800f264 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	7d1b      	ldrb	r3, [r3, #20]
 800f340:	2b0a      	cmp	r3, #10
 800f342:	d013      	beq.n	800f36c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d00f      	beq.n	800f36c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	7e9b      	ldrb	r3, [r3, #26]
 800f350:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f354:	2b00      	cmp	r3, #0
 800f356:	d009      	beq.n	800f36c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	7e9b      	ldrb	r3, [r3, #26]
 800f35c:	f043 0302 	orr.w	r3, r3, #2
 800f360:	b2da      	uxtb	r2, r3
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f366:	6838      	ldr	r0, [r7, #0]
 800f368:	f002 fd88 	bl	8011e7c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	7d1b      	ldrb	r3, [r3, #20]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d020      	beq.n	800f3b6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d006      	beq.n	800f38a <tcp_pcb_remove+0xa2>
 800f37c:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <tcp_pcb_remove+0xe4>)
 800f37e:	f240 7253 	movw	r2, #1875	; 0x753
 800f382:	4913      	ldr	r1, [pc, #76]	; (800f3d0 <tcp_pcb_remove+0xe8>)
 800f384:	4813      	ldr	r0, [pc, #76]	; (800f3d4 <tcp_pcb_remove+0xec>)
 800f386:	f008 fba9 	bl	8017adc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d006      	beq.n	800f3a0 <tcp_pcb_remove+0xb8>
 800f392:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <tcp_pcb_remove+0xe4>)
 800f394:	f240 7254 	movw	r2, #1876	; 0x754
 800f398:	490f      	ldr	r1, [pc, #60]	; (800f3d8 <tcp_pcb_remove+0xf0>)
 800f39a:	480e      	ldr	r0, [pc, #56]	; (800f3d4 <tcp_pcb_remove+0xec>)
 800f39c:	f008 fb9e 	bl	8017adc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d006      	beq.n	800f3b6 <tcp_pcb_remove+0xce>
 800f3a8:	4b08      	ldr	r3, [pc, #32]	; (800f3cc <tcp_pcb_remove+0xe4>)
 800f3aa:	f240 7256 	movw	r2, #1878	; 0x756
 800f3ae:	490b      	ldr	r1, [pc, #44]	; (800f3dc <tcp_pcb_remove+0xf4>)
 800f3b0:	4808      	ldr	r0, [pc, #32]	; (800f3d4 <tcp_pcb_remove+0xec>)
 800f3b2:	f008 fb93 	bl	8017adc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	080192f8 	.word	0x080192f8
 800f3d0:	080196b0 	.word	0x080196b0
 800f3d4:	08019334 	.word	0x08019334
 800f3d8:	080196c8 	.word	0x080196c8
 800f3dc:	080196e4 	.word	0x080196e4

0800f3e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f3e8:	4b06      	ldr	r3, [pc, #24]	; (800f404 <tcp_next_iss+0x24>)
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	4b06      	ldr	r3, [pc, #24]	; (800f408 <tcp_next_iss+0x28>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	4a04      	ldr	r2, [pc, #16]	; (800f404 <tcp_next_iss+0x24>)
 800f3f4:	6013      	str	r3, [r2, #0]
  return iss;
 800f3f6:	4b03      	ldr	r3, [pc, #12]	; (800f404 <tcp_next_iss+0x24>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	370c      	adds	r7, #12
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bc80      	pop	{r7}
 800f402:	4770      	bx	lr
 800f404:	20000040 	.word	0x20000040
 800f408:	20008b74 	.word	0x20008b74

0800f40c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	6039      	str	r1, [r7, #0]
 800f416:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f418:	6838      	ldr	r0, [r7, #0]
 800f41a:	f006 fdef 	bl	8015ffc <ip4_route>
 800f41e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f426:	88fb      	ldrh	r3, [r7, #6]
 800f428:	e010      	b.n	800f44c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f42e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f430:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d008      	beq.n	800f44a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f438:	897b      	ldrh	r3, [r7, #10]
 800f43a:	3b28      	subs	r3, #40	; 0x28
 800f43c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f43e:	893a      	ldrh	r2, [r7, #8]
 800f440:	88fb      	ldrh	r3, [r7, #6]
 800f442:	4293      	cmp	r3, r2
 800f444:	bf28      	it	cs
 800f446:	4613      	movcs	r3, r2
 800f448:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f44a:	88fb      	ldrh	r3, [r7, #6]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f462:	e011      	b.n	800f488 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d108      	bne.n	800f482 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff f90a 	bl	800e690 <tcp_abort>
      pcb = next;
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	60fb      	str	r3, [r7, #12]
 800f480:	e002      	b.n	800f488 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1ea      	bne.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f48e:	bf00      	nop
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
	...

0800f498 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d02c      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x6a>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d028      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f4b0:	4b16      	ldr	r3, [pc, #88]	; (800f50c <tcp_netif_ip_addr_changed+0x74>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff ffcc 	bl	800f454 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4bc:	4b14      	ldr	r3, [pc, #80]	; (800f510 <tcp_netif_ip_addr_changed+0x78>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7ff ffc6 	bl	800f454 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d019      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x6a>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d015      	beq.n	800f502 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f4d6:	4b0f      	ldr	r3, [pc, #60]	; (800f514 <tcp_netif_ip_addr_changed+0x7c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	e00e      	b.n	800f4fc <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d103      	bne.n	800f4f8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	60fb      	str	r3, [r7, #12]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1ed      	bne.n	800f4de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f502:	bf00      	nop
 800f504:	3710      	adds	r7, #16
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	20008b70 	.word	0x20008b70
 800f510:	20008b7c 	.word	0x20008b7c
 800f514:	20008b78 	.word	0x20008b78

0800f518 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f518:	b590      	push	{r4, r7, lr}
 800f51a:	b08b      	sub	sp, #44	; 0x2c
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	4a82      	ldr	r2, [pc, #520]	; (800f730 <tcp_input+0x218>)
 800f528:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	895b      	ldrh	r3, [r3, #10]
 800f52e:	2b13      	cmp	r3, #19
 800f530:	f240 838a 	bls.w	800fc48 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f534:	4b7f      	ldr	r3, [pc, #508]	; (800f734 <tcp_input+0x21c>)
 800f536:	695a      	ldr	r2, [r3, #20]
 800f538:	4b7e      	ldr	r3, [pc, #504]	; (800f734 <tcp_input+0x21c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	4619      	mov	r1, r3
 800f53e:	4610      	mov	r0, r2
 800f540:	f006 fff4 	bl	801652c <ip4_addr_isbroadcast_u32>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	f040 8380 	bne.w	800fc4c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f54c:	4b79      	ldr	r3, [pc, #484]	; (800f734 <tcp_input+0x21c>)
 800f54e:	695b      	ldr	r3, [r3, #20]
 800f550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f554:	2be0      	cmp	r3, #224	; 0xe0
 800f556:	f000 8379 	beq.w	800fc4c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f55a:	4b75      	ldr	r3, [pc, #468]	; (800f730 <tcp_input+0x218>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	899b      	ldrh	r3, [r3, #12]
 800f560:	b29b      	uxth	r3, r3
 800f562:	4618      	mov	r0, r3
 800f564:	f7fd fa88 	bl	800ca78 <lwip_htons>
 800f568:	4603      	mov	r3, r0
 800f56a:	0b1b      	lsrs	r3, r3, #12
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f574:	7cbb      	ldrb	r3, [r7, #18]
 800f576:	2b13      	cmp	r3, #19
 800f578:	f240 8368 	bls.w	800fc4c <tcp_input+0x734>
 800f57c:	7cbb      	ldrb	r3, [r7, #18]
 800f57e:	b29a      	uxth	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	891b      	ldrh	r3, [r3, #8]
 800f584:	429a      	cmp	r2, r3
 800f586:	f200 8361 	bhi.w	800fc4c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f58a:	7cbb      	ldrb	r3, [r7, #18]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	3b14      	subs	r3, #20
 800f590:	b29a      	uxth	r2, r3
 800f592:	4b69      	ldr	r3, [pc, #420]	; (800f738 <tcp_input+0x220>)
 800f594:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f596:	4b69      	ldr	r3, [pc, #420]	; (800f73c <tcp_input+0x224>)
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	895a      	ldrh	r2, [r3, #10]
 800f5a0:	7cbb      	ldrb	r3, [r7, #18]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d30d      	bcc.n	800f5c4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5a8:	4b63      	ldr	r3, [pc, #396]	; (800f738 <tcp_input+0x220>)
 800f5aa:	881a      	ldrh	r2, [r3, #0]
 800f5ac:	4b64      	ldr	r3, [pc, #400]	; (800f740 <tcp_input+0x228>)
 800f5ae:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f5b0:	7cbb      	ldrb	r3, [r7, #18]
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	425b      	negs	r3, r3
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	b21b      	sxth	r3, r3
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7fe fb45 	bl	800dc4c <pbuf_header>
 800f5c2:	e055      	b.n	800f670 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d105      	bne.n	800f5d8 <tcp_input+0xc0>
 800f5cc:	4b5d      	ldr	r3, [pc, #372]	; (800f744 <tcp_input+0x22c>)
 800f5ce:	22b2      	movs	r2, #178	; 0xb2
 800f5d0:	495d      	ldr	r1, [pc, #372]	; (800f748 <tcp_input+0x230>)
 800f5d2:	485e      	ldr	r0, [pc, #376]	; (800f74c <tcp_input+0x234>)
 800f5d4:	f008 fa82 	bl	8017adc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f5d8:	f06f 0113 	mvn.w	r1, #19
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7fe fb35 	bl	800dc4c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	895a      	ldrh	r2, [r3, #10]
 800f5e6:	4b56      	ldr	r3, [pc, #344]	; (800f740 <tcp_input+0x228>)
 800f5e8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f5ea:	4b53      	ldr	r3, [pc, #332]	; (800f738 <tcp_input+0x220>)
 800f5ec:	881a      	ldrh	r2, [r3, #0]
 800f5ee:	4b54      	ldr	r3, [pc, #336]	; (800f740 <tcp_input+0x228>)
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f5f6:	4b52      	ldr	r3, [pc, #328]	; (800f740 <tcp_input+0x228>)
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	425b      	negs	r3, r3
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	b21b      	sxth	r3, r3
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7fe fb22 	bl	800dc4c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	895b      	ldrh	r3, [r3, #10]
 800f60e:	8a3a      	ldrh	r2, [r7, #16]
 800f610:	429a      	cmp	r2, r3
 800f612:	f200 831d 	bhi.w	800fc50 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4a47      	ldr	r2, [pc, #284]	; (800f73c <tcp_input+0x224>)
 800f61e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	8a3b      	ldrh	r3, [r7, #16]
 800f626:	425b      	negs	r3, r3
 800f628:	b29b      	uxth	r3, r3
 800f62a:	b21b      	sxth	r3, r3
 800f62c:	4619      	mov	r1, r3
 800f62e:	4610      	mov	r0, r2
 800f630:	f7fe fb0c 	bl	800dc4c <pbuf_header>
    p->tot_len -= opt2len;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	891a      	ldrh	r2, [r3, #8]
 800f638:	8a3b      	ldrh	r3, [r7, #16]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	895b      	ldrh	r3, [r3, #10]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <tcp_input+0x13e>
 800f64a:	4b3e      	ldr	r3, [pc, #248]	; (800f744 <tcp_input+0x22c>)
 800f64c:	22cf      	movs	r2, #207	; 0xcf
 800f64e:	4940      	ldr	r1, [pc, #256]	; (800f750 <tcp_input+0x238>)
 800f650:	483e      	ldr	r0, [pc, #248]	; (800f74c <tcp_input+0x234>)
 800f652:	f008 fa43 	bl	8017adc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	891a      	ldrh	r2, [r3, #8]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	891b      	ldrh	r3, [r3, #8]
 800f660:	429a      	cmp	r2, r3
 800f662:	d005      	beq.n	800f670 <tcp_input+0x158>
 800f664:	4b37      	ldr	r3, [pc, #220]	; (800f744 <tcp_input+0x22c>)
 800f666:	22d0      	movs	r2, #208	; 0xd0
 800f668:	493a      	ldr	r1, [pc, #232]	; (800f754 <tcp_input+0x23c>)
 800f66a:	4838      	ldr	r0, [pc, #224]	; (800f74c <tcp_input+0x234>)
 800f66c:	f008 fa36 	bl	8017adc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f670:	4b2f      	ldr	r3, [pc, #188]	; (800f730 <tcp_input+0x218>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	b29a      	uxth	r2, r3
 800f678:	4b2d      	ldr	r3, [pc, #180]	; (800f730 <tcp_input+0x218>)
 800f67a:	681c      	ldr	r4, [r3, #0]
 800f67c:	4610      	mov	r0, r2
 800f67e:	f7fd f9fb 	bl	800ca78 <lwip_htons>
 800f682:	4603      	mov	r3, r0
 800f684:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f686:	4b2a      	ldr	r3, [pc, #168]	; (800f730 <tcp_input+0x218>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	885b      	ldrh	r3, [r3, #2]
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	4b28      	ldr	r3, [pc, #160]	; (800f730 <tcp_input+0x218>)
 800f690:	681c      	ldr	r4, [r3, #0]
 800f692:	4610      	mov	r0, r2
 800f694:	f7fd f9f0 	bl	800ca78 <lwip_htons>
 800f698:	4603      	mov	r3, r0
 800f69a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f69c:	4b24      	ldr	r3, [pc, #144]	; (800f730 <tcp_input+0x218>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	4b23      	ldr	r3, [pc, #140]	; (800f730 <tcp_input+0x218>)
 800f6a4:	681c      	ldr	r4, [r3, #0]
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	f7fd f9f3 	bl	800ca92 <lwip_htonl>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	6063      	str	r3, [r4, #4]
 800f6b0:	6863      	ldr	r3, [r4, #4]
 800f6b2:	4a29      	ldr	r2, [pc, #164]	; (800f758 <tcp_input+0x240>)
 800f6b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6b6:	4b1e      	ldr	r3, [pc, #120]	; (800f730 <tcp_input+0x218>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689a      	ldr	r2, [r3, #8]
 800f6bc:	4b1c      	ldr	r3, [pc, #112]	; (800f730 <tcp_input+0x218>)
 800f6be:	681c      	ldr	r4, [r3, #0]
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	f7fd f9e6 	bl	800ca92 <lwip_htonl>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	60a3      	str	r3, [r4, #8]
 800f6ca:	68a3      	ldr	r3, [r4, #8]
 800f6cc:	4a23      	ldr	r2, [pc, #140]	; (800f75c <tcp_input+0x244>)
 800f6ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6d0:	4b17      	ldr	r3, [pc, #92]	; (800f730 <tcp_input+0x218>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	89db      	ldrh	r3, [r3, #14]
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	4b15      	ldr	r3, [pc, #84]	; (800f730 <tcp_input+0x218>)
 800f6da:	681c      	ldr	r4, [r3, #0]
 800f6dc:	4610      	mov	r0, r2
 800f6de:	f7fd f9cb 	bl	800ca78 <lwip_htons>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6e6:	4b12      	ldr	r3, [pc, #72]	; (800f730 <tcp_input+0x218>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	899b      	ldrh	r3, [r3, #12]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd f9c2 	bl	800ca78 <lwip_htons>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	4b18      	ldr	r3, [pc, #96]	; (800f760 <tcp_input+0x248>)
 800f700:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	891a      	ldrh	r2, [r3, #8]
 800f706:	4b16      	ldr	r3, [pc, #88]	; (800f760 <tcp_input+0x248>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	f003 0303 	and.w	r3, r3, #3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bf14      	ite	ne
 800f712:	2301      	movne	r3, #1
 800f714:	2300      	moveq	r3, #0
 800f716:	b2db      	uxtb	r3, r3
 800f718:	b29b      	uxth	r3, r3
 800f71a:	4413      	add	r3, r2
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	4b11      	ldr	r3, [pc, #68]	; (800f764 <tcp_input+0x24c>)
 800f720:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f722:	2300      	movs	r3, #0
 800f724:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f726:	4b10      	ldr	r3, [pc, #64]	; (800f768 <tcp_input+0x250>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	e082      	b.n	800f834 <tcp_input+0x31c>
 800f72e:	bf00      	nop
 800f730:	2000014c 	.word	0x2000014c
 800f734:	20005790 	.word	0x20005790
 800f738:	20000150 	.word	0x20000150
 800f73c:	20000154 	.word	0x20000154
 800f740:	20000152 	.word	0x20000152
 800f744:	080196fc 	.word	0x080196fc
 800f748:	08019730 	.word	0x08019730
 800f74c:	08019740 	.word	0x08019740
 800f750:	08019768 	.word	0x08019768
 800f754:	08019774 	.word	0x08019774
 800f758:	2000015c 	.word	0x2000015c
 800f75c:	20000160 	.word	0x20000160
 800f760:	20000168 	.word	0x20000168
 800f764:	20000166 	.word	0x20000166
 800f768:	20008b70 	.word	0x20008b70
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	7d1b      	ldrb	r3, [r3, #20]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d105      	bne.n	800f780 <tcp_input+0x268>
 800f774:	4b8f      	ldr	r3, [pc, #572]	; (800f9b4 <tcp_input+0x49c>)
 800f776:	22e2      	movs	r2, #226	; 0xe2
 800f778:	498f      	ldr	r1, [pc, #572]	; (800f9b8 <tcp_input+0x4a0>)
 800f77a:	4890      	ldr	r0, [pc, #576]	; (800f9bc <tcp_input+0x4a4>)
 800f77c:	f008 f9ae 	bl	8017adc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
 800f784:	2b0a      	cmp	r3, #10
 800f786:	d105      	bne.n	800f794 <tcp_input+0x27c>
 800f788:	4b8a      	ldr	r3, [pc, #552]	; (800f9b4 <tcp_input+0x49c>)
 800f78a:	22e3      	movs	r2, #227	; 0xe3
 800f78c:	498c      	ldr	r1, [pc, #560]	; (800f9c0 <tcp_input+0x4a8>)
 800f78e:	488b      	ldr	r0, [pc, #556]	; (800f9bc <tcp_input+0x4a4>)
 800f790:	f008 f9a4 	bl	8017adc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	7d1b      	ldrb	r3, [r3, #20]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d105      	bne.n	800f7a8 <tcp_input+0x290>
 800f79c:	4b85      	ldr	r3, [pc, #532]	; (800f9b4 <tcp_input+0x49c>)
 800f79e:	22e4      	movs	r2, #228	; 0xe4
 800f7a0:	4988      	ldr	r1, [pc, #544]	; (800f9c4 <tcp_input+0x4ac>)
 800f7a2:	4886      	ldr	r0, [pc, #536]	; (800f9bc <tcp_input+0x4a4>)
 800f7a4:	f008 f99a 	bl	8017adc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	8b1a      	ldrh	r2, [r3, #24]
 800f7ac:	4b86      	ldr	r3, [pc, #536]	; (800f9c8 <tcp_input+0x4b0>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d138      	bne.n	800f82a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	8ada      	ldrh	r2, [r3, #22]
 800f7bc:	4b82      	ldr	r3, [pc, #520]	; (800f9c8 <tcp_input+0x4b0>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	885b      	ldrh	r3, [r3, #2]
 800f7c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d130      	bne.n	800f82a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	685a      	ldr	r2, [r3, #4]
 800f7cc:	4b7f      	ldr	r3, [pc, #508]	; (800f9cc <tcp_input+0x4b4>)
 800f7ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d12a      	bne.n	800f82a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	4b7c      	ldr	r3, [pc, #496]	; (800f9cc <tcp_input+0x4b4>)
 800f7da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d124      	bne.n	800f82a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	69fa      	ldr	r2, [r7, #28]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d105      	bne.n	800f7f6 <tcp_input+0x2de>
 800f7ea:	4b72      	ldr	r3, [pc, #456]	; (800f9b4 <tcp_input+0x49c>)
 800f7ec:	22ec      	movs	r2, #236	; 0xec
 800f7ee:	4978      	ldr	r1, [pc, #480]	; (800f9d0 <tcp_input+0x4b8>)
 800f7f0:	4872      	ldr	r0, [pc, #456]	; (800f9bc <tcp_input+0x4a4>)
 800f7f2:	f008 f973 	bl	8017adc <iprintf>
      if (prev != NULL) {
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00a      	beq.n	800f812 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	68da      	ldr	r2, [r3, #12]
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f804:	4b73      	ldr	r3, [pc, #460]	; (800f9d4 <tcp_input+0x4bc>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f80c:	4a71      	ldr	r2, [pc, #452]	; (800f9d4 <tcp_input+0x4bc>)
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	69fa      	ldr	r2, [r7, #28]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d10f      	bne.n	800f83c <tcp_input+0x324>
 800f81c:	4b65      	ldr	r3, [pc, #404]	; (800f9b4 <tcp_input+0x49c>)
 800f81e:	22f4      	movs	r2, #244	; 0xf4
 800f820:	496d      	ldr	r1, [pc, #436]	; (800f9d8 <tcp_input+0x4c0>)
 800f822:	4866      	ldr	r0, [pc, #408]	; (800f9bc <tcp_input+0x4a4>)
 800f824:	f008 f95a 	bl	8017adc <iprintf>
      break;
 800f828:	e008      	b.n	800f83c <tcp_input+0x324>
    }
    prev = pcb;
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	61fb      	str	r3, [r7, #28]
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d198      	bne.n	800f76c <tcp_input+0x254>
 800f83a:	e000      	b.n	800f83e <tcp_input+0x326>
      break;
 800f83c:	bf00      	nop
  }

  if (pcb == NULL) {
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d173      	bne.n	800f92c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f844:	4b65      	ldr	r3, [pc, #404]	; (800f9dc <tcp_input+0x4c4>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	61fb      	str	r3, [r7, #28]
 800f84a:	e02f      	b.n	800f8ac <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	7d1b      	ldrb	r3, [r3, #20]
 800f850:	2b0a      	cmp	r3, #10
 800f852:	d005      	beq.n	800f860 <tcp_input+0x348>
 800f854:	4b57      	ldr	r3, [pc, #348]	; (800f9b4 <tcp_input+0x49c>)
 800f856:	22fe      	movs	r2, #254	; 0xfe
 800f858:	4961      	ldr	r1, [pc, #388]	; (800f9e0 <tcp_input+0x4c8>)
 800f85a:	4858      	ldr	r0, [pc, #352]	; (800f9bc <tcp_input+0x4a4>)
 800f85c:	f008 f93e 	bl	8017adc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	8b1a      	ldrh	r2, [r3, #24]
 800f864:	4b58      	ldr	r3, [pc, #352]	; (800f9c8 <tcp_input+0x4b0>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d11a      	bne.n	800f8a6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	8ada      	ldrh	r2, [r3, #22]
 800f874:	4b54      	ldr	r3, [pc, #336]	; (800f9c8 <tcp_input+0x4b0>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	885b      	ldrh	r3, [r3, #2]
 800f87a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d112      	bne.n	800f8a6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	685a      	ldr	r2, [r3, #4]
 800f884:	4b51      	ldr	r3, [pc, #324]	; (800f9cc <tcp_input+0x4b4>)
 800f886:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f888:	429a      	cmp	r2, r3
 800f88a:	d10c      	bne.n	800f8a6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	4b4e      	ldr	r3, [pc, #312]	; (800f9cc <tcp_input+0x4b4>)
 800f892:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f894:	429a      	cmp	r2, r3
 800f896:	d106      	bne.n	800f8a6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f898:	69f8      	ldr	r0, [r7, #28]
 800f89a:	f000 fb15 	bl	800fec8 <tcp_timewait_input>
        pbuf_free(p);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7fe f9f8 	bl	800dc94 <pbuf_free>
        return;
 800f8a4:	e1da      	b.n	800fc5c <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	61fb      	str	r3, [r7, #28]
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1cc      	bne.n	800f84c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8b6:	4b4b      	ldr	r3, [pc, #300]	; (800f9e4 <tcp_input+0x4cc>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	617b      	str	r3, [r7, #20]
 800f8bc:	e019      	b.n	800f8f2 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	8ada      	ldrh	r2, [r3, #22]
 800f8c2:	4b41      	ldr	r3, [pc, #260]	; (800f9c8 <tcp_input+0x4b0>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	885b      	ldrh	r3, [r3, #2]
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d10c      	bne.n	800f8e8 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	4b3e      	ldr	r3, [pc, #248]	; (800f9cc <tcp_input+0x4b4>)
 800f8d4:	695b      	ldr	r3, [r3, #20]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d00f      	beq.n	800f8fa <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00d      	beq.n	800f8fc <tcp_input+0x3e4>
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	617b      	str	r3, [r7, #20]
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1e2      	bne.n	800f8be <tcp_input+0x3a6>
 800f8f8:	e000      	b.n	800f8fc <tcp_input+0x3e4>
            break;
 800f8fa:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d014      	beq.n	800f92c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00a      	beq.n	800f91e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f910:	4b34      	ldr	r3, [pc, #208]	; (800f9e4 <tcp_input+0x4cc>)
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f918:	4a32      	ldr	r2, [pc, #200]	; (800f9e4 <tcp_input+0x4cc>)
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f91e:	6978      	ldr	r0, [r7, #20]
 800f920:	f000 f9f0 	bl	800fd04 <tcp_listen_input>
      pbuf_free(p);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f7fe f9b5 	bl	800dc94 <pbuf_free>
      return;
 800f92a:	e197      	b.n	800fc5c <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	f000 8164 	beq.w	800fbfc <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f934:	4b2c      	ldr	r3, [pc, #176]	; (800f9e8 <tcp_input+0x4d0>)
 800f936:	2200      	movs	r2, #0
 800f938:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	891a      	ldrh	r2, [r3, #8]
 800f93e:	4b2a      	ldr	r3, [pc, #168]	; (800f9e8 <tcp_input+0x4d0>)
 800f940:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f942:	4a29      	ldr	r2, [pc, #164]	; (800f9e8 <tcp_input+0x4d0>)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f948:	4b1f      	ldr	r3, [pc, #124]	; (800f9c8 <tcp_input+0x4b0>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a26      	ldr	r2, [pc, #152]	; (800f9e8 <tcp_input+0x4d0>)
 800f94e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f950:	4b26      	ldr	r3, [pc, #152]	; (800f9ec <tcp_input+0x4d4>)
 800f952:	2200      	movs	r2, #0
 800f954:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f956:	4b26      	ldr	r3, [pc, #152]	; (800f9f0 <tcp_input+0x4d8>)
 800f958:	2200      	movs	r2, #0
 800f95a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f95c:	4b25      	ldr	r3, [pc, #148]	; (800f9f4 <tcp_input+0x4dc>)
 800f95e:	2200      	movs	r2, #0
 800f960:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f962:	4b25      	ldr	r3, [pc, #148]	; (800f9f8 <tcp_input+0x4e0>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	f003 0308 	and.w	r3, r3, #8
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d006      	beq.n	800f97c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	7b5b      	ldrb	r3, [r3, #13]
 800f972:	f043 0301 	orr.w	r3, r3, #1
 800f976:	b2da      	uxtb	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f980:	2b00      	cmp	r3, #0
 800f982:	d03d      	beq.n	800fa00 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f984:	69f8      	ldr	r0, [r7, #28]
 800f986:	f7ff fa5b 	bl	800ee40 <tcp_process_refused_data>
 800f98a:	4603      	mov	r3, r0
 800f98c:	f113 0f0d 	cmn.w	r3, #13
 800f990:	d007      	beq.n	800f9a2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f996:	2b00      	cmp	r3, #0
 800f998:	d032      	beq.n	800fa00 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f99a:	4b18      	ldr	r3, [pc, #96]	; (800f9fc <tcp_input+0x4e4>)
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d02e      	beq.n	800fa00 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f040 8108 	bne.w	800fbbc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f9ac:	69f8      	ldr	r0, [r7, #28]
 800f9ae:	f002 fa09 	bl	8011dc4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f9b2:	e103      	b.n	800fbbc <tcp_input+0x6a4>
 800f9b4:	080196fc 	.word	0x080196fc
 800f9b8:	08019794 	.word	0x08019794
 800f9bc:	08019740 	.word	0x08019740
 800f9c0:	080197bc 	.word	0x080197bc
 800f9c4:	080197e8 	.word	0x080197e8
 800f9c8:	2000014c 	.word	0x2000014c
 800f9cc:	20005790 	.word	0x20005790
 800f9d0:	08019810 	.word	0x08019810
 800f9d4:	20008b70 	.word	0x20008b70
 800f9d8:	0801983c 	.word	0x0801983c
 800f9dc:	20008b80 	.word	0x20008b80
 800f9e0:	08019868 	.word	0x08019868
 800f9e4:	20008b78 	.word	0x20008b78
 800f9e8:	2000013c 	.word	0x2000013c
 800f9ec:	2000016c 	.word	0x2000016c
 800f9f0:	20000169 	.word	0x20000169
 800f9f4:	20000164 	.word	0x20000164
 800f9f8:	20000168 	.word	0x20000168
 800f9fc:	20000166 	.word	0x20000166
      }
    }
    tcp_input_pcb = pcb;
 800fa00:	4a98      	ldr	r2, [pc, #608]	; (800fc64 <tcp_input+0x74c>)
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa06:	69f8      	ldr	r0, [r7, #28]
 800fa08:	f000 fac6 	bl	800ff98 <tcp_process>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa14:	f113 0f0d 	cmn.w	r3, #13
 800fa18:	f000 80d2 	beq.w	800fbc0 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800fa1c:	4b92      	ldr	r3, [pc, #584]	; (800fc68 <tcp_input+0x750>)
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	f003 0308 	and.w	r3, r3, #8
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d016      	beq.n	800fa56 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d008      	beq.n	800fa44 <tcp_input+0x52c>
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	6912      	ldr	r2, [r2, #16]
 800fa3c:	f06f 010d 	mvn.w	r1, #13
 800fa40:	4610      	mov	r0, r2
 800fa42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa44:	69f9      	ldr	r1, [r7, #28]
 800fa46:	4889      	ldr	r0, [pc, #548]	; (800fc6c <tcp_input+0x754>)
 800fa48:	f7ff fc4e 	bl	800f2e8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800fa4c:	69f9      	ldr	r1, [r7, #28]
 800fa4e:	2001      	movs	r0, #1
 800fa50:	f7fd fc06 	bl	800d260 <memp_free>
 800fa54:	e0bf      	b.n	800fbd6 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800fa56:	2300      	movs	r3, #0
 800fa58:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fa5a:	4b85      	ldr	r3, [pc, #532]	; (800fc70 <tcp_input+0x758>)
 800fa5c:	881b      	ldrh	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d01b      	beq.n	800fa9a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fa62:	4b83      	ldr	r3, [pc, #524]	; (800fc70 <tcp_input+0x758>)
 800fa64:	881b      	ldrh	r3, [r3, #0]
 800fa66:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d009      	beq.n	800fa84 <tcp_input+0x56c>
 800fa70:	69fb      	ldr	r3, [r7, #28]
 800fa72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	6910      	ldr	r0, [r2, #16]
 800fa78:	89fa      	ldrh	r2, [r7, #14]
 800fa7a:	69f9      	ldr	r1, [r7, #28]
 800fa7c:	4798      	blx	r3
 800fa7e:	4603      	mov	r3, r0
 800fa80:	74fb      	strb	r3, [r7, #19]
 800fa82:	e001      	b.n	800fa88 <tcp_input+0x570>
 800fa84:	2300      	movs	r3, #0
 800fa86:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa8c:	f113 0f0d 	cmn.w	r3, #13
 800fa90:	f000 8098 	beq.w	800fbc4 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fa94:	4b76      	ldr	r3, [pc, #472]	; (800fc70 <tcp_input+0x758>)
 800fa96:	2200      	movs	r2, #0
 800fa98:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fa9a:	69f8      	ldr	r0, [r7, #28]
 800fa9c:	f000 f900 	bl	800fca0 <tcp_input_delayed_close>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f040 8090 	bne.w	800fbc8 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800faa8:	4b72      	ldr	r3, [pc, #456]	; (800fc74 <tcp_input+0x75c>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d041      	beq.n	800fb34 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d006      	beq.n	800fac6 <tcp_input+0x5ae>
 800fab8:	4b6f      	ldr	r3, [pc, #444]	; (800fc78 <tcp_input+0x760>)
 800faba:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800fabe:	496f      	ldr	r1, [pc, #444]	; (800fc7c <tcp_input+0x764>)
 800fac0:	486f      	ldr	r0, [pc, #444]	; (800fc80 <tcp_input+0x768>)
 800fac2:	f008 f80b 	bl	8017adc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	7e9b      	ldrb	r3, [r3, #26]
 800faca:	f003 0310 	and.w	r3, r3, #16
 800face:	2b00      	cmp	r3, #0
 800fad0:	d008      	beq.n	800fae4 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fad2:	4b68      	ldr	r3, [pc, #416]	; (800fc74 <tcp_input+0x75c>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fe f8dc 	bl	800dc94 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fadc:	69f8      	ldr	r0, [r7, #28]
 800fade:	f7fe fdd7 	bl	800e690 <tcp_abort>
            goto aborted;
 800fae2:	e078      	b.n	800fbd6 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00c      	beq.n	800fb08 <tcp_input+0x5f0>
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	6918      	ldr	r0, [r3, #16]
 800faf8:	4b5e      	ldr	r3, [pc, #376]	; (800fc74 <tcp_input+0x75c>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	2300      	movs	r3, #0
 800fafe:	69f9      	ldr	r1, [r7, #28]
 800fb00:	47a0      	blx	r4
 800fb02:	4603      	mov	r3, r0
 800fb04:	74fb      	strb	r3, [r7, #19]
 800fb06:	e008      	b.n	800fb1a <tcp_input+0x602>
 800fb08:	4b5a      	ldr	r3, [pc, #360]	; (800fc74 <tcp_input+0x75c>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	69f9      	ldr	r1, [r7, #28]
 800fb10:	2000      	movs	r0, #0
 800fb12:	f7ff fa46 	bl	800efa2 <tcp_recv_null>
 800fb16:	4603      	mov	r3, r0
 800fb18:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb1e:	f113 0f0d 	cmn.w	r3, #13
 800fb22:	d053      	beq.n	800fbcc <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d003      	beq.n	800fb34 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb2c:	4b51      	ldr	r3, [pc, #324]	; (800fc74 <tcp_input+0x75c>)
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb34:	4b4c      	ldr	r3, [pc, #304]	; (800fc68 <tcp_input+0x750>)
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	f003 0320 	and.w	r3, r3, #32
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d030      	beq.n	800fba2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d009      	beq.n	800fb5c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb4c:	7b5a      	ldrb	r2, [r3, #13]
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb52:	f042 0220 	orr.w	r2, r2, #32
 800fb56:	b2d2      	uxtb	r2, r2
 800fb58:	735a      	strb	r2, [r3, #13]
 800fb5a:	e022      	b.n	800fba2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fb64:	d005      	beq.n	800fb72 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00b      	beq.n	800fb94 <tcp_input+0x67c>
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	6918      	ldr	r0, [r3, #16]
 800fb86:	2300      	movs	r3, #0
 800fb88:	2200      	movs	r2, #0
 800fb8a:	69f9      	ldr	r1, [r7, #28]
 800fb8c:	47a0      	blx	r4
 800fb8e:	4603      	mov	r3, r0
 800fb90:	74fb      	strb	r3, [r7, #19]
 800fb92:	e001      	b.n	800fb98 <tcp_input+0x680>
 800fb94:	2300      	movs	r3, #0
 800fb96:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb9c:	f113 0f0d 	cmn.w	r3, #13
 800fba0:	d016      	beq.n	800fbd0 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fba2:	4b30      	ldr	r3, [pc, #192]	; (800fc64 <tcp_input+0x74c>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fba8:	69f8      	ldr	r0, [r7, #28]
 800fbaa:	f000 f879 	bl	800fca0 <tcp_input_delayed_close>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10f      	bne.n	800fbd4 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fbb4:	69f8      	ldr	r0, [r7, #28]
 800fbb6:	f002 f961 	bl	8011e7c <tcp_output>
 800fbba:	e00c      	b.n	800fbd6 <tcp_input+0x6be>
        goto aborted;
 800fbbc:	bf00      	nop
 800fbbe:	e00a      	b.n	800fbd6 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fbc0:	bf00      	nop
 800fbc2:	e008      	b.n	800fbd6 <tcp_input+0x6be>
              goto aborted;
 800fbc4:	bf00      	nop
 800fbc6:	e006      	b.n	800fbd6 <tcp_input+0x6be>
          goto aborted;
 800fbc8:	bf00      	nop
 800fbca:	e004      	b.n	800fbd6 <tcp_input+0x6be>
            goto aborted;
 800fbcc:	bf00      	nop
 800fbce:	e002      	b.n	800fbd6 <tcp_input+0x6be>
              goto aborted;
 800fbd0:	bf00      	nop
 800fbd2:	e000      	b.n	800fbd6 <tcp_input+0x6be>
          goto aborted;
 800fbd4:	bf00      	nop
    tcp_input_pcb = NULL;
 800fbd6:	4b23      	ldr	r3, [pc, #140]	; (800fc64 <tcp_input+0x74c>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fbdc:	4b25      	ldr	r3, [pc, #148]	; (800fc74 <tcp_input+0x75c>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800fbe2:	4b28      	ldr	r3, [pc, #160]	; (800fc84 <tcp_input+0x76c>)
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d037      	beq.n	800fc5a <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800fbea:	4b26      	ldr	r3, [pc, #152]	; (800fc84 <tcp_input+0x76c>)
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe f850 	bl	800dc94 <pbuf_free>
      inseg.p = NULL;
 800fbf4:	4b23      	ldr	r3, [pc, #140]	; (800fc84 <tcp_input+0x76c>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fbfa:	e02e      	b.n	800fc5a <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fbfc:	4b22      	ldr	r3, [pc, #136]	; (800fc88 <tcp_input+0x770>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	899b      	ldrh	r3, [r3, #12]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fc ff37 	bl	800ca78 <lwip_htons>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f003 0304 	and.w	r3, r3, #4
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d115      	bne.n	800fc40 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc14:	4b1d      	ldr	r3, [pc, #116]	; (800fc8c <tcp_input+0x774>)
 800fc16:	6818      	ldr	r0, [r3, #0]
 800fc18:	4b1d      	ldr	r3, [pc, #116]	; (800fc90 <tcp_input+0x778>)
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <tcp_input+0x77c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc24:	4b18      	ldr	r3, [pc, #96]	; (800fc88 <tcp_input+0x770>)
 800fc26:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc28:	885b      	ldrh	r3, [r3, #2]
 800fc2a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc2c:	4a16      	ldr	r2, [pc, #88]	; (800fc88 <tcp_input+0x770>)
 800fc2e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	b292      	uxth	r2, r2
 800fc34:	9201      	str	r2, [sp, #4]
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	4b17      	ldr	r3, [pc, #92]	; (800fc98 <tcp_input+0x780>)
 800fc3a:	4a18      	ldr	r2, [pc, #96]	; (800fc9c <tcp_input+0x784>)
 800fc3c:	f002 fba8 	bl	8012390 <tcp_rst>
    pbuf_free(p);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f7fe f827 	bl	800dc94 <pbuf_free>
  return;
 800fc46:	e008      	b.n	800fc5a <tcp_input+0x742>
    goto dropped;
 800fc48:	bf00      	nop
 800fc4a:	e002      	b.n	800fc52 <tcp_input+0x73a>
dropped:
 800fc4c:	bf00      	nop
 800fc4e:	e000      	b.n	800fc52 <tcp_input+0x73a>
      goto dropped;
 800fc50:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7fe f81e 	bl	800dc94 <pbuf_free>
 800fc58:	e000      	b.n	800fc5c <tcp_input+0x744>
  return;
 800fc5a:	bf00      	nop
}
 800fc5c:	3724      	adds	r7, #36	; 0x24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20008b84 	.word	0x20008b84
 800fc68:	20000169 	.word	0x20000169
 800fc6c:	20008b70 	.word	0x20008b70
 800fc70:	20000164 	.word	0x20000164
 800fc74:	2000016c 	.word	0x2000016c
 800fc78:	080196fc 	.word	0x080196fc
 800fc7c:	08019898 	.word	0x08019898
 800fc80:	08019740 	.word	0x08019740
 800fc84:	2000013c 	.word	0x2000013c
 800fc88:	2000014c 	.word	0x2000014c
 800fc8c:	20000160 	.word	0x20000160
 800fc90:	20000166 	.word	0x20000166
 800fc94:	2000015c 	.word	0x2000015c
 800fc98:	200057a0 	.word	0x200057a0
 800fc9c:	200057a4 	.word	0x200057a4

0800fca0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800fca8:	4b14      	ldr	r3, [pc, #80]	; (800fcfc <tcp_input_delayed_close+0x5c>)
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	f003 0310 	and.w	r3, r3, #16
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d01d      	beq.n	800fcf0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7e9b      	ldrb	r3, [r3, #26]
 800fcb8:	f003 0310 	and.w	r3, r3, #16
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10d      	bne.n	800fcdc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d008      	beq.n	800fcdc <tcp_input_delayed_close+0x3c>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	6912      	ldr	r2, [r2, #16]
 800fcd4:	f06f 010e 	mvn.w	r1, #14
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fcdc:	6879      	ldr	r1, [r7, #4]
 800fcde:	4808      	ldr	r0, [pc, #32]	; (800fd00 <tcp_input_delayed_close+0x60>)
 800fce0:	f7ff fb02 	bl	800f2e8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fce4:	6879      	ldr	r1, [r7, #4]
 800fce6:	2001      	movs	r0, #1
 800fce8:	f7fd faba 	bl	800d260 <memp_free>
    return 1;
 800fcec:	2301      	movs	r3, #1
 800fcee:	e000      	b.n	800fcf2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	20000169 	.word	0x20000169
 800fd00:	20008b70 	.word	0x20008b70

0800fd04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b088      	sub	sp, #32
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd0c:	4b64      	ldr	r3, [pc, #400]	; (800fea0 <tcp_listen_input+0x19c>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0304 	and.w	r3, r3, #4
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f040 80bc 	bne.w	800fe92 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fd1a:	4b61      	ldr	r3, [pc, #388]	; (800fea0 <tcp_listen_input+0x19c>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f003 0310 	and.w	r3, r3, #16
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d016      	beq.n	800fd54 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd26:	4b5f      	ldr	r3, [pc, #380]	; (800fea4 <tcp_listen_input+0x1a0>)
 800fd28:	6818      	ldr	r0, [r3, #0]
 800fd2a:	4b5f      	ldr	r3, [pc, #380]	; (800fea8 <tcp_listen_input+0x1a4>)
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	4b5e      	ldr	r3, [pc, #376]	; (800feac <tcp_listen_input+0x1a8>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd36:	4b5e      	ldr	r3, [pc, #376]	; (800feb0 <tcp_listen_input+0x1ac>)
 800fd38:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd3a:	885b      	ldrh	r3, [r3, #2]
 800fd3c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd3e:	4a5c      	ldr	r2, [pc, #368]	; (800feb0 <tcp_listen_input+0x1ac>)
 800fd40:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd42:	8812      	ldrh	r2, [r2, #0]
 800fd44:	b292      	uxth	r2, r2
 800fd46:	9201      	str	r2, [sp, #4]
 800fd48:	9300      	str	r3, [sp, #0]
 800fd4a:	4b5a      	ldr	r3, [pc, #360]	; (800feb4 <tcp_listen_input+0x1b0>)
 800fd4c:	4a5a      	ldr	r2, [pc, #360]	; (800feb8 <tcp_listen_input+0x1b4>)
 800fd4e:	f002 fb1f 	bl	8012390 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd52:	e0a0      	b.n	800fe96 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800fd54:	4b52      	ldr	r3, [pc, #328]	; (800fea0 <tcp_listen_input+0x19c>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	f003 0302 	and.w	r3, r3, #2
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 809a 	beq.w	800fe96 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	7d5b      	ldrb	r3, [r3, #21]
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff f9fa 	bl	800f160 <tcp_alloc>
 800fd6c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d111      	bne.n	800fd98 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	699b      	ldr	r3, [r3, #24]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00a      	beq.n	800fd92 <tcp_listen_input+0x8e>
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	699b      	ldr	r3, [r3, #24]
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	6910      	ldr	r0, [r2, #16]
 800fd84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd88:	2100      	movs	r1, #0
 800fd8a:	4798      	blx	r3
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73bb      	strb	r3, [r7, #14]
      return;
 800fd90:	e082      	b.n	800fe98 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd92:	23f0      	movs	r3, #240	; 0xf0
 800fd94:	73bb      	strb	r3, [r7, #14]
      return;
 800fd96:	e07f      	b.n	800fe98 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd98:	4b48      	ldr	r3, [pc, #288]	; (800febc <tcp_listen_input+0x1b8>)
 800fd9a:	695a      	ldr	r2, [r3, #20]
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fda0:	4b46      	ldr	r3, [pc, #280]	; (800febc <tcp_listen_input+0x1b8>)
 800fda2:	691a      	ldr	r2, [r3, #16]
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	8ada      	ldrh	r2, [r3, #22]
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fdb0:	4b3f      	ldr	r3, [pc, #252]	; (800feb0 <tcp_listen_input+0x1ac>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	881b      	ldrh	r3, [r3, #0]
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	2203      	movs	r2, #3
 800fdc0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fdc2:	4b3a      	ldr	r3, [pc, #232]	; (800feac <tcp_listen_input+0x1a8>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	1c5a      	adds	r2, r3, #1
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f7ff fb03 	bl	800f3e0 <tcp_next_iss>
 800fdda:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	693a      	ldr	r2, [r7, #16]
 800fde0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	693a      	ldr	r2, [r7, #16]
 800fde6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	693a      	ldr	r2, [r7, #16]
 800fdec:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	693a      	ldr	r2, [r7, #16]
 800fdf2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdf4:	4b2d      	ldr	r3, [pc, #180]	; (800feac <tcp_listen_input+0x1a8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	1e5a      	subs	r2, r3, #1
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	691a      	ldr	r2, [r3, #16]
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	7a1b      	ldrb	r3, [r3, #8]
 800fe10:	f003 030c 	and.w	r3, r3, #12
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fe1a:	4b29      	ldr	r3, [pc, #164]	; (800fec0 <tcp_listen_input+0x1bc>)
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	60da      	str	r2, [r3, #12]
 800fe22:	4a27      	ldr	r2, [pc, #156]	; (800fec0 <tcp_listen_input+0x1bc>)
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	6013      	str	r3, [r2, #0]
 800fe28:	f002 fd02 	bl	8012830 <tcp_timer_needed>
 800fe2c:	4b25      	ldr	r3, [pc, #148]	; (800fec4 <tcp_listen_input+0x1c0>)
 800fe2e:	2201      	movs	r2, #1
 800fe30:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe32:	6978      	ldr	r0, [r7, #20]
 800fe34:	f001 fd12 	bl	801185c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe38:	4b1d      	ldr	r3, [pc, #116]	; (800feb0 <tcp_listen_input+0x1ac>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	89db      	ldrh	r3, [r3, #14]
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	3304      	adds	r3, #4
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	f7ff fad5 	bl	800f40c <tcp_eff_send_mss_impl>
 800fe62:	4603      	mov	r3, r0
 800fe64:	461a      	mov	r2, r3
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe6a:	2112      	movs	r1, #18
 800fe6c:	6978      	ldr	r0, [r7, #20]
 800fe6e:	f001 fead 	bl	8011bcc <tcp_enqueue_flags>
 800fe72:	4603      	mov	r3, r0
 800fe74:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d004      	beq.n	800fe88 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800fe7e:	2100      	movs	r1, #0
 800fe80:	6978      	ldr	r0, [r7, #20]
 800fe82:	f7fe fb53 	bl	800e52c <tcp_abandon>
      return;
 800fe86:	e007      	b.n	800fe98 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800fe88:	6978      	ldr	r0, [r7, #20]
 800fe8a:	f001 fff7 	bl	8011e7c <tcp_output>
  return;
 800fe8e:	bf00      	nop
 800fe90:	e001      	b.n	800fe96 <tcp_listen_input+0x192>
    return;
 800fe92:	bf00      	nop
 800fe94:	e000      	b.n	800fe98 <tcp_listen_input+0x194>
  return;
 800fe96:	bf00      	nop
}
 800fe98:	3718      	adds	r7, #24
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	20000168 	.word	0x20000168
 800fea4:	20000160 	.word	0x20000160
 800fea8:	20000166 	.word	0x20000166
 800feac:	2000015c 	.word	0x2000015c
 800feb0:	2000014c 	.word	0x2000014c
 800feb4:	200057a0 	.word	0x200057a0
 800feb8:	200057a4 	.word	0x200057a4
 800febc:	20005790 	.word	0x20005790
 800fec0:	20008b70 	.word	0x20008b70
 800fec4:	20008b6c 	.word	0x20008b6c

0800fec8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af02      	add	r7, sp, #8
 800fece:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fed0:	4b29      	ldr	r3, [pc, #164]	; (800ff78 <tcp_timewait_input+0xb0>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0304 	and.w	r3, r3, #4
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d147      	bne.n	800ff6c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fedc:	4b26      	ldr	r3, [pc, #152]	; (800ff78 <tcp_timewait_input+0xb0>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 0302 	and.w	r3, r3, #2
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d027      	beq.n	800ff38 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fee8:	4b24      	ldr	r3, [pc, #144]	; (800ff7c <tcp_timewait_input+0xb4>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	db2a      	blt.n	800ff4c <tcp_timewait_input+0x84>
 800fef6:	4b21      	ldr	r3, [pc, #132]	; (800ff7c <tcp_timewait_input+0xb4>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fefe:	6879      	ldr	r1, [r7, #4]
 800ff00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff02:	440b      	add	r3, r1
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	dc20      	bgt.n	800ff4c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff0a:	4b1d      	ldr	r3, [pc, #116]	; (800ff80 <tcp_timewait_input+0xb8>)
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	4b1d      	ldr	r3, [pc, #116]	; (800ff84 <tcp_timewait_input+0xbc>)
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	461a      	mov	r2, r3
 800ff14:	4b19      	ldr	r3, [pc, #100]	; (800ff7c <tcp_timewait_input+0xb4>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff1a:	4b1b      	ldr	r3, [pc, #108]	; (800ff88 <tcp_timewait_input+0xc0>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff1e:	885b      	ldrh	r3, [r3, #2]
 800ff20:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff22:	4a19      	ldr	r2, [pc, #100]	; (800ff88 <tcp_timewait_input+0xc0>)
 800ff24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff26:	8812      	ldrh	r2, [r2, #0]
 800ff28:	b292      	uxth	r2, r2
 800ff2a:	9201      	str	r2, [sp, #4]
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	4b17      	ldr	r3, [pc, #92]	; (800ff8c <tcp_timewait_input+0xc4>)
 800ff30:	4a17      	ldr	r2, [pc, #92]	; (800ff90 <tcp_timewait_input+0xc8>)
 800ff32:	f002 fa2d 	bl	8012390 <tcp_rst>
      return;
 800ff36:	e01c      	b.n	800ff72 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800ff38:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <tcp_timewait_input+0xb0>)
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 0301 	and.w	r3, r3, #1
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d003      	beq.n	800ff4c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff44:	4b13      	ldr	r3, [pc, #76]	; (800ff94 <tcp_timewait_input+0xcc>)
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff4c:	4b0d      	ldr	r3, [pc, #52]	; (800ff84 <tcp_timewait_input+0xbc>)
 800ff4e:	881b      	ldrh	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00d      	beq.n	800ff70 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	7e9b      	ldrb	r3, [r3, #26]
 800ff58:	f043 0302 	orr.w	r3, r3, #2
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f001 ff8a 	bl	8011e7c <tcp_output>
  }
  return;
 800ff68:	bf00      	nop
 800ff6a:	e001      	b.n	800ff70 <tcp_timewait_input+0xa8>
    return;
 800ff6c:	bf00      	nop
 800ff6e:	e000      	b.n	800ff72 <tcp_timewait_input+0xaa>
  return;
 800ff70:	bf00      	nop
}
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	20000168 	.word	0x20000168
 800ff7c:	2000015c 	.word	0x2000015c
 800ff80:	20000160 	.word	0x20000160
 800ff84:	20000166 	.word	0x20000166
 800ff88:	2000014c 	.word	0x2000014c
 800ff8c:	200057a0 	.word	0x200057a0
 800ff90:	200057a4 	.word	0x200057a4
 800ff94:	20008b74 	.word	0x20008b74

0800ff98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b08a      	sub	sp, #40	; 0x28
 800ff9c:	af02      	add	r7, sp, #8
 800ff9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ffa8:	4ba4      	ldr	r3, [pc, #656]	; (801023c <tcp_process+0x2a4>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	f003 0304 	and.w	r3, r3, #4
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d04e      	beq.n	8010052 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	7d1b      	ldrb	r3, [r3, #20]
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d108      	bne.n	800ffce <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffc0:	4b9f      	ldr	r3, [pc, #636]	; (8010240 <tcp_process+0x2a8>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d123      	bne.n	8010010 <tcp_process+0x78>
        acceptable = 1;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	76fb      	strb	r3, [r7, #27]
 800ffcc:	e020      	b.n	8010010 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffd2:	4b9c      	ldr	r3, [pc, #624]	; (8010244 <tcp_process+0x2ac>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d102      	bne.n	800ffe0 <tcp_process+0x48>
        acceptable = 1;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	76fb      	strb	r3, [r7, #27]
 800ffde:	e017      	b.n	8010010 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffe0:	4b98      	ldr	r3, [pc, #608]	; (8010244 <tcp_process+0x2ac>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	db10      	blt.n	8010010 <tcp_process+0x78>
 800ffee:	4b95      	ldr	r3, [pc, #596]	; (8010244 <tcp_process+0x2ac>)
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fffa:	440b      	add	r3, r1
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dc06      	bgt.n	8010010 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	7e9b      	ldrb	r3, [r3, #26]
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	b2da      	uxtb	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010010:	7efb      	ldrb	r3, [r7, #27]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d01b      	beq.n	801004e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	7d1b      	ldrb	r3, [r3, #20]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <tcp_process+0x94>
 801001e:	4b8a      	ldr	r3, [pc, #552]	; (8010248 <tcp_process+0x2b0>)
 8010020:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010024:	4989      	ldr	r1, [pc, #548]	; (801024c <tcp_process+0x2b4>)
 8010026:	488a      	ldr	r0, [pc, #552]	; (8010250 <tcp_process+0x2b8>)
 8010028:	f007 fd58 	bl	8017adc <iprintf>
      recv_flags |= TF_RESET;
 801002c:	4b89      	ldr	r3, [pc, #548]	; (8010254 <tcp_process+0x2bc>)
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f043 0308 	orr.w	r3, r3, #8
 8010034:	b2da      	uxtb	r2, r3
 8010036:	4b87      	ldr	r3, [pc, #540]	; (8010254 <tcp_process+0x2bc>)
 8010038:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	7e9b      	ldrb	r3, [r3, #26]
 801003e:	f023 0301 	bic.w	r3, r3, #1
 8010042:	b2da      	uxtb	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8010048:	f06f 030d 	mvn.w	r3, #13
 801004c:	e34d      	b.n	80106ea <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801004e:	2300      	movs	r3, #0
 8010050:	e34b      	b.n	80106ea <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010052:	4b7a      	ldr	r3, [pc, #488]	; (801023c <tcp_process+0x2a4>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	f003 0302 	and.w	r3, r3, #2
 801005a:	2b00      	cmp	r3, #0
 801005c:	d010      	beq.n	8010080 <tcp_process+0xe8>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	7d1b      	ldrb	r3, [r3, #20]
 8010062:	2b02      	cmp	r3, #2
 8010064:	d00c      	beq.n	8010080 <tcp_process+0xe8>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	7d1b      	ldrb	r3, [r3, #20]
 801006a:	2b03      	cmp	r3, #3
 801006c:	d008      	beq.n	8010080 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	7e9b      	ldrb	r3, [r3, #26]
 8010072:	f043 0302 	orr.w	r3, r3, #2
 8010076:	b2da      	uxtb	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801007c:	2300      	movs	r3, #0
 801007e:	e334      	b.n	80106ea <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	7e9b      	ldrb	r3, [r3, #26]
 8010084:	f003 0310 	and.w	r3, r3, #16
 8010088:	2b00      	cmp	r3, #0
 801008a:	d103      	bne.n	8010094 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801008c:	4b72      	ldr	r3, [pc, #456]	; (8010258 <tcp_process+0x2c0>)
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f001 fbdd 	bl	801185c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	7d1b      	ldrb	r3, [r3, #20]
 80100a6:	3b02      	subs	r3, #2
 80100a8:	2b07      	cmp	r3, #7
 80100aa:	f200 830e 	bhi.w	80106ca <tcp_process+0x732>
 80100ae:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <tcp_process+0x11c>)
 80100b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b4:	080100d5 	.word	0x080100d5
 80100b8:	080102cd 	.word	0x080102cd
 80100bc:	08010425 	.word	0x08010425
 80100c0:	0801044f 	.word	0x0801044f
 80100c4:	08010579 	.word	0x08010579
 80100c8:	08010425 	.word	0x08010425
 80100cc:	08010605 	.word	0x08010605
 80100d0:	08010695 	.word	0x08010695
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100d4:	4b59      	ldr	r3, [pc, #356]	; (801023c <tcp_process+0x2a4>)
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	f003 0310 	and.w	r3, r3, #16
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f000 80cb 	beq.w	8010278 <tcp_process+0x2e0>
 80100e2:	4b56      	ldr	r3, [pc, #344]	; (801023c <tcp_process+0x2a4>)
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	f003 0302 	and.w	r3, r3, #2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f000 80c4 	beq.w	8010278 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	4b52      	ldr	r3, [pc, #328]	; (8010240 <tcp_process+0x2a8>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	f040 80bc 	bne.w	8010278 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8010100:	4b50      	ldr	r3, [pc, #320]	; (8010244 <tcp_process+0x2ac>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	1c5a      	adds	r2, r3, #1
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8010112:	4b4b      	ldr	r3, [pc, #300]	; (8010240 <tcp_process+0x2a8>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 801011a:	4b50      	ldr	r3, [pc, #320]	; (801025c <tcp_process+0x2c4>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	89db      	ldrh	r3, [r3, #14]
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010134:	4b43      	ldr	r3, [pc, #268]	; (8010244 <tcp_process+0x2ac>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	1e5a      	subs	r2, r3, #1
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2204      	movs	r2, #4
 8010142:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	3304      	adds	r3, #4
 801014c:	4619      	mov	r1, r3
 801014e:	4610      	mov	r0, r2
 8010150:	f7ff f95c 	bl	800f40c <tcp_eff_send_mss_impl>
 8010154:	4603      	mov	r3, r0
 8010156:	461a      	mov	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	f241 121c 	movw	r2, #4380	; 0x111c
 8010166:	429a      	cmp	r2, r3
 8010168:	bf38      	it	cc
 801016a:	461a      	movcc	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	4293      	cmp	r3, r2
 8010174:	bf28      	it	cs
 8010176:	4613      	movcs	r3, r2
 8010178:	b29a      	uxth	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <tcp_process+0x200>
 801018a:	4b2f      	ldr	r3, [pc, #188]	; (8010248 <tcp_process+0x2b0>)
 801018c:	f240 321a 	movw	r2, #794	; 0x31a
 8010190:	4933      	ldr	r1, [pc, #204]	; (8010260 <tcp_process+0x2c8>)
 8010192:	482f      	ldr	r0, [pc, #188]	; (8010250 <tcp_process+0x2b8>)
 8010194:	f007 fca2 	bl	8017adc <iprintf>
      --pcb->snd_queuelen;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801019e:	3b01      	subs	r3, #1
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ac:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d111      	bne.n	80101d8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101b8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <tcp_process+0x236>
 80101c0:	4b21      	ldr	r3, [pc, #132]	; (8010248 <tcp_process+0x2b0>)
 80101c2:	f240 3222 	movw	r2, #802	; 0x322
 80101c6:	4927      	ldr	r1, [pc, #156]	; (8010264 <tcp_process+0x2cc>)
 80101c8:	4821      	ldr	r0, [pc, #132]	; (8010250 <tcp_process+0x2b8>)
 80101ca:	f007 fc87 	bl	8017adc <iprintf>
        pcb->unsent = rseg->next;
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	669a      	str	r2, [r3, #104]	; 0x68
 80101d6:	e003      	b.n	80101e0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80101e0:	69f8      	ldr	r0, [r7, #28]
 80101e2:	f7fe feaa 	bl	800ef3a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d104      	bne.n	80101f8 <tcp_process+0x260>
        pcb->rtime = -1;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101f4:	861a      	strh	r2, [r3, #48]	; 0x30
 80101f6:	e006      	b.n	8010206 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00a      	beq.n	8010226 <tcp_process+0x28e>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	6910      	ldr	r0, [r2, #16]
 801021a:	2200      	movs	r2, #0
 801021c:	6879      	ldr	r1, [r7, #4]
 801021e:	4798      	blx	r3
 8010220:	4603      	mov	r3, r0
 8010222:	76bb      	strb	r3, [r7, #26]
 8010224:	e001      	b.n	801022a <tcp_process+0x292>
 8010226:	2300      	movs	r3, #0
 8010228:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801022a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801022e:	f113 0f0d 	cmn.w	r3, #13
 8010232:	d119      	bne.n	8010268 <tcp_process+0x2d0>
        return ERR_ABRT;
 8010234:	f06f 030c 	mvn.w	r3, #12
 8010238:	e257      	b.n	80106ea <tcp_process+0x752>
 801023a:	bf00      	nop
 801023c:	20000168 	.word	0x20000168
 8010240:	20000160 	.word	0x20000160
 8010244:	2000015c 	.word	0x2000015c
 8010248:	080196fc 	.word	0x080196fc
 801024c:	080198b4 	.word	0x080198b4
 8010250:	08019740 	.word	0x08019740
 8010254:	20000169 	.word	0x20000169
 8010258:	20008b74 	.word	0x20008b74
 801025c:	2000014c 	.word	0x2000014c
 8010260:	080198d4 	.word	0x080198d4
 8010264:	080198ec 	.word	0x080198ec
      }
      tcp_ack_now(pcb);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	7e9b      	ldrb	r3, [r3, #26]
 801026c:	f043 0302 	orr.w	r3, r3, #2
 8010270:	b2da      	uxtb	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8010276:	e22a      	b.n	80106ce <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8010278:	4b9f      	ldr	r3, [pc, #636]	; (80104f8 <tcp_process+0x560>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	f003 0310 	and.w	r3, r3, #16
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 8224 	beq.w	80106ce <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010286:	4b9d      	ldr	r3, [pc, #628]	; (80104fc <tcp_process+0x564>)
 8010288:	6818      	ldr	r0, [r3, #0]
 801028a:	4b9d      	ldr	r3, [pc, #628]	; (8010500 <tcp_process+0x568>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	461a      	mov	r2, r3
 8010290:	4b9c      	ldr	r3, [pc, #624]	; (8010504 <tcp_process+0x56c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010296:	4b9c      	ldr	r3, [pc, #624]	; (8010508 <tcp_process+0x570>)
 8010298:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801029a:	885b      	ldrh	r3, [r3, #2]
 801029c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801029e:	4a9a      	ldr	r2, [pc, #616]	; (8010508 <tcp_process+0x570>)
 80102a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80102a2:	8812      	ldrh	r2, [r2, #0]
 80102a4:	b292      	uxth	r2, r2
 80102a6:	9201      	str	r2, [sp, #4]
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4b98      	ldr	r3, [pc, #608]	; (801050c <tcp_process+0x574>)
 80102ac:	4a98      	ldr	r2, [pc, #608]	; (8010510 <tcp_process+0x578>)
 80102ae:	f002 f86f 	bl	8012390 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102b8:	2b05      	cmp	r3, #5
 80102ba:	f200 8208 	bhi.w	80106ce <tcp_process+0x736>
        pcb->rtime = 0;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	2200      	movs	r2, #0
 80102c2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f002 f8d9 	bl	801247c <tcp_rexmit_rto>
    break;
 80102ca:	e200      	b.n	80106ce <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80102cc:	4b8a      	ldr	r3, [pc, #552]	; (80104f8 <tcp_process+0x560>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 0310 	and.w	r3, r3, #16
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 8091 	beq.w	80103fc <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80102da:	4b88      	ldr	r3, [pc, #544]	; (80104fc <tcp_process+0x564>)
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	3b01      	subs	r3, #1
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	db71      	blt.n	80103ce <tcp_process+0x436>
 80102ea:	4b84      	ldr	r3, [pc, #528]	; (80104fc <tcp_process+0x564>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	dc6a      	bgt.n	80103ce <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2204      	movs	r2, #4
 80102fc:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00b      	beq.n	801031e <tcp_process+0x386>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801030a:	699b      	ldr	r3, [r3, #24]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d106      	bne.n	801031e <tcp_process+0x386>
 8010310:	4b80      	ldr	r3, [pc, #512]	; (8010514 <tcp_process+0x57c>)
 8010312:	f240 3251 	movw	r2, #849	; 0x351
 8010316:	4980      	ldr	r1, [pc, #512]	; (8010518 <tcp_process+0x580>)
 8010318:	4880      	ldr	r0, [pc, #512]	; (801051c <tcp_process+0x584>)
 801031a:	f007 fbdf 	bl	8017adc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010322:	2b00      	cmp	r3, #0
 8010324:	d102      	bne.n	801032c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8010326:	23fa      	movs	r3, #250	; 0xfa
 8010328:	76bb      	strb	r3, [r7, #26]
 801032a:	e011      	b.n	8010350 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010330:	699b      	ldr	r3, [r3, #24]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00a      	beq.n	801034c <tcp_process+0x3b4>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	6910      	ldr	r0, [r2, #16]
 8010340:	2200      	movs	r2, #0
 8010342:	6879      	ldr	r1, [r7, #4]
 8010344:	4798      	blx	r3
 8010346:	4603      	mov	r3, r0
 8010348:	76bb      	strb	r3, [r7, #26]
 801034a:	e001      	b.n	8010350 <tcp_process+0x3b8>
 801034c:	23f0      	movs	r3, #240	; 0xf0
 801034e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8010350:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00a      	beq.n	801036e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8010358:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801035c:	f113 0f0d 	cmn.w	r3, #13
 8010360:	d002      	beq.n	8010368 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7fe f994 	bl	800e690 <tcp_abort>
          }
          return ERR_ABRT;
 8010368:	f06f 030c 	mvn.w	r3, #12
 801036c:	e1bd      	b.n	80106ea <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fa42 	bl	80107f8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8010374:	4b6a      	ldr	r3, [pc, #424]	; (8010520 <tcp_process+0x588>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d005      	beq.n	8010388 <tcp_process+0x3f0>
          recv_acked--;
 801037c:	4b68      	ldr	r3, [pc, #416]	; (8010520 <tcp_process+0x588>)
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	3b01      	subs	r3, #1
 8010382:	b29a      	uxth	r2, r3
 8010384:	4b66      	ldr	r3, [pc, #408]	; (8010520 <tcp_process+0x588>)
 8010386:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801038c:	005b      	lsls	r3, r3, #1
 801038e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010392:	429a      	cmp	r2, r3
 8010394:	bf38      	it	cc
 8010396:	461a      	movcc	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	4293      	cmp	r3, r2
 80103a0:	bf28      	it	cs
 80103a2:	4613      	movcs	r3, r2
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80103ac:	4b5d      	ldr	r3, [pc, #372]	; (8010524 <tcp_process+0x58c>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	f003 0320 	and.w	r3, r3, #32
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d034      	beq.n	8010422 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	7e9b      	ldrb	r3, [r3, #26]
 80103bc:	f043 0302 	orr.w	r3, r3, #2
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2207      	movs	r2, #7
 80103ca:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80103cc:	e029      	b.n	8010422 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103ce:	4b4b      	ldr	r3, [pc, #300]	; (80104fc <tcp_process+0x564>)
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	4b4b      	ldr	r3, [pc, #300]	; (8010500 <tcp_process+0x568>)
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	461a      	mov	r2, r3
 80103d8:	4b4a      	ldr	r3, [pc, #296]	; (8010504 <tcp_process+0x56c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103de:	4b4a      	ldr	r3, [pc, #296]	; (8010508 <tcp_process+0x570>)
 80103e0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e2:	885b      	ldrh	r3, [r3, #2]
 80103e4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103e6:	4a48      	ldr	r2, [pc, #288]	; (8010508 <tcp_process+0x570>)
 80103e8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103ea:	8812      	ldrh	r2, [r2, #0]
 80103ec:	b292      	uxth	r2, r2
 80103ee:	9201      	str	r2, [sp, #4]
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	4b46      	ldr	r3, [pc, #280]	; (801050c <tcp_process+0x574>)
 80103f4:	4a46      	ldr	r2, [pc, #280]	; (8010510 <tcp_process+0x578>)
 80103f6:	f001 ffcb 	bl	8012390 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80103fa:	e16a      	b.n	80106d2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80103fc:	4b3e      	ldr	r3, [pc, #248]	; (80104f8 <tcp_process+0x560>)
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	f003 0302 	and.w	r3, r3, #2
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 8164 	beq.w	80106d2 <tcp_process+0x73a>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	1e5a      	subs	r2, r3, #1
 8010410:	4b3c      	ldr	r3, [pc, #240]	; (8010504 <tcp_process+0x56c>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	429a      	cmp	r2, r3
 8010416:	f040 815c 	bne.w	80106d2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f002 f864 	bl	80124e8 <tcp_rexmit>
    break;
 8010420:	e157      	b.n	80106d2 <tcp_process+0x73a>
 8010422:	e156      	b.n	80106d2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f000 f9e7 	bl	80107f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 801042a:	4b3e      	ldr	r3, [pc, #248]	; (8010524 <tcp_process+0x58c>)
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	f003 0320 	and.w	r3, r3, #32
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 814f 	beq.w	80106d6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	7e9b      	ldrb	r3, [r3, #26]
 801043c:	f043 0302 	orr.w	r3, r3, #2
 8010440:	b2da      	uxtb	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2207      	movs	r2, #7
 801044a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801044c:	e143      	b.n	80106d6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f9d2 	bl	80107f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8010454:	4b33      	ldr	r3, [pc, #204]	; (8010524 <tcp_process+0x58c>)
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0320 	and.w	r3, r3, #32
 801045c:	2b00      	cmp	r3, #0
 801045e:	d074      	beq.n	801054a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010460:	4b25      	ldr	r3, [pc, #148]	; (80104f8 <tcp_process+0x560>)
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	f003 0310 	and.w	r3, r3, #16
 8010468:	2b00      	cmp	r3, #0
 801046a:	d063      	beq.n	8010534 <tcp_process+0x59c>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010470:	4b22      	ldr	r3, [pc, #136]	; (80104fc <tcp_process+0x564>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	429a      	cmp	r2, r3
 8010476:	d15d      	bne.n	8010534 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801047c:	2b00      	cmp	r3, #0
 801047e:	d159      	bne.n	8010534 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7e9b      	ldrb	r3, [r3, #26]
 8010484:	f043 0302 	orr.w	r3, r3, #2
 8010488:	b2da      	uxtb	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7fe fee8 	bl	800f264 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010494:	4b24      	ldr	r3, [pc, #144]	; (8010528 <tcp_process+0x590>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	429a      	cmp	r2, r3
 801049c:	d105      	bne.n	80104aa <tcp_process+0x512>
 801049e:	4b22      	ldr	r3, [pc, #136]	; (8010528 <tcp_process+0x590>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	4a20      	ldr	r2, [pc, #128]	; (8010528 <tcp_process+0x590>)
 80104a6:	6013      	str	r3, [r2, #0]
 80104a8:	e013      	b.n	80104d2 <tcp_process+0x53a>
 80104aa:	4b1f      	ldr	r3, [pc, #124]	; (8010528 <tcp_process+0x590>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	e00c      	b.n	80104cc <tcp_process+0x534>
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d104      	bne.n	80104c6 <tcp_process+0x52e>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	68da      	ldr	r2, [r3, #12]
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	60da      	str	r2, [r3, #12]
 80104c4:	e005      	b.n	80104d2 <tcp_process+0x53a>
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	617b      	str	r3, [r7, #20]
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1ef      	bne.n	80104b2 <tcp_process+0x51a>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	60da      	str	r2, [r3, #12]
 80104d8:	4b14      	ldr	r3, [pc, #80]	; (801052c <tcp_process+0x594>)
 80104da:	2201      	movs	r2, #1
 80104dc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	220a      	movs	r2, #10
 80104e2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104e4:	4b12      	ldr	r3, [pc, #72]	; (8010530 <tcp_process+0x598>)
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	60da      	str	r2, [r3, #12]
 80104ec:	4a10      	ldr	r2, [pc, #64]	; (8010530 <tcp_process+0x598>)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6013      	str	r3, [r2, #0]
 80104f2:	f002 f99d 	bl	8012830 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80104f6:	e0f0      	b.n	80106da <tcp_process+0x742>
 80104f8:	20000168 	.word	0x20000168
 80104fc:	20000160 	.word	0x20000160
 8010500:	20000166 	.word	0x20000166
 8010504:	2000015c 	.word	0x2000015c
 8010508:	2000014c 	.word	0x2000014c
 801050c:	200057a0 	.word	0x200057a0
 8010510:	200057a4 	.word	0x200057a4
 8010514:	080196fc 	.word	0x080196fc
 8010518:	08019900 	.word	0x08019900
 801051c:	08019740 	.word	0x08019740
 8010520:	20000164 	.word	0x20000164
 8010524:	20000169 	.word	0x20000169
 8010528:	20008b70 	.word	0x20008b70
 801052c:	20008b6c 	.word	0x20008b6c
 8010530:	20008b80 	.word	0x20008b80
        tcp_ack_now(pcb);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7e9b      	ldrb	r3, [r3, #26]
 8010538:	f043 0302 	orr.w	r3, r3, #2
 801053c:	b2da      	uxtb	r2, r3
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2208      	movs	r2, #8
 8010546:	751a      	strb	r2, [r3, #20]
    break;
 8010548:	e0c7      	b.n	80106da <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801054a:	4b6a      	ldr	r3, [pc, #424]	; (80106f4 <tcp_process+0x75c>)
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	f003 0310 	and.w	r3, r3, #16
 8010552:	2b00      	cmp	r3, #0
 8010554:	f000 80c1 	beq.w	80106da <tcp_process+0x742>
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801055c:	4b66      	ldr	r3, [pc, #408]	; (80106f8 <tcp_process+0x760>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	f040 80ba 	bne.w	80106da <tcp_process+0x742>
               pcb->unsent == NULL) {
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801056a:	2b00      	cmp	r3, #0
 801056c:	f040 80b5 	bne.w	80106da <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2206      	movs	r2, #6
 8010574:	751a      	strb	r2, [r3, #20]
    break;
 8010576:	e0b0      	b.n	80106da <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f000 f93d 	bl	80107f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801057e:	4b5f      	ldr	r3, [pc, #380]	; (80106fc <tcp_process+0x764>)
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	f003 0320 	and.w	r3, r3, #32
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80a9 	beq.w	80106de <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7e9b      	ldrb	r3, [r3, #26]
 8010590:	f043 0302 	orr.w	r3, r3, #2
 8010594:	b2da      	uxtb	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7fe fe62 	bl	800f264 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80105a0:	4b57      	ldr	r3, [pc, #348]	; (8010700 <tcp_process+0x768>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d105      	bne.n	80105b6 <tcp_process+0x61e>
 80105aa:	4b55      	ldr	r3, [pc, #340]	; (8010700 <tcp_process+0x768>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	4a53      	ldr	r2, [pc, #332]	; (8010700 <tcp_process+0x768>)
 80105b2:	6013      	str	r3, [r2, #0]
 80105b4:	e013      	b.n	80105de <tcp_process+0x646>
 80105b6:	4b52      	ldr	r3, [pc, #328]	; (8010700 <tcp_process+0x768>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	613b      	str	r3, [r7, #16]
 80105bc:	e00c      	b.n	80105d8 <tcp_process+0x640>
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d104      	bne.n	80105d2 <tcp_process+0x63a>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68da      	ldr	r2, [r3, #12]
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	60da      	str	r2, [r3, #12]
 80105d0:	e005      	b.n	80105de <tcp_process+0x646>
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	613b      	str	r3, [r7, #16]
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1ef      	bne.n	80105be <tcp_process+0x626>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	60da      	str	r2, [r3, #12]
 80105e4:	4b47      	ldr	r3, [pc, #284]	; (8010704 <tcp_process+0x76c>)
 80105e6:	2201      	movs	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	220a      	movs	r2, #10
 80105ee:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80105f0:	4b45      	ldr	r3, [pc, #276]	; (8010708 <tcp_process+0x770>)
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	60da      	str	r2, [r3, #12]
 80105f8:	4a43      	ldr	r2, [pc, #268]	; (8010708 <tcp_process+0x770>)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6013      	str	r3, [r2, #0]
 80105fe:	f002 f917 	bl	8012830 <tcp_timer_needed>
    }
    break;
 8010602:	e06c      	b.n	80106de <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f000 f8f7 	bl	80107f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801060a:	4b3a      	ldr	r3, [pc, #232]	; (80106f4 <tcp_process+0x75c>)
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f003 0310 	and.w	r3, r3, #16
 8010612:	2b00      	cmp	r3, #0
 8010614:	d065      	beq.n	80106e2 <tcp_process+0x74a>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801061a:	4b37      	ldr	r3, [pc, #220]	; (80106f8 <tcp_process+0x760>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	429a      	cmp	r2, r3
 8010620:	d15f      	bne.n	80106e2 <tcp_process+0x74a>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010626:	2b00      	cmp	r3, #0
 8010628:	d15b      	bne.n	80106e2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7fe fe1a 	bl	800f264 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010630:	4b33      	ldr	r3, [pc, #204]	; (8010700 <tcp_process+0x768>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	429a      	cmp	r2, r3
 8010638:	d105      	bne.n	8010646 <tcp_process+0x6ae>
 801063a:	4b31      	ldr	r3, [pc, #196]	; (8010700 <tcp_process+0x768>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	4a2f      	ldr	r2, [pc, #188]	; (8010700 <tcp_process+0x768>)
 8010642:	6013      	str	r3, [r2, #0]
 8010644:	e013      	b.n	801066e <tcp_process+0x6d6>
 8010646:	4b2e      	ldr	r3, [pc, #184]	; (8010700 <tcp_process+0x768>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	60fb      	str	r3, [r7, #12]
 801064c:	e00c      	b.n	8010668 <tcp_process+0x6d0>
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	429a      	cmp	r2, r3
 8010656:	d104      	bne.n	8010662 <tcp_process+0x6ca>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	68da      	ldr	r2, [r3, #12]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	60da      	str	r2, [r3, #12]
 8010660:	e005      	b.n	801066e <tcp_process+0x6d6>
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	60fb      	str	r3, [r7, #12]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1ef      	bne.n	801064e <tcp_process+0x6b6>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2200      	movs	r2, #0
 8010672:	60da      	str	r2, [r3, #12]
 8010674:	4b23      	ldr	r3, [pc, #140]	; (8010704 <tcp_process+0x76c>)
 8010676:	2201      	movs	r2, #1
 8010678:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	220a      	movs	r2, #10
 801067e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010680:	4b21      	ldr	r3, [pc, #132]	; (8010708 <tcp_process+0x770>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	60da      	str	r2, [r3, #12]
 8010688:	4a1f      	ldr	r2, [pc, #124]	; (8010708 <tcp_process+0x770>)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6013      	str	r3, [r2, #0]
 801068e:	f002 f8cf 	bl	8012830 <tcp_timer_needed>
    }
    break;
 8010692:	e026      	b.n	80106e2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 f8af 	bl	80107f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801069a:	4b16      	ldr	r3, [pc, #88]	; (80106f4 <tcp_process+0x75c>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	f003 0310 	and.w	r3, r3, #16
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d01f      	beq.n	80106e6 <tcp_process+0x74e>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <tcp_process+0x760>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d119      	bne.n	80106e6 <tcp_process+0x74e>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d115      	bne.n	80106e6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80106ba:	4b10      	ldr	r3, [pc, #64]	; (80106fc <tcp_process+0x764>)
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	f043 0310 	orr.w	r3, r3, #16
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	4b0d      	ldr	r3, [pc, #52]	; (80106fc <tcp_process+0x764>)
 80106c6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80106c8:	e00d      	b.n	80106e6 <tcp_process+0x74e>
  default:
    break;
 80106ca:	bf00      	nop
 80106cc:	e00c      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106ce:	bf00      	nop
 80106d0:	e00a      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106d2:	bf00      	nop
 80106d4:	e008      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106d6:	bf00      	nop
 80106d8:	e006      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106da:	bf00      	nop
 80106dc:	e004      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106de:	bf00      	nop
 80106e0:	e002      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106e2:	bf00      	nop
 80106e4:	e000      	b.n	80106e8 <tcp_process+0x750>
    break;
 80106e6:	bf00      	nop
  }
  return ERR_OK;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3720      	adds	r7, #32
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20000168 	.word	0x20000168
 80106f8:	20000160 	.word	0x20000160
 80106fc:	20000169 	.word	0x20000169
 8010700:	20008b70 	.word	0x20008b70
 8010704:	20008b6c 	.word	0x20008b6c
 8010708:	20008b80 	.word	0x20008b80

0801070c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801070c:	b590      	push	{r4, r7, lr}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	899b      	ldrh	r3, [r3, #12]
 801071c:	b29b      	uxth	r3, r3
 801071e:	4618      	mov	r0, r3
 8010720:	f7fc f9aa 	bl	800ca78 <lwip_htons>
 8010724:	4603      	mov	r3, r0
 8010726:	f003 0301 	and.w	r3, r3, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	d027      	beq.n	801077e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801072e:	6838      	ldr	r0, [r7, #0]
 8010730:	f7fe fbef 	bl	800ef12 <tcp_segs_free>
    next = NULL;
 8010734:	2300      	movs	r3, #0
 8010736:	603b      	str	r3, [r7, #0]
 8010738:	e055      	b.n	80107e6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	899b      	ldrh	r3, [r3, #12]
 8010740:	b29b      	uxth	r3, r3
 8010742:	4618      	mov	r0, r3
 8010744:	f7fc f998 	bl	800ca78 <lwip_htons>
 8010748:	4603      	mov	r3, r0
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00d      	beq.n	801076e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	899b      	ldrh	r3, [r3, #12]
 8010758:	b29c      	uxth	r4, r3
 801075a:	2001      	movs	r0, #1
 801075c:	f7fc f98c 	bl	800ca78 <lwip_htons>
 8010760:	4603      	mov	r3, r0
 8010762:	461a      	mov	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	4322      	orrs	r2, r4
 801076a:	b292      	uxth	r2, r2
 801076c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f7fe fbde 	bl	800ef3a <tcp_seg_free>
    while (next &&
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00e      	beq.n	80107a2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	891b      	ldrh	r3, [r3, #8]
 8010788:	461a      	mov	r2, r3
 801078a:	4b1a      	ldr	r3, [pc, #104]	; (80107f4 <tcp_oos_insert_segment+0xe8>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	441a      	add	r2, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	6839      	ldr	r1, [r7, #0]
 8010798:	8909      	ldrh	r1, [r1, #8]
 801079a:	440b      	add	r3, r1
 801079c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801079e:	2b00      	cmp	r3, #0
 80107a0:	dacb      	bge.n	801073a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d01e      	beq.n	80107e6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	891b      	ldrh	r3, [r3, #8]
 80107ac:	461a      	mov	r2, r3
 80107ae:	4b11      	ldr	r3, [pc, #68]	; (80107f4 <tcp_oos_insert_segment+0xe8>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	441a      	add	r2, r3
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd12      	ble.n	80107e6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	4b0a      	ldr	r3, [pc, #40]	; (80107f4 <tcp_oos_insert_segment+0xe8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	685a      	ldr	r2, [r3, #4]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	891b      	ldrh	r3, [r3, #8]
 80107de:	4619      	mov	r1, r3
 80107e0:	4610      	mov	r0, r2
 80107e2:	f7fd f8e3 	bl	800d9ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	683a      	ldr	r2, [r7, #0]
 80107ea:	601a      	str	r2, [r3, #0]
}
 80107ec:	bf00      	nop
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd90      	pop	{r4, r7, pc}
 80107f4:	2000015c 	.word	0x2000015c

080107f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80107f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fa:	b08d      	sub	sp, #52	; 0x34
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010800:	2300      	movs	r3, #0
 8010802:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	7d1b      	ldrb	r3, [r3, #20]
 8010808:	2b03      	cmp	r3, #3
 801080a:	d806      	bhi.n	801081a <tcp_receive+0x22>
 801080c:	4ba6      	ldr	r3, [pc, #664]	; (8010aa8 <tcp_receive+0x2b0>)
 801080e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010812:	49a6      	ldr	r1, [pc, #664]	; (8010aac <tcp_receive+0x2b4>)
 8010814:	48a6      	ldr	r0, [pc, #664]	; (8010ab0 <tcp_receive+0x2b8>)
 8010816:	f007 f961 	bl	8017adc <iprintf>

  if (flags & TCP_ACK) {
 801081a:	4ba6      	ldr	r3, [pc, #664]	; (8010ab4 <tcp_receive+0x2bc>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	f003 0310 	and.w	r3, r3, #16
 8010822:	2b00      	cmp	r3, #0
 8010824:	f000 82bf 	beq.w	8010da6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801082e:	461a      	mov	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010834:	4413      	add	r3, r2
 8010836:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801083c:	4b9e      	ldr	r3, [pc, #632]	; (8010ab8 <tcp_receive+0x2c0>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	db1b      	blt.n	801087e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801084a:	4b9b      	ldr	r3, [pc, #620]	; (8010ab8 <tcp_receive+0x2c0>)
 801084c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801084e:	429a      	cmp	r2, r3
 8010850:	d106      	bne.n	8010860 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010856:	4b99      	ldr	r3, [pc, #612]	; (8010abc <tcp_receive+0x2c4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	2b00      	cmp	r3, #0
 801085e:	db0e      	blt.n	801087e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010864:	4b95      	ldr	r3, [pc, #596]	; (8010abc <tcp_receive+0x2c4>)
 8010866:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010868:	429a      	cmp	r2, r3
 801086a:	d141      	bne.n	80108f0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801086c:	4b94      	ldr	r3, [pc, #592]	; (8010ac0 <tcp_receive+0x2c8>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	89db      	ldrh	r3, [r3, #14]
 8010872:	b29a      	uxth	r2, r3
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801087a:	429a      	cmp	r2, r3
 801087c:	d938      	bls.n	80108f0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801087e:	4b90      	ldr	r3, [pc, #576]	; (8010ac0 <tcp_receive+0x2c8>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	89db      	ldrh	r3, [r3, #14]
 8010884:	b29a      	uxth	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010898:	429a      	cmp	r2, r3
 801089a:	d205      	bcs.n	80108a8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80108a8:	4b83      	ldr	r3, [pc, #524]	; (8010ab8 <tcp_receive+0x2c0>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80108b0:	4b82      	ldr	r3, [pc, #520]	; (8010abc <tcp_receive+0x2c4>)
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10d      	bne.n	80108de <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d111      	bne.n	80108f0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80108dc:	e008      	b.n	80108f0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d003      	beq.n	80108f0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80108f0:	4b72      	ldr	r3, [pc, #456]	; (8010abc <tcp_receive+0x2c4>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dc53      	bgt.n	80109a6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80108fe:	4b71      	ldr	r3, [pc, #452]	; (8010ac4 <tcp_receive+0x2cc>)
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d146      	bne.n	8010994 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8010910:	4413      	add	r3, r2
 8010912:	697a      	ldr	r2, [r7, #20]
 8010914:	429a      	cmp	r2, r3
 8010916:	d13d      	bne.n	8010994 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801091e:	2b00      	cmp	r3, #0
 8010920:	db38      	blt.n	8010994 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010926:	4b65      	ldr	r3, [pc, #404]	; (8010abc <tcp_receive+0x2c4>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	429a      	cmp	r2, r3
 801092c:	d132      	bne.n	8010994 <tcp_receive+0x19c>
              found_dupack = 1;
 801092e:	2301      	movs	r3, #1
 8010930:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010938:	2bff      	cmp	r3, #255	; 0xff
 801093a:	d007      	beq.n	801094c <tcp_receive+0x154>
                ++pcb->dupacks;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010942:	3301      	adds	r3, #1
 8010944:	b2da      	uxtb	r2, r3
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010952:	2b03      	cmp	r3, #3
 8010954:	d916      	bls.n	8010984 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010960:	4413      	add	r3, r2
 8010962:	b29a      	uxth	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801096a:	429a      	cmp	r2, r3
 801096c:	d912      	bls.n	8010994 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010978:	4413      	add	r3, r2
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010982:	e007      	b.n	8010994 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801098a:	2b03      	cmp	r3, #3
 801098c:	d102      	bne.n	8010994 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f001 fdfa 	bl	8012588 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f040 8169 	bne.w	8010c6e <tcp_receive+0x476>
        pcb->dupacks = 0;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109a4:	e163      	b.n	8010c6e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80109a6:	4b45      	ldr	r3, [pc, #276]	; (8010abc <tcp_receive+0x2c4>)
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	3b01      	subs	r3, #1
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f2c0 8107 	blt.w	8010bc6 <tcp_receive+0x3ce>
 80109b8:	4b40      	ldr	r3, [pc, #256]	; (8010abc <tcp_receive+0x2c4>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	f300 80ff 	bgt.w	8010bc6 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	7e9b      	ldrb	r3, [r3, #26]
 80109cc:	f003 0304 	and.w	r3, r3, #4
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00c      	beq.n	80109ee <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	7e9b      	ldrb	r3, [r3, #26]
 80109d8:	f023 0304 	bic.w	r3, r3, #4
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2200      	movs	r2, #0
 80109f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109fc:	10db      	asrs	r3, r3, #3
 80109fe:	b21b      	sxth	r3, r3
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	4413      	add	r3, r2
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	b21a      	sxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a1e:	4b27      	ldr	r3, [pc, #156]	; (8010abc <tcp_receive+0x2c4>)
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	7d1b      	ldrb	r3, [r3, #20]
 8010a2a:	2b03      	cmp	r3, #3
 8010a2c:	f240 8094 	bls.w	8010b58 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d216      	bcs.n	8010a6e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a4a:	4413      	add	r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d97f      	bls.n	8010b58 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a62:	4413      	add	r3, r2
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010a6c:	e074      	b.n	8010b58 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a78:	4619      	mov	r1, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a7e:	fb03 f301 	mul.w	r3, r3, r1
 8010a82:	6879      	ldr	r1, [r7, #4]
 8010a84:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010a88:	fb93 f3f1 	sdiv	r3, r3, r1
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	4413      	add	r3, r2
 8010a90:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a98:	8a7a      	ldrh	r2, [r7, #18]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d95c      	bls.n	8010b58 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	8a7a      	ldrh	r2, [r7, #18]
 8010aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010aa6:	e057      	b.n	8010b58 <tcp_receive+0x360>
 8010aa8:	080196fc 	.word	0x080196fc
 8010aac:	08019920 	.word	0x08019920
 8010ab0:	08019740 	.word	0x08019740
 8010ab4:	20000168 	.word	0x20000168
 8010ab8:	2000015c 	.word	0x2000015c
 8010abc:	20000160 	.word	0x20000160
 8010ac0:	2000014c 	.word	0x2000014c
 8010ac4:	20000166 	.word	0x20000166
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fd f96a 	bl	800ddbc <pbuf_clen>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	429c      	cmp	r4, r3
 8010aec:	d206      	bcs.n	8010afc <tcp_receive+0x304>
 8010aee:	4b70      	ldr	r3, [pc, #448]	; (8010cb0 <tcp_receive+0x4b8>)
 8010af0:	f240 429e 	movw	r2, #1182	; 0x49e
 8010af4:	496f      	ldr	r1, [pc, #444]	; (8010cb4 <tcp_receive+0x4bc>)
 8010af6:	4870      	ldr	r0, [pc, #448]	; (8010cb8 <tcp_receive+0x4c0>)
 8010af8:	f006 fff0 	bl	8017adc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fd f95b 	bl	800ddbc <pbuf_clen>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b10:	1a9b      	subs	r3, r3, r2
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8010b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1c:	891a      	ldrh	r2, [r3, #8]
 8010b1e:	4b67      	ldr	r3, [pc, #412]	; (8010cbc <tcp_receive+0x4c4>)
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	4413      	add	r3, r2
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	4b65      	ldr	r3, [pc, #404]	; (8010cbc <tcp_receive+0x4c4>)
 8010b28:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8010b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b2c:	f7fe fa05 	bl	800ef3a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d00e      	beq.n	8010b58 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10a      	bne.n	8010b58 <tcp_receive+0x360>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <tcp_receive+0x360>
 8010b4a:	4b59      	ldr	r3, [pc, #356]	; (8010cb0 <tcp_receive+0x4b8>)
 8010b4c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010b50:	495b      	ldr	r1, [pc, #364]	; (8010cc0 <tcp_receive+0x4c8>)
 8010b52:	4859      	ldr	r0, [pc, #356]	; (8010cb8 <tcp_receive+0x4c0>)
 8010b54:	f006 ffc2 	bl	8017adc <iprintf>
      while (pcb->unacked != NULL &&
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d022      	beq.n	8010ba6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fb ff92 	bl	800ca92 <lwip_htonl>
 8010b6e:	4604      	mov	r4, r0
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b74:	891b      	ldrh	r3, [r3, #8]
 8010b76:	461d      	mov	r5, r3
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	899b      	ldrh	r3, [r3, #12]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fb ff78 	bl	800ca78 <lwip_htons>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	f003 0303 	and.w	r3, r3, #3
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d001      	beq.n	8010b96 <tcp_receive+0x39e>
 8010b92:	2301      	movs	r3, #1
 8010b94:	e000      	b.n	8010b98 <tcp_receive+0x3a0>
 8010b96:	2300      	movs	r3, #0
 8010b98:	442b      	add	r3, r5
 8010b9a:	18e2      	adds	r2, r4, r3
 8010b9c:	4b49      	ldr	r3, [pc, #292]	; (8010cc4 <tcp_receive+0x4cc>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	dd90      	ble.n	8010ac8 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d104      	bne.n	8010bb8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bb4:	861a      	strh	r2, [r3, #48]	; 0x30
 8010bb6:	e002      	b.n	8010bbe <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	76da      	strb	r2, [r3, #27]
 8010bc4:	e002      	b.n	8010bcc <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f001 f8fc 	bl	8011dc4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8010bcc:	e04f      	b.n	8010c6e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d103      	bne.n	8010bee <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fd f8df 	bl	800ddbc <pbuf_clen>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	429c      	cmp	r4, r3
 8010c02:	d206      	bcs.n	8010c12 <tcp_receive+0x41a>
 8010c04:	4b2a      	ldr	r3, [pc, #168]	; (8010cb0 <tcp_receive+0x4b8>)
 8010c06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010c0a:	492a      	ldr	r1, [pc, #168]	; (8010cb4 <tcp_receive+0x4bc>)
 8010c0c:	482a      	ldr	r0, [pc, #168]	; (8010cb8 <tcp_receive+0x4c0>)
 8010c0e:	f006 ff65 	bl	8017adc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fd f8d0 	bl	800ddbc <pbuf_clen>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	461a      	mov	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c26:	1a9b      	subs	r3, r3, r2
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c32:	891a      	ldrh	r2, [r3, #8]
 8010c34:	4b21      	ldr	r3, [pc, #132]	; (8010cbc <tcp_receive+0x4c4>)
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	4b1f      	ldr	r3, [pc, #124]	; (8010cbc <tcp_receive+0x4c4>)
 8010c3e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c42:	f7fe f97a 	bl	800ef3a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00e      	beq.n	8010c6e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10a      	bne.n	8010c6e <tcp_receive+0x476>
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d106      	bne.n	8010c6e <tcp_receive+0x476>
 8010c60:	4b13      	ldr	r3, [pc, #76]	; (8010cb0 <tcp_receive+0x4b8>)
 8010c62:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010c66:	4916      	ldr	r1, [pc, #88]	; (8010cc0 <tcp_receive+0x4c8>)
 8010c68:	4813      	ldr	r0, [pc, #76]	; (8010cb8 <tcp_receive+0x4c0>)
 8010c6a:	f006 ff37 	bl	8017adc <iprintf>
    while (pcb->unsent != NULL &&
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d036      	beq.n	8010ce4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010c76:	4b13      	ldr	r3, [pc, #76]	; (8010cc4 <tcp_receive+0x4cc>)
 8010c78:	681c      	ldr	r4, [r3, #0]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fb ff05 	bl	800ca92 <lwip_htonl>
 8010c88:	4605      	mov	r5, r0
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c8e:	891b      	ldrh	r3, [r3, #8]
 8010c90:	461e      	mov	r6, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	899b      	ldrh	r3, [r3, #12]
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fb feeb 	bl	800ca78 <lwip_htons>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	f003 0303 	and.w	r3, r3, #3
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00d      	beq.n	8010cc8 <tcp_receive+0x4d0>
 8010cac:	2301      	movs	r3, #1
 8010cae:	e00c      	b.n	8010cca <tcp_receive+0x4d2>
 8010cb0:	080196fc 	.word	0x080196fc
 8010cb4:	0801993c 	.word	0x0801993c
 8010cb8:	08019740 	.word	0x08019740
 8010cbc:	20000164 	.word	0x20000164
 8010cc0:	08019964 	.word	0x08019964
 8010cc4:	20000160 	.word	0x20000160
 8010cc8:	2300      	movs	r3, #0
 8010cca:	4433      	add	r3, r6
 8010ccc:	442b      	add	r3, r5
 8010cce:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	db07      	blt.n	8010ce4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010cd4:	4b8d      	ldr	r3, [pc, #564]	; (8010f0c <tcp_receive+0x714>)
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f77f af75 	ble.w	8010bce <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cea:	4b89      	ldr	r3, [pc, #548]	; (8010f10 <tcp_receive+0x718>)
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	4413      	add	r3, r2
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d052      	beq.n	8010da6 <tcp_receive+0x5ae>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d04:	4b81      	ldr	r3, [pc, #516]	; (8010f0c <tcp_receive+0x714>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	da4b      	bge.n	8010da6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d0e:	4b81      	ldr	r3, [pc, #516]	; (8010f14 <tcp_receive+0x71c>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010d20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d28:	10db      	asrs	r3, r3, #3
 8010d2a:	b21b      	sxth	r3, r3
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	b29b      	uxth	r3, r3
 8010d32:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d3e:	4413      	add	r3, r2
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	b21a      	sxth	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010d48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	da03      	bge.n	8010d58 <tcp_receive+0x560>
        m = -m;
 8010d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d52:	425b      	negs	r3, r3
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010d58:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d60:	109b      	asrs	r3, r3, #2
 8010d62:	b21b      	sxth	r3, r3
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d76:	4413      	add	r3, r2
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	b21a      	sxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d86:	10db      	asrs	r3, r3, #3
 8010d88:	b21b      	sxth	r3, r3
 8010d8a:	b29a      	uxth	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	4413      	add	r3, r2
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	b21a      	sxth	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010da6:	4b5c      	ldr	r3, [pc, #368]	; (8010f18 <tcp_receive+0x720>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f000 84f1 	beq.w	8011792 <tcp_receive+0xf9a>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	7d1b      	ldrb	r3, [r3, #20]
 8010db4:	2b06      	cmp	r3, #6
 8010db6:	f200 84ec 	bhi.w	8011792 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dbe:	4b57      	ldr	r3, [pc, #348]	; (8010f1c <tcp_receive+0x724>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	1ad3      	subs	r3, r2, r3
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f2c0 80b8 	blt.w	8010f3c <tcp_receive+0x744>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dd0:	4b51      	ldr	r3, [pc, #324]	; (8010f18 <tcp_receive+0x720>)
 8010dd2:	881b      	ldrh	r3, [r3, #0]
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	4b51      	ldr	r3, [pc, #324]	; (8010f1c <tcp_receive+0x724>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	440b      	add	r3, r1
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	3301      	adds	r3, #1
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f300 80ab 	bgt.w	8010f3c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010de6:	4b4e      	ldr	r3, [pc, #312]	; (8010f20 <tcp_receive+0x728>)
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010df0:	4b4a      	ldr	r3, [pc, #296]	; (8010f1c <tcp_receive+0x724>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010df8:	4b49      	ldr	r3, [pc, #292]	; (8010f20 <tcp_receive+0x728>)
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d106      	bne.n	8010e0e <tcp_receive+0x616>
 8010e00:	4b48      	ldr	r3, [pc, #288]	; (8010f24 <tcp_receive+0x72c>)
 8010e02:	f240 523c 	movw	r2, #1340	; 0x53c
 8010e06:	4948      	ldr	r1, [pc, #288]	; (8010f28 <tcp_receive+0x730>)
 8010e08:	4848      	ldr	r0, [pc, #288]	; (8010f2c <tcp_receive+0x734>)
 8010e0a:	f006 fe67 	bl	8017adc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e10:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010e14:	4293      	cmp	r3, r2
 8010e16:	dd06      	ble.n	8010e26 <tcp_receive+0x62e>
 8010e18:	4b42      	ldr	r3, [pc, #264]	; (8010f24 <tcp_receive+0x72c>)
 8010e1a:	f240 523d 	movw	r2, #1341	; 0x53d
 8010e1e:	4944      	ldr	r1, [pc, #272]	; (8010f30 <tcp_receive+0x738>)
 8010e20:	4842      	ldr	r0, [pc, #264]	; (8010f2c <tcp_receive+0x734>)
 8010e22:	f006 fe5b 	bl	8017adc <iprintf>
      if (inseg.p->len < off) {
 8010e26:	4b3e      	ldr	r3, [pc, #248]	; (8010f20 <tcp_receive+0x728>)
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	895b      	ldrh	r3, [r3, #10]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e30:	4293      	cmp	r3, r2
 8010e32:	dd3e      	ble.n	8010eb2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010e34:	4b3a      	ldr	r3, [pc, #232]	; (8010f20 <tcp_receive+0x728>)
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	891b      	ldrh	r3, [r3, #8]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	4293      	cmp	r3, r2
 8010e40:	dd06      	ble.n	8010e50 <tcp_receive+0x658>
 8010e42:	4b38      	ldr	r3, [pc, #224]	; (8010f24 <tcp_receive+0x72c>)
 8010e44:	f240 523f 	movw	r2, #1343	; 0x53f
 8010e48:	493a      	ldr	r1, [pc, #232]	; (8010f34 <tcp_receive+0x73c>)
 8010e4a:	4838      	ldr	r0, [pc, #224]	; (8010f2c <tcp_receive+0x734>)
 8010e4c:	f006 fe46 	bl	8017adc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010e50:	4b33      	ldr	r3, [pc, #204]	; (8010f20 <tcp_receive+0x728>)
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	891a      	ldrh	r2, [r3, #8]
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010e5e:	e00e      	b.n	8010e7e <tcp_receive+0x686>
          off -= p->len;
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	895b      	ldrh	r3, [r3, #10]
 8010e64:	461a      	mov	r2, r3
 8010e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e68:	1a9b      	subs	r3, r3, r2
 8010e6a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	8a3a      	ldrh	r2, [r7, #16]
 8010e70:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	2200      	movs	r2, #0
 8010e76:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	895b      	ldrh	r3, [r3, #10]
 8010e82:	461a      	mov	r2, r3
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	4293      	cmp	r3, r2
 8010e88:	dcea      	bgt.n	8010e60 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	425b      	negs	r3, r3
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	b21b      	sxth	r3, r3
 8010e94:	4619      	mov	r1, r3
 8010e96:	69b8      	ldr	r0, [r7, #24]
 8010e98:	f7fc fed8 	bl	800dc4c <pbuf_header>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d01c      	beq.n	8010edc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010ea2:	4b20      	ldr	r3, [pc, #128]	; (8010f24 <tcp_receive+0x72c>)
 8010ea4:	f240 524c 	movw	r2, #1356	; 0x54c
 8010ea8:	4923      	ldr	r1, [pc, #140]	; (8010f38 <tcp_receive+0x740>)
 8010eaa:	4820      	ldr	r0, [pc, #128]	; (8010f2c <tcp_receive+0x734>)
 8010eac:	f006 fe16 	bl	8017adc <iprintf>
 8010eb0:	e014      	b.n	8010edc <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010eb2:	4b1b      	ldr	r3, [pc, #108]	; (8010f20 <tcp_receive+0x728>)
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eb8:	b292      	uxth	r2, r2
 8010eba:	4252      	negs	r2, r2
 8010ebc:	b292      	uxth	r2, r2
 8010ebe:	b212      	sxth	r2, r2
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fc fec2 	bl	800dc4c <pbuf_header>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d006      	beq.n	8010edc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010ece:	4b15      	ldr	r3, [pc, #84]	; (8010f24 <tcp_receive+0x72c>)
 8010ed0:	f240 5251 	movw	r2, #1361	; 0x551
 8010ed4:	4918      	ldr	r1, [pc, #96]	; (8010f38 <tcp_receive+0x740>)
 8010ed6:	4815      	ldr	r0, [pc, #84]	; (8010f2c <tcp_receive+0x734>)
 8010ed8:	f006 fe00 	bl	8017adc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010edc:	4b10      	ldr	r3, [pc, #64]	; (8010f20 <tcp_receive+0x728>)
 8010ede:	891a      	ldrh	r2, [r3, #8]
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <tcp_receive+0x724>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	b299      	uxth	r1, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	1acb      	subs	r3, r1, r3
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	4413      	add	r3, r2
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	4b0a      	ldr	r3, [pc, #40]	; (8010f20 <tcp_receive+0x728>)
 8010ef6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efc:	4a07      	ldr	r2, [pc, #28]	; (8010f1c <tcp_receive+0x724>)
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	4b07      	ldr	r3, [pc, #28]	; (8010f20 <tcp_receive+0x728>)
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	4a05      	ldr	r2, [pc, #20]	; (8010f1c <tcp_receive+0x724>)
 8010f06:	6812      	ldr	r2, [r2, #0]
 8010f08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f0a:	e025      	b.n	8010f58 <tcp_receive+0x760>
 8010f0c:	20000160 	.word	0x20000160
 8010f10:	20000164 	.word	0x20000164
 8010f14:	20008b74 	.word	0x20008b74
 8010f18:	20000166 	.word	0x20000166
 8010f1c:	2000015c 	.word	0x2000015c
 8010f20:	2000013c 	.word	0x2000013c
 8010f24:	080196fc 	.word	0x080196fc
 8010f28:	08019984 	.word	0x08019984
 8010f2c:	08019740 	.word	0x08019740
 8010f30:	08019994 	.word	0x08019994
 8010f34:	080199a4 	.word	0x080199a4
 8010f38:	080199b4 	.word	0x080199b4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f3c:	4b87      	ldr	r3, [pc, #540]	; (801115c <tcp_receive+0x964>)
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	da06      	bge.n	8010f58 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	7e9b      	ldrb	r3, [r3, #26]
 8010f4e:	f043 0302 	orr.w	r3, r3, #2
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f58:	4b80      	ldr	r3, [pc, #512]	; (801115c <tcp_receive+0x964>)
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f2c0 8410 	blt.w	8011788 <tcp_receive+0xf90>
 8010f68:	4b7c      	ldr	r3, [pc, #496]	; (801115c <tcp_receive+0x964>)
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f70:	6879      	ldr	r1, [r7, #4]
 8010f72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f74:	440b      	add	r3, r1
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	3301      	adds	r3, #1
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	f300 8404 	bgt.w	8011788 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f84:	4b75      	ldr	r3, [pc, #468]	; (801115c <tcp_receive+0x964>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	f040 8287 	bne.w	801149c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010f8e:	4b74      	ldr	r3, [pc, #464]	; (8011160 <tcp_receive+0x968>)
 8010f90:	891c      	ldrh	r4, [r3, #8]
 8010f92:	4b73      	ldr	r3, [pc, #460]	; (8011160 <tcp_receive+0x968>)
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fb fd6c 	bl	800ca78 <lwip_htons>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	f003 0303 	and.w	r3, r3, #3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d001      	beq.n	8010fae <tcp_receive+0x7b6>
 8010faa:	2301      	movs	r3, #1
 8010fac:	e000      	b.n	8010fb0 <tcp_receive+0x7b8>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	4423      	add	r3, r4
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	4b6b      	ldr	r3, [pc, #428]	; (8011164 <tcp_receive+0x96c>)
 8010fb6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fbc:	4b69      	ldr	r3, [pc, #420]	; (8011164 <tcp_receive+0x96c>)
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d26e      	bcs.n	80110a2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fc4:	4b66      	ldr	r3, [pc, #408]	; (8011160 <tcp_receive+0x968>)
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	899b      	ldrh	r3, [r3, #12]
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fb fd53 	bl	800ca78 <lwip_htons>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	f003 0301 	and.w	r3, r3, #1
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d01b      	beq.n	8011014 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010fdc:	4b60      	ldr	r3, [pc, #384]	; (8011160 <tcp_receive+0x968>)
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	899b      	ldrh	r3, [r3, #12]
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010fe8:	b29c      	uxth	r4, r3
 8010fea:	4b5d      	ldr	r3, [pc, #372]	; (8011160 <tcp_receive+0x968>)
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	899b      	ldrh	r3, [r3, #12]
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fb fd40 	bl	800ca78 <lwip_htons>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	4618      	mov	r0, r3
 8011002:	f7fb fd39 	bl	800ca78 <lwip_htons>
 8011006:	4603      	mov	r3, r0
 8011008:	461a      	mov	r2, r3
 801100a:	4b55      	ldr	r3, [pc, #340]	; (8011160 <tcp_receive+0x968>)
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	4322      	orrs	r2, r4
 8011010:	b292      	uxth	r2, r2
 8011012:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011018:	4b51      	ldr	r3, [pc, #324]	; (8011160 <tcp_receive+0x968>)
 801101a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801101c:	4b50      	ldr	r3, [pc, #320]	; (8011160 <tcp_receive+0x968>)
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	899b      	ldrh	r3, [r3, #12]
 8011022:	b29b      	uxth	r3, r3
 8011024:	4618      	mov	r0, r3
 8011026:	f7fb fd27 	bl	800ca78 <lwip_htons>
 801102a:	4603      	mov	r3, r0
 801102c:	f003 0302 	and.w	r3, r3, #2
 8011030:	2b00      	cmp	r3, #0
 8011032:	d005      	beq.n	8011040 <tcp_receive+0x848>
            inseg.len -= 1;
 8011034:	4b4a      	ldr	r3, [pc, #296]	; (8011160 <tcp_receive+0x968>)
 8011036:	891b      	ldrh	r3, [r3, #8]
 8011038:	3b01      	subs	r3, #1
 801103a:	b29a      	uxth	r2, r3
 801103c:	4b48      	ldr	r3, [pc, #288]	; (8011160 <tcp_receive+0x968>)
 801103e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011040:	4b47      	ldr	r3, [pc, #284]	; (8011160 <tcp_receive+0x968>)
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	4b46      	ldr	r3, [pc, #280]	; (8011160 <tcp_receive+0x968>)
 8011046:	891b      	ldrh	r3, [r3, #8]
 8011048:	4619      	mov	r1, r3
 801104a:	4610      	mov	r0, r2
 801104c:	f7fc fcae 	bl	800d9ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011050:	4b43      	ldr	r3, [pc, #268]	; (8011160 <tcp_receive+0x968>)
 8011052:	891c      	ldrh	r4, [r3, #8]
 8011054:	4b42      	ldr	r3, [pc, #264]	; (8011160 <tcp_receive+0x968>)
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	899b      	ldrh	r3, [r3, #12]
 801105a:	b29b      	uxth	r3, r3
 801105c:	4618      	mov	r0, r3
 801105e:	f7fb fd0b 	bl	800ca78 <lwip_htons>
 8011062:	4603      	mov	r3, r0
 8011064:	f003 0303 	and.w	r3, r3, #3
 8011068:	2b00      	cmp	r3, #0
 801106a:	d001      	beq.n	8011070 <tcp_receive+0x878>
 801106c:	2301      	movs	r3, #1
 801106e:	e000      	b.n	8011072 <tcp_receive+0x87a>
 8011070:	2300      	movs	r3, #0
 8011072:	4423      	add	r3, r4
 8011074:	b29a      	uxth	r2, r3
 8011076:	4b3b      	ldr	r3, [pc, #236]	; (8011164 <tcp_receive+0x96c>)
 8011078:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801107a:	4b3a      	ldr	r3, [pc, #232]	; (8011164 <tcp_receive+0x96c>)
 801107c:	881b      	ldrh	r3, [r3, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	4b36      	ldr	r3, [pc, #216]	; (801115c <tcp_receive+0x964>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	441a      	add	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801108e:	440b      	add	r3, r1
 8011090:	429a      	cmp	r2, r3
 8011092:	d006      	beq.n	80110a2 <tcp_receive+0x8aa>
 8011094:	4b34      	ldr	r3, [pc, #208]	; (8011168 <tcp_receive+0x970>)
 8011096:	f240 527f 	movw	r2, #1407	; 0x57f
 801109a:	4934      	ldr	r1, [pc, #208]	; (801116c <tcp_receive+0x974>)
 801109c:	4834      	ldr	r0, [pc, #208]	; (8011170 <tcp_receive+0x978>)
 801109e:	f006 fd1d 	bl	8017adc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f000 80e1 	beq.w	801126e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110ac:	4b2c      	ldr	r3, [pc, #176]	; (8011160 <tcp_receive+0x968>)
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	899b      	ldrh	r3, [r3, #12]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7fb fcdf 	bl	800ca78 <lwip_htons>
 80110ba:	4603      	mov	r3, r0
 80110bc:	f003 0301 	and.w	r3, r3, #1
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d010      	beq.n	80110e6 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80110c4:	e00a      	b.n	80110dc <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ca:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80110d6:	68b8      	ldr	r0, [r7, #8]
 80110d8:	f7fd ff2f 	bl	800ef3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1f0      	bne.n	80110c6 <tcp_receive+0x8ce>
 80110e4:	e0c3      	b.n	801126e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80110ec:	e04f      	b.n	801118e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80110ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fb fcbe 	bl	800ca78 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f003 0301 	and.w	r3, r3, #1
 8011102:	2b00      	cmp	r3, #0
 8011104:	d03b      	beq.n	801117e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011106:	4b16      	ldr	r3, [pc, #88]	; (8011160 <tcp_receive+0x968>)
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	899b      	ldrh	r3, [r3, #12]
 801110c:	b29b      	uxth	r3, r3
 801110e:	4618      	mov	r0, r3
 8011110:	f7fb fcb2 	bl	800ca78 <lwip_htons>
 8011114:	4603      	mov	r3, r0
 8011116:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801111a:	2b00      	cmp	r3, #0
 801111c:	d12f      	bne.n	801117e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801111e:	4b10      	ldr	r3, [pc, #64]	; (8011160 <tcp_receive+0x968>)
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	899b      	ldrh	r3, [r3, #12]
 8011124:	b29c      	uxth	r4, r3
 8011126:	2001      	movs	r0, #1
 8011128:	f7fb fca6 	bl	800ca78 <lwip_htons>
 801112c:	4603      	mov	r3, r0
 801112e:	461a      	mov	r2, r3
 8011130:	4b0b      	ldr	r3, [pc, #44]	; (8011160 <tcp_receive+0x968>)
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	4322      	orrs	r2, r4
 8011136:	b292      	uxth	r2, r2
 8011138:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801113a:	4b09      	ldr	r3, [pc, #36]	; (8011160 <tcp_receive+0x968>)
 801113c:	891c      	ldrh	r4, [r3, #8]
 801113e:	4b08      	ldr	r3, [pc, #32]	; (8011160 <tcp_receive+0x968>)
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	899b      	ldrh	r3, [r3, #12]
 8011144:	b29b      	uxth	r3, r3
 8011146:	4618      	mov	r0, r3
 8011148:	f7fb fc96 	bl	800ca78 <lwip_htons>
 801114c:	4603      	mov	r3, r0
 801114e:	f003 0303 	and.w	r3, r3, #3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00e      	beq.n	8011174 <tcp_receive+0x97c>
 8011156:	2301      	movs	r3, #1
 8011158:	e00d      	b.n	8011176 <tcp_receive+0x97e>
 801115a:	bf00      	nop
 801115c:	2000015c 	.word	0x2000015c
 8011160:	2000013c 	.word	0x2000013c
 8011164:	20000166 	.word	0x20000166
 8011168:	080196fc 	.word	0x080196fc
 801116c:	080199c8 	.word	0x080199c8
 8011170:	08019740 	.word	0x08019740
 8011174:	2300      	movs	r3, #0
 8011176:	4423      	add	r3, r4
 8011178:	b29a      	uxth	r2, r3
 801117a:	4b95      	ldr	r3, [pc, #596]	; (80113d0 <tcp_receive+0xbd8>)
 801117c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011180:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8011188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801118a:	f7fd fed6 	bl	800ef3a <tcp_seg_free>
            while (next &&
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00e      	beq.n	80111b2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011194:	4b8e      	ldr	r3, [pc, #568]	; (80113d0 <tcp_receive+0xbd8>)
 8011196:	881b      	ldrh	r3, [r3, #0]
 8011198:	461a      	mov	r2, r3
 801119a:	4b8e      	ldr	r3, [pc, #568]	; (80113d4 <tcp_receive+0xbdc>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	441a      	add	r2, r3
 80111a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111a8:	8909      	ldrh	r1, [r1, #8]
 80111aa:	440b      	add	r3, r1
 80111ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	da9d      	bge.n	80110ee <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80111b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d057      	beq.n	8011268 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80111b8:	4b85      	ldr	r3, [pc, #532]	; (80113d0 <tcp_receive+0xbd8>)
 80111ba:	881b      	ldrh	r3, [r3, #0]
 80111bc:	461a      	mov	r2, r3
 80111be:	4b85      	ldr	r3, [pc, #532]	; (80113d4 <tcp_receive+0xbdc>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	441a      	add	r2, r3
 80111c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	dd4b      	ble.n	8011268 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	4b7e      	ldr	r3, [pc, #504]	; (80113d4 <tcp_receive+0xbdc>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	b29b      	uxth	r3, r3
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	4b7d      	ldr	r3, [pc, #500]	; (80113d8 <tcp_receive+0xbe0>)
 80111e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111e6:	4b7c      	ldr	r3, [pc, #496]	; (80113d8 <tcp_receive+0xbe0>)
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	899b      	ldrh	r3, [r3, #12]
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fb fc42 	bl	800ca78 <lwip_htons>
 80111f4:	4603      	mov	r3, r0
 80111f6:	f003 0302 	and.w	r3, r3, #2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d005      	beq.n	801120a <tcp_receive+0xa12>
                inseg.len -= 1;
 80111fe:	4b76      	ldr	r3, [pc, #472]	; (80113d8 <tcp_receive+0xbe0>)
 8011200:	891b      	ldrh	r3, [r3, #8]
 8011202:	3b01      	subs	r3, #1
 8011204:	b29a      	uxth	r2, r3
 8011206:	4b74      	ldr	r3, [pc, #464]	; (80113d8 <tcp_receive+0xbe0>)
 8011208:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801120a:	4b73      	ldr	r3, [pc, #460]	; (80113d8 <tcp_receive+0xbe0>)
 801120c:	685a      	ldr	r2, [r3, #4]
 801120e:	4b72      	ldr	r3, [pc, #456]	; (80113d8 <tcp_receive+0xbe0>)
 8011210:	891b      	ldrh	r3, [r3, #8]
 8011212:	4619      	mov	r1, r3
 8011214:	4610      	mov	r0, r2
 8011216:	f7fc fbc9 	bl	800d9ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801121a:	4b6f      	ldr	r3, [pc, #444]	; (80113d8 <tcp_receive+0xbe0>)
 801121c:	891c      	ldrh	r4, [r3, #8]
 801121e:	4b6e      	ldr	r3, [pc, #440]	; (80113d8 <tcp_receive+0xbe0>)
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	899b      	ldrh	r3, [r3, #12]
 8011224:	b29b      	uxth	r3, r3
 8011226:	4618      	mov	r0, r3
 8011228:	f7fb fc26 	bl	800ca78 <lwip_htons>
 801122c:	4603      	mov	r3, r0
 801122e:	f003 0303 	and.w	r3, r3, #3
 8011232:	2b00      	cmp	r3, #0
 8011234:	d001      	beq.n	801123a <tcp_receive+0xa42>
 8011236:	2301      	movs	r3, #1
 8011238:	e000      	b.n	801123c <tcp_receive+0xa44>
 801123a:	2300      	movs	r3, #0
 801123c:	4423      	add	r3, r4
 801123e:	b29a      	uxth	r2, r3
 8011240:	4b63      	ldr	r3, [pc, #396]	; (80113d0 <tcp_receive+0xbd8>)
 8011242:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011244:	4b62      	ldr	r3, [pc, #392]	; (80113d0 <tcp_receive+0xbd8>)
 8011246:	881b      	ldrh	r3, [r3, #0]
 8011248:	461a      	mov	r2, r3
 801124a:	4b62      	ldr	r3, [pc, #392]	; (80113d4 <tcp_receive+0xbdc>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	441a      	add	r2, r3
 8011250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	429a      	cmp	r2, r3
 8011258:	d006      	beq.n	8011268 <tcp_receive+0xa70>
 801125a:	4b60      	ldr	r3, [pc, #384]	; (80113dc <tcp_receive+0xbe4>)
 801125c:	f240 52af 	movw	r2, #1455	; 0x5af
 8011260:	495f      	ldr	r1, [pc, #380]	; (80113e0 <tcp_receive+0xbe8>)
 8011262:	4860      	ldr	r0, [pc, #384]	; (80113e4 <tcp_receive+0xbec>)
 8011264:	f006 fc3a 	bl	8017adc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801126c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801126e:	4b58      	ldr	r3, [pc, #352]	; (80113d0 <tcp_receive+0xbd8>)
 8011270:	881b      	ldrh	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	4b57      	ldr	r3, [pc, #348]	; (80113d4 <tcp_receive+0xbdc>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	441a      	add	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011282:	4b53      	ldr	r3, [pc, #332]	; (80113d0 <tcp_receive+0xbd8>)
 8011284:	881b      	ldrh	r3, [r3, #0]
 8011286:	429a      	cmp	r2, r3
 8011288:	d206      	bcs.n	8011298 <tcp_receive+0xaa0>
 801128a:	4b54      	ldr	r3, [pc, #336]	; (80113dc <tcp_receive+0xbe4>)
 801128c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011290:	4955      	ldr	r1, [pc, #340]	; (80113e8 <tcp_receive+0xbf0>)
 8011292:	4854      	ldr	r0, [pc, #336]	; (80113e4 <tcp_receive+0xbec>)
 8011294:	f006 fc22 	bl	8017adc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801129c:	4b4c      	ldr	r3, [pc, #304]	; (80113d0 <tcp_receive+0xbd8>)
 801129e:	881b      	ldrh	r3, [r3, #0]
 80112a0:	1ad3      	subs	r3, r2, r3
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7fd f9fd 	bl	800e6a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80112ae:	4b4a      	ldr	r3, [pc, #296]	; (80113d8 <tcp_receive+0xbe0>)
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	891b      	ldrh	r3, [r3, #8]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d006      	beq.n	80112c6 <tcp_receive+0xace>
          recv_data = inseg.p;
 80112b8:	4b47      	ldr	r3, [pc, #284]	; (80113d8 <tcp_receive+0xbe0>)
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	4a4b      	ldr	r2, [pc, #300]	; (80113ec <tcp_receive+0xbf4>)
 80112be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80112c0:	4b45      	ldr	r3, [pc, #276]	; (80113d8 <tcp_receive+0xbe0>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112c6:	4b44      	ldr	r3, [pc, #272]	; (80113d8 <tcp_receive+0xbe0>)
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	899b      	ldrh	r3, [r3, #12]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fb fbd2 	bl	800ca78 <lwip_htons>
 80112d4:	4603      	mov	r3, r0
 80112d6:	f003 0301 	and.w	r3, r3, #1
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 80b4 	beq.w	8011448 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80112e0:	4b43      	ldr	r3, [pc, #268]	; (80113f0 <tcp_receive+0xbf8>)
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	f043 0320 	orr.w	r3, r3, #32
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	4b41      	ldr	r3, [pc, #260]	; (80113f0 <tcp_receive+0xbf8>)
 80112ec:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80112ee:	e0ab      	b.n	8011448 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	4a35      	ldr	r2, [pc, #212]	; (80113d4 <tcp_receive+0xbdc>)
 8011300:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	891b      	ldrh	r3, [r3, #8]
 8011306:	461c      	mov	r4, r3
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	899b      	ldrh	r3, [r3, #12]
 801130e:	b29b      	uxth	r3, r3
 8011310:	4618      	mov	r0, r3
 8011312:	f7fb fbb1 	bl	800ca78 <lwip_htons>
 8011316:	4603      	mov	r3, r0
 8011318:	f003 0303 	and.w	r3, r3, #3
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <tcp_receive+0xb2c>
 8011320:	2301      	movs	r3, #1
 8011322:	e000      	b.n	8011326 <tcp_receive+0xb2e>
 8011324:	2300      	movs	r3, #0
 8011326:	191a      	adds	r2, r3, r4
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132c:	441a      	add	r2, r3
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011336:	461c      	mov	r4, r3
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	891b      	ldrh	r3, [r3, #8]
 801133c:	461d      	mov	r5, r3
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	899b      	ldrh	r3, [r3, #12]
 8011344:	b29b      	uxth	r3, r3
 8011346:	4618      	mov	r0, r3
 8011348:	f7fb fb96 	bl	800ca78 <lwip_htons>
 801134c:	4603      	mov	r3, r0
 801134e:	f003 0303 	and.w	r3, r3, #3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <tcp_receive+0xb62>
 8011356:	2301      	movs	r3, #1
 8011358:	e000      	b.n	801135c <tcp_receive+0xb64>
 801135a:	2300      	movs	r3, #0
 801135c:	442b      	add	r3, r5
 801135e:	429c      	cmp	r4, r3
 8011360:	d206      	bcs.n	8011370 <tcp_receive+0xb78>
 8011362:	4b1e      	ldr	r3, [pc, #120]	; (80113dc <tcp_receive+0xbe4>)
 8011364:	f240 52de 	movw	r2, #1502	; 0x5de
 8011368:	4922      	ldr	r1, [pc, #136]	; (80113f4 <tcp_receive+0xbfc>)
 801136a:	481e      	ldr	r0, [pc, #120]	; (80113e4 <tcp_receive+0xbec>)
 801136c:	f006 fbb6 	bl	8017adc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	891b      	ldrh	r3, [r3, #8]
 8011374:	461c      	mov	r4, r3
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	899b      	ldrh	r3, [r3, #12]
 801137c:	b29b      	uxth	r3, r3
 801137e:	4618      	mov	r0, r3
 8011380:	f7fb fb7a 	bl	800ca78 <lwip_htons>
 8011384:	4603      	mov	r3, r0
 8011386:	f003 0303 	and.w	r3, r3, #3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <tcp_receive+0xb9a>
 801138e:	2301      	movs	r3, #1
 8011390:	e000      	b.n	8011394 <tcp_receive+0xb9c>
 8011392:	2300      	movs	r3, #0
 8011394:	1919      	adds	r1, r3, r4
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801139a:	b28b      	uxth	r3, r1
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	b29a      	uxth	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7fd f97f 	bl	800e6a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	891b      	ldrh	r3, [r3, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d028      	beq.n	8011406 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80113b4:	4b0d      	ldr	r3, [pc, #52]	; (80113ec <tcp_receive+0xbf4>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d01d      	beq.n	80113f8 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80113bc:	4b0b      	ldr	r3, [pc, #44]	; (80113ec <tcp_receive+0xbf4>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	4619      	mov	r1, r3
 80113c6:	4610      	mov	r0, r2
 80113c8:	f7fc fd30 	bl	800de2c <pbuf_cat>
 80113cc:	e018      	b.n	8011400 <tcp_receive+0xc08>
 80113ce:	bf00      	nop
 80113d0:	20000166 	.word	0x20000166
 80113d4:	2000015c 	.word	0x2000015c
 80113d8:	2000013c 	.word	0x2000013c
 80113dc:	080196fc 	.word	0x080196fc
 80113e0:	08019a00 	.word	0x08019a00
 80113e4:	08019740 	.word	0x08019740
 80113e8:	08019a3c 	.word	0x08019a3c
 80113ec:	2000016c 	.word	0x2000016c
 80113f0:	20000169 	.word	0x20000169
 80113f4:	08019a5c 	.word	0x08019a5c
            } else {
              recv_data = cseg->p;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	4a71      	ldr	r2, [pc, #452]	; (80115c4 <tcp_receive+0xdcc>)
 80113fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2200      	movs	r2, #0
 8011404:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	899b      	ldrh	r3, [r3, #12]
 801140c:	b29b      	uxth	r3, r3
 801140e:	4618      	mov	r0, r3
 8011410:	f7fb fb32 	bl	800ca78 <lwip_htons>
 8011414:	4603      	mov	r3, r0
 8011416:	f003 0301 	and.w	r3, r3, #1
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00d      	beq.n	801143a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801141e:	4b6a      	ldr	r3, [pc, #424]	; (80115c8 <tcp_receive+0xdd0>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	f043 0320 	orr.w	r3, r3, #32
 8011426:	b2da      	uxtb	r2, r3
 8011428:	4b67      	ldr	r3, [pc, #412]	; (80115c8 <tcp_receive+0xdd0>)
 801142a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	7d1b      	ldrb	r3, [r3, #20]
 8011430:	2b04      	cmp	r3, #4
 8011432:	d102      	bne.n	801143a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2207      	movs	r2, #7
 8011438:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f7fd fd79 	bl	800ef3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801145c:	429a      	cmp	r2, r3
 801145e:	f43f af47 	beq.w	80112f0 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	7e9b      	ldrb	r3, [r3, #26]
 8011466:	f003 0301 	and.w	r3, r3, #1
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00e      	beq.n	801148c <tcp_receive+0xc94>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	7e9b      	ldrb	r3, [r3, #26]
 8011472:	f023 0301 	bic.w	r3, r3, #1
 8011476:	b2da      	uxtb	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	769a      	strb	r2, [r3, #26]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	7e9b      	ldrb	r3, [r3, #26]
 8011480:	f043 0302 	orr.w	r3, r3, #2
 8011484:	b2da      	uxtb	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801148a:	e181      	b.n	8011790 <tcp_receive+0xf98>
        tcp_ack(pcb);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7e9b      	ldrb	r3, [r3, #26]
 8011490:	f043 0301 	orr.w	r3, r3, #1
 8011494:	b2da      	uxtb	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801149a:	e179      	b.n	8011790 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f000 fc91 	bl	8011dc4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d106      	bne.n	80114b8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80114aa:	4848      	ldr	r0, [pc, #288]	; (80115cc <tcp_receive+0xdd4>)
 80114ac:	f7fd fd5d 	bl	800ef6a <tcp_seg_copy>
 80114b0:	4602      	mov	r2, r0
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80114b6:	e16b      	b.n	8011790 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80114b8:	2300      	movs	r3, #0
 80114ba:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80114c2:	e150      	b.n	8011766 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 80114c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	685a      	ldr	r2, [r3, #4]
 80114ca:	4b41      	ldr	r3, [pc, #260]	; (80115d0 <tcp_receive+0xdd8>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d11d      	bne.n	801150e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80114d2:	4b3e      	ldr	r3, [pc, #248]	; (80115cc <tcp_receive+0xdd4>)
 80114d4:	891a      	ldrh	r2, [r3, #8]
 80114d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d8:	891b      	ldrh	r3, [r3, #8]
 80114da:	429a      	cmp	r2, r3
 80114dc:	f240 8148 	bls.w	8011770 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80114e0:	483a      	ldr	r0, [pc, #232]	; (80115cc <tcp_receive+0xdd4>)
 80114e2:	f7fd fd42 	bl	800ef6a <tcp_seg_copy>
 80114e6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 8142 	beq.w	8011774 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80114f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d003      	beq.n	80114fe <tcp_receive+0xd06>
                    prev->next = cseg;
 80114f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	601a      	str	r2, [r3, #0]
 80114fc:	e002      	b.n	8011504 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	f7ff f900 	bl	801070c <tcp_oos_insert_segment>
                }
                break;
 801150c:	e132      	b.n	8011774 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011510:	2b00      	cmp	r3, #0
 8011512:	d117      	bne.n	8011544 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011514:	4b2e      	ldr	r3, [pc, #184]	; (80115d0 <tcp_receive+0xdd8>)
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	da57      	bge.n	80115d4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011524:	4829      	ldr	r0, [pc, #164]	; (80115cc <tcp_receive+0xdd4>)
 8011526:	f7fd fd20 	bl	800ef6a <tcp_seg_copy>
 801152a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2b00      	cmp	r3, #0
 8011530:	f000 8122 	beq.w	8011778 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	68fa      	ldr	r2, [r7, #12]
 8011538:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801153a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f7ff f8e5 	bl	801070c <tcp_oos_insert_segment>
                  }
                  break;
 8011542:	e119      	b.n	8011778 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011544:	4b22      	ldr	r3, [pc, #136]	; (80115d0 <tcp_receive+0xdd8>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	3b01      	subs	r3, #1
 8011552:	2b00      	cmp	r3, #0
 8011554:	db3e      	blt.n	80115d4 <tcp_receive+0xddc>
 8011556:	4b1e      	ldr	r3, [pc, #120]	; (80115d0 <tcp_receive+0xdd8>)
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	3301      	adds	r3, #1
 8011564:	2b00      	cmp	r3, #0
 8011566:	dc35      	bgt.n	80115d4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8011568:	4818      	ldr	r0, [pc, #96]	; (80115cc <tcp_receive+0xdd4>)
 801156a:	f7fd fcfe 	bl	800ef6a <tcp_seg_copy>
 801156e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	2b00      	cmp	r3, #0
 8011574:	f000 8102 	beq.w	801177c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011580:	8912      	ldrh	r2, [r2, #8]
 8011582:	441a      	add	r2, r3
 8011584:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <tcp_receive+0xdd8>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	2b00      	cmp	r3, #0
 801158c:	dd12      	ble.n	80115b4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801158e:	4b10      	ldr	r3, [pc, #64]	; (80115d0 <tcp_receive+0xdd8>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	b29a      	uxth	r2, r3
 8011594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	b29b      	uxth	r3, r3
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	b29a      	uxth	r2, r3
 80115a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80115a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a6:	685a      	ldr	r2, [r3, #4]
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	891b      	ldrh	r3, [r3, #8]
 80115ac:	4619      	mov	r1, r3
 80115ae:	4610      	mov	r0, r2
 80115b0:	f7fc f9fc 	bl	800d9ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80115ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115bc:	68f8      	ldr	r0, [r7, #12]
 80115be:	f7ff f8a5 	bl	801070c <tcp_oos_insert_segment>
                  }
                  break;
 80115c2:	e0db      	b.n	801177c <tcp_receive+0xf84>
 80115c4:	2000016c 	.word	0x2000016c
 80115c8:	20000169 	.word	0x20000169
 80115cc:	2000013c 	.word	0x2000013c
 80115d0:	2000015c 	.word	0x2000015c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80115d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f040 80bf 	bne.w	801175c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80115de:	4b7c      	ldr	r3, [pc, #496]	; (80117d0 <tcp_receive+0xfd8>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f340 80b6 	ble.w	801175c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80115f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	899b      	ldrh	r3, [r3, #12]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fb fa3d 	bl	800ca78 <lwip_htons>
 80115fe:	4603      	mov	r3, r0
 8011600:	f003 0301 	and.w	r3, r3, #1
 8011604:	2b00      	cmp	r3, #0
 8011606:	f040 80bb 	bne.w	8011780 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801160a:	4872      	ldr	r0, [pc, #456]	; (80117d4 <tcp_receive+0xfdc>)
 801160c:	f7fd fcad 	bl	800ef6a <tcp_seg_copy>
 8011610:	4602      	mov	r2, r0
 8011612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011614:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	f000 80b2 	beq.w	8011784 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011628:	8912      	ldrh	r2, [r2, #8]
 801162a:	441a      	add	r2, r3
 801162c:	4b68      	ldr	r3, [pc, #416]	; (80117d0 <tcp_receive+0xfd8>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	2b00      	cmp	r3, #0
 8011634:	dd12      	ble.n	801165c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011636:	4b66      	ldr	r3, [pc, #408]	; (80117d0 <tcp_receive+0xfd8>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	b29a      	uxth	r2, r3
 801163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	b29b      	uxth	r3, r3
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	b29a      	uxth	r2, r3
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011652:	891b      	ldrh	r3, [r3, #8]
 8011654:	4619      	mov	r1, r3
 8011656:	4610      	mov	r0, r2
 8011658:	f7fc f9a8 	bl	800d9ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801165c:	4b5e      	ldr	r3, [pc, #376]	; (80117d8 <tcp_receive+0xfe0>)
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	461a      	mov	r2, r3
 8011662:	4b5b      	ldr	r3, [pc, #364]	; (80117d0 <tcp_receive+0xfd8>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	441a      	add	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166c:	6879      	ldr	r1, [r7, #4]
 801166e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011670:	440b      	add	r3, r1
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	f340 8085 	ble.w	8011784 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	899b      	ldrh	r3, [r3, #12]
 8011682:	b29b      	uxth	r3, r3
 8011684:	4618      	mov	r0, r3
 8011686:	f7fb f9f7 	bl	800ca78 <lwip_htons>
 801168a:	4603      	mov	r3, r0
 801168c:	f003 0301 	and.w	r3, r3, #1
 8011690:	2b00      	cmp	r3, #0
 8011692:	d01e      	beq.n	80116d2 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	899b      	ldrh	r3, [r3, #12]
 801169c:	b29b      	uxth	r3, r3
 801169e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80116a2:	b29c      	uxth	r4, r3
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	899b      	ldrh	r3, [r3, #12]
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fb f9e2 	bl	800ca78 <lwip_htons>
 80116b4:	4603      	mov	r3, r0
 80116b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fb f9db 	bl	800ca78 <lwip_htons>
 80116c2:	4603      	mov	r3, r0
 80116c4:	461a      	mov	r2, r3
 80116c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	4322      	orrs	r2, r4
 80116ce:	b292      	uxth	r2, r2
 80116d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116dc:	4413      	add	r3, r2
 80116de:	b299      	uxth	r1, r3
 80116e0:	4b3b      	ldr	r3, [pc, #236]	; (80117d0 <tcp_receive+0xfd8>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	1a8a      	subs	r2, r1, r2
 80116ec:	b292      	uxth	r2, r2
 80116ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80116f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	891b      	ldrh	r3, [r3, #8]
 80116fc:	4619      	mov	r1, r3
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fc f954 	bl	800d9ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	891c      	ldrh	r4, [r3, #8]
 801170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	899b      	ldrh	r3, [r3, #12]
 8011712:	b29b      	uxth	r3, r3
 8011714:	4618      	mov	r0, r3
 8011716:	f7fb f9af 	bl	800ca78 <lwip_htons>
 801171a:	4603      	mov	r3, r0
 801171c:	f003 0303 	and.w	r3, r3, #3
 8011720:	2b00      	cmp	r3, #0
 8011722:	d001      	beq.n	8011728 <tcp_receive+0xf30>
 8011724:	2301      	movs	r3, #1
 8011726:	e000      	b.n	801172a <tcp_receive+0xf32>
 8011728:	2300      	movs	r3, #0
 801172a:	4423      	add	r3, r4
 801172c:	b29a      	uxth	r2, r3
 801172e:	4b2a      	ldr	r3, [pc, #168]	; (80117d8 <tcp_receive+0xfe0>)
 8011730:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011732:	4b29      	ldr	r3, [pc, #164]	; (80117d8 <tcp_receive+0xfe0>)
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	461a      	mov	r2, r3
 8011738:	4b25      	ldr	r3, [pc, #148]	; (80117d0 <tcp_receive+0xfd8>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	441a      	add	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011742:	6879      	ldr	r1, [r7, #4]
 8011744:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011746:	440b      	add	r3, r1
 8011748:	429a      	cmp	r2, r3
 801174a:	d01b      	beq.n	8011784 <tcp_receive+0xf8c>
 801174c:	4b23      	ldr	r3, [pc, #140]	; (80117dc <tcp_receive+0xfe4>)
 801174e:	f240 627b 	movw	r2, #1659	; 0x67b
 8011752:	4923      	ldr	r1, [pc, #140]	; (80117e0 <tcp_receive+0xfe8>)
 8011754:	4823      	ldr	r0, [pc, #140]	; (80117e4 <tcp_receive+0xfec>)
 8011756:	f006 f9c1 	bl	8017adc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801175a:	e013      	b.n	8011784 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 801175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	2b00      	cmp	r3, #0
 801176a:	f47f aeab 	bne.w	80114c4 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801176e:	e00f      	b.n	8011790 <tcp_receive+0xf98>
                break;
 8011770:	bf00      	nop
 8011772:	e00d      	b.n	8011790 <tcp_receive+0xf98>
                break;
 8011774:	bf00      	nop
 8011776:	e00b      	b.n	8011790 <tcp_receive+0xf98>
                  break;
 8011778:	bf00      	nop
 801177a:	e009      	b.n	8011790 <tcp_receive+0xf98>
                  break;
 801177c:	bf00      	nop
 801177e:	e007      	b.n	8011790 <tcp_receive+0xf98>
                  break;
 8011780:	bf00      	nop
 8011782:	e005      	b.n	8011790 <tcp_receive+0xf98>
                break;
 8011784:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8011786:	e003      	b.n	8011790 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 fb1b 	bl	8011dc4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801178e:	e01a      	b.n	80117c6 <tcp_receive+0xfce>
 8011790:	e019      	b.n	80117c6 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011792:	4b0f      	ldr	r3, [pc, #60]	; (80117d0 <tcp_receive+0xfd8>)
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	2b00      	cmp	r3, #0
 801179e:	db0a      	blt.n	80117b6 <tcp_receive+0xfbe>
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <tcp_receive+0xfd8>)
 80117a2:	681a      	ldr	r2, [r3, #0]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a8:	6879      	ldr	r1, [r7, #4]
 80117aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117ac:	440b      	add	r3, r1
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	3301      	adds	r3, #1
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	dd07      	ble.n	80117c6 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	7e9b      	ldrb	r3, [r3, #26]
 80117ba:	f043 0302 	orr.w	r3, r3, #2
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80117c4:	e7ff      	b.n	80117c6 <tcp_receive+0xfce>
 80117c6:	bf00      	nop
 80117c8:	3734      	adds	r7, #52	; 0x34
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ce:	bf00      	nop
 80117d0:	2000015c 	.word	0x2000015c
 80117d4:	2000013c 	.word	0x2000013c
 80117d8:	20000166 	.word	0x20000166
 80117dc:	080196fc 	.word	0x080196fc
 80117e0:	080199c8 	.word	0x080199c8
 80117e4:	08019740 	.word	0x08019740

080117e8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80117ee:	4b17      	ldr	r3, [pc, #92]	; (801184c <tcp_getoptbyte+0x64>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d005      	beq.n	8011802 <tcp_getoptbyte+0x1a>
 80117f6:	4b16      	ldr	r3, [pc, #88]	; (8011850 <tcp_getoptbyte+0x68>)
 80117f8:	881a      	ldrh	r2, [r3, #0]
 80117fa:	4b16      	ldr	r3, [pc, #88]	; (8011854 <tcp_getoptbyte+0x6c>)
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d20e      	bcs.n	8011820 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011802:	4b15      	ldr	r3, [pc, #84]	; (8011858 <tcp_getoptbyte+0x70>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	3314      	adds	r3, #20
 8011808:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801180a:	4b11      	ldr	r3, [pc, #68]	; (8011850 <tcp_getoptbyte+0x68>)
 801180c:	881b      	ldrh	r3, [r3, #0]
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	b291      	uxth	r1, r2
 8011812:	4a0f      	ldr	r2, [pc, #60]	; (8011850 <tcp_getoptbyte+0x68>)
 8011814:	8011      	strh	r1, [r2, #0]
 8011816:	461a      	mov	r2, r3
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	4413      	add	r3, r2
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	e010      	b.n	8011842 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <tcp_getoptbyte+0x68>)
 8011822:	881b      	ldrh	r3, [r3, #0]
 8011824:	1c5a      	adds	r2, r3, #1
 8011826:	b291      	uxth	r1, r2
 8011828:	4a09      	ldr	r2, [pc, #36]	; (8011850 <tcp_getoptbyte+0x68>)
 801182a:	8011      	strh	r1, [r2, #0]
 801182c:	b2da      	uxtb	r2, r3
 801182e:	4b09      	ldr	r3, [pc, #36]	; (8011854 <tcp_getoptbyte+0x6c>)
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	b2db      	uxtb	r3, r3
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8011838:	4b04      	ldr	r3, [pc, #16]	; (801184c <tcp_getoptbyte+0x64>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	79fb      	ldrb	r3, [r7, #7]
 801183e:	4413      	add	r3, r2
 8011840:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011842:	4618      	mov	r0, r3
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	bc80      	pop	{r7}
 801184a:	4770      	bx	lr
 801184c:	20000154 	.word	0x20000154
 8011850:	20000158 	.word	0x20000158
 8011854:	20000152 	.word	0x20000152
 8011858:	2000014c 	.word	0x2000014c

0801185c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011864:	4b2d      	ldr	r3, [pc, #180]	; (801191c <tcp_parseopt+0xc0>)
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d053      	beq.n	8011914 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801186c:	4b2c      	ldr	r3, [pc, #176]	; (8011920 <tcp_parseopt+0xc4>)
 801186e:	2200      	movs	r2, #0
 8011870:	801a      	strh	r2, [r3, #0]
 8011872:	e043      	b.n	80118fc <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8011874:	f7ff ffb8 	bl	80117e8 <tcp_getoptbyte>
 8011878:	4603      	mov	r3, r0
 801187a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801187c:	7bfb      	ldrb	r3, [r7, #15]
 801187e:	2b01      	cmp	r3, #1
 8011880:	d03c      	beq.n	80118fc <tcp_parseopt+0xa0>
 8011882:	2b02      	cmp	r3, #2
 8011884:	d002      	beq.n	801188c <tcp_parseopt+0x30>
 8011886:	2b00      	cmp	r3, #0
 8011888:	d03f      	beq.n	801190a <tcp_parseopt+0xae>
 801188a:	e026      	b.n	80118da <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801188c:	f7ff ffac 	bl	80117e8 <tcp_getoptbyte>
 8011890:	4603      	mov	r3, r0
 8011892:	2b04      	cmp	r3, #4
 8011894:	d13b      	bne.n	801190e <tcp_parseopt+0xb2>
 8011896:	4b22      	ldr	r3, [pc, #136]	; (8011920 <tcp_parseopt+0xc4>)
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	3302      	adds	r3, #2
 801189c:	4a1f      	ldr	r2, [pc, #124]	; (801191c <tcp_parseopt+0xc0>)
 801189e:	8812      	ldrh	r2, [r2, #0]
 80118a0:	4293      	cmp	r3, r2
 80118a2:	dc34      	bgt.n	801190e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80118a4:	f7ff ffa0 	bl	80117e8 <tcp_getoptbyte>
 80118a8:	4603      	mov	r3, r0
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	021b      	lsls	r3, r3, #8
 80118ae:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80118b0:	f7ff ff9a 	bl	80117e8 <tcp_getoptbyte>
 80118b4:	4603      	mov	r3, r0
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	89bb      	ldrh	r3, [r7, #12]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80118be:	89bb      	ldrh	r3, [r7, #12]
 80118c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80118c4:	d804      	bhi.n	80118d0 <tcp_parseopt+0x74>
 80118c6:	89bb      	ldrh	r3, [r7, #12]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d001      	beq.n	80118d0 <tcp_parseopt+0x74>
 80118cc:	89ba      	ldrh	r2, [r7, #12]
 80118ce:	e001      	b.n	80118d4 <tcp_parseopt+0x78>
 80118d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80118d8:	e010      	b.n	80118fc <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80118da:	f7ff ff85 	bl	80117e8 <tcp_getoptbyte>
 80118de:	4603      	mov	r3, r0
 80118e0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80118e2:	7afb      	ldrb	r3, [r7, #11]
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d914      	bls.n	8011912 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80118e8:	7afb      	ldrb	r3, [r7, #11]
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	4b0c      	ldr	r3, [pc, #48]	; (8011920 <tcp_parseopt+0xc4>)
 80118ee:	881b      	ldrh	r3, [r3, #0]
 80118f0:	4413      	add	r3, r2
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	3b02      	subs	r3, #2
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	4b09      	ldr	r3, [pc, #36]	; (8011920 <tcp_parseopt+0xc4>)
 80118fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118fc:	4b08      	ldr	r3, [pc, #32]	; (8011920 <tcp_parseopt+0xc4>)
 80118fe:	881a      	ldrh	r2, [r3, #0]
 8011900:	4b06      	ldr	r3, [pc, #24]	; (801191c <tcp_parseopt+0xc0>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	429a      	cmp	r2, r3
 8011906:	d3b5      	bcc.n	8011874 <tcp_parseopt+0x18>
 8011908:	e004      	b.n	8011914 <tcp_parseopt+0xb8>
        return;
 801190a:	bf00      	nop
 801190c:	e002      	b.n	8011914 <tcp_parseopt+0xb8>
          return;
 801190e:	bf00      	nop
 8011910:	e000      	b.n	8011914 <tcp_parseopt+0xb8>
          return;
 8011912:	bf00      	nop
      }
    }
  }
}
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	20000150 	.word	0x20000150
 8011920:	20000158 	.word	0x20000158

08011924 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011924:	b480      	push	{r7}
 8011926:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011928:	4b05      	ldr	r3, [pc, #20]	; (8011940 <tcp_trigger_input_pcb_close+0x1c>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	f043 0310 	orr.w	r3, r3, #16
 8011930:	b2da      	uxtb	r2, r3
 8011932:	4b03      	ldr	r3, [pc, #12]	; (8011940 <tcp_trigger_input_pcb_close+0x1c>)
 8011934:	701a      	strb	r2, [r3, #0]
}
 8011936:	bf00      	nop
 8011938:	46bd      	mov	sp, r7
 801193a:	bc80      	pop	{r7}
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	20000169 	.word	0x20000169

08011944 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b086      	sub	sp, #24
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	607b      	str	r3, [r7, #4]
 801194e:	460b      	mov	r3, r1
 8011950:	817b      	strh	r3, [r7, #10]
 8011952:	4613      	mov	r3, r2
 8011954:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011956:	897a      	ldrh	r2, [r7, #10]
 8011958:	893b      	ldrh	r3, [r7, #8]
 801195a:	4413      	add	r3, r2
 801195c:	b29b      	uxth	r3, r3
 801195e:	3314      	adds	r3, #20
 8011960:	b29b      	uxth	r3, r3
 8011962:	2200      	movs	r2, #0
 8011964:	4619      	mov	r1, r3
 8011966:	2001      	movs	r0, #1
 8011968:	f7fb fe22 	bl	800d5b0 <pbuf_alloc>
 801196c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d057      	beq.n	8011a24 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	895b      	ldrh	r3, [r3, #10]
 8011978:	461a      	mov	r2, r3
 801197a:	897b      	ldrh	r3, [r7, #10]
 801197c:	3314      	adds	r3, #20
 801197e:	429a      	cmp	r2, r3
 8011980:	da05      	bge.n	801198e <tcp_output_alloc_header+0x4a>
 8011982:	4b2b      	ldr	r3, [pc, #172]	; (8011a30 <tcp_output_alloc_header+0xec>)
 8011984:	2273      	movs	r2, #115	; 0x73
 8011986:	492b      	ldr	r1, [pc, #172]	; (8011a34 <tcp_output_alloc_header+0xf0>)
 8011988:	482b      	ldr	r0, [pc, #172]	; (8011a38 <tcp_output_alloc_header+0xf4>)
 801198a:	f006 f8a7 	bl	8017adc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	8adb      	ldrh	r3, [r3, #22]
 8011998:	4618      	mov	r0, r3
 801199a:	f7fb f86d 	bl	800ca78 <lwip_htons>
 801199e:	4603      	mov	r3, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	8b1b      	ldrh	r3, [r3, #24]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fb f864 	bl	800ca78 <lwip_htons>
 80119b0:	4603      	mov	r3, r0
 80119b2:	461a      	mov	r2, r3
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fb f865 	bl	800ca92 <lwip_htonl>
 80119c8:	4602      	mov	r2, r0
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80119ce:	897b      	ldrh	r3, [r7, #10]
 80119d0:	089b      	lsrs	r3, r3, #2
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	3305      	adds	r3, #5
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	031b      	lsls	r3, r3, #12
 80119da:	b29b      	uxth	r3, r3
 80119dc:	f043 0310 	orr.w	r3, r3, #16
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fb f848 	bl	800ca78 <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	461a      	mov	r2, r3
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fb f83f 	bl	800ca78 <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	2200      	movs	r2, #0
 8011a06:	741a      	strb	r2, [r3, #16]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	749a      	strb	r2, [r3, #18]
 8011a12:	2200      	movs	r2, #0
 8011a14:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a1e:	441a      	add	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a24:	697b      	ldr	r3, [r7, #20]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	08019a84 	.word	0x08019a84
 8011a34:	08019ab8 	.word	0x08019ab8
 8011a38:	08019ae8 	.word	0x08019ae8

08011a3c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011a3c:	b590      	push	{r4, r7, lr}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d02d      	beq.n	8011aa8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a50:	60fb      	str	r3, [r7, #12]
 8011a52:	e002      	b.n	8011a5a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1f8      	bne.n	8011a54 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	899b      	ldrh	r3, [r3, #12]
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fb f804 	bl	800ca78 <lwip_htons>
 8011a70:	4603      	mov	r3, r0
 8011a72:	f003 0307 	and.w	r3, r3, #7
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d116      	bne.n	8011aa8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	68db      	ldr	r3, [r3, #12]
 8011a7e:	899b      	ldrh	r3, [r3, #12]
 8011a80:	b29c      	uxth	r4, r3
 8011a82:	2001      	movs	r0, #1
 8011a84:	f7fa fff8 	bl	800ca78 <lwip_htons>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	4322      	orrs	r2, r4
 8011a92:	b292      	uxth	r2, r2
 8011a94:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	7e9b      	ldrb	r3, [r3, #26]
 8011a9a:	f043 0320 	orr.w	r3, r3, #32
 8011a9e:	b2da      	uxtb	r2, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	e004      	b.n	8011ab2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011aa8:	2101      	movs	r1, #1
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 f88e 	bl	8011bcc <tcp_enqueue_flags>
 8011ab0:	4603      	mov	r3, r0
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3714      	adds	r7, #20
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd90      	pop	{r4, r7, pc}
	...

08011abc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011abc:	b590      	push	{r4, r7, lr}
 8011abe:	b087      	sub	sp, #28
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	60b9      	str	r1, [r7, #8]
 8011ac6:	603b      	str	r3, [r7, #0]
 8011ac8:	4613      	mov	r3, r2
 8011aca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011acc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	f003 0304 	and.w	r3, r3, #4
 8011ad8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011ada:	2003      	movs	r0, #3
 8011adc:	f7fb fb74 	bl	800d1c8 <memp_malloc>
 8011ae0:	6138      	str	r0, [r7, #16]
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d104      	bne.n	8011af2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ae8:	68b8      	ldr	r0, [r7, #8]
 8011aea:	f7fc f8d3 	bl	800dc94 <pbuf_free>
    return NULL;
 8011aee:	2300      	movs	r3, #0
 8011af0:	e061      	b.n	8011bb6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011af8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	2200      	movs	r2, #0
 8011afe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	891a      	ldrh	r2, [r3, #8]
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d205      	bcs.n	8011b1e <tcp_create_segment+0x62>
 8011b12:	4b2b      	ldr	r3, [pc, #172]	; (8011bc0 <tcp_create_segment+0x104>)
 8011b14:	22ba      	movs	r2, #186	; 0xba
 8011b16:	492b      	ldr	r1, [pc, #172]	; (8011bc4 <tcp_create_segment+0x108>)
 8011b18:	482b      	ldr	r0, [pc, #172]	; (8011bc8 <tcp_create_segment+0x10c>)
 8011b1a:	f005 ffdf 	bl	8017adc <iprintf>
  seg->len = p->tot_len - optlen;
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	891a      	ldrh	r2, [r3, #8]
 8011b22:	7dfb      	ldrb	r3, [r7, #23]
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011b2e:	2114      	movs	r1, #20
 8011b30:	68b8      	ldr	r0, [r7, #8]
 8011b32:	f7fc f88b 	bl	800dc4c <pbuf_header>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d004      	beq.n	8011b46 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b3c:	6938      	ldr	r0, [r7, #16]
 8011b3e:	f7fd f9fc 	bl	800ef3a <tcp_seg_free>
    return NULL;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e037      	b.n	8011bb6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	685a      	ldr	r2, [r3, #4]
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	8ada      	ldrh	r2, [r3, #22]
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	68dc      	ldr	r4, [r3, #12]
 8011b58:	4610      	mov	r0, r2
 8011b5a:	f7fa ff8d 	bl	800ca78 <lwip_htons>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	8b1a      	ldrh	r2, [r3, #24]
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	68dc      	ldr	r4, [r3, #12]
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	f7fa ff84 	bl	800ca78 <lwip_htons>
 8011b70:	4603      	mov	r3, r0
 8011b72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	68dc      	ldr	r4, [r3, #12]
 8011b78:	6838      	ldr	r0, [r7, #0]
 8011b7a:	f7fa ff8a 	bl	800ca92 <lwip_htonl>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011b82:	7dfb      	ldrb	r3, [r7, #23]
 8011b84:	089b      	lsrs	r3, r3, #2
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	3305      	adds	r3, #5
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	031b      	lsls	r3, r3, #12
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	4313      	orrs	r3, r2
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	68dc      	ldr	r4, [r3, #12]
 8011b9e:	4610      	mov	r0, r2
 8011ba0:	f7fa ff6a 	bl	800ca78 <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	2200      	movs	r2, #0
 8011bae:	749a      	strb	r2, [r3, #18]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	74da      	strb	r2, [r3, #19]
  return seg;
 8011bb4:	693b      	ldr	r3, [r7, #16]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	371c      	adds	r7, #28
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd90      	pop	{r4, r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	08019a84 	.word	0x08019a84
 8011bc4:	08019b10 	.word	0x08019b10
 8011bc8:	08019ae8 	.word	0x08019ae8

08011bcc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b08a      	sub	sp, #40	; 0x28
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011be0:	78fb      	ldrb	r3, [r7, #3]
 8011be2:	f003 0303 	and.w	r3, r3, #3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d106      	bne.n	8011bf8 <tcp_enqueue_flags+0x2c>
 8011bea:	4b6f      	ldr	r3, [pc, #444]	; (8011da8 <tcp_enqueue_flags+0x1dc>)
 8011bec:	f240 321b 	movw	r2, #795	; 0x31b
 8011bf0:	496e      	ldr	r1, [pc, #440]	; (8011dac <tcp_enqueue_flags+0x1e0>)
 8011bf2:	486f      	ldr	r0, [pc, #444]	; (8011db0 <tcp_enqueue_flags+0x1e4>)
 8011bf4:	f005 ff72 	bl	8017adc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bfe:	2b08      	cmp	r3, #8
 8011c00:	d806      	bhi.n	8011c10 <tcp_enqueue_flags+0x44>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	d90e      	bls.n	8011c2e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011c10:	78fb      	ldrb	r3, [r7, #3]
 8011c12:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d109      	bne.n	8011c2e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7e9b      	ldrb	r3, [r3, #26]
 8011c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c2c:	e0b7      	b.n	8011d9e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8011c2e:	78fb      	ldrb	r3, [r7, #3]
 8011c30:	f003 0302 	and.w	r3, r3, #2
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d001      	beq.n	8011c3c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c3c:	7ffb      	ldrb	r3, [r7, #31]
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	b2db      	uxtb	r3, r3
 8011c42:	f003 0304 	and.w	r3, r3, #4
 8011c46:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011c48:	7dfb      	ldrb	r3, [r7, #23]
 8011c4a:	b29b      	uxth	r3, r3
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	4619      	mov	r1, r3
 8011c50:	2000      	movs	r0, #0
 8011c52:	f7fb fcad 	bl	800d5b0 <pbuf_alloc>
 8011c56:	6138      	str	r0, [r7, #16]
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d109      	bne.n	8011c72 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	7e9b      	ldrb	r3, [r3, #26]
 8011c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c70:	e095      	b.n	8011d9e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	895a      	ldrh	r2, [r3, #10]
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d206      	bcs.n	8011c8c <tcp_enqueue_flags+0xc0>
 8011c7e:	4b4a      	ldr	r3, [pc, #296]	; (8011da8 <tcp_enqueue_flags+0x1dc>)
 8011c80:	f240 3241 	movw	r2, #833	; 0x341
 8011c84:	494b      	ldr	r1, [pc, #300]	; (8011db4 <tcp_enqueue_flags+0x1e8>)
 8011c86:	484a      	ldr	r0, [pc, #296]	; (8011db0 <tcp_enqueue_flags+0x1e4>)
 8011c88:	f005 ff28 	bl	8017adc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011c90:	78fa      	ldrb	r2, [r7, #3]
 8011c92:	7ffb      	ldrb	r3, [r7, #31]
 8011c94:	9300      	str	r3, [sp, #0]
 8011c96:	460b      	mov	r3, r1
 8011c98:	6939      	ldr	r1, [r7, #16]
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7ff ff0e 	bl	8011abc <tcp_create_segment>
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d109      	bne.n	8011cbc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	7e9b      	ldrb	r3, [r3, #26]
 8011cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cba:	e070      	b.n	8011d9e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	f003 0303 	and.w	r3, r3, #3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d006      	beq.n	8011cd6 <tcp_enqueue_flags+0x10a>
 8011cc8:	4b37      	ldr	r3, [pc, #220]	; (8011da8 <tcp_enqueue_flags+0x1dc>)
 8011cca:	f240 3249 	movw	r2, #841	; 0x349
 8011cce:	493a      	ldr	r1, [pc, #232]	; (8011db8 <tcp_enqueue_flags+0x1ec>)
 8011cd0:	4837      	ldr	r0, [pc, #220]	; (8011db0 <tcp_enqueue_flags+0x1e4>)
 8011cd2:	f005 ff03 	bl	8017adc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	891b      	ldrh	r3, [r3, #8]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d006      	beq.n	8011cec <tcp_enqueue_flags+0x120>
 8011cde:	4b32      	ldr	r3, [pc, #200]	; (8011da8 <tcp_enqueue_flags+0x1dc>)
 8011ce0:	f240 324a 	movw	r2, #842	; 0x34a
 8011ce4:	4935      	ldr	r1, [pc, #212]	; (8011dbc <tcp_enqueue_flags+0x1f0>)
 8011ce6:	4832      	ldr	r0, [pc, #200]	; (8011db0 <tcp_enqueue_flags+0x1e4>)
 8011ce8:	f005 fef8 	bl	8017adc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d103      	bne.n	8011cfc <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	68fa      	ldr	r2, [r7, #12]
 8011cf8:	669a      	str	r2, [r3, #104]	; 0x68
 8011cfa:	e00d      	b.n	8011d18 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d00:	61bb      	str	r3, [r7, #24]
 8011d02:	e002      	b.n	8011d0a <tcp_enqueue_flags+0x13e>
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	61bb      	str	r3, [r7, #24]
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d1f8      	bne.n	8011d04 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011d20:	78fb      	ldrb	r3, [r7, #3]
 8011d22:	f003 0302 	and.w	r3, r3, #2
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d104      	bne.n	8011d34 <tcp_enqueue_flags+0x168>
 8011d2a:	78fb      	ldrb	r3, [r7, #3]
 8011d2c:	f003 0301 	and.w	r3, r3, #1
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d004      	beq.n	8011d3e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d38:	1c5a      	adds	r2, r3, #1
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011d3e:	78fb      	ldrb	r3, [r7, #3]
 8011d40:	f003 0301 	and.w	r3, r3, #1
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	7e9b      	ldrb	r3, [r3, #26]
 8011d4c:	f043 0320 	orr.w	r3, r3, #32
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fc f82e 	bl	800ddbc <pbuf_clen>
 8011d60:	4603      	mov	r3, r0
 8011d62:	461a      	mov	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d6a:	4413      	add	r3, r2
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00e      	beq.n	8011d9c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d10a      	bne.n	8011d9c <tcp_enqueue_flags+0x1d0>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d106      	bne.n	8011d9c <tcp_enqueue_flags+0x1d0>
 8011d8e:	4b06      	ldr	r3, [pc, #24]	; (8011da8 <tcp_enqueue_flags+0x1dc>)
 8011d90:	f240 326d 	movw	r2, #877	; 0x36d
 8011d94:	490a      	ldr	r1, [pc, #40]	; (8011dc0 <tcp_enqueue_flags+0x1f4>)
 8011d96:	4806      	ldr	r0, [pc, #24]	; (8011db0 <tcp_enqueue_flags+0x1e4>)
 8011d98:	f005 fea0 	bl	8017adc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3720      	adds	r7, #32
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	08019a84 	.word	0x08019a84
 8011dac:	08019d88 	.word	0x08019d88
 8011db0:	08019ae8 	.word	0x08019ae8
 8011db4:	08019de0 	.word	0x08019de0
 8011db8:	08019e1c 	.word	0x08019e1c
 8011dbc:	08019e34 	.word	0x08019e34
 8011dc0:	08019e60 	.word	0x08019e60

08011dc4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011dc4:	b590      	push	{r4, r7, lr}
 8011dc6:	b08b      	sub	sp, #44	; 0x2c
 8011dc8:	af04      	add	r7, sp, #16
 8011dca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011dd0:	7dbb      	ldrb	r3, [r7, #22]
 8011dd2:	b29c      	uxth	r4, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7fa fe5a 	bl	800ca92 <lwip_htonl>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2200      	movs	r2, #0
 8011de2:	4621      	mov	r1, r4
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7ff fdad 	bl	8011944 <tcp_output_alloc_header>
 8011dea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d109      	bne.n	8011e06 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7e9b      	ldrb	r3, [r3, #26]
 8011df6:	f043 0303 	orr.w	r3, r3, #3
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011e00:	f06f 0301 	mvn.w	r3, #1
 8011e04:	e036      	b.n	8011e74 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f004 f8f6 	bl	8015ffc <ip4_route>
 8011e10:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d102      	bne.n	8011e1e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011e18:	23fc      	movs	r3, #252	; 0xfc
 8011e1a:	75fb      	strb	r3, [r7, #23]
 8011e1c:	e012      	b.n	8011e44 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	1d18      	adds	r0, r3, #4
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	7a9c      	ldrb	r4, [r3, #10]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7a5b      	ldrb	r3, [r3, #9]
 8011e2c:	68fa      	ldr	r2, [r7, #12]
 8011e2e:	9202      	str	r2, [sp, #8]
 8011e30:	2206      	movs	r2, #6
 8011e32:	9201      	str	r2, [sp, #4]
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	4623      	mov	r3, r4
 8011e38:	4602      	mov	r2, r0
 8011e3a:	6938      	ldr	r0, [r7, #16]
 8011e3c:	f004 faa4 	bl	8016388 <ip4_output_if>
 8011e40:	4603      	mov	r3, r0
 8011e42:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011e44:	6938      	ldr	r0, [r7, #16]
 8011e46:	f7fb ff25 	bl	800dc94 <pbuf_free>

  if (err != ERR_OK) {
 8011e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d007      	beq.n	8011e62 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	7e9b      	ldrb	r3, [r3, #26]
 8011e56:	f043 0303 	orr.w	r3, r3, #3
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	769a      	strb	r2, [r3, #26]
 8011e60:	e006      	b.n	8011e70 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	7e9b      	ldrb	r3, [r3, #26]
 8011e66:	f023 0303 	bic.w	r3, r3, #3
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	371c      	adds	r7, #28
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd90      	pop	{r4, r7, pc}

08011e7c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011e7c:	b5b0      	push	{r4, r5, r7, lr}
 8011e7e:	b08a      	sub	sp, #40	; 0x28
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	7d1b      	ldrb	r3, [r3, #20]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	d106      	bne.n	8011e9a <tcp_output+0x1e>
 8011e8c:	4b9b      	ldr	r3, [pc, #620]	; (80120fc <tcp_output+0x280>)
 8011e8e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011e92:	499b      	ldr	r1, [pc, #620]	; (8012100 <tcp_output+0x284>)
 8011e94:	489b      	ldr	r0, [pc, #620]	; (8012104 <tcp_output+0x288>)
 8011e96:	f005 fe21 	bl	8017adc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011e9a:	4b9b      	ldr	r3, [pc, #620]	; (8012108 <tcp_output+0x28c>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d101      	bne.n	8011ea8 <tcp_output+0x2c>
    return ERR_OK;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	e1cf      	b.n	8012248 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d203      	bcs.n	8011ec0 <tcp_output+0x44>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011ebe:	e002      	b.n	8011ec6 <tcp_output+0x4a>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ec6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ecc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	7e9b      	ldrb	r3, [r3, #26]
 8011ed2:	f003 0302 	and.w	r3, r3, #2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d017      	beq.n	8011f0a <tcp_output+0x8e>
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00f      	beq.n	8011f00 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fa fdd3 	bl	800ca92 <lwip_htonl>
 8011eec:	4602      	mov	r2, r0
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ef6:	8912      	ldrh	r2, [r2, #8]
 8011ef8:	4413      	add	r3, r2
     (seg == NULL ||
 8011efa:	69ba      	ldr	r2, [r7, #24]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d204      	bcs.n	8011f0a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7ff ff5f 	bl	8011dc4 <tcp_send_empty_ack>
 8011f06:	4603      	mov	r3, r0
 8011f08:	e19e      	b.n	8012248 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f0e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011f10:	6a3b      	ldr	r3, [r7, #32]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d007      	beq.n	8011f26 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8011f16:	e002      	b.n	8011f1e <tcp_output+0xa2>
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	623b      	str	r3, [r7, #32]
 8011f1e:	6a3b      	ldr	r3, [r7, #32]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d1f8      	bne.n	8011f18 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	3304      	adds	r3, #4
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f004 f866 	bl	8015ffc <ip4_route>
 8011f30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d102      	bne.n	8011f3e <tcp_output+0xc2>
    return ERR_RTE;
 8011f38:	f06f 0303 	mvn.w	r3, #3
 8011f3c:	e184      	b.n	8012248 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d003      	beq.n	8011f4c <tcp_output+0xd0>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d111      	bne.n	8011f70 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d002      	beq.n	8011f58 <tcp_output+0xdc>
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	3304      	adds	r3, #4
 8011f56:	e000      	b.n	8011f5a <tcp_output+0xde>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d102      	bne.n	8011f68 <tcp_output+0xec>
      return ERR_RTE;
 8011f62:	f06f 0303 	mvn.w	r3, #3
 8011f66:	e16f      	b.n	8012248 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f000 813e 	beq.w	80121f4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fa fd87 	bl	800ca92 <lwip_htonl>
 8011f84:	4602      	mov	r2, r0
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f8e:	8912      	ldrh	r2, [r2, #8]
 8011f90:	4413      	add	r3, r2
  if (seg != NULL &&
 8011f92:	69ba      	ldr	r2, [r7, #24]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	f080 812d 	bcs.w	80121f4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011f9a:	69bb      	ldr	r3, [r7, #24]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f000 8129 	beq.w	80121f4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011fa8:	461a      	mov	r2, r3
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	4293      	cmp	r3, r2
 8011fae:	f040 8121 	bne.w	80121f4 <tcp_output+0x378>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	f040 811c 	bne.w	80121f4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f040 812b 	bne.w	801221e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011fd8:	e121      	b.n	801221e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	899b      	ldrh	r3, [r3, #12]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7fa fd48 	bl	800ca78 <lwip_htons>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	f003 0304 	and.w	r3, r3, #4
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d006      	beq.n	8012000 <tcp_output+0x184>
 8011ff2:	4b42      	ldr	r3, [pc, #264]	; (80120fc <tcp_output+0x280>)
 8011ff4:	f240 4246 	movw	r2, #1094	; 0x446
 8011ff8:	4944      	ldr	r1, [pc, #272]	; (801210c <tcp_output+0x290>)
 8011ffa:	4842      	ldr	r0, [pc, #264]	; (8012104 <tcp_output+0x288>)
 8011ffc:	f005 fd6e 	bl	8017adc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012004:	2b00      	cmp	r3, #0
 8012006:	d01f      	beq.n	8012048 <tcp_output+0x1cc>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	7e9b      	ldrb	r3, [r3, #26]
 801200c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012010:	2b00      	cmp	r3, #0
 8012012:	d119      	bne.n	8012048 <tcp_output+0x1cc>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00b      	beq.n	8012034 <tcp_output+0x1b8>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d110      	bne.n	8012048 <tcp_output+0x1cc>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801202a:	891a      	ldrh	r2, [r3, #8]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012030:	429a      	cmp	r2, r3
 8012032:	d209      	bcs.n	8012048 <tcp_output+0x1cc>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801203a:	2b00      	cmp	r3, #0
 801203c:	d004      	beq.n	8012048 <tcp_output+0x1cc>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012044:	2b08      	cmp	r3, #8
 8012046:	d901      	bls.n	801204c <tcp_output+0x1d0>
 8012048:	2301      	movs	r3, #1
 801204a:	e000      	b.n	801204e <tcp_output+0x1d2>
 801204c:	2300      	movs	r3, #0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	7e9b      	ldrb	r3, [r3, #26]
 8012056:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801205a:	2b00      	cmp	r3, #0
 801205c:	f000 80e1 	beq.w	8012222 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	7d1b      	ldrb	r3, [r3, #20]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d00d      	beq.n	8012084 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	899b      	ldrh	r3, [r3, #12]
 801206e:	b29c      	uxth	r4, r3
 8012070:	2010      	movs	r0, #16
 8012072:	f7fa fd01 	bl	800ca78 <lwip_htons>
 8012076:	4603      	mov	r3, r0
 8012078:	461a      	mov	r2, r3
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	4322      	orrs	r2, r4
 8012080:	b292      	uxth	r2, r2
 8012082:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8012084:	697a      	ldr	r2, [r7, #20]
 8012086:	6879      	ldr	r1, [r7, #4]
 8012088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801208a:	f000 f8e1 	bl	8012250 <tcp_output_segment>
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d009      	beq.n	80120ae <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	7e9b      	ldrb	r3, [r3, #26]
 801209e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120a2:	b2da      	uxtb	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	769a      	strb	r2, [r3, #26]
      return err;
 80120a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ac:	e0cc      	b.n	8012248 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80120ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	7d1b      	ldrb	r3, [r3, #20]
 80120ba:	2b02      	cmp	r3, #2
 80120bc:	d006      	beq.n	80120cc <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	7e9b      	ldrb	r3, [r3, #26]
 80120c2:	f023 0303 	bic.w	r3, r3, #3
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fa fcdd 	bl	800ca92 <lwip_htonl>
 80120d8:	4604      	mov	r4, r0
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	891b      	ldrh	r3, [r3, #8]
 80120de:	461d      	mov	r5, r3
 80120e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	899b      	ldrh	r3, [r3, #12]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fa fcc5 	bl	800ca78 <lwip_htons>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f003 0303 	and.w	r3, r3, #3
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00b      	beq.n	8012110 <tcp_output+0x294>
 80120f8:	2301      	movs	r3, #1
 80120fa:	e00a      	b.n	8012112 <tcp_output+0x296>
 80120fc:	08019a84 	.word	0x08019a84
 8012100:	08019e88 	.word	0x08019e88
 8012104:	08019ae8 	.word	0x08019ae8
 8012108:	20008b84 	.word	0x20008b84
 801210c:	08019eb0 	.word	0x08019eb0
 8012110:	2300      	movs	r3, #0
 8012112:	442b      	add	r3, r5
 8012114:	4423      	add	r3, r4
 8012116:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	1ad3      	subs	r3, r2, r3
 8012120:	2b00      	cmp	r3, #0
 8012122:	da02      	bge.n	801212a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212c:	891b      	ldrh	r3, [r3, #8]
 801212e:	461c      	mov	r4, r3
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	899b      	ldrh	r3, [r3, #12]
 8012136:	b29b      	uxth	r3, r3
 8012138:	4618      	mov	r0, r3
 801213a:	f7fa fc9d 	bl	800ca78 <lwip_htons>
 801213e:	4603      	mov	r3, r0
 8012140:	f003 0303 	and.w	r3, r3, #3
 8012144:	2b00      	cmp	r3, #0
 8012146:	d001      	beq.n	801214c <tcp_output+0x2d0>
 8012148:	2301      	movs	r3, #1
 801214a:	e000      	b.n	801214e <tcp_output+0x2d2>
 801214c:	2300      	movs	r3, #0
 801214e:	4423      	add	r3, r4
 8012150:	2b00      	cmp	r3, #0
 8012152:	d049      	beq.n	80121e8 <tcp_output+0x36c>
      seg->next = NULL;
 8012154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012156:	2200      	movs	r2, #0
 8012158:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801215e:	2b00      	cmp	r3, #0
 8012160:	d105      	bne.n	801216e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012166:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216a:	623b      	str	r3, [r7, #32]
 801216c:	e03f      	b.n	80121ee <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012170:	68db      	ldr	r3, [r3, #12]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	f7fa fc8c 	bl	800ca92 <lwip_htonl>
 801217a:	4604      	mov	r4, r0
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fa fc85 	bl	800ca92 <lwip_htonl>
 8012188:	4603      	mov	r3, r0
 801218a:	1ae3      	subs	r3, r4, r3
 801218c:	2b00      	cmp	r3, #0
 801218e:	da24      	bge.n	80121da <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	336c      	adds	r3, #108	; 0x6c
 8012194:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012196:	e002      	b.n	801219e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d011      	beq.n	80121ca <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fa fc6f 	bl	800ca92 <lwip_htonl>
 80121b4:	4604      	mov	r4, r0
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fa fc68 	bl	800ca92 <lwip_htonl>
 80121c2:	4603      	mov	r3, r0
 80121c4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	dbe6      	blt.n	8012198 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	e009      	b.n	80121ee <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80121da:	6a3b      	ldr	r3, [r7, #32]
 80121dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121de:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80121e0:	6a3b      	ldr	r3, [r7, #32]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	623b      	str	r3, [r7, #32]
 80121e6:	e002      	b.n	80121ee <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80121e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121ea:	f7fc fea6 	bl	800ef3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d015      	beq.n	8012226 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80121fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	f7fa fc46 	bl	800ca92 <lwip_htonl>
 8012206:	4602      	mov	r2, r0
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012210:	8912      	ldrh	r2, [r2, #8]
 8012212:	4413      	add	r3, r2
  while (seg != NULL &&
 8012214:	69ba      	ldr	r2, [r7, #24]
 8012216:	429a      	cmp	r2, r3
 8012218:	f4bf aedf 	bcs.w	8011fda <tcp_output+0x15e>
  }
output_done:
 801221c:	e003      	b.n	8012226 <tcp_output+0x3aa>
    goto output_done;
 801221e:	bf00      	nop
 8012220:	e002      	b.n	8012228 <tcp_output+0x3ac>
      break;
 8012222:	bf00      	nop
 8012224:	e000      	b.n	8012228 <tcp_output+0x3ac>
output_done:
 8012226:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2200      	movs	r2, #0
 8012234:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7e9b      	ldrb	r3, [r3, #26]
 801223c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012240:	b2da      	uxtb	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8012246:	2300      	movs	r3, #0
}
 8012248:	4618      	mov	r0, r3
 801224a:	3728      	adds	r7, #40	; 0x28
 801224c:	46bd      	mov	sp, r7
 801224e:	bdb0      	pop	{r4, r5, r7, pc}

08012250 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012250:	b5b0      	push	{r4, r5, r7, lr}
 8012252:	b08c      	sub	sp, #48	; 0x30
 8012254:	af04      	add	r7, sp, #16
 8012256:	60f8      	str	r0, [r7, #12]
 8012258:	60b9      	str	r1, [r7, #8]
 801225a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	89db      	ldrh	r3, [r3, #14]
 8012262:	2b01      	cmp	r3, #1
 8012264:	d001      	beq.n	801226a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8012266:	2300      	movs	r3, #0
 8012268:	e08b      	b.n	8012382 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	68dc      	ldr	r4, [r3, #12]
 8012272:	4610      	mov	r0, r2
 8012274:	f7fa fc0d 	bl	800ca92 <lwip_htonl>
 8012278:	4603      	mov	r3, r0
 801227a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	68dc      	ldr	r4, [r3, #12]
 8012284:	4610      	mov	r0, r2
 8012286:	f7fa fbf7 	bl	800ca78 <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012296:	441a      	add	r2, r3
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	3314      	adds	r3, #20
 80122a2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	7a9b      	ldrb	r3, [r3, #10]
 80122a8:	f003 0301 	and.w	r3, r3, #1
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d014      	beq.n	80122da <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	3304      	adds	r3, #4
 80122b4:	4619      	mov	r1, r3
 80122b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80122ba:	f7fd f8a7 	bl	800f40c <tcp_eff_send_mss_impl>
 80122be:	4603      	mov	r3, r0
 80122c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80122c2:	8b7b      	ldrh	r3, [r7, #26]
 80122c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fa fbe2 	bl	800ca92 <lwip_htonl>
 80122ce:	4602      	mov	r2, r0
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	3304      	adds	r3, #4
 80122d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	da02      	bge.n	80122ea <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	2200      	movs	r2, #0
 80122e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d10c      	bne.n	801230c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80122f2:	4b26      	ldr	r3, [pc, #152]	; (801238c <tcp_output_segment+0x13c>)
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f7fa fbc6 	bl	800ca92 <lwip_htonl>
 8012306:	4602      	mov	r2, r0
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	461a      	mov	r2, r3
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	1ad3      	subs	r3, r2, r3
 801231a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	8959      	ldrh	r1, [r3, #10]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	8b3a      	ldrh	r2, [r7, #24]
 8012328:	1a8a      	subs	r2, r1, r2
 801232a:	b292      	uxth	r2, r2
 801232c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	8919      	ldrh	r1, [r3, #8]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	8b3a      	ldrh	r2, [r7, #24]
 801233a:	1a8a      	subs	r2, r1, r2
 801233c:	b292      	uxth	r2, r2
 801233e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	68fa      	ldr	r2, [r7, #12]
 8012346:	68d2      	ldr	r2, [r2, #12]
 8012348:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	2200      	movs	r2, #0
 8012350:	741a      	strb	r2, [r3, #16]
 8012352:	2200      	movs	r2, #0
 8012354:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6858      	ldr	r0, [r3, #4]
 801235a:	68b9      	ldr	r1, [r7, #8]
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	1d1c      	adds	r4, r3, #4
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	7a9d      	ldrb	r5, [r3, #10]
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	7a5b      	ldrb	r3, [r3, #9]
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	9202      	str	r2, [sp, #8]
 801236c:	2206      	movs	r2, #6
 801236e:	9201      	str	r2, [sp, #4]
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	462b      	mov	r3, r5
 8012374:	4622      	mov	r2, r4
 8012376:	f004 f807 	bl	8016388 <ip4_output_if>
 801237a:	4603      	mov	r3, r0
 801237c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3720      	adds	r7, #32
 8012386:	46bd      	mov	sp, r7
 8012388:	bdb0      	pop	{r4, r5, r7, pc}
 801238a:	bf00      	nop
 801238c:	20008b74 	.word	0x20008b74

08012390 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b08c      	sub	sp, #48	; 0x30
 8012394:	af04      	add	r7, sp, #16
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801239e:	2200      	movs	r2, #0
 80123a0:	2114      	movs	r1, #20
 80123a2:	2001      	movs	r0, #1
 80123a4:	f7fb f904 	bl	800d5b0 <pbuf_alloc>
 80123a8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d05b      	beq.n	8012468 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	895b      	ldrh	r3, [r3, #10]
 80123b4:	2b13      	cmp	r3, #19
 80123b6:	d806      	bhi.n	80123c6 <tcp_rst+0x36>
 80123b8:	4b2d      	ldr	r3, [pc, #180]	; (8012470 <tcp_rst+0xe0>)
 80123ba:	f240 524d 	movw	r2, #1357	; 0x54d
 80123be:	492d      	ldr	r1, [pc, #180]	; (8012474 <tcp_rst+0xe4>)
 80123c0:	482d      	ldr	r0, [pc, #180]	; (8012478 <tcp_rst+0xe8>)
 80123c2:	f005 fb8b 	bl	8017adc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80123cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fa fb52 	bl	800ca78 <lwip_htons>
 80123d4:	4603      	mov	r3, r0
 80123d6:	461a      	mov	r2, r3
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80123dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123de:	4618      	mov	r0, r3
 80123e0:	f7fa fb4a 	bl	800ca78 <lwip_htons>
 80123e4:	4603      	mov	r3, r0
 80123e6:	461a      	mov	r2, r3
 80123e8:	69bb      	ldr	r3, [r7, #24]
 80123ea:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f7fa fb50 	bl	800ca92 <lwip_htonl>
 80123f2:	4602      	mov	r2, r0
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80123f8:	68b8      	ldr	r0, [r7, #8]
 80123fa:	f7fa fb4a 	bl	800ca92 <lwip_htonl>
 80123fe:	4602      	mov	r2, r0
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012404:	f245 0014 	movw	r0, #20500	; 0x5014
 8012408:	f7fa fb36 	bl	800ca78 <lwip_htons>
 801240c:	4603      	mov	r3, r0
 801240e:	461a      	mov	r2, r3
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	2200      	movs	r2, #0
 8012418:	f042 0208 	orr.w	r2, r2, #8
 801241c:	739a      	strb	r2, [r3, #14]
 801241e:	2200      	movs	r2, #0
 8012420:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012424:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	2200      	movs	r2, #0
 801242a:	741a      	strb	r2, [r3, #16]
 801242c:	2200      	movs	r2, #0
 801242e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	2200      	movs	r2, #0
 8012434:	749a      	strb	r2, [r3, #18]
 8012436:	2200      	movs	r2, #0
 8012438:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801243a:	6838      	ldr	r0, [r7, #0]
 801243c:	f003 fdde 	bl	8015ffc <ip4_route>
 8012440:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d00b      	beq.n	8012460 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	9302      	str	r3, [sp, #8]
 801244c:	2306      	movs	r3, #6
 801244e:	9301      	str	r3, [sp, #4]
 8012450:	2300      	movs	r3, #0
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	23ff      	movs	r3, #255	; 0xff
 8012456:	683a      	ldr	r2, [r7, #0]
 8012458:	6879      	ldr	r1, [r7, #4]
 801245a:	69f8      	ldr	r0, [r7, #28]
 801245c:	f003 ff94 	bl	8016388 <ip4_output_if>
  }
  pbuf_free(p);
 8012460:	69f8      	ldr	r0, [r7, #28]
 8012462:	f7fb fc17 	bl	800dc94 <pbuf_free>
 8012466:	e000      	b.n	801246a <tcp_rst+0xda>
    return;
 8012468:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	08019a84 	.word	0x08019a84
 8012474:	08019ab8 	.word	0x08019ab8
 8012478:	08019ae8 	.word	0x08019ae8

0801247c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012488:	2b00      	cmp	r3, #0
 801248a:	d029      	beq.n	80124e0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012490:	60fb      	str	r3, [r7, #12]
 8012492:	e002      	b.n	801249a <tcp_rexmit_rto+0x1e>
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	60fb      	str	r3, [r7, #12]
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1f8      	bne.n	8012494 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2200      	movs	r2, #0
 80124b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124be:	2bff      	cmp	r3, #255	; 0xff
 80124c0:	d007      	beq.n	80124d2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124c8:	3301      	adds	r3, #1
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2200      	movs	r2, #0
 80124d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f7ff fccf 	bl	8011e7c <tcp_output>
 80124de:	e000      	b.n	80124e2 <tcp_rexmit_rto+0x66>
    return;
 80124e0:	bf00      	nop
}
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80124e8:	b590      	push	{r4, r7, lr}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d043      	beq.n	8012580 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124fc:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	3368      	adds	r3, #104	; 0x68
 801250a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801250c:	e002      	b.n	8012514 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d011      	beq.n	8012540 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	f7fa fab4 	bl	800ca92 <lwip_htonl>
 801252a:	4604      	mov	r4, r0
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	4618      	mov	r0, r3
 8012534:	f7fa faad 	bl	800ca92 <lwip_htonl>
 8012538:	4603      	mov	r3, r0
 801253a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801253c:	2b00      	cmp	r3, #0
 801253e:	dbe6      	blt.n	801250e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	68ba      	ldr	r2, [r7, #8]
 801254c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d103      	bne.n	801255e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2200      	movs	r2, #0
 801255a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012564:	2bff      	cmp	r3, #255	; 0xff
 8012566:	d007      	beq.n	8012578 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801256e:	3301      	adds	r3, #1
 8012570:	b2da      	uxtb	r2, r3
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2200      	movs	r2, #0
 801257c:	635a      	str	r2, [r3, #52]	; 0x34
 801257e:	e000      	b.n	8012582 <tcp_rexmit+0x9a>
    return;
 8012580:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012582:	3714      	adds	r7, #20
 8012584:	46bd      	mov	sp, r7
 8012586:	bd90      	pop	{r4, r7, pc}

08012588 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012594:	2b00      	cmp	r3, #0
 8012596:	d04a      	beq.n	801262e <tcp_rexmit_fast+0xa6>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	7e9b      	ldrb	r3, [r3, #26]
 801259c:	f003 0304 	and.w	r3, r3, #4
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d144      	bne.n	801262e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff ff9f 	bl	80124e8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d207      	bcs.n	80125ca <tcp_rexmit_fast+0x42>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125c0:	0fda      	lsrs	r2, r3, #31
 80125c2:	4413      	add	r3, r2
 80125c4:	105b      	asrs	r3, r3, #1
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	e006      	b.n	80125d8 <tcp_rexmit_fast+0x50>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125d0:	0fda      	lsrs	r2, r3, #31
 80125d2:	4413      	add	r3, r2
 80125d4:	105b      	asrs	r3, r3, #1
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80125e4:	461a      	mov	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ea:	005b      	lsls	r3, r3, #1
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d206      	bcs.n	80125fe <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125f4:	005b      	lsls	r3, r3, #1
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012608:	4619      	mov	r1, r3
 801260a:	0049      	lsls	r1, r1, #1
 801260c:	440b      	add	r3, r1
 801260e:	b29b      	uxth	r3, r3
 8012610:	4413      	add	r3, r2
 8012612:	b29a      	uxth	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	7e9b      	ldrb	r3, [r3, #26]
 801261e:	f043 0304 	orr.w	r3, r3, #4
 8012622:	b2da      	uxtb	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801262e:	bf00      	nop
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012636:	b580      	push	{r7, lr}
 8012638:	b08a      	sub	sp, #40	; 0x28
 801263a:	af04      	add	r7, sp, #16
 801263c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012642:	3b01      	subs	r3, #1
 8012644:	4618      	mov	r0, r3
 8012646:	f7fa fa24 	bl	800ca92 <lwip_htonl>
 801264a:	4603      	mov	r3, r0
 801264c:	2200      	movs	r2, #0
 801264e:	2100      	movs	r1, #0
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff f977 	bl	8011944 <tcp_output_alloc_header>
 8012656:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801265e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012662:	e021      	b.n	80126a8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	3304      	adds	r3, #4
 8012668:	4618      	mov	r0, r3
 801266a:	f003 fcc7 	bl	8015ffc <ip4_route>
 801266e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d102      	bne.n	801267c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012676:	23fc      	movs	r3, #252	; 0xfc
 8012678:	75fb      	strb	r3, [r7, #23]
 801267a:	e010      	b.n	801269e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801267c:	6879      	ldr	r1, [r7, #4]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	1d1a      	adds	r2, r3, #4
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	7a98      	ldrb	r0, [r3, #10]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	9302      	str	r3, [sp, #8]
 801268a:	2306      	movs	r3, #6
 801268c:	9301      	str	r3, [sp, #4]
 801268e:	2300      	movs	r3, #0
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	4603      	mov	r3, r0
 8012694:	6938      	ldr	r0, [r7, #16]
 8012696:	f003 fe77 	bl	8016388 <ip4_output_if>
 801269a:	4603      	mov	r3, r0
 801269c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801269e:	6938      	ldr	r0, [r7, #16]
 80126a0:	f7fb faf8 	bl	800dc94 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80126a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3718      	adds	r7, #24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80126b0:	b590      	push	{r4, r7, lr}
 80126b2:	b08f      	sub	sp, #60	; 0x3c
 80126b4:	af04      	add	r7, sp, #16
 80126b6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126bc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126c8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80126d0:	2300      	movs	r3, #0
 80126d2:	e085      	b.n	80127e0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126d4:	6a3b      	ldr	r3, [r7, #32]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	899b      	ldrh	r3, [r3, #12]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	4618      	mov	r0, r3
 80126de:	f7fa f9cb 	bl	800ca78 <lwip_htons>
 80126e2:	4603      	mov	r3, r0
 80126e4:	f003 0301 	and.w	r3, r3, #1
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <tcp_zero_window_probe+0x48>
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	891b      	ldrh	r3, [r3, #8]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <tcp_zero_window_probe+0x48>
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <tcp_zero_window_probe+0x4a>
 80126f8:	2300      	movs	r3, #0
 80126fa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80126fc:	7ffb      	ldrb	r3, [r7, #31]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	bf0c      	ite	eq
 8012702:	2301      	moveq	r3, #1
 8012704:	2300      	movne	r3, #0
 8012706:	b2db      	uxtb	r3, r3
 8012708:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	8bba      	ldrh	r2, [r7, #28]
 8012712:	2100      	movs	r1, #0
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff f915 	bl	8011944 <tcp_output_alloc_header>
 801271a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801271c:	69bb      	ldr	r3, [r7, #24]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d102      	bne.n	8012728 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012726:	e05b      	b.n	80127e0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801272e:	7ffb      	ldrb	r3, [r7, #31]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00e      	beq.n	8012752 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
 801273a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801273e:	b29c      	uxth	r4, r3
 8012740:	2011      	movs	r0, #17
 8012742:	f7fa f999 	bl	800ca78 <lwip_htons>
 8012746:	4603      	mov	r3, r0
 8012748:	4323      	orrs	r3, r4
 801274a:	b29a      	uxth	r2, r3
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	819a      	strh	r2, [r3, #12]
 8012750:	e010      	b.n	8012774 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	3314      	adds	r3, #20
 8012758:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801275a:	6a3b      	ldr	r3, [r7, #32]
 801275c:	6858      	ldr	r0, [r3, #4]
 801275e:	6a3b      	ldr	r3, [r7, #32]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	891a      	ldrh	r2, [r3, #8]
 8012764:	6a3b      	ldr	r3, [r7, #32]
 8012766:	891b      	ldrh	r3, [r3, #8]
 8012768:	1ad3      	subs	r3, r2, r3
 801276a:	b29b      	uxth	r3, r3
 801276c:	2201      	movs	r2, #1
 801276e:	6939      	ldr	r1, [r7, #16]
 8012770:	f7fb fc8e 	bl	800e090 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012774:	6a3b      	ldr	r3, [r7, #32]
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	f7fa f989 	bl	800ca92 <lwip_htonl>
 8012780:	4603      	mov	r3, r0
 8012782:	3301      	adds	r3, #1
 8012784:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	da02      	bge.n	8012798 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	3304      	adds	r3, #4
 801279c:	4618      	mov	r0, r3
 801279e:	f003 fc2d 	bl	8015ffc <ip4_route>
 80127a2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d103      	bne.n	80127b2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80127aa:	23fc      	movs	r3, #252	; 0xfc
 80127ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80127b0:	e011      	b.n	80127d6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80127b2:	6879      	ldr	r1, [r7, #4]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	1d1a      	adds	r2, r3, #4
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	7a98      	ldrb	r0, [r3, #10]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	9302      	str	r3, [sp, #8]
 80127c0:	2306      	movs	r3, #6
 80127c2:	9301      	str	r3, [sp, #4]
 80127c4:	2300      	movs	r3, #0
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	4603      	mov	r3, r0
 80127ca:	69b8      	ldr	r0, [r7, #24]
 80127cc:	f003 fddc 	bl	8016388 <ip4_output_if>
 80127d0:	4603      	mov	r3, r0
 80127d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80127d6:	69b8      	ldr	r0, [r7, #24]
 80127d8:	f7fb fa5c 	bl	800dc94 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	372c      	adds	r7, #44	; 0x2c
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd90      	pop	{r4, r7, pc}

080127e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80127f0:	f7fb fcce 	bl	800e190 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80127f4:	4b0a      	ldr	r3, [pc, #40]	; (8012820 <tcpip_tcp_timer+0x38>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d103      	bne.n	8012804 <tcpip_tcp_timer+0x1c>
 80127fc:	4b09      	ldr	r3, [pc, #36]	; (8012824 <tcpip_tcp_timer+0x3c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d005      	beq.n	8012810 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012804:	2200      	movs	r2, #0
 8012806:	4908      	ldr	r1, [pc, #32]	; (8012828 <tcpip_tcp_timer+0x40>)
 8012808:	20fa      	movs	r0, #250	; 0xfa
 801280a:	f000 f86f 	bl	80128ec <sys_timeout>
 801280e:	e002      	b.n	8012816 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012810:	4b06      	ldr	r3, [pc, #24]	; (801282c <tcpip_tcp_timer+0x44>)
 8012812:	2200      	movs	r2, #0
 8012814:	601a      	str	r2, [r3, #0]
  }
}
 8012816:	bf00      	nop
 8012818:	3708      	adds	r7, #8
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20008b70 	.word	0x20008b70
 8012824:	20008b80 	.word	0x20008b80
 8012828:	080127e9 	.word	0x080127e9
 801282c:	20000178 	.word	0x20000178

08012830 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012834:	4b0a      	ldr	r3, [pc, #40]	; (8012860 <tcp_timer_needed+0x30>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d10f      	bne.n	801285c <tcp_timer_needed+0x2c>
 801283c:	4b09      	ldr	r3, [pc, #36]	; (8012864 <tcp_timer_needed+0x34>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d103      	bne.n	801284c <tcp_timer_needed+0x1c>
 8012844:	4b08      	ldr	r3, [pc, #32]	; (8012868 <tcp_timer_needed+0x38>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d007      	beq.n	801285c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <tcp_timer_needed+0x30>)
 801284e:	2201      	movs	r2, #1
 8012850:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012852:	2200      	movs	r2, #0
 8012854:	4905      	ldr	r1, [pc, #20]	; (801286c <tcp_timer_needed+0x3c>)
 8012856:	20fa      	movs	r0, #250	; 0xfa
 8012858:	f000 f848 	bl	80128ec <sys_timeout>
  }
}
 801285c:	bf00      	nop
 801285e:	bd80      	pop	{r7, pc}
 8012860:	20000178 	.word	0x20000178
 8012864:	20008b70 	.word	0x20008b70
 8012868:	20008b80 	.word	0x20008b80
 801286c:	080127e9 	.word	0x080127e9

08012870 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	685b      	ldr	r3, [r3, #4]
 8012880:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	4903      	ldr	r1, [pc, #12]	; (8012898 <cyclic_timer+0x28>)
 801288a:	4618      	mov	r0, r3
 801288c:	f000 f82e 	bl	80128ec <sys_timeout>
}
 8012890:	bf00      	nop
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}
 8012898:	08012871 	.word	0x08012871

0801289c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128a2:	2301      	movs	r3, #1
 80128a4:	607b      	str	r3, [r7, #4]
 80128a6:	e00e      	b.n	80128c6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80128a8:	4a0d      	ldr	r2, [pc, #52]	; (80128e0 <sys_timeouts_init+0x44>)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	4a0a      	ldr	r2, [pc, #40]	; (80128e0 <sys_timeouts_init+0x44>)
 80128b6:	4413      	add	r3, r2
 80128b8:	461a      	mov	r2, r3
 80128ba:	490a      	ldr	r1, [pc, #40]	; (80128e4 <sys_timeouts_init+0x48>)
 80128bc:	f000 f816 	bl	80128ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3301      	adds	r3, #1
 80128c4:	607b      	str	r3, [r7, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b04      	cmp	r3, #4
 80128ca:	d9ed      	bls.n	80128a8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80128cc:	f7f4 fac6 	bl	8006e5c <sys_now>
 80128d0:	4602      	mov	r2, r0
 80128d2:	4b05      	ldr	r3, [pc, #20]	; (80128e8 <sys_timeouts_init+0x4c>)
 80128d4:	601a      	str	r2, [r3, #0]
}
 80128d6:	bf00      	nop
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	0801ace0 	.word	0x0801ace0
 80128e4:	08012871 	.word	0x08012871
 80128e8:	20000174 	.word	0x20000174

080128ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b088      	sub	sp, #32
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	60f8      	str	r0, [r7, #12]
 80128f4:	60b9      	str	r1, [r7, #8]
 80128f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80128f8:	2006      	movs	r0, #6
 80128fa:	f7fa fc65 	bl	800d1c8 <memp_malloc>
 80128fe:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012900:	697b      	ldr	r3, [r7, #20]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d10a      	bne.n	801291c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	2b00      	cmp	r3, #0
 801290a:	f040 8084 	bne.w	8012a16 <sys_timeout+0x12a>
 801290e:	4b44      	ldr	r3, [pc, #272]	; (8012a20 <sys_timeout+0x134>)
 8012910:	22d4      	movs	r2, #212	; 0xd4
 8012912:	4944      	ldr	r1, [pc, #272]	; (8012a24 <sys_timeout+0x138>)
 8012914:	4844      	ldr	r0, [pc, #272]	; (8012a28 <sys_timeout+0x13c>)
 8012916:	f005 f8e1 	bl	8017adc <iprintf>
    return;
 801291a:	e07c      	b.n	8012a16 <sys_timeout+0x12a>
  }

  now = sys_now();
 801291c:	f7f4 fa9e 	bl	8006e5c <sys_now>
 8012920:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012922:	4b42      	ldr	r3, [pc, #264]	; (8012a2c <sys_timeout+0x140>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d105      	bne.n	8012936 <sys_timeout+0x4a>
    diff = 0;
 801292a:	2300      	movs	r3, #0
 801292c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801292e:	4a40      	ldr	r2, [pc, #256]	; (8012a30 <sys_timeout+0x144>)
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	6013      	str	r3, [r2, #0]
 8012934:	e004      	b.n	8012940 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012936:	4b3e      	ldr	r3, [pc, #248]	; (8012a30 <sys_timeout+0x144>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	693a      	ldr	r2, [r7, #16]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	2200      	movs	r2, #0
 8012944:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	68ba      	ldr	r2, [r7, #8]
 801294a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012952:	68fa      	ldr	r2, [r7, #12]
 8012954:	69bb      	ldr	r3, [r7, #24]
 8012956:	441a      	add	r2, r3
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801295c:	4b33      	ldr	r3, [pc, #204]	; (8012a2c <sys_timeout+0x140>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d103      	bne.n	801296c <sys_timeout+0x80>
    next_timeout = timeout;
 8012964:	4a31      	ldr	r2, [pc, #196]	; (8012a2c <sys_timeout+0x140>)
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	6013      	str	r3, [r2, #0]
    return;
 801296a:	e055      	b.n	8012a18 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801296c:	4b2f      	ldr	r3, [pc, #188]	; (8012a2c <sys_timeout+0x140>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	68fa      	ldr	r2, [r7, #12]
 8012974:	429a      	cmp	r2, r3
 8012976:	d20f      	bcs.n	8012998 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012978:	4b2c      	ldr	r3, [pc, #176]	; (8012a2c <sys_timeout+0x140>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6859      	ldr	r1, [r3, #4]
 801297e:	4b2b      	ldr	r3, [pc, #172]	; (8012a2c <sys_timeout+0x140>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	68fa      	ldr	r2, [r7, #12]
 8012984:	1a8a      	subs	r2, r1, r2
 8012986:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012988:	4b28      	ldr	r3, [pc, #160]	; (8012a2c <sys_timeout+0x140>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012990:	4a26      	ldr	r2, [pc, #152]	; (8012a2c <sys_timeout+0x140>)
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	6013      	str	r3, [r2, #0]
 8012996:	e03f      	b.n	8012a18 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012998:	4b24      	ldr	r3, [pc, #144]	; (8012a2c <sys_timeout+0x140>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	61fb      	str	r3, [r7, #28]
 801299e:	e036      	b.n	8012a0e <sys_timeout+0x122>
      timeout->time -= t->time;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	685a      	ldr	r2, [r3, #4]
 80129a4:	69fb      	ldr	r3, [r7, #28]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	1ad2      	subs	r2, r2, r3
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d006      	beq.n	80129c4 <sys_timeout+0xd8>
 80129b6:	69fb      	ldr	r3, [r7, #28]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d921      	bls.n	8012a08 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d009      	beq.n	80129e0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80129cc:	69fb      	ldr	r3, [r7, #28]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	6859      	ldr	r1, [r3, #4]
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	69fb      	ldr	r3, [r7, #28]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	1a8a      	subs	r2, r1, r2
 80129dc:	605a      	str	r2, [r3, #4]
 80129de:	e00b      	b.n	80129f8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d206      	bcs.n	80129f8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80129ea:	4b10      	ldr	r3, [pc, #64]	; (8012a2c <sys_timeout+0x140>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	441a      	add	r2, r3
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	681a      	ldr	r2, [r3, #0]
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	697a      	ldr	r2, [r7, #20]
 8012a04:	601a      	str	r2, [r3, #0]
        break;
 8012a06:	e007      	b.n	8012a18 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	61fb      	str	r3, [r7, #28]
 8012a0e:	69fb      	ldr	r3, [r7, #28]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d1c5      	bne.n	80129a0 <sys_timeout+0xb4>
 8012a14:	e000      	b.n	8012a18 <sys_timeout+0x12c>
    return;
 8012a16:	bf00      	nop
      }
    }
  }
}
 8012a18:	3720      	adds	r7, #32
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	08019ec8 	.word	0x08019ec8
 8012a24:	08019efc 	.word	0x08019efc
 8012a28:	08019f3c 	.word	0x08019f3c
 8012a2c:	20000170 	.word	0x20000170
 8012a30:	20000174 	.word	0x20000174

08012a34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012a34:	b480      	push	{r7}
 8012a36:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012a38:	bf00      	nop
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bc80      	pop	{r7}
 8012a3e:	4770      	bx	lr

08012a40 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012a40:	b480      	push	{r7}
 8012a42:	b083      	sub	sp, #12
 8012a44:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012a4a:	4b17      	ldr	r3, [pc, #92]	; (8012aa8 <udp_new_port+0x68>)
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	1c5a      	adds	r2, r3, #1
 8012a50:	b291      	uxth	r1, r2
 8012a52:	4a15      	ldr	r2, [pc, #84]	; (8012aa8 <udp_new_port+0x68>)
 8012a54:	8011      	strh	r1, [r2, #0]
 8012a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d103      	bne.n	8012a66 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012a5e:	4b12      	ldr	r3, [pc, #72]	; (8012aa8 <udp_new_port+0x68>)
 8012a60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012a64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a66:	4b11      	ldr	r3, [pc, #68]	; (8012aac <udp_new_port+0x6c>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	603b      	str	r3, [r7, #0]
 8012a6c:	e011      	b.n	8012a92 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	8a5a      	ldrh	r2, [r3, #18]
 8012a72:	4b0d      	ldr	r3, [pc, #52]	; (8012aa8 <udp_new_port+0x68>)
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d108      	bne.n	8012a8c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012a7a:	88fb      	ldrh	r3, [r7, #6]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	80fb      	strh	r3, [r7, #6]
 8012a80:	88fb      	ldrh	r3, [r7, #6]
 8012a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a86:	d3e0      	bcc.n	8012a4a <udp_new_port+0xa>
        return 0;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e007      	b.n	8012a9c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	603b      	str	r3, [r7, #0]
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1ea      	bne.n	8012a6e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a98:	4b03      	ldr	r3, [pc, #12]	; (8012aa8 <udp_new_port+0x68>)
 8012a9a:	881b      	ldrh	r3, [r3, #0]
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	370c      	adds	r7, #12
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bc80      	pop	{r7}
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop
 8012aa8:	20000044 	.word	0x20000044
 8012aac:	20008b88 	.word	0x20008b88

08012ab0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	b085      	sub	sp, #20
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	4613      	mov	r3, r2
 8012abc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012abe:	79fb      	ldrb	r3, [r7, #7]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d018      	beq.n	8012af6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d013      	beq.n	8012af2 <udp_input_local_match+0x42>
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00f      	beq.n	8012af2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ad2:	4b13      	ldr	r3, [pc, #76]	; (8012b20 <udp_input_local_match+0x70>)
 8012ad4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ada:	d00a      	beq.n	8012af2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	4b0f      	ldr	r3, [pc, #60]	; (8012b20 <udp_input_local_match+0x70>)
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	405a      	eors	r2, r3
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	3308      	adds	r3, #8
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d110      	bne.n	8012b14 <udp_input_local_match+0x64>
          return 1;
 8012af2:	2301      	movs	r3, #1
 8012af4:	e00f      	b.n	8012b16 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d009      	beq.n	8012b10 <udp_input_local_match+0x60>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d005      	beq.n	8012b10 <udp_input_local_match+0x60>
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	4b05      	ldr	r3, [pc, #20]	; (8012b20 <udp_input_local_match+0x70>)
 8012b0a:	695b      	ldr	r3, [r3, #20]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d101      	bne.n	8012b14 <udp_input_local_match+0x64>
      return 1;
 8012b10:	2301      	movs	r3, #1
 8012b12:	e000      	b.n	8012b16 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bc80      	pop	{r7}
 8012b1e:	4770      	bx	lr
 8012b20:	20005790 	.word	0x20005790

08012b24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b24:	b590      	push	{r4, r7, lr}
 8012b26:	b08d      	sub	sp, #52	; 0x34
 8012b28:	af02      	add	r7, sp, #8
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	895b      	ldrh	r3, [r3, #10]
 8012b36:	2b07      	cmp	r3, #7
 8012b38:	d803      	bhi.n	8012b42 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7fb f8aa 	bl	800dc94 <pbuf_free>
    goto end;
 8012b40:	e0c6      	b.n	8012cd0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012b48:	4b63      	ldr	r3, [pc, #396]	; (8012cd8 <udp_input+0x1b4>)
 8012b4a:	695a      	ldr	r2, [r3, #20]
 8012b4c:	4b62      	ldr	r3, [pc, #392]	; (8012cd8 <udp_input+0x1b4>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4619      	mov	r1, r3
 8012b52:	4610      	mov	r0, r2
 8012b54:	f003 fcea 	bl	801652c <ip4_addr_isbroadcast_u32>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	881b      	ldrh	r3, [r3, #0]
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7f9 ff88 	bl	800ca78 <lwip_htons>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	885b      	ldrh	r3, [r3, #2]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7f9 ff80 	bl	800ca78 <lwip_htons>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012b80:	2300      	movs	r3, #0
 8012b82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012b84:	2300      	movs	r3, #0
 8012b86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b88:	4b54      	ldr	r3, [pc, #336]	; (8012cdc <udp_input+0x1b8>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8012b8e:	e03b      	b.n	8012c08 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	8a5b      	ldrh	r3, [r3, #18]
 8012b94:	89fa      	ldrh	r2, [r7, #14]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d131      	bne.n	8012bfe <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012b9a:	7cfb      	ldrb	r3, [r7, #19]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	6839      	ldr	r1, [r7, #0]
 8012ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ba2:	f7ff ff85 	bl	8012ab0 <udp_input_local_match>
 8012ba6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d028      	beq.n	8012bfe <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bae:	7c1b      	ldrb	r3, [r3, #16]
 8012bb0:	f003 0304 	and.w	r3, r3, #4
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d104      	bne.n	8012bc2 <udp_input+0x9e>
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d101      	bne.n	8012bc2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc4:	8a9b      	ldrh	r3, [r3, #20]
 8012bc6:	8a3a      	ldrh	r2, [r7, #16]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d118      	bne.n	8012bfe <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d005      	beq.n	8012be0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd6:	685a      	ldr	r2, [r3, #4]
 8012bd8:	4b3f      	ldr	r3, [pc, #252]	; (8012cd8 <udp_input+0x1b4>)
 8012bda:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d10e      	bne.n	8012bfe <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d014      	beq.n	8012c10 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be8:	68da      	ldr	r2, [r3, #12]
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012bee:	4b3b      	ldr	r3, [pc, #236]	; (8012cdc <udp_input+0x1b8>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012bf6:	4a39      	ldr	r2, [pc, #228]	; (8012cdc <udp_input+0x1b8>)
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012bfc:	e008      	b.n	8012c10 <udp_input+0xec>
      }
    }

    prev = pcb;
 8012bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c00:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	627b      	str	r3, [r7, #36]	; 0x24
 8012c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d1c0      	bne.n	8012b90 <udp_input+0x6c>
 8012c0e:	e000      	b.n	8012c12 <udp_input+0xee>
        break;
 8012c10:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d101      	bne.n	8012c1c <udp_input+0xf8>
    pcb = uncon_pcb;
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <udp_input+0x104>
    for_us = 1;
 8012c22:	2301      	movs	r3, #1
 8012c24:	76fb      	strb	r3, [r7, #27]
 8012c26:	e00a      	b.n	8012c3e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	3304      	adds	r3, #4
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	4b2a      	ldr	r3, [pc, #168]	; (8012cd8 <udp_input+0x1b4>)
 8012c30:	695b      	ldr	r3, [r3, #20]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	bf0c      	ite	eq
 8012c36:	2301      	moveq	r3, #1
 8012c38:	2300      	movne	r3, #0
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012c3e:	7efb      	ldrb	r3, [r7, #27]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d042      	beq.n	8012cca <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012c44:	f06f 0107 	mvn.w	r1, #7
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7fa ffff 	bl	800dc4c <pbuf_header>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00a      	beq.n	8012c6a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012c54:	4b22      	ldr	r3, [pc, #136]	; (8012ce0 <udp_input+0x1bc>)
 8012c56:	f240 1255 	movw	r2, #341	; 0x155
 8012c5a:	4922      	ldr	r1, [pc, #136]	; (8012ce4 <udp_input+0x1c0>)
 8012c5c:	4822      	ldr	r0, [pc, #136]	; (8012ce8 <udp_input+0x1c4>)
 8012c5e:	f004 ff3d 	bl	8017adc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f7fb f816 	bl	800dc94 <pbuf_free>
      goto end;
 8012c68:	e032      	b.n	8012cd0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d012      	beq.n	8012c96 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	699b      	ldr	r3, [r3, #24]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00a      	beq.n	8012c8e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	699c      	ldr	r4, [r3, #24]
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	69d8      	ldr	r0, [r3, #28]
 8012c80:	8a3b      	ldrh	r3, [r7, #16]
 8012c82:	9300      	str	r3, [sp, #0]
 8012c84:	4b19      	ldr	r3, [pc, #100]	; (8012cec <udp_input+0x1c8>)
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012c8c:	e021      	b.n	8012cd2 <udp_input+0x1ae>
        pbuf_free(p);
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f7fb f800 	bl	800dc94 <pbuf_free>
        goto end;
 8012c94:	e01c      	b.n	8012cd0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c96:	7cfb      	ldrb	r3, [r7, #19]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d112      	bne.n	8012cc2 <udp_input+0x19e>
 8012c9c:	4b0e      	ldr	r3, [pc, #56]	; (8012cd8 <udp_input+0x1b4>)
 8012c9e:	695b      	ldr	r3, [r3, #20]
 8012ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ca4:	2be0      	cmp	r3, #224	; 0xe0
 8012ca6:	d00c      	beq.n	8012cc2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012ca8:	4b0b      	ldr	r3, [pc, #44]	; (8012cd8 <udp_input+0x1b4>)
 8012caa:	899b      	ldrh	r3, [r3, #12]
 8012cac:	3308      	adds	r3, #8
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	b21b      	sxth	r3, r3
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7fa ffdb 	bl	800dc70 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012cba:	2103      	movs	r1, #3
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f003 f915 	bl	8015eec <icmp_dest_unreach>
      pbuf_free(p);
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7fa ffe6 	bl	800dc94 <pbuf_free>
  return;
 8012cc8:	e003      	b.n	8012cd2 <udp_input+0x1ae>
    pbuf_free(p);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7fa ffe2 	bl	800dc94 <pbuf_free>
  return;
 8012cd0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012cd2:	372c      	adds	r7, #44	; 0x2c
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd90      	pop	{r4, r7, pc}
 8012cd8:	20005790 	.word	0x20005790
 8012cdc:	20008b88 	.word	0x20008b88
 8012ce0:	08019f64 	.word	0x08019f64
 8012ce4:	08019f94 	.word	0x08019f94
 8012ce8:	08019fa8 	.word	0x08019fa8
 8012cec:	200057a0 	.word	0x200057a0

08012cf0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b088      	sub	sp, #32
 8012cf4:	af02      	add	r7, sp, #8
 8012cf6:	60f8      	str	r0, [r7, #12]
 8012cf8:	60b9      	str	r1, [r7, #8]
 8012cfa:	607a      	str	r2, [r7, #4]
 8012cfc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d002      	beq.n	8012d0a <udp_sendto_if+0x1a>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d102      	bne.n	8012d10 <udp_sendto_if+0x20>
    return ERR_VAL;
 8012d0a:	f06f 0305 	mvn.w	r3, #5
 8012d0e:	e028      	b.n	8012d62 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d009      	beq.n	8012d2a <udp_sendto_if+0x3a>
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d005      	beq.n	8012d2a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d26:	2be0      	cmp	r3, #224	; 0xe0
 8012d28:	d103      	bne.n	8012d32 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8012d2a:	6a3b      	ldr	r3, [r7, #32]
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	617b      	str	r3, [r7, #20]
 8012d30:	e00b      	b.n	8012d4a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	6a3b      	ldr	r3, [r7, #32]
 8012d38:	3304      	adds	r3, #4
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d002      	beq.n	8012d46 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012d40:	f06f 0303 	mvn.w	r3, #3
 8012d44:	e00d      	b.n	8012d62 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012d4a:	887a      	ldrh	r2, [r7, #2]
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	9301      	str	r3, [sp, #4]
 8012d50:	6a3b      	ldr	r3, [r7, #32]
 8012d52:	9300      	str	r3, [sp, #0]
 8012d54:	4613      	mov	r3, r2
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	68b9      	ldr	r1, [r7, #8]
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f000 f806 	bl	8012d6c <udp_sendto_if_src>
 8012d60:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012d62:	4618      	mov	r0, r3
 8012d64:	3718      	adds	r7, #24
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}
	...

08012d6c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08c      	sub	sp, #48	; 0x30
 8012d70:	af04      	add	r7, sp, #16
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
 8012d78:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <udp_sendto_if_src+0x1a>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d102      	bne.n	8012d8c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012d86:	f06f 0305 	mvn.w	r3, #5
 8012d8a:	e07e      	b.n	8012e8a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	8a5b      	ldrh	r3, [r3, #18]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d10f      	bne.n	8012db4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012d94:	68f9      	ldr	r1, [r7, #12]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	8a5b      	ldrh	r3, [r3, #18]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 f87f 	bl	8012ea0 <udp_bind>
 8012da2:	4603      	mov	r3, r0
 8012da4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012da6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d002      	beq.n	8012db4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012dae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012db2:	e06a      	b.n	8012e8a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012db4:	2108      	movs	r1, #8
 8012db6:	68b8      	ldr	r0, [r7, #8]
 8012db8:	f7fa ff48 	bl	800dc4c <pbuf_header>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d014      	beq.n	8012dec <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	2108      	movs	r1, #8
 8012dc6:	2001      	movs	r0, #1
 8012dc8:	f7fa fbf2 	bl	800d5b0 <pbuf_alloc>
 8012dcc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012dce:	69fb      	ldr	r3, [r7, #28]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d102      	bne.n	8012dda <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dd8:	e057      	b.n	8012e8a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	891b      	ldrh	r3, [r3, #8]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012de2:	68b9      	ldr	r1, [r7, #8]
 8012de4:	69f8      	ldr	r0, [r7, #28]
 8012de6:	f7fb f877 	bl	800ded8 <pbuf_chain>
 8012dea:	e001      	b.n	8012df0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	895b      	ldrh	r3, [r3, #10]
 8012df4:	2b07      	cmp	r3, #7
 8012df6:	d806      	bhi.n	8012e06 <udp_sendto_if_src+0x9a>
 8012df8:	4b26      	ldr	r3, [pc, #152]	; (8012e94 <udp_sendto_if_src+0x128>)
 8012dfa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012dfe:	4926      	ldr	r1, [pc, #152]	; (8012e98 <udp_sendto_if_src+0x12c>)
 8012e00:	4826      	ldr	r0, [pc, #152]	; (8012e9c <udp_sendto_if_src+0x130>)
 8012e02:	f004 fe6b 	bl	8017adc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	8a5b      	ldrh	r3, [r3, #18]
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7f9 fe31 	bl	800ca78 <lwip_htons>
 8012e16:	4603      	mov	r3, r0
 8012e18:	461a      	mov	r2, r3
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012e1e:	887b      	ldrh	r3, [r7, #2]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7f9 fe29 	bl	800ca78 <lwip_htons>
 8012e26:	4603      	mov	r3, r0
 8012e28:	461a      	mov	r2, r3
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	2200      	movs	r2, #0
 8012e32:	719a      	strb	r2, [r3, #6]
 8012e34:	2200      	movs	r2, #0
 8012e36:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	891b      	ldrh	r3, [r3, #8]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7f9 fe1b 	bl	800ca78 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	461a      	mov	r2, r3
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012e4a:	2311      	movs	r3, #17
 8012e4c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	7a9b      	ldrb	r3, [r3, #10]
 8012e52:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	7a5b      	ldrb	r3, [r3, #9]
 8012e58:	7cb9      	ldrb	r1, [r7, #18]
 8012e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e5c:	9202      	str	r2, [sp, #8]
 8012e5e:	7cfa      	ldrb	r2, [r7, #19]
 8012e60:	9201      	str	r2, [sp, #4]
 8012e62:	9300      	str	r3, [sp, #0]
 8012e64:	460b      	mov	r3, r1
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e6a:	69f8      	ldr	r0, [r7, #28]
 8012e6c:	f003 fab6 	bl	80163dc <ip4_output_if_src>
 8012e70:	4603      	mov	r3, r0
 8012e72:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012e74:	69fa      	ldr	r2, [r7, #28]
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d004      	beq.n	8012e86 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8012e7c:	69f8      	ldr	r0, [r7, #28]
 8012e7e:	f7fa ff09 	bl	800dc94 <pbuf_free>
    q = NULL;
 8012e82:	2300      	movs	r3, #0
 8012e84:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012e86:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3720      	adds	r7, #32
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	08019f64 	.word	0x08019f64
 8012e98:	08019fd0 	.word	0x08019fd0
 8012e9c:	08019fa8 	.word	0x08019fa8

08012ea0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d101      	bne.n	8012eb8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012eb4:	4b30      	ldr	r3, [pc, #192]	; (8012f78 <udp_bind+0xd8>)
 8012eb6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d002      	beq.n	8012ec4 <udp_bind+0x24>
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d102      	bne.n	8012eca <udp_bind+0x2a>
    return ERR_VAL;
 8012ec4:	f06f 0305 	mvn.w	r3, #5
 8012ec8:	e052      	b.n	8012f70 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ece:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <udp_bind+0xdc>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	617b      	str	r3, [r7, #20]
 8012ed4:	e009      	b.n	8012eea <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d102      	bne.n	8012ee4 <udp_bind+0x44>
      rebind = 1;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8012ee2:	e005      	b.n	8012ef0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	617b      	str	r3, [r7, #20]
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1f2      	bne.n	8012ed6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012ef0:	88fb      	ldrh	r3, [r7, #6]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d109      	bne.n	8012f0a <udp_bind+0x6a>
    port = udp_new_port();
 8012ef6:	f7ff fda3 	bl	8012a40 <udp_new_port>
 8012efa:	4603      	mov	r3, r0
 8012efc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012efe:	88fb      	ldrh	r3, [r7, #6]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d11e      	bne.n	8012f42 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012f04:	f06f 0307 	mvn.w	r3, #7
 8012f08:	e032      	b.n	8012f70 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012f0a:	4b1c      	ldr	r3, [pc, #112]	; (8012f7c <udp_bind+0xdc>)
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	617b      	str	r3, [r7, #20]
 8012f10:	e014      	b.n	8012f3c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012f12:	68fa      	ldr	r2, [r7, #12]
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d00d      	beq.n	8012f36 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	8a5b      	ldrh	r3, [r3, #18]
 8012f1e:	88fa      	ldrh	r2, [r7, #6]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d108      	bne.n	8012f36 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d102      	bne.n	8012f36 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012f30:	f06f 0307 	mvn.w	r3, #7
 8012f34:	e01c      	b.n	8012f70 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	617b      	str	r3, [r7, #20]
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1e7      	bne.n	8012f12 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d002      	beq.n	8012f4e <udp_bind+0xae>
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	e000      	b.n	8012f50 <udp_bind+0xb0>
 8012f4e:	2300      	movs	r3, #0
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	88fa      	ldrh	r2, [r7, #6]
 8012f58:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012f5a:	7cfb      	ldrb	r3, [r7, #19]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d106      	bne.n	8012f6e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012f60:	4b06      	ldr	r3, [pc, #24]	; (8012f7c <udp_bind+0xdc>)
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012f68:	4a04      	ldr	r2, [pc, #16]	; (8012f7c <udp_bind+0xdc>)
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012f6e:	2300      	movs	r3, #0
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3718      	adds	r7, #24
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	0801ad08 	.word	0x0801ad08
 8012f7c:	20008b88 	.word	0x20008b88

08012f80 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b086      	sub	sp, #24
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d002      	beq.n	8012f9a <udp_connect+0x1a>
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d102      	bne.n	8012fa0 <udp_connect+0x20>
    return ERR_VAL;
 8012f9a:	f06f 0305 	mvn.w	r3, #5
 8012f9e:	e03e      	b.n	801301e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	8a5b      	ldrh	r3, [r3, #18]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10f      	bne.n	8012fc8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012fa8:	68f9      	ldr	r1, [r7, #12]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	8a5b      	ldrh	r3, [r3, #18]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f7ff ff75 	bl	8012ea0 <udp_bind>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012fba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d002      	beq.n	8012fc8 <udp_connect+0x48>
      return err;
 8012fc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012fc6:	e02a      	b.n	801301e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d002      	beq.n	8012fd4 <udp_connect+0x54>
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	e000      	b.n	8012fd6 <udp_connect+0x56>
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	68fa      	ldr	r2, [r7, #12]
 8012fd8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	88fa      	ldrh	r2, [r7, #6]
 8012fde:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	7c1b      	ldrb	r3, [r3, #16]
 8012fe4:	f043 0304 	orr.w	r3, r3, #4
 8012fe8:	b2da      	uxtb	r2, r3
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012fee:	4b0e      	ldr	r3, [pc, #56]	; (8013028 <udp_connect+0xa8>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	617b      	str	r3, [r7, #20]
 8012ff4:	e008      	b.n	8013008 <udp_connect+0x88>
    if (pcb == ipcb) {
 8012ff6:	68fa      	ldr	r2, [r7, #12]
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d101      	bne.n	8013002 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e00d      	b.n	801301e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	617b      	str	r3, [r7, #20]
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d1f3      	bne.n	8012ff6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801300e:	4b06      	ldr	r3, [pc, #24]	; (8013028 <udp_connect+0xa8>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013016:	4a04      	ldr	r2, [pc, #16]	; (8013028 <udp_connect+0xa8>)
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801301c:	2300      	movs	r3, #0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3718      	adds	r7, #24
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	20008b88 	.word	0x20008b88

0801302c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	68ba      	ldr	r2, [r7, #8]
 801303c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	61da      	str	r2, [r3, #28]
}
 8013044:	bf00      	nop
 8013046:	3714      	adds	r7, #20
 8013048:	46bd      	mov	sp, r7
 801304a:	bc80      	pop	{r7}
 801304c:	4770      	bx	lr
	...

08013050 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013058:	4b15      	ldr	r3, [pc, #84]	; (80130b0 <udp_remove+0x60>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	687a      	ldr	r2, [r7, #4]
 801305e:	429a      	cmp	r2, r3
 8013060:	d105      	bne.n	801306e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013062:	4b13      	ldr	r3, [pc, #76]	; (80130b0 <udp_remove+0x60>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	4a11      	ldr	r2, [pc, #68]	; (80130b0 <udp_remove+0x60>)
 801306a:	6013      	str	r3, [r2, #0]
 801306c:	e017      	b.n	801309e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801306e:	4b10      	ldr	r3, [pc, #64]	; (80130b0 <udp_remove+0x60>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	60fb      	str	r3, [r7, #12]
 8013074:	e010      	b.n	8013098 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d009      	beq.n	8013092 <udp_remove+0x42>
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	429a      	cmp	r2, r3
 8013086:	d104      	bne.n	8013092 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	68da      	ldr	r2, [r3, #12]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	60da      	str	r2, [r3, #12]
        break;
 8013090:	e005      	b.n	801309e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	60fb      	str	r3, [r7, #12]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d1eb      	bne.n	8013076 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801309e:	6879      	ldr	r1, [r7, #4]
 80130a0:	2000      	movs	r0, #0
 80130a2:	f7fa f8dd 	bl	800d260 <memp_free>
}
 80130a6:	bf00      	nop
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	20008b88 	.word	0x20008b88

080130b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80130ba:	2000      	movs	r0, #0
 80130bc:	f7fa f884 	bl	800d1c8 <memp_malloc>
 80130c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d007      	beq.n	80130d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80130c8:	2220      	movs	r2, #32
 80130ca:	2100      	movs	r1, #0
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f004 fc57 	bl	8017980 <memset>
    pcb->ttl = UDP_TTL;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	22ff      	movs	r2, #255	; 0xff
 80130d6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80130d8:	687b      	ldr	r3, [r7, #4]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}
	...

080130e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01e      	beq.n	8013132 <udp_netif_ip_addr_changed+0x4e>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d01a      	beq.n	8013132 <udp_netif_ip_addr_changed+0x4e>
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d017      	beq.n	8013132 <udp_netif_ip_addr_changed+0x4e>
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d013      	beq.n	8013132 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801310a:	4b0c      	ldr	r3, [pc, #48]	; (801313c <udp_netif_ip_addr_changed+0x58>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	60fb      	str	r3, [r7, #12]
 8013110:	e00c      	b.n	801312c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	429a      	cmp	r2, r3
 801311c:	d103      	bne.n	8013126 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	60fb      	str	r3, [r7, #12]
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d1ef      	bne.n	8013112 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013132:	bf00      	nop
 8013134:	3714      	adds	r7, #20
 8013136:	46bd      	mov	sp, r7
 8013138:	bc80      	pop	{r7}
 801313a:	4770      	bx	lr
 801313c:	20008b88 	.word	0x20008b88

08013140 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013144:	4b20      	ldr	r3, [pc, #128]	; (80131c8 <dhcp_inc_pcb_refcount+0x88>)
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d133      	bne.n	80131b4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801314c:	4b1f      	ldr	r3, [pc, #124]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d005      	beq.n	8013160 <dhcp_inc_pcb_refcount+0x20>
 8013154:	4b1e      	ldr	r3, [pc, #120]	; (80131d0 <dhcp_inc_pcb_refcount+0x90>)
 8013156:	22d9      	movs	r2, #217	; 0xd9
 8013158:	491e      	ldr	r1, [pc, #120]	; (80131d4 <dhcp_inc_pcb_refcount+0x94>)
 801315a:	481f      	ldr	r0, [pc, #124]	; (80131d8 <dhcp_inc_pcb_refcount+0x98>)
 801315c:	f004 fcbe 	bl	8017adc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013160:	f7ff ffa8 	bl	80130b4 <udp_new>
 8013164:	4602      	mov	r2, r0
 8013166:	4b19      	ldr	r3, [pc, #100]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 8013168:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801316a:	4b18      	ldr	r3, [pc, #96]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d102      	bne.n	8013178 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013176:	e024      	b.n	80131c2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013178:	4b14      	ldr	r3, [pc, #80]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	7a1a      	ldrb	r2, [r3, #8]
 801317e:	4b13      	ldr	r3, [pc, #76]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f042 0220 	orr.w	r2, r2, #32
 8013186:	b2d2      	uxtb	r2, r2
 8013188:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801318a:	4b10      	ldr	r3, [pc, #64]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2244      	movs	r2, #68	; 0x44
 8013190:	4912      	ldr	r1, [pc, #72]	; (80131dc <dhcp_inc_pcb_refcount+0x9c>)
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff fe84 	bl	8012ea0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8013198:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2243      	movs	r2, #67	; 0x43
 801319e:	490f      	ldr	r1, [pc, #60]	; (80131dc <dhcp_inc_pcb_refcount+0x9c>)
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7ff feed 	bl	8012f80 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80131a6:	4b09      	ldr	r3, [pc, #36]	; (80131cc <dhcp_inc_pcb_refcount+0x8c>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2200      	movs	r2, #0
 80131ac:	490c      	ldr	r1, [pc, #48]	; (80131e0 <dhcp_inc_pcb_refcount+0xa0>)
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7ff ff3c 	bl	801302c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80131b4:	4b04      	ldr	r3, [pc, #16]	; (80131c8 <dhcp_inc_pcb_refcount+0x88>)
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	3301      	adds	r3, #1
 80131ba:	b2da      	uxtb	r2, r3
 80131bc:	4b02      	ldr	r3, [pc, #8]	; (80131c8 <dhcp_inc_pcb_refcount+0x88>)
 80131be:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80131c0:	2300      	movs	r3, #0
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20000180 	.word	0x20000180
 80131cc:	2000017c 	.word	0x2000017c
 80131d0:	0801a000 	.word	0x0801a000
 80131d4:	0801a038 	.word	0x0801a038
 80131d8:	0801a060 	.word	0x0801a060
 80131dc:	0801ad08 	.word	0x0801ad08
 80131e0:	0801489d 	.word	0x0801489d

080131e4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80131e8:	4b0e      	ldr	r3, [pc, #56]	; (8013224 <dhcp_dec_pcb_refcount+0x40>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d105      	bne.n	80131fc <dhcp_dec_pcb_refcount+0x18>
 80131f0:	4b0d      	ldr	r3, [pc, #52]	; (8013228 <dhcp_dec_pcb_refcount+0x44>)
 80131f2:	22f3      	movs	r2, #243	; 0xf3
 80131f4:	490d      	ldr	r1, [pc, #52]	; (801322c <dhcp_dec_pcb_refcount+0x48>)
 80131f6:	480e      	ldr	r0, [pc, #56]	; (8013230 <dhcp_dec_pcb_refcount+0x4c>)
 80131f8:	f004 fc70 	bl	8017adc <iprintf>
  dhcp_pcb_refcount--;
 80131fc:	4b09      	ldr	r3, [pc, #36]	; (8013224 <dhcp_dec_pcb_refcount+0x40>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	3b01      	subs	r3, #1
 8013202:	b2da      	uxtb	r2, r3
 8013204:	4b07      	ldr	r3, [pc, #28]	; (8013224 <dhcp_dec_pcb_refcount+0x40>)
 8013206:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013208:	4b06      	ldr	r3, [pc, #24]	; (8013224 <dhcp_dec_pcb_refcount+0x40>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d107      	bne.n	8013220 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013210:	4b08      	ldr	r3, [pc, #32]	; (8013234 <dhcp_dec_pcb_refcount+0x50>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff ff1b 	bl	8013050 <udp_remove>
    dhcp_pcb = NULL;
 801321a:	4b06      	ldr	r3, [pc, #24]	; (8013234 <dhcp_dec_pcb_refcount+0x50>)
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
  }
}
 8013220:	bf00      	nop
 8013222:	bd80      	pop	{r7, pc}
 8013224:	20000180 	.word	0x20000180
 8013228:	0801a000 	.word	0x0801a000
 801322c:	0801a088 	.word	0x0801a088
 8013230:	0801a060 	.word	0x0801a060
 8013234:	2000017c 	.word	0x2000017c

08013238 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013244:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013246:	210c      	movs	r1, #12
 8013248:	68f8      	ldr	r0, [r7, #12]
 801324a:	f000 ff85 	bl	8014158 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801324e:	4b06      	ldr	r3, [pc, #24]	; (8013268 <dhcp_handle_nak+0x30>)
 8013250:	4a05      	ldr	r2, [pc, #20]	; (8013268 <dhcp_handle_nak+0x30>)
 8013252:	4905      	ldr	r1, [pc, #20]	; (8013268 <dhcp_handle_nak+0x30>)
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7fa f891 	bl	800d37c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f000 fbb6 	bl	80139cc <dhcp_discover>
}
 8013260:	bf00      	nop
 8013262:	3710      	adds	r7, #16
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	0801ad08 	.word	0x0801ad08

0801326c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b084      	sub	sp, #16
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013278:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801327a:	2108      	movs	r1, #8
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f000 ff6b 	bl	8014158 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	3328      	adds	r3, #40	; 0x28
 8013286:	2200      	movs	r2, #0
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f002 fb1e 	bl	80158cc <etharp_query>
 8013290:	4603      	mov	r3, r0
 8013292:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	7a9b      	ldrb	r3, [r3, #10]
 8013298:	2bff      	cmp	r3, #255	; 0xff
 801329a:	d005      	beq.n	80132a8 <dhcp_check+0x3c>
    dhcp->tries++;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	7a9b      	ldrb	r3, [r3, #10]
 80132a0:	3301      	adds	r3, #1
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80132a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80132ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80132ae:	893b      	ldrh	r3, [r7, #8]
 80132b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80132b4:	4a06      	ldr	r2, [pc, #24]	; (80132d0 <dhcp_check+0x64>)
 80132b6:	fb82 1203 	smull	r1, r2, r2, r3
 80132ba:	1152      	asrs	r2, r2, #5
 80132bc:	17db      	asrs	r3, r3, #31
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80132c6:	bf00      	nop
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	10624dd3 	.word	0x10624dd3

080132d4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80132e2:	4b0c      	ldr	r3, [pc, #48]	; (8013314 <dhcp_handle_offer+0x40>)
 80132e4:	789b      	ldrb	r3, [r3, #2]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00f      	beq.n	801330a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80132ea:	4b0b      	ldr	r3, [pc, #44]	; (8013318 <dhcp_handle_offer+0x44>)
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f9 fbcf 	bl	800ca92 <lwip_htonl>
 80132f4:	4602      	mov	r2, r0
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	691a      	ldr	r2, [r3, #16]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 f809 	bl	801331c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801330a:	bf00      	nop
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	20008b8c 	.word	0x20008b8c
 8013318:	20008b94 	.word	0x20008b94

0801331c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b088      	sub	sp, #32
 8013320:	af02      	add	r7, sp, #8
 8013322:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013328:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801332a:	2101      	movs	r1, #1
 801332c:	6938      	ldr	r0, [r7, #16]
 801332e:	f000 ff13 	bl	8014158 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013332:	2203      	movs	r2, #3
 8013334:	6939      	ldr	r1, [r7, #16]
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f001 fb94 	bl	8014a64 <dhcp_create_msg>
 801333c:	4603      	mov	r3, r0
 801333e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d159      	bne.n	80133fc <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013348:	2202      	movs	r2, #2
 801334a:	2139      	movs	r1, #57	; 0x39
 801334c:	6938      	ldr	r0, [r7, #16]
 801334e:	f000 ff1d 	bl	801418c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013356:	4619      	mov	r1, r3
 8013358:	6938      	ldr	r0, [r7, #16]
 801335a:	f000 ff79 	bl	8014250 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801335e:	2204      	movs	r2, #4
 8013360:	2132      	movs	r1, #50	; 0x32
 8013362:	6938      	ldr	r0, [r7, #16]
 8013364:	f000 ff12 	bl	801418c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801336c:	4618      	mov	r0, r3
 801336e:	f7f9 fb90 	bl	800ca92 <lwip_htonl>
 8013372:	4603      	mov	r3, r0
 8013374:	4619      	mov	r1, r3
 8013376:	6938      	ldr	r0, [r7, #16]
 8013378:	f000 ffa4 	bl	80142c4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801337c:	2204      	movs	r2, #4
 801337e:	2136      	movs	r1, #54	; 0x36
 8013380:	6938      	ldr	r0, [r7, #16]
 8013382:	f000 ff03 	bl	801418c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338a:	4618      	mov	r0, r3
 801338c:	f7f9 fb81 	bl	800ca92 <lwip_htonl>
 8013390:	4603      	mov	r3, r0
 8013392:	4619      	mov	r1, r3
 8013394:	6938      	ldr	r0, [r7, #16]
 8013396:	f000 ff95 	bl	80142c4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801339a:	2203      	movs	r2, #3
 801339c:	2137      	movs	r1, #55	; 0x37
 801339e:	6938      	ldr	r0, [r7, #16]
 80133a0:	f000 fef4 	bl	801418c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133a4:	2300      	movs	r3, #0
 80133a6:	75fb      	strb	r3, [r7, #23]
 80133a8:	e009      	b.n	80133be <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80133aa:	7dfb      	ldrb	r3, [r7, #23]
 80133ac:	4a29      	ldr	r2, [pc, #164]	; (8013454 <dhcp_select+0x138>)
 80133ae:	5cd3      	ldrb	r3, [r2, r3]
 80133b0:	4619      	mov	r1, r3
 80133b2:	6938      	ldr	r0, [r7, #16]
 80133b4:	f000 ff24 	bl	8014200 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133b8:	7dfb      	ldrb	r3, [r7, #23]
 80133ba:	3301      	adds	r3, #1
 80133bc:	75fb      	strb	r3, [r7, #23]
 80133be:	7dfb      	ldrb	r3, [r7, #23]
 80133c0:	2b02      	cmp	r3, #2
 80133c2:	d9f2      	bls.n	80133aa <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80133c4:	6938      	ldr	r0, [r7, #16]
 80133c6:	f001 fcf1 	bl	8014dac <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	68da      	ldr	r2, [r3, #12]
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	8a9b      	ldrh	r3, [r3, #20]
 80133d2:	33f0      	adds	r3, #240	; 0xf0
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	4619      	mov	r1, r3
 80133d8:	4610      	mov	r0, r2
 80133da:	f7fa fae7 	bl	800d9ac <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80133de:	4b1e      	ldr	r3, [pc, #120]	; (8013458 <dhcp_select+0x13c>)
 80133e0:	6818      	ldr	r0, [r3, #0]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	68d9      	ldr	r1, [r3, #12]
 80133e6:	4b1d      	ldr	r3, [pc, #116]	; (801345c <dhcp_select+0x140>)
 80133e8:	9301      	str	r3, [sp, #4]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	2343      	movs	r3, #67	; 0x43
 80133f0:	4a1b      	ldr	r2, [pc, #108]	; (8013460 <dhcp_select+0x144>)
 80133f2:	f7ff fcbb 	bl	8012d6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80133f6:	6938      	ldr	r0, [r7, #16]
 80133f8:	f001 fc96 	bl	8014d28 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	7a9b      	ldrb	r3, [r3, #10]
 8013400:	2bff      	cmp	r3, #255	; 0xff
 8013402:	d005      	beq.n	8013410 <dhcp_select+0xf4>
    dhcp->tries++;
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	7a9b      	ldrb	r3, [r3, #10]
 8013408:	3301      	adds	r3, #1
 801340a:	b2da      	uxtb	r2, r3
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	7a9b      	ldrb	r3, [r3, #10]
 8013414:	2b05      	cmp	r3, #5
 8013416:	d807      	bhi.n	8013428 <dhcp_select+0x10c>
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	7a9b      	ldrb	r3, [r3, #10]
 801341c:	461a      	mov	r2, r3
 801341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013422:	4093      	lsls	r3, r2
 8013424:	b29b      	uxth	r3, r3
 8013426:	e001      	b.n	801342c <dhcp_select+0x110>
 8013428:	f64e 2360 	movw	r3, #60000	; 0xea60
 801342c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801342e:	89bb      	ldrh	r3, [r7, #12]
 8013430:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013434:	4a0b      	ldr	r2, [pc, #44]	; (8013464 <dhcp_select+0x148>)
 8013436:	fb82 1203 	smull	r1, r2, r2, r3
 801343a:	1152      	asrs	r2, r2, #5
 801343c:	17db      	asrs	r3, r3, #31
 801343e:	1ad3      	subs	r3, r2, r3
 8013440:	b29a      	uxth	r2, r3
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	20000048 	.word	0x20000048
 8013458:	2000017c 	.word	0x2000017c
 801345c:	0801ad08 	.word	0x0801ad08
 8013460:	0801ad0c 	.word	0x0801ad0c
 8013464:	10624dd3 	.word	0x10624dd3

08013468 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801346e:	4b27      	ldr	r3, [pc, #156]	; (801350c <dhcp_coarse_tmr+0xa4>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8013474:	e042      	b.n	80134fc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d039      	beq.n	80134f6 <dhcp_coarse_tmr+0x8e>
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	7a5b      	ldrb	r3, [r3, #9]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d035      	beq.n	80134f6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801348e:	2b00      	cmp	r3, #0
 8013490:	d012      	beq.n	80134b8 <dhcp_coarse_tmr+0x50>
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	8c1b      	ldrh	r3, [r3, #32]
 8013496:	3301      	adds	r3, #1
 8013498:	b29a      	uxth	r2, r3
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	841a      	strh	r2, [r3, #32]
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	8c1a      	ldrh	r2, [r3, #32]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d106      	bne.n	80134b8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f000 fd94 	bl	8013fd8 <dhcp_release>
        dhcp_discover(netif);
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f000 fa8b 	bl	80139cc <dhcp_discover>
 80134b6:	e01e      	b.n	80134f6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	8bdb      	ldrh	r3, [r3, #30]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d00b      	beq.n	80134d8 <dhcp_coarse_tmr+0x70>
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	8bdb      	ldrh	r3, [r3, #30]
 80134c4:	1e5a      	subs	r2, r3, #1
 80134c6:	b291      	uxth	r1, r2
 80134c8:	683a      	ldr	r2, [r7, #0]
 80134ca:	83d1      	strh	r1, [r2, #30]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d103      	bne.n	80134d8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80134d0:	6878      	ldr	r0, [r7, #4]
 80134d2:	f000 f8c6 	bl	8013662 <dhcp_t2_timeout>
 80134d6:	e00e      	b.n	80134f6 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	8b9b      	ldrh	r3, [r3, #28]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d00a      	beq.n	80134f6 <dhcp_coarse_tmr+0x8e>
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	8b9b      	ldrh	r3, [r3, #28]
 80134e4:	1e5a      	subs	r2, r3, #1
 80134e6:	b291      	uxth	r1, r2
 80134e8:	683a      	ldr	r2, [r7, #0]
 80134ea:	8391      	strh	r1, [r2, #28]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d102      	bne.n	80134f6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f000 f888 	bl	8013606 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1b9      	bne.n	8013476 <dhcp_coarse_tmr+0xe>
  }
}
 8013502:	bf00      	nop
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	20008b60 	.word	0x20008b60

08013510 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8013516:	4b16      	ldr	r3, [pc, #88]	; (8013570 <dhcp_fine_tmr+0x60>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801351c:	e020      	b.n	8013560 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013522:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d017      	beq.n	801355a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	8adb      	ldrh	r3, [r3, #22]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d906      	bls.n	8013540 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	8adb      	ldrh	r3, [r3, #22]
 8013536:	3b01      	subs	r3, #1
 8013538:	b29a      	uxth	r2, r3
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	82da      	strh	r2, [r3, #22]
 801353e:	e00c      	b.n	801355a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	8adb      	ldrh	r3, [r3, #22]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d108      	bne.n	801355a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	8adb      	ldrh	r3, [r3, #22]
 801354c:	3b01      	subs	r3, #1
 801354e:	b29a      	uxth	r2, r3
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	f000 f80d 	bl	8013574 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d1db      	bne.n	801351e <dhcp_fine_tmr+0xe>
  }
}
 8013566:	bf00      	nop
 8013568:	3708      	adds	r7, #8
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	20008b60 	.word	0x20008b60

08013574 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013580:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	7a5b      	ldrb	r3, [r3, #9]
 8013586:	2b0c      	cmp	r3, #12
 8013588:	d003      	beq.n	8013592 <dhcp_timeout+0x1e>
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	7a5b      	ldrb	r3, [r3, #9]
 801358e:	2b06      	cmp	r3, #6
 8013590:	d103      	bne.n	801359a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f000 fa1a 	bl	80139cc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013598:	e031      	b.n	80135fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	7a5b      	ldrb	r3, [r3, #9]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d10e      	bne.n	80135c0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	7a9b      	ldrb	r3, [r3, #10]
 80135a6:	2b05      	cmp	r3, #5
 80135a8:	d803      	bhi.n	80135b2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7ff feb6 	bl	801331c <dhcp_select>
}
 80135b0:	e025      	b.n	80135fe <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 fd10 	bl	8013fd8 <dhcp_release>
      dhcp_discover(netif);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 fa07 	bl	80139cc <dhcp_discover>
}
 80135be:	e01e      	b.n	80135fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	7a5b      	ldrb	r3, [r3, #9]
 80135c4:	2b08      	cmp	r3, #8
 80135c6:	d10b      	bne.n	80135e0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	7a9b      	ldrb	r3, [r3, #10]
 80135cc:	2b01      	cmp	r3, #1
 80135ce:	d803      	bhi.n	80135d8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f7ff fe4b 	bl	801326c <dhcp_check>
}
 80135d6:	e012      	b.n	80135fe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 fa83 	bl	8013ae4 <dhcp_bind>
}
 80135de:	e00e      	b.n	80135fe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	7a5b      	ldrb	r3, [r3, #9]
 80135e4:	2b03      	cmp	r3, #3
 80135e6:	d10a      	bne.n	80135fe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	7a9b      	ldrb	r3, [r3, #10]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d803      	bhi.n	80135f8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f000 fc5d 	bl	8013eb0 <dhcp_reboot>
}
 80135f6:	e002      	b.n	80135fe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f000 f9e7 	bl	80139cc <dhcp_discover>
}
 80135fe:	bf00      	nop
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013606:	b580      	push	{r7, lr}
 8013608:	b084      	sub	sp, #16
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013612:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	7a5b      	ldrb	r3, [r3, #9]
 8013618:	2b01      	cmp	r3, #1
 801361a:	d007      	beq.n	801362c <dhcp_t1_timeout+0x26>
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	7a5b      	ldrb	r3, [r3, #9]
 8013620:	2b0a      	cmp	r3, #10
 8013622:	d003      	beq.n	801362c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013628:	2b05      	cmp	r3, #5
 801362a:	d116      	bne.n	801365a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f000 fb33 	bl	8013c98 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	8b5b      	ldrh	r3, [r3, #26]
 8013636:	461a      	mov	r2, r3
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	8c1b      	ldrh	r3, [r3, #32]
 801363c:	1ad3      	subs	r3, r2, r3
 801363e:	2b01      	cmp	r3, #1
 8013640:	dd0b      	ble.n	801365a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	8b5b      	ldrh	r3, [r3, #26]
 8013646:	461a      	mov	r2, r3
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	8c1b      	ldrh	r3, [r3, #32]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	0fda      	lsrs	r2, r3, #31
 8013650:	4413      	add	r3, r2
 8013652:	105b      	asrs	r3, r3, #1
 8013654:	b29a      	uxth	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801365a:	bf00      	nop
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}

08013662 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013662:	b580      	push	{r7, lr}
 8013664:	b084      	sub	sp, #16
 8013666:	af00      	add	r7, sp, #0
 8013668:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	7a5b      	ldrb	r3, [r3, #9]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d00b      	beq.n	8013690 <dhcp_t2_timeout+0x2e>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	7a5b      	ldrb	r3, [r3, #9]
 801367c:	2b0a      	cmp	r3, #10
 801367e:	d007      	beq.n	8013690 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013684:	2b05      	cmp	r3, #5
 8013686:	d003      	beq.n	8013690 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	7a5b      	ldrb	r3, [r3, #9]
 801368c:	2b04      	cmp	r3, #4
 801368e:	d116      	bne.n	80136be <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f000 fb87 	bl	8013da4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801369a:	461a      	mov	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	8c1b      	ldrh	r3, [r3, #32]
 80136a0:	1ad3      	subs	r3, r2, r3
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	dd0b      	ble.n	80136be <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80136aa:	461a      	mov	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	8c1b      	ldrh	r3, [r3, #32]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	0fda      	lsrs	r2, r3, #31
 80136b4:	4413      	add	r3, r2
 80136b6:	105b      	asrs	r3, r3, #1
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	83da      	strh	r2, [r3, #30]
    }
  }
}
 80136be:	bf00      	nop
 80136c0:	3710      	adds	r7, #16
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
	...

080136c8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b084      	sub	sp, #16
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d4:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2200      	movs	r2, #0
 80136da:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2200      	movs	r2, #0
 80136e0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80136e2:	4b27      	ldr	r3, [pc, #156]	; (8013780 <dhcp_handle_ack+0xb8>)
 80136e4:	78db      	ldrb	r3, [r3, #3]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d003      	beq.n	80136f2 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80136ea:	4b26      	ldr	r3, [pc, #152]	; (8013784 <dhcp_handle_ack+0xbc>)
 80136ec:	68da      	ldr	r2, [r3, #12]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80136f2:	4b23      	ldr	r3, [pc, #140]	; (8013780 <dhcp_handle_ack+0xb8>)
 80136f4:	791b      	ldrb	r3, [r3, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d004      	beq.n	8013704 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80136fa:	4b22      	ldr	r3, [pc, #136]	; (8013784 <dhcp_handle_ack+0xbc>)
 80136fc:	691a      	ldr	r2, [r3, #16]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	639a      	str	r2, [r3, #56]	; 0x38
 8013702:	e004      	b.n	801370e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013708:	085a      	lsrs	r2, r3, #1
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801370e:	4b1c      	ldr	r3, [pc, #112]	; (8013780 <dhcp_handle_ack+0xb8>)
 8013710:	795b      	ldrb	r3, [r3, #5]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013716:	4b1b      	ldr	r3, [pc, #108]	; (8013784 <dhcp_handle_ack+0xbc>)
 8013718:	695a      	ldr	r2, [r3, #20]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	63da      	str	r2, [r3, #60]	; 0x3c
 801371e:	e007      	b.n	8013730 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013724:	4613      	mov	r3, r2
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	1a9b      	subs	r3, r3, r2
 801372a:	08da      	lsrs	r2, r3, #3
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	691a      	ldr	r2, [r3, #16]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801373a:	4b11      	ldr	r3, [pc, #68]	; (8013780 <dhcp_handle_ack+0xb8>)
 801373c:	799b      	ldrb	r3, [r3, #6]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d00b      	beq.n	801375a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013742:	4b10      	ldr	r3, [pc, #64]	; (8013784 <dhcp_handle_ack+0xbc>)
 8013744:	699b      	ldr	r3, [r3, #24]
 8013746:	4618      	mov	r0, r3
 8013748:	f7f9 f9a3 	bl	800ca92 <lwip_htonl>
 801374c:	4602      	mov	r2, r0
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2201      	movs	r2, #1
 8013756:	72da      	strb	r2, [r3, #11]
 8013758:	e002      	b.n	8013760 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013760:	4b07      	ldr	r3, [pc, #28]	; (8013780 <dhcp_handle_ack+0xb8>)
 8013762:	79db      	ldrb	r3, [r3, #7]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d007      	beq.n	8013778 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013768:	4b06      	ldr	r3, [pc, #24]	; (8013784 <dhcp_handle_ack+0xbc>)
 801376a:	69db      	ldr	r3, [r3, #28]
 801376c:	4618      	mov	r0, r3
 801376e:	f7f9 f990 	bl	800ca92 <lwip_htonl>
 8013772:	4602      	mov	r2, r0
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	20008b8c 	.word	0x20008b8c
 8013784:	20008b94 	.word	0x20008b94

08013788 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d109      	bne.n	80137aa <dhcp_start+0x22>
 8013796:	4b3c      	ldr	r3, [pc, #240]	; (8013888 <dhcp_start+0x100>)
 8013798:	f240 22d6 	movw	r2, #726	; 0x2d6
 801379c:	493b      	ldr	r1, [pc, #236]	; (801388c <dhcp_start+0x104>)
 801379e:	483c      	ldr	r0, [pc, #240]	; (8013890 <dhcp_start+0x108>)
 80137a0:	f004 f99c 	bl	8017adc <iprintf>
 80137a4:	f06f 030f 	mvn.w	r3, #15
 80137a8:	e069      	b.n	801387e <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d109      	bne.n	80137cc <dhcp_start+0x44>
 80137b8:	4b33      	ldr	r3, [pc, #204]	; (8013888 <dhcp_start+0x100>)
 80137ba:	f240 22d7 	movw	r2, #727	; 0x2d7
 80137be:	4935      	ldr	r1, [pc, #212]	; (8013894 <dhcp_start+0x10c>)
 80137c0:	4833      	ldr	r0, [pc, #204]	; (8013890 <dhcp_start+0x108>)
 80137c2:	f004 f98b 	bl	8017adc <iprintf>
 80137c6:	f06f 030f 	mvn.w	r3, #15
 80137ca:	e058      	b.n	801387e <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80137d6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80137da:	d202      	bcs.n	80137e2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80137dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137e0:	e04d      	b.n	801387e <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10d      	bne.n	8013804 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80137e8:	2040      	movs	r0, #64	; 0x40
 80137ea:	f7f9 fb91 	bl	800cf10 <mem_malloc>
 80137ee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d102      	bne.n	80137fc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80137f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137fa:	e040      	b.n	801387e <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	625a      	str	r2, [r3, #36]	; 0x24
 8013802:	e01b      	b.n	801383c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d006      	beq.n	801381a <dhcp_start+0x92>
 801380c:	4b1e      	ldr	r3, [pc, #120]	; (8013888 <dhcp_start+0x100>)
 801380e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8013812:	4921      	ldr	r1, [pc, #132]	; (8013898 <dhcp_start+0x110>)
 8013814:	481e      	ldr	r0, [pc, #120]	; (8013890 <dhcp_start+0x108>)
 8013816:	f004 f961 	bl	8017adc <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d006      	beq.n	8013830 <dhcp_start+0xa8>
 8013822:	4b19      	ldr	r3, [pc, #100]	; (8013888 <dhcp_start+0x100>)
 8013824:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013828:	491c      	ldr	r1, [pc, #112]	; (801389c <dhcp_start+0x114>)
 801382a:	4819      	ldr	r0, [pc, #100]	; (8013890 <dhcp_start+0x108>)
 801382c:	f004 f956 	bl	8017adc <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	7a1b      	ldrb	r3, [r3, #8]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d001      	beq.n	801383c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013838:	f7ff fcd4 	bl	80131e4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801383c:	2240      	movs	r2, #64	; 0x40
 801383e:	2100      	movs	r1, #0
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f004 f89d 	bl	8017980 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013846:	f7ff fc7b 	bl	8013140 <dhcp_inc_pcb_refcount>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d002      	beq.n	8013856 <dhcp_start+0xce>
    return ERR_MEM;
 8013850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013854:	e013      	b.n	801387e <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	2201      	movs	r2, #1
 801385a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 f8b5 	bl	80139cc <dhcp_discover>
 8013862:	4603      	mov	r3, r0
 8013864:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013866:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d005      	beq.n	801387a <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 fc3a 	bl	80140e8 <dhcp_stop>
    return ERR_MEM;
 8013874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013878:	e001      	b.n	801387e <dhcp_start+0xf6>
  }
  return result;
 801387a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801387e:	4618      	mov	r0, r3
 8013880:	3710      	adds	r7, #16
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	0801a000 	.word	0x0801a000
 801388c:	0801a0ac 	.word	0x0801a0ac
 8013890:	0801a060 	.word	0x0801a060
 8013894:	0801a0f0 	.word	0x0801a0f0
 8013898:	0801a114 	.word	0x0801a114
 801389c:	0801a12c 	.word	0x0801a12c

080138a0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d107      	bne.n	80138c0 <dhcp_arp_reply+0x20>
 80138b0:	4b0e      	ldr	r3, [pc, #56]	; (80138ec <dhcp_arp_reply+0x4c>)
 80138b2:	f240 327b 	movw	r2, #891	; 0x37b
 80138b6:	490e      	ldr	r1, [pc, #56]	; (80138f0 <dhcp_arp_reply+0x50>)
 80138b8:	480e      	ldr	r0, [pc, #56]	; (80138f4 <dhcp_arp_reply+0x54>)
 80138ba:	f004 f90f 	bl	8017adc <iprintf>
 80138be:	e012      	b.n	80138e6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d00c      	beq.n	80138e6 <dhcp_arp_reply+0x46>
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	7a5b      	ldrb	r3, [r3, #9]
 80138d0:	2b08      	cmp	r3, #8
 80138d2:	d108      	bne.n	80138e6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138dc:	429a      	cmp	r2, r3
 80138de:	d102      	bne.n	80138e6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 f809 	bl	80138f8 <dhcp_decline>
    }
  }
}
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	0801a000 	.word	0x0801a000
 80138f0:	0801a0ac 	.word	0x0801a0ac
 80138f4:	0801a060 	.word	0x0801a060

080138f8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b086      	sub	sp, #24
 80138fc:	af02      	add	r7, sp, #8
 80138fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013904:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8013906:	2300      	movs	r3, #0
 8013908:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801390a:	210c      	movs	r1, #12
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f000 fc23 	bl	8014158 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8013912:	2204      	movs	r2, #4
 8013914:	68f9      	ldr	r1, [r7, #12]
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f001 f8a4 	bl	8014a64 <dhcp_create_msg>
 801391c:	4603      	mov	r3, r0
 801391e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8013920:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d12a      	bne.n	801397e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013928:	2204      	movs	r2, #4
 801392a:	2132      	movs	r1, #50	; 0x32
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f000 fc2d 	bl	801418c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013936:	4618      	mov	r0, r3
 8013938:	f7f9 f8ab 	bl	800ca92 <lwip_htonl>
 801393c:	4603      	mov	r3, r0
 801393e:	4619      	mov	r1, r3
 8013940:	68f8      	ldr	r0, [r7, #12]
 8013942:	f000 fcbf 	bl	80142c4 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8013946:	68f8      	ldr	r0, [r7, #12]
 8013948:	f001 fa30 	bl	8014dac <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	68da      	ldr	r2, [r3, #12]
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	8a9b      	ldrh	r3, [r3, #20]
 8013954:	33f0      	adds	r3, #240	; 0xf0
 8013956:	b29b      	uxth	r3, r3
 8013958:	4619      	mov	r1, r3
 801395a:	4610      	mov	r0, r2
 801395c:	f7fa f826 	bl	800d9ac <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013960:	4b16      	ldr	r3, [pc, #88]	; (80139bc <dhcp_decline+0xc4>)
 8013962:	6818      	ldr	r0, [r3, #0]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	68d9      	ldr	r1, [r3, #12]
 8013968:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <dhcp_decline+0xc8>)
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	9300      	str	r3, [sp, #0]
 8013970:	2343      	movs	r3, #67	; 0x43
 8013972:	4a14      	ldr	r2, [pc, #80]	; (80139c4 <dhcp_decline+0xcc>)
 8013974:	f7ff f9fa 	bl	8012d6c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f001 f9d5 	bl	8014d28 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	7a9b      	ldrb	r3, [r3, #10]
 8013982:	2bff      	cmp	r3, #255	; 0xff
 8013984:	d005      	beq.n	8013992 <dhcp_decline+0x9a>
    dhcp->tries++;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	7a9b      	ldrb	r3, [r3, #10]
 801398a:	3301      	adds	r3, #1
 801398c:	b2da      	uxtb	r2, r3
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8013992:	f242 7310 	movw	r3, #10000	; 0x2710
 8013996:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013998:	893b      	ldrh	r3, [r7, #8]
 801399a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801399e:	4a0a      	ldr	r2, [pc, #40]	; (80139c8 <dhcp_decline+0xd0>)
 80139a0:	fb82 1203 	smull	r1, r2, r2, r3
 80139a4:	1152      	asrs	r2, r2, #5
 80139a6:	17db      	asrs	r3, r3, #31
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80139b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	2000017c 	.word	0x2000017c
 80139c0:	0801ad08 	.word	0x0801ad08
 80139c4:	0801ad0c 	.word	0x0801ad0c
 80139c8:	10624dd3 	.word	0x10624dd3

080139cc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b088      	sub	sp, #32
 80139d0:	af02      	add	r7, sp, #8
 80139d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 80139da:	2300      	movs	r3, #0
 80139dc:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	2200      	movs	r2, #0
 80139e2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80139e4:	2106      	movs	r1, #6
 80139e6:	6938      	ldr	r0, [r7, #16]
 80139e8:	f000 fbb6 	bl	8014158 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80139ec:	2201      	movs	r2, #1
 80139ee:	6939      	ldr	r1, [r7, #16]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f001 f837 	bl	8014a64 <dhcp_create_msg>
 80139f6:	4603      	mov	r3, r0
 80139f8:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80139fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d13b      	bne.n	8013a7a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013a02:	2202      	movs	r2, #2
 8013a04:	2139      	movs	r1, #57	; 0x39
 8013a06:	6938      	ldr	r0, [r7, #16]
 8013a08:	f000 fbc0 	bl	801418c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013a10:	4619      	mov	r1, r3
 8013a12:	6938      	ldr	r0, [r7, #16]
 8013a14:	f000 fc1c 	bl	8014250 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a18:	2203      	movs	r2, #3
 8013a1a:	2137      	movs	r1, #55	; 0x37
 8013a1c:	6938      	ldr	r0, [r7, #16]
 8013a1e:	f000 fbb5 	bl	801418c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a22:	2300      	movs	r3, #0
 8013a24:	75fb      	strb	r3, [r7, #23]
 8013a26:	e009      	b.n	8013a3c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013a28:	7dfb      	ldrb	r3, [r7, #23]
 8013a2a:	4a29      	ldr	r2, [pc, #164]	; (8013ad0 <dhcp_discover+0x104>)
 8013a2c:	5cd3      	ldrb	r3, [r2, r3]
 8013a2e:	4619      	mov	r1, r3
 8013a30:	6938      	ldr	r0, [r7, #16]
 8013a32:	f000 fbe5 	bl	8014200 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a36:	7dfb      	ldrb	r3, [r7, #23]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	75fb      	strb	r3, [r7, #23]
 8013a3c:	7dfb      	ldrb	r3, [r7, #23]
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d9f2      	bls.n	8013a28 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8013a42:	6938      	ldr	r0, [r7, #16]
 8013a44:	f001 f9b2 	bl	8014dac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	68da      	ldr	r2, [r3, #12]
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	8a9b      	ldrh	r3, [r3, #20]
 8013a50:	33f0      	adds	r3, #240	; 0xf0
 8013a52:	b29b      	uxth	r3, r3
 8013a54:	4619      	mov	r1, r3
 8013a56:	4610      	mov	r0, r2
 8013a58:	f7f9 ffa8 	bl	800d9ac <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013a5c:	4b1d      	ldr	r3, [pc, #116]	; (8013ad4 <dhcp_discover+0x108>)
 8013a5e:	6818      	ldr	r0, [r3, #0]
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	68d9      	ldr	r1, [r3, #12]
 8013a64:	4b1c      	ldr	r3, [pc, #112]	; (8013ad8 <dhcp_discover+0x10c>)
 8013a66:	9301      	str	r3, [sp, #4]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	9300      	str	r3, [sp, #0]
 8013a6c:	2343      	movs	r3, #67	; 0x43
 8013a6e:	4a1b      	ldr	r2, [pc, #108]	; (8013adc <dhcp_discover+0x110>)
 8013a70:	f7ff f97c 	bl	8012d6c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8013a74:	6938      	ldr	r0, [r7, #16]
 8013a76:	f001 f957 	bl	8014d28 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	7a9b      	ldrb	r3, [r3, #10]
 8013a7e:	2bff      	cmp	r3, #255	; 0xff
 8013a80:	d005      	beq.n	8013a8e <dhcp_discover+0xc2>
    dhcp->tries++;
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	7a9b      	ldrb	r3, [r3, #10]
 8013a86:	3301      	adds	r3, #1
 8013a88:	b2da      	uxtb	r2, r3
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	7a9b      	ldrb	r3, [r3, #10]
 8013a92:	2b05      	cmp	r3, #5
 8013a94:	d807      	bhi.n	8013aa6 <dhcp_discover+0xda>
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	7a9b      	ldrb	r3, [r3, #10]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013aa0:	4093      	lsls	r3, r2
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	e001      	b.n	8013aaa <dhcp_discover+0xde>
 8013aa6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013aaa:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013aac:	89bb      	ldrh	r3, [r7, #12]
 8013aae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ab2:	4a0b      	ldr	r2, [pc, #44]	; (8013ae0 <dhcp_discover+0x114>)
 8013ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8013ab8:	1152      	asrs	r2, r2, #5
 8013aba:	17db      	asrs	r3, r3, #31
 8013abc:	1ad3      	subs	r3, r2, r3
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3718      	adds	r7, #24
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	20000048 	.word	0x20000048
 8013ad4:	2000017c 	.word	0x2000017c
 8013ad8:	0801ad08 	.word	0x0801ad08
 8013adc:	0801ad0c 	.word	0x0801ad0c
 8013ae0:	10624dd3 	.word	0x10624dd3

08013ae4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b088      	sub	sp, #32
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d107      	bne.n	8013b02 <dhcp_bind+0x1e>
 8013af2:	4b64      	ldr	r3, [pc, #400]	; (8013c84 <dhcp_bind+0x1a0>)
 8013af4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8013af8:	4963      	ldr	r1, [pc, #396]	; (8013c88 <dhcp_bind+0x1a4>)
 8013afa:	4864      	ldr	r0, [pc, #400]	; (8013c8c <dhcp_bind+0x1a8>)
 8013afc:	f003 ffee 	bl	8017adc <iprintf>
 8013b00:	e0bc      	b.n	8013c7c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b06:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013b08:	69bb      	ldr	r3, [r7, #24]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d107      	bne.n	8013b1e <dhcp_bind+0x3a>
 8013b0e:	4b5d      	ldr	r3, [pc, #372]	; (8013c84 <dhcp_bind+0x1a0>)
 8013b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013b14:	495e      	ldr	r1, [pc, #376]	; (8013c90 <dhcp_bind+0x1ac>)
 8013b16:	485d      	ldr	r0, [pc, #372]	; (8013c8c <dhcp_bind+0x1a8>)
 8013b18:	f003 ffe0 	bl	8017adc <iprintf>
 8013b1c:	e0ae      	b.n	8013c7c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013b1e:	69bb      	ldr	r3, [r7, #24]
 8013b20:	2200      	movs	r2, #0
 8013b22:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b2c:	d019      	beq.n	8013b62 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013b2e:	69bb      	ldr	r3, [r7, #24]
 8013b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013b32:	331e      	adds	r3, #30
 8013b34:	4a57      	ldr	r2, [pc, #348]	; (8013c94 <dhcp_bind+0x1b0>)
 8013b36:	fba2 2303 	umull	r2, r3, r2, r3
 8013b3a:	095b      	lsrs	r3, r3, #5
 8013b3c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b44:	d302      	bcc.n	8013b4c <dhcp_bind+0x68>
       timeout = 0xffff;
 8013b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b4a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d102      	bne.n	8013b62 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	2201      	movs	r2, #1
 8013b60:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b6a:	d01d      	beq.n	8013ba8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b70:	331e      	adds	r3, #30
 8013b72:	4a48      	ldr	r2, [pc, #288]	; (8013c94 <dhcp_bind+0x1b0>)
 8013b74:	fba2 2303 	umull	r2, r3, r2, r3
 8013b78:	095b      	lsrs	r3, r3, #5
 8013b7a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b82:	d302      	bcc.n	8013b8a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b88:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013b8a:	69fb      	ldr	r3, [r7, #28]
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	8b1b      	ldrh	r3, [r3, #24]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d102      	bne.n	8013ba0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013b9a:	69bb      	ldr	r3, [r7, #24]
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	8b1a      	ldrh	r2, [r3, #24]
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bb0:	d01d      	beq.n	8013bee <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bb6:	331e      	adds	r3, #30
 8013bb8:	4a36      	ldr	r2, [pc, #216]	; (8013c94 <dhcp_bind+0x1b0>)
 8013bba:	fba2 2303 	umull	r2, r3, r2, r3
 8013bbe:	095b      	lsrs	r3, r3, #5
 8013bc0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bc8:	d302      	bcc.n	8013bd0 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013bce:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	b29a      	uxth	r2, r3
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	8b5b      	ldrh	r3, [r3, #26]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d102      	bne.n	8013be6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013be0:	69bb      	ldr	r3, [r7, #24]
 8013be2:	2201      	movs	r2, #1
 8013be4:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	8b5a      	ldrh	r2, [r3, #26]
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	8b1a      	ldrh	r2, [r3, #24]
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	8b5b      	ldrh	r3, [r3, #26]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d306      	bcc.n	8013c08 <dhcp_bind+0x124>
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	8b5b      	ldrh	r3, [r3, #26]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013c02:	69bb      	ldr	r3, [r7, #24]
 8013c04:	2200      	movs	r2, #0
 8013c06:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	7adb      	ldrb	r3, [r3, #11]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d003      	beq.n	8013c18 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013c10:	69bb      	ldr	r3, [r7, #24]
 8013c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c14:	613b      	str	r3, [r7, #16]
 8013c16:	e014      	b.n	8013c42 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	3328      	adds	r3, #40	; 0x28
 8013c1c:	781b      	ldrb	r3, [r3, #0]
 8013c1e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	db02      	blt.n	8013c2e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013c28:	23ff      	movs	r3, #255	; 0xff
 8013c2a:	613b      	str	r3, [r7, #16]
 8013c2c:	e009      	b.n	8013c42 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013c2e:	7dfb      	ldrb	r3, [r7, #23]
 8013c30:	2bbf      	cmp	r3, #191	; 0xbf
 8013c32:	d903      	bls.n	8013c3c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013c34:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013c38:	613b      	str	r3, [r7, #16]
 8013c3a:	e002      	b.n	8013c42 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c40:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013c42:	69bb      	ldr	r3, [r7, #24]
 8013c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c46:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d108      	bne.n	8013c60 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013c4e:	69bb      	ldr	r3, [r7, #24]
 8013c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	4013      	ands	r3, r2
 8013c56:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013c5e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013c60:	210a      	movs	r1, #10
 8013c62:	69b8      	ldr	r0, [r7, #24]
 8013c64:	f000 fa78 	bl	8014158 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8013c6e:	f107 030c 	add.w	r3, r7, #12
 8013c72:	f107 0210 	add.w	r2, r7, #16
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7f9 fb80 	bl	800d37c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013c7c:	3720      	adds	r7, #32
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	0801a000 	.word	0x0801a000
 8013c88:	0801a140 	.word	0x0801a140
 8013c8c:	0801a060 	.word	0x0801a060
 8013c90:	0801a15c 	.word	0x0801a15c
 8013c94:	88888889 	.word	0x88888889

08013c98 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b088      	sub	sp, #32
 8013c9c:	af02      	add	r7, sp, #8
 8013c9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013ca6:	2105      	movs	r1, #5
 8013ca8:	6938      	ldr	r0, [r7, #16]
 8013caa:	f000 fa55 	bl	8014158 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013cae:	2203      	movs	r2, #3
 8013cb0:	6939      	ldr	r1, [r7, #16]
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 fed6 	bl	8014a64 <dhcp_create_msg>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d13b      	bne.n	8013d3c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	2139      	movs	r1, #57	; 0x39
 8013cc8:	6938      	ldr	r0, [r7, #16]
 8013cca:	f000 fa5f 	bl	801418c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	6938      	ldr	r0, [r7, #16]
 8013cd6:	f000 fabb 	bl	8014250 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013cda:	2203      	movs	r2, #3
 8013cdc:	2137      	movs	r1, #55	; 0x37
 8013cde:	6938      	ldr	r0, [r7, #16]
 8013ce0:	f000 fa54 	bl	801418c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	75fb      	strb	r3, [r7, #23]
 8013ce8:	e009      	b.n	8013cfe <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013cea:	7dfb      	ldrb	r3, [r7, #23]
 8013cec:	4a2a      	ldr	r2, [pc, #168]	; (8013d98 <dhcp_renew+0x100>)
 8013cee:	5cd3      	ldrb	r3, [r2, r3]
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	6938      	ldr	r0, [r7, #16]
 8013cf4:	f000 fa84 	bl	8014200 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013cf8:	7dfb      	ldrb	r3, [r7, #23]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	75fb      	strb	r3, [r7, #23]
 8013cfe:	7dfb      	ldrb	r3, [r7, #23]
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	d9f2      	bls.n	8013cea <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8013d04:	6938      	ldr	r0, [r7, #16]
 8013d06:	f001 f851 	bl	8014dac <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	68da      	ldr	r2, [r3, #12]
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	8a9b      	ldrh	r3, [r3, #20]
 8013d12:	33f0      	adds	r3, #240	; 0xf0
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	4619      	mov	r1, r3
 8013d18:	4610      	mov	r0, r2
 8013d1a:	f7f9 fe47 	bl	800d9ac <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8013d1e:	4b1f      	ldr	r3, [pc, #124]	; (8013d9c <dhcp_renew+0x104>)
 8013d20:	6818      	ldr	r0, [r3, #0]
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	68d9      	ldr	r1, [r3, #12]
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	2343      	movs	r3, #67	; 0x43
 8013d32:	f7fe ffdd 	bl	8012cf0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013d36:	6938      	ldr	r0, [r7, #16]
 8013d38:	f000 fff6 	bl	8014d28 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	7a9b      	ldrb	r3, [r3, #10]
 8013d40:	2bff      	cmp	r3, #255	; 0xff
 8013d42:	d005      	beq.n	8013d50 <dhcp_renew+0xb8>
    dhcp->tries++;
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	7a9b      	ldrb	r3, [r3, #10]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	7a9b      	ldrb	r3, [r3, #10]
 8013d54:	2b09      	cmp	r3, #9
 8013d56:	d80a      	bhi.n	8013d6e <dhcp_renew+0xd6>
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	7a9b      	ldrb	r3, [r3, #10]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	461a      	mov	r2, r3
 8013d60:	0152      	lsls	r2, r2, #5
 8013d62:	1ad2      	subs	r2, r2, r3
 8013d64:	0092      	lsls	r2, r2, #2
 8013d66:	4413      	add	r3, r2
 8013d68:	011b      	lsls	r3, r3, #4
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	e001      	b.n	8013d72 <dhcp_renew+0xda>
 8013d6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013d72:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013d74:	89bb      	ldrh	r3, [r7, #12]
 8013d76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013d7a:	4a09      	ldr	r2, [pc, #36]	; (8013da0 <dhcp_renew+0x108>)
 8013d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8013d80:	1152      	asrs	r2, r2, #5
 8013d82:	17db      	asrs	r3, r3, #31
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	20000048 	.word	0x20000048
 8013d9c:	2000017c 	.word	0x2000017c
 8013da0:	10624dd3 	.word	0x10624dd3

08013da4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b088      	sub	sp, #32
 8013da8:	af02      	add	r7, sp, #8
 8013daa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013db0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013db2:	2104      	movs	r1, #4
 8013db4:	6938      	ldr	r0, [r7, #16]
 8013db6:	f000 f9cf 	bl	8014158 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013dba:	2203      	movs	r2, #3
 8013dbc:	6939      	ldr	r1, [r7, #16]
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f000 fe50 	bl	8014a64 <dhcp_create_msg>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d139      	bne.n	8013e44 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	2139      	movs	r1, #57	; 0x39
 8013dd4:	6938      	ldr	r0, [r7, #16]
 8013dd6:	f000 f9d9 	bl	801418c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013dde:	4619      	mov	r1, r3
 8013de0:	6938      	ldr	r0, [r7, #16]
 8013de2:	f000 fa35 	bl	8014250 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013de6:	2203      	movs	r2, #3
 8013de8:	2137      	movs	r1, #55	; 0x37
 8013dea:	6938      	ldr	r0, [r7, #16]
 8013dec:	f000 f9ce 	bl	801418c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013df0:	2300      	movs	r3, #0
 8013df2:	75fb      	strb	r3, [r7, #23]
 8013df4:	e009      	b.n	8013e0a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
 8013df8:	4a29      	ldr	r2, [pc, #164]	; (8013ea0 <dhcp_rebind+0xfc>)
 8013dfa:	5cd3      	ldrb	r3, [r2, r3]
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	6938      	ldr	r0, [r7, #16]
 8013e00:	f000 f9fe 	bl	8014200 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e04:	7dfb      	ldrb	r3, [r7, #23]
 8013e06:	3301      	adds	r3, #1
 8013e08:	75fb      	strb	r3, [r7, #23]
 8013e0a:	7dfb      	ldrb	r3, [r7, #23]
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d9f2      	bls.n	8013df6 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8013e10:	6938      	ldr	r0, [r7, #16]
 8013e12:	f000 ffcb 	bl	8014dac <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	68da      	ldr	r2, [r3, #12]
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	8a9b      	ldrh	r3, [r3, #20]
 8013e1e:	33f0      	adds	r3, #240	; 0xf0
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	4619      	mov	r1, r3
 8013e24:	4610      	mov	r0, r2
 8013e26:	f7f9 fdc1 	bl	800d9ac <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013e2a:	4b1e      	ldr	r3, [pc, #120]	; (8013ea4 <dhcp_rebind+0x100>)
 8013e2c:	6818      	ldr	r0, [r3, #0]
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	68d9      	ldr	r1, [r3, #12]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	2343      	movs	r3, #67	; 0x43
 8013e38:	4a1b      	ldr	r2, [pc, #108]	; (8013ea8 <dhcp_rebind+0x104>)
 8013e3a:	f7fe ff59 	bl	8012cf0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013e3e:	6938      	ldr	r0, [r7, #16]
 8013e40:	f000 ff72 	bl	8014d28 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013e44:	693b      	ldr	r3, [r7, #16]
 8013e46:	7a9b      	ldrb	r3, [r3, #10]
 8013e48:	2bff      	cmp	r3, #255	; 0xff
 8013e4a:	d005      	beq.n	8013e58 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	7a9b      	ldrb	r3, [r3, #10]
 8013e50:	3301      	adds	r3, #1
 8013e52:	b2da      	uxtb	r2, r3
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	7a9b      	ldrb	r3, [r3, #10]
 8013e5c:	2b09      	cmp	r3, #9
 8013e5e:	d80a      	bhi.n	8013e76 <dhcp_rebind+0xd2>
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	7a9b      	ldrb	r3, [r3, #10]
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	461a      	mov	r2, r3
 8013e68:	0152      	lsls	r2, r2, #5
 8013e6a:	1ad2      	subs	r2, r2, r3
 8013e6c:	0092      	lsls	r2, r2, #2
 8013e6e:	4413      	add	r3, r2
 8013e70:	00db      	lsls	r3, r3, #3
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	e001      	b.n	8013e7a <dhcp_rebind+0xd6>
 8013e76:	f242 7310 	movw	r3, #10000	; 0x2710
 8013e7a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013e7c:	89bb      	ldrh	r3, [r7, #12]
 8013e7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e82:	4a0a      	ldr	r2, [pc, #40]	; (8013eac <dhcp_rebind+0x108>)
 8013e84:	fb82 1203 	smull	r1, r2, r2, r3
 8013e88:	1152      	asrs	r2, r2, #5
 8013e8a:	17db      	asrs	r3, r3, #31
 8013e8c:	1ad3      	subs	r3, r2, r3
 8013e8e:	b29a      	uxth	r2, r3
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3718      	adds	r7, #24
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20000048 	.word	0x20000048
 8013ea4:	2000017c 	.word	0x2000017c
 8013ea8:	0801ad0c 	.word	0x0801ad0c
 8013eac:	10624dd3 	.word	0x10624dd3

08013eb0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b088      	sub	sp, #32
 8013eb4:	af02      	add	r7, sp, #8
 8013eb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ebc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013ebe:	2103      	movs	r1, #3
 8013ec0:	6938      	ldr	r0, [r7, #16]
 8013ec2:	f000 f949 	bl	8014158 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013ec6:	2203      	movs	r2, #3
 8013ec8:	6939      	ldr	r1, [r7, #16]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fdca 	bl	8014a64 <dhcp_create_msg>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d147      	bne.n	8013f6c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013edc:	2202      	movs	r2, #2
 8013ede:	2139      	movs	r1, #57	; 0x39
 8013ee0:	6938      	ldr	r0, [r7, #16]
 8013ee2:	f000 f953 	bl	801418c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013ee6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013eea:	6938      	ldr	r0, [r7, #16]
 8013eec:	f000 f9b0 	bl	8014250 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013ef0:	2204      	movs	r2, #4
 8013ef2:	2132      	movs	r1, #50	; 0x32
 8013ef4:	6938      	ldr	r0, [r7, #16]
 8013ef6:	f000 f949 	bl	801418c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7f8 fdc7 	bl	800ca92 <lwip_htonl>
 8013f04:	4603      	mov	r3, r0
 8013f06:	4619      	mov	r1, r3
 8013f08:	6938      	ldr	r0, [r7, #16]
 8013f0a:	f000 f9db 	bl	80142c4 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f0e:	2203      	movs	r2, #3
 8013f10:	2137      	movs	r1, #55	; 0x37
 8013f12:	6938      	ldr	r0, [r7, #16]
 8013f14:	f000 f93a 	bl	801418c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f18:	2300      	movs	r3, #0
 8013f1a:	75fb      	strb	r3, [r7, #23]
 8013f1c:	e009      	b.n	8013f32 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013f1e:	7dfb      	ldrb	r3, [r7, #23]
 8013f20:	4a29      	ldr	r2, [pc, #164]	; (8013fc8 <dhcp_reboot+0x118>)
 8013f22:	5cd3      	ldrb	r3, [r2, r3]
 8013f24:	4619      	mov	r1, r3
 8013f26:	6938      	ldr	r0, [r7, #16]
 8013f28:	f000 f96a 	bl	8014200 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f2c:	7dfb      	ldrb	r3, [r7, #23]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	75fb      	strb	r3, [r7, #23]
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d9f2      	bls.n	8013f1e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8013f38:	6938      	ldr	r0, [r7, #16]
 8013f3a:	f000 ff37 	bl	8014dac <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	68da      	ldr	r2, [r3, #12]
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	8a9b      	ldrh	r3, [r3, #20]
 8013f46:	33f0      	adds	r3, #240	; 0xf0
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	4610      	mov	r0, r2
 8013f4e:	f7f9 fd2d 	bl	800d9ac <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013f52:	4b1e      	ldr	r3, [pc, #120]	; (8013fcc <dhcp_reboot+0x11c>)
 8013f54:	6818      	ldr	r0, [r3, #0]
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	68d9      	ldr	r1, [r3, #12]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	9300      	str	r3, [sp, #0]
 8013f5e:	2343      	movs	r3, #67	; 0x43
 8013f60:	4a1b      	ldr	r2, [pc, #108]	; (8013fd0 <dhcp_reboot+0x120>)
 8013f62:	f7fe fec5 	bl	8012cf0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013f66:	6938      	ldr	r0, [r7, #16]
 8013f68:	f000 fede 	bl	8014d28 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	7a9b      	ldrb	r3, [r3, #10]
 8013f70:	2bff      	cmp	r3, #255	; 0xff
 8013f72:	d005      	beq.n	8013f80 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	7a9b      	ldrb	r3, [r3, #10]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	b2da      	uxtb	r2, r3
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	7a9b      	ldrb	r3, [r3, #10]
 8013f84:	2b09      	cmp	r3, #9
 8013f86:	d80a      	bhi.n	8013f9e <dhcp_reboot+0xee>
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	7a9b      	ldrb	r3, [r3, #10]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	461a      	mov	r2, r3
 8013f90:	0152      	lsls	r2, r2, #5
 8013f92:	1ad2      	subs	r2, r2, r3
 8013f94:	0092      	lsls	r2, r2, #2
 8013f96:	4413      	add	r3, r2
 8013f98:	00db      	lsls	r3, r3, #3
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	e001      	b.n	8013fa2 <dhcp_reboot+0xf2>
 8013f9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8013fa2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013fa4:	89bb      	ldrh	r3, [r7, #12]
 8013fa6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013faa:	4a0a      	ldr	r2, [pc, #40]	; (8013fd4 <dhcp_reboot+0x124>)
 8013fac:	fb82 1203 	smull	r1, r2, r2, r3
 8013fb0:	1152      	asrs	r2, r2, #5
 8013fb2:	17db      	asrs	r3, r3, #31
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3718      	adds	r7, #24
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	20000048 	.word	0x20000048
 8013fcc:	2000017c 	.word	0x2000017c
 8013fd0:	0801ad0c 	.word	0x0801ad0c
 8013fd4:	10624dd3 	.word	0x10624dd3

08013fd8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b088      	sub	sp, #32
 8013fdc:	af02      	add	r7, sp, #8
 8013fde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe4:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d102      	bne.n	8013ff2 <dhcp_release+0x1a>
    return ERR_ARG;
 8013fec:	f06f 030f 	mvn.w	r3, #15
 8013ff0:	e072      	b.n	80140d8 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ff6:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 ff31 	bl	8014e60 <dhcp_supplied_address>
 8013ffe:	4603      	mov	r3, r0
 8014000:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014002:	2100      	movs	r1, #0
 8014004:	6978      	ldr	r0, [r7, #20]
 8014006:	f000 f8a7 	bl	8014158 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	2200      	movs	r2, #0
 801400e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	2200      	movs	r2, #0
 8014014:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	2200      	movs	r2, #0
 801401a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	2200      	movs	r2, #0
 8014020:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	2200      	movs	r2, #0
 8014026:	63da      	str	r2, [r3, #60]	; 0x3c
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	639a      	str	r2, [r3, #56]	; 0x38
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	2200      	movs	r2, #0
 801403c:	845a      	strh	r2, [r3, #34]	; 0x22
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	841a      	strh	r2, [r3, #32]
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	8c1a      	ldrh	r2, [r3, #32]
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	83da      	strh	r2, [r3, #30]
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	8bda      	ldrh	r2, [r3, #30]
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8014056:	7cfb      	ldrb	r3, [r7, #19]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d101      	bne.n	8014060 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801405c:	2300      	movs	r3, #0
 801405e:	e03b      	b.n	80140d8 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8014060:	2207      	movs	r2, #7
 8014062:	6979      	ldr	r1, [r7, #20]
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f000 fcfd 	bl	8014a64 <dhcp_create_msg>
 801406a:	4603      	mov	r3, r0
 801406c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801406e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d128      	bne.n	80140c8 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8014076:	2204      	movs	r2, #4
 8014078:	2136      	movs	r1, #54	; 0x36
 801407a:	6978      	ldr	r0, [r7, #20]
 801407c:	f000 f886 	bl	801418c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	4618      	mov	r0, r3
 8014084:	f7f8 fd05 	bl	800ca92 <lwip_htonl>
 8014088:	4603      	mov	r3, r0
 801408a:	4619      	mov	r1, r3
 801408c:	6978      	ldr	r0, [r7, #20]
 801408e:	f000 f919 	bl	80142c4 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8014092:	6978      	ldr	r0, [r7, #20]
 8014094:	f000 fe8a 	bl	8014dac <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	68da      	ldr	r2, [r3, #12]
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	8a9b      	ldrh	r3, [r3, #20]
 80140a0:	33f0      	adds	r3, #240	; 0xf0
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	4619      	mov	r1, r3
 80140a6:	4610      	mov	r0, r2
 80140a8:	f7f9 fc80 	bl	800d9ac <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80140ac:	4b0c      	ldr	r3, [pc, #48]	; (80140e0 <dhcp_release+0x108>)
 80140ae:	6818      	ldr	r0, [r3, #0]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	68d9      	ldr	r1, [r3, #12]
 80140b4:	f107 020c 	add.w	r2, r7, #12
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	2343      	movs	r3, #67	; 0x43
 80140be:	f7fe fe17 	bl	8012cf0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80140c2:	6978      	ldr	r0, [r7, #20]
 80140c4:	f000 fe30 	bl	8014d28 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80140c8:	4b06      	ldr	r3, [pc, #24]	; (80140e4 <dhcp_release+0x10c>)
 80140ca:	4a06      	ldr	r2, [pc, #24]	; (80140e4 <dhcp_release+0x10c>)
 80140cc:	4905      	ldr	r1, [pc, #20]	; (80140e4 <dhcp_release+0x10c>)
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7f9 f954 	bl	800d37c <netif_set_addr>

  return result;
 80140d4:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3718      	adds	r7, #24
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	2000017c 	.word	0x2000017c
 80140e4:	0801ad08 	.word	0x0801ad08

080140e8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d107      	bne.n	8014106 <dhcp_stop+0x1e>
 80140f6:	4b14      	ldr	r3, [pc, #80]	; (8014148 <dhcp_stop+0x60>)
 80140f8:	f240 5242 	movw	r2, #1346	; 0x542
 80140fc:	4913      	ldr	r1, [pc, #76]	; (801414c <dhcp_stop+0x64>)
 80140fe:	4814      	ldr	r0, [pc, #80]	; (8014150 <dhcp_stop+0x68>)
 8014100:	f003 fcec 	bl	8017adc <iprintf>
 8014104:	e01d      	b.n	8014142 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d017      	beq.n	8014142 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d006      	beq.n	8014128 <dhcp_stop+0x40>
 801411a:	4b0b      	ldr	r3, [pc, #44]	; (8014148 <dhcp_stop+0x60>)
 801411c:	f240 524f 	movw	r2, #1359	; 0x54f
 8014120:	490c      	ldr	r1, [pc, #48]	; (8014154 <dhcp_stop+0x6c>)
 8014122:	480b      	ldr	r0, [pc, #44]	; (8014150 <dhcp_stop+0x68>)
 8014124:	f003 fcda 	bl	8017adc <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014128:	2100      	movs	r1, #0
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f000 f814 	bl	8014158 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	7a1b      	ldrb	r3, [r3, #8]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d004      	beq.n	8014142 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014138:	f7ff f854 	bl	80131e4 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	2200      	movs	r2, #0
 8014140:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8014142:	3710      	adds	r7, #16
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	0801a000 	.word	0x0801a000
 801414c:	0801a174 	.word	0x0801a174
 8014150:	0801a060 	.word	0x0801a060
 8014154:	0801a12c 	.word	0x0801a12c

08014158 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	460b      	mov	r3, r1
 8014162:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7a5b      	ldrb	r3, [r3, #9]
 8014168:	78fa      	ldrb	r2, [r7, #3]
 801416a:	429a      	cmp	r2, r3
 801416c:	d008      	beq.n	8014180 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	78fa      	ldrb	r2, [r7, #3]
 8014172:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2200      	movs	r2, #0
 8014178:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2200      	movs	r2, #0
 801417e:	82da      	strh	r2, [r3, #22]
  }
}
 8014180:	bf00      	nop
 8014182:	370c      	adds	r7, #12
 8014184:	46bd      	mov	sp, r7
 8014186:	bc80      	pop	{r7}
 8014188:	4770      	bx	lr
	...

0801418c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	460b      	mov	r3, r1
 8014196:	70fb      	strb	r3, [r7, #3]
 8014198:	4613      	mov	r3, r2
 801419a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	8a9b      	ldrh	r3, [r3, #20]
 80141a0:	461a      	mov	r2, r3
 80141a2:	78bb      	ldrb	r3, [r7, #2]
 80141a4:	4413      	add	r3, r2
 80141a6:	3302      	adds	r3, #2
 80141a8:	2b44      	cmp	r3, #68	; 0x44
 80141aa:	d906      	bls.n	80141ba <dhcp_option+0x2e>
 80141ac:	4b11      	ldr	r3, [pc, #68]	; (80141f4 <dhcp_option+0x68>)
 80141ae:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80141b2:	4911      	ldr	r1, [pc, #68]	; (80141f8 <dhcp_option+0x6c>)
 80141b4:	4811      	ldr	r0, [pc, #68]	; (80141fc <dhcp_option+0x70>)
 80141b6:	f003 fc91 	bl	8017adc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	691a      	ldr	r2, [r3, #16]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	8a9b      	ldrh	r3, [r3, #20]
 80141c2:	1c59      	adds	r1, r3, #1
 80141c4:	b288      	uxth	r0, r1
 80141c6:	6879      	ldr	r1, [r7, #4]
 80141c8:	8288      	strh	r0, [r1, #20]
 80141ca:	4413      	add	r3, r2
 80141cc:	78fa      	ldrb	r2, [r7, #3]
 80141ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	691a      	ldr	r2, [r3, #16]
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	8a9b      	ldrh	r3, [r3, #20]
 80141da:	1c59      	adds	r1, r3, #1
 80141dc:	b288      	uxth	r0, r1
 80141de:	6879      	ldr	r1, [r7, #4]
 80141e0:	8288      	strh	r0, [r1, #20]
 80141e2:	4413      	add	r3, r2
 80141e4:	78ba      	ldrb	r2, [r7, #2]
 80141e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80141ea:	bf00      	nop
 80141ec:	3708      	adds	r7, #8
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	0801a000 	.word	0x0801a000
 80141f8:	0801a190 	.word	0x0801a190
 80141fc:	0801a060 	.word	0x0801a060

08014200 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	460b      	mov	r3, r1
 801420a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	8a9b      	ldrh	r3, [r3, #20]
 8014210:	2b43      	cmp	r3, #67	; 0x43
 8014212:	d906      	bls.n	8014222 <dhcp_option_byte+0x22>
 8014214:	4b0b      	ldr	r3, [pc, #44]	; (8014244 <dhcp_option_byte+0x44>)
 8014216:	f240 527b 	movw	r2, #1403	; 0x57b
 801421a:	490b      	ldr	r1, [pc, #44]	; (8014248 <dhcp_option_byte+0x48>)
 801421c:	480b      	ldr	r0, [pc, #44]	; (801424c <dhcp_option_byte+0x4c>)
 801421e:	f003 fc5d 	bl	8017adc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	691a      	ldr	r2, [r3, #16]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	8a9b      	ldrh	r3, [r3, #20]
 801422a:	1c59      	adds	r1, r3, #1
 801422c:	b288      	uxth	r0, r1
 801422e:	6879      	ldr	r1, [r7, #4]
 8014230:	8288      	strh	r0, [r1, #20]
 8014232:	4413      	add	r3, r2
 8014234:	78fa      	ldrb	r2, [r7, #3]
 8014236:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801423a:	bf00      	nop
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	0801a000 	.word	0x0801a000
 8014248:	0801a1d8 	.word	0x0801a1d8
 801424c:	0801a060 	.word	0x0801a060

08014250 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8014250:	b590      	push	{r4, r7, lr}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	8a9b      	ldrh	r3, [r3, #20]
 8014260:	3302      	adds	r3, #2
 8014262:	2b44      	cmp	r3, #68	; 0x44
 8014264:	d906      	bls.n	8014274 <dhcp_option_short+0x24>
 8014266:	4b14      	ldr	r3, [pc, #80]	; (80142b8 <dhcp_option_short+0x68>)
 8014268:	f240 5282 	movw	r2, #1410	; 0x582
 801426c:	4913      	ldr	r1, [pc, #76]	; (80142bc <dhcp_option_short+0x6c>)
 801426e:	4814      	ldr	r0, [pc, #80]	; (80142c0 <dhcp_option_short+0x70>)
 8014270:	f003 fc34 	bl	8017adc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014274:	887b      	ldrh	r3, [r7, #2]
 8014276:	0a1b      	lsrs	r3, r3, #8
 8014278:	b298      	uxth	r0, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	691a      	ldr	r2, [r3, #16]
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	8a9b      	ldrh	r3, [r3, #20]
 8014282:	1c59      	adds	r1, r3, #1
 8014284:	b28c      	uxth	r4, r1
 8014286:	6879      	ldr	r1, [r7, #4]
 8014288:	828c      	strh	r4, [r1, #20]
 801428a:	b2c1      	uxtb	r1, r0
 801428c:	4413      	add	r3, r2
 801428e:	460a      	mov	r2, r1
 8014290:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	691a      	ldr	r2, [r3, #16]
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	8a9b      	ldrh	r3, [r3, #20]
 801429c:	1c59      	adds	r1, r3, #1
 801429e:	b288      	uxth	r0, r1
 80142a0:	6879      	ldr	r1, [r7, #4]
 80142a2:	8288      	strh	r0, [r1, #20]
 80142a4:	8879      	ldrh	r1, [r7, #2]
 80142a6:	b2c9      	uxtb	r1, r1
 80142a8:	4413      	add	r3, r2
 80142aa:	460a      	mov	r2, r1
 80142ac:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80142b0:	bf00      	nop
 80142b2:	370c      	adds	r7, #12
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd90      	pop	{r4, r7, pc}
 80142b8:	0801a000 	.word	0x0801a000
 80142bc:	0801a214 	.word	0x0801a214
 80142c0:	0801a060 	.word	0x0801a060

080142c4 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80142c4:	b590      	push	{r4, r7, lr}
 80142c6:	b083      	sub	sp, #12
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	8a9b      	ldrh	r3, [r3, #20]
 80142d2:	3304      	adds	r3, #4
 80142d4:	2b44      	cmp	r3, #68	; 0x44
 80142d6:	d906      	bls.n	80142e6 <dhcp_option_long+0x22>
 80142d8:	4b22      	ldr	r3, [pc, #136]	; (8014364 <dhcp_option_long+0xa0>)
 80142da:	f240 528a 	movw	r2, #1418	; 0x58a
 80142de:	4922      	ldr	r1, [pc, #136]	; (8014368 <dhcp_option_long+0xa4>)
 80142e0:	4822      	ldr	r0, [pc, #136]	; (801436c <dhcp_option_long+0xa8>)
 80142e2:	f003 fbfb 	bl	8017adc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	0e18      	lsrs	r0, r3, #24
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	691a      	ldr	r2, [r3, #16]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	8a9b      	ldrh	r3, [r3, #20]
 80142f2:	1c59      	adds	r1, r3, #1
 80142f4:	b28c      	uxth	r4, r1
 80142f6:	6879      	ldr	r1, [r7, #4]
 80142f8:	828c      	strh	r4, [r1, #20]
 80142fa:	b2c1      	uxtb	r1, r0
 80142fc:	4413      	add	r3, r2
 80142fe:	460a      	mov	r2, r1
 8014300:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	0c18      	lsrs	r0, r3, #16
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	691a      	ldr	r2, [r3, #16]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	8a9b      	ldrh	r3, [r3, #20]
 8014310:	1c59      	adds	r1, r3, #1
 8014312:	b28c      	uxth	r4, r1
 8014314:	6879      	ldr	r1, [r7, #4]
 8014316:	828c      	strh	r4, [r1, #20]
 8014318:	b2c1      	uxtb	r1, r0
 801431a:	4413      	add	r3, r2
 801431c:	460a      	mov	r2, r1
 801431e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	0a18      	lsrs	r0, r3, #8
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	691a      	ldr	r2, [r3, #16]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	8a9b      	ldrh	r3, [r3, #20]
 801432e:	1c59      	adds	r1, r3, #1
 8014330:	b28c      	uxth	r4, r1
 8014332:	6879      	ldr	r1, [r7, #4]
 8014334:	828c      	strh	r4, [r1, #20]
 8014336:	b2c1      	uxtb	r1, r0
 8014338:	4413      	add	r3, r2
 801433a:	460a      	mov	r2, r1
 801433c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	691a      	ldr	r2, [r3, #16]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	8a9b      	ldrh	r3, [r3, #20]
 8014348:	1c59      	adds	r1, r3, #1
 801434a:	b288      	uxth	r0, r1
 801434c:	6879      	ldr	r1, [r7, #4]
 801434e:	8288      	strh	r0, [r1, #20]
 8014350:	6839      	ldr	r1, [r7, #0]
 8014352:	b2c9      	uxtb	r1, r1
 8014354:	4413      	add	r3, r2
 8014356:	460a      	mov	r2, r1
 8014358:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801435c:	bf00      	nop
 801435e:	370c      	adds	r7, #12
 8014360:	46bd      	mov	sp, r7
 8014362:	bd90      	pop	{r4, r7, pc}
 8014364:	0801a000 	.word	0x0801a000
 8014368:	0801a258 	.word	0x0801a258
 801436c:	0801a060 	.word	0x0801a060

08014370 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b08e      	sub	sp, #56	; 0x38
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801437a:	2300      	movs	r3, #0
 801437c:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 801437e:	2300      	movs	r3, #0
 8014380:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014382:	2208      	movs	r2, #8
 8014384:	2100      	movs	r1, #0
 8014386:	48b3      	ldr	r0, [pc, #716]	; (8014654 <dhcp_parse_reply+0x2e4>)
 8014388:	f003 fafa 	bl	8017980 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	895b      	ldrh	r3, [r3, #10]
 8014390:	2b2b      	cmp	r3, #43	; 0x2b
 8014392:	d802      	bhi.n	801439a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014394:	f06f 0301 	mvn.w	r3, #1
 8014398:	e26a      	b.n	8014870 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	685a      	ldr	r2, [r3, #4]
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80143a2:	23f0      	movs	r3, #240	; 0xf0
 80143a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	891b      	ldrh	r3, [r3, #8]
 80143aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80143b0:	e00c      	b.n	80143cc <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80143b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b4:	895b      	ldrh	r3, [r3, #10]
 80143b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80143bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143be:	895b      	ldrh	r3, [r3, #10]
 80143c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80143c2:	1ad3      	subs	r3, r2, r3
 80143c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80143c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80143cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d004      	beq.n	80143dc <dhcp_parse_reply+0x6c>
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	895b      	ldrh	r3, [r3, #10]
 80143d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80143d8:	429a      	cmp	r2, r3
 80143da:	d2ea      	bcs.n	80143b2 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d102      	bne.n	80143e8 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 80143e2:	f06f 0301 	mvn.w	r3, #1
 80143e6:	e243      	b.n	8014870 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 80143e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80143ea:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 80143ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80143ee:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 80143f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80143f6:	e1fb      	b.n	80147f0 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 80143f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80143fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143fc:	4413      	add	r3, r2
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8014402:	2300      	movs	r3, #0
 8014404:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8014406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801440a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801440c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801440e:	3302      	adds	r3, #2
 8014410:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014412:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014414:	3301      	adds	r3, #1
 8014416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014418:	8952      	ldrh	r2, [r2, #10]
 801441a:	4293      	cmp	r3, r2
 801441c:	da06      	bge.n	801442c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801441e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014420:	3301      	adds	r3, #1
 8014422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014424:	4413      	add	r3, r2
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	77fb      	strb	r3, [r7, #31]
 801442a:	e00a      	b.n	8014442 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d004      	beq.n	801443e <dhcp_parse_reply+0xce>
 8014434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	e000      	b.n	8014440 <dhcp_parse_reply+0xd0>
 801443e:	2300      	movs	r3, #0
 8014440:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014442:	7ffb      	ldrb	r3, [r7, #31]
 8014444:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8014446:	7d7b      	ldrb	r3, [r7, #21]
 8014448:	2b3b      	cmp	r3, #59	; 0x3b
 801444a:	f200 8121 	bhi.w	8014690 <dhcp_parse_reply+0x320>
 801444e:	a201      	add	r2, pc, #4	; (adr r2, 8014454 <dhcp_parse_reply+0xe4>)
 8014450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014454:	08014545 	.word	0x08014545
 8014458:	08014555 	.word	0x08014555
 801445c:	08014691 	.word	0x08014691
 8014460:	08014575 	.word	0x08014575
 8014464:	08014691 	.word	0x08014691
 8014468:	08014691 	.word	0x08014691
 801446c:	08014691 	.word	0x08014691
 8014470:	08014691 	.word	0x08014691
 8014474:	08014691 	.word	0x08014691
 8014478:	08014691 	.word	0x08014691
 801447c:	08014691 	.word	0x08014691
 8014480:	08014691 	.word	0x08014691
 8014484:	08014691 	.word	0x08014691
 8014488:	08014691 	.word	0x08014691
 801448c:	08014691 	.word	0x08014691
 8014490:	08014691 	.word	0x08014691
 8014494:	08014691 	.word	0x08014691
 8014498:	08014691 	.word	0x08014691
 801449c:	08014691 	.word	0x08014691
 80144a0:	08014691 	.word	0x08014691
 80144a4:	08014691 	.word	0x08014691
 80144a8:	08014691 	.word	0x08014691
 80144ac:	08014691 	.word	0x08014691
 80144b0:	08014691 	.word	0x08014691
 80144b4:	08014691 	.word	0x08014691
 80144b8:	08014691 	.word	0x08014691
 80144bc:	08014691 	.word	0x08014691
 80144c0:	08014691 	.word	0x08014691
 80144c4:	08014691 	.word	0x08014691
 80144c8:	08014691 	.word	0x08014691
 80144cc:	08014691 	.word	0x08014691
 80144d0:	08014691 	.word	0x08014691
 80144d4:	08014691 	.word	0x08014691
 80144d8:	08014691 	.word	0x08014691
 80144dc:	08014691 	.word	0x08014691
 80144e0:	08014691 	.word	0x08014691
 80144e4:	08014691 	.word	0x08014691
 80144e8:	08014691 	.word	0x08014691
 80144ec:	08014691 	.word	0x08014691
 80144f0:	08014691 	.word	0x08014691
 80144f4:	08014691 	.word	0x08014691
 80144f8:	08014691 	.word	0x08014691
 80144fc:	08014691 	.word	0x08014691
 8014500:	08014691 	.word	0x08014691
 8014504:	08014691 	.word	0x08014691
 8014508:	08014691 	.word	0x08014691
 801450c:	08014691 	.word	0x08014691
 8014510:	08014691 	.word	0x08014691
 8014514:	08014691 	.word	0x08014691
 8014518:	08014691 	.word	0x08014691
 801451c:	08014691 	.word	0x08014691
 8014520:	0801459b 	.word	0x0801459b
 8014524:	080145bb 	.word	0x080145bb
 8014528:	080145f5 	.word	0x080145f5
 801452c:	08014615 	.word	0x08014615
 8014530:	08014691 	.word	0x08014691
 8014534:	08014691 	.word	0x08014691
 8014538:	08014691 	.word	0x08014691
 801453c:	08014635 	.word	0x08014635
 8014540:	08014671 	.word	0x08014671
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	77fb      	strb	r3, [r7, #31]
 8014548:	7ffb      	ldrb	r3, [r7, #31]
 801454a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801454c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801454e:	3b01      	subs	r3, #1
 8014550:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8014552:	e0a0      	b.n	8014696 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014554:	7ffb      	ldrb	r3, [r7, #31]
 8014556:	2b04      	cmp	r3, #4
 8014558:	d009      	beq.n	801456e <dhcp_parse_reply+0x1fe>
 801455a:	4b3f      	ldr	r3, [pc, #252]	; (8014658 <dhcp_parse_reply+0x2e8>)
 801455c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8014560:	493e      	ldr	r1, [pc, #248]	; (801465c <dhcp_parse_reply+0x2ec>)
 8014562:	483f      	ldr	r0, [pc, #252]	; (8014660 <dhcp_parse_reply+0x2f0>)
 8014564:	f003 faba 	bl	8017adc <iprintf>
 8014568:	f06f 0305 	mvn.w	r3, #5
 801456c:	e180      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801456e:	2306      	movs	r3, #6
 8014570:	61bb      	str	r3, [r7, #24]
        break;
 8014572:	e090      	b.n	8014696 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014574:	2304      	movs	r3, #4
 8014576:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014578:	7ffa      	ldrb	r2, [r7, #31]
 801457a:	7fbb      	ldrb	r3, [r7, #30]
 801457c:	429a      	cmp	r2, r3
 801457e:	d209      	bcs.n	8014594 <dhcp_parse_reply+0x224>
 8014580:	4b35      	ldr	r3, [pc, #212]	; (8014658 <dhcp_parse_reply+0x2e8>)
 8014582:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8014586:	4937      	ldr	r1, [pc, #220]	; (8014664 <dhcp_parse_reply+0x2f4>)
 8014588:	4835      	ldr	r0, [pc, #212]	; (8014660 <dhcp_parse_reply+0x2f0>)
 801458a:	f003 faa7 	bl	8017adc <iprintf>
 801458e:	f06f 0305 	mvn.w	r3, #5
 8014592:	e16d      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014594:	2307      	movs	r3, #7
 8014596:	61bb      	str	r3, [r7, #24]
        break;
 8014598:	e07d      	b.n	8014696 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801459a:	7ffb      	ldrb	r3, [r7, #31]
 801459c:	2b04      	cmp	r3, #4
 801459e:	d009      	beq.n	80145b4 <dhcp_parse_reply+0x244>
 80145a0:	4b2d      	ldr	r3, [pc, #180]	; (8014658 <dhcp_parse_reply+0x2e8>)
 80145a2:	f240 6209 	movw	r2, #1545	; 0x609
 80145a6:	492d      	ldr	r1, [pc, #180]	; (801465c <dhcp_parse_reply+0x2ec>)
 80145a8:	482d      	ldr	r0, [pc, #180]	; (8014660 <dhcp_parse_reply+0x2f0>)
 80145aa:	f003 fa97 	bl	8017adc <iprintf>
 80145ae:	f06f 0305 	mvn.w	r3, #5
 80145b2:	e15d      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80145b4:	2303      	movs	r3, #3
 80145b6:	61bb      	str	r3, [r7, #24]
        break;
 80145b8:	e06d      	b.n	8014696 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80145ba:	7ffb      	ldrb	r3, [r7, #31]
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d009      	beq.n	80145d4 <dhcp_parse_reply+0x264>
 80145c0:	4b25      	ldr	r3, [pc, #148]	; (8014658 <dhcp_parse_reply+0x2e8>)
 80145c2:	f240 6217 	movw	r2, #1559	; 0x617
 80145c6:	4928      	ldr	r1, [pc, #160]	; (8014668 <dhcp_parse_reply+0x2f8>)
 80145c8:	4825      	ldr	r0, [pc, #148]	; (8014660 <dhcp_parse_reply+0x2f0>)
 80145ca:	f003 fa87 	bl	8017adc <iprintf>
 80145ce:	f06f 0305 	mvn.w	r3, #5
 80145d2:	e14d      	b.n	8014870 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80145d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145d6:	2bf0      	cmp	r3, #240	; 0xf0
 80145d8:	d009      	beq.n	80145ee <dhcp_parse_reply+0x27e>
 80145da:	4b1f      	ldr	r3, [pc, #124]	; (8014658 <dhcp_parse_reply+0x2e8>)
 80145dc:	f240 6219 	movw	r2, #1561	; 0x619
 80145e0:	4922      	ldr	r1, [pc, #136]	; (801466c <dhcp_parse_reply+0x2fc>)
 80145e2:	481f      	ldr	r0, [pc, #124]	; (8014660 <dhcp_parse_reply+0x2f0>)
 80145e4:	f003 fa7a 	bl	8017adc <iprintf>
 80145e8:	f06f 0305 	mvn.w	r3, #5
 80145ec:	e140      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80145ee:	2300      	movs	r3, #0
 80145f0:	61bb      	str	r3, [r7, #24]
        break;
 80145f2:	e050      	b.n	8014696 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80145f4:	7ffb      	ldrb	r3, [r7, #31]
 80145f6:	2b01      	cmp	r3, #1
 80145f8:	d009      	beq.n	801460e <dhcp_parse_reply+0x29e>
 80145fa:	4b17      	ldr	r3, [pc, #92]	; (8014658 <dhcp_parse_reply+0x2e8>)
 80145fc:	f240 621d 	movw	r2, #1565	; 0x61d
 8014600:	4919      	ldr	r1, [pc, #100]	; (8014668 <dhcp_parse_reply+0x2f8>)
 8014602:	4817      	ldr	r0, [pc, #92]	; (8014660 <dhcp_parse_reply+0x2f0>)
 8014604:	f003 fa6a 	bl	8017adc <iprintf>
 8014608:	f06f 0305 	mvn.w	r3, #5
 801460c:	e130      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801460e:	2301      	movs	r3, #1
 8014610:	61bb      	str	r3, [r7, #24]
        break;
 8014612:	e040      	b.n	8014696 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014614:	7ffb      	ldrb	r3, [r7, #31]
 8014616:	2b04      	cmp	r3, #4
 8014618:	d009      	beq.n	801462e <dhcp_parse_reply+0x2be>
 801461a:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <dhcp_parse_reply+0x2e8>)
 801461c:	f240 6221 	movw	r2, #1569	; 0x621
 8014620:	490e      	ldr	r1, [pc, #56]	; (801465c <dhcp_parse_reply+0x2ec>)
 8014622:	480f      	ldr	r0, [pc, #60]	; (8014660 <dhcp_parse_reply+0x2f0>)
 8014624:	f003 fa5a 	bl	8017adc <iprintf>
 8014628:	f06f 0305 	mvn.w	r3, #5
 801462c:	e120      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801462e:	2302      	movs	r3, #2
 8014630:	61bb      	str	r3, [r7, #24]
        break;
 8014632:	e030      	b.n	8014696 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014634:	7ffb      	ldrb	r3, [r7, #31]
 8014636:	2b04      	cmp	r3, #4
 8014638:	d009      	beq.n	801464e <dhcp_parse_reply+0x2de>
 801463a:	4b07      	ldr	r3, [pc, #28]	; (8014658 <dhcp_parse_reply+0x2e8>)
 801463c:	f240 6225 	movw	r2, #1573	; 0x625
 8014640:	4906      	ldr	r1, [pc, #24]	; (801465c <dhcp_parse_reply+0x2ec>)
 8014642:	4807      	ldr	r0, [pc, #28]	; (8014660 <dhcp_parse_reply+0x2f0>)
 8014644:	f003 fa4a 	bl	8017adc <iprintf>
 8014648:	f06f 0305 	mvn.w	r3, #5
 801464c:	e110      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801464e:	2304      	movs	r3, #4
 8014650:	61bb      	str	r3, [r7, #24]
        break;
 8014652:	e020      	b.n	8014696 <dhcp_parse_reply+0x326>
 8014654:	20008b8c 	.word	0x20008b8c
 8014658:	0801a000 	.word	0x0801a000
 801465c:	0801a298 	.word	0x0801a298
 8014660:	0801a060 	.word	0x0801a060
 8014664:	0801a2a4 	.word	0x0801a2a4
 8014668:	0801a2b8 	.word	0x0801a2b8
 801466c:	0801a2c4 	.word	0x0801a2c4
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014670:	7ffb      	ldrb	r3, [r7, #31]
 8014672:	2b04      	cmp	r3, #4
 8014674:	d009      	beq.n	801468a <dhcp_parse_reply+0x31a>
 8014676:	4b80      	ldr	r3, [pc, #512]	; (8014878 <dhcp_parse_reply+0x508>)
 8014678:	f240 6229 	movw	r2, #1577	; 0x629
 801467c:	497f      	ldr	r1, [pc, #508]	; (801487c <dhcp_parse_reply+0x50c>)
 801467e:	4880      	ldr	r0, [pc, #512]	; (8014880 <dhcp_parse_reply+0x510>)
 8014680:	f003 fa2c 	bl	8017adc <iprintf>
 8014684:	f06f 0305 	mvn.w	r3, #5
 8014688:	e0f2      	b.n	8014870 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801468a:	2305      	movs	r3, #5
 801468c:	61bb      	str	r3, [r7, #24]
        break;
 801468e:	e002      	b.n	8014696 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8014690:	2300      	movs	r3, #0
 8014692:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8014694:	bf00      	nop
    }
    offset += len + 2;
 8014696:	7ffb      	ldrb	r3, [r7, #31]
 8014698:	b29a      	uxth	r2, r3
 801469a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801469c:	4413      	add	r3, r2
 801469e:	b29b      	uxth	r3, r3
 80146a0:	3302      	adds	r3, #2
 80146a2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80146a4:	7fbb      	ldrb	r3, [r7, #30]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d079      	beq.n	801479e <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	db02      	blt.n	80146ba <dhcp_parse_reply+0x34a>
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	2b07      	cmp	r3, #7
 80146b8:	dd06      	ble.n	80146c8 <dhcp_parse_reply+0x358>
 80146ba:	4b6f      	ldr	r3, [pc, #444]	; (8014878 <dhcp_parse_reply+0x508>)
 80146bc:	f240 6236 	movw	r2, #1590	; 0x636
 80146c0:	4970      	ldr	r1, [pc, #448]	; (8014884 <dhcp_parse_reply+0x514>)
 80146c2:	486f      	ldr	r0, [pc, #444]	; (8014880 <dhcp_parse_reply+0x510>)
 80146c4:	f003 fa0a 	bl	8017adc <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 80146c8:	4a6f      	ldr	r2, [pc, #444]	; (8014888 <dhcp_parse_reply+0x518>)
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	4413      	add	r3, r2
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d164      	bne.n	801479e <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 80146d4:	7fbb      	ldrb	r3, [r7, #30]
 80146d6:	2b04      	cmp	r3, #4
 80146d8:	bf28      	it	cs
 80146da:	2304      	movcs	r3, #4
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80146e0:	8afb      	ldrh	r3, [r7, #22]
 80146e2:	8a7a      	ldrh	r2, [r7, #18]
 80146e4:	f107 0108 	add.w	r1, r7, #8
 80146e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146ea:	f7f9 fcd1 	bl	800e090 <pbuf_copy_partial>
 80146ee:	4603      	mov	r3, r0
 80146f0:	461a      	mov	r2, r3
 80146f2:	8a7b      	ldrh	r3, [r7, #18]
 80146f4:	4293      	cmp	r3, r2
 80146f6:	d002      	beq.n	80146fe <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 80146f8:	f06f 0301 	mvn.w	r3, #1
 80146fc:	e0b8      	b.n	8014870 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 80146fe:	7fbb      	ldrb	r3, [r7, #30]
 8014700:	2b04      	cmp	r3, #4
 8014702:	d927      	bls.n	8014754 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014704:	7fbb      	ldrb	r3, [r7, #30]
 8014706:	f003 0303 	and.w	r3, r3, #3
 801470a:	b2db      	uxtb	r3, r3
 801470c:	2b00      	cmp	r3, #0
 801470e:	d009      	beq.n	8014724 <dhcp_parse_reply+0x3b4>
 8014710:	4b59      	ldr	r3, [pc, #356]	; (8014878 <dhcp_parse_reply+0x508>)
 8014712:	f240 623e 	movw	r2, #1598	; 0x63e
 8014716:	495d      	ldr	r1, [pc, #372]	; (801488c <dhcp_parse_reply+0x51c>)
 8014718:	4859      	ldr	r0, [pc, #356]	; (8014880 <dhcp_parse_reply+0x510>)
 801471a:	f003 f9df 	bl	8017adc <iprintf>
 801471e:	f06f 0305 	mvn.w	r3, #5
 8014722:	e0a5      	b.n	8014870 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8014724:	4a58      	ldr	r2, [pc, #352]	; (8014888 <dhcp_parse_reply+0x518>)
 8014726:	69bb      	ldr	r3, [r7, #24]
 8014728:	4413      	add	r3, r2
 801472a:	2201      	movs	r2, #1
 801472c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	4618      	mov	r0, r3
 8014732:	f7f8 f9ae 	bl	800ca92 <lwip_htonl>
 8014736:	4601      	mov	r1, r0
 8014738:	4a55      	ldr	r2, [pc, #340]	; (8014890 <dhcp_parse_reply+0x520>)
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8014740:	7fbb      	ldrb	r3, [r7, #30]
 8014742:	3b04      	subs	r3, #4
 8014744:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8014746:	8afb      	ldrh	r3, [r7, #22]
 8014748:	3304      	adds	r3, #4
 801474a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	3301      	adds	r3, #1
 8014750:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8014752:	e7ac      	b.n	80146ae <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8014754:	7fbb      	ldrb	r3, [r7, #30]
 8014756:	2b04      	cmp	r3, #4
 8014758:	d106      	bne.n	8014768 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	4618      	mov	r0, r3
 801475e:	f7f8 f998 	bl	800ca92 <lwip_htonl>
 8014762:	4603      	mov	r3, r0
 8014764:	60bb      	str	r3, [r7, #8]
 8014766:	e010      	b.n	801478a <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014768:	7fbb      	ldrb	r3, [r7, #30]
 801476a:	2b01      	cmp	r3, #1
 801476c:	d009      	beq.n	8014782 <dhcp_parse_reply+0x412>
 801476e:	4b42      	ldr	r3, [pc, #264]	; (8014878 <dhcp_parse_reply+0x508>)
 8014770:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8014774:	4947      	ldr	r1, [pc, #284]	; (8014894 <dhcp_parse_reply+0x524>)
 8014776:	4842      	ldr	r0, [pc, #264]	; (8014880 <dhcp_parse_reply+0x510>)
 8014778:	f003 f9b0 	bl	8017adc <iprintf>
 801477c:	f06f 0305 	mvn.w	r3, #5
 8014780:	e076      	b.n	8014870 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8014782:	f107 0308 	add.w	r3, r7, #8
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801478a:	4a3f      	ldr	r2, [pc, #252]	; (8014888 <dhcp_parse_reply+0x518>)
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	4413      	add	r3, r2
 8014790:	2201      	movs	r2, #1
 8014792:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8014794:	68ba      	ldr	r2, [r7, #8]
 8014796:	493e      	ldr	r1, [pc, #248]	; (8014890 <dhcp_parse_reply+0x520>)
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a0:	895b      	ldrh	r3, [r3, #10]
 80147a2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d323      	bcc.n	80147f0 <dhcp_parse_reply+0x480>
      offset -= q->len;
 80147a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147aa:	895b      	ldrh	r3, [r3, #10]
 80147ac:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80147ae:	1ad3      	subs	r3, r2, r3
 80147b0:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 80147b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b4:	895b      	ldrh	r3, [r3, #10]
 80147b6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80147b8:	1ad3      	subs	r3, r2, r3
 80147ba:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 80147bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80147be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d223      	bcs.n	801480c <dhcp_parse_reply+0x49c>
 80147c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d020      	beq.n	801480c <dhcp_parse_reply+0x49c>
        q = q->next;
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80147d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d109      	bne.n	80147ea <dhcp_parse_reply+0x47a>
 80147d6:	4b28      	ldr	r3, [pc, #160]	; (8014878 <dhcp_parse_reply+0x508>)
 80147d8:	f240 6254 	movw	r2, #1620	; 0x654
 80147dc:	492e      	ldr	r1, [pc, #184]	; (8014898 <dhcp_parse_reply+0x528>)
 80147de:	4828      	ldr	r0, [pc, #160]	; (8014880 <dhcp_parse_reply+0x510>)
 80147e0:	f003 f97c 	bl	8017adc <iprintf>
 80147e4:	f06f 0305 	mvn.w	r3, #5
 80147e8:	e042      	b.n	8014870 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 80147ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80147f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <dhcp_parse_reply+0x49c>
 80147f6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80147f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d206      	bcs.n	801480c <dhcp_parse_reply+0x49c>
 80147fe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014802:	4413      	add	r3, r2
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2bff      	cmp	r3, #255	; 0xff
 8014808:	f47f adf6 	bne.w	80143f8 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801480c:	4b1e      	ldr	r3, [pc, #120]	; (8014888 <dhcp_parse_reply+0x518>)
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d018      	beq.n	8014846 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014814:	4b1e      	ldr	r3, [pc, #120]	; (8014890 <dhcp_parse_reply+0x520>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801481a:	4b1b      	ldr	r3, [pc, #108]	; (8014888 <dhcp_parse_reply+0x518>)
 801481c:	2200      	movs	r2, #0
 801481e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b01      	cmp	r3, #1
 8014824:	d102      	bne.n	801482c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8014826:	2301      	movs	r3, #1
 8014828:	627b      	str	r3, [r7, #36]	; 0x24
 801482a:	e00c      	b.n	8014846 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2b02      	cmp	r3, #2
 8014830:	d102      	bne.n	8014838 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8014832:	2301      	movs	r3, #1
 8014834:	623b      	str	r3, [r7, #32]
 8014836:	e006      	b.n	8014846 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b03      	cmp	r3, #3
 801483c:	d103      	bne.n	8014846 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801483e:	2301      	movs	r3, #1
 8014840:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8014842:	2301      	movs	r3, #1
 8014844:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8014846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014848:	2b00      	cmp	r3, #0
 801484a:	d006      	beq.n	801485a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801484c:	2300      	movs	r3, #0
 801484e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8014850:	236c      	movs	r3, #108	; 0x6c
 8014852:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014854:	23ec      	movs	r3, #236	; 0xec
 8014856:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8014858:	e5a8      	b.n	80143ac <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801485a:	6a3b      	ldr	r3, [r7, #32]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d006      	beq.n	801486e <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8014860:	2300      	movs	r3, #0
 8014862:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8014864:	232c      	movs	r3, #44	; 0x2c
 8014866:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014868:	236c      	movs	r3, #108	; 0x6c
 801486a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 801486c:	e59e      	b.n	80143ac <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801486e:	2300      	movs	r3, #0
}
 8014870:	4618      	mov	r0, r3
 8014872:	3738      	adds	r7, #56	; 0x38
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	0801a000 	.word	0x0801a000
 801487c:	0801a298 	.word	0x0801a298
 8014880:	0801a060 	.word	0x0801a060
 8014884:	0801a2dc 	.word	0x0801a2dc
 8014888:	20008b8c 	.word	0x20008b8c
 801488c:	0801a2f0 	.word	0x0801a2f0
 8014890:	20008b94 	.word	0x20008b94
 8014894:	0801a308 	.word	0x0801a308
 8014898:	0801a31c 	.word	0x0801a31c

0801489c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b08a      	sub	sp, #40	; 0x28
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
 80148a8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80148aa:	4b68      	ldr	r3, [pc, #416]	; (8014a4c <dhcp_recv+0x1b0>)
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148b0:	6a3b      	ldr	r3, [r7, #32]
 80148b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	f000 80a9 	beq.w	8014a16 <dhcp_recv+0x17a>
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	7a1b      	ldrb	r3, [r3, #8]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	f000 80a4 	beq.w	8014a16 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d006      	beq.n	80148e4 <dhcp_recv+0x48>
 80148d6:	4b5e      	ldr	r3, [pc, #376]	; (8014a50 <dhcp_recv+0x1b4>)
 80148d8:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80148dc:	495d      	ldr	r1, [pc, #372]	; (8014a54 <dhcp_recv+0x1b8>)
 80148de:	485e      	ldr	r0, [pc, #376]	; (8014a58 <dhcp_recv+0x1bc>)
 80148e0:	f003 f8fc 	bl	8017adc <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	895b      	ldrh	r3, [r3, #10]
 80148e8:	2b2b      	cmp	r3, #43	; 0x2b
 80148ea:	f240 8096 	bls.w	8014a1a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	2b02      	cmp	r3, #2
 80148f4:	f040 8093 	bne.w	8014a1e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80148f8:	2300      	movs	r3, #0
 80148fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148fe:	e012      	b.n	8014926 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014904:	6a3a      	ldr	r2, [r7, #32]
 8014906:	4413      	add	r3, r2
 8014908:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801490c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014910:	69b9      	ldr	r1, [r7, #24]
 8014912:	440b      	add	r3, r1
 8014914:	7f1b      	ldrb	r3, [r3, #28]
 8014916:	429a      	cmp	r2, r3
 8014918:	f040 8083 	bne.w	8014a22 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801491c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014920:	3301      	adds	r3, #1
 8014922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014926:	6a3b      	ldr	r3, [r7, #32]
 8014928:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801492c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014930:	429a      	cmp	r2, r3
 8014932:	d207      	bcs.n	8014944 <dhcp_recv+0xa8>
 8014934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014938:	2b05      	cmp	r3, #5
 801493a:	d803      	bhi.n	8014944 <dhcp_recv+0xa8>
 801493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014940:	2b0f      	cmp	r3, #15
 8014942:	d9dd      	bls.n	8014900 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014944:	69bb      	ldr	r3, [r7, #24]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	f7f8 f8a2 	bl	800ca92 <lwip_htonl>
 801494e:	4602      	mov	r2, r0
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	429a      	cmp	r2, r3
 8014956:	d166      	bne.n	8014a26 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	69f8      	ldr	r0, [r7, #28]
 801495c:	f7ff fd08 	bl	8014370 <dhcp_parse_reply>
 8014960:	4603      	mov	r3, r0
 8014962:	2b00      	cmp	r3, #0
 8014964:	d161      	bne.n	8014a2a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014966:	4b3d      	ldr	r3, [pc, #244]	; (8014a5c <dhcp_recv+0x1c0>)
 8014968:	785b      	ldrb	r3, [r3, #1]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d05f      	beq.n	8014a2e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801496e:	4b3c      	ldr	r3, [pc, #240]	; (8014a60 <dhcp_recv+0x1c4>)
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014974:	7dfb      	ldrb	r3, [r7, #23]
 8014976:	2b05      	cmp	r3, #5
 8014978:	d128      	bne.n	80149cc <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801497a:	69fb      	ldr	r3, [r7, #28]
 801497c:	7a5b      	ldrb	r3, [r3, #9]
 801497e:	2b01      	cmp	r3, #1
 8014980:	d111      	bne.n	80149a6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8014982:	6a38      	ldr	r0, [r7, #32]
 8014984:	f7fe fea0 	bl	80136c8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014988:	6a3b      	ldr	r3, [r7, #32]
 801498a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801498e:	f003 0308 	and.w	r3, r3, #8
 8014992:	2b00      	cmp	r3, #0
 8014994:	d003      	beq.n	801499e <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014996:	6a38      	ldr	r0, [r7, #32]
 8014998:	f7fe fc68 	bl	801326c <dhcp_check>
 801499c:	e048      	b.n	8014a30 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801499e:	6a38      	ldr	r0, [r7, #32]
 80149a0:	f7ff f8a0 	bl	8013ae4 <dhcp_bind>
 80149a4:	e044      	b.n	8014a30 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	7a5b      	ldrb	r3, [r3, #9]
 80149aa:	2b03      	cmp	r3, #3
 80149ac:	d007      	beq.n	80149be <dhcp_recv+0x122>
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	7a5b      	ldrb	r3, [r3, #9]
 80149b2:	2b04      	cmp	r3, #4
 80149b4:	d003      	beq.n	80149be <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80149b6:	69fb      	ldr	r3, [r7, #28]
 80149b8:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80149ba:	2b05      	cmp	r3, #5
 80149bc:	d138      	bne.n	8014a30 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 80149be:	6a38      	ldr	r0, [r7, #32]
 80149c0:	f7fe fe82 	bl	80136c8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80149c4:	6a38      	ldr	r0, [r7, #32]
 80149c6:	f7ff f88d 	bl	8013ae4 <dhcp_bind>
 80149ca:	e031      	b.n	8014a30 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80149cc:	7dfb      	ldrb	r3, [r7, #23]
 80149ce:	2b06      	cmp	r3, #6
 80149d0:	d113      	bne.n	80149fa <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 80149d6:	2b03      	cmp	r3, #3
 80149d8:	d00b      	beq.n	80149f2 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80149da:	69fb      	ldr	r3, [r7, #28]
 80149dc:	7a5b      	ldrb	r3, [r3, #9]
 80149de:	2b01      	cmp	r3, #1
 80149e0:	d007      	beq.n	80149f2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80149e6:	2b04      	cmp	r3, #4
 80149e8:	d003      	beq.n	80149f2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80149ea:	69fb      	ldr	r3, [r7, #28]
 80149ec:	7a5b      	ldrb	r3, [r3, #9]
 80149ee:	2b05      	cmp	r3, #5
 80149f0:	d103      	bne.n	80149fa <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80149f2:	6a38      	ldr	r0, [r7, #32]
 80149f4:	f7fe fc20 	bl	8013238 <dhcp_handle_nak>
 80149f8:	e01a      	b.n	8014a30 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
 80149fc:	2b02      	cmp	r3, #2
 80149fe:	d10a      	bne.n	8014a16 <dhcp_recv+0x17a>
 8014a00:	69fb      	ldr	r3, [r7, #28]
 8014a02:	7a5b      	ldrb	r3, [r3, #9]
 8014a04:	2b06      	cmp	r3, #6
 8014a06:	d106      	bne.n	8014a16 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8014a0e:	6a38      	ldr	r0, [r7, #32]
 8014a10:	f7fe fc60 	bl	80132d4 <dhcp_handle_offer>
 8014a14:	e00c      	b.n	8014a30 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8014a16:	bf00      	nop
 8014a18:	e00a      	b.n	8014a30 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014a1a:	bf00      	nop
 8014a1c:	e008      	b.n	8014a30 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014a1e:	bf00      	nop
 8014a20:	e006      	b.n	8014a30 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8014a22:	bf00      	nop
 8014a24:	e004      	b.n	8014a30 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014a26:	bf00      	nop
 8014a28:	e002      	b.n	8014a30 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014a2a:	bf00      	nop
 8014a2c:	e000      	b.n	8014a30 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014a2e:	bf00      	nop
  if (dhcp != NULL) {
 8014a30:	69fb      	ldr	r3, [r7, #28]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d002      	beq.n	8014a3c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f9 f929 	bl	800dc94 <pbuf_free>
}
 8014a42:	bf00      	nop
 8014a44:	3728      	adds	r7, #40	; 0x28
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20005790 	.word	0x20005790
 8014a50:	0801a000 	.word	0x0801a000
 8014a54:	0801a12c 	.word	0x0801a12c
 8014a58:	0801a060 	.word	0x0801a060
 8014a5c:	20008b8c 	.word	0x20008b8c
 8014a60:	20008b94 	.word	0x20008b94

08014a64 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8014a64:	b590      	push	{r4, r7, lr}
 8014a66:	b087      	sub	sp, #28
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	4613      	mov	r3, r2
 8014a70:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d109      	bne.n	8014a8c <dhcp_create_msg+0x28>
 8014a78:	4ba3      	ldr	r3, [pc, #652]	; (8014d08 <dhcp_create_msg+0x2a4>)
 8014a7a:	f240 721d 	movw	r2, #1821	; 0x71d
 8014a7e:	49a3      	ldr	r1, [pc, #652]	; (8014d0c <dhcp_create_msg+0x2a8>)
 8014a80:	48a3      	ldr	r0, [pc, #652]	; (8014d10 <dhcp_create_msg+0x2ac>)
 8014a82:	f003 f82b 	bl	8017adc <iprintf>
 8014a86:	f06f 030f 	mvn.w	r3, #15
 8014a8a:	e138      	b.n	8014cfe <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d109      	bne.n	8014aa6 <dhcp_create_msg+0x42>
 8014a92:	4b9d      	ldr	r3, [pc, #628]	; (8014d08 <dhcp_create_msg+0x2a4>)
 8014a94:	f240 721e 	movw	r2, #1822	; 0x71e
 8014a98:	499e      	ldr	r1, [pc, #632]	; (8014d14 <dhcp_create_msg+0x2b0>)
 8014a9a:	489d      	ldr	r0, [pc, #628]	; (8014d10 <dhcp_create_msg+0x2ac>)
 8014a9c:	f003 f81e 	bl	8017adc <iprintf>
 8014aa0:	f06f 0305 	mvn.w	r3, #5
 8014aa4:	e12b      	b.n	8014cfe <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	68db      	ldr	r3, [r3, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d006      	beq.n	8014abc <dhcp_create_msg+0x58>
 8014aae:	4b96      	ldr	r3, [pc, #600]	; (8014d08 <dhcp_create_msg+0x2a4>)
 8014ab0:	f240 721f 	movw	r2, #1823	; 0x71f
 8014ab4:	4998      	ldr	r1, [pc, #608]	; (8014d18 <dhcp_create_msg+0x2b4>)
 8014ab6:	4896      	ldr	r0, [pc, #600]	; (8014d10 <dhcp_create_msg+0x2ac>)
 8014ab8:	f003 f810 	bl	8017adc <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	691b      	ldr	r3, [r3, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d006      	beq.n	8014ad2 <dhcp_create_msg+0x6e>
 8014ac4:	4b90      	ldr	r3, [pc, #576]	; (8014d08 <dhcp_create_msg+0x2a4>)
 8014ac6:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8014aca:	4994      	ldr	r1, [pc, #592]	; (8014d1c <dhcp_create_msg+0x2b8>)
 8014acc:	4890      	ldr	r0, [pc, #576]	; (8014d10 <dhcp_create_msg+0x2ac>)
 8014ace:	f003 f805 	bl	8017adc <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014ad8:	2000      	movs	r0, #0
 8014ada:	f7f8 fd69 	bl	800d5b0 <pbuf_alloc>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d102      	bne.n	8014af2 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8014aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014af0:	e105      	b.n	8014cfe <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	895b      	ldrh	r3, [r3, #10]
 8014af8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014afc:	d206      	bcs.n	8014b0c <dhcp_create_msg+0xa8>
 8014afe:	4b82      	ldr	r3, [pc, #520]	; (8014d08 <dhcp_create_msg+0x2a4>)
 8014b00:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014b04:	4986      	ldr	r1, [pc, #536]	; (8014d20 <dhcp_create_msg+0x2bc>)
 8014b06:	4882      	ldr	r0, [pc, #520]	; (8014d10 <dhcp_create_msg+0x2ac>)
 8014b08:	f002 ffe8 	bl	8017adc <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014b0c:	79fb      	ldrb	r3, [r7, #7]
 8014b0e:	2b03      	cmp	r3, #3
 8014b10:	d103      	bne.n	8014b1a <dhcp_create_msg+0xb6>
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	7a5b      	ldrb	r3, [r3, #9]
 8014b16:	2b03      	cmp	r3, #3
 8014b18:	d10d      	bne.n	8014b36 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	7a9b      	ldrb	r3, [r3, #10]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d105      	bne.n	8014b2e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014b22:	f003 f857 	bl	8017bd4 <rand>
 8014b26:	4603      	mov	r3, r0
 8014b28:	461a      	mov	r2, r3
 8014b2a:	4b7e      	ldr	r3, [pc, #504]	; (8014d24 <dhcp_create_msg+0x2c0>)
 8014b2c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014b2e:	4b7d      	ldr	r3, [pc, #500]	; (8014d24 <dhcp_create_msg+0x2c0>)
 8014b30:	681a      	ldr	r2, [r3, #0]
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	685a      	ldr	r2, [r3, #4]
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	691b      	ldr	r3, [r3, #16]
 8014b44:	2201      	movs	r2, #1
 8014b46:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	691b      	ldr	r3, [r3, #16]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	691b      	ldr	r3, [r3, #16]
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8014b5a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	691b      	ldr	r3, [r3, #16]
 8014b60:	2200      	movs	r2, #0
 8014b62:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	691c      	ldr	r4, [r3, #16]
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	f7f7 ff90 	bl	800ca92 <lwip_htonl>
 8014b72:	4603      	mov	r3, r0
 8014b74:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	691b      	ldr	r3, [r3, #16]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	721a      	strb	r2, [r3, #8]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	691b      	ldr	r3, [r3, #16]
 8014b86:	2200      	movs	r2, #0
 8014b88:	729a      	strb	r2, [r3, #10]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	691b      	ldr	r3, [r3, #16]
 8014b92:	2200      	movs	r2, #0
 8014b94:	731a      	strb	r2, [r3, #12]
 8014b96:	2200      	movs	r2, #0
 8014b98:	735a      	strb	r2, [r3, #13]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	739a      	strb	r2, [r3, #14]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014ba2:	79fb      	ldrb	r3, [r7, #7]
 8014ba4:	2b08      	cmp	r3, #8
 8014ba6:	d010      	beq.n	8014bca <dhcp_create_msg+0x166>
 8014ba8:	79fb      	ldrb	r3, [r7, #7]
 8014baa:	2b04      	cmp	r3, #4
 8014bac:	d00d      	beq.n	8014bca <dhcp_create_msg+0x166>
 8014bae:	79fb      	ldrb	r3, [r7, #7]
 8014bb0:	2b07      	cmp	r3, #7
 8014bb2:	d00a      	beq.n	8014bca <dhcp_create_msg+0x166>
 8014bb4:	79fb      	ldrb	r3, [r7, #7]
 8014bb6:	2b03      	cmp	r3, #3
 8014bb8:	d10d      	bne.n	8014bd6 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014bbe:	2b05      	cmp	r3, #5
 8014bc0:	d003      	beq.n	8014bca <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	7a5b      	ldrb	r3, [r3, #9]
 8014bc6:	2b04      	cmp	r3, #4
 8014bc8:	d105      	bne.n	8014bd6 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	1d1a      	adds	r2, r3, #4
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	6812      	ldr	r2, [r2, #0]
 8014bd4:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	741a      	strb	r2, [r3, #16]
 8014bde:	2200      	movs	r2, #0
 8014be0:	745a      	strb	r2, [r3, #17]
 8014be2:	2200      	movs	r2, #0
 8014be4:	749a      	strb	r2, [r3, #18]
 8014be6:	2200      	movs	r2, #0
 8014be8:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	691b      	ldr	r3, [r3, #16]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	751a      	strb	r2, [r3, #20]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	755a      	strb	r2, [r3, #21]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	759a      	strb	r2, [r3, #22]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	2200      	movs	r2, #0
 8014c04:	761a      	strb	r2, [r3, #24]
 8014c06:	2200      	movs	r2, #0
 8014c08:	765a      	strb	r2, [r3, #25]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	769a      	strb	r2, [r3, #26]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014c12:	2300      	movs	r3, #0
 8014c14:	82fb      	strh	r3, [r7, #22]
 8014c16:	e019      	b.n	8014c4c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014c1e:	b29b      	uxth	r3, r3
 8014c20:	8afa      	ldrh	r2, [r7, #22]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d208      	bcs.n	8014c38 <dhcp_create_msg+0x1d4>
 8014c26:	8afb      	ldrh	r3, [r7, #22]
 8014c28:	2b05      	cmp	r3, #5
 8014c2a:	d805      	bhi.n	8014c38 <dhcp_create_msg+0x1d4>
 8014c2c:	8afb      	ldrh	r3, [r7, #22]
 8014c2e:	68fa      	ldr	r2, [r7, #12]
 8014c30:	4413      	add	r3, r2
 8014c32:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8014c36:	e000      	b.n	8014c3a <dhcp_create_msg+0x1d6>
 8014c38:	2100      	movs	r1, #0
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	691a      	ldr	r2, [r3, #16]
 8014c3e:	8afb      	ldrh	r3, [r7, #22]
 8014c40:	4413      	add	r3, r2
 8014c42:	460a      	mov	r2, r1
 8014c44:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014c46:	8afb      	ldrh	r3, [r7, #22]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	82fb      	strh	r3, [r7, #22]
 8014c4c:	8afb      	ldrh	r3, [r7, #22]
 8014c4e:	2b0f      	cmp	r3, #15
 8014c50:	d9e2      	bls.n	8014c18 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014c52:	2300      	movs	r3, #0
 8014c54:	82fb      	strh	r3, [r7, #22]
 8014c56:	e009      	b.n	8014c6c <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	691a      	ldr	r2, [r3, #16]
 8014c5c:	8afb      	ldrh	r3, [r7, #22]
 8014c5e:	4413      	add	r3, r2
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014c66:	8afb      	ldrh	r3, [r7, #22]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	82fb      	strh	r3, [r7, #22]
 8014c6c:	8afb      	ldrh	r3, [r7, #22]
 8014c6e:	2b3f      	cmp	r3, #63	; 0x3f
 8014c70:	d9f2      	bls.n	8014c58 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014c72:	2300      	movs	r3, #0
 8014c74:	82fb      	strh	r3, [r7, #22]
 8014c76:	e009      	b.n	8014c8c <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8014c78:	68bb      	ldr	r3, [r7, #8]
 8014c7a:	691a      	ldr	r2, [r3, #16]
 8014c7c:	8afb      	ldrh	r3, [r7, #22]
 8014c7e:	4413      	add	r3, r2
 8014c80:	2200      	movs	r2, #0
 8014c82:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014c86:	8afb      	ldrh	r3, [r7, #22]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	82fb      	strh	r3, [r7, #22]
 8014c8c:	8afb      	ldrh	r3, [r7, #22]
 8014c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8014c90:	d9f2      	bls.n	8014c78 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	691b      	ldr	r3, [r3, #16]
 8014c96:	2200      	movs	r2, #0
 8014c98:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014c9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8014ca6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014caa:	2200      	movs	r2, #0
 8014cac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014cb0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014cba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	82fb      	strh	r3, [r7, #22]
 8014cc8:	e00b      	b.n	8014ce2 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	691a      	ldr	r2, [r3, #16]
 8014cce:	8afb      	ldrh	r3, [r7, #22]
 8014cd0:	8af9      	ldrh	r1, [r7, #22]
 8014cd2:	b2c9      	uxtb	r1, r1
 8014cd4:	4413      	add	r3, r2
 8014cd6:	460a      	mov	r2, r1
 8014cd8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014cdc:	8afb      	ldrh	r3, [r7, #22]
 8014cde:	3301      	adds	r3, #1
 8014ce0:	82fb      	strh	r3, [r7, #22]
 8014ce2:	8afb      	ldrh	r3, [r7, #22]
 8014ce4:	2b43      	cmp	r3, #67	; 0x43
 8014ce6:	d9f0      	bls.n	8014cca <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014ce8:	2201      	movs	r2, #1
 8014cea:	2135      	movs	r1, #53	; 0x35
 8014cec:	68b8      	ldr	r0, [r7, #8]
 8014cee:	f7ff fa4d 	bl	801418c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8014cf2:	79fb      	ldrb	r3, [r7, #7]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	68b8      	ldr	r0, [r7, #8]
 8014cf8:	f7ff fa82 	bl	8014200 <dhcp_option_byte>
  return ERR_OK;
 8014cfc:	2300      	movs	r3, #0
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	371c      	adds	r7, #28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd90      	pop	{r4, r7, pc}
 8014d06:	bf00      	nop
 8014d08:	0801a000 	.word	0x0801a000
 8014d0c:	0801a330 	.word	0x0801a330
 8014d10:	0801a060 	.word	0x0801a060
 8014d14:	0801a350 	.word	0x0801a350
 8014d18:	0801a370 	.word	0x0801a370
 8014d1c:	0801a398 	.word	0x0801a398
 8014d20:	0801a3c0 	.word	0x0801a3c0
 8014d24:	20000184 	.word	0x20000184

08014d28 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d107      	bne.n	8014d46 <dhcp_delete_msg+0x1e>
 8014d36:	4b18      	ldr	r3, [pc, #96]	; (8014d98 <dhcp_delete_msg+0x70>)
 8014d38:	f240 726d 	movw	r2, #1901	; 0x76d
 8014d3c:	4917      	ldr	r1, [pc, #92]	; (8014d9c <dhcp_delete_msg+0x74>)
 8014d3e:	4818      	ldr	r0, [pc, #96]	; (8014da0 <dhcp_delete_msg+0x78>)
 8014d40:	f002 fecc 	bl	8017adc <iprintf>
 8014d44:	e024      	b.n	8014d90 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d106      	bne.n	8014d5c <dhcp_delete_msg+0x34>
 8014d4e:	4b12      	ldr	r3, [pc, #72]	; (8014d98 <dhcp_delete_msg+0x70>)
 8014d50:	f240 726e 	movw	r2, #1902	; 0x76e
 8014d54:	4913      	ldr	r1, [pc, #76]	; (8014da4 <dhcp_delete_msg+0x7c>)
 8014d56:	4812      	ldr	r0, [pc, #72]	; (8014da0 <dhcp_delete_msg+0x78>)
 8014d58:	f002 fec0 	bl	8017adc <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	691b      	ldr	r3, [r3, #16]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d106      	bne.n	8014d72 <dhcp_delete_msg+0x4a>
 8014d64:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <dhcp_delete_msg+0x70>)
 8014d66:	f240 726f 	movw	r2, #1903	; 0x76f
 8014d6a:	490f      	ldr	r1, [pc, #60]	; (8014da8 <dhcp_delete_msg+0x80>)
 8014d6c:	480c      	ldr	r0, [pc, #48]	; (8014da0 <dhcp_delete_msg+0x78>)
 8014d6e:	f002 feb5 	bl	8017adc <iprintf>
  if (dhcp->p_out != NULL) {
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d004      	beq.n	8014d84 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f8 ff88 	bl	800dc94 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2200      	movs	r2, #0
 8014d88:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	611a      	str	r2, [r3, #16]
}
 8014d90:	3708      	adds	r7, #8
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	0801a000 	.word	0x0801a000
 8014d9c:	0801a400 	.word	0x0801a400
 8014da0:	0801a060 	.word	0x0801a060
 8014da4:	0801a420 	.word	0x0801a420
 8014da8:	0801a448 	.word	0x0801a448

08014dac <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d107      	bne.n	8014dca <dhcp_option_trailer+0x1e>
 8014dba:	4b24      	ldr	r3, [pc, #144]	; (8014e4c <dhcp_option_trailer+0xa0>)
 8014dbc:	f240 7282 	movw	r2, #1922	; 0x782
 8014dc0:	4923      	ldr	r1, [pc, #140]	; (8014e50 <dhcp_option_trailer+0xa4>)
 8014dc2:	4824      	ldr	r0, [pc, #144]	; (8014e54 <dhcp_option_trailer+0xa8>)
 8014dc4:	f002 fe8a 	bl	8017adc <iprintf>
 8014dc8:	e03c      	b.n	8014e44 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	691b      	ldr	r3, [r3, #16]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d106      	bne.n	8014de0 <dhcp_option_trailer+0x34>
 8014dd2:	4b1e      	ldr	r3, [pc, #120]	; (8014e4c <dhcp_option_trailer+0xa0>)
 8014dd4:	f240 7283 	movw	r2, #1923	; 0x783
 8014dd8:	491f      	ldr	r1, [pc, #124]	; (8014e58 <dhcp_option_trailer+0xac>)
 8014dda:	481e      	ldr	r0, [pc, #120]	; (8014e54 <dhcp_option_trailer+0xa8>)
 8014ddc:	f002 fe7e 	bl	8017adc <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	8a9b      	ldrh	r3, [r3, #20]
 8014de4:	2b43      	cmp	r3, #67	; 0x43
 8014de6:	d906      	bls.n	8014df6 <dhcp_option_trailer+0x4a>
 8014de8:	4b18      	ldr	r3, [pc, #96]	; (8014e4c <dhcp_option_trailer+0xa0>)
 8014dea:	f240 7284 	movw	r2, #1924	; 0x784
 8014dee:	491b      	ldr	r1, [pc, #108]	; (8014e5c <dhcp_option_trailer+0xb0>)
 8014df0:	4818      	ldr	r0, [pc, #96]	; (8014e54 <dhcp_option_trailer+0xa8>)
 8014df2:	f002 fe73 	bl	8017adc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	691a      	ldr	r2, [r3, #16]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	8a9b      	ldrh	r3, [r3, #20]
 8014dfe:	1c59      	adds	r1, r3, #1
 8014e00:	b288      	uxth	r0, r1
 8014e02:	6879      	ldr	r1, [r7, #4]
 8014e04:	8288      	strh	r0, [r1, #20]
 8014e06:	4413      	add	r3, r2
 8014e08:	22ff      	movs	r2, #255	; 0xff
 8014e0a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014e0e:	e00b      	b.n	8014e28 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	691a      	ldr	r2, [r3, #16]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	8a9b      	ldrh	r3, [r3, #20]
 8014e18:	1c59      	adds	r1, r3, #1
 8014e1a:	b288      	uxth	r0, r1
 8014e1c:	6879      	ldr	r1, [r7, #4]
 8014e1e:	8288      	strh	r0, [r1, #20]
 8014e20:	4413      	add	r3, r2
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	8a9b      	ldrh	r3, [r3, #20]
 8014e2c:	2b43      	cmp	r3, #67	; 0x43
 8014e2e:	d905      	bls.n	8014e3c <dhcp_option_trailer+0x90>
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	8a9b      	ldrh	r3, [r3, #20]
 8014e34:	f003 0303 	and.w	r3, r3, #3
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d003      	beq.n	8014e44 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014e40:	2b43      	cmp	r3, #67	; 0x43
 8014e42:	d9e5      	bls.n	8014e10 <dhcp_option_trailer+0x64>
  }
}
 8014e44:	3708      	adds	r7, #8
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	0801a000 	.word	0x0801a000
 8014e50:	0801a470 	.word	0x0801a470
 8014e54:	0801a060 	.word	0x0801a060
 8014e58:	0801a494 	.word	0x0801a494
 8014e5c:	0801a4c0 	.word	0x0801a4c0

08014e60 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b085      	sub	sp, #20
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d017      	beq.n	8014e9e <dhcp_supplied_address+0x3e>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d013      	beq.n	8014e9e <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e7a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	7a5b      	ldrb	r3, [r3, #9]
 8014e80:	2b0a      	cmp	r3, #10
 8014e82:	d007      	beq.n	8014e94 <dhcp_supplied_address+0x34>
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	7a5b      	ldrb	r3, [r3, #9]
 8014e88:	2b05      	cmp	r3, #5
 8014e8a:	d003      	beq.n	8014e94 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014e90:	2b04      	cmp	r3, #4
 8014e92:	d101      	bne.n	8014e98 <dhcp_supplied_address+0x38>
 8014e94:	2301      	movs	r3, #1
 8014e96:	e000      	b.n	8014e9a <dhcp_supplied_address+0x3a>
 8014e98:	2300      	movs	r3, #0
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	e000      	b.n	8014ea0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3714      	adds	r7, #20
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bc80      	pop	{r7}
 8014ea8:	4770      	bx	lr
	...

08014eac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014eb4:	4915      	ldr	r1, [pc, #84]	; (8014f0c <etharp_free_entry+0x60>)
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	4613      	mov	r3, r2
 8014eba:	005b      	lsls	r3, r3, #1
 8014ebc:	4413      	add	r3, r2
 8014ebe:	00db      	lsls	r3, r3, #3
 8014ec0:	440b      	add	r3, r1
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d013      	beq.n	8014ef0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014ec8:	4910      	ldr	r1, [pc, #64]	; (8014f0c <etharp_free_entry+0x60>)
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	4613      	mov	r3, r2
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	440b      	add	r3, r1
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7f8 fedb 	bl	800dc94 <pbuf_free>
    arp_table[i].q = NULL;
 8014ede:	490b      	ldr	r1, [pc, #44]	; (8014f0c <etharp_free_entry+0x60>)
 8014ee0:	687a      	ldr	r2, [r7, #4]
 8014ee2:	4613      	mov	r3, r2
 8014ee4:	005b      	lsls	r3, r3, #1
 8014ee6:	4413      	add	r3, r2
 8014ee8:	00db      	lsls	r3, r3, #3
 8014eea:	440b      	add	r3, r1
 8014eec:	2200      	movs	r2, #0
 8014eee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014ef0:	4906      	ldr	r1, [pc, #24]	; (8014f0c <etharp_free_entry+0x60>)
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	4413      	add	r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	440b      	add	r3, r1
 8014efe:	3314      	adds	r3, #20
 8014f00:	2200      	movs	r2, #0
 8014f02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	20000188 	.word	0x20000188

08014f10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f16:	2300      	movs	r3, #0
 8014f18:	71fb      	strb	r3, [r7, #7]
 8014f1a:	e096      	b.n	801504a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014f1c:	79fa      	ldrb	r2, [r7, #7]
 8014f1e:	494f      	ldr	r1, [pc, #316]	; (801505c <etharp_tmr+0x14c>)
 8014f20:	4613      	mov	r3, r2
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	4413      	add	r3, r2
 8014f26:	00db      	lsls	r3, r3, #3
 8014f28:	440b      	add	r3, r1
 8014f2a:	3314      	adds	r3, #20
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8014f30:	79bb      	ldrb	r3, [r7, #6]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f000 8086 	beq.w	8015044 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014f38:	79fa      	ldrb	r2, [r7, #7]
 8014f3a:	4948      	ldr	r1, [pc, #288]	; (801505c <etharp_tmr+0x14c>)
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	005b      	lsls	r3, r3, #1
 8014f40:	4413      	add	r3, r2
 8014f42:	00db      	lsls	r3, r3, #3
 8014f44:	440b      	add	r3, r1
 8014f46:	3312      	adds	r3, #18
 8014f48:	881b      	ldrh	r3, [r3, #0]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	b298      	uxth	r0, r3
 8014f4e:	4943      	ldr	r1, [pc, #268]	; (801505c <etharp_tmr+0x14c>)
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	3312      	adds	r3, #18
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f60:	79fa      	ldrb	r2, [r7, #7]
 8014f62:	493e      	ldr	r1, [pc, #248]	; (801505c <etharp_tmr+0x14c>)
 8014f64:	4613      	mov	r3, r2
 8014f66:	005b      	lsls	r3, r3, #1
 8014f68:	4413      	add	r3, r2
 8014f6a:	00db      	lsls	r3, r3, #3
 8014f6c:	440b      	add	r3, r1
 8014f6e:	3312      	adds	r3, #18
 8014f70:	881b      	ldrh	r3, [r3, #0]
 8014f72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f76:	d215      	bcs.n	8014fa4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f78:	79fa      	ldrb	r2, [r7, #7]
 8014f7a:	4938      	ldr	r1, [pc, #224]	; (801505c <etharp_tmr+0x14c>)
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	00db      	lsls	r3, r3, #3
 8014f84:	440b      	add	r3, r1
 8014f86:	3314      	adds	r3, #20
 8014f88:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	d10f      	bne.n	8014fae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014f8e:	79fa      	ldrb	r2, [r7, #7]
 8014f90:	4932      	ldr	r1, [pc, #200]	; (801505c <etharp_tmr+0x14c>)
 8014f92:	4613      	mov	r3, r2
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	4413      	add	r3, r2
 8014f98:	00db      	lsls	r3, r3, #3
 8014f9a:	440b      	add	r3, r1
 8014f9c:	3312      	adds	r3, #18
 8014f9e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014fa0:	2b04      	cmp	r3, #4
 8014fa2:	d904      	bls.n	8014fae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014fa4:	79fb      	ldrb	r3, [r7, #7]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7ff ff80 	bl	8014eac <etharp_free_entry>
 8014fac:	e04a      	b.n	8015044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014fae:	79fa      	ldrb	r2, [r7, #7]
 8014fb0:	492a      	ldr	r1, [pc, #168]	; (801505c <etharp_tmr+0x14c>)
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	440b      	add	r3, r1
 8014fbc:	3314      	adds	r3, #20
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	2b03      	cmp	r3, #3
 8014fc2:	d10a      	bne.n	8014fda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014fc4:	79fa      	ldrb	r2, [r7, #7]
 8014fc6:	4925      	ldr	r1, [pc, #148]	; (801505c <etharp_tmr+0x14c>)
 8014fc8:	4613      	mov	r3, r2
 8014fca:	005b      	lsls	r3, r3, #1
 8014fcc:	4413      	add	r3, r2
 8014fce:	00db      	lsls	r3, r3, #3
 8014fd0:	440b      	add	r3, r1
 8014fd2:	3314      	adds	r3, #20
 8014fd4:	2204      	movs	r2, #4
 8014fd6:	701a      	strb	r2, [r3, #0]
 8014fd8:	e034      	b.n	8015044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014fda:	79fa      	ldrb	r2, [r7, #7]
 8014fdc:	491f      	ldr	r1, [pc, #124]	; (801505c <etharp_tmr+0x14c>)
 8014fde:	4613      	mov	r3, r2
 8014fe0:	005b      	lsls	r3, r3, #1
 8014fe2:	4413      	add	r3, r2
 8014fe4:	00db      	lsls	r3, r3, #3
 8014fe6:	440b      	add	r3, r1
 8014fe8:	3314      	adds	r3, #20
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	2b04      	cmp	r3, #4
 8014fee:	d10a      	bne.n	8015006 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014ff0:	79fa      	ldrb	r2, [r7, #7]
 8014ff2:	491a      	ldr	r1, [pc, #104]	; (801505c <etharp_tmr+0x14c>)
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	005b      	lsls	r3, r3, #1
 8014ff8:	4413      	add	r3, r2
 8014ffa:	00db      	lsls	r3, r3, #3
 8014ffc:	440b      	add	r3, r1
 8014ffe:	3314      	adds	r3, #20
 8015000:	2202      	movs	r2, #2
 8015002:	701a      	strb	r2, [r3, #0]
 8015004:	e01e      	b.n	8015044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015006:	79fa      	ldrb	r2, [r7, #7]
 8015008:	4914      	ldr	r1, [pc, #80]	; (801505c <etharp_tmr+0x14c>)
 801500a:	4613      	mov	r3, r2
 801500c:	005b      	lsls	r3, r3, #1
 801500e:	4413      	add	r3, r2
 8015010:	00db      	lsls	r3, r3, #3
 8015012:	440b      	add	r3, r1
 8015014:	3314      	adds	r3, #20
 8015016:	781b      	ldrb	r3, [r3, #0]
 8015018:	2b01      	cmp	r3, #1
 801501a:	d113      	bne.n	8015044 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801501c:	79fa      	ldrb	r2, [r7, #7]
 801501e:	490f      	ldr	r1, [pc, #60]	; (801505c <etharp_tmr+0x14c>)
 8015020:	4613      	mov	r3, r2
 8015022:	005b      	lsls	r3, r3, #1
 8015024:	4413      	add	r3, r2
 8015026:	00db      	lsls	r3, r3, #3
 8015028:	440b      	add	r3, r1
 801502a:	3308      	adds	r3, #8
 801502c:	6818      	ldr	r0, [r3, #0]
 801502e:	79fa      	ldrb	r2, [r7, #7]
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	4a08      	ldr	r2, [pc, #32]	; (801505c <etharp_tmr+0x14c>)
 801503a:	4413      	add	r3, r2
 801503c:	3304      	adds	r3, #4
 801503e:	4619      	mov	r1, r3
 8015040:	f000 fe3c 	bl	8015cbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015044:	79fb      	ldrb	r3, [r7, #7]
 8015046:	3301      	adds	r3, #1
 8015048:	71fb      	strb	r3, [r7, #7]
 801504a:	79fb      	ldrb	r3, [r7, #7]
 801504c:	2b09      	cmp	r3, #9
 801504e:	f67f af65 	bls.w	8014f1c <etharp_tmr+0xc>
      }
    }
  }
}
 8015052:	bf00      	nop
 8015054:	3708      	adds	r7, #8
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	20000188 	.word	0x20000188

08015060 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b088      	sub	sp, #32
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	460b      	mov	r3, r1
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801506e:	230a      	movs	r3, #10
 8015070:	77fb      	strb	r3, [r7, #31]
 8015072:	230a      	movs	r3, #10
 8015074:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8015076:	230a      	movs	r3, #10
 8015078:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801507a:	2300      	movs	r3, #0
 801507c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801507e:	230a      	movs	r3, #10
 8015080:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015082:	2300      	movs	r3, #0
 8015084:	833b      	strh	r3, [r7, #24]
 8015086:	2300      	movs	r3, #0
 8015088:	82fb      	strh	r3, [r7, #22]
 801508a:	2300      	movs	r3, #0
 801508c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801508e:	2300      	movs	r3, #0
 8015090:	773b      	strb	r3, [r7, #28]
 8015092:	e093      	b.n	80151bc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8015094:	7f3a      	ldrb	r2, [r7, #28]
 8015096:	4990      	ldr	r1, [pc, #576]	; (80152d8 <etharp_find_entry+0x278>)
 8015098:	4613      	mov	r3, r2
 801509a:	005b      	lsls	r3, r3, #1
 801509c:	4413      	add	r3, r2
 801509e:	00db      	lsls	r3, r3, #3
 80150a0:	440b      	add	r3, r1
 80150a2:	3314      	adds	r3, #20
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80150a8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80150ac:	2b0a      	cmp	r3, #10
 80150ae:	d105      	bne.n	80150bc <etharp_find_entry+0x5c>
 80150b0:	7cfb      	ldrb	r3, [r7, #19]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d102      	bne.n	80150bc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80150b6:	7f3b      	ldrb	r3, [r7, #28]
 80150b8:	777b      	strb	r3, [r7, #29]
 80150ba:	e07c      	b.n	80151b6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80150bc:	7cfb      	ldrb	r3, [r7, #19]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d079      	beq.n	80151b6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80150c2:	7cfb      	ldrb	r3, [r7, #19]
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d009      	beq.n	80150dc <etharp_find_entry+0x7c>
 80150c8:	7cfb      	ldrb	r3, [r7, #19]
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	d806      	bhi.n	80150dc <etharp_find_entry+0x7c>
 80150ce:	4b83      	ldr	r3, [pc, #524]	; (80152dc <etharp_find_entry+0x27c>)
 80150d0:	f44f 7293 	mov.w	r2, #294	; 0x126
 80150d4:	4982      	ldr	r1, [pc, #520]	; (80152e0 <etharp_find_entry+0x280>)
 80150d6:	4883      	ldr	r0, [pc, #524]	; (80152e4 <etharp_find_entry+0x284>)
 80150d8:	f002 fd00 	bl	8017adc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d00f      	beq.n	8015102 <etharp_find_entry+0xa2>
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	6819      	ldr	r1, [r3, #0]
 80150e6:	7f3a      	ldrb	r2, [r7, #28]
 80150e8:	487b      	ldr	r0, [pc, #492]	; (80152d8 <etharp_find_entry+0x278>)
 80150ea:	4613      	mov	r3, r2
 80150ec:	005b      	lsls	r3, r3, #1
 80150ee:	4413      	add	r3, r2
 80150f0:	00db      	lsls	r3, r3, #3
 80150f2:	4403      	add	r3, r0
 80150f4:	3304      	adds	r3, #4
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4299      	cmp	r1, r3
 80150fa:	d102      	bne.n	8015102 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80150fc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015100:	e0e5      	b.n	80152ce <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015102:	7cfb      	ldrb	r3, [r7, #19]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d13b      	bne.n	8015180 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015108:	7f3a      	ldrb	r2, [r7, #28]
 801510a:	4973      	ldr	r1, [pc, #460]	; (80152d8 <etharp_find_entry+0x278>)
 801510c:	4613      	mov	r3, r2
 801510e:	005b      	lsls	r3, r3, #1
 8015110:	4413      	add	r3, r2
 8015112:	00db      	lsls	r3, r3, #3
 8015114:	440b      	add	r3, r1
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d018      	beq.n	801514e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801511c:	7f3a      	ldrb	r2, [r7, #28]
 801511e:	496e      	ldr	r1, [pc, #440]	; (80152d8 <etharp_find_entry+0x278>)
 8015120:	4613      	mov	r3, r2
 8015122:	005b      	lsls	r3, r3, #1
 8015124:	4413      	add	r3, r2
 8015126:	00db      	lsls	r3, r3, #3
 8015128:	440b      	add	r3, r1
 801512a:	3312      	adds	r3, #18
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	8b3a      	ldrh	r2, [r7, #24]
 8015130:	429a      	cmp	r2, r3
 8015132:	d840      	bhi.n	80151b6 <etharp_find_entry+0x156>
            old_queue = i;
 8015134:	7f3b      	ldrb	r3, [r7, #28]
 8015136:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8015138:	7f3a      	ldrb	r2, [r7, #28]
 801513a:	4967      	ldr	r1, [pc, #412]	; (80152d8 <etharp_find_entry+0x278>)
 801513c:	4613      	mov	r3, r2
 801513e:	005b      	lsls	r3, r3, #1
 8015140:	4413      	add	r3, r2
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	440b      	add	r3, r1
 8015146:	3312      	adds	r3, #18
 8015148:	881b      	ldrh	r3, [r3, #0]
 801514a:	833b      	strh	r3, [r7, #24]
 801514c:	e033      	b.n	80151b6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801514e:	7f3a      	ldrb	r2, [r7, #28]
 8015150:	4961      	ldr	r1, [pc, #388]	; (80152d8 <etharp_find_entry+0x278>)
 8015152:	4613      	mov	r3, r2
 8015154:	005b      	lsls	r3, r3, #1
 8015156:	4413      	add	r3, r2
 8015158:	00db      	lsls	r3, r3, #3
 801515a:	440b      	add	r3, r1
 801515c:	3312      	adds	r3, #18
 801515e:	881b      	ldrh	r3, [r3, #0]
 8015160:	8afa      	ldrh	r2, [r7, #22]
 8015162:	429a      	cmp	r2, r3
 8015164:	d827      	bhi.n	80151b6 <etharp_find_entry+0x156>
            old_pending = i;
 8015166:	7f3b      	ldrb	r3, [r7, #28]
 8015168:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801516a:	7f3a      	ldrb	r2, [r7, #28]
 801516c:	495a      	ldr	r1, [pc, #360]	; (80152d8 <etharp_find_entry+0x278>)
 801516e:	4613      	mov	r3, r2
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	4413      	add	r3, r2
 8015174:	00db      	lsls	r3, r3, #3
 8015176:	440b      	add	r3, r1
 8015178:	3312      	adds	r3, #18
 801517a:	881b      	ldrh	r3, [r3, #0]
 801517c:	82fb      	strh	r3, [r7, #22]
 801517e:	e01a      	b.n	80151b6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015180:	7cfb      	ldrb	r3, [r7, #19]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d917      	bls.n	80151b6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015186:	7f3a      	ldrb	r2, [r7, #28]
 8015188:	4953      	ldr	r1, [pc, #332]	; (80152d8 <etharp_find_entry+0x278>)
 801518a:	4613      	mov	r3, r2
 801518c:	005b      	lsls	r3, r3, #1
 801518e:	4413      	add	r3, r2
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	440b      	add	r3, r1
 8015194:	3312      	adds	r3, #18
 8015196:	881b      	ldrh	r3, [r3, #0]
 8015198:	8aba      	ldrh	r2, [r7, #20]
 801519a:	429a      	cmp	r2, r3
 801519c:	d80b      	bhi.n	80151b6 <etharp_find_entry+0x156>
            old_stable = i;
 801519e:	7f3b      	ldrb	r3, [r7, #28]
 80151a0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80151a2:	7f3a      	ldrb	r2, [r7, #28]
 80151a4:	494c      	ldr	r1, [pc, #304]	; (80152d8 <etharp_find_entry+0x278>)
 80151a6:	4613      	mov	r3, r2
 80151a8:	005b      	lsls	r3, r3, #1
 80151aa:	4413      	add	r3, r2
 80151ac:	00db      	lsls	r3, r3, #3
 80151ae:	440b      	add	r3, r1
 80151b0:	3312      	adds	r3, #18
 80151b2:	881b      	ldrh	r3, [r3, #0]
 80151b4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151b6:	7f3b      	ldrb	r3, [r7, #28]
 80151b8:	3301      	adds	r3, #1
 80151ba:	773b      	strb	r3, [r7, #28]
 80151bc:	7f3b      	ldrb	r3, [r7, #28]
 80151be:	2b09      	cmp	r3, #9
 80151c0:	f67f af68 	bls.w	8015094 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80151c4:	7afb      	ldrb	r3, [r7, #11]
 80151c6:	f003 0302 	and.w	r3, r3, #2
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d108      	bne.n	80151e0 <etharp_find_entry+0x180>
 80151ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80151d2:	2b0a      	cmp	r3, #10
 80151d4:	d107      	bne.n	80151e6 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80151d6:	7afb      	ldrb	r3, [r7, #11]
 80151d8:	f003 0301 	and.w	r3, r3, #1
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d102      	bne.n	80151e6 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80151e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151e4:	e073      	b.n	80152ce <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80151e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80151ea:	2b09      	cmp	r3, #9
 80151ec:	dc02      	bgt.n	80151f4 <etharp_find_entry+0x194>
    i = empty;
 80151ee:	7f7b      	ldrb	r3, [r7, #29]
 80151f0:	773b      	strb	r3, [r7, #28]
 80151f2:	e036      	b.n	8015262 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80151f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80151f8:	2b09      	cmp	r3, #9
 80151fa:	dc13      	bgt.n	8015224 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80151fc:	7fbb      	ldrb	r3, [r7, #30]
 80151fe:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015200:	7f3a      	ldrb	r2, [r7, #28]
 8015202:	4935      	ldr	r1, [pc, #212]	; (80152d8 <etharp_find_entry+0x278>)
 8015204:	4613      	mov	r3, r2
 8015206:	005b      	lsls	r3, r3, #1
 8015208:	4413      	add	r3, r2
 801520a:	00db      	lsls	r3, r3, #3
 801520c:	440b      	add	r3, r1
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d018      	beq.n	8015246 <etharp_find_entry+0x1e6>
 8015214:	4b31      	ldr	r3, [pc, #196]	; (80152dc <etharp_find_entry+0x27c>)
 8015216:	f240 126f 	movw	r2, #367	; 0x16f
 801521a:	4933      	ldr	r1, [pc, #204]	; (80152e8 <etharp_find_entry+0x288>)
 801521c:	4831      	ldr	r0, [pc, #196]	; (80152e4 <etharp_find_entry+0x284>)
 801521e:	f002 fc5d 	bl	8017adc <iprintf>
 8015222:	e010      	b.n	8015246 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015228:	2b09      	cmp	r3, #9
 801522a:	dc02      	bgt.n	8015232 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801522c:	7ffb      	ldrb	r3, [r7, #31]
 801522e:	773b      	strb	r3, [r7, #28]
 8015230:	e009      	b.n	8015246 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015232:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015236:	2b09      	cmp	r3, #9
 8015238:	dc02      	bgt.n	8015240 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801523a:	7efb      	ldrb	r3, [r7, #27]
 801523c:	773b      	strb	r3, [r7, #28]
 801523e:	e002      	b.n	8015246 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8015240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015244:	e043      	b.n	80152ce <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015246:	7f3b      	ldrb	r3, [r7, #28]
 8015248:	2b09      	cmp	r3, #9
 801524a:	d906      	bls.n	801525a <etharp_find_entry+0x1fa>
 801524c:	4b23      	ldr	r3, [pc, #140]	; (80152dc <etharp_find_entry+0x27c>)
 801524e:	f240 1281 	movw	r2, #385	; 0x181
 8015252:	4926      	ldr	r1, [pc, #152]	; (80152ec <etharp_find_entry+0x28c>)
 8015254:	4823      	ldr	r0, [pc, #140]	; (80152e4 <etharp_find_entry+0x284>)
 8015256:	f002 fc41 	bl	8017adc <iprintf>
    etharp_free_entry(i);
 801525a:	7f3b      	ldrb	r3, [r7, #28]
 801525c:	4618      	mov	r0, r3
 801525e:	f7ff fe25 	bl	8014eac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015262:	7f3b      	ldrb	r3, [r7, #28]
 8015264:	2b09      	cmp	r3, #9
 8015266:	d906      	bls.n	8015276 <etharp_find_entry+0x216>
 8015268:	4b1c      	ldr	r3, [pc, #112]	; (80152dc <etharp_find_entry+0x27c>)
 801526a:	f240 1285 	movw	r2, #389	; 0x185
 801526e:	491f      	ldr	r1, [pc, #124]	; (80152ec <etharp_find_entry+0x28c>)
 8015270:	481c      	ldr	r0, [pc, #112]	; (80152e4 <etharp_find_entry+0x284>)
 8015272:	f002 fc33 	bl	8017adc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015276:	7f3a      	ldrb	r2, [r7, #28]
 8015278:	4917      	ldr	r1, [pc, #92]	; (80152d8 <etharp_find_entry+0x278>)
 801527a:	4613      	mov	r3, r2
 801527c:	005b      	lsls	r3, r3, #1
 801527e:	4413      	add	r3, r2
 8015280:	00db      	lsls	r3, r3, #3
 8015282:	440b      	add	r3, r1
 8015284:	3314      	adds	r3, #20
 8015286:	781b      	ldrb	r3, [r3, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d006      	beq.n	801529a <etharp_find_entry+0x23a>
 801528c:	4b13      	ldr	r3, [pc, #76]	; (80152dc <etharp_find_entry+0x27c>)
 801528e:	f240 1287 	movw	r2, #391	; 0x187
 8015292:	4917      	ldr	r1, [pc, #92]	; (80152f0 <etharp_find_entry+0x290>)
 8015294:	4813      	ldr	r0, [pc, #76]	; (80152e4 <etharp_find_entry+0x284>)
 8015296:	f002 fc21 	bl	8017adc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d00a      	beq.n	80152b6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80152a0:	7f3a      	ldrb	r2, [r7, #28]
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	6819      	ldr	r1, [r3, #0]
 80152a6:	480c      	ldr	r0, [pc, #48]	; (80152d8 <etharp_find_entry+0x278>)
 80152a8:	4613      	mov	r3, r2
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	4413      	add	r3, r2
 80152ae:	00db      	lsls	r3, r3, #3
 80152b0:	4403      	add	r3, r0
 80152b2:	3304      	adds	r3, #4
 80152b4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80152b6:	7f3a      	ldrb	r2, [r7, #28]
 80152b8:	4907      	ldr	r1, [pc, #28]	; (80152d8 <etharp_find_entry+0x278>)
 80152ba:	4613      	mov	r3, r2
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	4413      	add	r3, r2
 80152c0:	00db      	lsls	r3, r3, #3
 80152c2:	440b      	add	r3, r1
 80152c4:	3312      	adds	r3, #18
 80152c6:	2200      	movs	r2, #0
 80152c8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80152ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3720      	adds	r7, #32
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	20000188 	.word	0x20000188
 80152dc:	0801a500 	.word	0x0801a500
 80152e0:	0801a538 	.word	0x0801a538
 80152e4:	0801a578 	.word	0x0801a578
 80152e8:	0801a5a0 	.word	0x0801a5a0
 80152ec:	0801a5b8 	.word	0x0801a5b8
 80152f0:	0801a5cc 	.word	0x0801a5cc

080152f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af02      	add	r7, sp, #8
 80152fa:	60f8      	str	r0, [r7, #12]
 80152fc:	60b9      	str	r1, [r7, #8]
 80152fe:	607a      	str	r2, [r7, #4]
 8015300:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015308:	2b06      	cmp	r3, #6
 801530a:	d006      	beq.n	801531a <etharp_update_arp_entry+0x26>
 801530c:	4b48      	ldr	r3, [pc, #288]	; (8015430 <etharp_update_arp_entry+0x13c>)
 801530e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015312:	4948      	ldr	r1, [pc, #288]	; (8015434 <etharp_update_arp_entry+0x140>)
 8015314:	4848      	ldr	r0, [pc, #288]	; (8015438 <etharp_update_arp_entry+0x144>)
 8015316:	f002 fbe1 	bl	8017adc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d012      	beq.n	8015346 <etharp_update_arp_entry+0x52>
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00e      	beq.n	8015346 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	68f9      	ldr	r1, [r7, #12]
 801532e:	4618      	mov	r0, r3
 8015330:	f001 f8fc 	bl	801652c <ip4_addr_isbroadcast_u32>
 8015334:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015336:	2b00      	cmp	r3, #0
 8015338:	d105      	bne.n	8015346 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015342:	2be0      	cmp	r3, #224	; 0xe0
 8015344:	d102      	bne.n	801534c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015346:	f06f 030f 	mvn.w	r3, #15
 801534a:	e06c      	b.n	8015426 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801534c:	78fb      	ldrb	r3, [r7, #3]
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	4619      	mov	r1, r3
 8015352:	68b8      	ldr	r0, [r7, #8]
 8015354:	f7ff fe84 	bl	8015060 <etharp_find_entry>
 8015358:	4603      	mov	r3, r0
 801535a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801535c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015360:	2b00      	cmp	r3, #0
 8015362:	da02      	bge.n	801536a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015368:	e05d      	b.n	8015426 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801536a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801536e:	4933      	ldr	r1, [pc, #204]	; (801543c <etharp_update_arp_entry+0x148>)
 8015370:	4613      	mov	r3, r2
 8015372:	005b      	lsls	r3, r3, #1
 8015374:	4413      	add	r3, r2
 8015376:	00db      	lsls	r3, r3, #3
 8015378:	440b      	add	r3, r1
 801537a:	3314      	adds	r3, #20
 801537c:	2202      	movs	r2, #2
 801537e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015380:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015384:	492d      	ldr	r1, [pc, #180]	; (801543c <etharp_update_arp_entry+0x148>)
 8015386:	4613      	mov	r3, r2
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	4413      	add	r3, r2
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	440b      	add	r3, r1
 8015390:	3308      	adds	r3, #8
 8015392:	68fa      	ldr	r2, [r7, #12]
 8015394:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8015396:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801539a:	4613      	mov	r3, r2
 801539c:	005b      	lsls	r3, r3, #1
 801539e:	4413      	add	r3, r2
 80153a0:	00db      	lsls	r3, r3, #3
 80153a2:	3308      	adds	r3, #8
 80153a4:	4a25      	ldr	r2, [pc, #148]	; (801543c <etharp_update_arp_entry+0x148>)
 80153a6:	4413      	add	r3, r2
 80153a8:	3304      	adds	r3, #4
 80153aa:	2206      	movs	r2, #6
 80153ac:	6879      	ldr	r1, [r7, #4]
 80153ae:	4618      	mov	r0, r3
 80153b0:	f002 fadb 	bl	801796a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80153b4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80153b8:	4920      	ldr	r1, [pc, #128]	; (801543c <etharp_update_arp_entry+0x148>)
 80153ba:	4613      	mov	r3, r2
 80153bc:	005b      	lsls	r3, r3, #1
 80153be:	4413      	add	r3, r2
 80153c0:	00db      	lsls	r3, r3, #3
 80153c2:	440b      	add	r3, r1
 80153c4:	3312      	adds	r3, #18
 80153c6:	2200      	movs	r2, #0
 80153c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80153ca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80153ce:	491b      	ldr	r1, [pc, #108]	; (801543c <etharp_update_arp_entry+0x148>)
 80153d0:	4613      	mov	r3, r2
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	4413      	add	r3, r2
 80153d6:	00db      	lsls	r3, r3, #3
 80153d8:	440b      	add	r3, r1
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d021      	beq.n	8015424 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80153e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80153e4:	4915      	ldr	r1, [pc, #84]	; (801543c <etharp_update_arp_entry+0x148>)
 80153e6:	4613      	mov	r3, r2
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	4413      	add	r3, r2
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	440b      	add	r3, r1
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80153f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80153f8:	4910      	ldr	r1, [pc, #64]	; (801543c <etharp_update_arp_entry+0x148>)
 80153fa:	4613      	mov	r3, r2
 80153fc:	005b      	lsls	r3, r3, #1
 80153fe:	4413      	add	r3, r2
 8015400:	00db      	lsls	r3, r3, #3
 8015402:	440b      	add	r3, r1
 8015404:	2200      	movs	r2, #0
 8015406:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801540e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015412:	9300      	str	r3, [sp, #0]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6939      	ldr	r1, [r7, #16]
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f001 ff27 	bl	801726c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801541e:	6938      	ldr	r0, [r7, #16]
 8015420:	f7f8 fc38 	bl	800dc94 <pbuf_free>
  }
  return ERR_OK;
 8015424:	2300      	movs	r3, #0
}
 8015426:	4618      	mov	r0, r3
 8015428:	3718      	adds	r7, #24
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	0801a500 	.word	0x0801a500
 8015434:	0801a5f8 	.word	0x0801a5f8
 8015438:	0801a578 	.word	0x0801a578
 801543c:	20000188 	.word	0x20000188

08015440 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015448:	2300      	movs	r3, #0
 801544a:	73fb      	strb	r3, [r7, #15]
 801544c:	e01f      	b.n	801548e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801544e:	7bfa      	ldrb	r2, [r7, #15]
 8015450:	4912      	ldr	r1, [pc, #72]	; (801549c <etharp_cleanup_netif+0x5c>)
 8015452:	4613      	mov	r3, r2
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4413      	add	r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	440b      	add	r3, r1
 801545c:	3314      	adds	r3, #20
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015462:	7bbb      	ldrb	r3, [r7, #14]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d00f      	beq.n	8015488 <etharp_cleanup_netif+0x48>
 8015468:	7bfa      	ldrb	r2, [r7, #15]
 801546a:	490c      	ldr	r1, [pc, #48]	; (801549c <etharp_cleanup_netif+0x5c>)
 801546c:	4613      	mov	r3, r2
 801546e:	005b      	lsls	r3, r3, #1
 8015470:	4413      	add	r3, r2
 8015472:	00db      	lsls	r3, r3, #3
 8015474:	440b      	add	r3, r1
 8015476:	3308      	adds	r3, #8
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	687a      	ldr	r2, [r7, #4]
 801547c:	429a      	cmp	r2, r3
 801547e:	d103      	bne.n	8015488 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8015480:	7bfb      	ldrb	r3, [r7, #15]
 8015482:	4618      	mov	r0, r3
 8015484:	f7ff fd12 	bl	8014eac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015488:	7bfb      	ldrb	r3, [r7, #15]
 801548a:	3301      	adds	r3, #1
 801548c:	73fb      	strb	r3, [r7, #15]
 801548e:	7bfb      	ldrb	r3, [r7, #15]
 8015490:	2b09      	cmp	r3, #9
 8015492:	d9dc      	bls.n	801544e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015494:	bf00      	nop
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	20000188 	.word	0x20000188

080154a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80154a0:	b5b0      	push	{r4, r5, r7, lr}
 80154a2:	b08a      	sub	sp, #40	; 0x28
 80154a4:	af04      	add	r7, sp, #16
 80154a6:	6078      	str	r0, [r7, #4]
 80154a8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d107      	bne.n	80154c0 <etharp_input+0x20>
 80154b0:	4b3f      	ldr	r3, [pc, #252]	; (80155b0 <etharp_input+0x110>)
 80154b2:	f44f 7222 	mov.w	r2, #648	; 0x288
 80154b6:	493f      	ldr	r1, [pc, #252]	; (80155b4 <etharp_input+0x114>)
 80154b8:	483f      	ldr	r0, [pc, #252]	; (80155b8 <etharp_input+0x118>)
 80154ba:	f002 fb0f 	bl	8017adc <iprintf>
 80154be:	e074      	b.n	80155aa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	685b      	ldr	r3, [r3, #4]
 80154c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	881b      	ldrh	r3, [r3, #0]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154d0:	d10c      	bne.n	80154ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80154d6:	2b06      	cmp	r3, #6
 80154d8:	d108      	bne.n	80154ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80154de:	2b04      	cmp	r3, #4
 80154e0:	d104      	bne.n	80154ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80154e2:	693b      	ldr	r3, [r7, #16]
 80154e4:	885b      	ldrh	r3, [r3, #2]
 80154e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80154e8:	2b08      	cmp	r3, #8
 80154ea:	d003      	beq.n	80154f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7f8 fbd1 	bl	800dc94 <pbuf_free>
    return;
 80154f2:	e05a      	b.n	80155aa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	330e      	adds	r3, #14
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	3318      	adds	r3, #24
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	3304      	adds	r3, #4
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d102      	bne.n	8015514 <etharp_input+0x74>
    for_us = 0;
 801550e:	2300      	movs	r3, #0
 8015510:	75fb      	strb	r3, [r7, #23]
 8015512:	e009      	b.n	8015528 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	3304      	adds	r3, #4
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	429a      	cmp	r2, r3
 801551e:	bf0c      	ite	eq
 8015520:	2301      	moveq	r3, #1
 8015522:	2300      	movne	r3, #0
 8015524:	b2db      	uxtb	r3, r3
 8015526:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	f103 0208 	add.w	r2, r3, #8
 801552e:	7dfb      	ldrb	r3, [r7, #23]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d001      	beq.n	8015538 <etharp_input+0x98>
 8015534:	2301      	movs	r3, #1
 8015536:	e000      	b.n	801553a <etharp_input+0x9a>
 8015538:	2302      	movs	r3, #2
 801553a:	f107 010c 	add.w	r1, r7, #12
 801553e:	6838      	ldr	r0, [r7, #0]
 8015540:	f7ff fed8 	bl	80152f4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	88db      	ldrh	r3, [r3, #6]
 8015548:	b29b      	uxth	r3, r3
 801554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801554e:	d003      	beq.n	8015558 <etharp_input+0xb8>
 8015550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015554:	d01e      	beq.n	8015594 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8015556:	e025      	b.n	80155a4 <etharp_input+0x104>
    if (for_us) {
 8015558:	7dfb      	ldrb	r3, [r7, #23]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d021      	beq.n	80155a2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8015574:	693a      	ldr	r2, [r7, #16]
 8015576:	3208      	adds	r2, #8
      etharp_raw(netif,
 8015578:	2102      	movs	r1, #2
 801557a:	9103      	str	r1, [sp, #12]
 801557c:	f107 010c 	add.w	r1, r7, #12
 8015580:	9102      	str	r1, [sp, #8]
 8015582:	9201      	str	r2, [sp, #4]
 8015584:	9300      	str	r3, [sp, #0]
 8015586:	462b      	mov	r3, r5
 8015588:	4622      	mov	r2, r4
 801558a:	4601      	mov	r1, r0
 801558c:	6838      	ldr	r0, [r7, #0]
 801558e:	f000 fae7 	bl	8015b60 <etharp_raw>
    break;
 8015592:	e006      	b.n	80155a2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8015594:	f107 030c 	add.w	r3, r7, #12
 8015598:	4619      	mov	r1, r3
 801559a:	6838      	ldr	r0, [r7, #0]
 801559c:	f7fe f980 	bl	80138a0 <dhcp_arp_reply>
    break;
 80155a0:	e000      	b.n	80155a4 <etharp_input+0x104>
    break;
 80155a2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f7f8 fb75 	bl	800dc94 <pbuf_free>
}
 80155aa:	3718      	adds	r7, #24
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bdb0      	pop	{r4, r5, r7, pc}
 80155b0:	0801a500 	.word	0x0801a500
 80155b4:	0801a650 	.word	0x0801a650
 80155b8:	0801a578 	.word	0x0801a578

080155bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b086      	sub	sp, #24
 80155c0:	af02      	add	r7, sp, #8
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	4613      	mov	r3, r2
 80155c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80155ca:	79fa      	ldrb	r2, [r7, #7]
 80155cc:	4944      	ldr	r1, [pc, #272]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 80155ce:	4613      	mov	r3, r2
 80155d0:	005b      	lsls	r3, r3, #1
 80155d2:	4413      	add	r3, r2
 80155d4:	00db      	lsls	r3, r3, #3
 80155d6:	440b      	add	r3, r1
 80155d8:	3314      	adds	r3, #20
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	2b01      	cmp	r3, #1
 80155de:	d806      	bhi.n	80155ee <etharp_output_to_arp_index+0x32>
 80155e0:	4b40      	ldr	r3, [pc, #256]	; (80156e4 <etharp_output_to_arp_index+0x128>)
 80155e2:	f240 22ed 	movw	r2, #749	; 0x2ed
 80155e6:	4940      	ldr	r1, [pc, #256]	; (80156e8 <etharp_output_to_arp_index+0x12c>)
 80155e8:	4840      	ldr	r0, [pc, #256]	; (80156ec <etharp_output_to_arp_index+0x130>)
 80155ea:	f002 fa77 	bl	8017adc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80155ee:	79fa      	ldrb	r2, [r7, #7]
 80155f0:	493b      	ldr	r1, [pc, #236]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 80155f2:	4613      	mov	r3, r2
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	4413      	add	r3, r2
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	440b      	add	r3, r1
 80155fc:	3314      	adds	r3, #20
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	2b02      	cmp	r3, #2
 8015602:	d153      	bne.n	80156ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015604:	79fa      	ldrb	r2, [r7, #7]
 8015606:	4936      	ldr	r1, [pc, #216]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 8015608:	4613      	mov	r3, r2
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	4413      	add	r3, r2
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	440b      	add	r3, r1
 8015612:	3312      	adds	r3, #18
 8015614:	881b      	ldrh	r3, [r3, #0]
 8015616:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801561a:	d919      	bls.n	8015650 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801561c:	79fa      	ldrb	r2, [r7, #7]
 801561e:	4613      	mov	r3, r2
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	4413      	add	r3, r2
 8015624:	00db      	lsls	r3, r3, #3
 8015626:	4a2e      	ldr	r2, [pc, #184]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 8015628:	4413      	add	r3, r2
 801562a:	3304      	adds	r3, #4
 801562c:	4619      	mov	r1, r3
 801562e:	68f8      	ldr	r0, [r7, #12]
 8015630:	f000 fb44 	bl	8015cbc <etharp_request>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d138      	bne.n	80156ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801563a:	79fa      	ldrb	r2, [r7, #7]
 801563c:	4928      	ldr	r1, [pc, #160]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 801563e:	4613      	mov	r3, r2
 8015640:	005b      	lsls	r3, r3, #1
 8015642:	4413      	add	r3, r2
 8015644:	00db      	lsls	r3, r3, #3
 8015646:	440b      	add	r3, r1
 8015648:	3314      	adds	r3, #20
 801564a:	2203      	movs	r2, #3
 801564c:	701a      	strb	r2, [r3, #0]
 801564e:	e02d      	b.n	80156ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015650:	79fa      	ldrb	r2, [r7, #7]
 8015652:	4923      	ldr	r1, [pc, #140]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 8015654:	4613      	mov	r3, r2
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	4413      	add	r3, r2
 801565a:	00db      	lsls	r3, r3, #3
 801565c:	440b      	add	r3, r1
 801565e:	3312      	adds	r3, #18
 8015660:	881b      	ldrh	r3, [r3, #0]
 8015662:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015666:	d321      	bcc.n	80156ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015668:	79fa      	ldrb	r2, [r7, #7]
 801566a:	4613      	mov	r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	4413      	add	r3, r2
 8015670:	00db      	lsls	r3, r3, #3
 8015672:	4a1b      	ldr	r2, [pc, #108]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 8015674:	4413      	add	r3, r2
 8015676:	1d19      	adds	r1, r3, #4
 8015678:	79fa      	ldrb	r2, [r7, #7]
 801567a:	4613      	mov	r3, r2
 801567c:	005b      	lsls	r3, r3, #1
 801567e:	4413      	add	r3, r2
 8015680:	00db      	lsls	r3, r3, #3
 8015682:	3308      	adds	r3, #8
 8015684:	4a16      	ldr	r2, [pc, #88]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 8015686:	4413      	add	r3, r2
 8015688:	3304      	adds	r3, #4
 801568a:	461a      	mov	r2, r3
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f000 faf3 	bl	8015c78 <etharp_request_dst>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	d109      	bne.n	80156ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015698:	79fa      	ldrb	r2, [r7, #7]
 801569a:	4911      	ldr	r1, [pc, #68]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 801569c:	4613      	mov	r3, r2
 801569e:	005b      	lsls	r3, r3, #1
 80156a0:	4413      	add	r3, r2
 80156a2:	00db      	lsls	r3, r3, #3
 80156a4:	440b      	add	r3, r1
 80156a6:	3314      	adds	r3, #20
 80156a8:	2203      	movs	r2, #3
 80156aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 80156b2:	79fa      	ldrb	r2, [r7, #7]
 80156b4:	4613      	mov	r3, r2
 80156b6:	005b      	lsls	r3, r3, #1
 80156b8:	4413      	add	r3, r2
 80156ba:	00db      	lsls	r3, r3, #3
 80156bc:	3308      	adds	r3, #8
 80156be:	4a08      	ldr	r2, [pc, #32]	; (80156e0 <etharp_output_to_arp_index+0x124>)
 80156c0:	4413      	add	r3, r2
 80156c2:	1d1a      	adds	r2, r3, #4
 80156c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156c8:	9300      	str	r3, [sp, #0]
 80156ca:	4613      	mov	r3, r2
 80156cc:	460a      	mov	r2, r1
 80156ce:	68b9      	ldr	r1, [r7, #8]
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f001 fdcb 	bl	801726c <ethernet_output>
 80156d6:	4603      	mov	r3, r0
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	20000188 	.word	0x20000188
 80156e4:	0801a500 	.word	0x0801a500
 80156e8:	0801a670 	.word	0x0801a670
 80156ec:	0801a578 	.word	0x0801a578

080156f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08a      	sub	sp, #40	; 0x28
 80156f4:	af02      	add	r7, sp, #8
 80156f6:	60f8      	str	r0, [r7, #12]
 80156f8:	60b9      	str	r1, [r7, #8]
 80156fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d106      	bne.n	8015714 <etharp_output+0x24>
 8015706:	4b69      	ldr	r3, [pc, #420]	; (80158ac <etharp_output+0x1bc>)
 8015708:	f240 321b 	movw	r2, #795	; 0x31b
 801570c:	4968      	ldr	r1, [pc, #416]	; (80158b0 <etharp_output+0x1c0>)
 801570e:	4869      	ldr	r0, [pc, #420]	; (80158b4 <etharp_output+0x1c4>)
 8015710:	f002 f9e4 	bl	8017adc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d106      	bne.n	8015728 <etharp_output+0x38>
 801571a:	4b64      	ldr	r3, [pc, #400]	; (80158ac <etharp_output+0x1bc>)
 801571c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015720:	4965      	ldr	r1, [pc, #404]	; (80158b8 <etharp_output+0x1c8>)
 8015722:	4864      	ldr	r0, [pc, #400]	; (80158b4 <etharp_output+0x1c4>)
 8015724:	f002 f9da 	bl	8017adc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d106      	bne.n	801573c <etharp_output+0x4c>
 801572e:	4b5f      	ldr	r3, [pc, #380]	; (80158ac <etharp_output+0x1bc>)
 8015730:	f240 321d 	movw	r2, #797	; 0x31d
 8015734:	4961      	ldr	r1, [pc, #388]	; (80158bc <etharp_output+0x1cc>)
 8015736:	485f      	ldr	r0, [pc, #380]	; (80158b4 <etharp_output+0x1c4>)
 8015738:	f002 f9d0 	bl	8017adc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	68f9      	ldr	r1, [r7, #12]
 8015742:	4618      	mov	r0, r3
 8015744:	f000 fef2 	bl	801652c <ip4_addr_isbroadcast_u32>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d002      	beq.n	8015754 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801574e:	4b5c      	ldr	r3, [pc, #368]	; (80158c0 <etharp_output+0x1d0>)
 8015750:	61fb      	str	r3, [r7, #28]
 8015752:	e09b      	b.n	801588c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801575c:	2be0      	cmp	r3, #224	; 0xe0
 801575e:	d118      	bne.n	8015792 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015760:	2301      	movs	r3, #1
 8015762:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015764:	2300      	movs	r3, #0
 8015766:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015768:	235e      	movs	r3, #94	; 0x5e
 801576a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	3301      	adds	r3, #1
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015776:	b2db      	uxtb	r3, r3
 8015778:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	3302      	adds	r3, #2
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	3303      	adds	r3, #3
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801578a:	f107 0310 	add.w	r3, r7, #16
 801578e:	61fb      	str	r3, [r7, #28]
 8015790:	e07c      	b.n	801588c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	3304      	adds	r3, #4
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	405a      	eors	r2, r3
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	3308      	adds	r3, #8
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4013      	ands	r3, r2
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d012      	beq.n	80157d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d00b      	beq.n	80157d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	330c      	adds	r3, #12
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d003      	beq.n	80157ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	330c      	adds	r3, #12
 80157c6:	61bb      	str	r3, [r7, #24]
 80157c8:	e002      	b.n	80157d0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80157ca:	f06f 0303 	mvn.w	r3, #3
 80157ce:	e069      	b.n	80158a4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80157d0:	4b3c      	ldr	r3, [pc, #240]	; (80158c4 <etharp_output+0x1d4>)
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	4619      	mov	r1, r3
 80157d6:	4a3c      	ldr	r2, [pc, #240]	; (80158c8 <etharp_output+0x1d8>)
 80157d8:	460b      	mov	r3, r1
 80157da:	005b      	lsls	r3, r3, #1
 80157dc:	440b      	add	r3, r1
 80157de:	00db      	lsls	r3, r3, #3
 80157e0:	4413      	add	r3, r2
 80157e2:	3314      	adds	r3, #20
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d917      	bls.n	801581a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	681a      	ldr	r2, [r3, #0]
 80157ee:	4b35      	ldr	r3, [pc, #212]	; (80158c4 <etharp_output+0x1d4>)
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	4618      	mov	r0, r3
 80157f4:	4934      	ldr	r1, [pc, #208]	; (80158c8 <etharp_output+0x1d8>)
 80157f6:	4603      	mov	r3, r0
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4403      	add	r3, r0
 80157fc:	00db      	lsls	r3, r3, #3
 80157fe:	440b      	add	r3, r1
 8015800:	3304      	adds	r3, #4
 8015802:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015804:	429a      	cmp	r2, r3
 8015806:	d108      	bne.n	801581a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015808:	4b2e      	ldr	r3, [pc, #184]	; (80158c4 <etharp_output+0x1d4>)
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	461a      	mov	r2, r3
 801580e:	68b9      	ldr	r1, [r7, #8]
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	f7ff fed3 	bl	80155bc <etharp_output_to_arp_index>
 8015816:	4603      	mov	r3, r0
 8015818:	e044      	b.n	80158a4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801581a:	2300      	movs	r3, #0
 801581c:	75fb      	strb	r3, [r7, #23]
 801581e:	e02a      	b.n	8015876 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015820:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015824:	4928      	ldr	r1, [pc, #160]	; (80158c8 <etharp_output+0x1d8>)
 8015826:	4613      	mov	r3, r2
 8015828:	005b      	lsls	r3, r3, #1
 801582a:	4413      	add	r3, r2
 801582c:	00db      	lsls	r3, r3, #3
 801582e:	440b      	add	r3, r1
 8015830:	3314      	adds	r3, #20
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	2b01      	cmp	r3, #1
 8015836:	d918      	bls.n	801586a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015838:	69bb      	ldr	r3, [r7, #24]
 801583a:	6819      	ldr	r1, [r3, #0]
 801583c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015840:	4821      	ldr	r0, [pc, #132]	; (80158c8 <etharp_output+0x1d8>)
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	4403      	add	r3, r0
 801584c:	3304      	adds	r3, #4
 801584e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015850:	4299      	cmp	r1, r3
 8015852:	d10a      	bne.n	801586a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015854:	7dfa      	ldrb	r2, [r7, #23]
 8015856:	4b1b      	ldr	r3, [pc, #108]	; (80158c4 <etharp_output+0x1d4>)
 8015858:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801585a:	7dfb      	ldrb	r3, [r7, #23]
 801585c:	461a      	mov	r2, r3
 801585e:	68b9      	ldr	r1, [r7, #8]
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	f7ff feab 	bl	80155bc <etharp_output_to_arp_index>
 8015866:	4603      	mov	r3, r0
 8015868:	e01c      	b.n	80158a4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801586a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801586e:	b2db      	uxtb	r3, r3
 8015870:	3301      	adds	r3, #1
 8015872:	b2db      	uxtb	r3, r3
 8015874:	75fb      	strb	r3, [r7, #23]
 8015876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801587a:	2b09      	cmp	r3, #9
 801587c:	ddd0      	ble.n	8015820 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801587e:	68ba      	ldr	r2, [r7, #8]
 8015880:	69b9      	ldr	r1, [r7, #24]
 8015882:	68f8      	ldr	r0, [r7, #12]
 8015884:	f000 f822 	bl	80158cc <etharp_query>
 8015888:	4603      	mov	r3, r0
 801588a:	e00b      	b.n	80158a4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8015892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015896:	9300      	str	r3, [sp, #0]
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	68b9      	ldr	r1, [r7, #8]
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f001 fce5 	bl	801726c <ethernet_output>
 80158a2:	4603      	mov	r3, r0
}
 80158a4:	4618      	mov	r0, r3
 80158a6:	3720      	adds	r7, #32
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	0801a500 	.word	0x0801a500
 80158b0:	0801a650 	.word	0x0801a650
 80158b4:	0801a578 	.word	0x0801a578
 80158b8:	0801a6a0 	.word	0x0801a6a0
 80158bc:	0801a640 	.word	0x0801a640
 80158c0:	0801ad10 	.word	0x0801ad10
 80158c4:	20000278 	.word	0x20000278
 80158c8:	20000188 	.word	0x20000188

080158cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b08c      	sub	sp, #48	; 0x30
 80158d0:	af02      	add	r7, sp, #8
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	332d      	adds	r3, #45	; 0x2d
 80158dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80158de:	23ff      	movs	r3, #255	; 0xff
 80158e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80158e4:	2300      	movs	r3, #0
 80158e6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	68f9      	ldr	r1, [r7, #12]
 80158ee:	4618      	mov	r0, r3
 80158f0:	f000 fe1c 	bl	801652c <ip4_addr_isbroadcast_u32>
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d10c      	bne.n	8015914 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015902:	2be0      	cmp	r3, #224	; 0xe0
 8015904:	d006      	beq.n	8015914 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d003      	beq.n	8015914 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d102      	bne.n	801591a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015914:	f06f 030f 	mvn.w	r3, #15
 8015918:	e10f      	b.n	8015b3a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801591a:	68fa      	ldr	r2, [r7, #12]
 801591c:	2101      	movs	r1, #1
 801591e:	68b8      	ldr	r0, [r7, #8]
 8015920:	f7ff fb9e 	bl	8015060 <etharp_find_entry>
 8015924:	4603      	mov	r3, r0
 8015926:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8015928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801592c:	2b00      	cmp	r3, #0
 801592e:	da02      	bge.n	8015936 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015930:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015934:	e101      	b.n	8015b3a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015936:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801593a:	4982      	ldr	r1, [pc, #520]	; (8015b44 <etharp_query+0x278>)
 801593c:	4613      	mov	r3, r2
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	4413      	add	r3, r2
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	440b      	add	r3, r1
 8015946:	3314      	adds	r3, #20
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d117      	bne.n	801597e <etharp_query+0xb2>
    is_new_entry = 1;
 801594e:	2301      	movs	r3, #1
 8015950:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015952:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015956:	497b      	ldr	r1, [pc, #492]	; (8015b44 <etharp_query+0x278>)
 8015958:	4613      	mov	r3, r2
 801595a:	005b      	lsls	r3, r3, #1
 801595c:	4413      	add	r3, r2
 801595e:	00db      	lsls	r3, r3, #3
 8015960:	440b      	add	r3, r1
 8015962:	3314      	adds	r3, #20
 8015964:	2201      	movs	r2, #1
 8015966:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015968:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801596c:	4975      	ldr	r1, [pc, #468]	; (8015b44 <etharp_query+0x278>)
 801596e:	4613      	mov	r3, r2
 8015970:	005b      	lsls	r3, r3, #1
 8015972:	4413      	add	r3, r2
 8015974:	00db      	lsls	r3, r3, #3
 8015976:	440b      	add	r3, r1
 8015978:	3308      	adds	r3, #8
 801597a:	68fa      	ldr	r2, [r7, #12]
 801597c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801597e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015982:	4970      	ldr	r1, [pc, #448]	; (8015b44 <etharp_query+0x278>)
 8015984:	4613      	mov	r3, r2
 8015986:	005b      	lsls	r3, r3, #1
 8015988:	4413      	add	r3, r2
 801598a:	00db      	lsls	r3, r3, #3
 801598c:	440b      	add	r3, r1
 801598e:	3314      	adds	r3, #20
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	2b01      	cmp	r3, #1
 8015994:	d012      	beq.n	80159bc <etharp_query+0xf0>
 8015996:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801599a:	496a      	ldr	r1, [pc, #424]	; (8015b44 <etharp_query+0x278>)
 801599c:	4613      	mov	r3, r2
 801599e:	005b      	lsls	r3, r3, #1
 80159a0:	4413      	add	r3, r2
 80159a2:	00db      	lsls	r3, r3, #3
 80159a4:	440b      	add	r3, r1
 80159a6:	3314      	adds	r3, #20
 80159a8:	781b      	ldrb	r3, [r3, #0]
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d806      	bhi.n	80159bc <etharp_query+0xf0>
 80159ae:	4b66      	ldr	r3, [pc, #408]	; (8015b48 <etharp_query+0x27c>)
 80159b0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80159b4:	4965      	ldr	r1, [pc, #404]	; (8015b4c <etharp_query+0x280>)
 80159b6:	4866      	ldr	r0, [pc, #408]	; (8015b50 <etharp_query+0x284>)
 80159b8:	f002 f890 	bl	8017adc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80159bc:	6a3b      	ldr	r3, [r7, #32]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d102      	bne.n	80159c8 <etharp_query+0xfc>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d10c      	bne.n	80159e2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80159c8:	68b9      	ldr	r1, [r7, #8]
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	f000 f976 	bl	8015cbc <etharp_request>
 80159d0:	4603      	mov	r3, r0
 80159d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d102      	bne.n	80159e2 <etharp_query+0x116>
      return result;
 80159dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80159e0:	e0ab      	b.n	8015b3a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d106      	bne.n	80159f6 <etharp_query+0x12a>
 80159e8:	4b57      	ldr	r3, [pc, #348]	; (8015b48 <etharp_query+0x27c>)
 80159ea:	f240 32db 	movw	r2, #987	; 0x3db
 80159ee:	4959      	ldr	r1, [pc, #356]	; (8015b54 <etharp_query+0x288>)
 80159f0:	4857      	ldr	r0, [pc, #348]	; (8015b50 <etharp_query+0x284>)
 80159f2:	f002 f873 	bl	8017adc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80159f6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80159fa:	4952      	ldr	r1, [pc, #328]	; (8015b44 <etharp_query+0x278>)
 80159fc:	4613      	mov	r3, r2
 80159fe:	005b      	lsls	r3, r3, #1
 8015a00:	4413      	add	r3, r2
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	440b      	add	r3, r1
 8015a06:	3314      	adds	r3, #20
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d919      	bls.n	8015a42 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8015a0e:	7cfa      	ldrb	r2, [r7, #19]
 8015a10:	4b51      	ldr	r3, [pc, #324]	; (8015b58 <etharp_query+0x28c>)
 8015a12:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015a14:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015a18:	4613      	mov	r3, r2
 8015a1a:	005b      	lsls	r3, r3, #1
 8015a1c:	4413      	add	r3, r2
 8015a1e:	00db      	lsls	r3, r3, #3
 8015a20:	3308      	adds	r3, #8
 8015a22:	4a48      	ldr	r2, [pc, #288]	; (8015b44 <etharp_query+0x278>)
 8015a24:	4413      	add	r3, r2
 8015a26:	1d1a      	adds	r2, r3, #4
 8015a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a2c:	9300      	str	r3, [sp, #0]
 8015a2e:	4613      	mov	r3, r2
 8015a30:	697a      	ldr	r2, [r7, #20]
 8015a32:	6879      	ldr	r1, [r7, #4]
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	f001 fc19 	bl	801726c <ethernet_output>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a40:	e079      	b.n	8015b36 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015a42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015a46:	493f      	ldr	r1, [pc, #252]	; (8015b44 <etharp_query+0x278>)
 8015a48:	4613      	mov	r3, r2
 8015a4a:	005b      	lsls	r3, r3, #1
 8015a4c:	4413      	add	r3, r2
 8015a4e:	00db      	lsls	r3, r3, #3
 8015a50:	440b      	add	r3, r1
 8015a52:	3314      	adds	r3, #20
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d16d      	bne.n	8015b36 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015a62:	e01a      	b.n	8015a9a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	895a      	ldrh	r2, [r3, #10]
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	891b      	ldrh	r3, [r3, #8]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d10a      	bne.n	8015a86 <etharp_query+0x1ba>
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d006      	beq.n	8015a86 <etharp_query+0x1ba>
 8015a78:	4b33      	ldr	r3, [pc, #204]	; (8015b48 <etharp_query+0x27c>)
 8015a7a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8015a7e:	4937      	ldr	r1, [pc, #220]	; (8015b5c <etharp_query+0x290>)
 8015a80:	4833      	ldr	r0, [pc, #204]	; (8015b50 <etharp_query+0x284>)
 8015a82:	f002 f82b 	bl	8017adc <iprintf>
      if (p->type != PBUF_ROM) {
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	7b1b      	ldrb	r3, [r3, #12]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d002      	beq.n	8015a94 <etharp_query+0x1c8>
        copy_needed = 1;
 8015a8e:	2301      	movs	r3, #1
 8015a90:	61bb      	str	r3, [r7, #24]
        break;
 8015a92:	e005      	b.n	8015aa0 <etharp_query+0x1d4>
      }
      p = p->next;
 8015a94:	69fb      	ldr	r3, [r7, #28]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d1e1      	bne.n	8015a64 <etharp_query+0x198>
    }
    if (copy_needed) {
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d017      	beq.n	8015ad6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	891b      	ldrh	r3, [r3, #8]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	4619      	mov	r1, r3
 8015aae:	2002      	movs	r0, #2
 8015ab0:	f7f7 fd7e 	bl	800d5b0 <pbuf_alloc>
 8015ab4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8015ab6:	69fb      	ldr	r3, [r7, #28]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d011      	beq.n	8015ae0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015abc:	6879      	ldr	r1, [r7, #4]
 8015abe:	69f8      	ldr	r0, [r7, #28]
 8015ac0:	f7f8 fa1a 	bl	800def8 <pbuf_copy>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00a      	beq.n	8015ae0 <etharp_query+0x214>
          pbuf_free(p);
 8015aca:	69f8      	ldr	r0, [r7, #28]
 8015acc:	f7f8 f8e2 	bl	800dc94 <pbuf_free>
          p = NULL;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	61fb      	str	r3, [r7, #28]
 8015ad4:	e004      	b.n	8015ae0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015ada:	69f8      	ldr	r0, [r7, #28]
 8015adc:	f7f8 f984 	bl	800dde8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d024      	beq.n	8015b30 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015ae6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015aea:	4916      	ldr	r1, [pc, #88]	; (8015b44 <etharp_query+0x278>)
 8015aec:	4613      	mov	r3, r2
 8015aee:	005b      	lsls	r3, r3, #1
 8015af0:	4413      	add	r3, r2
 8015af2:	00db      	lsls	r3, r3, #3
 8015af4:	440b      	add	r3, r1
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00b      	beq.n	8015b14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8015afc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015b00:	4910      	ldr	r1, [pc, #64]	; (8015b44 <etharp_query+0x278>)
 8015b02:	4613      	mov	r3, r2
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	4413      	add	r3, r2
 8015b08:	00db      	lsls	r3, r3, #3
 8015b0a:	440b      	add	r3, r1
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7f8 f8c0 	bl	800dc94 <pbuf_free>
      }
      arp_table[i].q = p;
 8015b14:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015b18:	490a      	ldr	r1, [pc, #40]	; (8015b44 <etharp_query+0x278>)
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	005b      	lsls	r3, r3, #1
 8015b1e:	4413      	add	r3, r2
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	440b      	add	r3, r1
 8015b24:	69fa      	ldr	r2, [r7, #28]
 8015b26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b2e:	e002      	b.n	8015b36 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015b30:	23ff      	movs	r3, #255	; 0xff
 8015b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3728      	adds	r7, #40	; 0x28
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20000188 	.word	0x20000188
 8015b48:	0801a500 	.word	0x0801a500
 8015b4c:	0801a6ac 	.word	0x0801a6ac
 8015b50:	0801a578 	.word	0x0801a578
 8015b54:	0801a6a0 	.word	0x0801a6a0
 8015b58:	20000278 	.word	0x20000278
 8015b5c:	0801a6d4 	.word	0x0801a6d4

08015b60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b08a      	sub	sp, #40	; 0x28
 8015b64:	af02      	add	r7, sp, #8
 8015b66:	60f8      	str	r0, [r7, #12]
 8015b68:	60b9      	str	r1, [r7, #8]
 8015b6a:	607a      	str	r2, [r7, #4]
 8015b6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d106      	bne.n	8015b86 <etharp_raw+0x26>
 8015b78:	4b3a      	ldr	r3, [pc, #232]	; (8015c64 <etharp_raw+0x104>)
 8015b7a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8015b7e:	493a      	ldr	r1, [pc, #232]	; (8015c68 <etharp_raw+0x108>)
 8015b80:	483a      	ldr	r0, [pc, #232]	; (8015c6c <etharp_raw+0x10c>)
 8015b82:	f001 ffab 	bl	8017adc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015b86:	2200      	movs	r2, #0
 8015b88:	211c      	movs	r1, #28
 8015b8a:	2002      	movs	r0, #2
 8015b8c:	f7f7 fd10 	bl	800d5b0 <pbuf_alloc>
 8015b90:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d102      	bne.n	8015b9e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b9c:	e05d      	b.n	8015c5a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	895b      	ldrh	r3, [r3, #10]
 8015ba2:	2b1b      	cmp	r3, #27
 8015ba4:	d806      	bhi.n	8015bb4 <etharp_raw+0x54>
 8015ba6:	4b2f      	ldr	r3, [pc, #188]	; (8015c64 <etharp_raw+0x104>)
 8015ba8:	f240 4264 	movw	r2, #1124	; 0x464
 8015bac:	4930      	ldr	r1, [pc, #192]	; (8015c70 <etharp_raw+0x110>)
 8015bae:	482f      	ldr	r0, [pc, #188]	; (8015c6c <etharp_raw+0x10c>)
 8015bb0:	f001 ff94 	bl	8017adc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015bb4:	69bb      	ldr	r3, [r7, #24]
 8015bb6:	685b      	ldr	r3, [r3, #4]
 8015bb8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015bba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7f6 ff5b 	bl	800ca78 <lwip_htons>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	461a      	mov	r2, r3
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015bd0:	2b06      	cmp	r3, #6
 8015bd2:	d006      	beq.n	8015be2 <etharp_raw+0x82>
 8015bd4:	4b23      	ldr	r3, [pc, #140]	; (8015c64 <etharp_raw+0x104>)
 8015bd6:	f240 426b 	movw	r2, #1131	; 0x46b
 8015bda:	4926      	ldr	r1, [pc, #152]	; (8015c74 <etharp_raw+0x114>)
 8015bdc:	4823      	ldr	r0, [pc, #140]	; (8015c6c <etharp_raw+0x10c>)
 8015bde:	f001 ff7d 	bl	8017adc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	3308      	adds	r3, #8
 8015be6:	2206      	movs	r2, #6
 8015be8:	6839      	ldr	r1, [r7, #0]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f001 febd 	bl	801796a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	3312      	adds	r3, #18
 8015bf4:	2206      	movs	r2, #6
 8015bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f001 feb6 	bl	801796a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	330e      	adds	r3, #14
 8015c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c04:	6812      	ldr	r2, [r2, #0]
 8015c06:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	3318      	adds	r3, #24
 8015c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c0e:	6812      	ldr	r2, [r2, #0]
 8015c10:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	2200      	movs	r2, #0
 8015c16:	701a      	strb	r2, [r3, #0]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	f042 0201 	orr.w	r2, r2, #1
 8015c1e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	2200      	movs	r2, #0
 8015c24:	f042 0208 	orr.w	r2, r2, #8
 8015c28:	709a      	strb	r2, [r3, #2]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2206      	movs	r2, #6
 8015c32:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	2204      	movs	r2, #4
 8015c38:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015c3a:	f640 0306 	movw	r3, #2054	; 0x806
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	68ba      	ldr	r2, [r7, #8]
 8015c44:	69b9      	ldr	r1, [r7, #24]
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f001 fb10 	bl	801726c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015c4c:	69b8      	ldr	r0, [r7, #24]
 8015c4e:	f7f8 f821 	bl	800dc94 <pbuf_free>
  p = NULL;
 8015c52:	2300      	movs	r3, #0
 8015c54:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3720      	adds	r7, #32
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
 8015c62:	bf00      	nop
 8015c64:	0801a500 	.word	0x0801a500
 8015c68:	0801a650 	.word	0x0801a650
 8015c6c:	0801a578 	.word	0x0801a578
 8015c70:	0801a6f0 	.word	0x0801a6f0
 8015c74:	0801a724 	.word	0x0801a724

08015c78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b088      	sub	sp, #32
 8015c7c:	af04      	add	r7, sp, #16
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015c94:	2201      	movs	r2, #1
 8015c96:	9203      	str	r2, [sp, #12]
 8015c98:	68ba      	ldr	r2, [r7, #8]
 8015c9a:	9202      	str	r2, [sp, #8]
 8015c9c:	4a06      	ldr	r2, [pc, #24]	; (8015cb8 <etharp_request_dst+0x40>)
 8015c9e:	9201      	str	r2, [sp, #4]
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	68f8      	ldr	r0, [r7, #12]
 8015ca8:	f7ff ff5a 	bl	8015b60 <etharp_raw>
 8015cac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	0801ad18 	.word	0x0801ad18

08015cbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b082      	sub	sp, #8
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015cc6:	4a05      	ldr	r2, [pc, #20]	; (8015cdc <etharp_request+0x20>)
 8015cc8:	6839      	ldr	r1, [r7, #0]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f7ff ffd4 	bl	8015c78 <etharp_request_dst>
 8015cd0:	4603      	mov	r3, r0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3708      	adds	r7, #8
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}
 8015cda:	bf00      	nop
 8015cdc:	0801ad10 	.word	0x0801ad10

08015ce0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08e      	sub	sp, #56	; 0x38
 8015ce4:	af04      	add	r7, sp, #16
 8015ce6:	6078      	str	r0, [r7, #4]
 8015ce8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015cea:	4b7a      	ldr	r3, [pc, #488]	; (8015ed4 <icmp_input+0x1f4>)
 8015cec:	689b      	ldr	r3, [r3, #8]
 8015cee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8015cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	f003 030f 	and.w	r3, r3, #15
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	009b      	lsls	r3, r3, #2
 8015cfe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d02:	2b13      	cmp	r3, #19
 8015d04:	f240 80d1 	bls.w	8015eaa <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	895b      	ldrh	r3, [r3, #10]
 8015d0c:	2b03      	cmp	r3, #3
 8015d0e:	f240 80ce 	bls.w	8015eae <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015d1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	f000 80bb 	beq.w	8015e9c <icmp_input+0x1bc>
 8015d26:	2b08      	cmp	r3, #8
 8015d28:	f040 80bb 	bne.w	8015ea2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015d2c:	4b6a      	ldr	r3, [pc, #424]	; (8015ed8 <icmp_input+0x1f8>)
 8015d2e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d30:	4b68      	ldr	r3, [pc, #416]	; (8015ed4 <icmp_input+0x1f4>)
 8015d32:	695b      	ldr	r3, [r3, #20]
 8015d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d38:	2be0      	cmp	r3, #224	; 0xe0
 8015d3a:	f000 80bf 	beq.w	8015ebc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015d3e:	4b65      	ldr	r3, [pc, #404]	; (8015ed4 <icmp_input+0x1f4>)
 8015d40:	695a      	ldr	r2, [r3, #20]
 8015d42:	4b64      	ldr	r3, [pc, #400]	; (8015ed4 <icmp_input+0x1f4>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4619      	mov	r1, r3
 8015d48:	4610      	mov	r0, r2
 8015d4a:	f000 fbef 	bl	801652c <ip4_addr_isbroadcast_u32>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	f040 80b5 	bne.w	8015ec0 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	891b      	ldrh	r3, [r3, #8]
 8015d5a:	2b07      	cmp	r3, #7
 8015d5c:	f240 80a9 	bls.w	8015eb2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015d60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d62:	330e      	adds	r3, #14
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	b21b      	sxth	r3, r3
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7f7 ff6e 	bl	800dc4c <pbuf_header>
 8015d70:	4603      	mov	r3, r0
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d046      	beq.n	8015e04 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	891a      	ldrh	r2, [r3, #8]
 8015d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d7c:	4413      	add	r3, r2
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	2200      	movs	r2, #0
 8015d82:	4619      	mov	r1, r3
 8015d84:	2002      	movs	r0, #2
 8015d86:	f7f7 fc13 	bl	800d5b0 <pbuf_alloc>
 8015d8a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f000 8098 	beq.w	8015ec4 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015d94:	69bb      	ldr	r3, [r7, #24]
 8015d96:	895b      	ldrh	r3, [r3, #10]
 8015d98:	461a      	mov	r2, r3
 8015d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d9c:	3308      	adds	r3, #8
 8015d9e:	429a      	cmp	r2, r3
 8015da0:	d203      	bcs.n	8015daa <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8015da2:	69b8      	ldr	r0, [r7, #24]
 8015da4:	f7f7 ff76 	bl	800dc94 <pbuf_free>
        goto icmperr;
 8015da8:	e08d      	b.n	8015ec6 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8015daa:	69bb      	ldr	r3, [r7, #24]
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015db2:	4618      	mov	r0, r3
 8015db4:	f001 fdd9 	bl	801796a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dba:	425b      	negs	r3, r3
 8015dbc:	b29b      	uxth	r3, r3
 8015dbe:	b21b      	sxth	r3, r3
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	69b8      	ldr	r0, [r7, #24]
 8015dc4:	f7f7 ff42 	bl	800dc4c <pbuf_header>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d009      	beq.n	8015de2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015dce:	4b43      	ldr	r3, [pc, #268]	; (8015edc <icmp_input+0x1fc>)
 8015dd0:	22af      	movs	r2, #175	; 0xaf
 8015dd2:	4943      	ldr	r1, [pc, #268]	; (8015ee0 <icmp_input+0x200>)
 8015dd4:	4843      	ldr	r0, [pc, #268]	; (8015ee4 <icmp_input+0x204>)
 8015dd6:	f001 fe81 	bl	8017adc <iprintf>
        pbuf_free(r);
 8015dda:	69b8      	ldr	r0, [r7, #24]
 8015ddc:	f7f7 ff5a 	bl	800dc94 <pbuf_free>
        goto icmperr;
 8015de0:	e071      	b.n	8015ec6 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8015de2:	6879      	ldr	r1, [r7, #4]
 8015de4:	69b8      	ldr	r0, [r7, #24]
 8015de6:	f7f8 f887 	bl	800def8 <pbuf_copy>
 8015dea:	4603      	mov	r3, r0
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d003      	beq.n	8015df8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8015df0:	69b8      	ldr	r0, [r7, #24]
 8015df2:	f7f7 ff4f 	bl	800dc94 <pbuf_free>
        goto icmperr;
 8015df6:	e066      	b.n	8015ec6 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f7f7 ff4b 	bl	800dc94 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8015dfe:	69bb      	ldr	r3, [r7, #24]
 8015e00:	607b      	str	r3, [r7, #4]
 8015e02:	e015      	b.n	8015e30 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e06:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8015e0a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015e0e:	33f2      	adds	r3, #242	; 0xf2
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	b21b      	sxth	r3, r3
 8015e14:	4619      	mov	r1, r3
 8015e16:	6878      	ldr	r0, [r7, #4]
 8015e18:	f7f7 ff18 	bl	800dc4c <pbuf_header>
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d006      	beq.n	8015e30 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015e22:	4b2e      	ldr	r3, [pc, #184]	; (8015edc <icmp_input+0x1fc>)
 8015e24:	22c0      	movs	r2, #192	; 0xc0
 8015e26:	4930      	ldr	r1, [pc, #192]	; (8015ee8 <icmp_input+0x208>)
 8015e28:	482e      	ldr	r0, [pc, #184]	; (8015ee4 <icmp_input+0x204>)
 8015e2a:	f001 fe57 	bl	8017adc <iprintf>
        goto icmperr;
 8015e2e:	e04a      	b.n	8015ec6 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015e36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7f7 ff05 	bl	800dc4c <pbuf_header>
 8015e42:	4603      	mov	r3, r0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d12b      	bne.n	8015ea0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8015e4e:	69fb      	ldr	r3, [r7, #28]
 8015e50:	681a      	ldr	r2, [r3, #0]
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015e56:	4b1f      	ldr	r3, [pc, #124]	; (8015ed4 <icmp_input+0x1f4>)
 8015e58:	691a      	ldr	r2, [r3, #16]
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	2200      	movs	r2, #0
 8015e62:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	2200      	movs	r2, #0
 8015e68:	709a      	strb	r2, [r3, #2]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	22ff      	movs	r2, #255	; 0xff
 8015e72:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	2200      	movs	r2, #0
 8015e78:	729a      	strb	r2, [r3, #10]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	9302      	str	r3, [sp, #8]
 8015e82:	2301      	movs	r3, #1
 8015e84:	9301      	str	r3, [sp, #4]
 8015e86:	2300      	movs	r3, #0
 8015e88:	9300      	str	r3, [sp, #0]
 8015e8a:	23ff      	movs	r3, #255	; 0xff
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	69f9      	ldr	r1, [r7, #28]
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f000 fa79 	bl	8016388 <ip4_output_if>
 8015e96:	4603      	mov	r3, r0
 8015e98:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8015e9a:	e001      	b.n	8015ea0 <icmp_input+0x1c0>
    break;
 8015e9c:	bf00      	nop
 8015e9e:	e000      	b.n	8015ea2 <icmp_input+0x1c2>
    break;
 8015ea0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7f7 fef6 	bl	800dc94 <pbuf_free>
  return;
 8015ea8:	e011      	b.n	8015ece <icmp_input+0x1ee>
    goto lenerr;
 8015eaa:	bf00      	nop
 8015eac:	e002      	b.n	8015eb4 <icmp_input+0x1d4>
    goto lenerr;
 8015eae:	bf00      	nop
 8015eb0:	e000      	b.n	8015eb4 <icmp_input+0x1d4>
      goto lenerr;
 8015eb2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f7f7 feed 	bl	800dc94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015eba:	e008      	b.n	8015ece <icmp_input+0x1ee>
      goto icmperr;
 8015ebc:	bf00      	nop
 8015ebe:	e002      	b.n	8015ec6 <icmp_input+0x1e6>
      goto icmperr;
 8015ec0:	bf00      	nop
 8015ec2:	e000      	b.n	8015ec6 <icmp_input+0x1e6>
        goto icmperr;
 8015ec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7f7 fee4 	bl	800dc94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015ecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015ece:	3728      	adds	r7, #40	; 0x28
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}
 8015ed4:	20005790 	.word	0x20005790
 8015ed8:	200057a4 	.word	0x200057a4
 8015edc:	0801a768 	.word	0x0801a768
 8015ee0:	0801a7a0 	.word	0x0801a7a0
 8015ee4:	0801a7d8 	.word	0x0801a7d8
 8015ee8:	0801a800 	.word	0x0801a800

08015eec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015ef8:	78fb      	ldrb	r3, [r7, #3]
 8015efa:	461a      	mov	r2, r3
 8015efc:	2103      	movs	r1, #3
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 f814 	bl	8015f2c <icmp_send_response>
}
 8015f04:	bf00      	nop
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	460b      	mov	r3, r1
 8015f16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015f18:	78fb      	ldrb	r3, [r7, #3]
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	210b      	movs	r1, #11
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f000 f804 	bl	8015f2c <icmp_send_response>
}
 8015f24:	bf00      	nop
 8015f26:	3708      	adds	r7, #8
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b08c      	sub	sp, #48	; 0x30
 8015f30:	af04      	add	r7, sp, #16
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	70fb      	strb	r3, [r7, #3]
 8015f38:	4613      	mov	r3, r2
 8015f3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	2124      	movs	r1, #36	; 0x24
 8015f40:	2001      	movs	r0, #1
 8015f42:	f7f7 fb35 	bl	800d5b0 <pbuf_alloc>
 8015f46:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d04c      	beq.n	8015fe8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	895b      	ldrh	r3, [r3, #10]
 8015f52:	2b23      	cmp	r3, #35	; 0x23
 8015f54:	d806      	bhi.n	8015f64 <icmp_send_response+0x38>
 8015f56:	4b26      	ldr	r3, [pc, #152]	; (8015ff0 <icmp_send_response+0xc4>)
 8015f58:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015f5c:	4925      	ldr	r1, [pc, #148]	; (8015ff4 <icmp_send_response+0xc8>)
 8015f5e:	4826      	ldr	r0, [pc, #152]	; (8015ff8 <icmp_send_response+0xcc>)
 8015f60:	f001 fdbc 	bl	8017adc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015f6a:	69fb      	ldr	r3, [r7, #28]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	78fa      	ldrb	r2, [r7, #3]
 8015f74:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	78ba      	ldrb	r2, [r7, #2]
 8015f7a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	711a      	strb	r2, [r3, #4]
 8015f82:	2200      	movs	r2, #0
 8015f84:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	719a      	strb	r2, [r3, #6]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	f103 0008 	add.w	r0, r3, #8
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	221c      	movs	r2, #28
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	f001 fce3 	bl	801796a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	68db      	ldr	r3, [r3, #12]
 8015fa8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015faa:	f107 030c 	add.w	r3, r7, #12
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f000 f824 	bl	8015ffc <ip4_route>
 8015fb4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d011      	beq.n	8015fe0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	709a      	strb	r2, [r3, #2]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015fc6:	f107 020c 	add.w	r2, r7, #12
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	9302      	str	r3, [sp, #8]
 8015fce:	2301      	movs	r3, #1
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	9300      	str	r3, [sp, #0]
 8015fd6:	23ff      	movs	r3, #255	; 0xff
 8015fd8:	2100      	movs	r1, #0
 8015fda:	69f8      	ldr	r0, [r7, #28]
 8015fdc:	f000 f9d4 	bl	8016388 <ip4_output_if>
  }
  pbuf_free(q);
 8015fe0:	69f8      	ldr	r0, [r7, #28]
 8015fe2:	f7f7 fe57 	bl	800dc94 <pbuf_free>
 8015fe6:	e000      	b.n	8015fea <icmp_send_response+0xbe>
    return;
 8015fe8:	bf00      	nop
}
 8015fea:	3720      	adds	r7, #32
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	0801a768 	.word	0x0801a768
 8015ff4:	0801a834 	.word	0x0801a834
 8015ff8:	0801a7d8 	.word	0x0801a7d8

08015ffc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b085      	sub	sp, #20
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016004:	4b30      	ldr	r3, [pc, #192]	; (80160c8 <ip4_route+0xcc>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	60fb      	str	r3, [r7, #12]
 801600a:	e036      	b.n	801607a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016012:	f003 0301 	and.w	r3, r3, #1
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2b00      	cmp	r3, #0
 801601a:	d02b      	beq.n	8016074 <ip4_route+0x78>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016022:	089b      	lsrs	r3, r3, #2
 8016024:	f003 0301 	and.w	r3, r3, #1
 8016028:	b2db      	uxtb	r3, r3
 801602a:	2b00      	cmp	r3, #0
 801602c:	d022      	beq.n	8016074 <ip4_route+0x78>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	3304      	adds	r3, #4
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d01d      	beq.n	8016074 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681a      	ldr	r2, [r3, #0]
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	3304      	adds	r3, #4
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	405a      	eors	r2, r3
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	3308      	adds	r3, #8
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	4013      	ands	r3, r2
 801604c:	2b00      	cmp	r3, #0
 801604e:	d101      	bne.n	8016054 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	e033      	b.n	80160bc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801605a:	f003 0302 	and.w	r3, r3, #2
 801605e:	2b00      	cmp	r3, #0
 8016060:	d108      	bne.n	8016074 <ip4_route+0x78>
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	330c      	adds	r3, #12
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	429a      	cmp	r2, r3
 801606e:	d101      	bne.n	8016074 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	e023      	b.n	80160bc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	60fb      	str	r3, [r7, #12]
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d1c5      	bne.n	801600c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016080:	4b12      	ldr	r3, [pc, #72]	; (80160cc <ip4_route+0xd0>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d015      	beq.n	80160b4 <ip4_route+0xb8>
 8016088:	4b10      	ldr	r3, [pc, #64]	; (80160cc <ip4_route+0xd0>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016090:	f003 0301 	and.w	r3, r3, #1
 8016094:	2b00      	cmp	r3, #0
 8016096:	d00d      	beq.n	80160b4 <ip4_route+0xb8>
 8016098:	4b0c      	ldr	r3, [pc, #48]	; (80160cc <ip4_route+0xd0>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80160a0:	f003 0304 	and.w	r3, r3, #4
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d005      	beq.n	80160b4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80160a8:	4b08      	ldr	r3, [pc, #32]	; (80160cc <ip4_route+0xd0>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	3304      	adds	r3, #4
 80160ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d101      	bne.n	80160b8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80160b4:	2300      	movs	r3, #0
 80160b6:	e001      	b.n	80160bc <ip4_route+0xc0>
  }

  return netif_default;
 80160b8:	4b04      	ldr	r3, [pc, #16]	; (80160cc <ip4_route+0xd0>)
 80160ba:	681b      	ldr	r3, [r3, #0]
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3714      	adds	r7, #20
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bc80      	pop	{r7}
 80160c4:	4770      	bx	lr
 80160c6:	bf00      	nop
 80160c8:	20008b60 	.word	0x20008b60
 80160cc:	20008b64 	.word	0x20008b64

080160d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b088      	sub	sp, #32
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80160da:	2301      	movs	r3, #1
 80160dc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	091b      	lsrs	r3, r3, #4
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d004      	beq.n	80160fa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f7f7 fdcf 	bl	800dc94 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80160f6:	2300      	movs	r3, #0
 80160f8:	e13e      	b.n	8016378 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	b29b      	uxth	r3, r3
 8016100:	f003 030f 	and.w	r3, r3, #15
 8016104:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8016106:	89fb      	ldrh	r3, [r7, #14]
 8016108:	009b      	lsls	r3, r3, #2
 801610a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	885b      	ldrh	r3, [r3, #2]
 8016110:	b29b      	uxth	r3, r3
 8016112:	4618      	mov	r0, r3
 8016114:	f7f6 fcb0 	bl	800ca78 <lwip_htons>
 8016118:	4603      	mov	r3, r0
 801611a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	891b      	ldrh	r3, [r3, #8]
 8016120:	89ba      	ldrh	r2, [r7, #12]
 8016122:	429a      	cmp	r2, r3
 8016124:	d204      	bcs.n	8016130 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8016126:	89bb      	ldrh	r3, [r7, #12]
 8016128:	4619      	mov	r1, r3
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f7f7 fc3e 	bl	800d9ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	895b      	ldrh	r3, [r3, #10]
 8016134:	89fa      	ldrh	r2, [r7, #14]
 8016136:	429a      	cmp	r2, r3
 8016138:	d807      	bhi.n	801614a <ip4_input+0x7a>
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	891b      	ldrh	r3, [r3, #8]
 801613e:	89ba      	ldrh	r2, [r7, #12]
 8016140:	429a      	cmp	r2, r3
 8016142:	d802      	bhi.n	801614a <ip4_input+0x7a>
 8016144:	89fb      	ldrh	r3, [r7, #14]
 8016146:	2b13      	cmp	r3, #19
 8016148:	d804      	bhi.n	8016154 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f7f7 fda2 	bl	800dc94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016150:	2300      	movs	r3, #0
 8016152:	e111      	b.n	8016378 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	691b      	ldr	r3, [r3, #16]
 8016158:	4a89      	ldr	r2, [pc, #548]	; (8016380 <ip4_input+0x2b0>)
 801615a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	4a87      	ldr	r2, [pc, #540]	; (8016380 <ip4_input+0x2b0>)
 8016162:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016164:	4b86      	ldr	r3, [pc, #536]	; (8016380 <ip4_input+0x2b0>)
 8016166:	695b      	ldr	r3, [r3, #20]
 8016168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801616c:	2be0      	cmp	r3, #224	; 0xe0
 801616e:	d112      	bne.n	8016196 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016176:	f003 0301 	and.w	r3, r3, #1
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b00      	cmp	r3, #0
 801617e:	d007      	beq.n	8016190 <ip4_input+0xc0>
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	3304      	adds	r3, #4
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d002      	beq.n	8016190 <ip4_input+0xc0>
      netif = inp;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	61bb      	str	r3, [r7, #24]
 801618e:	e041      	b.n	8016214 <ip4_input+0x144>
    } else {
      netif = NULL;
 8016190:	2300      	movs	r3, #0
 8016192:	61bb      	str	r3, [r7, #24]
 8016194:	e03e      	b.n	8016214 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8016196:	2301      	movs	r3, #1
 8016198:	613b      	str	r3, [r7, #16]
    netif = inp;
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801619e:	69bb      	ldr	r3, [r7, #24]
 80161a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80161a4:	f003 0301 	and.w	r3, r3, #1
 80161a8:	b2db      	uxtb	r3, r3
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d014      	beq.n	80161d8 <ip4_input+0x108>
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	3304      	adds	r3, #4
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00f      	beq.n	80161d8 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80161b8:	4b71      	ldr	r3, [pc, #452]	; (8016380 <ip4_input+0x2b0>)
 80161ba:	695a      	ldr	r2, [r3, #20]
 80161bc:	69bb      	ldr	r3, [r7, #24]
 80161be:	3304      	adds	r3, #4
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d026      	beq.n	8016214 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80161c6:	4b6e      	ldr	r3, [pc, #440]	; (8016380 <ip4_input+0x2b0>)
 80161c8:	695b      	ldr	r3, [r3, #20]
 80161ca:	69b9      	ldr	r1, [r7, #24]
 80161cc:	4618      	mov	r0, r3
 80161ce:	f000 f9ad 	bl	801652c <ip4_addr_isbroadcast_u32>
 80161d2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d11d      	bne.n	8016214 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d00d      	beq.n	80161fa <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80161de:	4b68      	ldr	r3, [pc, #416]	; (8016380 <ip4_input+0x2b0>)
 80161e0:	695b      	ldr	r3, [r3, #20]
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	2b7f      	cmp	r3, #127	; 0x7f
 80161e6:	d102      	bne.n	80161ee <ip4_input+0x11e>
          netif = NULL;
 80161e8:	2300      	movs	r3, #0
 80161ea:	61bb      	str	r3, [r7, #24]
          break;
 80161ec:	e012      	b.n	8016214 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80161ee:	2300      	movs	r3, #0
 80161f0:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80161f2:	4b64      	ldr	r3, [pc, #400]	; (8016384 <ip4_input+0x2b4>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	61bb      	str	r3, [r7, #24]
 80161f8:	e002      	b.n	8016200 <ip4_input+0x130>
      } else {
        netif = netif->next;
 80161fa:	69bb      	ldr	r3, [r7, #24]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8016200:	69ba      	ldr	r2, [r7, #24]
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	429a      	cmp	r2, r3
 8016206:	d102      	bne.n	801620e <ip4_input+0x13e>
        netif = netif->next;
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d1c4      	bne.n	801619e <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016214:	69bb      	ldr	r3, [r7, #24]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d111      	bne.n	801623e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801621a:	69fb      	ldr	r3, [r7, #28]
 801621c:	7a5b      	ldrb	r3, [r3, #9]
 801621e:	2b11      	cmp	r3, #17
 8016220:	d10d      	bne.n	801623e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8016222:	89fb      	ldrh	r3, [r7, #14]
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	4413      	add	r3, r2
 8016228:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	885b      	ldrh	r3, [r3, #2]
 801622e:	b29b      	uxth	r3, r3
 8016230:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016234:	d103      	bne.n	801623e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d017      	beq.n	8016274 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016244:	4b4e      	ldr	r3, [pc, #312]	; (8016380 <ip4_input+0x2b0>)
 8016246:	691b      	ldr	r3, [r3, #16]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d013      	beq.n	8016274 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801624c:	4b4c      	ldr	r3, [pc, #304]	; (8016380 <ip4_input+0x2b0>)
 801624e:	691b      	ldr	r3, [r3, #16]
 8016250:	6839      	ldr	r1, [r7, #0]
 8016252:	4618      	mov	r0, r3
 8016254:	f000 f96a 	bl	801652c <ip4_addr_isbroadcast_u32>
 8016258:	4603      	mov	r3, r0
 801625a:	2b00      	cmp	r3, #0
 801625c:	d105      	bne.n	801626a <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801625e:	4b48      	ldr	r3, [pc, #288]	; (8016380 <ip4_input+0x2b0>)
 8016260:	691b      	ldr	r3, [r3, #16]
 8016262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016266:	2be0      	cmp	r3, #224	; 0xe0
 8016268:	d104      	bne.n	8016274 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7f7 fd12 	bl	800dc94 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016270:	2300      	movs	r3, #0
 8016272:	e081      	b.n	8016378 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016274:	69bb      	ldr	r3, [r7, #24]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d104      	bne.n	8016284 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f7f7 fd0a 	bl	800dc94 <pbuf_free>
    return ERR_OK;
 8016280:	2300      	movs	r3, #0
 8016282:	e079      	b.n	8016378 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	88db      	ldrh	r3, [r3, #6]
 8016288:	b29b      	uxth	r3, r3
 801628a:	461a      	mov	r2, r3
 801628c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016290:	4013      	ands	r3, r2
 8016292:	2b00      	cmp	r3, #0
 8016294:	d00b      	beq.n	80162ae <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 fc8c 	bl	8016bb4 <ip4_reass>
 801629c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d101      	bne.n	80162a8 <ip4_input+0x1d8>
      return ERR_OK;
 80162a4:	2300      	movs	r3, #0
 80162a6:	e067      	b.n	8016378 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80162ae:	4a34      	ldr	r2, [pc, #208]	; (8016380 <ip4_input+0x2b0>)
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80162b4:	4a32      	ldr	r2, [pc, #200]	; (8016380 <ip4_input+0x2b0>)
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80162ba:	4a31      	ldr	r2, [pc, #196]	; (8016380 <ip4_input+0x2b0>)
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80162c0:	69fb      	ldr	r3, [r7, #28]
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	f003 030f 	and.w	r3, r3, #15
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	b29a      	uxth	r2, r3
 80162d0:	4b2b      	ldr	r3, [pc, #172]	; (8016380 <ip4_input+0x2b0>)
 80162d2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80162d4:	89fb      	ldrh	r3, [r7, #14]
 80162d6:	425b      	negs	r3, r3
 80162d8:	b29b      	uxth	r3, r3
 80162da:	b21b      	sxth	r3, r3
 80162dc:	4619      	mov	r1, r3
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f7f7 fcb4 	bl	800dc4c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	7a5b      	ldrb	r3, [r3, #9]
 80162e8:	2b06      	cmp	r3, #6
 80162ea:	d009      	beq.n	8016300 <ip4_input+0x230>
 80162ec:	2b11      	cmp	r3, #17
 80162ee:	d002      	beq.n	80162f6 <ip4_input+0x226>
 80162f0:	2b01      	cmp	r3, #1
 80162f2:	d00a      	beq.n	801630a <ip4_input+0x23a>
 80162f4:	e00e      	b.n	8016314 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80162f6:	6839      	ldr	r1, [r7, #0]
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7fc fc13 	bl	8012b24 <udp_input>
      break;
 80162fe:	e028      	b.n	8016352 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8016300:	6839      	ldr	r1, [r7, #0]
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f7f9 f908 	bl	800f518 <tcp_input>
      break;
 8016308:	e023      	b.n	8016352 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801630a:	6839      	ldr	r1, [r7, #0]
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f7ff fce7 	bl	8015ce0 <icmp_input>
      break;
 8016312:	e01e      	b.n	8016352 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016314:	4b1a      	ldr	r3, [pc, #104]	; (8016380 <ip4_input+0x2b0>)
 8016316:	695b      	ldr	r3, [r3, #20]
 8016318:	69b9      	ldr	r1, [r7, #24]
 801631a:	4618      	mov	r0, r3
 801631c:	f000 f906 	bl	801652c <ip4_addr_isbroadcast_u32>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d112      	bne.n	801634c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016326:	4b16      	ldr	r3, [pc, #88]	; (8016380 <ip4_input+0x2b0>)
 8016328:	695b      	ldr	r3, [r3, #20]
 801632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801632e:	2be0      	cmp	r3, #224	; 0xe0
 8016330:	d00c      	beq.n	801634c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016336:	4619      	mov	r1, r3
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7f7 fc99 	bl	800dc70 <pbuf_header_force>
        p->payload = iphdr;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	69fa      	ldr	r2, [r7, #28]
 8016342:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016344:	2102      	movs	r1, #2
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f7ff fdd0 	bl	8015eec <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f7f7 fca1 	bl	800dc94 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016352:	4b0b      	ldr	r3, [pc, #44]	; (8016380 <ip4_input+0x2b0>)
 8016354:	2200      	movs	r2, #0
 8016356:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016358:	4b09      	ldr	r3, [pc, #36]	; (8016380 <ip4_input+0x2b0>)
 801635a:	2200      	movs	r2, #0
 801635c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801635e:	4b08      	ldr	r3, [pc, #32]	; (8016380 <ip4_input+0x2b0>)
 8016360:	2200      	movs	r2, #0
 8016362:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016364:	4b06      	ldr	r3, [pc, #24]	; (8016380 <ip4_input+0x2b0>)
 8016366:	2200      	movs	r2, #0
 8016368:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801636a:	4b05      	ldr	r3, [pc, #20]	; (8016380 <ip4_input+0x2b0>)
 801636c:	2200      	movs	r2, #0
 801636e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016370:	4b03      	ldr	r3, [pc, #12]	; (8016380 <ip4_input+0x2b0>)
 8016372:	2200      	movs	r2, #0
 8016374:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016376:	2300      	movs	r3, #0
}
 8016378:	4618      	mov	r0, r3
 801637a:	3720      	adds	r7, #32
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}
 8016380:	20005790 	.word	0x20005790
 8016384:	20008b60 	.word	0x20008b60

08016388 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b08a      	sub	sp, #40	; 0x28
 801638c:	af04      	add	r7, sp, #16
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
 8016394:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d009      	beq.n	80163b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d003      	beq.n	80163ae <ip4_output_if+0x26>
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d102      	bne.n	80163b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80163ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b0:	3304      	adds	r3, #4
 80163b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80163b4:	78fa      	ldrb	r2, [r7, #3]
 80163b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b8:	9302      	str	r3, [sp, #8]
 80163ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80163be:	9301      	str	r3, [sp, #4]
 80163c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80163c4:	9300      	str	r3, [sp, #0]
 80163c6:	4613      	mov	r3, r2
 80163c8:	687a      	ldr	r2, [r7, #4]
 80163ca:	6979      	ldr	r1, [r7, #20]
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	f000 f805 	bl	80163dc <ip4_output_if_src>
 80163d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3718      	adds	r7, #24
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b088      	sub	sp, #32
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	60f8      	str	r0, [r7, #12]
 80163e4:	60b9      	str	r1, [r7, #8]
 80163e6:	607a      	str	r2, [r7, #4]
 80163e8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	89db      	ldrh	r3, [r3, #14]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d006      	beq.n	8016400 <ip4_output_if_src+0x24>
 80163f2:	4b48      	ldr	r3, [pc, #288]	; (8016514 <ip4_output_if_src+0x138>)
 80163f4:	f240 3233 	movw	r2, #819	; 0x333
 80163f8:	4947      	ldr	r1, [pc, #284]	; (8016518 <ip4_output_if_src+0x13c>)
 80163fa:	4848      	ldr	r0, [pc, #288]	; (801651c <ip4_output_if_src+0x140>)
 80163fc:	f001 fb6e 	bl	8017adc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d060      	beq.n	80164c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016406:	2314      	movs	r3, #20
 8016408:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801640a:	2114      	movs	r1, #20
 801640c:	68f8      	ldr	r0, [r7, #12]
 801640e:	f7f7 fc1d 	bl	800dc4c <pbuf_header>
 8016412:	4603      	mov	r3, r0
 8016414:	2b00      	cmp	r3, #0
 8016416:	d002      	beq.n	801641e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016418:	f06f 0301 	mvn.w	r3, #1
 801641c:	e075      	b.n	801650a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	895b      	ldrh	r3, [r3, #10]
 8016428:	2b13      	cmp	r3, #19
 801642a:	d806      	bhi.n	801643a <ip4_output_if_src+0x5e>
 801642c:	4b39      	ldr	r3, [pc, #228]	; (8016514 <ip4_output_if_src+0x138>)
 801642e:	f240 3261 	movw	r2, #865	; 0x361
 8016432:	493b      	ldr	r1, [pc, #236]	; (8016520 <ip4_output_if_src+0x144>)
 8016434:	4839      	ldr	r0, [pc, #228]	; (801651c <ip4_output_if_src+0x140>)
 8016436:	f001 fb51 	bl	8017adc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801643a:	69fb      	ldr	r3, [r7, #28]
 801643c:	78fa      	ldrb	r2, [r7, #3]
 801643e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016446:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016450:	8b7b      	ldrh	r3, [r7, #26]
 8016452:	089b      	lsrs	r3, r3, #2
 8016454:	b29b      	uxth	r3, r3
 8016456:	b2db      	uxtb	r3, r3
 8016458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801645c:	b2da      	uxtb	r2, r3
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016468:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	891b      	ldrh	r3, [r3, #8]
 801646e:	4618      	mov	r0, r3
 8016470:	f7f6 fb02 	bl	800ca78 <lwip_htons>
 8016474:	4603      	mov	r3, r0
 8016476:	461a      	mov	r2, r3
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	2200      	movs	r2, #0
 8016480:	719a      	strb	r2, [r3, #6]
 8016482:	2200      	movs	r2, #0
 8016484:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016486:	4b27      	ldr	r3, [pc, #156]	; (8016524 <ip4_output_if_src+0x148>)
 8016488:	881b      	ldrh	r3, [r3, #0]
 801648a:	4618      	mov	r0, r3
 801648c:	f7f6 faf4 	bl	800ca78 <lwip_htons>
 8016490:	4603      	mov	r3, r0
 8016492:	461a      	mov	r2, r3
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016498:	4b22      	ldr	r3, [pc, #136]	; (8016524 <ip4_output_if_src+0x148>)
 801649a:	881b      	ldrh	r3, [r3, #0]
 801649c:	3301      	adds	r3, #1
 801649e:	b29a      	uxth	r2, r3
 80164a0:	4b20      	ldr	r3, [pc, #128]	; (8016524 <ip4_output_if_src+0x148>)
 80164a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d104      	bne.n	80164b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80164aa:	4b1f      	ldr	r3, [pc, #124]	; (8016528 <ip4_output_if_src+0x14c>)
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	69fb      	ldr	r3, [r7, #28]
 80164b0:	60da      	str	r2, [r3, #12]
 80164b2:	e003      	b.n	80164bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80164bc:	69fb      	ldr	r3, [r7, #28]
 80164be:	2200      	movs	r2, #0
 80164c0:	729a      	strb	r2, [r3, #10]
 80164c2:	2200      	movs	r2, #0
 80164c4:	72da      	strb	r2, [r3, #11]
 80164c6:	e008      	b.n	80164da <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	691b      	ldr	r3, [r3, #16]
 80164d2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80164d4:	f107 0314 	add.w	r3, r7, #20
 80164d8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80164da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d00c      	beq.n	80164fc <ip4_output_if_src+0x120>
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	891a      	ldrh	r2, [r3, #8]
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d906      	bls.n	80164fc <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80164f2:	68f8      	ldr	r0, [r7, #12]
 80164f4:	f000 fd08 	bl	8016f08 <ip4_frag>
 80164f8:	4603      	mov	r3, r0
 80164fa:	e006      	b.n	801650a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80164fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fe:	695b      	ldr	r3, [r3, #20]
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	68f9      	ldr	r1, [r7, #12]
 8016504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016506:	4798      	blx	r3
 8016508:	4603      	mov	r3, r0
}
 801650a:	4618      	mov	r0, r3
 801650c:	3720      	adds	r7, #32
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	0801a860 	.word	0x0801a860
 8016518:	0801a894 	.word	0x0801a894
 801651c:	0801a8a0 	.word	0x0801a8a0
 8016520:	0801a8c8 	.word	0x0801a8c8
 8016524:	2000027a 	.word	0x2000027a
 8016528:	0801ad08 	.word	0x0801ad08

0801652c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801652c:	b480      	push	{r7}
 801652e:	b085      	sub	sp, #20
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016540:	d002      	beq.n	8016548 <ip4_addr_isbroadcast_u32+0x1c>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d101      	bne.n	801654c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016548:	2301      	movs	r3, #1
 801654a:	e02a      	b.n	80165a2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016552:	f003 0302 	and.w	r3, r3, #2
 8016556:	2b00      	cmp	r3, #0
 8016558:	d101      	bne.n	801655e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801655a:	2300      	movs	r3, #0
 801655c:	e021      	b.n	80165a2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	3304      	adds	r3, #4
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	429a      	cmp	r2, r3
 8016568:	d101      	bne.n	801656e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801656a:	2300      	movs	r3, #0
 801656c:	e019      	b.n	80165a2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801656e:	68fa      	ldr	r2, [r7, #12]
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	3304      	adds	r3, #4
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	405a      	eors	r2, r3
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	3308      	adds	r3, #8
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	4013      	ands	r3, r2
 8016580:	2b00      	cmp	r3, #0
 8016582:	d10d      	bne.n	80165a0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	3308      	adds	r3, #8
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	43da      	mvns	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	3308      	adds	r3, #8
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016598:	429a      	cmp	r2, r3
 801659a:	d101      	bne.n	80165a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801659c:	2301      	movs	r3, #1
 801659e:	e000      	b.n	80165a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80165a0:	2300      	movs	r3, #0
  }
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3714      	adds	r7, #20
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bc80      	pop	{r7}
 80165aa:	4770      	bx	lr

080165ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b084      	sub	sp, #16
 80165b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80165b2:	2300      	movs	r3, #0
 80165b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80165b6:	4b12      	ldr	r3, [pc, #72]	; (8016600 <ip_reass_tmr+0x54>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80165bc:	e018      	b.n	80165f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	7fdb      	ldrb	r3, [r3, #31]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d00b      	beq.n	80165de <ip_reass_tmr+0x32>
      r->timer--;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	7fdb      	ldrb	r3, [r3, #31]
 80165ca:	3b01      	subs	r3, #1
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	60fb      	str	r3, [r7, #12]
 80165dc:	e008      	b.n	80165f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80165e8:	68b9      	ldr	r1, [r7, #8]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f000 f80a 	bl	8016604 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d1e3      	bne.n	80165be <ip_reass_tmr+0x12>
     }
   }
}
 80165f6:	bf00      	nop
 80165f8:	3710      	adds	r7, #16
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	2000027c 	.word	0x2000027c

08016604 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b088      	sub	sp, #32
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801660e:	2300      	movs	r3, #0
 8016610:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016612:	683a      	ldr	r2, [r7, #0]
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	429a      	cmp	r2, r3
 8016618:	d105      	bne.n	8016626 <ip_reass_free_complete_datagram+0x22>
 801661a:	4b45      	ldr	r3, [pc, #276]	; (8016730 <ip_reass_free_complete_datagram+0x12c>)
 801661c:	22ab      	movs	r2, #171	; 0xab
 801661e:	4945      	ldr	r1, [pc, #276]	; (8016734 <ip_reass_free_complete_datagram+0x130>)
 8016620:	4845      	ldr	r0, [pc, #276]	; (8016738 <ip_reass_free_complete_datagram+0x134>)
 8016622:	f001 fa5b 	bl	8017adc <iprintf>
  if (prev != NULL) {
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d00a      	beq.n	8016642 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	429a      	cmp	r2, r3
 8016634:	d005      	beq.n	8016642 <ip_reass_free_complete_datagram+0x3e>
 8016636:	4b3e      	ldr	r3, [pc, #248]	; (8016730 <ip_reass_free_complete_datagram+0x12c>)
 8016638:	22ad      	movs	r2, #173	; 0xad
 801663a:	4940      	ldr	r1, [pc, #256]	; (801673c <ip_reass_free_complete_datagram+0x138>)
 801663c:	483e      	ldr	r0, [pc, #248]	; (8016738 <ip_reass_free_complete_datagram+0x134>)
 801663e:	f001 fa4d 	bl	8017adc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	685b      	ldr	r3, [r3, #4]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	889b      	ldrh	r3, [r3, #4]
 801664e:	b29b      	uxth	r3, r3
 8016650:	2b00      	cmp	r3, #0
 8016652:	d12a      	bne.n	80166aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	681a      	ldr	r2, [r3, #0]
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016662:	69bb      	ldr	r3, [r7, #24]
 8016664:	6858      	ldr	r0, [r3, #4]
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	3308      	adds	r3, #8
 801666a:	2214      	movs	r2, #20
 801666c:	4619      	mov	r1, r3
 801666e:	f001 f97c 	bl	801796a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016672:	2101      	movs	r1, #1
 8016674:	69b8      	ldr	r0, [r7, #24]
 8016676:	f7ff fc49 	bl	8015f0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801667a:	69b8      	ldr	r0, [r7, #24]
 801667c:	f7f7 fb9e 	bl	800ddbc <pbuf_clen>
 8016680:	4603      	mov	r3, r0
 8016682:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016684:	8bfa      	ldrh	r2, [r7, #30]
 8016686:	8a7b      	ldrh	r3, [r7, #18]
 8016688:	4413      	add	r3, r2
 801668a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801668e:	db05      	blt.n	801669c <ip_reass_free_complete_datagram+0x98>
 8016690:	4b27      	ldr	r3, [pc, #156]	; (8016730 <ip_reass_free_complete_datagram+0x12c>)
 8016692:	22bc      	movs	r2, #188	; 0xbc
 8016694:	492a      	ldr	r1, [pc, #168]	; (8016740 <ip_reass_free_complete_datagram+0x13c>)
 8016696:	4828      	ldr	r0, [pc, #160]	; (8016738 <ip_reass_free_complete_datagram+0x134>)
 8016698:	f001 fa20 	bl	8017adc <iprintf>
    pbufs_freed += clen;
 801669c:	8bfa      	ldrh	r2, [r7, #30]
 801669e:	8a7b      	ldrh	r3, [r7, #18]
 80166a0:	4413      	add	r3, r2
 80166a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80166a4:	69b8      	ldr	r0, [r7, #24]
 80166a6:	f7f7 faf5 	bl	800dc94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	685b      	ldr	r3, [r3, #4]
 80166ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80166b0:	e01f      	b.n	80166f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80166b2:	69bb      	ldr	r3, [r7, #24]
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	f7f7 fb7a 	bl	800ddbc <pbuf_clen>
 80166c8:	4603      	mov	r3, r0
 80166ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166cc:	8bfa      	ldrh	r2, [r7, #30]
 80166ce:	8a7b      	ldrh	r3, [r7, #18]
 80166d0:	4413      	add	r3, r2
 80166d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166d6:	db05      	blt.n	80166e4 <ip_reass_free_complete_datagram+0xe0>
 80166d8:	4b15      	ldr	r3, [pc, #84]	; (8016730 <ip_reass_free_complete_datagram+0x12c>)
 80166da:	22cc      	movs	r2, #204	; 0xcc
 80166dc:	4918      	ldr	r1, [pc, #96]	; (8016740 <ip_reass_free_complete_datagram+0x13c>)
 80166de:	4816      	ldr	r0, [pc, #88]	; (8016738 <ip_reass_free_complete_datagram+0x134>)
 80166e0:	f001 f9fc 	bl	8017adc <iprintf>
    pbufs_freed += clen;
 80166e4:	8bfa      	ldrh	r2, [r7, #30]
 80166e6:	8a7b      	ldrh	r3, [r7, #18]
 80166e8:	4413      	add	r3, r2
 80166ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80166ec:	68f8      	ldr	r0, [r7, #12]
 80166ee:	f7f7 fad1 	bl	800dc94 <pbuf_free>
  while (p != NULL) {
 80166f2:	69bb      	ldr	r3, [r7, #24]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d1dc      	bne.n	80166b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80166f8:	6839      	ldr	r1, [r7, #0]
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 f8c2 	bl	8016884 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016700:	4b10      	ldr	r3, [pc, #64]	; (8016744 <ip_reass_free_complete_datagram+0x140>)
 8016702:	881b      	ldrh	r3, [r3, #0]
 8016704:	8bfa      	ldrh	r2, [r7, #30]
 8016706:	429a      	cmp	r2, r3
 8016708:	d905      	bls.n	8016716 <ip_reass_free_complete_datagram+0x112>
 801670a:	4b09      	ldr	r3, [pc, #36]	; (8016730 <ip_reass_free_complete_datagram+0x12c>)
 801670c:	22d2      	movs	r2, #210	; 0xd2
 801670e:	490e      	ldr	r1, [pc, #56]	; (8016748 <ip_reass_free_complete_datagram+0x144>)
 8016710:	4809      	ldr	r0, [pc, #36]	; (8016738 <ip_reass_free_complete_datagram+0x134>)
 8016712:	f001 f9e3 	bl	8017adc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016716:	4b0b      	ldr	r3, [pc, #44]	; (8016744 <ip_reass_free_complete_datagram+0x140>)
 8016718:	881a      	ldrh	r2, [r3, #0]
 801671a:	8bfb      	ldrh	r3, [r7, #30]
 801671c:	1ad3      	subs	r3, r2, r3
 801671e:	b29a      	uxth	r2, r3
 8016720:	4b08      	ldr	r3, [pc, #32]	; (8016744 <ip_reass_free_complete_datagram+0x140>)
 8016722:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016724:	8bfb      	ldrh	r3, [r7, #30]
}
 8016726:	4618      	mov	r0, r3
 8016728:	3720      	adds	r7, #32
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}
 801672e:	bf00      	nop
 8016730:	0801a8f8 	.word	0x0801a8f8
 8016734:	0801a934 	.word	0x0801a934
 8016738:	0801a940 	.word	0x0801a940
 801673c:	0801a968 	.word	0x0801a968
 8016740:	0801a97c 	.word	0x0801a97c
 8016744:	20000280 	.word	0x20000280
 8016748:	0801a99c 	.word	0x0801a99c

0801674c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b08a      	sub	sp, #40	; 0x28
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016756:	2300      	movs	r3, #0
 8016758:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801675a:	2300      	movs	r3, #0
 801675c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016762:	2300      	movs	r3, #0
 8016764:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016766:	2300      	movs	r3, #0
 8016768:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801676a:	4b28      	ldr	r3, [pc, #160]	; (801680c <ip_reass_remove_oldest_datagram+0xc0>)
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016770:	e030      	b.n	80167d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016774:	695a      	ldr	r2, [r3, #20]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	68db      	ldr	r3, [r3, #12]
 801677a:	429a      	cmp	r2, r3
 801677c:	d10c      	bne.n	8016798 <ip_reass_remove_oldest_datagram+0x4c>
 801677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016780:	699a      	ldr	r2, [r3, #24]
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	691b      	ldr	r3, [r3, #16]
 8016786:	429a      	cmp	r2, r3
 8016788:	d106      	bne.n	8016798 <ip_reass_remove_oldest_datagram+0x4c>
 801678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801678c:	899a      	ldrh	r2, [r3, #12]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	889b      	ldrh	r3, [r3, #4]
 8016792:	b29b      	uxth	r3, r3
 8016794:	429a      	cmp	r2, r3
 8016796:	d014      	beq.n	80167c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	3301      	adds	r3, #1
 801679c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801679e:	6a3b      	ldr	r3, [r7, #32]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d104      	bne.n	80167ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80167a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80167a8:	69fb      	ldr	r3, [r7, #28]
 80167aa:	61bb      	str	r3, [r7, #24]
 80167ac:	e009      	b.n	80167c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80167ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b0:	7fda      	ldrb	r2, [r3, #31]
 80167b2:	6a3b      	ldr	r3, [r7, #32]
 80167b4:	7fdb      	ldrb	r3, [r3, #31]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d803      	bhi.n	80167c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80167ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80167c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d001      	beq.n	80167ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80167ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80167d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d1cb      	bne.n	8016772 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80167da:	6a3b      	ldr	r3, [r7, #32]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d008      	beq.n	80167f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80167e0:	69b9      	ldr	r1, [r7, #24]
 80167e2:	6a38      	ldr	r0, [r7, #32]
 80167e4:	f7ff ff0e 	bl	8016604 <ip_reass_free_complete_datagram>
 80167e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80167ea:	697a      	ldr	r2, [r7, #20]
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	4413      	add	r3, r2
 80167f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80167f2:	697a      	ldr	r2, [r7, #20]
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	429a      	cmp	r2, r3
 80167f8:	da02      	bge.n	8016800 <ip_reass_remove_oldest_datagram+0xb4>
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	2b01      	cmp	r3, #1
 80167fe:	dcac      	bgt.n	801675a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016800:	697b      	ldr	r3, [r7, #20]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3728      	adds	r7, #40	; 0x28
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	2000027c 	.word	0x2000027c

08016810 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b084      	sub	sp, #16
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801681a:	2004      	movs	r0, #4
 801681c:	f7f6 fcd4 	bl	800d1c8 <memp_malloc>
 8016820:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d110      	bne.n	801684a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016828:	6839      	ldr	r1, [r7, #0]
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f7ff ff8e 	bl	801674c <ip_reass_remove_oldest_datagram>
 8016830:	4602      	mov	r2, r0
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	4293      	cmp	r3, r2
 8016836:	dc03      	bgt.n	8016840 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016838:	2004      	movs	r0, #4
 801683a:	f7f6 fcc5 	bl	800d1c8 <memp_malloc>
 801683e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016846:	2300      	movs	r3, #0
 8016848:	e016      	b.n	8016878 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801684a:	2220      	movs	r2, #32
 801684c:	2100      	movs	r1, #0
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f001 f896 	bl	8017980 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2203      	movs	r2, #3
 8016858:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801685a:	4b09      	ldr	r3, [pc, #36]	; (8016880 <ip_reass_enqueue_new_datagram+0x70>)
 801685c:	681a      	ldr	r2, [r3, #0]
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016862:	4a07      	ldr	r2, [pc, #28]	; (8016880 <ip_reass_enqueue_new_datagram+0x70>)
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	3308      	adds	r3, #8
 801686c:	2214      	movs	r2, #20
 801686e:	6879      	ldr	r1, [r7, #4]
 8016870:	4618      	mov	r0, r3
 8016872:	f001 f87a 	bl	801796a <memcpy>
  return ipr;
 8016876:	68fb      	ldr	r3, [r7, #12]
}
 8016878:	4618      	mov	r0, r3
 801687a:	3710      	adds	r7, #16
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}
 8016880:	2000027c 	.word	0x2000027c

08016884 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801688e:	4b10      	ldr	r3, [pc, #64]	; (80168d0 <ip_reass_dequeue_datagram+0x4c>)
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	687a      	ldr	r2, [r7, #4]
 8016894:	429a      	cmp	r2, r3
 8016896:	d104      	bne.n	80168a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4a0c      	ldr	r2, [pc, #48]	; (80168d0 <ip_reass_dequeue_datagram+0x4c>)
 801689e:	6013      	str	r3, [r2, #0]
 80168a0:	e00d      	b.n	80168be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d106      	bne.n	80168b6 <ip_reass_dequeue_datagram+0x32>
 80168a8:	4b0a      	ldr	r3, [pc, #40]	; (80168d4 <ip_reass_dequeue_datagram+0x50>)
 80168aa:	f240 1245 	movw	r2, #325	; 0x145
 80168ae:	490a      	ldr	r1, [pc, #40]	; (80168d8 <ip_reass_dequeue_datagram+0x54>)
 80168b0:	480a      	ldr	r0, [pc, #40]	; (80168dc <ip_reass_dequeue_datagram+0x58>)
 80168b2:	f001 f913 	bl	8017adc <iprintf>
    prev->next = ipr->next;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80168be:	6879      	ldr	r1, [r7, #4]
 80168c0:	2004      	movs	r0, #4
 80168c2:	f7f6 fccd 	bl	800d260 <memp_free>
}
 80168c6:	bf00      	nop
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
 80168ce:	bf00      	nop
 80168d0:	2000027c 	.word	0x2000027c
 80168d4:	0801a8f8 	.word	0x0801a8f8
 80168d8:	0801a9b8 	.word	0x0801a9b8
 80168dc:	0801a940 	.word	0x0801a940

080168e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b08c      	sub	sp, #48	; 0x30
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	60b9      	str	r1, [r7, #8]
 80168ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80168ec:	2300      	movs	r3, #0
 80168ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80168f0:	2301      	movs	r3, #1
 80168f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80168f4:	68bb      	ldr	r3, [r7, #8]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80168fa:	69fb      	ldr	r3, [r7, #28]
 80168fc:	885b      	ldrh	r3, [r3, #2]
 80168fe:	b29b      	uxth	r3, r3
 8016900:	4618      	mov	r0, r3
 8016902:	f7f6 f8b9 	bl	800ca78 <lwip_htons>
 8016906:	4603      	mov	r3, r0
 8016908:	461a      	mov	r2, r3
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	b29b      	uxth	r3, r3
 8016910:	f003 030f 	and.w	r3, r3, #15
 8016914:	b29b      	uxth	r3, r3
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	b29b      	uxth	r3, r3
 801691a:	1ad3      	subs	r3, r2, r3
 801691c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801691e:	69fb      	ldr	r3, [r7, #28]
 8016920:	88db      	ldrh	r3, [r3, #6]
 8016922:	b29b      	uxth	r3, r3
 8016924:	4618      	mov	r0, r3
 8016926:	f7f6 f8a7 	bl	800ca78 <lwip_htons>
 801692a:	4603      	mov	r3, r0
 801692c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016930:	b29b      	uxth	r3, r3
 8016932:	00db      	lsls	r3, r3, #3
 8016934:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801693e:	2200      	movs	r2, #0
 8016940:	701a      	strb	r2, [r3, #0]
 8016942:	2200      	movs	r2, #0
 8016944:	705a      	strb	r2, [r3, #1]
 8016946:	2200      	movs	r2, #0
 8016948:	709a      	strb	r2, [r3, #2]
 801694a:	2200      	movs	r2, #0
 801694c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016950:	8b3a      	ldrh	r2, [r7, #24]
 8016952:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8016954:	8b3a      	ldrh	r2, [r7, #24]
 8016956:	8b7b      	ldrh	r3, [r7, #26]
 8016958:	4413      	add	r3, r2
 801695a:	b29a      	uxth	r2, r3
 801695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801695e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	685b      	ldr	r3, [r3, #4]
 8016964:	627b      	str	r3, [r7, #36]	; 0x24
 8016966:	e061      	b.n	8016a2c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8016968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016970:	889b      	ldrh	r3, [r3, #4]
 8016972:	b29a      	uxth	r2, r3
 8016974:	697b      	ldr	r3, [r7, #20]
 8016976:	889b      	ldrh	r3, [r3, #4]
 8016978:	b29b      	uxth	r3, r3
 801697a:	429a      	cmp	r2, r3
 801697c:	d232      	bcs.n	80169e4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016982:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016986:	2b00      	cmp	r3, #0
 8016988:	d01f      	beq.n	80169ca <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698c:	889b      	ldrh	r3, [r3, #4]
 801698e:	b29a      	uxth	r2, r3
 8016990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016992:	88db      	ldrh	r3, [r3, #6]
 8016994:	b29b      	uxth	r3, r3
 8016996:	429a      	cmp	r2, r3
 8016998:	f0c0 80e3 	bcc.w	8016b62 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 801699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801699e:	88db      	ldrh	r3, [r3, #6]
 80169a0:	b29a      	uxth	r2, r3
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	889b      	ldrh	r3, [r3, #4]
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	429a      	cmp	r2, r3
 80169aa:	f200 80da 	bhi.w	8016b62 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80169ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b0:	68ba      	ldr	r2, [r7, #8]
 80169b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80169b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b6:	88db      	ldrh	r3, [r3, #6]
 80169b8:	b29a      	uxth	r2, r3
 80169ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169bc:	889b      	ldrh	r3, [r3, #4]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d037      	beq.n	8016a34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80169c4:	2300      	movs	r3, #0
 80169c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80169c8:	e034      	b.n	8016a34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80169ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169cc:	88db      	ldrh	r3, [r3, #6]
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	889b      	ldrh	r3, [r3, #4]
 80169d4:	b29b      	uxth	r3, r3
 80169d6:	429a      	cmp	r2, r3
 80169d8:	f200 80c5 	bhi.w	8016b66 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	68ba      	ldr	r2, [r7, #8]
 80169e0:	605a      	str	r2, [r3, #4]
      break;
 80169e2:	e027      	b.n	8016a34 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80169e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169e6:	889b      	ldrh	r3, [r3, #4]
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	889b      	ldrh	r3, [r3, #4]
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	429a      	cmp	r2, r3
 80169f2:	f000 80ba 	beq.w	8016b6a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80169f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169f8:	889b      	ldrh	r3, [r3, #4]
 80169fa:	b29a      	uxth	r2, r3
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	88db      	ldrh	r3, [r3, #6]
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	429a      	cmp	r2, r3
 8016a04:	f0c0 80b3 	bcc.w	8016b6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d009      	beq.n	8016a22 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8016a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a10:	88db      	ldrh	r3, [r3, #6]
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	889b      	ldrh	r3, [r3, #4]
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d001      	beq.n	8016a22 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016a22:	697b      	ldr	r3, [r7, #20]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d19a      	bne.n	8016968 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016a32:	e000      	b.n	8016a36 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016a34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d12d      	bne.n	8016a98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8016a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d01c      	beq.n	8016a7c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a44:	88db      	ldrh	r3, [r3, #6]
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a4a:	889b      	ldrh	r3, [r3, #4]
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d906      	bls.n	8016a60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8016a52:	4b51      	ldr	r3, [pc, #324]	; (8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016a54:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016a58:	4950      	ldr	r1, [pc, #320]	; (8016b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a5a:	4851      	ldr	r0, [pc, #324]	; (8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016a5c:	f001 f83e 	bl	8017adc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a68:	88db      	ldrh	r3, [r3, #6]
 8016a6a:	b29a      	uxth	r2, r3
 8016a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a6e:	889b      	ldrh	r3, [r3, #4]
 8016a70:	b29b      	uxth	r3, r3
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d010      	beq.n	8016a98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8016a76:	2300      	movs	r3, #0
 8016a78:	623b      	str	r3, [r7, #32]
 8016a7a:	e00d      	b.n	8016a98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	685b      	ldr	r3, [r3, #4]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d006      	beq.n	8016a92 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8016a84:	4b44      	ldr	r3, [pc, #272]	; (8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016a86:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016a8a:	4946      	ldr	r1, [pc, #280]	; (8016ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a8c:	4844      	ldr	r0, [pc, #272]	; (8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016a8e:	f001 f825 	bl	8017adc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	68ba      	ldr	r2, [r7, #8]
 8016a96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d105      	bne.n	8016aaa <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	7f9b      	ldrb	r3, [r3, #30]
 8016aa2:	f003 0301 	and.w	r3, r3, #1
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d059      	beq.n	8016b5e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8016aaa:	6a3b      	ldr	r3, [r7, #32]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d04f      	beq.n	8016b50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d006      	beq.n	8016ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	685b      	ldr	r3, [r3, #4]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	889b      	ldrh	r3, [r3, #4]
 8016ac0:	b29b      	uxth	r3, r3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d002      	beq.n	8016acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	623b      	str	r3, [r7, #32]
 8016aca:	e041      	b.n	8016b50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ace:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016ad6:	e012      	b.n	8016afe <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	88db      	ldrh	r3, [r3, #6]
 8016ae2:	b29a      	uxth	r2, r3
 8016ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae6:	889b      	ldrh	r3, [r3, #4]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d002      	beq.n	8016af4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8016aee:	2300      	movs	r3, #0
 8016af0:	623b      	str	r3, [r7, #32]
            break;
 8016af2:	e007      	b.n	8016b04 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d1e9      	bne.n	8016ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016b04:	6a3b      	ldr	r3, [r7, #32]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d022      	beq.n	8016b50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	685b      	ldr	r3, [r3, #4]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d106      	bne.n	8016b20 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016b12:	4b21      	ldr	r3, [pc, #132]	; (8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016b14:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016b18:	4923      	ldr	r1, [pc, #140]	; (8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b1a:	4821      	ldr	r0, [pc, #132]	; (8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016b1c:	f000 ffde 	bl	8017adc <iprintf>
          LWIP_ASSERT("sanity check",
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d106      	bne.n	8016b3a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8016b2c:	4b1a      	ldr	r3, [pc, #104]	; (8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016b2e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016b32:	491d      	ldr	r1, [pc, #116]	; (8016ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b34:	481a      	ldr	r0, [pc, #104]	; (8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016b36:	f000 ffd1 	bl	8017adc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d006      	beq.n	8016b50 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016b42:	4b15      	ldr	r3, [pc, #84]	; (8016b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016b44:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016b48:	4918      	ldr	r1, [pc, #96]	; (8016bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016b4a:	4815      	ldr	r0, [pc, #84]	; (8016ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016b4c:	f000 ffc6 	bl	8017adc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016b50:	6a3b      	ldr	r3, [r7, #32]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	bf14      	ite	ne
 8016b56:	2301      	movne	r3, #1
 8016b58:	2300      	moveq	r3, #0
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	e018      	b.n	8016b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e016      	b.n	8016b90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8016b62:	bf00      	nop
 8016b64:	e004      	b.n	8016b70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8016b66:	bf00      	nop
 8016b68:	e002      	b.n	8016b70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016b6a:	bf00      	nop
 8016b6c:	e000      	b.n	8016b70 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016b6e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8016b70:	68b8      	ldr	r0, [r7, #8]
 8016b72:	f7f7 f923 	bl	800ddbc <pbuf_clen>
 8016b76:	4603      	mov	r3, r0
 8016b78:	461a      	mov	r2, r3
 8016b7a:	4b0d      	ldr	r3, [pc, #52]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	1a9b      	subs	r3, r3, r2
 8016b80:	b29a      	uxth	r2, r3
 8016b82:	4b0b      	ldr	r3, [pc, #44]	; (8016bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016b84:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8016b86:	68b8      	ldr	r0, [r7, #8]
 8016b88:	f7f7 f884 	bl	800dc94 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8016b90:	4618      	mov	r0, r3
 8016b92:	3730      	adds	r7, #48	; 0x30
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	0801a8f8 	.word	0x0801a8f8
 8016b9c:	0801a9d4 	.word	0x0801a9d4
 8016ba0:	0801a940 	.word	0x0801a940
 8016ba4:	0801a9f4 	.word	0x0801a9f4
 8016ba8:	0801aa2c 	.word	0x0801aa2c
 8016bac:	0801aa3c 	.word	0x0801aa3c
 8016bb0:	20000280 	.word	0x20000280

08016bb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b08e      	sub	sp, #56	; 0x38
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	f003 030f 	and.w	r3, r3, #15
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	2b14      	cmp	r3, #20
 8016bce:	f040 8131 	bne.w	8016e34 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd4:	88db      	ldrh	r3, [r3, #6]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7f5 ff4d 	bl	800ca78 <lwip_htons>
 8016bde:	4603      	mov	r3, r0
 8016be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016be4:	b29b      	uxth	r3, r3
 8016be6:	00db      	lsls	r3, r3, #3
 8016be8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bec:	885b      	ldrh	r3, [r3, #2]
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	4618      	mov	r0, r3
 8016bf2:	f7f5 ff41 	bl	800ca78 <lwip_htons>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	461a      	mov	r2, r3
 8016bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	f003 030f 	and.w	r3, r3, #15
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	b29b      	uxth	r3, r3
 8016c0a:	1ad3      	subs	r3, r2, r3
 8016c0c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7f7 f8d4 	bl	800ddbc <pbuf_clen>
 8016c14:	4603      	mov	r3, r0
 8016c16:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016c18:	4b8d      	ldr	r3, [pc, #564]	; (8016e50 <ip4_reass+0x29c>)
 8016c1a:	881b      	ldrh	r3, [r3, #0]
 8016c1c:	461a      	mov	r2, r3
 8016c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c20:	4413      	add	r3, r2
 8016c22:	2b0a      	cmp	r3, #10
 8016c24:	dd10      	ble.n	8016c48 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c28:	4619      	mov	r1, r3
 8016c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c2c:	f7ff fd8e 	bl	801674c <ip_reass_remove_oldest_datagram>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f000 8100 	beq.w	8016e38 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016c38:	4b85      	ldr	r3, [pc, #532]	; (8016e50 <ip4_reass+0x29c>)
 8016c3a:	881b      	ldrh	r3, [r3, #0]
 8016c3c:	461a      	mov	r2, r3
 8016c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c40:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016c42:	2b0a      	cmp	r3, #10
 8016c44:	f300 80f8 	bgt.w	8016e38 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016c48:	4b82      	ldr	r3, [pc, #520]	; (8016e54 <ip4_reass+0x2a0>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8016c4e:	e015      	b.n	8016c7c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c52:	695a      	ldr	r2, [r3, #20]
 8016c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	d10c      	bne.n	8016c76 <ip4_reass+0xc2>
 8016c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c5e:	699a      	ldr	r2, [r3, #24]
 8016c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c62:	691b      	ldr	r3, [r3, #16]
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d106      	bne.n	8016c76 <ip4_reass+0xc2>
 8016c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6a:	899a      	ldrh	r2, [r3, #12]
 8016c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c6e:	889b      	ldrh	r3, [r3, #4]
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d006      	beq.n	8016c84 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8016c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d1e6      	bne.n	8016c50 <ip4_reass+0x9c>
 8016c82:	e000      	b.n	8016c86 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016c84:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d109      	bne.n	8016ca0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c8e:	4619      	mov	r1, r3
 8016c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016c92:	f7ff fdbd 	bl	8016810 <ip_reass_enqueue_new_datagram>
 8016c96:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d11c      	bne.n	8016cd8 <ip4_reass+0x124>
      goto nullreturn;
 8016c9e:	e0ce      	b.n	8016e3e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca2:	88db      	ldrh	r3, [r3, #6]
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7f5 fee6 	bl	800ca78 <lwip_htons>
 8016cac:	4603      	mov	r3, r0
 8016cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d110      	bne.n	8016cd8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cb8:	89db      	ldrh	r3, [r3, #14]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f5 fedc 	bl	800ca78 <lwip_htons>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d006      	beq.n	8016cd8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ccc:	3308      	adds	r3, #8
 8016cce:	2214      	movs	r2, #20
 8016cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f000 fe49 	bl	801796a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cda:	88db      	ldrh	r3, [r3, #6]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	f003 0320 	and.w	r3, r3, #32
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	bf0c      	ite	eq
 8016ce6:	2301      	moveq	r3, #1
 8016ce8:	2300      	movne	r3, #0
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d00e      	beq.n	8016d12 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8016cf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016cf8:	4413      	add	r3, r2
 8016cfa:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016cfc:	8b7a      	ldrh	r2, [r7, #26]
 8016cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d00:	429a      	cmp	r2, r3
 8016d02:	f0c0 8099 	bcc.w	8016e38 <ip4_reass+0x284>
 8016d06:	8b7b      	ldrh	r3, [r7, #26]
 8016d08:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	f200 8093 	bhi.w	8016e38 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016d12:	69fa      	ldr	r2, [r7, #28]
 8016d14:	6879      	ldr	r1, [r7, #4]
 8016d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d18:	f7ff fde2 	bl	80168e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016d1c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d24:	f000 808a 	beq.w	8016e3c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016d28:	4b49      	ldr	r3, [pc, #292]	; (8016e50 <ip4_reass+0x29c>)
 8016d2a:	881a      	ldrh	r2, [r3, #0]
 8016d2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d2e:	4413      	add	r3, r2
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	4b47      	ldr	r3, [pc, #284]	; (8016e50 <ip4_reass+0x29c>)
 8016d34:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016d36:	69fb      	ldr	r3, [r7, #28]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d00d      	beq.n	8016d58 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d40:	4413      	add	r3, r2
 8016d42:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d46:	8a7a      	ldrh	r2, [r7, #18]
 8016d48:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4c:	7f9b      	ldrb	r3, [r3, #30]
 8016d4e:	f043 0301 	orr.w	r3, r3, #1
 8016d52:	b2da      	uxtb	r2, r3
 8016d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d56:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	d168      	bne.n	8016e30 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8016d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d60:	8b9b      	ldrh	r3, [r3, #28]
 8016d62:	3314      	adds	r3, #20
 8016d64:	b29a      	uxth	r2, r3
 8016d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d68:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8016d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	685b      	ldr	r3, [r3, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8016d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d76:	685b      	ldr	r3, [r3, #4]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d7e:	3308      	adds	r3, #8
 8016d80:	2214      	movs	r2, #20
 8016d82:	4619      	mov	r1, r3
 8016d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d86:	f000 fdf0 	bl	801796a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8016d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8c:	8b9b      	ldrh	r3, [r3, #28]
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f5 fe72 	bl	800ca78 <lwip_htons>
 8016d94:	4603      	mov	r3, r0
 8016d96:	461a      	mov	r2, r3
 8016d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9e:	2200      	movs	r2, #0
 8016da0:	719a      	strb	r2, [r3, #6]
 8016da2:	2200      	movs	r2, #0
 8016da4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da8:	2200      	movs	r2, #0
 8016daa:	729a      	strb	r2, [r3, #10]
 8016dac:	2200      	movs	r2, #0
 8016dae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016db6:	e00e      	b.n	8016dd6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8016db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dba:	685b      	ldr	r3, [r3, #4]
 8016dbc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8016dbe:	f06f 0113 	mvn.w	r1, #19
 8016dc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016dc4:	f7f6 ff42 	bl	800dc4c <pbuf_header>
      pbuf_cat(p, r);
 8016dc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f7f7 f82e 	bl	800de2c <pbuf_cat>
      r = iprh->next_pbuf;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d1ed      	bne.n	8016db8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016ddc:	4b1d      	ldr	r3, [pc, #116]	; (8016e54 <ip4_reass+0x2a0>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d102      	bne.n	8016dec <ip4_reass+0x238>
      ipr_prev = NULL;
 8016de6:	2300      	movs	r3, #0
 8016de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016dea:	e010      	b.n	8016e0e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016dec:	4b19      	ldr	r3, [pc, #100]	; (8016e54 <ip4_reass+0x2a0>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016df2:	e007      	b.n	8016e04 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8016df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d006      	beq.n	8016e0c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1f4      	bne.n	8016df4 <ip4_reass+0x240>
 8016e0a:	e000      	b.n	8016e0e <ip4_reass+0x25a>
          break;
 8016e0c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e12:	f7ff fd37 	bl	8016884 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f7f6 ffd0 	bl	800ddbc <pbuf_clen>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	461a      	mov	r2, r3
 8016e20:	4b0b      	ldr	r3, [pc, #44]	; (8016e50 <ip4_reass+0x29c>)
 8016e22:	881b      	ldrh	r3, [r3, #0]
 8016e24:	1a9b      	subs	r3, r3, r2
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	4b09      	ldr	r3, [pc, #36]	; (8016e50 <ip4_reass+0x29c>)
 8016e2a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	e00a      	b.n	8016e46 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016e30:	2300      	movs	r3, #0
 8016e32:	e008      	b.n	8016e46 <ip4_reass+0x292>
    goto nullreturn;
 8016e34:	bf00      	nop
 8016e36:	e002      	b.n	8016e3e <ip4_reass+0x28a>

nullreturn:
 8016e38:	bf00      	nop
 8016e3a:	e000      	b.n	8016e3e <ip4_reass+0x28a>
    goto nullreturn;
 8016e3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	f7f6 ff28 	bl	800dc94 <pbuf_free>
  return NULL;
 8016e44:	2300      	movs	r3, #0
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3738      	adds	r7, #56	; 0x38
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	20000280 	.word	0x20000280
 8016e54:	2000027c 	.word	0x2000027c

08016e58 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8016e5c:	2005      	movs	r0, #5
 8016e5e:	f7f6 f9b3 	bl	800d1c8 <memp_malloc>
 8016e62:	4603      	mov	r3, r0
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d106      	bne.n	8016e84 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016e76:	4b07      	ldr	r3, [pc, #28]	; (8016e94 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016e78:	f240 22ae 	movw	r2, #686	; 0x2ae
 8016e7c:	4906      	ldr	r1, [pc, #24]	; (8016e98 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016e7e:	4807      	ldr	r0, [pc, #28]	; (8016e9c <ip_frag_free_pbuf_custom_ref+0x34>)
 8016e80:	f000 fe2c 	bl	8017adc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016e84:	6879      	ldr	r1, [r7, #4]
 8016e86:	2005      	movs	r0, #5
 8016e88:	f7f6 f9ea 	bl	800d260 <memp_free>
}
 8016e8c:	bf00      	nop
 8016e8e:	3708      	adds	r7, #8
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	0801a8f8 	.word	0x0801a8f8
 8016e98:	0801aa60 	.word	0x0801aa60
 8016e9c:	0801a940 	.word	0x0801a940

08016ea0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d106      	bne.n	8016ec0 <ipfrag_free_pbuf_custom+0x20>
 8016eb2:	4b11      	ldr	r3, [pc, #68]	; (8016ef8 <ipfrag_free_pbuf_custom+0x58>)
 8016eb4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8016eb8:	4910      	ldr	r1, [pc, #64]	; (8016efc <ipfrag_free_pbuf_custom+0x5c>)
 8016eba:	4811      	ldr	r0, [pc, #68]	; (8016f00 <ipfrag_free_pbuf_custom+0x60>)
 8016ebc:	f000 fe0e 	bl	8017adc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8016ec0:	68fa      	ldr	r2, [r7, #12]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d006      	beq.n	8016ed6 <ipfrag_free_pbuf_custom+0x36>
 8016ec8:	4b0b      	ldr	r3, [pc, #44]	; (8016ef8 <ipfrag_free_pbuf_custom+0x58>)
 8016eca:	f240 22b9 	movw	r2, #697	; 0x2b9
 8016ece:	490d      	ldr	r1, [pc, #52]	; (8016f04 <ipfrag_free_pbuf_custom+0x64>)
 8016ed0:	480b      	ldr	r0, [pc, #44]	; (8016f00 <ipfrag_free_pbuf_custom+0x60>)
 8016ed2:	f000 fe03 	bl	8017adc <iprintf>
  if (pcr->original != NULL) {
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	695b      	ldr	r3, [r3, #20]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d004      	beq.n	8016ee8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	695b      	ldr	r3, [r3, #20]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7f6 fed6 	bl	800dc94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7ff ffbd 	bl	8016e68 <ip_frag_free_pbuf_custom_ref>
}
 8016eee:	bf00      	nop
 8016ef0:	3710      	adds	r7, #16
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	0801a8f8 	.word	0x0801a8f8
 8016efc:	0801aa6c 	.word	0x0801aa6c
 8016f00:	0801a940 	.word	0x0801a940
 8016f04:	0801aa78 	.word	0x0801aa78

08016f08 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b092      	sub	sp, #72	; 0x48
 8016f0c:	af02      	add	r7, sp, #8
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	60b9      	str	r1, [r7, #8]
 8016f12:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016f14:	2300      	movs	r3, #0
 8016f16:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f1c:	3b14      	subs	r3, #20
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	da00      	bge.n	8016f24 <ip4_frag+0x1c>
 8016f22:	3307      	adds	r3, #7
 8016f24:	10db      	asrs	r3, r3, #3
 8016f26:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016f28:	2314      	movs	r3, #20
 8016f2a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f34:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8016f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	f003 030f 	and.w	r3, r3, #15
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	2b14      	cmp	r3, #20
 8016f42:	d009      	beq.n	8016f58 <ip4_frag+0x50>
 8016f44:	4b79      	ldr	r3, [pc, #484]	; (801712c <ip4_frag+0x224>)
 8016f46:	f240 22e1 	movw	r2, #737	; 0x2e1
 8016f4a:	4979      	ldr	r1, [pc, #484]	; (8017130 <ip4_frag+0x228>)
 8016f4c:	4879      	ldr	r0, [pc, #484]	; (8017134 <ip4_frag+0x22c>)
 8016f4e:	f000 fdc5 	bl	8017adc <iprintf>
 8016f52:	f06f 0305 	mvn.w	r3, #5
 8016f56:	e0e5      	b.n	8017124 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5a:	88db      	ldrh	r3, [r3, #6]
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7f5 fd8a 	bl	800ca78 <lwip_htons>
 8016f64:	4603      	mov	r3, r0
 8016f66:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8016f68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f6e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016f70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d009      	beq.n	8016f8e <ip4_frag+0x86>
 8016f7a:	4b6c      	ldr	r3, [pc, #432]	; (801712c <ip4_frag+0x224>)
 8016f7c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016f80:	496d      	ldr	r1, [pc, #436]	; (8017138 <ip4_frag+0x230>)
 8016f82:	486c      	ldr	r0, [pc, #432]	; (8017134 <ip4_frag+0x22c>)
 8016f84:	f000 fdaa 	bl	8017adc <iprintf>
 8016f88:	f06f 0305 	mvn.w	r3, #5
 8016f8c:	e0ca      	b.n	8017124 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	891b      	ldrh	r3, [r3, #8]
 8016f92:	3b14      	subs	r3, #20
 8016f94:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8016f96:	e0bc      	b.n	8017112 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8016f98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016f9a:	00da      	lsls	r2, r3, #3
 8016f9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f9e:	4293      	cmp	r3, r2
 8016fa0:	bfa8      	it	ge
 8016fa2:	4613      	movge	r3, r2
 8016fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	2114      	movs	r1, #20
 8016faa:	2002      	movs	r0, #2
 8016fac:	f7f6 fb00 	bl	800d5b0 <pbuf_alloc>
 8016fb0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8016fb2:	6a3b      	ldr	r3, [r7, #32]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	f000 80b2 	beq.w	801711e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	895b      	ldrh	r3, [r3, #10]
 8016fbe:	2b13      	cmp	r3, #19
 8016fc0:	d806      	bhi.n	8016fd0 <ip4_frag+0xc8>
 8016fc2:	4b5a      	ldr	r3, [pc, #360]	; (801712c <ip4_frag+0x224>)
 8016fc4:	f240 3209 	movw	r2, #777	; 0x309
 8016fc8:	495c      	ldr	r1, [pc, #368]	; (801713c <ip4_frag+0x234>)
 8016fca:	485a      	ldr	r0, [pc, #360]	; (8017134 <ip4_frag+0x22c>)
 8016fcc:	f000 fd86 	bl	8017adc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016fd0:	6a3b      	ldr	r3, [r7, #32]
 8016fd2:	685b      	ldr	r3, [r3, #4]
 8016fd4:	2214      	movs	r2, #20
 8016fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f000 fcc6 	bl	801796a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016fde:	6a3b      	ldr	r3, [r7, #32]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8016fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016fe6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8016fe8:	e04f      	b.n	801708a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	895a      	ldrh	r2, [r3, #10]
 8016fee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016ff0:	1ad3      	subs	r3, r2, r3
 8016ff2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016ff4:	8b7a      	ldrh	r2, [r7, #26]
 8016ff6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	bf28      	it	cs
 8016ffc:	4613      	movcs	r3, r2
 8016ffe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017002:	2b00      	cmp	r3, #0
 8017004:	d105      	bne.n	8017012 <ip4_frag+0x10a>
        poff = 0;
 8017006:	2300      	movs	r3, #0
 8017008:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	60fb      	str	r3, [r7, #12]
        continue;
 8017010:	e03b      	b.n	801708a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017012:	f7ff ff21 	bl	8016e58 <ip_frag_alloc_pbuf_custom_ref>
 8017016:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d103      	bne.n	8017026 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801701e:	6a38      	ldr	r0, [r7, #32]
 8017020:	f7f6 fe38 	bl	800dc94 <pbuf_free>
        goto memerr;
 8017024:	e07c      	b.n	8017120 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017026:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801702c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801702e:	4413      	add	r3, r2
 8017030:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8017032:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017034:	9201      	str	r2, [sp, #4]
 8017036:	9300      	str	r3, [sp, #0]
 8017038:	4603      	mov	r3, r0
 801703a:	2202      	movs	r2, #2
 801703c:	2004      	movs	r0, #4
 801703e:	f7f6 fc4b 	bl	800d8d8 <pbuf_alloced_custom>
 8017042:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d106      	bne.n	8017058 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801704a:	6978      	ldr	r0, [r7, #20]
 801704c:	f7ff ff0c 	bl	8016e68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017050:	6a38      	ldr	r0, [r7, #32]
 8017052:	f7f6 fe1f 	bl	800dc94 <pbuf_free>
        goto memerr;
 8017056:	e063      	b.n	8017120 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f7f6 fec5 	bl	800dde8 <pbuf_ref>
      pcr->original = p;
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	4a36      	ldr	r2, [pc, #216]	; (8017140 <ip4_frag+0x238>)
 8017068:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801706a:	6939      	ldr	r1, [r7, #16]
 801706c:	6a38      	ldr	r0, [r7, #32]
 801706e:	f7f6 fedd 	bl	800de2c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8017072:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017076:	1ad3      	subs	r3, r2, r3
 8017078:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801707a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801707c:	2b00      	cmp	r3, #0
 801707e:	d004      	beq.n	801708a <ip4_frag+0x182>
        poff = 0;
 8017080:	2300      	movs	r3, #0
 8017082:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801708a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801708c:	2b00      	cmp	r3, #0
 801708e:	d1ac      	bne.n	8016fea <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8017090:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017092:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017094:	4413      	add	r3, r2
 8017096:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017098:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801709e:	3b14      	subs	r3, #20
 80170a0:	429a      	cmp	r2, r3
 80170a2:	bfd4      	ite	le
 80170a4:	2301      	movle	r3, #1
 80170a6:	2300      	movgt	r3, #0
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80170ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80170ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d103      	bne.n	80170c2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80170ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80170c0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80170c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7f5 fcd7 	bl	800ca78 <lwip_htons>
 80170ca:	4603      	mov	r3, r0
 80170cc:	461a      	mov	r2, r3
 80170ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80170d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170d4:	3314      	adds	r3, #20
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4618      	mov	r0, r3
 80170da:	f7f5 fccd 	bl	800ca78 <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	461a      	mov	r2, r3
 80170e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80170e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e8:	2200      	movs	r2, #0
 80170ea:	729a      	strb	r2, [r3, #10]
 80170ec:	2200      	movs	r2, #0
 80170ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	695b      	ldr	r3, [r3, #20]
 80170f4:	687a      	ldr	r2, [r7, #4]
 80170f6:	6a39      	ldr	r1, [r7, #32]
 80170f8:	68b8      	ldr	r0, [r7, #8]
 80170fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80170fc:	6a38      	ldr	r0, [r7, #32]
 80170fe:	f7f6 fdc9 	bl	800dc94 <pbuf_free>
    left -= fragsize;
 8017102:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017106:	1ad3      	subs	r3, r2, r3
 8017108:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801710a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801710c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801710e:	4413      	add	r3, r2
 8017110:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8017112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017114:	2b00      	cmp	r3, #0
 8017116:	f47f af3f 	bne.w	8016f98 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801711a:	2300      	movs	r3, #0
 801711c:	e002      	b.n	8017124 <ip4_frag+0x21c>
      goto memerr;
 801711e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017124:	4618      	mov	r0, r3
 8017126:	3740      	adds	r7, #64	; 0x40
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	0801a8f8 	.word	0x0801a8f8
 8017130:	0801aa84 	.word	0x0801aa84
 8017134:	0801a940 	.word	0x0801a940
 8017138:	0801aaac 	.word	0x0801aaac
 801713c:	0801aac8 	.word	0x0801aac8
 8017140:	08016ea1 	.word	0x08016ea1

08017144 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b086      	sub	sp, #24
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801714e:	230e      	movs	r3, #14
 8017150:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	895b      	ldrh	r3, [r3, #10]
 8017156:	2b0e      	cmp	r3, #14
 8017158:	d977      	bls.n	801724a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	7b1a      	ldrb	r2, [r3, #12]
 8017164:	7b5b      	ldrb	r3, [r3, #13]
 8017166:	021b      	lsls	r3, r3, #8
 8017168:	4313      	orrs	r3, r2
 801716a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	f003 0301 	and.w	r3, r3, #1
 8017174:	2b00      	cmp	r3, #0
 8017176:	d023      	beq.n	80171c0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	2b01      	cmp	r3, #1
 801717e:	d10f      	bne.n	80171a0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	785b      	ldrb	r3, [r3, #1]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d11b      	bne.n	80171c0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801718c:	2b5e      	cmp	r3, #94	; 0x5e
 801718e:	d117      	bne.n	80171c0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	7b5b      	ldrb	r3, [r3, #13]
 8017194:	f043 0310 	orr.w	r3, r3, #16
 8017198:	b2da      	uxtb	r2, r3
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	735a      	strb	r2, [r3, #13]
 801719e:	e00f      	b.n	80171c0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80171a0:	693b      	ldr	r3, [r7, #16]
 80171a2:	2206      	movs	r2, #6
 80171a4:	4930      	ldr	r1, [pc, #192]	; (8017268 <ethernet_input+0x124>)
 80171a6:	4618      	mov	r0, r3
 80171a8:	f000 fbd0 	bl	801794c <memcmp>
 80171ac:	4603      	mov	r3, r0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d106      	bne.n	80171c0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	7b5b      	ldrb	r3, [r3, #13]
 80171b6:	f043 0308 	orr.w	r3, r3, #8
 80171ba:	b2da      	uxtb	r2, r3
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80171c0:	89fb      	ldrh	r3, [r7, #14]
 80171c2:	2b08      	cmp	r3, #8
 80171c4:	d003      	beq.n	80171ce <ethernet_input+0x8a>
 80171c6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80171ca:	d01e      	beq.n	801720a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80171cc:	e044      	b.n	8017258 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80171d4:	f003 0308 	and.w	r3, r3, #8
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d038      	beq.n	801724e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	895b      	ldrh	r3, [r3, #10]
 80171e0:	461a      	mov	r2, r3
 80171e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	db33      	blt.n	8017252 <ethernet_input+0x10e>
 80171ea:	8afb      	ldrh	r3, [r7, #22]
 80171ec:	425b      	negs	r3, r3
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	b21b      	sxth	r3, r3
 80171f2:	4619      	mov	r1, r3
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7f6 fd29 	bl	800dc4c <pbuf_header>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d128      	bne.n	8017252 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017200:	6839      	ldr	r1, [r7, #0]
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f7fe ff64 	bl	80160d0 <ip4_input>
      break;
 8017208:	e01d      	b.n	8017246 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017210:	f003 0308 	and.w	r3, r3, #8
 8017214:	2b00      	cmp	r3, #0
 8017216:	d01e      	beq.n	8017256 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	895b      	ldrh	r3, [r3, #10]
 801721c:	461a      	mov	r2, r3
 801721e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017222:	429a      	cmp	r2, r3
 8017224:	db15      	blt.n	8017252 <ethernet_input+0x10e>
 8017226:	8afb      	ldrh	r3, [r7, #22]
 8017228:	425b      	negs	r3, r3
 801722a:	b29b      	uxth	r3, r3
 801722c:	b21b      	sxth	r3, r3
 801722e:	4619      	mov	r1, r3
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f7f6 fd0b 	bl	800dc4c <pbuf_header>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d10a      	bne.n	8017252 <ethernet_input+0x10e>
        etharp_input(p, netif);
 801723c:	6839      	ldr	r1, [r7, #0]
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7fe f92e 	bl	80154a0 <etharp_input>
      break;
 8017244:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017246:	2300      	movs	r3, #0
 8017248:	e00a      	b.n	8017260 <ethernet_input+0x11c>
    goto free_and_return;
 801724a:	bf00      	nop
 801724c:	e004      	b.n	8017258 <ethernet_input+0x114>
        goto free_and_return;
 801724e:	bf00      	nop
 8017250:	e002      	b.n	8017258 <ethernet_input+0x114>

free_and_return:
 8017252:	bf00      	nop
 8017254:	e000      	b.n	8017258 <ethernet_input+0x114>
        goto free_and_return;
 8017256:	bf00      	nop
  pbuf_free(p);
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7f6 fd1b 	bl	800dc94 <pbuf_free>
  return ERR_OK;
 801725e:	2300      	movs	r3, #0
}
 8017260:	4618      	mov	r0, r3
 8017262:	3718      	adds	r7, #24
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	0801ad10 	.word	0x0801ad10

0801726c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b086      	sub	sp, #24
 8017270:	af00      	add	r7, sp, #0
 8017272:	60f8      	str	r0, [r7, #12]
 8017274:	60b9      	str	r1, [r7, #8]
 8017276:	607a      	str	r2, [r7, #4]
 8017278:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801727a:	8c3b      	ldrh	r3, [r7, #32]
 801727c:	4618      	mov	r0, r3
 801727e:	f7f5 fbfb 	bl	800ca78 <lwip_htons>
 8017282:	4603      	mov	r3, r0
 8017284:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8017286:	210e      	movs	r1, #14
 8017288:	68b8      	ldr	r0, [r7, #8]
 801728a:	f7f6 fcdf 	bl	800dc4c <pbuf_header>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d125      	bne.n	80172e0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	8afa      	ldrh	r2, [r7, #22]
 801729e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80172a0:	693b      	ldr	r3, [r7, #16]
 80172a2:	2206      	movs	r2, #6
 80172a4:	6839      	ldr	r1, [r7, #0]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f000 fb5f 	bl	801796a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	3306      	adds	r3, #6
 80172b0:	2206      	movs	r2, #6
 80172b2:	6879      	ldr	r1, [r7, #4]
 80172b4:	4618      	mov	r0, r3
 80172b6:	f000 fb58 	bl	801796a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172c0:	2b06      	cmp	r3, #6
 80172c2:	d006      	beq.n	80172d2 <ethernet_output+0x66>
 80172c4:	4b0a      	ldr	r3, [pc, #40]	; (80172f0 <ethernet_output+0x84>)
 80172c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80172ca:	490a      	ldr	r1, [pc, #40]	; (80172f4 <ethernet_output+0x88>)
 80172cc:	480a      	ldr	r0, [pc, #40]	; (80172f8 <ethernet_output+0x8c>)
 80172ce:	f000 fc05 	bl	8017adc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	699b      	ldr	r3, [r3, #24]
 80172d6:	68b9      	ldr	r1, [r7, #8]
 80172d8:	68f8      	ldr	r0, [r7, #12]
 80172da:	4798      	blx	r3
 80172dc:	4603      	mov	r3, r0
 80172de:	e002      	b.n	80172e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80172e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80172e2:	f06f 0301 	mvn.w	r3, #1
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3718      	adds	r7, #24
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	bf00      	nop
 80172f0:	0801aae8 	.word	0x0801aae8
 80172f4:	0801ab20 	.word	0x0801ab20
 80172f8:	0801ab54 	.word	0x0801ab54

080172fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017300:	2201      	movs	r2, #1
 8017302:	490e      	ldr	r1, [pc, #56]	; (801733c <MX_USB_HOST_Init+0x40>)
 8017304:	480e      	ldr	r0, [pc, #56]	; (8017340 <MX_USB_HOST_Init+0x44>)
 8017306:	f7f1 f9bd 	bl	8008684 <USBH_Init>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d001      	beq.n	8017314 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017310:	f7e9 fc28 	bl	8000b64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8017314:	490b      	ldr	r1, [pc, #44]	; (8017344 <MX_USB_HOST_Init+0x48>)
 8017316:	480a      	ldr	r0, [pc, #40]	; (8017340 <MX_USB_HOST_Init+0x44>)
 8017318:	f7f1 fa38 	bl	800878c <USBH_RegisterClass>
 801731c:	4603      	mov	r3, r0
 801731e:	2b00      	cmp	r3, #0
 8017320:	d001      	beq.n	8017326 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017322:	f7e9 fc1f 	bl	8000b64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017326:	4806      	ldr	r0, [pc, #24]	; (8017340 <MX_USB_HOST_Init+0x44>)
 8017328:	f7f1 faba 	bl	80088a0 <USBH_Start>
 801732c:	4603      	mov	r3, r0
 801732e:	2b00      	cmp	r3, #0
 8017330:	d001      	beq.n	8017336 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017332:	f7e9 fc17 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017336:	bf00      	nop
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	0801735d 	.word	0x0801735d
 8017340:	20008bb4 	.word	0x20008bb4
 8017344:	20000020 	.word	0x20000020

08017348 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801734c:	4802      	ldr	r0, [pc, #8]	; (8017358 <MX_USB_HOST_Process+0x10>)
 801734e:	f7f1 fab7 	bl	80088c0 <USBH_Process>
}
 8017352:	bf00      	nop
 8017354:	bd80      	pop	{r7, pc}
 8017356:	bf00      	nop
 8017358:	20008bb4 	.word	0x20008bb4

0801735c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801735c:	b480      	push	{r7}
 801735e:	b083      	sub	sp, #12
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
 8017364:	460b      	mov	r3, r1
 8017366:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8017368:	78fb      	ldrb	r3, [r7, #3]
 801736a:	3b01      	subs	r3, #1
 801736c:	2b04      	cmp	r3, #4
 801736e:	d819      	bhi.n	80173a4 <USBH_UserProcess+0x48>
 8017370:	a201      	add	r2, pc, #4	; (adr r2, 8017378 <USBH_UserProcess+0x1c>)
 8017372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017376:	bf00      	nop
 8017378:	080173a5 	.word	0x080173a5
 801737c:	08017395 	.word	0x08017395
 8017380:	080173a5 	.word	0x080173a5
 8017384:	0801739d 	.word	0x0801739d
 8017388:	0801738d 	.word	0x0801738d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801738c:	4b08      	ldr	r3, [pc, #32]	; (80173b0 <USBH_UserProcess+0x54>)
 801738e:	2203      	movs	r2, #3
 8017390:	701a      	strb	r2, [r3, #0]
  break;
 8017392:	e008      	b.n	80173a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8017394:	4b06      	ldr	r3, [pc, #24]	; (80173b0 <USBH_UserProcess+0x54>)
 8017396:	2202      	movs	r2, #2
 8017398:	701a      	strb	r2, [r3, #0]
  break;
 801739a:	e004      	b.n	80173a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801739c:	4b04      	ldr	r3, [pc, #16]	; (80173b0 <USBH_UserProcess+0x54>)
 801739e:	2201      	movs	r2, #1
 80173a0:	701a      	strb	r2, [r3, #0]
  break;
 80173a2:	e000      	b.n	80173a6 <USBH_UserProcess+0x4a>

  default:
  break;
 80173a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80173a6:	bf00      	nop
 80173a8:	370c      	adds	r7, #12
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bc80      	pop	{r7}
 80173ae:	4770      	bx	lr
 80173b0:	20000282 	.word	0x20000282

080173b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80173c4:	d113      	bne.n	80173ee <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80173c6:	4b0c      	ldr	r3, [pc, #48]	; (80173f8 <HAL_HCD_MspInit+0x44>)
 80173c8:	695b      	ldr	r3, [r3, #20]
 80173ca:	4a0b      	ldr	r2, [pc, #44]	; (80173f8 <HAL_HCD_MspInit+0x44>)
 80173cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80173d0:	6153      	str	r3, [r2, #20]
 80173d2:	4b09      	ldr	r3, [pc, #36]	; (80173f8 <HAL_HCD_MspInit+0x44>)
 80173d4:	695b      	ldr	r3, [r3, #20]
 80173d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80173de:	2200      	movs	r2, #0
 80173e0:	2100      	movs	r1, #0
 80173e2:	2043      	movs	r0, #67	; 0x43
 80173e4:	f7e9 ff65 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80173e8:	2043      	movs	r0, #67	; 0x43
 80173ea:	f7e9 ff7e 	bl	80012ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80173ee:	bf00      	nop
 80173f0:	3710      	adds	r7, #16
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}
 80173f6:	bf00      	nop
 80173f8:	40021000 	.word	0x40021000

080173fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b082      	sub	sp, #8
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801740a:	4618      	mov	r0, r3
 801740c:	f7f1 fd26 	bl	8008e5c <USBH_LL_IncTimer>
}
 8017410:	bf00      	nop
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}

08017418 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b082      	sub	sp, #8
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017426:	4618      	mov	r0, r3
 8017428:	f7f1 fd5c 	bl	8008ee4 <USBH_LL_Connect>
}
 801742c:	bf00      	nop
 801742e:	3708      	adds	r7, #8
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017442:	4618      	mov	r0, r3
 8017444:	f7f1 fd64 	bl	8008f10 <USBH_LL_Disconnect>
}
 8017448:	bf00      	nop
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	460b      	mov	r3, r1
 801745a:	70fb      	strb	r3, [r7, #3]
 801745c:	4613      	mov	r3, r2
 801745e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8017460:	bf00      	nop
 8017462:	370c      	adds	r7, #12
 8017464:	46bd      	mov	sp, r7
 8017466:	bc80      	pop	{r7}
 8017468:	4770      	bx	lr

0801746a <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b082      	sub	sp, #8
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017478:	4618      	mov	r0, r3
 801747a:	f7f1 fd19 	bl	8008eb0 <USBH_LL_PortEnabled>
}
 801747e:	bf00      	nop
 8017480:	3708      	adds	r7, #8
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}

08017486 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017486:	b580      	push	{r7, lr}
 8017488:	b082      	sub	sp, #8
 801748a:	af00      	add	r7, sp, #0
 801748c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017494:	4618      	mov	r0, r3
 8017496:	f7f1 fd18 	bl	8008eca <USBH_LL_PortDisabled>
}
 801749a:	bf00      	nop
 801749c:	3708      	adds	r7, #8
 801749e:	46bd      	mov	sp, r7
 80174a0:	bd80      	pop	{r7, pc}
	...

080174a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d124      	bne.n	8017500 <USBH_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80174b6:	4a15      	ldr	r2, [pc, #84]	; (801750c <USBH_LL_Init+0x68>)
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	4a12      	ldr	r2, [pc, #72]	; (801750c <USBH_LL_Init+0x68>)
 80174c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80174c6:	4b11      	ldr	r3, [pc, #68]	; (801750c <USBH_LL_Init+0x68>)
 80174c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80174cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80174ce:	4b0f      	ldr	r3, [pc, #60]	; (801750c <USBH_LL_Init+0x68>)
 80174d0:	2208      	movs	r2, #8
 80174d2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80174d4:	4b0d      	ldr	r3, [pc, #52]	; (801750c <USBH_LL_Init+0x68>)
 80174d6:	2201      	movs	r2, #1
 80174d8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80174da:	4b0c      	ldr	r3, [pc, #48]	; (801750c <USBH_LL_Init+0x68>)
 80174dc:	2200      	movs	r2, #0
 80174de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80174e0:	480a      	ldr	r0, [pc, #40]	; (801750c <USBH_LL_Init+0x68>)
 80174e2:	f7eb f90c 	bl	80026fe <HAL_HCD_Init>
 80174e6:	4603      	mov	r3, r0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d001      	beq.n	80174f0 <USBH_LL_Init+0x4c>
  {
    Error_Handler( );
 80174ec:	f7e9 fb3a 	bl	8000b64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80174f0:	4806      	ldr	r0, [pc, #24]	; (801750c <USBH_LL_Init+0x68>)
 80174f2:	f7eb fd09 	bl	8002f08 <HAL_HCD_GetCurrentFrame>
 80174f6:	4603      	mov	r3, r0
 80174f8:	4619      	mov	r1, r3
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f7f1 fca0 	bl	8008e40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8017500:	2300      	movs	r3, #0
}
 8017502:	4618      	mov	r0, r3
 8017504:	3708      	adds	r7, #8
 8017506:	46bd      	mov	sp, r7
 8017508:	bd80      	pop	{r7, pc}
 801750a:	bf00      	nop
 801750c:	20008f84 	.word	0x20008f84

08017510 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b084      	sub	sp, #16
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017518:	2300      	movs	r3, #0
 801751a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801751c:	2300      	movs	r3, #0
 801751e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8017526:	4618      	mov	r0, r3
 8017528:	f7eb fc78 	bl	8002e1c <HAL_HCD_Start>
 801752c:	4603      	mov	r3, r0
 801752e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017530:	7bfb      	ldrb	r3, [r7, #15]
 8017532:	4618      	mov	r0, r3
 8017534:	f000 f98e 	bl	8017854 <USBH_Get_USB_Status>
 8017538:	4603      	mov	r3, r0
 801753a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801753c:	7bbb      	ldrb	r3, [r7, #14]
}
 801753e:	4618      	mov	r0, r3
 8017540:	3710      	adds	r7, #16
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}

08017546 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017546:	b580      	push	{r7, lr}
 8017548:	b084      	sub	sp, #16
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801754e:	2300      	movs	r3, #0
 8017550:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017552:	2300      	movs	r3, #0
 8017554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801755c:	4618      	mov	r0, r3
 801755e:	f7eb fc80 	bl	8002e62 <HAL_HCD_Stop>
 8017562:	4603      	mov	r3, r0
 8017564:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017566:	7bfb      	ldrb	r3, [r7, #15]
 8017568:	4618      	mov	r0, r3
 801756a:	f000 f973 	bl	8017854 <USBH_Get_USB_Status>
 801756e:	4603      	mov	r3, r0
 8017570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017572:	7bbb      	ldrb	r3, [r7, #14]
}
 8017574:	4618      	mov	r0, r3
 8017576:	3710      	adds	r7, #16
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b084      	sub	sp, #16
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8017584:	2301      	movs	r3, #1
 8017586:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801758e:	4618      	mov	r0, r3
 8017590:	f7eb fcc8 	bl	8002f24 <HAL_HCD_GetCurrentSpeed>
 8017594:	4603      	mov	r3, r0
 8017596:	2b01      	cmp	r3, #1
 8017598:	d007      	beq.n	80175aa <USBH_LL_GetSpeed+0x2e>
 801759a:	2b01      	cmp	r3, #1
 801759c:	d302      	bcc.n	80175a4 <USBH_LL_GetSpeed+0x28>
 801759e:	2b02      	cmp	r3, #2
 80175a0:	d006      	beq.n	80175b0 <USBH_LL_GetSpeed+0x34>
 80175a2:	e008      	b.n	80175b6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80175a4:	2300      	movs	r3, #0
 80175a6:	73fb      	strb	r3, [r7, #15]
    break;
 80175a8:	e008      	b.n	80175bc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80175aa:	2301      	movs	r3, #1
 80175ac:	73fb      	strb	r3, [r7, #15]
    break;
 80175ae:	e005      	b.n	80175bc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80175b0:	2302      	movs	r3, #2
 80175b2:	73fb      	strb	r3, [r7, #15]
    break;
 80175b4:	e002      	b.n	80175bc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80175b6:	2301      	movs	r3, #1
 80175b8:	73fb      	strb	r3, [r7, #15]
    break;
 80175ba:	bf00      	nop
  }
  return  speed;
 80175bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3710      	adds	r7, #16
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b084      	sub	sp, #16
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ce:	2300      	movs	r3, #0
 80175d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80175d2:	2300      	movs	r3, #0
 80175d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80175dc:	4618      	mov	r0, r3
 80175de:	f7eb fc5d 	bl	8002e9c <HAL_HCD_ResetPort>
 80175e2:	4603      	mov	r3, r0
 80175e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80175e6:	7bfb      	ldrb	r3, [r7, #15]
 80175e8:	4618      	mov	r0, r3
 80175ea:	f000 f933 	bl	8017854 <USBH_Get_USB_Status>
 80175ee:	4603      	mov	r3, r0
 80175f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3710      	adds	r7, #16
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}

080175fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	460b      	mov	r3, r1
 8017606:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801760e:	78fa      	ldrb	r2, [r7, #3]
 8017610:	4611      	mov	r1, r2
 8017612:	4618      	mov	r0, r3
 8017614:	f7eb fc64 	bl	8002ee0 <HAL_HCD_HC_GetXferCount>
 8017618:	4603      	mov	r3, r0
}
 801761a:	4618      	mov	r0, r3
 801761c:	3708      	adds	r7, #8
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}

08017622 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8017622:	b590      	push	{r4, r7, lr}
 8017624:	b089      	sub	sp, #36	; 0x24
 8017626:	af04      	add	r7, sp, #16
 8017628:	6078      	str	r0, [r7, #4]
 801762a:	4608      	mov	r0, r1
 801762c:	4611      	mov	r1, r2
 801762e:	461a      	mov	r2, r3
 8017630:	4603      	mov	r3, r0
 8017632:	70fb      	strb	r3, [r7, #3]
 8017634:	460b      	mov	r3, r1
 8017636:	70bb      	strb	r3, [r7, #2]
 8017638:	4613      	mov	r3, r2
 801763a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801763c:	2300      	movs	r3, #0
 801763e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017640:	2300      	movs	r3, #0
 8017642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 801764a:	787c      	ldrb	r4, [r7, #1]
 801764c:	78ba      	ldrb	r2, [r7, #2]
 801764e:	78f9      	ldrb	r1, [r7, #3]
 8017650:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017652:	9302      	str	r3, [sp, #8]
 8017654:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017658:	9301      	str	r3, [sp, #4]
 801765a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	4623      	mov	r3, r4
 8017662:	f7eb f8ae 	bl	80027c2 <HAL_HCD_HC_Init>
 8017666:	4603      	mov	r3, r0
 8017668:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801766a:	7bfb      	ldrb	r3, [r7, #15]
 801766c:	4618      	mov	r0, r3
 801766e:	f000 f8f1 	bl	8017854 <USBH_Get_USB_Status>
 8017672:	4603      	mov	r3, r0
 8017674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017676:	7bbb      	ldrb	r3, [r7, #14]
}
 8017678:	4618      	mov	r0, r3
 801767a:	3714      	adds	r7, #20
 801767c:	46bd      	mov	sp, r7
 801767e:	bd90      	pop	{r4, r7, pc}

08017680 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	460b      	mov	r3, r1
 801768a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801768c:	2300      	movs	r3, #0
 801768e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017690:	2300      	movs	r3, #0
 8017692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801769a:	78fa      	ldrb	r2, [r7, #3]
 801769c:	4611      	mov	r1, r2
 801769e:	4618      	mov	r0, r3
 80176a0:	f7eb f927 	bl	80028f2 <HAL_HCD_HC_Halt>
 80176a4:	4603      	mov	r3, r0
 80176a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80176a8:	7bfb      	ldrb	r3, [r7, #15]
 80176aa:	4618      	mov	r0, r3
 80176ac:	f000 f8d2 	bl	8017854 <USBH_Get_USB_Status>
 80176b0:	4603      	mov	r3, r0
 80176b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3710      	adds	r7, #16
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}

080176be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80176be:	b590      	push	{r4, r7, lr}
 80176c0:	b089      	sub	sp, #36	; 0x24
 80176c2:	af04      	add	r7, sp, #16
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	4608      	mov	r0, r1
 80176c8:	4611      	mov	r1, r2
 80176ca:	461a      	mov	r2, r3
 80176cc:	4603      	mov	r3, r0
 80176ce:	70fb      	strb	r3, [r7, #3]
 80176d0:	460b      	mov	r3, r1
 80176d2:	70bb      	strb	r3, [r7, #2]
 80176d4:	4613      	mov	r3, r2
 80176d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176d8:	2300      	movs	r3, #0
 80176da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80176dc:	2300      	movs	r3, #0
 80176de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 80176e6:	787c      	ldrb	r4, [r7, #1]
 80176e8:	78ba      	ldrb	r2, [r7, #2]
 80176ea:	78f9      	ldrb	r1, [r7, #3]
 80176ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80176f0:	9303      	str	r3, [sp, #12]
 80176f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80176f4:	9302      	str	r3, [sp, #8]
 80176f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f8:	9301      	str	r3, [sp, #4]
 80176fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	4623      	mov	r3, r4
 8017702:	f7eb f919 	bl	8002938 <HAL_HCD_HC_SubmitRequest>
 8017706:	4603      	mov	r3, r0
 8017708:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801770a:	7bfb      	ldrb	r3, [r7, #15]
 801770c:	4618      	mov	r0, r3
 801770e:	f000 f8a1 	bl	8017854 <USBH_Get_USB_Status>
 8017712:	4603      	mov	r3, r0
 8017714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017716:	7bbb      	ldrb	r3, [r7, #14]
}
 8017718:	4618      	mov	r0, r3
 801771a:	3714      	adds	r7, #20
 801771c:	46bd      	mov	sp, r7
 801771e:	bd90      	pop	{r4, r7, pc}

08017720 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	460b      	mov	r3, r1
 801772a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8017732:	78fa      	ldrb	r2, [r7, #3]
 8017734:	4611      	mov	r1, r2
 8017736:	4618      	mov	r0, r3
 8017738:	f7eb fbbe 	bl	8002eb8 <HAL_HCD_HC_GetURBState>
 801773c:	4603      	mov	r3, r0
}
 801773e:	4618      	mov	r0, r3
 8017740:	3708      	adds	r7, #8
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}

08017746 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8017746:	b580      	push	{r7, lr}
 8017748:	b082      	sub	sp, #8
 801774a:	af00      	add	r7, sp, #0
 801774c:	6078      	str	r0, [r7, #4]
 801774e:	460b      	mov	r3, r1
 8017750:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017758:	2b01      	cmp	r3, #1
 801775a:	d103      	bne.n	8017764 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801775c:	78fb      	ldrb	r3, [r7, #3]
 801775e:	4618      	mov	r0, r3
 8017760:	f000 f8a4 	bl	80178ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8017764:	20c8      	movs	r0, #200	; 0xc8
 8017766:	f7e9 fcab 	bl	80010c0 <HAL_Delay>
  return USBH_OK;
 801776a:	2300      	movs	r3, #0
}
 801776c:	4618      	mov	r0, r3
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}

08017774 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8017774:	b480      	push	{r7}
 8017776:	b085      	sub	sp, #20
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
 801777c:	460b      	mov	r3, r1
 801777e:	70fb      	strb	r3, [r7, #3]
 8017780:	4613      	mov	r3, r2
 8017782:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 801778a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801778c:	78fa      	ldrb	r2, [r7, #3]
 801778e:	68f9      	ldr	r1, [r7, #12]
 8017790:	4613      	mov	r3, r2
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	4413      	add	r3, r2
 8017796:	00db      	lsls	r3, r3, #3
 8017798:	440b      	add	r3, r1
 801779a:	333b      	adds	r3, #59	; 0x3b
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d00a      	beq.n	80177b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80177a2:	78fa      	ldrb	r2, [r7, #3]
 80177a4:	68f9      	ldr	r1, [r7, #12]
 80177a6:	4613      	mov	r3, r2
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	4413      	add	r3, r2
 80177ac:	00db      	lsls	r3, r3, #3
 80177ae:	440b      	add	r3, r1
 80177b0:	3350      	adds	r3, #80	; 0x50
 80177b2:	78ba      	ldrb	r2, [r7, #2]
 80177b4:	701a      	strb	r2, [r3, #0]
 80177b6:	e009      	b.n	80177cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80177b8:	78fa      	ldrb	r2, [r7, #3]
 80177ba:	68f9      	ldr	r1, [r7, #12]
 80177bc:	4613      	mov	r3, r2
 80177be:	009b      	lsls	r3, r3, #2
 80177c0:	4413      	add	r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	440b      	add	r3, r1
 80177c6:	3351      	adds	r3, #81	; 0x51
 80177c8:	78ba      	ldrb	r2, [r7, #2]
 80177ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80177cc:	2300      	movs	r3, #0
}
 80177ce:	4618      	mov	r0, r3
 80177d0:	3714      	adds	r7, #20
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bc80      	pop	{r7}
 80177d6:	4770      	bx	lr

080177d8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80177d8:	b480      	push	{r7}
 80177da:	b085      	sub	sp, #20
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	460b      	mov	r3, r1
 80177e2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80177e4:	2300      	movs	r3, #0
 80177e6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80177ee:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 80177f0:	78fa      	ldrb	r2, [r7, #3]
 80177f2:	68b9      	ldr	r1, [r7, #8]
 80177f4:	4613      	mov	r3, r2
 80177f6:	009b      	lsls	r3, r3, #2
 80177f8:	4413      	add	r3, r2
 80177fa:	00db      	lsls	r3, r3, #3
 80177fc:	440b      	add	r3, r1
 80177fe:	333b      	adds	r3, #59	; 0x3b
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d00a      	beq.n	801781c <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8017806:	78fa      	ldrb	r2, [r7, #3]
 8017808:	68b9      	ldr	r1, [r7, #8]
 801780a:	4613      	mov	r3, r2
 801780c:	009b      	lsls	r3, r3, #2
 801780e:	4413      	add	r3, r2
 8017810:	00db      	lsls	r3, r3, #3
 8017812:	440b      	add	r3, r1
 8017814:	3350      	adds	r3, #80	; 0x50
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	73fb      	strb	r3, [r7, #15]
 801781a:	e009      	b.n	8017830 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801781c:	78fa      	ldrb	r2, [r7, #3]
 801781e:	68b9      	ldr	r1, [r7, #8]
 8017820:	4613      	mov	r3, r2
 8017822:	009b      	lsls	r3, r3, #2
 8017824:	4413      	add	r3, r2
 8017826:	00db      	lsls	r3, r3, #3
 8017828:	440b      	add	r3, r1
 801782a:	3351      	adds	r3, #81	; 0x51
 801782c:	781b      	ldrb	r3, [r3, #0]
 801782e:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8017830:	7bfb      	ldrb	r3, [r7, #15]
}
 8017832:	4618      	mov	r0, r3
 8017834:	3714      	adds	r7, #20
 8017836:	46bd      	mov	sp, r7
 8017838:	bc80      	pop	{r7}
 801783a:	4770      	bx	lr

0801783c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8017844:	6878      	ldr	r0, [r7, #4]
 8017846:	f7e9 fc3b 	bl	80010c0 <HAL_Delay>
}
 801784a:	bf00      	nop
 801784c:	3708      	adds	r7, #8
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
	...

08017854 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017854:	b480      	push	{r7}
 8017856:	b085      	sub	sp, #20
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801785e:	2300      	movs	r3, #0
 8017860:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017862:	79fb      	ldrb	r3, [r7, #7]
 8017864:	2b03      	cmp	r3, #3
 8017866:	d817      	bhi.n	8017898 <USBH_Get_USB_Status+0x44>
 8017868:	a201      	add	r2, pc, #4	; (adr r2, 8017870 <USBH_Get_USB_Status+0x1c>)
 801786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801786e:	bf00      	nop
 8017870:	08017881 	.word	0x08017881
 8017874:	08017887 	.word	0x08017887
 8017878:	0801788d 	.word	0x0801788d
 801787c:	08017893 	.word	0x08017893
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017880:	2300      	movs	r3, #0
 8017882:	73fb      	strb	r3, [r7, #15]
    break;
 8017884:	e00b      	b.n	801789e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8017886:	2302      	movs	r3, #2
 8017888:	73fb      	strb	r3, [r7, #15]
    break;
 801788a:	e008      	b.n	801789e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801788c:	2301      	movs	r3, #1
 801788e:	73fb      	strb	r3, [r7, #15]
    break;
 8017890:	e005      	b.n	801789e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8017892:	2302      	movs	r3, #2
 8017894:	73fb      	strb	r3, [r7, #15]
    break;
 8017896:	e002      	b.n	801789e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017898:	2302      	movs	r3, #2
 801789a:	73fb      	strb	r3, [r7, #15]
    break;
 801789c:	bf00      	nop
  }
  return usb_status;
 801789e:	7bfb      	ldrb	r3, [r7, #15]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	3714      	adds	r7, #20
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bc80      	pop	{r7}
 80178a8:	4770      	bx	lr
 80178aa:	bf00      	nop

080178ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80178b6:	79fb      	ldrb	r3, [r7, #7]
 80178b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80178ba:	79fb      	ldrb	r3, [r7, #7]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d102      	bne.n	80178c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80178c0:	2301      	movs	r3, #1
 80178c2:	73fb      	strb	r3, [r7, #15]
 80178c4:	e001      	b.n	80178ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80178c6:	2300      	movs	r3, #0
 80178c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80178ca:	7bfb      	ldrb	r3, [r7, #15]
 80178cc:	461a      	mov	r2, r3
 80178ce:	2101      	movs	r1, #1
 80178d0:	4803      	ldr	r0, [pc, #12]	; (80178e0 <MX_DriverVbusFS+0x34>)
 80178d2:	f7ea fee3 	bl	800269c <HAL_GPIO_WritePin>
}
 80178d6:	bf00      	nop
 80178d8:	3710      	adds	r7, #16
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	40011000 	.word	0x40011000

080178e4 <__libc_init_array>:
 80178e4:	b570      	push	{r4, r5, r6, lr}
 80178e6:	2500      	movs	r5, #0
 80178e8:	4e0c      	ldr	r6, [pc, #48]	; (801791c <__libc_init_array+0x38>)
 80178ea:	4c0d      	ldr	r4, [pc, #52]	; (8017920 <__libc_init_array+0x3c>)
 80178ec:	1ba4      	subs	r4, r4, r6
 80178ee:	10a4      	asrs	r4, r4, #2
 80178f0:	42a5      	cmp	r5, r4
 80178f2:	d109      	bne.n	8017908 <__libc_init_array+0x24>
 80178f4:	f000 ffd2 	bl	801889c <_init>
 80178f8:	2500      	movs	r5, #0
 80178fa:	4e0a      	ldr	r6, [pc, #40]	; (8017924 <__libc_init_array+0x40>)
 80178fc:	4c0a      	ldr	r4, [pc, #40]	; (8017928 <__libc_init_array+0x44>)
 80178fe:	1ba4      	subs	r4, r4, r6
 8017900:	10a4      	asrs	r4, r4, #2
 8017902:	42a5      	cmp	r5, r4
 8017904:	d105      	bne.n	8017912 <__libc_init_array+0x2e>
 8017906:	bd70      	pop	{r4, r5, r6, pc}
 8017908:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801790c:	4798      	blx	r3
 801790e:	3501      	adds	r5, #1
 8017910:	e7ee      	b.n	80178f0 <__libc_init_array+0xc>
 8017912:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017916:	4798      	blx	r3
 8017918:	3501      	adds	r5, #1
 801791a:	e7f2      	b.n	8017902 <__libc_init_array+0x1e>
 801791c:	0801adc0 	.word	0x0801adc0
 8017920:	0801adc0 	.word	0x0801adc0
 8017924:	0801adc0 	.word	0x0801adc0
 8017928:	0801adc4 	.word	0x0801adc4

0801792c <malloc>:
 801792c:	4b02      	ldr	r3, [pc, #8]	; (8017938 <malloc+0xc>)
 801792e:	4601      	mov	r1, r0
 8017930:	6818      	ldr	r0, [r3, #0]
 8017932:	f000 b879 	b.w	8017a28 <_malloc_r>
 8017936:	bf00      	nop
 8017938:	2000004c 	.word	0x2000004c

0801793c <free>:
 801793c:	4b02      	ldr	r3, [pc, #8]	; (8017948 <free+0xc>)
 801793e:	4601      	mov	r1, r0
 8017940:	6818      	ldr	r0, [r3, #0]
 8017942:	f000 b825 	b.w	8017990 <_free_r>
 8017946:	bf00      	nop
 8017948:	2000004c 	.word	0x2000004c

0801794c <memcmp>:
 801794c:	b530      	push	{r4, r5, lr}
 801794e:	2400      	movs	r4, #0
 8017950:	42a2      	cmp	r2, r4
 8017952:	d101      	bne.n	8017958 <memcmp+0xc>
 8017954:	2000      	movs	r0, #0
 8017956:	e007      	b.n	8017968 <memcmp+0x1c>
 8017958:	5d03      	ldrb	r3, [r0, r4]
 801795a:	3401      	adds	r4, #1
 801795c:	190d      	adds	r5, r1, r4
 801795e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017962:	42ab      	cmp	r3, r5
 8017964:	d0f4      	beq.n	8017950 <memcmp+0x4>
 8017966:	1b58      	subs	r0, r3, r5
 8017968:	bd30      	pop	{r4, r5, pc}

0801796a <memcpy>:
 801796a:	b510      	push	{r4, lr}
 801796c:	1e43      	subs	r3, r0, #1
 801796e:	440a      	add	r2, r1
 8017970:	4291      	cmp	r1, r2
 8017972:	d100      	bne.n	8017976 <memcpy+0xc>
 8017974:	bd10      	pop	{r4, pc}
 8017976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801797a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801797e:	e7f7      	b.n	8017970 <memcpy+0x6>

08017980 <memset>:
 8017980:	4603      	mov	r3, r0
 8017982:	4402      	add	r2, r0
 8017984:	4293      	cmp	r3, r2
 8017986:	d100      	bne.n	801798a <memset+0xa>
 8017988:	4770      	bx	lr
 801798a:	f803 1b01 	strb.w	r1, [r3], #1
 801798e:	e7f9      	b.n	8017984 <memset+0x4>

08017990 <_free_r>:
 8017990:	b538      	push	{r3, r4, r5, lr}
 8017992:	4605      	mov	r5, r0
 8017994:	2900      	cmp	r1, #0
 8017996:	d043      	beq.n	8017a20 <_free_r+0x90>
 8017998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801799c:	1f0c      	subs	r4, r1, #4
 801799e:	2b00      	cmp	r3, #0
 80179a0:	bfb8      	it	lt
 80179a2:	18e4      	addlt	r4, r4, r3
 80179a4:	f000 fbf8 	bl	8018198 <__malloc_lock>
 80179a8:	4a1e      	ldr	r2, [pc, #120]	; (8017a24 <_free_r+0x94>)
 80179aa:	6813      	ldr	r3, [r2, #0]
 80179ac:	4610      	mov	r0, r2
 80179ae:	b933      	cbnz	r3, 80179be <_free_r+0x2e>
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	6014      	str	r4, [r2, #0]
 80179b4:	4628      	mov	r0, r5
 80179b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179ba:	f000 bbee 	b.w	801819a <__malloc_unlock>
 80179be:	42a3      	cmp	r3, r4
 80179c0:	d90b      	bls.n	80179da <_free_r+0x4a>
 80179c2:	6821      	ldr	r1, [r4, #0]
 80179c4:	1862      	adds	r2, r4, r1
 80179c6:	4293      	cmp	r3, r2
 80179c8:	bf01      	itttt	eq
 80179ca:	681a      	ldreq	r2, [r3, #0]
 80179cc:	685b      	ldreq	r3, [r3, #4]
 80179ce:	1852      	addeq	r2, r2, r1
 80179d0:	6022      	streq	r2, [r4, #0]
 80179d2:	6063      	str	r3, [r4, #4]
 80179d4:	6004      	str	r4, [r0, #0]
 80179d6:	e7ed      	b.n	80179b4 <_free_r+0x24>
 80179d8:	4613      	mov	r3, r2
 80179da:	685a      	ldr	r2, [r3, #4]
 80179dc:	b10a      	cbz	r2, 80179e2 <_free_r+0x52>
 80179de:	42a2      	cmp	r2, r4
 80179e0:	d9fa      	bls.n	80179d8 <_free_r+0x48>
 80179e2:	6819      	ldr	r1, [r3, #0]
 80179e4:	1858      	adds	r0, r3, r1
 80179e6:	42a0      	cmp	r0, r4
 80179e8:	d10b      	bne.n	8017a02 <_free_r+0x72>
 80179ea:	6820      	ldr	r0, [r4, #0]
 80179ec:	4401      	add	r1, r0
 80179ee:	1858      	adds	r0, r3, r1
 80179f0:	4282      	cmp	r2, r0
 80179f2:	6019      	str	r1, [r3, #0]
 80179f4:	d1de      	bne.n	80179b4 <_free_r+0x24>
 80179f6:	6810      	ldr	r0, [r2, #0]
 80179f8:	6852      	ldr	r2, [r2, #4]
 80179fa:	4401      	add	r1, r0
 80179fc:	6019      	str	r1, [r3, #0]
 80179fe:	605a      	str	r2, [r3, #4]
 8017a00:	e7d8      	b.n	80179b4 <_free_r+0x24>
 8017a02:	d902      	bls.n	8017a0a <_free_r+0x7a>
 8017a04:	230c      	movs	r3, #12
 8017a06:	602b      	str	r3, [r5, #0]
 8017a08:	e7d4      	b.n	80179b4 <_free_r+0x24>
 8017a0a:	6820      	ldr	r0, [r4, #0]
 8017a0c:	1821      	adds	r1, r4, r0
 8017a0e:	428a      	cmp	r2, r1
 8017a10:	bf01      	itttt	eq
 8017a12:	6811      	ldreq	r1, [r2, #0]
 8017a14:	6852      	ldreq	r2, [r2, #4]
 8017a16:	1809      	addeq	r1, r1, r0
 8017a18:	6021      	streq	r1, [r4, #0]
 8017a1a:	6062      	str	r2, [r4, #4]
 8017a1c:	605c      	str	r4, [r3, #4]
 8017a1e:	e7c9      	b.n	80179b4 <_free_r+0x24>
 8017a20:	bd38      	pop	{r3, r4, r5, pc}
 8017a22:	bf00      	nop
 8017a24:	20000284 	.word	0x20000284

08017a28 <_malloc_r>:
 8017a28:	b570      	push	{r4, r5, r6, lr}
 8017a2a:	1ccd      	adds	r5, r1, #3
 8017a2c:	f025 0503 	bic.w	r5, r5, #3
 8017a30:	3508      	adds	r5, #8
 8017a32:	2d0c      	cmp	r5, #12
 8017a34:	bf38      	it	cc
 8017a36:	250c      	movcc	r5, #12
 8017a38:	2d00      	cmp	r5, #0
 8017a3a:	4606      	mov	r6, r0
 8017a3c:	db01      	blt.n	8017a42 <_malloc_r+0x1a>
 8017a3e:	42a9      	cmp	r1, r5
 8017a40:	d903      	bls.n	8017a4a <_malloc_r+0x22>
 8017a42:	230c      	movs	r3, #12
 8017a44:	6033      	str	r3, [r6, #0]
 8017a46:	2000      	movs	r0, #0
 8017a48:	bd70      	pop	{r4, r5, r6, pc}
 8017a4a:	f000 fba5 	bl	8018198 <__malloc_lock>
 8017a4e:	4a21      	ldr	r2, [pc, #132]	; (8017ad4 <_malloc_r+0xac>)
 8017a50:	6814      	ldr	r4, [r2, #0]
 8017a52:	4621      	mov	r1, r4
 8017a54:	b991      	cbnz	r1, 8017a7c <_malloc_r+0x54>
 8017a56:	4c20      	ldr	r4, [pc, #128]	; (8017ad8 <_malloc_r+0xb0>)
 8017a58:	6823      	ldr	r3, [r4, #0]
 8017a5a:	b91b      	cbnz	r3, 8017a64 <_malloc_r+0x3c>
 8017a5c:	4630      	mov	r0, r6
 8017a5e:	f000 f8ed 	bl	8017c3c <_sbrk_r>
 8017a62:	6020      	str	r0, [r4, #0]
 8017a64:	4629      	mov	r1, r5
 8017a66:	4630      	mov	r0, r6
 8017a68:	f000 f8e8 	bl	8017c3c <_sbrk_r>
 8017a6c:	1c43      	adds	r3, r0, #1
 8017a6e:	d124      	bne.n	8017aba <_malloc_r+0x92>
 8017a70:	230c      	movs	r3, #12
 8017a72:	4630      	mov	r0, r6
 8017a74:	6033      	str	r3, [r6, #0]
 8017a76:	f000 fb90 	bl	801819a <__malloc_unlock>
 8017a7a:	e7e4      	b.n	8017a46 <_malloc_r+0x1e>
 8017a7c:	680b      	ldr	r3, [r1, #0]
 8017a7e:	1b5b      	subs	r3, r3, r5
 8017a80:	d418      	bmi.n	8017ab4 <_malloc_r+0x8c>
 8017a82:	2b0b      	cmp	r3, #11
 8017a84:	d90f      	bls.n	8017aa6 <_malloc_r+0x7e>
 8017a86:	600b      	str	r3, [r1, #0]
 8017a88:	18cc      	adds	r4, r1, r3
 8017a8a:	50cd      	str	r5, [r1, r3]
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	f000 fb84 	bl	801819a <__malloc_unlock>
 8017a92:	f104 000b 	add.w	r0, r4, #11
 8017a96:	1d23      	adds	r3, r4, #4
 8017a98:	f020 0007 	bic.w	r0, r0, #7
 8017a9c:	1ac3      	subs	r3, r0, r3
 8017a9e:	d0d3      	beq.n	8017a48 <_malloc_r+0x20>
 8017aa0:	425a      	negs	r2, r3
 8017aa2:	50e2      	str	r2, [r4, r3]
 8017aa4:	e7d0      	b.n	8017a48 <_malloc_r+0x20>
 8017aa6:	684b      	ldr	r3, [r1, #4]
 8017aa8:	428c      	cmp	r4, r1
 8017aaa:	bf16      	itet	ne
 8017aac:	6063      	strne	r3, [r4, #4]
 8017aae:	6013      	streq	r3, [r2, #0]
 8017ab0:	460c      	movne	r4, r1
 8017ab2:	e7eb      	b.n	8017a8c <_malloc_r+0x64>
 8017ab4:	460c      	mov	r4, r1
 8017ab6:	6849      	ldr	r1, [r1, #4]
 8017ab8:	e7cc      	b.n	8017a54 <_malloc_r+0x2c>
 8017aba:	1cc4      	adds	r4, r0, #3
 8017abc:	f024 0403 	bic.w	r4, r4, #3
 8017ac0:	42a0      	cmp	r0, r4
 8017ac2:	d005      	beq.n	8017ad0 <_malloc_r+0xa8>
 8017ac4:	1a21      	subs	r1, r4, r0
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f000 f8b8 	bl	8017c3c <_sbrk_r>
 8017acc:	3001      	adds	r0, #1
 8017ace:	d0cf      	beq.n	8017a70 <_malloc_r+0x48>
 8017ad0:	6025      	str	r5, [r4, #0]
 8017ad2:	e7db      	b.n	8017a8c <_malloc_r+0x64>
 8017ad4:	20000284 	.word	0x20000284
 8017ad8:	20000288 	.word	0x20000288

08017adc <iprintf>:
 8017adc:	b40f      	push	{r0, r1, r2, r3}
 8017ade:	4b0a      	ldr	r3, [pc, #40]	; (8017b08 <iprintf+0x2c>)
 8017ae0:	b513      	push	{r0, r1, r4, lr}
 8017ae2:	681c      	ldr	r4, [r3, #0]
 8017ae4:	b124      	cbz	r4, 8017af0 <iprintf+0x14>
 8017ae6:	69a3      	ldr	r3, [r4, #24]
 8017ae8:	b913      	cbnz	r3, 8017af0 <iprintf+0x14>
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 fa66 	bl	8017fbc <__sinit>
 8017af0:	ab05      	add	r3, sp, #20
 8017af2:	9a04      	ldr	r2, [sp, #16]
 8017af4:	68a1      	ldr	r1, [r4, #8]
 8017af6:	4620      	mov	r0, r4
 8017af8:	9301      	str	r3, [sp, #4]
 8017afa:	f000 fb77 	bl	80181ec <_vfiprintf_r>
 8017afe:	b002      	add	sp, #8
 8017b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b04:	b004      	add	sp, #16
 8017b06:	4770      	bx	lr
 8017b08:	2000004c 	.word	0x2000004c

08017b0c <_puts_r>:
 8017b0c:	b570      	push	{r4, r5, r6, lr}
 8017b0e:	460e      	mov	r6, r1
 8017b10:	4605      	mov	r5, r0
 8017b12:	b118      	cbz	r0, 8017b1c <_puts_r+0x10>
 8017b14:	6983      	ldr	r3, [r0, #24]
 8017b16:	b90b      	cbnz	r3, 8017b1c <_puts_r+0x10>
 8017b18:	f000 fa50 	bl	8017fbc <__sinit>
 8017b1c:	69ab      	ldr	r3, [r5, #24]
 8017b1e:	68ac      	ldr	r4, [r5, #8]
 8017b20:	b913      	cbnz	r3, 8017b28 <_puts_r+0x1c>
 8017b22:	4628      	mov	r0, r5
 8017b24:	f000 fa4a 	bl	8017fbc <__sinit>
 8017b28:	4b23      	ldr	r3, [pc, #140]	; (8017bb8 <_puts_r+0xac>)
 8017b2a:	429c      	cmp	r4, r3
 8017b2c:	d117      	bne.n	8017b5e <_puts_r+0x52>
 8017b2e:	686c      	ldr	r4, [r5, #4]
 8017b30:	89a3      	ldrh	r3, [r4, #12]
 8017b32:	071b      	lsls	r3, r3, #28
 8017b34:	d51d      	bpl.n	8017b72 <_puts_r+0x66>
 8017b36:	6923      	ldr	r3, [r4, #16]
 8017b38:	b1db      	cbz	r3, 8017b72 <_puts_r+0x66>
 8017b3a:	3e01      	subs	r6, #1
 8017b3c:	68a3      	ldr	r3, [r4, #8]
 8017b3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017b42:	3b01      	subs	r3, #1
 8017b44:	60a3      	str	r3, [r4, #8]
 8017b46:	b9e9      	cbnz	r1, 8017b84 <_puts_r+0x78>
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	da2e      	bge.n	8017baa <_puts_r+0x9e>
 8017b4c:	4622      	mov	r2, r4
 8017b4e:	210a      	movs	r1, #10
 8017b50:	4628      	mov	r0, r5
 8017b52:	f000 f883 	bl	8017c5c <__swbuf_r>
 8017b56:	3001      	adds	r0, #1
 8017b58:	d011      	beq.n	8017b7e <_puts_r+0x72>
 8017b5a:	200a      	movs	r0, #10
 8017b5c:	e011      	b.n	8017b82 <_puts_r+0x76>
 8017b5e:	4b17      	ldr	r3, [pc, #92]	; (8017bbc <_puts_r+0xb0>)
 8017b60:	429c      	cmp	r4, r3
 8017b62:	d101      	bne.n	8017b68 <_puts_r+0x5c>
 8017b64:	68ac      	ldr	r4, [r5, #8]
 8017b66:	e7e3      	b.n	8017b30 <_puts_r+0x24>
 8017b68:	4b15      	ldr	r3, [pc, #84]	; (8017bc0 <_puts_r+0xb4>)
 8017b6a:	429c      	cmp	r4, r3
 8017b6c:	bf08      	it	eq
 8017b6e:	68ec      	ldreq	r4, [r5, #12]
 8017b70:	e7de      	b.n	8017b30 <_puts_r+0x24>
 8017b72:	4621      	mov	r1, r4
 8017b74:	4628      	mov	r0, r5
 8017b76:	f000 f8c3 	bl	8017d00 <__swsetup_r>
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d0dd      	beq.n	8017b3a <_puts_r+0x2e>
 8017b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b82:	bd70      	pop	{r4, r5, r6, pc}
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	da04      	bge.n	8017b92 <_puts_r+0x86>
 8017b88:	69a2      	ldr	r2, [r4, #24]
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	dc06      	bgt.n	8017b9c <_puts_r+0x90>
 8017b8e:	290a      	cmp	r1, #10
 8017b90:	d004      	beq.n	8017b9c <_puts_r+0x90>
 8017b92:	6823      	ldr	r3, [r4, #0]
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	6022      	str	r2, [r4, #0]
 8017b98:	7019      	strb	r1, [r3, #0]
 8017b9a:	e7cf      	b.n	8017b3c <_puts_r+0x30>
 8017b9c:	4622      	mov	r2, r4
 8017b9e:	4628      	mov	r0, r5
 8017ba0:	f000 f85c 	bl	8017c5c <__swbuf_r>
 8017ba4:	3001      	adds	r0, #1
 8017ba6:	d1c9      	bne.n	8017b3c <_puts_r+0x30>
 8017ba8:	e7e9      	b.n	8017b7e <_puts_r+0x72>
 8017baa:	200a      	movs	r0, #10
 8017bac:	6823      	ldr	r3, [r4, #0]
 8017bae:	1c5a      	adds	r2, r3, #1
 8017bb0:	6022      	str	r2, [r4, #0]
 8017bb2:	7018      	strb	r0, [r3, #0]
 8017bb4:	e7e5      	b.n	8017b82 <_puts_r+0x76>
 8017bb6:	bf00      	nop
 8017bb8:	0801ad44 	.word	0x0801ad44
 8017bbc:	0801ad64 	.word	0x0801ad64
 8017bc0:	0801ad24 	.word	0x0801ad24

08017bc4 <puts>:
 8017bc4:	4b02      	ldr	r3, [pc, #8]	; (8017bd0 <puts+0xc>)
 8017bc6:	4601      	mov	r1, r0
 8017bc8:	6818      	ldr	r0, [r3, #0]
 8017bca:	f7ff bf9f 	b.w	8017b0c <_puts_r>
 8017bce:	bf00      	nop
 8017bd0:	2000004c 	.word	0x2000004c

08017bd4 <rand>:
 8017bd4:	b538      	push	{r3, r4, r5, lr}
 8017bd6:	4b13      	ldr	r3, [pc, #76]	; (8017c24 <rand+0x50>)
 8017bd8:	681c      	ldr	r4, [r3, #0]
 8017bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017bdc:	b97b      	cbnz	r3, 8017bfe <rand+0x2a>
 8017bde:	2018      	movs	r0, #24
 8017be0:	f7ff fea4 	bl	801792c <malloc>
 8017be4:	4a10      	ldr	r2, [pc, #64]	; (8017c28 <rand+0x54>)
 8017be6:	4b11      	ldr	r3, [pc, #68]	; (8017c2c <rand+0x58>)
 8017be8:	63a0      	str	r0, [r4, #56]	; 0x38
 8017bea:	e9c0 2300 	strd	r2, r3, [r0]
 8017bee:	4b10      	ldr	r3, [pc, #64]	; (8017c30 <rand+0x5c>)
 8017bf0:	2201      	movs	r2, #1
 8017bf2:	6083      	str	r3, [r0, #8]
 8017bf4:	230b      	movs	r3, #11
 8017bf6:	8183      	strh	r3, [r0, #12]
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017bfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c00:	480c      	ldr	r0, [pc, #48]	; (8017c34 <rand+0x60>)
 8017c02:	690a      	ldr	r2, [r1, #16]
 8017c04:	694b      	ldr	r3, [r1, #20]
 8017c06:	4350      	muls	r0, r2
 8017c08:	4c0b      	ldr	r4, [pc, #44]	; (8017c38 <rand+0x64>)
 8017c0a:	fb04 0003 	mla	r0, r4, r3, r0
 8017c0e:	fba2 2304 	umull	r2, r3, r2, r4
 8017c12:	4403      	add	r3, r0
 8017c14:	1c54      	adds	r4, r2, #1
 8017c16:	f143 0500 	adc.w	r5, r3, #0
 8017c1a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017c1e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	2000004c 	.word	0x2000004c
 8017c28:	abcd330e 	.word	0xabcd330e
 8017c2c:	e66d1234 	.word	0xe66d1234
 8017c30:	0005deec 	.word	0x0005deec
 8017c34:	5851f42d 	.word	0x5851f42d
 8017c38:	4c957f2d 	.word	0x4c957f2d

08017c3c <_sbrk_r>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	2300      	movs	r3, #0
 8017c40:	4c05      	ldr	r4, [pc, #20]	; (8017c58 <_sbrk_r+0x1c>)
 8017c42:	4605      	mov	r5, r0
 8017c44:	4608      	mov	r0, r1
 8017c46:	6023      	str	r3, [r4, #0]
 8017c48:	f7e9 f974 	bl	8000f34 <_sbrk>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d102      	bne.n	8017c56 <_sbrk_r+0x1a>
 8017c50:	6823      	ldr	r3, [r4, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <_sbrk_r+0x1a>
 8017c54:	602b      	str	r3, [r5, #0]
 8017c56:	bd38      	pop	{r3, r4, r5, pc}
 8017c58:	20009248 	.word	0x20009248

08017c5c <__swbuf_r>:
 8017c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c5e:	460e      	mov	r6, r1
 8017c60:	4614      	mov	r4, r2
 8017c62:	4605      	mov	r5, r0
 8017c64:	b118      	cbz	r0, 8017c6e <__swbuf_r+0x12>
 8017c66:	6983      	ldr	r3, [r0, #24]
 8017c68:	b90b      	cbnz	r3, 8017c6e <__swbuf_r+0x12>
 8017c6a:	f000 f9a7 	bl	8017fbc <__sinit>
 8017c6e:	4b21      	ldr	r3, [pc, #132]	; (8017cf4 <__swbuf_r+0x98>)
 8017c70:	429c      	cmp	r4, r3
 8017c72:	d12a      	bne.n	8017cca <__swbuf_r+0x6e>
 8017c74:	686c      	ldr	r4, [r5, #4]
 8017c76:	69a3      	ldr	r3, [r4, #24]
 8017c78:	60a3      	str	r3, [r4, #8]
 8017c7a:	89a3      	ldrh	r3, [r4, #12]
 8017c7c:	071a      	lsls	r2, r3, #28
 8017c7e:	d52e      	bpl.n	8017cde <__swbuf_r+0x82>
 8017c80:	6923      	ldr	r3, [r4, #16]
 8017c82:	b363      	cbz	r3, 8017cde <__swbuf_r+0x82>
 8017c84:	6923      	ldr	r3, [r4, #16]
 8017c86:	6820      	ldr	r0, [r4, #0]
 8017c88:	b2f6      	uxtb	r6, r6
 8017c8a:	1ac0      	subs	r0, r0, r3
 8017c8c:	6963      	ldr	r3, [r4, #20]
 8017c8e:	4637      	mov	r7, r6
 8017c90:	4283      	cmp	r3, r0
 8017c92:	dc04      	bgt.n	8017c9e <__swbuf_r+0x42>
 8017c94:	4621      	mov	r1, r4
 8017c96:	4628      	mov	r0, r5
 8017c98:	f000 f926 	bl	8017ee8 <_fflush_r>
 8017c9c:	bb28      	cbnz	r0, 8017cea <__swbuf_r+0x8e>
 8017c9e:	68a3      	ldr	r3, [r4, #8]
 8017ca0:	3001      	adds	r0, #1
 8017ca2:	3b01      	subs	r3, #1
 8017ca4:	60a3      	str	r3, [r4, #8]
 8017ca6:	6823      	ldr	r3, [r4, #0]
 8017ca8:	1c5a      	adds	r2, r3, #1
 8017caa:	6022      	str	r2, [r4, #0]
 8017cac:	701e      	strb	r6, [r3, #0]
 8017cae:	6963      	ldr	r3, [r4, #20]
 8017cb0:	4283      	cmp	r3, r0
 8017cb2:	d004      	beq.n	8017cbe <__swbuf_r+0x62>
 8017cb4:	89a3      	ldrh	r3, [r4, #12]
 8017cb6:	07db      	lsls	r3, r3, #31
 8017cb8:	d519      	bpl.n	8017cee <__swbuf_r+0x92>
 8017cba:	2e0a      	cmp	r6, #10
 8017cbc:	d117      	bne.n	8017cee <__swbuf_r+0x92>
 8017cbe:	4621      	mov	r1, r4
 8017cc0:	4628      	mov	r0, r5
 8017cc2:	f000 f911 	bl	8017ee8 <_fflush_r>
 8017cc6:	b190      	cbz	r0, 8017cee <__swbuf_r+0x92>
 8017cc8:	e00f      	b.n	8017cea <__swbuf_r+0x8e>
 8017cca:	4b0b      	ldr	r3, [pc, #44]	; (8017cf8 <__swbuf_r+0x9c>)
 8017ccc:	429c      	cmp	r4, r3
 8017cce:	d101      	bne.n	8017cd4 <__swbuf_r+0x78>
 8017cd0:	68ac      	ldr	r4, [r5, #8]
 8017cd2:	e7d0      	b.n	8017c76 <__swbuf_r+0x1a>
 8017cd4:	4b09      	ldr	r3, [pc, #36]	; (8017cfc <__swbuf_r+0xa0>)
 8017cd6:	429c      	cmp	r4, r3
 8017cd8:	bf08      	it	eq
 8017cda:	68ec      	ldreq	r4, [r5, #12]
 8017cdc:	e7cb      	b.n	8017c76 <__swbuf_r+0x1a>
 8017cde:	4621      	mov	r1, r4
 8017ce0:	4628      	mov	r0, r5
 8017ce2:	f000 f80d 	bl	8017d00 <__swsetup_r>
 8017ce6:	2800      	cmp	r0, #0
 8017ce8:	d0cc      	beq.n	8017c84 <__swbuf_r+0x28>
 8017cea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017cee:	4638      	mov	r0, r7
 8017cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	0801ad44 	.word	0x0801ad44
 8017cf8:	0801ad64 	.word	0x0801ad64
 8017cfc:	0801ad24 	.word	0x0801ad24

08017d00 <__swsetup_r>:
 8017d00:	4b32      	ldr	r3, [pc, #200]	; (8017dcc <__swsetup_r+0xcc>)
 8017d02:	b570      	push	{r4, r5, r6, lr}
 8017d04:	681d      	ldr	r5, [r3, #0]
 8017d06:	4606      	mov	r6, r0
 8017d08:	460c      	mov	r4, r1
 8017d0a:	b125      	cbz	r5, 8017d16 <__swsetup_r+0x16>
 8017d0c:	69ab      	ldr	r3, [r5, #24]
 8017d0e:	b913      	cbnz	r3, 8017d16 <__swsetup_r+0x16>
 8017d10:	4628      	mov	r0, r5
 8017d12:	f000 f953 	bl	8017fbc <__sinit>
 8017d16:	4b2e      	ldr	r3, [pc, #184]	; (8017dd0 <__swsetup_r+0xd0>)
 8017d18:	429c      	cmp	r4, r3
 8017d1a:	d10f      	bne.n	8017d3c <__swsetup_r+0x3c>
 8017d1c:	686c      	ldr	r4, [r5, #4]
 8017d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d22:	b29a      	uxth	r2, r3
 8017d24:	0715      	lsls	r5, r2, #28
 8017d26:	d42c      	bmi.n	8017d82 <__swsetup_r+0x82>
 8017d28:	06d0      	lsls	r0, r2, #27
 8017d2a:	d411      	bmi.n	8017d50 <__swsetup_r+0x50>
 8017d2c:	2209      	movs	r2, #9
 8017d2e:	6032      	str	r2, [r6, #0]
 8017d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d34:	81a3      	strh	r3, [r4, #12]
 8017d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d3a:	e03e      	b.n	8017dba <__swsetup_r+0xba>
 8017d3c:	4b25      	ldr	r3, [pc, #148]	; (8017dd4 <__swsetup_r+0xd4>)
 8017d3e:	429c      	cmp	r4, r3
 8017d40:	d101      	bne.n	8017d46 <__swsetup_r+0x46>
 8017d42:	68ac      	ldr	r4, [r5, #8]
 8017d44:	e7eb      	b.n	8017d1e <__swsetup_r+0x1e>
 8017d46:	4b24      	ldr	r3, [pc, #144]	; (8017dd8 <__swsetup_r+0xd8>)
 8017d48:	429c      	cmp	r4, r3
 8017d4a:	bf08      	it	eq
 8017d4c:	68ec      	ldreq	r4, [r5, #12]
 8017d4e:	e7e6      	b.n	8017d1e <__swsetup_r+0x1e>
 8017d50:	0751      	lsls	r1, r2, #29
 8017d52:	d512      	bpl.n	8017d7a <__swsetup_r+0x7a>
 8017d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d56:	b141      	cbz	r1, 8017d6a <__swsetup_r+0x6a>
 8017d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d5c:	4299      	cmp	r1, r3
 8017d5e:	d002      	beq.n	8017d66 <__swsetup_r+0x66>
 8017d60:	4630      	mov	r0, r6
 8017d62:	f7ff fe15 	bl	8017990 <_free_r>
 8017d66:	2300      	movs	r3, #0
 8017d68:	6363      	str	r3, [r4, #52]	; 0x34
 8017d6a:	89a3      	ldrh	r3, [r4, #12]
 8017d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017d70:	81a3      	strh	r3, [r4, #12]
 8017d72:	2300      	movs	r3, #0
 8017d74:	6063      	str	r3, [r4, #4]
 8017d76:	6923      	ldr	r3, [r4, #16]
 8017d78:	6023      	str	r3, [r4, #0]
 8017d7a:	89a3      	ldrh	r3, [r4, #12]
 8017d7c:	f043 0308 	orr.w	r3, r3, #8
 8017d80:	81a3      	strh	r3, [r4, #12]
 8017d82:	6923      	ldr	r3, [r4, #16]
 8017d84:	b94b      	cbnz	r3, 8017d9a <__swsetup_r+0x9a>
 8017d86:	89a3      	ldrh	r3, [r4, #12]
 8017d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d90:	d003      	beq.n	8017d9a <__swsetup_r+0x9a>
 8017d92:	4621      	mov	r1, r4
 8017d94:	4630      	mov	r0, r6
 8017d96:	f000 f9bf 	bl	8018118 <__smakebuf_r>
 8017d9a:	89a2      	ldrh	r2, [r4, #12]
 8017d9c:	f012 0301 	ands.w	r3, r2, #1
 8017da0:	d00c      	beq.n	8017dbc <__swsetup_r+0xbc>
 8017da2:	2300      	movs	r3, #0
 8017da4:	60a3      	str	r3, [r4, #8]
 8017da6:	6963      	ldr	r3, [r4, #20]
 8017da8:	425b      	negs	r3, r3
 8017daa:	61a3      	str	r3, [r4, #24]
 8017dac:	6923      	ldr	r3, [r4, #16]
 8017dae:	b953      	cbnz	r3, 8017dc6 <__swsetup_r+0xc6>
 8017db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017db4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017db8:	d1ba      	bne.n	8017d30 <__swsetup_r+0x30>
 8017dba:	bd70      	pop	{r4, r5, r6, pc}
 8017dbc:	0792      	lsls	r2, r2, #30
 8017dbe:	bf58      	it	pl
 8017dc0:	6963      	ldrpl	r3, [r4, #20]
 8017dc2:	60a3      	str	r3, [r4, #8]
 8017dc4:	e7f2      	b.n	8017dac <__swsetup_r+0xac>
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	e7f7      	b.n	8017dba <__swsetup_r+0xba>
 8017dca:	bf00      	nop
 8017dcc:	2000004c 	.word	0x2000004c
 8017dd0:	0801ad44 	.word	0x0801ad44
 8017dd4:	0801ad64 	.word	0x0801ad64
 8017dd8:	0801ad24 	.word	0x0801ad24

08017ddc <__sflush_r>:
 8017ddc:	898a      	ldrh	r2, [r1, #12]
 8017dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017de2:	4605      	mov	r5, r0
 8017de4:	0710      	lsls	r0, r2, #28
 8017de6:	460c      	mov	r4, r1
 8017de8:	d458      	bmi.n	8017e9c <__sflush_r+0xc0>
 8017dea:	684b      	ldr	r3, [r1, #4]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	dc05      	bgt.n	8017dfc <__sflush_r+0x20>
 8017df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	dc02      	bgt.n	8017dfc <__sflush_r+0x20>
 8017df6:	2000      	movs	r0, #0
 8017df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017dfe:	2e00      	cmp	r6, #0
 8017e00:	d0f9      	beq.n	8017df6 <__sflush_r+0x1a>
 8017e02:	2300      	movs	r3, #0
 8017e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017e08:	682f      	ldr	r7, [r5, #0]
 8017e0a:	6a21      	ldr	r1, [r4, #32]
 8017e0c:	602b      	str	r3, [r5, #0]
 8017e0e:	d032      	beq.n	8017e76 <__sflush_r+0x9a>
 8017e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	075a      	lsls	r2, r3, #29
 8017e16:	d505      	bpl.n	8017e24 <__sflush_r+0x48>
 8017e18:	6863      	ldr	r3, [r4, #4]
 8017e1a:	1ac0      	subs	r0, r0, r3
 8017e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017e1e:	b10b      	cbz	r3, 8017e24 <__sflush_r+0x48>
 8017e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017e22:	1ac0      	subs	r0, r0, r3
 8017e24:	2300      	movs	r3, #0
 8017e26:	4602      	mov	r2, r0
 8017e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017e2a:	6a21      	ldr	r1, [r4, #32]
 8017e2c:	4628      	mov	r0, r5
 8017e2e:	47b0      	blx	r6
 8017e30:	1c43      	adds	r3, r0, #1
 8017e32:	89a3      	ldrh	r3, [r4, #12]
 8017e34:	d106      	bne.n	8017e44 <__sflush_r+0x68>
 8017e36:	6829      	ldr	r1, [r5, #0]
 8017e38:	291d      	cmp	r1, #29
 8017e3a:	d848      	bhi.n	8017ece <__sflush_r+0xf2>
 8017e3c:	4a29      	ldr	r2, [pc, #164]	; (8017ee4 <__sflush_r+0x108>)
 8017e3e:	40ca      	lsrs	r2, r1
 8017e40:	07d6      	lsls	r6, r2, #31
 8017e42:	d544      	bpl.n	8017ece <__sflush_r+0xf2>
 8017e44:	2200      	movs	r2, #0
 8017e46:	6062      	str	r2, [r4, #4]
 8017e48:	6922      	ldr	r2, [r4, #16]
 8017e4a:	04d9      	lsls	r1, r3, #19
 8017e4c:	6022      	str	r2, [r4, #0]
 8017e4e:	d504      	bpl.n	8017e5a <__sflush_r+0x7e>
 8017e50:	1c42      	adds	r2, r0, #1
 8017e52:	d101      	bne.n	8017e58 <__sflush_r+0x7c>
 8017e54:	682b      	ldr	r3, [r5, #0]
 8017e56:	b903      	cbnz	r3, 8017e5a <__sflush_r+0x7e>
 8017e58:	6560      	str	r0, [r4, #84]	; 0x54
 8017e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e5c:	602f      	str	r7, [r5, #0]
 8017e5e:	2900      	cmp	r1, #0
 8017e60:	d0c9      	beq.n	8017df6 <__sflush_r+0x1a>
 8017e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e66:	4299      	cmp	r1, r3
 8017e68:	d002      	beq.n	8017e70 <__sflush_r+0x94>
 8017e6a:	4628      	mov	r0, r5
 8017e6c:	f7ff fd90 	bl	8017990 <_free_r>
 8017e70:	2000      	movs	r0, #0
 8017e72:	6360      	str	r0, [r4, #52]	; 0x34
 8017e74:	e7c0      	b.n	8017df8 <__sflush_r+0x1c>
 8017e76:	2301      	movs	r3, #1
 8017e78:	4628      	mov	r0, r5
 8017e7a:	47b0      	blx	r6
 8017e7c:	1c41      	adds	r1, r0, #1
 8017e7e:	d1c8      	bne.n	8017e12 <__sflush_r+0x36>
 8017e80:	682b      	ldr	r3, [r5, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d0c5      	beq.n	8017e12 <__sflush_r+0x36>
 8017e86:	2b1d      	cmp	r3, #29
 8017e88:	d001      	beq.n	8017e8e <__sflush_r+0xb2>
 8017e8a:	2b16      	cmp	r3, #22
 8017e8c:	d101      	bne.n	8017e92 <__sflush_r+0xb6>
 8017e8e:	602f      	str	r7, [r5, #0]
 8017e90:	e7b1      	b.n	8017df6 <__sflush_r+0x1a>
 8017e92:	89a3      	ldrh	r3, [r4, #12]
 8017e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e98:	81a3      	strh	r3, [r4, #12]
 8017e9a:	e7ad      	b.n	8017df8 <__sflush_r+0x1c>
 8017e9c:	690f      	ldr	r7, [r1, #16]
 8017e9e:	2f00      	cmp	r7, #0
 8017ea0:	d0a9      	beq.n	8017df6 <__sflush_r+0x1a>
 8017ea2:	0793      	lsls	r3, r2, #30
 8017ea4:	bf18      	it	ne
 8017ea6:	2300      	movne	r3, #0
 8017ea8:	680e      	ldr	r6, [r1, #0]
 8017eaa:	bf08      	it	eq
 8017eac:	694b      	ldreq	r3, [r1, #20]
 8017eae:	eba6 0807 	sub.w	r8, r6, r7
 8017eb2:	600f      	str	r7, [r1, #0]
 8017eb4:	608b      	str	r3, [r1, #8]
 8017eb6:	f1b8 0f00 	cmp.w	r8, #0
 8017eba:	dd9c      	ble.n	8017df6 <__sflush_r+0x1a>
 8017ebc:	4643      	mov	r3, r8
 8017ebe:	463a      	mov	r2, r7
 8017ec0:	6a21      	ldr	r1, [r4, #32]
 8017ec2:	4628      	mov	r0, r5
 8017ec4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017ec6:	47b0      	blx	r6
 8017ec8:	2800      	cmp	r0, #0
 8017eca:	dc06      	bgt.n	8017eda <__sflush_r+0xfe>
 8017ecc:	89a3      	ldrh	r3, [r4, #12]
 8017ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ed2:	81a3      	strh	r3, [r4, #12]
 8017ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ed8:	e78e      	b.n	8017df8 <__sflush_r+0x1c>
 8017eda:	4407      	add	r7, r0
 8017edc:	eba8 0800 	sub.w	r8, r8, r0
 8017ee0:	e7e9      	b.n	8017eb6 <__sflush_r+0xda>
 8017ee2:	bf00      	nop
 8017ee4:	20400001 	.word	0x20400001

08017ee8 <_fflush_r>:
 8017ee8:	b538      	push	{r3, r4, r5, lr}
 8017eea:	690b      	ldr	r3, [r1, #16]
 8017eec:	4605      	mov	r5, r0
 8017eee:	460c      	mov	r4, r1
 8017ef0:	b1db      	cbz	r3, 8017f2a <_fflush_r+0x42>
 8017ef2:	b118      	cbz	r0, 8017efc <_fflush_r+0x14>
 8017ef4:	6983      	ldr	r3, [r0, #24]
 8017ef6:	b90b      	cbnz	r3, 8017efc <_fflush_r+0x14>
 8017ef8:	f000 f860 	bl	8017fbc <__sinit>
 8017efc:	4b0c      	ldr	r3, [pc, #48]	; (8017f30 <_fflush_r+0x48>)
 8017efe:	429c      	cmp	r4, r3
 8017f00:	d109      	bne.n	8017f16 <_fflush_r+0x2e>
 8017f02:	686c      	ldr	r4, [r5, #4]
 8017f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f08:	b17b      	cbz	r3, 8017f2a <_fflush_r+0x42>
 8017f0a:	4621      	mov	r1, r4
 8017f0c:	4628      	mov	r0, r5
 8017f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f12:	f7ff bf63 	b.w	8017ddc <__sflush_r>
 8017f16:	4b07      	ldr	r3, [pc, #28]	; (8017f34 <_fflush_r+0x4c>)
 8017f18:	429c      	cmp	r4, r3
 8017f1a:	d101      	bne.n	8017f20 <_fflush_r+0x38>
 8017f1c:	68ac      	ldr	r4, [r5, #8]
 8017f1e:	e7f1      	b.n	8017f04 <_fflush_r+0x1c>
 8017f20:	4b05      	ldr	r3, [pc, #20]	; (8017f38 <_fflush_r+0x50>)
 8017f22:	429c      	cmp	r4, r3
 8017f24:	bf08      	it	eq
 8017f26:	68ec      	ldreq	r4, [r5, #12]
 8017f28:	e7ec      	b.n	8017f04 <_fflush_r+0x1c>
 8017f2a:	2000      	movs	r0, #0
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	bf00      	nop
 8017f30:	0801ad44 	.word	0x0801ad44
 8017f34:	0801ad64 	.word	0x0801ad64
 8017f38:	0801ad24 	.word	0x0801ad24

08017f3c <std>:
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	b510      	push	{r4, lr}
 8017f40:	4604      	mov	r4, r0
 8017f42:	e9c0 3300 	strd	r3, r3, [r0]
 8017f46:	6083      	str	r3, [r0, #8]
 8017f48:	8181      	strh	r1, [r0, #12]
 8017f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8017f4c:	81c2      	strh	r2, [r0, #14]
 8017f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f52:	6183      	str	r3, [r0, #24]
 8017f54:	4619      	mov	r1, r3
 8017f56:	2208      	movs	r2, #8
 8017f58:	305c      	adds	r0, #92	; 0x5c
 8017f5a:	f7ff fd11 	bl	8017980 <memset>
 8017f5e:	4b05      	ldr	r3, [pc, #20]	; (8017f74 <std+0x38>)
 8017f60:	6224      	str	r4, [r4, #32]
 8017f62:	6263      	str	r3, [r4, #36]	; 0x24
 8017f64:	4b04      	ldr	r3, [pc, #16]	; (8017f78 <std+0x3c>)
 8017f66:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f68:	4b04      	ldr	r3, [pc, #16]	; (8017f7c <std+0x40>)
 8017f6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f6c:	4b04      	ldr	r3, [pc, #16]	; (8017f80 <std+0x44>)
 8017f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8017f70:	bd10      	pop	{r4, pc}
 8017f72:	bf00      	nop
 8017f74:	08018729 	.word	0x08018729
 8017f78:	0801874b 	.word	0x0801874b
 8017f7c:	08018783 	.word	0x08018783
 8017f80:	080187a7 	.word	0x080187a7

08017f84 <_cleanup_r>:
 8017f84:	4901      	ldr	r1, [pc, #4]	; (8017f8c <_cleanup_r+0x8>)
 8017f86:	f000 b885 	b.w	8018094 <_fwalk_reent>
 8017f8a:	bf00      	nop
 8017f8c:	08017ee9 	.word	0x08017ee9

08017f90 <__sfmoreglue>:
 8017f90:	b570      	push	{r4, r5, r6, lr}
 8017f92:	2568      	movs	r5, #104	; 0x68
 8017f94:	1e4a      	subs	r2, r1, #1
 8017f96:	4355      	muls	r5, r2
 8017f98:	460e      	mov	r6, r1
 8017f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f9e:	f7ff fd43 	bl	8017a28 <_malloc_r>
 8017fa2:	4604      	mov	r4, r0
 8017fa4:	b140      	cbz	r0, 8017fb8 <__sfmoreglue+0x28>
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8017fac:	300c      	adds	r0, #12
 8017fae:	60a0      	str	r0, [r4, #8]
 8017fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017fb4:	f7ff fce4 	bl	8017980 <memset>
 8017fb8:	4620      	mov	r0, r4
 8017fba:	bd70      	pop	{r4, r5, r6, pc}

08017fbc <__sinit>:
 8017fbc:	6983      	ldr	r3, [r0, #24]
 8017fbe:	b510      	push	{r4, lr}
 8017fc0:	4604      	mov	r4, r0
 8017fc2:	bb33      	cbnz	r3, 8018012 <__sinit+0x56>
 8017fc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017fc8:	6503      	str	r3, [r0, #80]	; 0x50
 8017fca:	4b12      	ldr	r3, [pc, #72]	; (8018014 <__sinit+0x58>)
 8017fcc:	4a12      	ldr	r2, [pc, #72]	; (8018018 <__sinit+0x5c>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	6282      	str	r2, [r0, #40]	; 0x28
 8017fd2:	4298      	cmp	r0, r3
 8017fd4:	bf04      	itt	eq
 8017fd6:	2301      	moveq	r3, #1
 8017fd8:	6183      	streq	r3, [r0, #24]
 8017fda:	f000 f81f 	bl	801801c <__sfp>
 8017fde:	6060      	str	r0, [r4, #4]
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f000 f81b 	bl	801801c <__sfp>
 8017fe6:	60a0      	str	r0, [r4, #8]
 8017fe8:	4620      	mov	r0, r4
 8017fea:	f000 f817 	bl	801801c <__sfp>
 8017fee:	2200      	movs	r2, #0
 8017ff0:	60e0      	str	r0, [r4, #12]
 8017ff2:	2104      	movs	r1, #4
 8017ff4:	6860      	ldr	r0, [r4, #4]
 8017ff6:	f7ff ffa1 	bl	8017f3c <std>
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	2109      	movs	r1, #9
 8017ffe:	68a0      	ldr	r0, [r4, #8]
 8018000:	f7ff ff9c 	bl	8017f3c <std>
 8018004:	2202      	movs	r2, #2
 8018006:	2112      	movs	r1, #18
 8018008:	68e0      	ldr	r0, [r4, #12]
 801800a:	f7ff ff97 	bl	8017f3c <std>
 801800e:	2301      	movs	r3, #1
 8018010:	61a3      	str	r3, [r4, #24]
 8018012:	bd10      	pop	{r4, pc}
 8018014:	0801ad20 	.word	0x0801ad20
 8018018:	08017f85 	.word	0x08017f85

0801801c <__sfp>:
 801801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801801e:	4b1b      	ldr	r3, [pc, #108]	; (801808c <__sfp+0x70>)
 8018020:	4607      	mov	r7, r0
 8018022:	681e      	ldr	r6, [r3, #0]
 8018024:	69b3      	ldr	r3, [r6, #24]
 8018026:	b913      	cbnz	r3, 801802e <__sfp+0x12>
 8018028:	4630      	mov	r0, r6
 801802a:	f7ff ffc7 	bl	8017fbc <__sinit>
 801802e:	3648      	adds	r6, #72	; 0x48
 8018030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018034:	3b01      	subs	r3, #1
 8018036:	d503      	bpl.n	8018040 <__sfp+0x24>
 8018038:	6833      	ldr	r3, [r6, #0]
 801803a:	b133      	cbz	r3, 801804a <__sfp+0x2e>
 801803c:	6836      	ldr	r6, [r6, #0]
 801803e:	e7f7      	b.n	8018030 <__sfp+0x14>
 8018040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018044:	b16d      	cbz	r5, 8018062 <__sfp+0x46>
 8018046:	3468      	adds	r4, #104	; 0x68
 8018048:	e7f4      	b.n	8018034 <__sfp+0x18>
 801804a:	2104      	movs	r1, #4
 801804c:	4638      	mov	r0, r7
 801804e:	f7ff ff9f 	bl	8017f90 <__sfmoreglue>
 8018052:	6030      	str	r0, [r6, #0]
 8018054:	2800      	cmp	r0, #0
 8018056:	d1f1      	bne.n	801803c <__sfp+0x20>
 8018058:	230c      	movs	r3, #12
 801805a:	4604      	mov	r4, r0
 801805c:	603b      	str	r3, [r7, #0]
 801805e:	4620      	mov	r0, r4
 8018060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018062:	4b0b      	ldr	r3, [pc, #44]	; (8018090 <__sfp+0x74>)
 8018064:	6665      	str	r5, [r4, #100]	; 0x64
 8018066:	e9c4 5500 	strd	r5, r5, [r4]
 801806a:	60a5      	str	r5, [r4, #8]
 801806c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018070:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018074:	2208      	movs	r2, #8
 8018076:	4629      	mov	r1, r5
 8018078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801807c:	f7ff fc80 	bl	8017980 <memset>
 8018080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018088:	e7e9      	b.n	801805e <__sfp+0x42>
 801808a:	bf00      	nop
 801808c:	0801ad20 	.word	0x0801ad20
 8018090:	ffff0001 	.word	0xffff0001

08018094 <_fwalk_reent>:
 8018094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018098:	4680      	mov	r8, r0
 801809a:	4689      	mov	r9, r1
 801809c:	2600      	movs	r6, #0
 801809e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80180a2:	b914      	cbnz	r4, 80180aa <_fwalk_reent+0x16>
 80180a4:	4630      	mov	r0, r6
 80180a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80180ae:	3f01      	subs	r7, #1
 80180b0:	d501      	bpl.n	80180b6 <_fwalk_reent+0x22>
 80180b2:	6824      	ldr	r4, [r4, #0]
 80180b4:	e7f5      	b.n	80180a2 <_fwalk_reent+0xe>
 80180b6:	89ab      	ldrh	r3, [r5, #12]
 80180b8:	2b01      	cmp	r3, #1
 80180ba:	d907      	bls.n	80180cc <_fwalk_reent+0x38>
 80180bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180c0:	3301      	adds	r3, #1
 80180c2:	d003      	beq.n	80180cc <_fwalk_reent+0x38>
 80180c4:	4629      	mov	r1, r5
 80180c6:	4640      	mov	r0, r8
 80180c8:	47c8      	blx	r9
 80180ca:	4306      	orrs	r6, r0
 80180cc:	3568      	adds	r5, #104	; 0x68
 80180ce:	e7ee      	b.n	80180ae <_fwalk_reent+0x1a>

080180d0 <__swhatbuf_r>:
 80180d0:	b570      	push	{r4, r5, r6, lr}
 80180d2:	460e      	mov	r6, r1
 80180d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d8:	b096      	sub	sp, #88	; 0x58
 80180da:	2900      	cmp	r1, #0
 80180dc:	4614      	mov	r4, r2
 80180de:	461d      	mov	r5, r3
 80180e0:	da07      	bge.n	80180f2 <__swhatbuf_r+0x22>
 80180e2:	2300      	movs	r3, #0
 80180e4:	602b      	str	r3, [r5, #0]
 80180e6:	89b3      	ldrh	r3, [r6, #12]
 80180e8:	061a      	lsls	r2, r3, #24
 80180ea:	d410      	bmi.n	801810e <__swhatbuf_r+0x3e>
 80180ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180f0:	e00e      	b.n	8018110 <__swhatbuf_r+0x40>
 80180f2:	466a      	mov	r2, sp
 80180f4:	f000 fb7e 	bl	80187f4 <_fstat_r>
 80180f8:	2800      	cmp	r0, #0
 80180fa:	dbf2      	blt.n	80180e2 <__swhatbuf_r+0x12>
 80180fc:	9a01      	ldr	r2, [sp, #4]
 80180fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018106:	425a      	negs	r2, r3
 8018108:	415a      	adcs	r2, r3
 801810a:	602a      	str	r2, [r5, #0]
 801810c:	e7ee      	b.n	80180ec <__swhatbuf_r+0x1c>
 801810e:	2340      	movs	r3, #64	; 0x40
 8018110:	2000      	movs	r0, #0
 8018112:	6023      	str	r3, [r4, #0]
 8018114:	b016      	add	sp, #88	; 0x58
 8018116:	bd70      	pop	{r4, r5, r6, pc}

08018118 <__smakebuf_r>:
 8018118:	898b      	ldrh	r3, [r1, #12]
 801811a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801811c:	079d      	lsls	r5, r3, #30
 801811e:	4606      	mov	r6, r0
 8018120:	460c      	mov	r4, r1
 8018122:	d507      	bpl.n	8018134 <__smakebuf_r+0x1c>
 8018124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018128:	6023      	str	r3, [r4, #0]
 801812a:	6123      	str	r3, [r4, #16]
 801812c:	2301      	movs	r3, #1
 801812e:	6163      	str	r3, [r4, #20]
 8018130:	b002      	add	sp, #8
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	ab01      	add	r3, sp, #4
 8018136:	466a      	mov	r2, sp
 8018138:	f7ff ffca 	bl	80180d0 <__swhatbuf_r>
 801813c:	9900      	ldr	r1, [sp, #0]
 801813e:	4605      	mov	r5, r0
 8018140:	4630      	mov	r0, r6
 8018142:	f7ff fc71 	bl	8017a28 <_malloc_r>
 8018146:	b948      	cbnz	r0, 801815c <__smakebuf_r+0x44>
 8018148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801814c:	059a      	lsls	r2, r3, #22
 801814e:	d4ef      	bmi.n	8018130 <__smakebuf_r+0x18>
 8018150:	f023 0303 	bic.w	r3, r3, #3
 8018154:	f043 0302 	orr.w	r3, r3, #2
 8018158:	81a3      	strh	r3, [r4, #12]
 801815a:	e7e3      	b.n	8018124 <__smakebuf_r+0xc>
 801815c:	4b0d      	ldr	r3, [pc, #52]	; (8018194 <__smakebuf_r+0x7c>)
 801815e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018160:	89a3      	ldrh	r3, [r4, #12]
 8018162:	6020      	str	r0, [r4, #0]
 8018164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018168:	81a3      	strh	r3, [r4, #12]
 801816a:	9b00      	ldr	r3, [sp, #0]
 801816c:	6120      	str	r0, [r4, #16]
 801816e:	6163      	str	r3, [r4, #20]
 8018170:	9b01      	ldr	r3, [sp, #4]
 8018172:	b15b      	cbz	r3, 801818c <__smakebuf_r+0x74>
 8018174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018178:	4630      	mov	r0, r6
 801817a:	f000 fb4d 	bl	8018818 <_isatty_r>
 801817e:	b128      	cbz	r0, 801818c <__smakebuf_r+0x74>
 8018180:	89a3      	ldrh	r3, [r4, #12]
 8018182:	f023 0303 	bic.w	r3, r3, #3
 8018186:	f043 0301 	orr.w	r3, r3, #1
 801818a:	81a3      	strh	r3, [r4, #12]
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	431d      	orrs	r5, r3
 8018190:	81a5      	strh	r5, [r4, #12]
 8018192:	e7cd      	b.n	8018130 <__smakebuf_r+0x18>
 8018194:	08017f85 	.word	0x08017f85

08018198 <__malloc_lock>:
 8018198:	4770      	bx	lr

0801819a <__malloc_unlock>:
 801819a:	4770      	bx	lr

0801819c <__sfputc_r>:
 801819c:	6893      	ldr	r3, [r2, #8]
 801819e:	b410      	push	{r4}
 80181a0:	3b01      	subs	r3, #1
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	6093      	str	r3, [r2, #8]
 80181a6:	da07      	bge.n	80181b8 <__sfputc_r+0x1c>
 80181a8:	6994      	ldr	r4, [r2, #24]
 80181aa:	42a3      	cmp	r3, r4
 80181ac:	db01      	blt.n	80181b2 <__sfputc_r+0x16>
 80181ae:	290a      	cmp	r1, #10
 80181b0:	d102      	bne.n	80181b8 <__sfputc_r+0x1c>
 80181b2:	bc10      	pop	{r4}
 80181b4:	f7ff bd52 	b.w	8017c5c <__swbuf_r>
 80181b8:	6813      	ldr	r3, [r2, #0]
 80181ba:	1c58      	adds	r0, r3, #1
 80181bc:	6010      	str	r0, [r2, #0]
 80181be:	7019      	strb	r1, [r3, #0]
 80181c0:	4608      	mov	r0, r1
 80181c2:	bc10      	pop	{r4}
 80181c4:	4770      	bx	lr

080181c6 <__sfputs_r>:
 80181c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181c8:	4606      	mov	r6, r0
 80181ca:	460f      	mov	r7, r1
 80181cc:	4614      	mov	r4, r2
 80181ce:	18d5      	adds	r5, r2, r3
 80181d0:	42ac      	cmp	r4, r5
 80181d2:	d101      	bne.n	80181d8 <__sfputs_r+0x12>
 80181d4:	2000      	movs	r0, #0
 80181d6:	e007      	b.n	80181e8 <__sfputs_r+0x22>
 80181d8:	463a      	mov	r2, r7
 80181da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181de:	4630      	mov	r0, r6
 80181e0:	f7ff ffdc 	bl	801819c <__sfputc_r>
 80181e4:	1c43      	adds	r3, r0, #1
 80181e6:	d1f3      	bne.n	80181d0 <__sfputs_r+0xa>
 80181e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181ec <_vfiprintf_r>:
 80181ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181f0:	460c      	mov	r4, r1
 80181f2:	b09d      	sub	sp, #116	; 0x74
 80181f4:	4617      	mov	r7, r2
 80181f6:	461d      	mov	r5, r3
 80181f8:	4606      	mov	r6, r0
 80181fa:	b118      	cbz	r0, 8018204 <_vfiprintf_r+0x18>
 80181fc:	6983      	ldr	r3, [r0, #24]
 80181fe:	b90b      	cbnz	r3, 8018204 <_vfiprintf_r+0x18>
 8018200:	f7ff fedc 	bl	8017fbc <__sinit>
 8018204:	4b7c      	ldr	r3, [pc, #496]	; (80183f8 <_vfiprintf_r+0x20c>)
 8018206:	429c      	cmp	r4, r3
 8018208:	d158      	bne.n	80182bc <_vfiprintf_r+0xd0>
 801820a:	6874      	ldr	r4, [r6, #4]
 801820c:	89a3      	ldrh	r3, [r4, #12]
 801820e:	0718      	lsls	r0, r3, #28
 8018210:	d55e      	bpl.n	80182d0 <_vfiprintf_r+0xe4>
 8018212:	6923      	ldr	r3, [r4, #16]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d05b      	beq.n	80182d0 <_vfiprintf_r+0xe4>
 8018218:	2300      	movs	r3, #0
 801821a:	9309      	str	r3, [sp, #36]	; 0x24
 801821c:	2320      	movs	r3, #32
 801821e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018222:	2330      	movs	r3, #48	; 0x30
 8018224:	f04f 0b01 	mov.w	fp, #1
 8018228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801822c:	9503      	str	r5, [sp, #12]
 801822e:	46b8      	mov	r8, r7
 8018230:	4645      	mov	r5, r8
 8018232:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018236:	b10b      	cbz	r3, 801823c <_vfiprintf_r+0x50>
 8018238:	2b25      	cmp	r3, #37	; 0x25
 801823a:	d154      	bne.n	80182e6 <_vfiprintf_r+0xfa>
 801823c:	ebb8 0a07 	subs.w	sl, r8, r7
 8018240:	d00b      	beq.n	801825a <_vfiprintf_r+0x6e>
 8018242:	4653      	mov	r3, sl
 8018244:	463a      	mov	r2, r7
 8018246:	4621      	mov	r1, r4
 8018248:	4630      	mov	r0, r6
 801824a:	f7ff ffbc 	bl	80181c6 <__sfputs_r>
 801824e:	3001      	adds	r0, #1
 8018250:	f000 80c2 	beq.w	80183d8 <_vfiprintf_r+0x1ec>
 8018254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018256:	4453      	add	r3, sl
 8018258:	9309      	str	r3, [sp, #36]	; 0x24
 801825a:	f898 3000 	ldrb.w	r3, [r8]
 801825e:	2b00      	cmp	r3, #0
 8018260:	f000 80ba 	beq.w	80183d8 <_vfiprintf_r+0x1ec>
 8018264:	2300      	movs	r3, #0
 8018266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801826a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801826e:	9304      	str	r3, [sp, #16]
 8018270:	9307      	str	r3, [sp, #28]
 8018272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018276:	931a      	str	r3, [sp, #104]	; 0x68
 8018278:	46a8      	mov	r8, r5
 801827a:	2205      	movs	r2, #5
 801827c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018280:	485e      	ldr	r0, [pc, #376]	; (80183fc <_vfiprintf_r+0x210>)
 8018282:	f000 faeb 	bl	801885c <memchr>
 8018286:	9b04      	ldr	r3, [sp, #16]
 8018288:	bb78      	cbnz	r0, 80182ea <_vfiprintf_r+0xfe>
 801828a:	06d9      	lsls	r1, r3, #27
 801828c:	bf44      	itt	mi
 801828e:	2220      	movmi	r2, #32
 8018290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018294:	071a      	lsls	r2, r3, #28
 8018296:	bf44      	itt	mi
 8018298:	222b      	movmi	r2, #43	; 0x2b
 801829a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801829e:	782a      	ldrb	r2, [r5, #0]
 80182a0:	2a2a      	cmp	r2, #42	; 0x2a
 80182a2:	d02a      	beq.n	80182fa <_vfiprintf_r+0x10e>
 80182a4:	46a8      	mov	r8, r5
 80182a6:	2000      	movs	r0, #0
 80182a8:	250a      	movs	r5, #10
 80182aa:	9a07      	ldr	r2, [sp, #28]
 80182ac:	4641      	mov	r1, r8
 80182ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182b2:	3b30      	subs	r3, #48	; 0x30
 80182b4:	2b09      	cmp	r3, #9
 80182b6:	d969      	bls.n	801838c <_vfiprintf_r+0x1a0>
 80182b8:	b360      	cbz	r0, 8018314 <_vfiprintf_r+0x128>
 80182ba:	e024      	b.n	8018306 <_vfiprintf_r+0x11a>
 80182bc:	4b50      	ldr	r3, [pc, #320]	; (8018400 <_vfiprintf_r+0x214>)
 80182be:	429c      	cmp	r4, r3
 80182c0:	d101      	bne.n	80182c6 <_vfiprintf_r+0xda>
 80182c2:	68b4      	ldr	r4, [r6, #8]
 80182c4:	e7a2      	b.n	801820c <_vfiprintf_r+0x20>
 80182c6:	4b4f      	ldr	r3, [pc, #316]	; (8018404 <_vfiprintf_r+0x218>)
 80182c8:	429c      	cmp	r4, r3
 80182ca:	bf08      	it	eq
 80182cc:	68f4      	ldreq	r4, [r6, #12]
 80182ce:	e79d      	b.n	801820c <_vfiprintf_r+0x20>
 80182d0:	4621      	mov	r1, r4
 80182d2:	4630      	mov	r0, r6
 80182d4:	f7ff fd14 	bl	8017d00 <__swsetup_r>
 80182d8:	2800      	cmp	r0, #0
 80182da:	d09d      	beq.n	8018218 <_vfiprintf_r+0x2c>
 80182dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182e0:	b01d      	add	sp, #116	; 0x74
 80182e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e6:	46a8      	mov	r8, r5
 80182e8:	e7a2      	b.n	8018230 <_vfiprintf_r+0x44>
 80182ea:	4a44      	ldr	r2, [pc, #272]	; (80183fc <_vfiprintf_r+0x210>)
 80182ec:	4645      	mov	r5, r8
 80182ee:	1a80      	subs	r0, r0, r2
 80182f0:	fa0b f000 	lsl.w	r0, fp, r0
 80182f4:	4318      	orrs	r0, r3
 80182f6:	9004      	str	r0, [sp, #16]
 80182f8:	e7be      	b.n	8018278 <_vfiprintf_r+0x8c>
 80182fa:	9a03      	ldr	r2, [sp, #12]
 80182fc:	1d11      	adds	r1, r2, #4
 80182fe:	6812      	ldr	r2, [r2, #0]
 8018300:	9103      	str	r1, [sp, #12]
 8018302:	2a00      	cmp	r2, #0
 8018304:	db01      	blt.n	801830a <_vfiprintf_r+0x11e>
 8018306:	9207      	str	r2, [sp, #28]
 8018308:	e004      	b.n	8018314 <_vfiprintf_r+0x128>
 801830a:	4252      	negs	r2, r2
 801830c:	f043 0302 	orr.w	r3, r3, #2
 8018310:	9207      	str	r2, [sp, #28]
 8018312:	9304      	str	r3, [sp, #16]
 8018314:	f898 3000 	ldrb.w	r3, [r8]
 8018318:	2b2e      	cmp	r3, #46	; 0x2e
 801831a:	d10e      	bne.n	801833a <_vfiprintf_r+0x14e>
 801831c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018320:	2b2a      	cmp	r3, #42	; 0x2a
 8018322:	d138      	bne.n	8018396 <_vfiprintf_r+0x1aa>
 8018324:	9b03      	ldr	r3, [sp, #12]
 8018326:	f108 0802 	add.w	r8, r8, #2
 801832a:	1d1a      	adds	r2, r3, #4
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	9203      	str	r2, [sp, #12]
 8018330:	2b00      	cmp	r3, #0
 8018332:	bfb8      	it	lt
 8018334:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018338:	9305      	str	r3, [sp, #20]
 801833a:	4d33      	ldr	r5, [pc, #204]	; (8018408 <_vfiprintf_r+0x21c>)
 801833c:	2203      	movs	r2, #3
 801833e:	f898 1000 	ldrb.w	r1, [r8]
 8018342:	4628      	mov	r0, r5
 8018344:	f000 fa8a 	bl	801885c <memchr>
 8018348:	b140      	cbz	r0, 801835c <_vfiprintf_r+0x170>
 801834a:	2340      	movs	r3, #64	; 0x40
 801834c:	1b40      	subs	r0, r0, r5
 801834e:	fa03 f000 	lsl.w	r0, r3, r0
 8018352:	9b04      	ldr	r3, [sp, #16]
 8018354:	f108 0801 	add.w	r8, r8, #1
 8018358:	4303      	orrs	r3, r0
 801835a:	9304      	str	r3, [sp, #16]
 801835c:	f898 1000 	ldrb.w	r1, [r8]
 8018360:	2206      	movs	r2, #6
 8018362:	482a      	ldr	r0, [pc, #168]	; (801840c <_vfiprintf_r+0x220>)
 8018364:	f108 0701 	add.w	r7, r8, #1
 8018368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801836c:	f000 fa76 	bl	801885c <memchr>
 8018370:	2800      	cmp	r0, #0
 8018372:	d037      	beq.n	80183e4 <_vfiprintf_r+0x1f8>
 8018374:	4b26      	ldr	r3, [pc, #152]	; (8018410 <_vfiprintf_r+0x224>)
 8018376:	bb1b      	cbnz	r3, 80183c0 <_vfiprintf_r+0x1d4>
 8018378:	9b03      	ldr	r3, [sp, #12]
 801837a:	3307      	adds	r3, #7
 801837c:	f023 0307 	bic.w	r3, r3, #7
 8018380:	3308      	adds	r3, #8
 8018382:	9303      	str	r3, [sp, #12]
 8018384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018386:	444b      	add	r3, r9
 8018388:	9309      	str	r3, [sp, #36]	; 0x24
 801838a:	e750      	b.n	801822e <_vfiprintf_r+0x42>
 801838c:	fb05 3202 	mla	r2, r5, r2, r3
 8018390:	2001      	movs	r0, #1
 8018392:	4688      	mov	r8, r1
 8018394:	e78a      	b.n	80182ac <_vfiprintf_r+0xc0>
 8018396:	2300      	movs	r3, #0
 8018398:	250a      	movs	r5, #10
 801839a:	4619      	mov	r1, r3
 801839c:	f108 0801 	add.w	r8, r8, #1
 80183a0:	9305      	str	r3, [sp, #20]
 80183a2:	4640      	mov	r0, r8
 80183a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183a8:	3a30      	subs	r2, #48	; 0x30
 80183aa:	2a09      	cmp	r2, #9
 80183ac:	d903      	bls.n	80183b6 <_vfiprintf_r+0x1ca>
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d0c3      	beq.n	801833a <_vfiprintf_r+0x14e>
 80183b2:	9105      	str	r1, [sp, #20]
 80183b4:	e7c1      	b.n	801833a <_vfiprintf_r+0x14e>
 80183b6:	fb05 2101 	mla	r1, r5, r1, r2
 80183ba:	2301      	movs	r3, #1
 80183bc:	4680      	mov	r8, r0
 80183be:	e7f0      	b.n	80183a2 <_vfiprintf_r+0x1b6>
 80183c0:	ab03      	add	r3, sp, #12
 80183c2:	9300      	str	r3, [sp, #0]
 80183c4:	4622      	mov	r2, r4
 80183c6:	4b13      	ldr	r3, [pc, #76]	; (8018414 <_vfiprintf_r+0x228>)
 80183c8:	a904      	add	r1, sp, #16
 80183ca:	4630      	mov	r0, r6
 80183cc:	f3af 8000 	nop.w
 80183d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80183d4:	4681      	mov	r9, r0
 80183d6:	d1d5      	bne.n	8018384 <_vfiprintf_r+0x198>
 80183d8:	89a3      	ldrh	r3, [r4, #12]
 80183da:	065b      	lsls	r3, r3, #25
 80183dc:	f53f af7e 	bmi.w	80182dc <_vfiprintf_r+0xf0>
 80183e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183e2:	e77d      	b.n	80182e0 <_vfiprintf_r+0xf4>
 80183e4:	ab03      	add	r3, sp, #12
 80183e6:	9300      	str	r3, [sp, #0]
 80183e8:	4622      	mov	r2, r4
 80183ea:	4b0a      	ldr	r3, [pc, #40]	; (8018414 <_vfiprintf_r+0x228>)
 80183ec:	a904      	add	r1, sp, #16
 80183ee:	4630      	mov	r0, r6
 80183f0:	f000 f888 	bl	8018504 <_printf_i>
 80183f4:	e7ec      	b.n	80183d0 <_vfiprintf_r+0x1e4>
 80183f6:	bf00      	nop
 80183f8:	0801ad44 	.word	0x0801ad44
 80183fc:	0801ad84 	.word	0x0801ad84
 8018400:	0801ad64 	.word	0x0801ad64
 8018404:	0801ad24 	.word	0x0801ad24
 8018408:	0801ad8a 	.word	0x0801ad8a
 801840c:	0801ad8e 	.word	0x0801ad8e
 8018410:	00000000 	.word	0x00000000
 8018414:	080181c7 	.word	0x080181c7

08018418 <_printf_common>:
 8018418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801841c:	4691      	mov	r9, r2
 801841e:	461f      	mov	r7, r3
 8018420:	688a      	ldr	r2, [r1, #8]
 8018422:	690b      	ldr	r3, [r1, #16]
 8018424:	4606      	mov	r6, r0
 8018426:	4293      	cmp	r3, r2
 8018428:	bfb8      	it	lt
 801842a:	4613      	movlt	r3, r2
 801842c:	f8c9 3000 	str.w	r3, [r9]
 8018430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018434:	460c      	mov	r4, r1
 8018436:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801843a:	b112      	cbz	r2, 8018442 <_printf_common+0x2a>
 801843c:	3301      	adds	r3, #1
 801843e:	f8c9 3000 	str.w	r3, [r9]
 8018442:	6823      	ldr	r3, [r4, #0]
 8018444:	0699      	lsls	r1, r3, #26
 8018446:	bf42      	ittt	mi
 8018448:	f8d9 3000 	ldrmi.w	r3, [r9]
 801844c:	3302      	addmi	r3, #2
 801844e:	f8c9 3000 	strmi.w	r3, [r9]
 8018452:	6825      	ldr	r5, [r4, #0]
 8018454:	f015 0506 	ands.w	r5, r5, #6
 8018458:	d107      	bne.n	801846a <_printf_common+0x52>
 801845a:	f104 0a19 	add.w	sl, r4, #25
 801845e:	68e3      	ldr	r3, [r4, #12]
 8018460:	f8d9 2000 	ldr.w	r2, [r9]
 8018464:	1a9b      	subs	r3, r3, r2
 8018466:	42ab      	cmp	r3, r5
 8018468:	dc29      	bgt.n	80184be <_printf_common+0xa6>
 801846a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801846e:	6822      	ldr	r2, [r4, #0]
 8018470:	3300      	adds	r3, #0
 8018472:	bf18      	it	ne
 8018474:	2301      	movne	r3, #1
 8018476:	0692      	lsls	r2, r2, #26
 8018478:	d42e      	bmi.n	80184d8 <_printf_common+0xc0>
 801847a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801847e:	4639      	mov	r1, r7
 8018480:	4630      	mov	r0, r6
 8018482:	47c0      	blx	r8
 8018484:	3001      	adds	r0, #1
 8018486:	d021      	beq.n	80184cc <_printf_common+0xb4>
 8018488:	6823      	ldr	r3, [r4, #0]
 801848a:	68e5      	ldr	r5, [r4, #12]
 801848c:	f003 0306 	and.w	r3, r3, #6
 8018490:	2b04      	cmp	r3, #4
 8018492:	bf18      	it	ne
 8018494:	2500      	movne	r5, #0
 8018496:	f8d9 2000 	ldr.w	r2, [r9]
 801849a:	f04f 0900 	mov.w	r9, #0
 801849e:	bf08      	it	eq
 80184a0:	1aad      	subeq	r5, r5, r2
 80184a2:	68a3      	ldr	r3, [r4, #8]
 80184a4:	6922      	ldr	r2, [r4, #16]
 80184a6:	bf08      	it	eq
 80184a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80184ac:	4293      	cmp	r3, r2
 80184ae:	bfc4      	itt	gt
 80184b0:	1a9b      	subgt	r3, r3, r2
 80184b2:	18ed      	addgt	r5, r5, r3
 80184b4:	341a      	adds	r4, #26
 80184b6:	454d      	cmp	r5, r9
 80184b8:	d11a      	bne.n	80184f0 <_printf_common+0xd8>
 80184ba:	2000      	movs	r0, #0
 80184bc:	e008      	b.n	80184d0 <_printf_common+0xb8>
 80184be:	2301      	movs	r3, #1
 80184c0:	4652      	mov	r2, sl
 80184c2:	4639      	mov	r1, r7
 80184c4:	4630      	mov	r0, r6
 80184c6:	47c0      	blx	r8
 80184c8:	3001      	adds	r0, #1
 80184ca:	d103      	bne.n	80184d4 <_printf_common+0xbc>
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184d4:	3501      	adds	r5, #1
 80184d6:	e7c2      	b.n	801845e <_printf_common+0x46>
 80184d8:	2030      	movs	r0, #48	; 0x30
 80184da:	18e1      	adds	r1, r4, r3
 80184dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80184e0:	1c5a      	adds	r2, r3, #1
 80184e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184e6:	4422      	add	r2, r4
 80184e8:	3302      	adds	r3, #2
 80184ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184ee:	e7c4      	b.n	801847a <_printf_common+0x62>
 80184f0:	2301      	movs	r3, #1
 80184f2:	4622      	mov	r2, r4
 80184f4:	4639      	mov	r1, r7
 80184f6:	4630      	mov	r0, r6
 80184f8:	47c0      	blx	r8
 80184fa:	3001      	adds	r0, #1
 80184fc:	d0e6      	beq.n	80184cc <_printf_common+0xb4>
 80184fe:	f109 0901 	add.w	r9, r9, #1
 8018502:	e7d8      	b.n	80184b6 <_printf_common+0x9e>

08018504 <_printf_i>:
 8018504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018508:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801850c:	460c      	mov	r4, r1
 801850e:	7e09      	ldrb	r1, [r1, #24]
 8018510:	b085      	sub	sp, #20
 8018512:	296e      	cmp	r1, #110	; 0x6e
 8018514:	4617      	mov	r7, r2
 8018516:	4606      	mov	r6, r0
 8018518:	4698      	mov	r8, r3
 801851a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801851c:	f000 80b3 	beq.w	8018686 <_printf_i+0x182>
 8018520:	d822      	bhi.n	8018568 <_printf_i+0x64>
 8018522:	2963      	cmp	r1, #99	; 0x63
 8018524:	d036      	beq.n	8018594 <_printf_i+0x90>
 8018526:	d80a      	bhi.n	801853e <_printf_i+0x3a>
 8018528:	2900      	cmp	r1, #0
 801852a:	f000 80b9 	beq.w	80186a0 <_printf_i+0x19c>
 801852e:	2958      	cmp	r1, #88	; 0x58
 8018530:	f000 8083 	beq.w	801863a <_printf_i+0x136>
 8018534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018538:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801853c:	e032      	b.n	80185a4 <_printf_i+0xa0>
 801853e:	2964      	cmp	r1, #100	; 0x64
 8018540:	d001      	beq.n	8018546 <_printf_i+0x42>
 8018542:	2969      	cmp	r1, #105	; 0x69
 8018544:	d1f6      	bne.n	8018534 <_printf_i+0x30>
 8018546:	6820      	ldr	r0, [r4, #0]
 8018548:	6813      	ldr	r3, [r2, #0]
 801854a:	0605      	lsls	r5, r0, #24
 801854c:	f103 0104 	add.w	r1, r3, #4
 8018550:	d52a      	bpl.n	80185a8 <_printf_i+0xa4>
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	6011      	str	r1, [r2, #0]
 8018556:	2b00      	cmp	r3, #0
 8018558:	da03      	bge.n	8018562 <_printf_i+0x5e>
 801855a:	222d      	movs	r2, #45	; 0x2d
 801855c:	425b      	negs	r3, r3
 801855e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018562:	486f      	ldr	r0, [pc, #444]	; (8018720 <_printf_i+0x21c>)
 8018564:	220a      	movs	r2, #10
 8018566:	e039      	b.n	80185dc <_printf_i+0xd8>
 8018568:	2973      	cmp	r1, #115	; 0x73
 801856a:	f000 809d 	beq.w	80186a8 <_printf_i+0x1a4>
 801856e:	d808      	bhi.n	8018582 <_printf_i+0x7e>
 8018570:	296f      	cmp	r1, #111	; 0x6f
 8018572:	d020      	beq.n	80185b6 <_printf_i+0xb2>
 8018574:	2970      	cmp	r1, #112	; 0x70
 8018576:	d1dd      	bne.n	8018534 <_printf_i+0x30>
 8018578:	6823      	ldr	r3, [r4, #0]
 801857a:	f043 0320 	orr.w	r3, r3, #32
 801857e:	6023      	str	r3, [r4, #0]
 8018580:	e003      	b.n	801858a <_printf_i+0x86>
 8018582:	2975      	cmp	r1, #117	; 0x75
 8018584:	d017      	beq.n	80185b6 <_printf_i+0xb2>
 8018586:	2978      	cmp	r1, #120	; 0x78
 8018588:	d1d4      	bne.n	8018534 <_printf_i+0x30>
 801858a:	2378      	movs	r3, #120	; 0x78
 801858c:	4865      	ldr	r0, [pc, #404]	; (8018724 <_printf_i+0x220>)
 801858e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018592:	e055      	b.n	8018640 <_printf_i+0x13c>
 8018594:	6813      	ldr	r3, [r2, #0]
 8018596:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801859a:	1d19      	adds	r1, r3, #4
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	6011      	str	r1, [r2, #0]
 80185a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80185a4:	2301      	movs	r3, #1
 80185a6:	e08c      	b.n	80186c2 <_printf_i+0x1be>
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80185ae:	6011      	str	r1, [r2, #0]
 80185b0:	bf18      	it	ne
 80185b2:	b21b      	sxthne	r3, r3
 80185b4:	e7cf      	b.n	8018556 <_printf_i+0x52>
 80185b6:	6813      	ldr	r3, [r2, #0]
 80185b8:	6825      	ldr	r5, [r4, #0]
 80185ba:	1d18      	adds	r0, r3, #4
 80185bc:	6010      	str	r0, [r2, #0]
 80185be:	0628      	lsls	r0, r5, #24
 80185c0:	d501      	bpl.n	80185c6 <_printf_i+0xc2>
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	e002      	b.n	80185cc <_printf_i+0xc8>
 80185c6:	0668      	lsls	r0, r5, #25
 80185c8:	d5fb      	bpl.n	80185c2 <_printf_i+0xbe>
 80185ca:	881b      	ldrh	r3, [r3, #0]
 80185cc:	296f      	cmp	r1, #111	; 0x6f
 80185ce:	bf14      	ite	ne
 80185d0:	220a      	movne	r2, #10
 80185d2:	2208      	moveq	r2, #8
 80185d4:	4852      	ldr	r0, [pc, #328]	; (8018720 <_printf_i+0x21c>)
 80185d6:	2100      	movs	r1, #0
 80185d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80185dc:	6865      	ldr	r5, [r4, #4]
 80185de:	2d00      	cmp	r5, #0
 80185e0:	60a5      	str	r5, [r4, #8]
 80185e2:	f2c0 8095 	blt.w	8018710 <_printf_i+0x20c>
 80185e6:	6821      	ldr	r1, [r4, #0]
 80185e8:	f021 0104 	bic.w	r1, r1, #4
 80185ec:	6021      	str	r1, [r4, #0]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d13d      	bne.n	801866e <_printf_i+0x16a>
 80185f2:	2d00      	cmp	r5, #0
 80185f4:	f040 808e 	bne.w	8018714 <_printf_i+0x210>
 80185f8:	4665      	mov	r5, ip
 80185fa:	2a08      	cmp	r2, #8
 80185fc:	d10b      	bne.n	8018616 <_printf_i+0x112>
 80185fe:	6823      	ldr	r3, [r4, #0]
 8018600:	07db      	lsls	r3, r3, #31
 8018602:	d508      	bpl.n	8018616 <_printf_i+0x112>
 8018604:	6923      	ldr	r3, [r4, #16]
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	429a      	cmp	r2, r3
 801860a:	bfde      	ittt	le
 801860c:	2330      	movle	r3, #48	; 0x30
 801860e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018612:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018616:	ebac 0305 	sub.w	r3, ip, r5
 801861a:	6123      	str	r3, [r4, #16]
 801861c:	f8cd 8000 	str.w	r8, [sp]
 8018620:	463b      	mov	r3, r7
 8018622:	aa03      	add	r2, sp, #12
 8018624:	4621      	mov	r1, r4
 8018626:	4630      	mov	r0, r6
 8018628:	f7ff fef6 	bl	8018418 <_printf_common>
 801862c:	3001      	adds	r0, #1
 801862e:	d14d      	bne.n	80186cc <_printf_i+0x1c8>
 8018630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018634:	b005      	add	sp, #20
 8018636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801863a:	4839      	ldr	r0, [pc, #228]	; (8018720 <_printf_i+0x21c>)
 801863c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018640:	6813      	ldr	r3, [r2, #0]
 8018642:	6821      	ldr	r1, [r4, #0]
 8018644:	1d1d      	adds	r5, r3, #4
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	6015      	str	r5, [r2, #0]
 801864a:	060a      	lsls	r2, r1, #24
 801864c:	d50b      	bpl.n	8018666 <_printf_i+0x162>
 801864e:	07ca      	lsls	r2, r1, #31
 8018650:	bf44      	itt	mi
 8018652:	f041 0120 	orrmi.w	r1, r1, #32
 8018656:	6021      	strmi	r1, [r4, #0]
 8018658:	b91b      	cbnz	r3, 8018662 <_printf_i+0x15e>
 801865a:	6822      	ldr	r2, [r4, #0]
 801865c:	f022 0220 	bic.w	r2, r2, #32
 8018660:	6022      	str	r2, [r4, #0]
 8018662:	2210      	movs	r2, #16
 8018664:	e7b7      	b.n	80185d6 <_printf_i+0xd2>
 8018666:	064d      	lsls	r5, r1, #25
 8018668:	bf48      	it	mi
 801866a:	b29b      	uxthmi	r3, r3
 801866c:	e7ef      	b.n	801864e <_printf_i+0x14a>
 801866e:	4665      	mov	r5, ip
 8018670:	fbb3 f1f2 	udiv	r1, r3, r2
 8018674:	fb02 3311 	mls	r3, r2, r1, r3
 8018678:	5cc3      	ldrb	r3, [r0, r3]
 801867a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801867e:	460b      	mov	r3, r1
 8018680:	2900      	cmp	r1, #0
 8018682:	d1f5      	bne.n	8018670 <_printf_i+0x16c>
 8018684:	e7b9      	b.n	80185fa <_printf_i+0xf6>
 8018686:	6813      	ldr	r3, [r2, #0]
 8018688:	6825      	ldr	r5, [r4, #0]
 801868a:	1d18      	adds	r0, r3, #4
 801868c:	6961      	ldr	r1, [r4, #20]
 801868e:	6010      	str	r0, [r2, #0]
 8018690:	0628      	lsls	r0, r5, #24
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	d501      	bpl.n	801869a <_printf_i+0x196>
 8018696:	6019      	str	r1, [r3, #0]
 8018698:	e002      	b.n	80186a0 <_printf_i+0x19c>
 801869a:	066a      	lsls	r2, r5, #25
 801869c:	d5fb      	bpl.n	8018696 <_printf_i+0x192>
 801869e:	8019      	strh	r1, [r3, #0]
 80186a0:	2300      	movs	r3, #0
 80186a2:	4665      	mov	r5, ip
 80186a4:	6123      	str	r3, [r4, #16]
 80186a6:	e7b9      	b.n	801861c <_printf_i+0x118>
 80186a8:	6813      	ldr	r3, [r2, #0]
 80186aa:	1d19      	adds	r1, r3, #4
 80186ac:	6011      	str	r1, [r2, #0]
 80186ae:	681d      	ldr	r5, [r3, #0]
 80186b0:	6862      	ldr	r2, [r4, #4]
 80186b2:	2100      	movs	r1, #0
 80186b4:	4628      	mov	r0, r5
 80186b6:	f000 f8d1 	bl	801885c <memchr>
 80186ba:	b108      	cbz	r0, 80186c0 <_printf_i+0x1bc>
 80186bc:	1b40      	subs	r0, r0, r5
 80186be:	6060      	str	r0, [r4, #4]
 80186c0:	6863      	ldr	r3, [r4, #4]
 80186c2:	6123      	str	r3, [r4, #16]
 80186c4:	2300      	movs	r3, #0
 80186c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186ca:	e7a7      	b.n	801861c <_printf_i+0x118>
 80186cc:	6923      	ldr	r3, [r4, #16]
 80186ce:	462a      	mov	r2, r5
 80186d0:	4639      	mov	r1, r7
 80186d2:	4630      	mov	r0, r6
 80186d4:	47c0      	blx	r8
 80186d6:	3001      	adds	r0, #1
 80186d8:	d0aa      	beq.n	8018630 <_printf_i+0x12c>
 80186da:	6823      	ldr	r3, [r4, #0]
 80186dc:	079b      	lsls	r3, r3, #30
 80186de:	d413      	bmi.n	8018708 <_printf_i+0x204>
 80186e0:	68e0      	ldr	r0, [r4, #12]
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	4298      	cmp	r0, r3
 80186e6:	bfb8      	it	lt
 80186e8:	4618      	movlt	r0, r3
 80186ea:	e7a3      	b.n	8018634 <_printf_i+0x130>
 80186ec:	2301      	movs	r3, #1
 80186ee:	464a      	mov	r2, r9
 80186f0:	4639      	mov	r1, r7
 80186f2:	4630      	mov	r0, r6
 80186f4:	47c0      	blx	r8
 80186f6:	3001      	adds	r0, #1
 80186f8:	d09a      	beq.n	8018630 <_printf_i+0x12c>
 80186fa:	3501      	adds	r5, #1
 80186fc:	68e3      	ldr	r3, [r4, #12]
 80186fe:	9a03      	ldr	r2, [sp, #12]
 8018700:	1a9b      	subs	r3, r3, r2
 8018702:	42ab      	cmp	r3, r5
 8018704:	dcf2      	bgt.n	80186ec <_printf_i+0x1e8>
 8018706:	e7eb      	b.n	80186e0 <_printf_i+0x1dc>
 8018708:	2500      	movs	r5, #0
 801870a:	f104 0919 	add.w	r9, r4, #25
 801870e:	e7f5      	b.n	80186fc <_printf_i+0x1f8>
 8018710:	2b00      	cmp	r3, #0
 8018712:	d1ac      	bne.n	801866e <_printf_i+0x16a>
 8018714:	7803      	ldrb	r3, [r0, #0]
 8018716:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801871a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801871e:	e76c      	b.n	80185fa <_printf_i+0xf6>
 8018720:	0801ad95 	.word	0x0801ad95
 8018724:	0801ada6 	.word	0x0801ada6

08018728 <__sread>:
 8018728:	b510      	push	{r4, lr}
 801872a:	460c      	mov	r4, r1
 801872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018730:	f000 f8a2 	bl	8018878 <_read_r>
 8018734:	2800      	cmp	r0, #0
 8018736:	bfab      	itete	ge
 8018738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801873a:	89a3      	ldrhlt	r3, [r4, #12]
 801873c:	181b      	addge	r3, r3, r0
 801873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018742:	bfac      	ite	ge
 8018744:	6563      	strge	r3, [r4, #84]	; 0x54
 8018746:	81a3      	strhlt	r3, [r4, #12]
 8018748:	bd10      	pop	{r4, pc}

0801874a <__swrite>:
 801874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801874e:	461f      	mov	r7, r3
 8018750:	898b      	ldrh	r3, [r1, #12]
 8018752:	4605      	mov	r5, r0
 8018754:	05db      	lsls	r3, r3, #23
 8018756:	460c      	mov	r4, r1
 8018758:	4616      	mov	r6, r2
 801875a:	d505      	bpl.n	8018768 <__swrite+0x1e>
 801875c:	2302      	movs	r3, #2
 801875e:	2200      	movs	r2, #0
 8018760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018764:	f000 f868 	bl	8018838 <_lseek_r>
 8018768:	89a3      	ldrh	r3, [r4, #12]
 801876a:	4632      	mov	r2, r6
 801876c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018770:	81a3      	strh	r3, [r4, #12]
 8018772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018776:	463b      	mov	r3, r7
 8018778:	4628      	mov	r0, r5
 801877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801877e:	f000 b817 	b.w	80187b0 <_write_r>

08018782 <__sseek>:
 8018782:	b510      	push	{r4, lr}
 8018784:	460c      	mov	r4, r1
 8018786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801878a:	f000 f855 	bl	8018838 <_lseek_r>
 801878e:	1c43      	adds	r3, r0, #1
 8018790:	89a3      	ldrh	r3, [r4, #12]
 8018792:	bf15      	itete	ne
 8018794:	6560      	strne	r0, [r4, #84]	; 0x54
 8018796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801879e:	81a3      	strheq	r3, [r4, #12]
 80187a0:	bf18      	it	ne
 80187a2:	81a3      	strhne	r3, [r4, #12]
 80187a4:	bd10      	pop	{r4, pc}

080187a6 <__sclose>:
 80187a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187aa:	f000 b813 	b.w	80187d4 <_close_r>
	...

080187b0 <_write_r>:
 80187b0:	b538      	push	{r3, r4, r5, lr}
 80187b2:	4605      	mov	r5, r0
 80187b4:	4608      	mov	r0, r1
 80187b6:	4611      	mov	r1, r2
 80187b8:	2200      	movs	r2, #0
 80187ba:	4c05      	ldr	r4, [pc, #20]	; (80187d0 <_write_r+0x20>)
 80187bc:	6022      	str	r2, [r4, #0]
 80187be:	461a      	mov	r2, r3
 80187c0:	f7e8 f952 	bl	8000a68 <_write>
 80187c4:	1c43      	adds	r3, r0, #1
 80187c6:	d102      	bne.n	80187ce <_write_r+0x1e>
 80187c8:	6823      	ldr	r3, [r4, #0]
 80187ca:	b103      	cbz	r3, 80187ce <_write_r+0x1e>
 80187cc:	602b      	str	r3, [r5, #0]
 80187ce:	bd38      	pop	{r3, r4, r5, pc}
 80187d0:	20009248 	.word	0x20009248

080187d4 <_close_r>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	2300      	movs	r3, #0
 80187d8:	4c05      	ldr	r4, [pc, #20]	; (80187f0 <_close_r+0x1c>)
 80187da:	4605      	mov	r5, r0
 80187dc:	4608      	mov	r0, r1
 80187de:	6023      	str	r3, [r4, #0]
 80187e0:	f7e8 fb77 	bl	8000ed2 <_close>
 80187e4:	1c43      	adds	r3, r0, #1
 80187e6:	d102      	bne.n	80187ee <_close_r+0x1a>
 80187e8:	6823      	ldr	r3, [r4, #0]
 80187ea:	b103      	cbz	r3, 80187ee <_close_r+0x1a>
 80187ec:	602b      	str	r3, [r5, #0]
 80187ee:	bd38      	pop	{r3, r4, r5, pc}
 80187f0:	20009248 	.word	0x20009248

080187f4 <_fstat_r>:
 80187f4:	b538      	push	{r3, r4, r5, lr}
 80187f6:	2300      	movs	r3, #0
 80187f8:	4c06      	ldr	r4, [pc, #24]	; (8018814 <_fstat_r+0x20>)
 80187fa:	4605      	mov	r5, r0
 80187fc:	4608      	mov	r0, r1
 80187fe:	4611      	mov	r1, r2
 8018800:	6023      	str	r3, [r4, #0]
 8018802:	f7e8 fb71 	bl	8000ee8 <_fstat>
 8018806:	1c43      	adds	r3, r0, #1
 8018808:	d102      	bne.n	8018810 <_fstat_r+0x1c>
 801880a:	6823      	ldr	r3, [r4, #0]
 801880c:	b103      	cbz	r3, 8018810 <_fstat_r+0x1c>
 801880e:	602b      	str	r3, [r5, #0]
 8018810:	bd38      	pop	{r3, r4, r5, pc}
 8018812:	bf00      	nop
 8018814:	20009248 	.word	0x20009248

08018818 <_isatty_r>:
 8018818:	b538      	push	{r3, r4, r5, lr}
 801881a:	2300      	movs	r3, #0
 801881c:	4c05      	ldr	r4, [pc, #20]	; (8018834 <_isatty_r+0x1c>)
 801881e:	4605      	mov	r5, r0
 8018820:	4608      	mov	r0, r1
 8018822:	6023      	str	r3, [r4, #0]
 8018824:	f7e8 fb6f 	bl	8000f06 <_isatty>
 8018828:	1c43      	adds	r3, r0, #1
 801882a:	d102      	bne.n	8018832 <_isatty_r+0x1a>
 801882c:	6823      	ldr	r3, [r4, #0]
 801882e:	b103      	cbz	r3, 8018832 <_isatty_r+0x1a>
 8018830:	602b      	str	r3, [r5, #0]
 8018832:	bd38      	pop	{r3, r4, r5, pc}
 8018834:	20009248 	.word	0x20009248

08018838 <_lseek_r>:
 8018838:	b538      	push	{r3, r4, r5, lr}
 801883a:	4605      	mov	r5, r0
 801883c:	4608      	mov	r0, r1
 801883e:	4611      	mov	r1, r2
 8018840:	2200      	movs	r2, #0
 8018842:	4c05      	ldr	r4, [pc, #20]	; (8018858 <_lseek_r+0x20>)
 8018844:	6022      	str	r2, [r4, #0]
 8018846:	461a      	mov	r2, r3
 8018848:	f7e8 fb67 	bl	8000f1a <_lseek>
 801884c:	1c43      	adds	r3, r0, #1
 801884e:	d102      	bne.n	8018856 <_lseek_r+0x1e>
 8018850:	6823      	ldr	r3, [r4, #0]
 8018852:	b103      	cbz	r3, 8018856 <_lseek_r+0x1e>
 8018854:	602b      	str	r3, [r5, #0]
 8018856:	bd38      	pop	{r3, r4, r5, pc}
 8018858:	20009248 	.word	0x20009248

0801885c <memchr>:
 801885c:	b510      	push	{r4, lr}
 801885e:	b2c9      	uxtb	r1, r1
 8018860:	4402      	add	r2, r0
 8018862:	4290      	cmp	r0, r2
 8018864:	4603      	mov	r3, r0
 8018866:	d101      	bne.n	801886c <memchr+0x10>
 8018868:	2300      	movs	r3, #0
 801886a:	e003      	b.n	8018874 <memchr+0x18>
 801886c:	781c      	ldrb	r4, [r3, #0]
 801886e:	3001      	adds	r0, #1
 8018870:	428c      	cmp	r4, r1
 8018872:	d1f6      	bne.n	8018862 <memchr+0x6>
 8018874:	4618      	mov	r0, r3
 8018876:	bd10      	pop	{r4, pc}

08018878 <_read_r>:
 8018878:	b538      	push	{r3, r4, r5, lr}
 801887a:	4605      	mov	r5, r0
 801887c:	4608      	mov	r0, r1
 801887e:	4611      	mov	r1, r2
 8018880:	2200      	movs	r2, #0
 8018882:	4c05      	ldr	r4, [pc, #20]	; (8018898 <_read_r+0x20>)
 8018884:	6022      	str	r2, [r4, #0]
 8018886:	461a      	mov	r2, r3
 8018888:	f7e8 fb06 	bl	8000e98 <_read>
 801888c:	1c43      	adds	r3, r0, #1
 801888e:	d102      	bne.n	8018896 <_read_r+0x1e>
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	b103      	cbz	r3, 8018896 <_read_r+0x1e>
 8018894:	602b      	str	r3, [r5, #0]
 8018896:	bd38      	pop	{r3, r4, r5, pc}
 8018898:	20009248 	.word	0x20009248

0801889c <_init>:
 801889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801889e:	bf00      	nop
 80188a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188a2:	bc08      	pop	{r3}
 80188a4:	469e      	mov	lr, r3
 80188a6:	4770      	bx	lr

080188a8 <_fini>:
 80188a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188aa:	bf00      	nop
 80188ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80188ae:	bc08      	pop	{r3}
 80188b0:	469e      	mov	lr, r3
 80188b2:	4770      	bx	lr
