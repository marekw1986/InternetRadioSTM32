
InternetRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a84  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ad9c  08017c74  08017c74  00027c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022a10  08022a10  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  08022a10  08022a10  00032a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022a18  08022a18  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022a18  08022a18  00032a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022a1c  08022a1c  00032a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08022a20  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000de54  2000026c  08022c8c  0004026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  2000e0c0  08022c8c  0004e0c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00091be9  00000000  00000000  00040295  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0001138b  00000000  00000000  000d1e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002ef3f  00000000  00000000  000e3209  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002eb8  00000000  00000000  00112148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004760  00000000  00000000  00115000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003ed49  00000000  00000000  00119760  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00049f71  00000000  00000000  001584a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ee489  00000000  00000000  001a241a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002908a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009948  00000000  00000000  00290920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000026c 	.word	0x2000026c
 800020c:	00000000 	.word	0x00000000
 8000210:	08017c5c 	.word	0x08017c5c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000270 	.word	0x20000270
 800022c:	08017c5c 	.word	0x08017c5c

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_ldivmod>:
 8000254:	b97b      	cbnz	r3, 8000276 <__aeabi_ldivmod+0x22>
 8000256:	b972      	cbnz	r2, 8000276 <__aeabi_ldivmod+0x22>
 8000258:	2900      	cmp	r1, #0
 800025a:	bfbe      	ittt	lt
 800025c:	2000      	movlt	r0, #0
 800025e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000262:	e006      	blt.n	8000272 <__aeabi_ldivmod+0x1e>
 8000264:	bf08      	it	eq
 8000266:	2800      	cmpeq	r0, #0
 8000268:	bf1c      	itt	ne
 800026a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800026e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000272:	f000 b9bf 	b.w	80005f4 <__aeabi_idiv0>
 8000276:	f1ad 0c08 	sub.w	ip, sp, #8
 800027a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027e:	2900      	cmp	r1, #0
 8000280:	db09      	blt.n	8000296 <__aeabi_ldivmod+0x42>
 8000282:	2b00      	cmp	r3, #0
 8000284:	db1a      	blt.n	80002bc <__aeabi_ldivmod+0x68>
 8000286:	f000 f84d 	bl	8000324 <__udivmoddi4>
 800028a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000292:	b004      	add	sp, #16
 8000294:	4770      	bx	lr
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	2b00      	cmp	r3, #0
 800029e:	db1b      	blt.n	80002d8 <__aeabi_ldivmod+0x84>
 80002a0:	f000 f840 	bl	8000324 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	4252      	negs	r2, r2
 80002b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ba:	4770      	bx	lr
 80002bc:	4252      	negs	r2, r2
 80002be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c2:	f000 f82f 	bl	8000324 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4240      	negs	r0, r0
 80002d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f821 	bl	8000324 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4252      	negs	r2, r2
 80002ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_uldivmod>:
 80002f4:	b953      	cbnz	r3, 800030c <__aeabi_uldivmod+0x18>
 80002f6:	b94a      	cbnz	r2, 800030c <__aeabi_uldivmod+0x18>
 80002f8:	2900      	cmp	r1, #0
 80002fa:	bf08      	it	eq
 80002fc:	2800      	cmpeq	r0, #0
 80002fe:	bf1c      	itt	ne
 8000300:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000304:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000308:	f000 b974 	b.w	80005f4 <__aeabi_idiv0>
 800030c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000310:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000314:	f000 f806 	bl	8000324 <__udivmoddi4>
 8000318:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000320:	b004      	add	sp, #16
 8000322:	4770      	bx	lr

08000324 <__udivmoddi4>:
 8000324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000328:	468c      	mov	ip, r1
 800032a:	4604      	mov	r4, r0
 800032c:	9e08      	ldr	r6, [sp, #32]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d14b      	bne.n	80003ca <__udivmoddi4+0xa6>
 8000332:	428a      	cmp	r2, r1
 8000334:	4615      	mov	r5, r2
 8000336:	d967      	bls.n	8000408 <__udivmoddi4+0xe4>
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	b14a      	cbz	r2, 8000352 <__udivmoddi4+0x2e>
 800033e:	f1c2 0720 	rsb	r7, r2, #32
 8000342:	fa01 f302 	lsl.w	r3, r1, r2
 8000346:	fa20 f707 	lsr.w	r7, r0, r7
 800034a:	4095      	lsls	r5, r2
 800034c:	ea47 0c03 	orr.w	ip, r7, r3
 8000350:	4094      	lsls	r4, r2
 8000352:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000356:	fbbc f7fe 	udiv	r7, ip, lr
 800035a:	fa1f f885 	uxth.w	r8, r5
 800035e:	fb0e c317 	mls	r3, lr, r7, ip
 8000362:	fb07 f908 	mul.w	r9, r7, r8
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800036c:	4599      	cmp	r9, r3
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x60>
 8000370:	18eb      	adds	r3, r5, r3
 8000372:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000376:	f080 811c 	bcs.w	80005b2 <__udivmoddi4+0x28e>
 800037a:	4599      	cmp	r9, r3
 800037c:	f240 8119 	bls.w	80005b2 <__udivmoddi4+0x28e>
 8000380:	3f02      	subs	r7, #2
 8000382:	442b      	add	r3, r5
 8000384:	eba3 0309 	sub.w	r3, r3, r9
 8000388:	fbb3 f0fe 	udiv	r0, r3, lr
 800038c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000390:	fb00 f108 	mul.w	r1, r0, r8
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039a:	42a1      	cmp	r1, r4
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x8e>
 800039e:	192c      	adds	r4, r5, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 8107 	bcs.w	80005b6 <__udivmoddi4+0x292>
 80003a8:	42a1      	cmp	r1, r4
 80003aa:	f240 8104 	bls.w	80005b6 <__udivmoddi4+0x292>
 80003ae:	3802      	subs	r0, #2
 80003b0:	442c      	add	r4, r5
 80003b2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b6:	2700      	movs	r7, #0
 80003b8:	1a64      	subs	r4, r4, r1
 80003ba:	b11e      	cbz	r6, 80003c4 <__udivmoddi4+0xa0>
 80003bc:	2300      	movs	r3, #0
 80003be:	40d4      	lsrs	r4, r2
 80003c0:	e9c6 4300 	strd	r4, r3, [r6]
 80003c4:	4639      	mov	r1, r7
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xbe>
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	f000 80ec 	beq.w	80005ac <__udivmoddi4+0x288>
 80003d4:	2700      	movs	r7, #0
 80003d6:	e9c6 0100 	strd	r0, r1, [r6]
 80003da:	4638      	mov	r0, r7
 80003dc:	4639      	mov	r1, r7
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f783 	clz	r7, r3
 80003e6:	2f00      	cmp	r7, #0
 80003e8:	d148      	bne.n	800047c <__udivmoddi4+0x158>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd0>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80fb 	bhi.w	80005ea <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469c      	mov	ip, r3
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa0>
 8000402:	e9c6 4c00 	strd	r4, ip, [r6]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa0>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xe8>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 808f 	bne.w	8000534 <__udivmoddi4+0x210>
 8000416:	2701      	movs	r7, #1
 8000418:	1b49      	subs	r1, r1, r5
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fa1f f985 	uxth.w	r9, r5
 8000422:	fbb1 fef8 	udiv	lr, r1, r8
 8000426:	fb08 111e 	mls	r1, r8, lr, r1
 800042a:	fb09 f00e 	mul.w	r0, r9, lr
 800042e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000432:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000436:	4298      	cmp	r0, r3
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x126>
 800043a:	18eb      	adds	r3, r5, r3
 800043c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000440:	d202      	bcs.n	8000448 <__udivmoddi4+0x124>
 8000442:	4298      	cmp	r0, r3
 8000444:	f200 80cd 	bhi.w	80005e2 <__udivmoddi4+0x2be>
 8000448:	468e      	mov	lr, r1
 800044a:	1a1b      	subs	r3, r3, r0
 800044c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000450:	fb08 3310 	mls	r3, r8, r0, r3
 8000454:	fb09 f900 	mul.w	r9, r9, r0
 8000458:	b2a4      	uxth	r4, r4
 800045a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045e:	45a1      	cmp	r9, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x14e>
 8000462:	192c      	adds	r4, r5, r4
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x14c>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f200 80b6 	bhi.w	80005dc <__udivmoddi4+0x2b8>
 8000470:	4618      	mov	r0, r3
 8000472:	eba4 0409 	sub.w	r4, r4, r9
 8000476:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800047a:	e79e      	b.n	80003ba <__udivmoddi4+0x96>
 800047c:	f1c7 0520 	rsb	r5, r7, #32
 8000480:	40bb      	lsls	r3, r7
 8000482:	fa22 fc05 	lsr.w	ip, r2, r5
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa21 f405 	lsr.w	r4, r1, r5
 800048e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000492:	fbb4 f9fe 	udiv	r9, r4, lr
 8000496:	fa1f f88c 	uxth.w	r8, ip
 800049a:	fb0e 4419 	mls	r4, lr, r9, r4
 800049e:	fa20 f305 	lsr.w	r3, r0, r5
 80004a2:	40b9      	lsls	r1, r7
 80004a4:	fb09 fa08 	mul.w	sl, r9, r8
 80004a8:	4319      	orrs	r1, r3
 80004aa:	0c0b      	lsrs	r3, r1, #16
 80004ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004b0:	45a2      	cmp	sl, r4
 80004b2:	fa02 f207 	lsl.w	r2, r2, r7
 80004b6:	fa00 f307 	lsl.w	r3, r0, r7
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b0>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2b4>
 80004c8:	45a2      	cmp	sl, r4
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2b4>
 80004ce:	f1a9 0902 	sub.w	r9, r9, #2
 80004d2:	4464      	add	r4, ip
 80004d4:	eba4 040a 	sub.w	r4, r4, sl
 80004d8:	fbb4 f0fe 	udiv	r0, r4, lr
 80004dc:	fb0e 4410 	mls	r4, lr, r0, r4
 80004e0:	fb00 fa08 	mul.w	sl, r0, r8
 80004e4:	b289      	uxth	r1, r1
 80004e6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x1dc>
 80004ee:	eb1c 0404 	adds.w	r4, ip, r4
 80004f2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f6:	d26b      	bcs.n	80005d0 <__udivmoddi4+0x2ac>
 80004f8:	45a2      	cmp	sl, r4
 80004fa:	d969      	bls.n	80005d0 <__udivmoddi4+0x2ac>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4464      	add	r4, ip
 8000500:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000504:	fba0 8902 	umull	r8, r9, r0, r2
 8000508:	eba4 040a 	sub.w	r4, r4, sl
 800050c:	454c      	cmp	r4, r9
 800050e:	4641      	mov	r1, r8
 8000510:	46ce      	mov	lr, r9
 8000512:	d354      	bcc.n	80005be <__udivmoddi4+0x29a>
 8000514:	d051      	beq.n	80005ba <__udivmoddi4+0x296>
 8000516:	2e00      	cmp	r6, #0
 8000518:	d069      	beq.n	80005ee <__udivmoddi4+0x2ca>
 800051a:	1a5a      	subs	r2, r3, r1
 800051c:	eb64 040e 	sbc.w	r4, r4, lr
 8000520:	fa04 f505 	lsl.w	r5, r4, r5
 8000524:	fa22 f307 	lsr.w	r3, r2, r7
 8000528:	40fc      	lsrs	r4, r7
 800052a:	431d      	orrs	r5, r3
 800052c:	e9c6 5400 	strd	r5, r4, [r6]
 8000530:	2700      	movs	r7, #0
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0xa0>
 8000534:	4095      	lsls	r5, r2
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	fa21 f003 	lsr.w	r0, r1, r3
 800053e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000542:	fbb0 f7f8 	udiv	r7, r0, r8
 8000546:	fa1f f985 	uxth.w	r9, r5
 800054a:	fb08 0017 	mls	r0, r8, r7, r0
 800054e:	fa24 f303 	lsr.w	r3, r4, r3
 8000552:	4091      	lsls	r1, r2
 8000554:	fb07 fc09 	mul.w	ip, r7, r9
 8000558:	430b      	orrs	r3, r1
 800055a:	0c19      	lsrs	r1, r3, #16
 800055c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000560:	458c      	cmp	ip, r1
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d907      	bls.n	8000578 <__udivmoddi4+0x254>
 8000568:	1869      	adds	r1, r5, r1
 800056a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800056e:	d231      	bcs.n	80005d4 <__udivmoddi4+0x2b0>
 8000570:	458c      	cmp	ip, r1
 8000572:	d92f      	bls.n	80005d4 <__udivmoddi4+0x2b0>
 8000574:	3f02      	subs	r7, #2
 8000576:	4429      	add	r1, r5
 8000578:	eba1 010c 	sub.w	r1, r1, ip
 800057c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000580:	fb08 1c10 	mls	ip, r8, r0, r1
 8000584:	fb00 fe09 	mul.w	lr, r0, r9
 8000588:	b299      	uxth	r1, r3
 800058a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800058e:	458e      	cmp	lr, r1
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x27e>
 8000592:	1869      	adds	r1, r5, r1
 8000594:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000598:	d218      	bcs.n	80005cc <__udivmoddi4+0x2a8>
 800059a:	458e      	cmp	lr, r1
 800059c:	d916      	bls.n	80005cc <__udivmoddi4+0x2a8>
 800059e:	3802      	subs	r0, #2
 80005a0:	4429      	add	r1, r5
 80005a2:	eba1 010e 	sub.w	r1, r1, lr
 80005a6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005aa:	e73a      	b.n	8000422 <__udivmoddi4+0xfe>
 80005ac:	4637      	mov	r7, r6
 80005ae:	4630      	mov	r0, r6
 80005b0:	e708      	b.n	80003c4 <__udivmoddi4+0xa0>
 80005b2:	460f      	mov	r7, r1
 80005b4:	e6e6      	b.n	8000384 <__udivmoddi4+0x60>
 80005b6:	4618      	mov	r0, r3
 80005b8:	e6fb      	b.n	80003b2 <__udivmoddi4+0x8e>
 80005ba:	4543      	cmp	r3, r8
 80005bc:	d2ab      	bcs.n	8000516 <__udivmoddi4+0x1f2>
 80005be:	ebb8 0102 	subs.w	r1, r8, r2
 80005c2:	eb69 020c 	sbc.w	r2, r9, ip
 80005c6:	3801      	subs	r0, #1
 80005c8:	4696      	mov	lr, r2
 80005ca:	e7a4      	b.n	8000516 <__udivmoddi4+0x1f2>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e7e8      	b.n	80005a2 <__udivmoddi4+0x27e>
 80005d0:	4608      	mov	r0, r1
 80005d2:	e795      	b.n	8000500 <__udivmoddi4+0x1dc>
 80005d4:	4607      	mov	r7, r0
 80005d6:	e7cf      	b.n	8000578 <__udivmoddi4+0x254>
 80005d8:	4681      	mov	r9, r0
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b0>
 80005dc:	3802      	subs	r0, #2
 80005de:	442c      	add	r4, r5
 80005e0:	e747      	b.n	8000472 <__udivmoddi4+0x14e>
 80005e2:	f1ae 0e02 	sub.w	lr, lr, #2
 80005e6:	442b      	add	r3, r5
 80005e8:	e72f      	b.n	800044a <__udivmoddi4+0x126>
 80005ea:	4638      	mov	r0, r7
 80005ec:	e707      	b.n	80003fe <__udivmoddi4+0xda>
 80005ee:	4637      	mov	r7, r6
 80005f0:	e6e8      	b.n	80003c4 <__udivmoddi4+0xa0>
 80005f2:	bf00      	nop

080005f4 <__aeabi_idiv0>:
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <button_init>:


void button_init(button_t *btn, GPIO_TypeDef *port, uint16_t pin, void (*push_proc)(void), void (*long_proc)(void)) {
    btn->port = port;
    btn->pin = pin;
    btn->push_proc = push_proc;
 80005f8:	6103      	str	r3, [r0, #16]
    btn->long_proc = long_proc;
 80005fa:	9b00      	ldr	r3, [sp, #0]
    btn->port = port;
 80005fc:	6001      	str	r1, [r0, #0]
    btn->long_proc = long_proc;
 80005fe:	6143      	str	r3, [r0, #20]
    btn->timer = 0;
 8000600:	2300      	movs	r3, #0
    btn->pin = pin;
 8000602:	8082      	strh	r2, [r0, #4]
    btn->timer = 0;
 8000604:	6083      	str	r3, [r0, #8]
    btn->state = 0;
 8000606:	7303      	strb	r3, [r0, #12]
}
 8000608:	4770      	bx	lr

0800060a <button_handle>:


void button_handle(button_t *btn) {
 800060a:	b538      	push	{r3, r4, r5, lr}
    uint8_t pressed;
    enum {IDLE, DEBOUNCE, WAIT_LONG, WAIT_RELEASE};

    pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 800060c:	8881      	ldrh	r1, [r0, #4]
void button_handle(button_t *btn) {
 800060e:	4604      	mov	r4, r0
    pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000610:	6800      	ldr	r0, [r0, #0]
 8000612:	f002 fc89 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000616:	7b23      	ldrb	r3, [r4, #12]
    if(pressed && !(btn->state)) {
 8000618:	4605      	mov	r5, r0
 800061a:	b960      	cbnz	r0, 8000636 <button_handle+0x2c>
 800061c:	b95b      	cbnz	r3, 8000636 <button_handle+0x2c>
        btn->state = DEBOUNCE;
 800061e:	2301      	movs	r3, #1
        btn->timer = HAL_GetTick();
    }
    else if (btn->state) {
        if(pressed && (btn->state)==DEBOUNCE && ((uint32_t)(HAL_GetTick()-(btn->timer)) >= 20)) {
            btn->state = WAIT_LONG;
 8000620:	7323      	strb	r3, [r4, #12]
            btn->timer = HAL_GetTick();
 8000622:	f001 fe59 	bl	80022d8 <HAL_GetTick>
 8000626:	60a0      	str	r0, [r4, #8]
            if (btn->long_proc) (btn->long_proc)();
            btn->state = WAIT_RELEASE;
            btn->timer = 0;
        }
    }
    if ((btn->state)==WAIT_RELEASE && !pressed) btn->state = IDLE;
 8000628:	7b23      	ldrb	r3, [r4, #12]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d102      	bne.n	8000634 <button_handle+0x2a>
 800062e:	b10d      	cbz	r5, 8000634 <button_handle+0x2a>
 8000630:	2300      	movs	r3, #0
 8000632:	7323      	strb	r3, [r4, #12]
}
 8000634:	bd38      	pop	{r3, r4, r5, pc}
    else if (btn->state) {
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0fc      	beq.n	8000634 <button_handle+0x2a>
        if(pressed && (btn->state)==DEBOUNCE && ((uint32_t)(HAL_GetTick()-(btn->timer)) >= 20)) {
 800063a:	b94d      	cbnz	r5, 8000650 <button_handle+0x46>
 800063c:	2b01      	cmp	r3, #1
 800063e:	d10f      	bne.n	8000660 <button_handle+0x56>
 8000640:	f001 fe4a 	bl	80022d8 <HAL_GetTick>
 8000644:	68a3      	ldr	r3, [r4, #8]
 8000646:	1ac0      	subs	r0, r0, r3
 8000648:	2813      	cmp	r0, #19
 800064a:	d909      	bls.n	8000660 <button_handle+0x56>
            btn->state = WAIT_LONG;
 800064c:	2302      	movs	r3, #2
 800064e:	e7e7      	b.n	8000620 <button_handle+0x16>
        else if (!pressed && (btn->state)==WAIT_LONG) {
 8000650:	2b02      	cmp	r3, #2
 8000652:	d1e9      	bne.n	8000628 <button_handle+0x1e>
            if (btn->push_proc) (btn->push_proc)();
 8000654:	6923      	ldr	r3, [r4, #16]
 8000656:	b103      	cbz	r3, 800065a <button_handle+0x50>
 8000658:	4798      	blx	r3
            btn->state = IDLE;
 800065a:	2300      	movs	r3, #0
 800065c:	7323      	strb	r3, [r4, #12]
 800065e:	e7e3      	b.n	8000628 <button_handle+0x1e>
        else if (pressed && (btn->state)==WAIT_LONG && ((uint32_t)(HAL_GetTick()-(btn->timer)) >= 2000)) {
 8000660:	7b23      	ldrb	r3, [r4, #12]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d1e0      	bne.n	8000628 <button_handle+0x1e>
 8000666:	f001 fe37 	bl	80022d8 <HAL_GetTick>
 800066a:	68a3      	ldr	r3, [r4, #8]
 800066c:	1ac0      	subs	r0, r0, r3
 800066e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8000672:	d3d9      	bcc.n	8000628 <button_handle+0x1e>
            if (btn->long_proc) (btn->long_proc)();
 8000674:	6963      	ldr	r3, [r4, #20]
 8000676:	b103      	cbz	r3, 800067a <button_handle+0x70>
 8000678:	4798      	blx	r3
            btn->state = WAIT_RELEASE;
 800067a:	2303      	movs	r3, #3
 800067c:	7323      	strb	r3, [r4, #12]
            btn->timer = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60a3      	str	r3, [r4, #8]
 8000682:	e7d1      	b.n	8000628 <button_handle+0x1e>

08000684 <finalize_http_parsing>:
    http_code = 0;
    memset(working_buffer, 0x00, sizeof(working_buffer));
}

static http_res_t finalize_http_parsing(uri_t* uri) {
    switch(http_code) {
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <finalize_http_parsing+0x38>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	2bc8      	cmp	r3, #200	; 0xc8
 800068a:	d015      	beq.n	80006b8 <finalize_http_parsing+0x34>
 800068c:	d304      	bcc.n	8000698 <finalize_http_parsing+0x14>
 800068e:	f46f 7296 	mvn.w	r2, #300	; 0x12c
 8000692:	4413      	add	r3, r2
 8000694:	2b01      	cmp	r3, #1
 8000696:	d901      	bls.n	800069c <finalize_http_parsing+0x18>
        }
        return HTTP_HEADER_REDIRECTED;
        break;

        default:
        return HTTP_HEADER_ERROR;
 8000698:	2000      	movs	r0, #0
 800069a:	4770      	bx	lr
        if ( (strlen(uri->server) == 0) || (strlen(uri->file) == 0) || (uri->port == 0) ) {
 800069c:	7803      	ldrb	r3, [r0, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0fa      	beq.n	8000698 <finalize_http_parsing+0x14>
 80006a2:	f890 3101 	ldrb.w	r3, [r0, #257]	; 0x101
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f6      	beq.n	8000698 <finalize_http_parsing+0x14>
 80006aa:	f8b0 3204 	ldrh.w	r3, [r0, #516]	; 0x204
 80006ae:	2b00      	cmp	r3, #0
        return HTTP_HEADER_REDIRECTED;
 80006b0:	bf0c      	ite	eq
 80006b2:	2000      	moveq	r0, #0
 80006b4:	2003      	movne	r0, #3
 80006b6:	4770      	bx	lr
        return HTTP_HEADER_OK;
 80006b8:	2002      	movs	r0, #2
 80006ba:	4770      	bx	lr
 80006bc:	20000288 	.word	0x20000288

080006c0 <prepare_http_parser>:
    http_code = 0;
 80006c0:	2100      	movs	r1, #0
 80006c2:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <prepare_http_parser+0x10>)
    memset(working_buffer, 0x00, sizeof(working_buffer));
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <prepare_http_parser+0x14>)
    http_code = 0;
 80006ca:	8019      	strh	r1, [r3, #0]
    memset(working_buffer, 0x00, sizeof(working_buffer));
 80006cc:	f016 b82e 	b.w	801672c <memset>
 80006d0:	20000288 	.word	0x20000288
 80006d4:	20005118 	.word	0x20005118

080006d8 <parse_url>:

    return HTTP_HEADER_IN_PROGRESS;
}


uint8_t parse_url (const char* url, size_t len, uri_t* uri) {
 80006d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	4680      	mov	r8, r0
 80006de:	4689      	mov	r9, r1
	const char* rest;
	const char* port;
	size_t serverlen = 0;
    size_t filelen = 0;

	if (uri == NULL) return 0;
 80006e0:	4614      	mov	r4, r2
 80006e2:	b91a      	cbnz	r2, 80006ec <parse_url+0x14>
		rest = tok+1;
		if (rest >= url+len) return 0;
		//printf("Wykryto dwukropek: %s\r\n", rest);
		tok = strchr(rest, '/');
		if (tok) {
			if (tok >= url+len) return 0;
 80006e4:	2000      	movs	r0, #0
	filelen = strlen(rest);
    if (filelen > (sizeof(uri->file)+1)) { return 0; }
	memcpy(uri->file, rest, filelen);
    uri->file[filelen] = '\0';
	return 1;
}
 80006e6:	b002      	add	sp, #8
 80006e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tok = strstr(url, "://");
 80006ec:	4943      	ldr	r1, [pc, #268]	; (80007fc <parse_url+0x124>)
 80006ee:	f016 faf5 	bl	8016cdc <strstr>
	if (tok) {
 80006f2:	4605      	mov	r5, r0
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d06c      	beq.n	80007d2 <parse_url+0xfa>
		if (tok >= url+len) return 0;
 80006f8:	eb08 0609 	add.w	r6, r8, r9
 80006fc:	4286      	cmp	r6, r0
 80006fe:	d9f1      	bls.n	80006e4 <parse_url+0xc>
		if (strncasecmp(url, "https", 5) == 0) {    //HTTPS
 8000700:	2205      	movs	r2, #5
 8000702:	493f      	ldr	r1, [pc, #252]	; (8000800 <parse_url+0x128>)
 8000704:	4640      	mov	r0, r8
 8000706:	f016 fa89 	bl	8016c1c <strncasecmp>
 800070a:	2800      	cmp	r0, #0
 800070c:	d156      	bne.n	80007bc <parse_url+0xe4>
			uri->https = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
			uri->port = 443;
 8000714:	f240 13bb 	movw	r3, #443	; 0x1bb
		rest = tok+3;
 8000718:	3503      	adds	r5, #3
		if (rest >= url+len) return 0;
 800071a:	42ae      	cmp	r6, r5
			uri->port = 80;
 800071c:	f8a4 3204 	strh.w	r3, [r4, #516]	; 0x204
		if (rest >= url+len) return 0;
 8000720:	d9e0      	bls.n	80006e4 <parse_url+0xc>
	tok = strchr(serverbegin, ':');
 8000722:	213a      	movs	r1, #58	; 0x3a
 8000724:	4628      	mov	r0, r5
 8000726:	f016 fa64 	bl	8016bf2 <strchr>
	if (tok) {
 800072a:	4607      	mov	r7, r0
 800072c:	2800      	cmp	r0, #0
 800072e:	d057      	beq.n	80007e0 <parse_url+0x108>
		if (tok >= url+len) return 0;
 8000730:	44c8      	add	r8, r9
 8000732:	4580      	cmp	r8, r0
 8000734:	d9d6      	bls.n	80006e4 <parse_url+0xc>
		rest = tok+1;
 8000736:	f100 0a01 	add.w	sl, r0, #1
		if (rest >= url+len) return 0;
 800073a:	45d0      	cmp	r8, sl
 800073c:	d9d2      	bls.n	80006e4 <parse_url+0xc>
		tok = strchr(rest, '/');
 800073e:	212f      	movs	r1, #47	; 0x2f
 8000740:	4650      	mov	r0, sl
 8000742:	f016 fa56 	bl	8016bf2 <strchr>
		if (tok) {
 8000746:	4606      	mov	r6, r0
 8000748:	2800      	cmp	r0, #0
 800074a:	d0cb      	beq.n	80006e4 <parse_url+0xc>
			if (tok >= url+len) return 0;
 800074c:	4580      	cmp	r8, r0
 800074e:	d9c9      	bls.n	80006e4 <parse_url+0xc>
            size_t portlen = tok-port;
 8000750:	eba0 080a 	sub.w	r8, r0, sl
            if (portlen > 5) {
 8000754:	f1b8 0f05 	cmp.w	r8, #5
 8000758:	d8c4      	bhi.n	80006e4 <parse_url+0xc>
            memcpy((char*)tmp, (const char*)port, portlen);
 800075a:	4642      	mov	r2, r8
 800075c:	4651      	mov	r1, sl
 800075e:	4668      	mov	r0, sp
 8000760:	f015 ffd9 	bl	8016716 <memcpy>
            tmp[portlen] = '\0';
 8000764:	ab02      	add	r3, sp, #8
 8000766:	4498      	add	r8, r3
 8000768:	2300      	movs	r3, #0
			uri->port = atoi(tmp);
 800076a:	4668      	mov	r0, sp
            tmp[portlen] = '\0';
 800076c:	f808 3c08 	strb.w	r3, [r8, #-8]
			uri->port = atoi(tmp);
 8000770:	f015 fe14 	bl	801639c <atoi>
 8000774:	b280      	uxth	r0, r0
 8000776:	f8a4 0204 	strh.w	r0, [r4, #516]	; 0x204
			if (uri->port == 0) {
 800077a:	2800      	cmp	r0, #0
 800077c:	d0b2      	beq.n	80006e4 <parse_url+0xc>
        serverlen = tok-serverbegin;
 800077e:	1b7f      	subs	r7, r7, r5
    if (serverlen > (sizeof(uri->server)-1)) { return 0; }
 8000780:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8000784:	d8ae      	bhi.n	80006e4 <parse_url+0xc>
    uri->server[serverlen] = '\0';
 8000786:	f04f 0800 	mov.w	r8, #0
	memcpy(uri->server, serverbegin, serverlen);
 800078a:	4629      	mov	r1, r5
 800078c:	463a      	mov	r2, r7
 800078e:	4620      	mov	r0, r4
 8000790:	f015 ffc1 	bl	8016716 <memcpy>
    uri->server[serverlen] = '\0';
 8000794:	f804 8007 	strb.w	r8, [r4, r7]
	filelen = strlen(rest);
 8000798:	4630      	mov	r0, r6
 800079a:	f7ff fd53 	bl	8000244 <strlen>
    if (filelen > (sizeof(uri->file)+1)) { return 0; }
 800079e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
	filelen = strlen(rest);
 80007a2:	4605      	mov	r5, r0
    if (filelen > (sizeof(uri->file)+1)) { return 0; }
 80007a4:	d89e      	bhi.n	80006e4 <parse_url+0xc>
	memcpy(uri->file, rest, filelen);
 80007a6:	4602      	mov	r2, r0
 80007a8:	4631      	mov	r1, r6
 80007aa:	f204 1001 	addw	r0, r4, #257	; 0x101
    uri->file[filelen] = '\0';
 80007ae:	442c      	add	r4, r5
	memcpy(uri->file, rest, filelen);
 80007b0:	f015 ffb1 	bl	8016716 <memcpy>
    uri->file[filelen] = '\0';
 80007b4:	f884 8101 	strb.w	r8, [r4, #257]	; 0x101
	return 1;
 80007b8:	2001      	movs	r0, #1
 80007ba:	e794      	b.n	80006e6 <parse_url+0xe>
		else if (strncasecmp(url, "http", 4) == 0) {    //plain old HTTP
 80007bc:	2204      	movs	r2, #4
 80007be:	4911      	ldr	r1, [pc, #68]	; (8000804 <parse_url+0x12c>)
 80007c0:	4640      	mov	r0, r8
 80007c2:	f016 fa2b 	bl	8016c1c <strncasecmp>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d18c      	bne.n	80006e4 <parse_url+0xc>
			uri->https = 0;
 80007ca:	f884 0202 	strb.w	r0, [r4, #514]	; 0x202
			uri->port = 80;
 80007ce:	2350      	movs	r3, #80	; 0x50
 80007d0:	e7a2      	b.n	8000718 <parse_url+0x40>
		uri->port = 80;
 80007d2:	2350      	movs	r3, #80	; 0x50
		uri->https = 0;
 80007d4:	f884 0202 	strb.w	r0, [r4, #514]	; 0x202
		uri->port = 80;
 80007d8:	f8a4 3204 	strh.w	r3, [r4, #516]	; 0x204
 80007dc:	4645      	mov	r5, r8
 80007de:	e7a0      	b.n	8000722 <parse_url+0x4a>
		tok = strchr(serverbegin, '/');
 80007e0:	212f      	movs	r1, #47	; 0x2f
 80007e2:	4628      	mov	r0, r5
 80007e4:	f016 fa05 	bl	8016bf2 <strchr>
		if (tok) {
 80007e8:	4606      	mov	r6, r0
 80007ea:	2800      	cmp	r0, #0
 80007ec:	f43f af7a 	beq.w	80006e4 <parse_url+0xc>
			if (tok >= url+len) { return 0; }
 80007f0:	44c8      	add	r8, r9
 80007f2:	4540      	cmp	r0, r8
 80007f4:	f4bf af76 	bcs.w	80006e4 <parse_url+0xc>
            serverlen = tok-serverbegin;
 80007f8:	1b47      	subs	r7, r0, r5
 80007fa:	e7c1      	b.n	8000780 <parse_url+0xa8>
 80007fc:	08017df5 	.word	0x08017df5
 8000800:	08017df9 	.word	0x08017df9
 8000804:	08017dff 	.word	0x08017dff

08000808 <parse_http_headers>:
http_res_t parse_http_headers(char* str, size_t len, uri_t* uri) {
 8000808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800080c:	4617      	mov	r7, r2
	if (str == NULL) { return HTTP_HEADER_ERROR; }
 800080e:	4605      	mov	r5, r0
 8000810:	b910      	cbnz	r0, 8000818 <parse_http_headers+0x10>
 8000812:	2000      	movs	r0, #0
}
 8000814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    strncat(working_buffer, str, len);
 8000818:	4c37      	ldr	r4, [pc, #220]	; (80008f8 <parse_http_headers+0xf0>)
 800081a:	460a      	mov	r2, r1
 800081c:	4601      	mov	r1, r0
 800081e:	4620      	mov	r0, r4
 8000820:	f016 fa21 	bl	8016c66 <strncat>
    tok = strstr(working_buffer, "\r\n");
 8000824:	4935      	ldr	r1, [pc, #212]	; (80008fc <parse_http_headers+0xf4>)
 8000826:	4620      	mov	r0, r4
 8000828:	f016 fa58 	bl	8016cdc <strstr>
    if (!tok) {
 800082c:	4606      	mov	r6, r0
 800082e:	b908      	cbnz	r0, 8000834 <parse_http_headers+0x2c>
        return HTTP_HEADER_IN_PROGRESS;
 8000830:	2001      	movs	r0, #1
 8000832:	e7ef      	b.n	8000814 <parse_http_headers+0xc>
    if (tok > working_buffer+sizeof(working_buffer)-1) { return HTTP_HEADER_ERROR; }
 8000834:	f204 13ff 	addw	r3, r4, #511	; 0x1ff
 8000838:	4298      	cmp	r0, r3
 800083a:	d8ea      	bhi.n	8000812 <parse_http_headers+0xa>
    tok[0] = '\0';
 800083c:	f04f 0800 	mov.w	r8, #0
 8000840:	f880 8000 	strb.w	r8, [r0]
    if (strlen(working_buffer) == 0) {
 8000844:	7823      	ldrb	r3, [r4, #0]
    tok[1] = '\0';
 8000846:	f880 8001 	strb.w	r8, [r0, #1]
    if (strlen(working_buffer) == 0) {
 800084a:	b923      	cbnz	r3, 8000856 <parse_http_headers+0x4e>
        return finalize_http_parsing(uri);
 800084c:	4638      	mov	r0, r7
}
 800084e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        return finalize_http_parsing(uri);
 8000852:	f7ff bf17 	b.w	8000684 <finalize_http_parsing>
	if (http_code == 0) {
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <parse_http_headers+0xf8>)
 8000858:	881a      	ldrh	r2, [r3, #0]
 800085a:	4699      	mov	r9, r3
 800085c:	bb6a      	cbnz	r2, 80008ba <parse_http_headers+0xb2>
        if ( (strncmp(working_buffer, "HTTP/", 5) == 0) || (strncmp(str, "ICY", 3) == 0) ) {
 800085e:	2205      	movs	r2, #5
 8000860:	4928      	ldr	r1, [pc, #160]	; (8000904 <parse_http_headers+0xfc>)
 8000862:	4620      	mov	r0, r4
 8000864:	f016 fa13 	bl	8016c8e <strncmp>
 8000868:	b128      	cbz	r0, 8000876 <parse_http_headers+0x6e>
 800086a:	2203      	movs	r2, #3
 800086c:	4926      	ldr	r1, [pc, #152]	; (8000908 <parse_http_headers+0x100>)
 800086e:	4628      	mov	r0, r5
 8000870:	f016 fa0d 	bl	8016c8e <strncmp>
 8000874:	b998      	cbnz	r0, 800089e <parse_http_headers+0x96>
            tok = strchr(working_buffer, ' ');
 8000876:	2120      	movs	r1, #32
 8000878:	481f      	ldr	r0, [pc, #124]	; (80008f8 <parse_http_headers+0xf0>)
 800087a:	f016 f9ba 	bl	8016bf2 <strchr>
            if (tok == NULL) { return HTTP_HEADER_ERROR; }
 800087e:	2800      	cmp	r0, #0
 8000880:	d0c7      	beq.n	8000812 <parse_http_headers+0xa>
            http_code = atoi(tok);
 8000882:	3001      	adds	r0, #1
 8000884:	f015 fd8a 	bl	801639c <atoi>
 8000888:	b280      	uxth	r0, r0
 800088a:	f8a9 0000 	strh.w	r0, [r9]
            if (http_code == 0) { return HTTP_HEADER_ERROR; }
 800088e:	2800      	cmp	r0, #0
 8000890:	d0bf      	beq.n	8000812 <parse_http_headers+0xa>
            memset(uri, 0x00, sizeof(uri_t));
 8000892:	f240 2206 	movw	r2, #518	; 0x206
 8000896:	2100      	movs	r1, #0
 8000898:	4638      	mov	r0, r7
 800089a:	f015 ff47 	bl	801672c <memset>
    strncpy(working_buffer, next_line, sizeof(working_buffer)-1);
 800089e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80008a2:	1cb1      	adds	r1, r6, #2
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <parse_http_headers+0xf0>)
 80008a6:	f016 fa04 	bl	8016cb2 <strncpy>
    if (memcmp(working_buffer, "\r\n", 2) == 0) {
 80008aa:	2202      	movs	r2, #2
 80008ac:	4913      	ldr	r1, [pc, #76]	; (80008fc <parse_http_headers+0xf4>)
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <parse_http_headers+0xf0>)
 80008b0:	f015 ff22 	bl	80166f8 <memcmp>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d0c9      	beq.n	800084c <parse_http_headers+0x44>
 80008b8:	e7ba      	b.n	8000830 <parse_http_headers+0x28>
    tok = strstr(line, ": ");
 80008ba:	4914      	ldr	r1, [pc, #80]	; (800090c <parse_http_headers+0x104>)
 80008bc:	4620      	mov	r0, r4
 80008be:	f016 fa0d 	bl	8016cdc <strstr>
    if (tok == NULL) { return; }    //Delimiter not found
 80008c2:	4605      	mov	r5, r0
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d0ea      	beq.n	800089e <parse_http_headers+0x96>
    tok[0] = '\0';
 80008c8:	f880 8000 	strb.w	r8, [r0]
    tok[1] = '\0';
 80008cc:	f880 8001 	strb.w	r8, [r0, #1]
    if (strncmp(line, "Location", strlen(line)) == 0) {
 80008d0:	4620      	mov	r0, r4
 80008d2:	f7ff fcb7 	bl	8000244 <strlen>
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <parse_http_headers+0x108>)
 80008d8:	4602      	mov	r2, r0
 80008da:	4620      	mov	r0, r4
 80008dc:	f016 f9d7 	bl	8016c8e <strncmp>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d1dc      	bne.n	800089e <parse_http_headers+0x96>
    tok += 2;
 80008e4:	3502      	adds	r5, #2
        parse_url(tok, strlen(tok), uri);
 80008e6:	4628      	mov	r0, r5
 80008e8:	f7ff fcac 	bl	8000244 <strlen>
 80008ec:	463a      	mov	r2, r7
 80008ee:	4601      	mov	r1, r0
 80008f0:	4628      	mov	r0, r5
 80008f2:	f7ff fef1 	bl	80006d8 <parse_url>
 80008f6:	e7d2      	b.n	800089e <parse_http_headers+0x96>
 80008f8:	20005118 	.word	0x20005118
 80008fc:	080181b0 	.word	0x080181b0
 8000900:	20000288 	.word	0x20000288
 8000904:	08017de2 	.word	0x08017de2
 8000908:	08017de8 	.word	0x08017de8
 800090c:	080184e6 	.word	0x080184e6
 8000910:	08017dec 	.word	0x08017dec

08000914 <parse_stream_data_line>:
    }
    f_close(&file);
    return result;
}

uint8_t parse_stream_data_line(char* line, size_t line_len, char* stream_name, size_t stream_name_len, char* stream_url, size_t stream_url_len) {
 8000914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000918:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800091a:	4605      	mov	r5, r0
 800091c:	468a      	mov	sl, r1
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
    int line_number = atoi(line);
 8000922:	f015 fd3b 	bl	801639c <atoi>

    if (line_number > 0) {
 8000926:	1e06      	subs	r6, r0, #0
 8000928:	dc02      	bgt.n	8000930 <parse_stream_data_line+0x1c>
                }
                return line_number;
            }
        }
    }
    return 0;
 800092a:	2000      	movs	r0, #0
}
 800092c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        char* rest = strstr(line, " : ");
 8000930:	4914      	ldr	r1, [pc, #80]	; (8000984 <parse_stream_data_line+0x70>)
 8000932:	4628      	mov	r0, r5
 8000934:	f016 f9d2 	bl	8016cdc <strstr>
        if (rest) {
 8000938:	2800      	cmp	r0, #0
 800093a:	d0f6      	beq.n	800092a <parse_stream_data_line+0x16>
            *rest = '\0';
 800093c:	4604      	mov	r4, r0
 800093e:	f04f 0b00 	mov.w	fp, #0
            if (rest >= line+line_len) { return 0; }
 8000942:	44aa      	add	sl, r5
            *rest = '\0';
 8000944:	f804 bb03 	strb.w	fp, [r4], #3
            if (rest >= line+line_len) { return 0; }
 8000948:	45a2      	cmp	sl, r4
 800094a:	d9ee      	bls.n	800092a <parse_stream_data_line+0x16>
            char* url = strstr(rest, " : ");
 800094c:	490d      	ldr	r1, [pc, #52]	; (8000984 <parse_stream_data_line+0x70>)
 800094e:	4620      	mov	r0, r4
 8000950:	f016 f9c4 	bl	8016cdc <strstr>
            if (url) {
 8000954:	2800      	cmp	r0, #0
 8000956:	d0e8      	beq.n	800092a <parse_stream_data_line+0x16>
                *url = '\0';
 8000958:	4605      	mov	r5, r0
 800095a:	f805 bb03 	strb.w	fp, [r5], #3
                if (url >= line+line_len) { return 0; }
 800095e:	45aa      	cmp	sl, r5
 8000960:	d9e3      	bls.n	800092a <parse_stream_data_line+0x16>
                if (stream_name) {
 8000962:	f1b8 0f00 	cmp.w	r8, #0
 8000966:	d004      	beq.n	8000972 <parse_stream_data_line+0x5e>
                    strncpy(stream_name, rest, stream_name_len);
 8000968:	464a      	mov	r2, r9
 800096a:	4621      	mov	r1, r4
 800096c:	4640      	mov	r0, r8
 800096e:	f016 f9a0 	bl	8016cb2 <strncpy>
                if (stream_url) {
 8000972:	b127      	cbz	r7, 800097e <parse_stream_data_line+0x6a>
                    strncpy(stream_url, url, stream_url_len);
 8000974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000976:	4629      	mov	r1, r5
 8000978:	4638      	mov	r0, r7
 800097a:	f016 f99a 	bl	8016cb2 <strncpy>
                return line_number;
 800097e:	b2f0      	uxtb	r0, r6
 8000980:	e7d4      	b.n	800092c <parse_stream_data_line+0x18>
 8000982:	bf00      	nop
 8000984:	080184e5 	.word	0x080184e5

08000988 <get_station_url_from_file>:
char* get_station_url_from_file(uint16_t number, char* stream_name, size_t stream_name_len) {
 8000988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800098c:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000990:	4605      	mov	r5, r0
 8000992:	460e      	mov	r6, r1
 8000994:	4617      	mov	r7, r2
    res = f_open(&file, "1:/radio.txt", FA_READ);
 8000996:	4923      	ldr	r1, [pc, #140]	; (8000a24 <get_station_url_from_file+0x9c>)
 8000998:	2201      	movs	r2, #1
 800099a:	a802      	add	r0, sp, #8
 800099c:	f008 facc 	bl	8008f38 <f_open>
    if (res != FR_OK) {
 80009a0:	4601      	mov	r1, r0
 80009a2:	b980      	cbnz	r0, 80009c6 <get_station_url_from_file+0x3e>
    while (f_gets(working_buffer, sizeof(working_buffer)-1, &file) != NULL) {
 80009a4:	f240 18ff 	movw	r8, #511	; 0x1ff
            working_buffer[strlen(working_buffer)-1] = '\0';
 80009a8:	f04f 0900 	mov.w	r9, #0
    while (f_gets(working_buffer, sizeof(working_buffer)-1, &file) != NULL) {
 80009ac:	4c1e      	ldr	r4, [pc, #120]	; (8000a28 <get_station_url_from_file+0xa0>)
 80009ae:	aa02      	add	r2, sp, #8
 80009b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <get_station_url_from_file+0xa0>)
 80009b6:	f008 fe99 	bl	80096ec <f_gets>
 80009ba:	b9c0      	cbnz	r0, 80009ee <get_station_url_from_file+0x66>
    char* result = NULL;
 80009bc:	4604      	mov	r4, r0
    f_close(&file);
 80009be:	a802      	add	r0, sp, #8
 80009c0:	f008 fcc3 	bl	800934a <f_close>
    return result;
 80009c4:	e00e      	b.n	80009e4 <get_station_url_from_file+0x5c>
    	printf("Can't open radio.txt file from SD, res: %d. Attempting USB.\r\n", res);
 80009c6:	4819      	ldr	r0, [pc, #100]	; (8000a2c <get_station_url_from_file+0xa4>)
 80009c8:	f015 ff5e 	bl	8016888 <iprintf>
		res = f_open(&file, "0:/radio.txt", FA_READ);
 80009cc:	4918      	ldr	r1, [pc, #96]	; (8000a30 <get_station_url_from_file+0xa8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	a802      	add	r0, sp, #8
 80009d2:	f008 fab1 	bl	8008f38 <f_open>
		if (res != FR_OK) {
 80009d6:	4601      	mov	r1, r0
 80009d8:	2800      	cmp	r0, #0
 80009da:	d0e3      	beq.n	80009a4 <get_station_url_from_file+0x1c>
			printf("Can't open radio.txt file from USB, res: %d\r\n", res);
 80009dc:	4815      	ldr	r0, [pc, #84]	; (8000a34 <get_station_url_from_file+0xac>)
 80009de:	f015 ff53 	bl	8016888 <iprintf>
			return NULL;
 80009e2:	2400      	movs	r4, #0
}
 80009e4:	4620      	mov	r0, r4
 80009e6:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 80009ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (working_buffer[strlen(working_buffer)-1] == '\n') {
 80009ee:	4620      	mov	r0, r4
 80009f0:	f7ff fc28 	bl	8000244 <strlen>
 80009f4:	3801      	subs	r0, #1
 80009f6:	5c23      	ldrb	r3, [r4, r0]
 80009f8:	2b0a      	cmp	r3, #10
            working_buffer[strlen(working_buffer)-1] = '\0';
 80009fa:	bf08      	it	eq
 80009fc:	f804 9000 	strbeq.w	r9, [r4, r0]
        int ret = parse_stream_data_line(working_buffer, strlen(working_buffer), stream_name, stream_name_len, working_buffer, sizeof(working_buffer)-1);
 8000a00:	4620      	mov	r0, r4
 8000a02:	f7ff fc1f 	bl	8000244 <strlen>
 8000a06:	e9cd 4800 	strd	r4, r8, [sp]
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4632      	mov	r2, r6
 8000a10:	4620      	mov	r0, r4
 8000a12:	f7ff ff7f 	bl	8000914 <parse_stream_data_line>
        if (ret && ret == number) {
 8000a16:	2800      	cmp	r0, #0
 8000a18:	d0c9      	beq.n	80009ae <get_station_url_from_file+0x26>
 8000a1a:	b280      	uxth	r0, r0
 8000a1c:	42a8      	cmp	r0, r5
 8000a1e:	d1c6      	bne.n	80009ae <get_station_url_from_file+0x26>
            result = working_buffer;
 8000a20:	4c01      	ldr	r4, [pc, #4]	; (8000a28 <get_station_url_from_file+0xa0>)
 8000a22:	e7cc      	b.n	80009be <get_station_url_from_file+0x36>
 8000a24:	08017d5c 	.word	0x08017d5c
 8000a28:	20005118 	.word	0x20005118
 8000a2c:	08017d69 	.word	0x08017d69
 8000a30:	08017da7 	.word	0x08017da7
 8000a34:	08017db4 	.word	0x08017db4

08000a38 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <vApplicationGetIdleTaskMemory+0x10>)
 8000a3a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <vApplicationGetIdleTaskMemory+0x14>)
 8000a3e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000a46:	4770      	bx	lr
 8000a48:	2000068c 	.word	0x2000068c
 8000a4c:	2000028c 	.word	0x2000028c

08000a50 <ssi_handler>:
uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen);

char const* TAGCHAR[] = {"token"};
char const** TAGS=TAGCHAR;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen) {
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	460d      	mov	r5, r1
	switch(iIndex) {
 8000a54:	4604      	mov	r4, r0
 8000a56:	b9b8      	cbnz	r0, 8000a88 <ssi_handler+0x38>
		case 0:
		for (int i=0; i<8; i++) { token[i] = 'a' + (rand() % 26); }
 8000a58:	271a      	movs	r7, #26
 8000a5a:	4e0c      	ldr	r6, [pc, #48]	; (8000a8c <ssi_handler+0x3c>)
 8000a5c:	f015 ffa4 	bl	80169a8 <rand>
 8000a60:	fb90 f3f7 	sdiv	r3, r0, r7
 8000a64:	fb03 0017 	mls	r0, r3, r7, r0
 8000a68:	3061      	adds	r0, #97	; 0x61
 8000a6a:	55a0      	strb	r0, [r4, r6]
 8000a6c:	3401      	adds	r4, #1
 8000a6e:	2c08      	cmp	r4, #8
 8000a70:	d1f4      	bne.n	8000a5c <ssi_handler+0xc>
		token[8] = '\0';
 8000a72:	2300      	movs	r3, #0
		strcpy(pcInsert, token);
 8000a74:	4905      	ldr	r1, [pc, #20]	; (8000a8c <ssi_handler+0x3c>)
 8000a76:	4628      	mov	r0, r5
		token[8] = '\0';
 8000a78:	7233      	strb	r3, [r6, #8]
		strcpy(pcInsert, token);
 8000a7a:	f016 f8c7 	bl	8016c0c <strcpy>
		return strlen(pcInsert);
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f7ff fbe0 	bl	8000244 <strlen>
 8000a84:	b280      	uxth	r0, r0

		default:
		break;
	}
	return 0;
}
 8000a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e7fc      	b.n	8000a86 <ssi_handler+0x36>
 8000a8c:	20005318 	.word	0x20005318

08000a90 <cgiPlayHandler>:


const tCGI PLAY_CGI = {"/ui/play.cgi", cgiPlayHandler};

const char *cgiPlayHandler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8000a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a94:	460e      	mov	r6, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	461d      	mov	r5, r3
	enum {PLAY_SRC_STREAM, PLAY_SRC_FILE, PLAY_SRC_DIR};

	static uint8_t to_send = 0;
	//int playSrc = PLAY_SRC_STREAM;	//Stream is default

	if (iIndex == 0) {
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	bb50      	cbnz	r0, 8000af4 <cgiPlayHandler+0x64>
		for (int i=0; i<iNumParams; i++) {
			if (strcmp(pcParam[i], "token") == 0) {
 8000a9e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8000b3c <cgiPlayHandler+0xac>
				//Needs to be implemented
			}
			else if (strncmp(pcParam[i], "url", 4) == 0) {
 8000aa2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8000b40 <cgiPlayHandler+0xb0>
				printf("play.cgi received URL: %s\r\n", pcValue[i]);
 8000aa6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8000b44 <cgiPlayHandler+0xb4>
		for (int i=0; i<iNumParams; i++) {
 8000aaa:	42a6      	cmp	r6, r4
 8000aac:	dd22      	ble.n	8000af4 <cgiPlayHandler+0x64>
			if (strcmp(pcParam[i], "token") == 0) {
 8000aae:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8000ab2:	4641      	mov	r1, r8
 8000ab4:	4658      	mov	r0, fp
 8000ab6:	f7ff fbbb 	bl	8000230 <strcmp>
 8000aba:	b380      	cbz	r0, 8000b1e <cgiPlayHandler+0x8e>
			else if (strncmp(pcParam[i], "url", 4) == 0) {
 8000abc:	2204      	movs	r2, #4
 8000abe:	4649      	mov	r1, r9
 8000ac0:	4658      	mov	r0, fp
 8000ac2:	f016 f8e4 	bl	8016c8e <strncmp>
 8000ac6:	bb50      	cbnz	r0, 8000b1e <cgiPlayHandler+0x8e>
				printf("play.cgi received URL: %s\r\n", pcValue[i]);
 8000ac8:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8000acc:	4650      	mov	r0, sl
 8000ace:	f015 fedb 	bl	8016888 <iprintf>
				if (strlen(pcValue[i]) == 0) {
 8000ad2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000ad6:	7803      	ldrb	r3, [r0, #0]
 8000ad8:	b97b      	cbnz	r3, 8000afa <cgiPlayHandler+0x6a>
					//Empty url, stop playing
					to_send = VS_MSG_STOP;
 8000ada:	2201      	movs	r2, #1
 8000adc:	4911      	ldr	r1, [pc, #68]	; (8000b24 <cgiPlayHandler+0x94>)
					if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <cgiPlayHandler+0x98>)
					to_send = VS_MSG_STOP;
 8000ae0:	700a      	strb	r2, [r1, #0]
					if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	f009 fa1e 	bl	8009f28 <xQueueGenericSend>
 8000aec:	b110      	cbz	r0, 8000af4 <cgiPlayHandler+0x64>
						printf("VS_MSG_STOP sent to queque\r\n");
 8000aee:	480f      	ldr	r0, [pc, #60]	; (8000b2c <cgiPlayHandler+0x9c>)
				}
				else {
					if (strncmp(pcValue[i], "next", 5) == 0) {
						to_send = VS_MSG_NEXT;
						if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
							printf("VS_MSG_NEXT sent to queque\r\n");
 8000af0:	f015 ff52 	bl	8016998 <puts>
				}
			}
		}
	}
	return "/ui/player.shtml";
}
 8000af4:	480e      	ldr	r0, [pc, #56]	; (8000b30 <cgiPlayHandler+0xa0>)
 8000af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (strncmp(pcValue[i], "next", 5) == 0) {
 8000afa:	2205      	movs	r2, #5
 8000afc:	490d      	ldr	r1, [pc, #52]	; (8000b34 <cgiPlayHandler+0xa4>)
 8000afe:	f016 f8c6 	bl	8016c8e <strncmp>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b958      	cbnz	r0, 8000b1e <cgiPlayHandler+0x8e>
						to_send = VS_MSG_NEXT;
 8000b06:	4907      	ldr	r1, [pc, #28]	; (8000b24 <cgiPlayHandler+0x94>)
						if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
						to_send = VS_MSG_NEXT;
 8000b0c:	7008      	strb	r0, [r1, #0]
						if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <cgiPlayHandler+0x98>)
 8000b10:	6800      	ldr	r0, [r0, #0]
 8000b12:	f009 fa09 	bl	8009f28 <xQueueGenericSend>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	d0ec      	beq.n	8000af4 <cgiPlayHandler+0x64>
							printf("VS_MSG_NEXT sent to queque\r\n");
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <cgiPlayHandler+0xa8>)
 8000b1c:	e7e8      	b.n	8000af0 <cgiPlayHandler+0x60>
		for (int i=0; i<iNumParams; i++) {
 8000b1e:	3401      	adds	r4, #1
 8000b20:	e7c3      	b.n	8000aaa <cgiPlayHandler+0x1a>
 8000b22:	bf00      	nop
 8000b24:	20000740 	.word	0x20000740
 8000b28:	20005328 	.word	0x20005328
 8000b2c:	08017e32 	.word	0x08017e32
 8000b30:	08017e6f 	.word	0x08017e6f
 8000b34:	08017e4e 	.word	0x08017e4e
 8000b38:	08017e53 	.word	0x08017e53
 8000b3c:	08017e0c 	.word	0x08017e0c
 8000b40:	08017e12 	.word	0x08017e12
 8000b44:	08017e16 	.word	0x08017e16

08000b48 <init_http_server>:

void init_http_server (void) {
 8000b48:	b508      	push	{r3, lr}
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 1);
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <init_http_server+0x1c>)
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <init_http_server+0x20>)
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f00d facf 	bl	800e0f4 <http_set_ssi_handler>
	http_set_cgi_handlers(&PLAY_CGI, 1);
}
 8000b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	http_set_cgi_handlers(&PLAY_CGI, 1);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <init_http_server+0x24>)
 8000b5e:	f00d bafd 	b.w	800e15c <http_set_cgi_handlers>
 8000b62:	bf00      	nop
 8000b64:	20000004 	.word	0x20000004
 8000b68:	08000a51 	.word	0x08000a51
 8000b6c:	08017e04 	.word	0x08017e04

08000b70 <next_callback>:
	time_t timestamp = mktime(&time_tm);

	return timestamp;
}

void next_callback (void) {
 8000b70:	b508      	push	{r3, lr}
	printf("Next button pressed\r\n");
 8000b72:	4809      	ldr	r0, [pc, #36]	; (8000b98 <next_callback+0x28>)
 8000b74:	f015 ff10 	bl	8016998 <puts>
	static uint8_t to_send = VS_MSG_NEXT;
	if (xQueueSend(vsQueueHandle, (void*)&to_send, portMAX_DELAY)) {
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <next_callback+0x2c>)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <next_callback+0x30>)
 8000b82:	6800      	ldr	r0, [r0, #0]
 8000b84:	f009 f9d0 	bl	8009f28 <xQueueGenericSend>
 8000b88:	b120      	cbz	r0, 8000b94 <next_callback+0x24>
		printf("VS_MSG_NEXT sent to queque\r\n");
	}
}
 8000b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("VS_MSG_NEXT sent to queque\r\n");
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <next_callback+0x34>)
 8000b90:	f015 bf02 	b.w	8016998 <puts>
}
 8000b94:	bd08      	pop	{r3, pc}
 8000b96:	bf00      	nop
 8000b98:	08017f63 	.word	0x08017f63
 8000b9c:	20005328 	.word	0x20005328
 8000ba0:	2000075c 	.word	0x2000075c
 8000ba4:	08017e53 	.word	0x08017e53

08000ba8 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000ba8:	b507      	push	{r0, r1, r2, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8000baa:	f005 f893 	bl	8005cd4 <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000bae:	f015 fac1 	bl	8016134 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  static FRESULT res;
  uint8_t queque_rcv;

  printf("Starting default task\r\n");
 8000bb2:	4842      	ldr	r0, [pc, #264]	; (8000cbc <StartMainTask+0x114>)
 8000bb4:	f015 fef0 	bl	8016998 <puts>

  HAL_GPIO_WritePin(SPIRAM_CS_GPIO_Port, SPIRAM_CS_Pin, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbe:	4840      	ldr	r0, [pc, #256]	; (8000cc0 <StartMainTask+0x118>)
 8000bc0:	f002 f9b8 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bca:	483e      	ldr	r0, [pc, #248]	; (8000cc4 <StartMainTask+0x11c>)
 8000bcc:	f002 f9b2 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	483c      	ldr	r0, [pc, #240]	; (8000cc8 <StartMainTask+0x120>)
 8000bd8:	f002 f9ac 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4838      	ldr	r0, [pc, #224]	; (8000cc4 <StartMainTask+0x11c>)
 8000be2:	f002 f9a7 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4836      	ldr	r0, [pc, #216]	; (8000cc4 <StartMainTask+0x11c>)
 8000bec:	f002 f9a2 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TST_GPIO_Port, TST_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf6:	4833      	ldr	r0, [pc, #204]	; (8000cc4 <StartMainTask+0x11c>)
 8000bf8:	f002 f99c 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4832      	ldr	r0, [pc, #200]	; (8000cc8 <StartMainTask+0x120>)
 8000c00:	4611      	mov	r1, r2
 8000c02:	f002 f997 	bl	8002f34 <HAL_GPIO_WritePin>

  res = f_mount(&UsbFS, "0:", 0);
 8000c06:	4931      	ldr	r1, [pc, #196]	; (8000ccc <StartMainTask+0x124>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4831      	ldr	r0, [pc, #196]	; (8000cd0 <StartMainTask+0x128>)
 8000c0c:	f008 f952 	bl	8008eb4 <f_mount>
  if (res != FR_OK) {printf("USB f_mount error code: %i\r\n", res);}
 8000c10:	4601      	mov	r1, r0
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d043      	beq.n	8000c9e <StartMainTask+0xf6>
 8000c16:	482f      	ldr	r0, [pc, #188]	; (8000cd4 <StartMainTask+0x12c>)
 8000c18:	f015 fe36 	bl	8016888 <iprintf>
  else {printf("USB f_mount OK\r\n");}

  res = f_mount(&SdFS, "1:", 1);
 8000c1c:	492e      	ldr	r1, [pc, #184]	; (8000cd8 <StartMainTask+0x130>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	482e      	ldr	r0, [pc, #184]	; (8000cdc <StartMainTask+0x134>)
 8000c22:	f008 f947 	bl	8008eb4 <f_mount>
  if (res != FR_OK) {printf("SD f_mount error code: %i\r\n", res);}
 8000c26:	4601      	mov	r1, r0
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d03c      	beq.n	8000ca6 <StartMainTask+0xfe>
 8000c2c:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <StartMainTask+0x138>)
 8000c2e:	f015 fe2b 	bl	8016888 <iprintf>
  else {printf("SD f_mount OK\r\n");}

  httpd_init();
 8000c32:	f00d fa1f 	bl	800e074 <httpd_init>
  init_http_server();
 8000c36:	f7ff ff87 	bl	8000b48 <init_http_server>

  spiram_init();
 8000c3a:	f000 fad9 	bl	80011f0 <spiram_init>
  spiram_clear();
 8000c3e:	f000 faf1 	bl	8001224 <spiram_clear>

  sntp_setoperatingmode(SNTP_OPMODE_POLL);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f00d fbcc 	bl	800e3e0 <sntp_setoperatingmode>
  sntp_setservername(0, "pool.ntp.org");
 8000c48:	4926      	ldr	r1, [pc, #152]	; (8000ce4 <StartMainTask+0x13c>)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f00d fbec 	bl	800e428 <sntp_setservername>
  sntp_init();
 8000c50:	f00d fb86 	bl	800e360 <sntp_init>

  VS1003_begin();
 8000c54:	f000 ff24 	bl	8001aa0 <VS1003_begin>
  VS1003_setVolume(0x00);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 fef1 	bl	8001a40 <VS1003_setVolume>
  VS1003_setLoop(TRUE);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f001 faf0 	bl	8002244 <VS1003_setLoop>
//  VS1003_play_dir("0:/");
//  VS1003_play_next_http_stream_from_list();
  VS1003_play_http_stream("http://an01.cdn.eurozet.pl/ant-waw.mp3");
 8000c64:	4820      	ldr	r0, [pc, #128]	; (8000ce8 <StartMainTask+0x140>)
 8000c66:	f000 ff91 	bl	8001b8c <VS1003_play_http_stream>
  /* Infinite loop */
  for(;;)
  {
	VS1003_handle();
	if (xQueueReceive(vsQueueHandle, &queque_rcv, 5) == pdTRUE) {
 8000c6a:	4c20      	ldr	r4, [pc, #128]	; (8000cec <StartMainTask+0x144>)
		printf("Received %d from queque\r\n", queque_rcv);
 8000c6c:	4d20      	ldr	r5, [pc, #128]	; (8000cf0 <StartMainTask+0x148>)
	VS1003_handle();
 8000c6e:	f001 f871 	bl	8001d54 <VS1003_handle>
	if (xQueueReceive(vsQueueHandle, &queque_rcv, 5) == pdTRUE) {
 8000c72:	2205      	movs	r2, #5
 8000c74:	f10d 0107 	add.w	r1, sp, #7
 8000c78:	6820      	ldr	r0, [r4, #0]
 8000c7a:	f009 fae3 	bl	800a244 <xQueueReceive>
 8000c7e:	2801      	cmp	r0, #1
 8000c80:	d109      	bne.n	8000c96 <StartMainTask+0xee>
		printf("Received %d from queque\r\n", queque_rcv);
 8000c82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000c86:	4628      	mov	r0, r5
 8000c88:	f015 fdfe 	bl	8016888 <iprintf>
		switch(queque_rcv) {
 8000c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c90:	b16b      	cbz	r3, 8000cae <StartMainTask+0x106>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d00e      	beq.n	8000cb4 <StartMainTask+0x10c>
				break;
			default:
				break;
		}
	}
	osDelay(1);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f008 fe9b 	bl	80099d2 <osDelay>
	VS1003_handle();
 8000c9c:	e7e7      	b.n	8000c6e <StartMainTask+0xc6>
  else {printf("USB f_mount OK\r\n");}
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <StartMainTask+0x14c>)
 8000ca0:	f015 fe7a 	bl	8016998 <puts>
 8000ca4:	e7ba      	b.n	8000c1c <StartMainTask+0x74>
  else {printf("SD f_mount OK\r\n");}
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <StartMainTask+0x150>)
 8000ca8:	f015 fe76 	bl	8016998 <puts>
 8000cac:	e7c1      	b.n	8000c32 <StartMainTask+0x8a>
				VS1003_play_next();
 8000cae:	f001 faa9 	bl	8002204 <VS1003_play_next>
				break;
 8000cb2:	e7f0      	b.n	8000c96 <StartMainTask+0xee>
				VS1003_stop();
 8000cb4:	f000 ffb6 	bl	8001c24 <VS1003_stop>
				break;
 8000cb8:	e7ed      	b.n	8000c96 <StartMainTask+0xee>
 8000cba:	bf00      	nop
 8000cbc:	08017ea0 	.word	0x08017ea0
 8000cc0:	40010800 	.word	0x40010800
 8000cc4:	40010c00 	.word	0x40010c00
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	08017eb7 	.word	0x08017eb7
 8000cd0:	2000537c 	.word	0x2000537c
 8000cd4:	08017eba 	.word	0x08017eba
 8000cd8:	08017ee7 	.word	0x08017ee7
 8000cdc:	200056bc 	.word	0x200056bc
 8000ce0:	08017eea 	.word	0x08017eea
 8000ce4:	08017f15 	.word	0x08017f15
 8000ce8:	08017f22 	.word	0x08017f22
 8000cec:	20005328 	.word	0x20005328
 8000cf0:	08017f49 	.word	0x08017f49
 8000cf4:	08017ed7 	.word	0x08017ed7
 8000cf8:	08017f06 	.word	0x08017f06

08000cfc <StartIoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIoTask */
void StartIoTask(void const * argument)
{
 8000cfc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN StartIoTask */
  static button_t next_btn;
  time_t oldTimestamp = 0;
  time_t newTimestamp;

  printf("I/O task starting\r\n");
 8000cfe:	480a      	ldr	r0, [pc, #40]	; (8000d28 <StartIoTask+0x2c>)
 8000d00:	f015 fe4a 	bl	8016998 <puts>
  button_init(&next_btn, NEXT_BTN_GPIO_Port, NEXT_BTN_Pin, next_callback, NULL);
 8000d04:	2300      	movs	r3, #0
 8000d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <StartIoTask+0x30>)
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <StartIoTask+0x34>)
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <StartIoTask+0x38>)
 8000d12:	f7ff fc71 	bl	80005f8 <button_init>
  /* Infinite loop */
  for(;;)
  {
	button_handle(&next_btn);
 8000d16:	4c07      	ldr	r4, [pc, #28]	; (8000d34 <StartIoTask+0x38>)
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff fc76 	bl	800060a <button_handle>
//		struct tm* time_tm = localtime(&newTimestamp);
//		if (time_tm) { printf("%s\r\n", asctime(time_tm)); }
//		oldTimestamp = newTimestamp;
//	}

    osDelay(20);
 8000d1e:	2014      	movs	r0, #20
 8000d20:	f008 fe57 	bl	80099d2 <osDelay>
 8000d24:	e7f8      	b.n	8000d18 <StartIoTask+0x1c>
 8000d26:	bf00      	nop
 8000d28:	08017e8d 	.word	0x08017e8d
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	08000b71 	.word	0x08000b71
 8000d34:	20000744 	.word	0x20000744

08000d38 <SystemClock_Config>:
{
 8000d38:	b530      	push	{r4, r5, lr}
 8000d3a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3c:	2234      	movs	r2, #52	; 0x34
 8000d3e:	2100      	movs	r1, #0
 8000d40:	a80f      	add	r0, sp, #60	; 0x3c
 8000d42:	f015 fcf3 	bl	801672c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d46:	2214      	movs	r2, #20
 8000d48:	2100      	movs	r1, #0
 8000d4a:	a801      	add	r0, sp, #4
 8000d4c:	f015 fcee 	bl	801672c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	a806      	add	r0, sp, #24
 8000d56:	f015 fce9 	bl	801672c <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d60:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d62:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	e9cd 5316 	strd	r5, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d70:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d72:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f002 fd3a 	bl	80037ec <HAL_RCC_OscConfig>
 8000d78:	b108      	cbz	r0, 8000d7e <SystemClock_Config+0x46>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7a:	b672      	cpsid	i
 8000d7c:	e7fe      	b.n	8000d7c <SystemClock_Config+0x44>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8a:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8e:	4629      	mov	r1, r5
 8000d90:	a801      	add	r0, sp, #4
 8000d92:	f002 ff8d 	bl	8003cb0 <HAL_RCC_ClockConfig>
 8000d96:	b108      	cbz	r0, 8000d9c <SystemClock_Config+0x64>
 8000d98:	b672      	cpsid	i
 8000d9a:	e7fe      	b.n	8000d9a <SystemClock_Config+0x62>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000d9c:	2211      	movs	r2, #17
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000da2:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	f003 f861 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	b108      	cbz	r0, 8000db4 <SystemClock_Config+0x7c>
 8000db0:	b672      	cpsid	i
 8000db2:	e7fe      	b.n	8000db2 <SystemClock_Config+0x7a>
  __HAL_RCC_PLLI2S_ENABLE();
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <SystemClock_Config+0x84>)
 8000db6:	601c      	str	r4, [r3, #0]
}
 8000db8:	b01d      	add	sp, #116	; 0x74
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	42420070 	.word	0x42420070

08000dc0 <main>:
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8000dc4:	f001 fa6a 	bl	800229c <HAL_Init>
  SystemClock_Config();
 8000dc8:	f7ff ffb6 	bl	8000d38 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	2210      	movs	r2, #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	a80f      	add	r0, sp, #60	; 0x3c
 8000dd2:	f015 fcab 	bl	801672c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4bab      	ldr	r3, [pc, #684]	; (8001084 <main+0x2c4>)
  HAL_GPIO_WritePin(GPIOC, VS_XRST_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000dd8:	f242 0101 	movw	r1, #8193	; 0x2001
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, VS_XRST_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000dde:	48aa      	ldr	r0, [pc, #680]	; (8001088 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de0:	f042 0210 	orr.w	r2, r2, #16
 8000de4:	619a      	str	r2, [r3, #24]
 8000de6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	f002 0210 	and.w	r2, r2, #16
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	619a      	str	r2, [r3, #24]
 8000dfc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2602      	movs	r6, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	f002 0220 	and.w	r2, r2, #32
 8000e04:	9201      	str	r2, [sp, #4]
 8000e06:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2703      	movs	r7, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	619a      	str	r2, [r3, #24]
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	f002 0204 	and.w	r2, r2, #4
 8000e18:	9202      	str	r2, [sp, #8]
 8000e1a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	f042 0208 	orr.w	r2, r2, #8
 8000e22:	619a      	str	r2, [r3, #24]
 8000e24:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, VS_XRST_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	9303      	str	r3, [sp, #12]
 8000e2e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, VS_XRST_Pin|USB_EN_Pin, GPIO_PIN_RESET);
 8000e30:	f002 f880 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, TST_Pin|VS_XDCS_Pin|VS_XCS_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000e3a:	4894      	ldr	r0, [pc, #592]	; (800108c <main+0x2cc>)
 8000e3c:	f002 f87a 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPIRAM_CS_GPIO_Port, SPIRAM_CS_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e46:	4892      	ldr	r0, [pc, #584]	; (8001090 <main+0x2d0>)
 8000e48:	f002 f874 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	488e      	ldr	r0, [pc, #568]	; (800108c <main+0x2cc>)
 8000e54:	f002 f86e 	bl	8002f34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	f242 0301 	movw	r3, #8193	; 0x2001
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	a90f      	add	r1, sp, #60	; 0x3c
 8000e5e:	488a      	ldr	r0, [pc, #552]	; (8001088 <main+0x2c8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	e9cd 4611 	strd	r4, r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f001 ff0a 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OVERCURRENT_Pin;
 8000e6c:	2320      	movs	r3, #32
  HAL_GPIO_Init(USB_OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	a90f      	add	r1, sp, #60	; 0x3c
 8000e70:	4887      	ldr	r0, [pc, #540]	; (8001090 <main+0x2d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(USB_OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f001 ff02 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TST_Pin|VS_XDCS_Pin|VS_XCS_Pin;
 8000e7c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	a90f      	add	r1, sp, #60	; 0x3c
 8000e82:	4882      	ldr	r0, [pc, #520]	; (800108c <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	e9cd 4611 	strd	r4, r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f001 fef8 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NEXT_BTN_Pin;
 8000e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(NEXT_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e94:	a90f      	add	r1, sp, #60	; 0x3c
 8000e96:	487d      	ldr	r0, [pc, #500]	; (800108c <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(NEXT_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f001 feef 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPIRAM_CS_Pin;
 8000ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(SPIRAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	a90f      	add	r1, sp, #60	; 0x3c
 8000ea8:	4879      	ldr	r0, [pc, #484]	; (8001090 <main+0x2d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eae:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPIRAM_CS_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f001 fee5 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD_PRESENT_Pin;
 8000eb6:	2304      	movs	r3, #4
  HAL_GPIO_Init(SD_PRESENT_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	a90f      	add	r1, sp, #60	; 0x3c
 8000eba:	4876      	ldr	r0, [pc, #472]	; (8001094 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(SD_PRESENT_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f001 fedd 	bl	8002c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VS_DREQ_Pin;
 8000ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000eca:	f44f 7600 	mov.w	r6, #512	; 0x200
  HAL_GPIO_Init(VS_DREQ_GPIO_Port, &GPIO_InitStruct);
 8000ece:	a90f      	add	r1, sp, #60	; 0x3c
 8000ed0:	486e      	ldr	r0, [pc, #440]	; (800108c <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(VS_DREQ_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f001 fed2 	bl	8002c80 <HAL_GPIO_Init>
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000edc:	a90f      	add	r1, sp, #60	; 0x3c
 8000ede:	486b      	ldr	r0, [pc, #428]	; (800108c <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	e9cd 650f 	strd	r6, r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	e9cd 5711 	strd	r5, r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f001 feca 	bl	8002c80 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8000eec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000ef0:	4869      	ldr	r0, [pc, #420]	; (8001098 <main+0x2d8>)
  huart1.Init.BaudRate = 115200;
 8000ef2:	4d6a      	ldr	r5, [pc, #424]	; (800109c <main+0x2dc>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8000ef8:	e9c0 5300 	strd	r5, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000efc:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f00:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f06:	f004 f8bd 	bl	8005084 <HAL_UART_Init>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	b108      	cbz	r0, 8000f12 <main+0x152>
 8000f0e:	b672      	cpsid	i
 8000f10:	e7fe      	b.n	8000f10 <main+0x150>
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f12:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi3.Init.CRCPolynomial = 10;
 8000f16:	270a      	movs	r7, #10
  MX_FATFS_Init();
 8000f18:	f004 fc3c 	bl	8005794 <MX_FATFS_Init>
  hspi3.Instance = SPI3;
 8000f1c:	4860      	ldr	r0, [pc, #384]	; (80010a0 <main+0x2e0>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4a61      	ldr	r2, [pc, #388]	; (80010a4 <main+0x2e4>)
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f20:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f24:	e9c0 2500 	strd	r2, r5, [r0]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f28:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f2c:	e9c0 6406 	strd	r6, r4, [r0, #24]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f30:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f34:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f36:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f38:	f003 fb5d 	bl	80045f6 <HAL_SPI_Init>
 8000f3c:	b108      	cbz	r0, 8000f42 <main+0x182>
 8000f3e:	b672      	cpsid	i
 8000f40:	e7fe      	b.n	8000f40 <main+0x180>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  hrtc.Instance = RTC;
 8000f46:	4c58      	ldr	r4, [pc, #352]	; (80010a8 <main+0x2e8>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f48:	4958      	ldr	r1, [pc, #352]	; (80010ac <main+0x2ec>)
  RTC_TimeTypeDef sTime = {0};
 8000f4a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8000f4e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
  RTC_DateTypeDef DateToUpdate = {0};
 8000f52:	900f      	str	r0, [sp, #60]	; 0x3c
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000f54:	60a0      	str	r0, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f56:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f58:	e9c4 1300 	strd	r1, r3, [r4]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f5c:	f003 fa70 	bl	8004440 <HAL_RTC_Init>
 8000f60:	4602      	mov	r2, r0
 8000f62:	b108      	cbz	r0, 8000f68 <main+0x1a8>
 8000f64:	b672      	cpsid	i
 8000f66:	e7fe      	b.n	8000f66 <main+0x1a6>
  sTime.Hours = 0;
 8000f68:	f8ad 0020 	strh.w	r0, [sp, #32]
  sTime.Minutes = 0;
 8000f6c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f70:	a908      	add	r1, sp, #32
 8000f72:	4620      	mov	r0, r4
 8000f74:	f003 f99f 	bl	80042b6 <HAL_RTC_SetTime>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	b108      	cbz	r0, 8000f80 <main+0x1c0>
 8000f7c:	b672      	cpsid	i
 8000f7e:	e7fe      	b.n	8000f7e <main+0x1be>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <main+0x2f0>)
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000f82:	a90f      	add	r1, sp, #60	; 0x3c
 8000f84:	4620      	mov	r0, r4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000f86:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000f88:	f003 f9e6 	bl	8004358 <HAL_RTC_SetDate>
 8000f8c:	b108      	cbz	r0, 8000f92 <main+0x1d2>
 8000f8e:	b672      	cpsid	i
 8000f90:	e7fe      	b.n	8000f90 <main+0x1d0>
  hspi1.Instance = SPI1;
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <main+0x2f4>)
 8000f94:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <main+0x2f8>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f96:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	e9c3 2500 	strd	r2, r5, [r3]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f9e:	2238      	movs	r2, #56	; 0x38
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa4:	e9c3 2007 	strd	r2, r0, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fac:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fae:	619e      	str	r6, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000fb0:	62df      	str	r7, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb2:	f003 fb20 	bl	80045f6 <HAL_SPI_Init>
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	b108      	cbz	r0, 8000fbe <main+0x1fe>
 8000fba:	b672      	cpsid	i
 8000fbc:	e7fe      	b.n	8000fbc <main+0x1fc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	a80f      	add	r0, sp, #60	; 0x3c
 8000fc4:	f015 fbb2 	bl	801672c <memset>
  htim4.Init.Prescaler = 72-1;
 8000fc8:	2347      	movs	r3, #71	; 0x47
  htim4.Instance = TIM4;
 8000fca:	4c3c      	ldr	r4, [pc, #240]	; (80010bc <main+0x2fc>)
  htim4.Init.Prescaler = 72-1;
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <main+0x300>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fce:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 72-1;
 8000fd0:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 0xffff-1;
 8000fd4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	e9cd 5508 	strd	r5, r5, [sp, #32]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	60a5      	str	r5, [r4, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fe4:	f003 feea 	bl	8004dbc <HAL_TIM_Base_Init>
 8000fe8:	b108      	cbz	r0, 8000fee <main+0x22e>
 8000fea:	b672      	cpsid	i
 8000fec:	e7fe      	b.n	8000fec <main+0x22c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff2:	a90f      	add	r1, sp, #60	; 0x3c
 8000ff4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff8:	f003 ff16 	bl	8004e28 <HAL_TIM_ConfigClockSource>
 8000ffc:	b108      	cbz	r0, 8001002 <main+0x242>
 8000ffe:	b672      	cpsid	i
 8001000:	e7fe      	b.n	8001000 <main+0x240>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	e9cd 0008 	strd	r0, r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001006:	a908      	add	r1, sp, #32
 8001008:	4620      	mov	r0, r4
 800100a:	f003 ffa1 	bl	8004f50 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	b108      	cbz	r0, 8001014 <main+0x254>
 8001010:	b672      	cpsid	i
 8001012:	e7fe      	b.n	8001012 <main+0x252>
  hcrc.Instance = CRC;
 8001014:	482b      	ldr	r0, [pc, #172]	; (80010c4 <main+0x304>)
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <main+0x308>)
 8001018:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800101a:	f001 f9c9 	bl	80023b0 <HAL_CRC_Init>
 800101e:	b108      	cbz	r0, 8001024 <main+0x264>
 8001020:	b672      	cpsid	i
 8001022:	e7fe      	b.n	8001022 <main+0x262>
  osMessageQDef(vsQueue, 16, uint8_t);
 8001024:	4c29      	ldr	r4, [pc, #164]	; (80010cc <main+0x30c>)
 8001026:	ad04      	add	r5, sp, #16
  HAL_TIM_Base_Start(&htim4);									//Required for delay_us
 8001028:	4824      	ldr	r0, [pc, #144]	; (80010bc <main+0x2fc>)
 800102a:	f003 fd89 	bl	8004b40 <HAL_TIM_Base_Start>
  osMessageQDef(vsQueue, 16, uint8_t);
 800102e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001032:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  vsQueueHandle = osMessageCreate(osMessageQ(vsQueue), NULL);
 8001036:	2100      	movs	r1, #0
 8001038:	4628      	mov	r0, r5
 800103a:	f008 fd7d 	bl	8009b38 <osMessageCreate>
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <main+0x310>)
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 8001040:	f104 0610 	add.w	r6, r4, #16
 8001044:	ad08      	add	r5, sp, #32
  vsQueueHandle = osMessageCreate(osMessageQ(vsQueue), NULL);
 8001046:	6018      	str	r0, [r3, #0]
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 8001048:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001050:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8001054:	2100      	movs	r1, #0
 8001056:	a808      	add	r0, sp, #32
 8001058:	f008 fc93 	bl	8009982 <osThreadCreate>
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <main+0x314>)
  osThreadDef(ioTask, StartIoTask, osPriorityIdle, 0, 256);
 800105e:	ad0f      	add	r5, sp, #60	; 0x3c
 8001060:	342c      	adds	r4, #44	; 0x2c
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 8001062:	6018      	str	r0, [r3, #0]
  osThreadDef(ioTask, StartIoTask, osPriorityIdle, 0, 256);
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800106c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ioTaskHandle = osThreadCreate(osThread(ioTask), NULL);
 8001070:	2100      	movs	r1, #0
 8001072:	a80f      	add	r0, sp, #60	; 0x3c
 8001074:	f008 fc85 	bl	8009982 <osThreadCreate>
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0x318>)
 800107a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800107c:	f008 fc75 	bl	800996a <osKernelStart>
 8001080:	e7fe      	b.n	8001080 <main+0x2c0>
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	40011000 	.word	0x40011000
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40010800 	.word	0x40010800
 8001094:	40011400 	.word	0x40011400
 8001098:	20005608 	.word	0x20005608
 800109c:	40013800 	.word	0x40013800
 80010a0:	200055b0 	.word	0x200055b0
 80010a4:	40003c00 	.word	0x40003c00
 80010a8:	2000564c 	.word	0x2000564c
 80010ac:	40002800 	.word	0x40002800
 80010b0:	00010101 	.word	0x00010101
 80010b4:	20005664 	.word	0x20005664
 80010b8:	40013000 	.word	0x40013000
 80010bc:	2000532c 	.word	0x2000532c
 80010c0:	40000800 	.word	0x40000800
 80010c4:	20005374 	.word	0x20005374
 80010c8:	40023000 	.word	0x40023000
 80010cc:	08017c74 	.word	0x08017c74
 80010d0:	20005328 	.word	0x20005328
 80010d4:	20005324 	.word	0x20005324
 80010d8:	20005660 	.word	0x20005660

080010dc <_write>:
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80010dc:	3801      	subs	r0, #1
 80010de:	2801      	cmp	r0, #1
{
 80010e0:	b510      	push	{r4, lr}
 80010e2:	4614      	mov	r4, r2
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80010e4:	d906      	bls.n	80010f4 <_write+0x18>
      errno = EBADF;
 80010e6:	2209      	movs	r2, #9
      return -1;
 80010e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
      errno = EBADF;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <_write+0x2c>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	4620      	mov	r0, r4
 80010f2:	bd10      	pop	{r4, pc}
   HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 80010f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f8:	b292      	uxth	r2, r2
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <_write+0x30>)
 80010fc:	f003 fff0 	bl	80050e0 <HAL_UART_Transmit>
   return (status == HAL_OK ? len : 0);
 8001100:	2800      	cmp	r0, #0
 8001102:	bf18      	it	ne
 8001104:	2400      	movne	r4, #0
 8001106:	e7f3      	b.n	80010f0 <_write+0x14>
 8001108:	2000e0bc 	.word	0x2000e0bc
 800110c:	20005608 	.word	0x20005608

08001110 <rtc_set_with_ntp_timstamp>:
void rtc_set_with_ntp_timstamp(uint32_t sec) {
 8001110:	b510      	push	{r4, lr}
	time_t rawtime = sec;
 8001112:	2400      	movs	r4, #0
void rtc_set_with_ntp_timstamp(uint32_t sec) {
 8001114:	b08e      	sub	sp, #56	; 0x38
 8001116:	4601      	mov	r1, r0
	time_t rawtime = sec;
 8001118:	e9cd 0402 	strd	r0, r4, [sp, #8]
	printf("NTP timestamp received: %lu\r\n", sec);
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <rtc_set_with_ntp_timstamp+0x78>)
 800111e:	f015 fbb3 	bl	8016888 <iprintf>
	gmtime_r(&rawtime, &time_tm);
 8001122:	a905      	add	r1, sp, #20
 8001124:	a802      	add	r0, sp, #8
 8001126:	f015 fa07 	bl	8016538 <gmtime_r>
	sTime.Hours = (uint8_t)time_tm.tm_hour;
 800112a:	9b07      	ldr	r3, [sp, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800112c:	4622      	mov	r2, r4
	sTime.Hours = (uint8_t)time_tm.tm_hour;
 800112e:	f88d 3000 	strb.w	r3, [sp]
	sTime.Minutes = (uint8_t)time_tm.tm_min;
 8001132:	9b06      	ldr	r3, [sp, #24]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001134:	4669      	mov	r1, sp
	sTime.Minutes = (uint8_t)time_tm.tm_min;
 8001136:	f88d 3001 	strb.w	r3, [sp, #1]
	sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800113a:	9b05      	ldr	r3, [sp, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <rtc_set_with_ntp_timstamp+0x7c>)
	sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800113e:	f88d 3002 	strb.w	r3, [sp, #2]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001142:	f003 f8b8 	bl	80042b6 <HAL_RTC_SetTime>
 8001146:	b110      	cbz	r0, 800114e <rtc_set_with_ntp_timstamp+0x3e>
		printf("Can't set time\r\n");
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <rtc_set_with_ntp_timstamp+0x80>)
 800114a:	f015 fc25 	bl	8016998 <puts>
	if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }
 800114e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001150:	b90b      	cbnz	r3, 8001156 <rtc_set_with_ntp_timstamp+0x46>
 8001152:	2307      	movs	r3, #7
 8001154:	930b      	str	r3, [sp, #44]	; 0x2c
	sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 8001156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001158:	2200      	movs	r2, #0
	sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800115a:	f88d 3004 	strb.w	r3, [sp, #4]
	sDate.Month = (uint8_t)time_tm.tm_mon+1;
 800115e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001160:	a901      	add	r1, sp, #4
	sDate.Month = (uint8_t)time_tm.tm_mon+1;
 8001162:	3301      	adds	r3, #1
 8001164:	f88d 3005 	strb.w	r3, [sp, #5]
	sDate.Date = (uint8_t)time_tm.tm_mday;
 8001168:	9b08      	ldr	r3, [sp, #32]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <rtc_set_with_ntp_timstamp+0x7c>)
	sDate.Date = (uint8_t)time_tm.tm_mday;
 800116c:	f88d 3006 	strb.w	r3, [sp, #6]
	sDate.Year = (uint16_t)(time_tm.tm_year+1900-2000);
 8001170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001172:	3b64      	subs	r3, #100	; 0x64
 8001174:	f88d 3007 	strb.w	r3, [sp, #7]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8001178:	f003 f8ee 	bl	8004358 <HAL_RTC_SetDate>
 800117c:	b110      	cbz	r0, 8001184 <rtc_set_with_ntp_timstamp+0x74>
		printf("Can't set date\r\n");
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <rtc_set_with_ntp_timstamp+0x84>)
 8001180:	f015 fc0a 	bl	8016998 <puts>
}
 8001184:	b00e      	add	sp, #56	; 0x38
 8001186:	bd10      	pop	{r4, pc}
 8001188:	08017f78 	.word	0x08017f78
 800118c:	2000564c 	.word	0x2000564c
 8001190:	08017f96 	.word	0x08017f96
 8001194:	08017fa6 	.word	0x08017fa6

08001198 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001198:	6802      	ldr	r2, [r0, #0]
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800119c:	429a      	cmp	r2, r3
 800119e:	d101      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80011a0:	f001 b88e 	b.w	80022c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40012c00 	.word	0x40012c00

080011ac <Error_Handler>:
 80011ac:	b672      	cpsid	i
 80011ae:	e7fe      	b.n	80011ae <Error_Handler+0x2>

080011b0 <spiram_setmode>:
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
    	printf("SPIRAM: SPI3 init error\r\n");
    }
}

static void spiram_setmode(uint8_t mode ) {
 80011b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp[2] = {WRMR, mode};
 80011b2:	2501      	movs	r5, #1

	enableRAM();
 80011b4:	4c0c      	ldr	r4, [pc, #48]	; (80011e8 <spiram_setmode+0x38>)
	uint8_t tmp[2] = {WRMR, mode};
 80011b6:	f88d 0005 	strb.w	r0, [sp, #5]
	enableRAM();
 80011ba:	2200      	movs	r2, #0
 80011bc:	4620      	mov	r0, r4
 80011be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	uint8_t tmp[2] = {WRMR, mode};
 80011c2:	f88d 5004 	strb.w	r5, [sp, #4]
	enableRAM();
 80011c6:	f001 feb5 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, tmp, 2, HAL_MAX_DELAY);
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ce:	a901      	add	r1, sp, #4
 80011d0:	2202      	movs	r2, #2
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <spiram_setmode+0x3c>)
 80011d4:	f003 fa7d 	bl	80046d2 <HAL_SPI_Transmit>
	disableRAM();
 80011d8:	462a      	mov	r2, r5
 80011da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011de:	4620      	mov	r0, r4
 80011e0:	f001 fea8 	bl	8002f34 <HAL_GPIO_WritePin>
}
 80011e4:	b003      	add	sp, #12
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	40010800 	.word	0x40010800
 80011ec:	200055b0 	.word	0x200055b0

080011f0 <spiram_init>:
void spiram_init(void) {
 80011f0:	b508      	push	{r3, lr}
    if (HAL_SPI_DeInit(&hspi3) != HAL_OK) {
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <spiram_init+0x28>)
 80011f4:	f003 fa57 	bl	80046a6 <HAL_SPI_DeInit>
 80011f8:	b110      	cbz	r0, 8001200 <spiram_init+0x10>
    	printf("SPIRAM: SPI3 deinit error\r\n");
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <spiram_init+0x2c>)
 80011fc:	f015 fbcc 	bl	8016998 <puts>
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001200:	2300      	movs	r3, #0
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <spiram_init+0x28>)
 8001204:	61c3      	str	r3, [r0, #28]
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001206:	f003 f9f6 	bl	80045f6 <HAL_SPI_Init>
 800120a:	b120      	cbz	r0, 8001216 <spiram_init+0x26>
}
 800120c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	printf("SPIRAM: SPI3 init error\r\n");
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <spiram_init+0x30>)
 8001212:	f015 bbc1 	b.w	8016998 <puts>
}
 8001216:	bd08      	pop	{r3, pc}
 8001218:	200055b0 	.word	0x200055b0
 800121c:	08017fc6 	.word	0x08017fc6
 8001220:	08017fe1 	.word	0x08017fe1

08001224 <spiram_clear>:


void spiram_clear(void) {
	uint8_t tmp[4] = {WRITE, 0x00, 0x00, 0x00};
 8001224:	2302      	movs	r3, #2
void spiram_clear(void) {
 8001226:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int i;

	spiram_ringbuffer_head = 0;
 8001228:	2500      	movs	r5, #0
	uint8_t tmp[4] = {WRITE, 0x00, 0x00, 0x00};
 800122a:	ac02      	add	r4, sp, #8
 800122c:	f844 3d04 	str.w	r3, [r4, #-4]!
	spiram_ringbuffer_head = 0;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <spiram_clear+0x60>)
	spiram_ringbuffer_tail = 0;
	spiram_setmode(SEQ_MODE);
 8001232:	2040      	movs	r0, #64	; 0x40
	spiram_ringbuffer_head = 0;
 8001234:	601d      	str	r5, [r3, #0]
	spiram_ringbuffer_tail = 0;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <spiram_clear+0x64>)
 8001238:	601d      	str	r5, [r3, #0]
	spiram_setmode(SEQ_MODE);
 800123a:	f7ff ffb9 	bl	80011b0 <spiram_setmode>

	enableRAM();
 800123e:	462a      	mov	r2, r5
 8001240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <spiram_clear+0x68>)
 8001246:	f001 fe75 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
 800124a:	4621      	mov	r1, r4
 800124c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001250:	2204      	movs	r2, #4
 8001252:	480f      	ldr	r0, [pc, #60]	; (8001290 <spiram_clear+0x6c>)
 8001254:	f003 fa3d 	bl	80046d2 <HAL_SPI_Transmit>
 8001258:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	for (i=0; i<0x20000; i++) {
		HAL_SPI_Transmit(&hspi3, &tmp[1], 1, HAL_MAX_DELAY);
 800125c:	4d0c      	ldr	r5, [pc, #48]	; (8001290 <spiram_clear+0x6c>)
 800125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001262:	2201      	movs	r2, #1
 8001264:	f10d 0105 	add.w	r1, sp, #5
 8001268:	4628      	mov	r0, r5
 800126a:	f003 fa32 	bl	80046d2 <HAL_SPI_Transmit>
	for (i=0; i<0x20000; i++) {
 800126e:	3c01      	subs	r4, #1
 8001270:	d1f5      	bne.n	800125e <spiram_clear+0x3a>
	}
	disableRAM();
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <spiram_clear+0x68>)
 800127a:	f001 fe5b 	bl	8002f34 <HAL_GPIO_WritePin>
}
 800127e:	b003      	add	sp, #12
 8001280:	bd30      	pop	{r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	20000760 	.word	0x20000760
 8001288:	20000764 	.word	0x20000764
 800128c:	40010800 	.word	0x40010800
 8001290:	200055b0 	.word	0x200055b0

08001294 <spiram_write_array_to_ringbuffer>:
	disableRAM();
}


void spiram_write_array_to_ringbuffer(uint8_t* data, uint16_t len) {
	uint8_t tmp[4] = {WRITE, (uint8_t)(spiram_ringbuffer_head >> 16), (uint8_t)(spiram_ringbuffer_head >> 8), (uint8_t)spiram_ringbuffer_head};
 8001294:	2302      	movs	r3, #2
void spiram_write_array_to_ringbuffer(uint8_t* data, uint16_t len) {
 8001296:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t tmp[4] = {WRITE, (uint8_t)(spiram_ringbuffer_head >> 16), (uint8_t)(spiram_ringbuffer_head >> 8), (uint8_t)spiram_ringbuffer_head};
 800129a:	4c2e      	ldr	r4, [pc, #184]	; (8001354 <spiram_write_array_to_ringbuffer+0xc0>)
 800129c:	f88d 3004 	strb.w	r3, [sp, #4]
 80012a0:	6823      	ldr	r3, [r4, #0]
void spiram_write_array_to_ringbuffer(uint8_t* data, uint16_t len) {
 80012a2:	4681      	mov	r9, r0
	uint8_t tmp[4] = {WRITE, (uint8_t)(spiram_ringbuffer_head >> 16), (uint8_t)(spiram_ringbuffer_head >> 8), (uint8_t)spiram_ringbuffer_head};
 80012a4:	0c1a      	lsrs	r2, r3, #16
 80012a6:	f88d 2005 	strb.w	r2, [sp, #5]

	//printf("Writing to ring buffer, head: %lu, tail: %lu\r\n", spiram_ringbuffer_head, spiram_ringbuffer_tail);

	spiram_setmode(SEQ_MODE);
 80012aa:	2040      	movs	r0, #64	; 0x40
	uint8_t tmp[4] = {WRITE, (uint8_t)(spiram_ringbuffer_head >> 16), (uint8_t)(spiram_ringbuffer_head >> 8), (uint8_t)spiram_ringbuffer_head};
 80012ac:	0a1a      	lsrs	r2, r3, #8
 80012ae:	f88d 3007 	strb.w	r3, [sp, #7]
void spiram_write_array_to_ringbuffer(uint8_t* data, uint16_t len) {
 80012b2:	4688      	mov	r8, r1
	uint8_t tmp[4] = {WRITE, (uint8_t)(spiram_ringbuffer_head >> 16), (uint8_t)(spiram_ringbuffer_head >> 8), (uint8_t)spiram_ringbuffer_head};
 80012b4:	f88d 2006 	strb.w	r2, [sp, #6]
	spiram_setmode(SEQ_MODE);
 80012b8:	f7ff ff7a 	bl	80011b0 <spiram_setmode>
	enableRAM();
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c2:	4825      	ldr	r0, [pc, #148]	; (8001358 <spiram_write_array_to_ringbuffer+0xc4>)
 80012c4:	f001 fe36 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
 80012c8:	2204      	movs	r2, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	eb0d 0102 	add.w	r1, sp, r2
 80012d2:	4822      	ldr	r0, [pc, #136]	; (800135c <spiram_write_array_to_ringbuffer+0xc8>)
 80012d4:	f003 f9fd 	bl	80046d2 <HAL_SPI_Transmit>
	for (int i=0; i<len; i++) {
 80012d8:	2500      	movs	r5, #0
		HAL_SPI_Transmit(&hspi3, &data[i], 1, HAL_MAX_DELAY);
 80012da:	4e20      	ldr	r6, [pc, #128]	; (800135c <spiram_write_array_to_ringbuffer+0xc8>)
		spiram_ringbuffer_head++;
		if (spiram_ringbuffer_head >= 0x20000) {
 80012dc:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001360 <spiram_write_array_to_ringbuffer+0xcc>
			spiram_ringbuffer_head = 0;
			disableRAM();
 80012e0:	4f1d      	ldr	r7, [pc, #116]	; (8001358 <spiram_write_array_to_ringbuffer+0xc4>)
	for (int i=0; i<len; i++) {
 80012e2:	45a8      	cmp	r8, r5
 80012e4:	dc08      	bgt.n	80012f8 <spiram_write_array_to_ringbuffer+0x64>
			enableRAM();
			HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
		}
		//If no space in buffer, it will simply override
	}
	disableRAM();
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <spiram_write_array_to_ringbuffer+0xc4>)
 80012ee:	f001 fe21 	bl	8002f34 <HAL_GPIO_WritePin>
}
 80012f2:	b003      	add	sp, #12
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HAL_SPI_Transmit(&hspi3, &data[i], 1, HAL_MAX_DELAY);
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fc:	2201      	movs	r2, #1
 80012fe:	eb09 0105 	add.w	r1, r9, r5
 8001302:	4630      	mov	r0, r6
 8001304:	f003 f9e5 	bl	80046d2 <HAL_SPI_Transmit>
		spiram_ringbuffer_head++;
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	3301      	adds	r3, #1
		if (spiram_ringbuffer_head >= 0x20000) {
 800130c:	4553      	cmp	r3, sl
 800130e:	d802      	bhi.n	8001316 <spiram_write_array_to_ringbuffer+0x82>
		spiram_ringbuffer_head++;
 8001310:	6023      	str	r3, [r4, #0]
	for (int i=0; i<len; i++) {
 8001312:	3501      	adds	r5, #1
 8001314:	e7e5      	b.n	80012e2 <spiram_write_array_to_ringbuffer+0x4e>
			spiram_ringbuffer_head = 0;
 8001316:	f04f 0b00 	mov.w	fp, #0
			disableRAM();
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001320:	4638      	mov	r0, r7
			spiram_ringbuffer_head = 0;
 8001322:	f8c4 b000 	str.w	fp, [r4]
			disableRAM();
 8001326:	f001 fe05 	bl	8002f34 <HAL_GPIO_WritePin>
			tmp[0] = WRITE;
 800132a:	2302      	movs	r3, #2
			spiram_setmode(SEQ_MODE);
 800132c:	2040      	movs	r0, #64	; 0x40
			tmp[0] = WRITE;
 800132e:	9301      	str	r3, [sp, #4]
			spiram_setmode(SEQ_MODE);
 8001330:	f7ff ff3e 	bl	80011b0 <spiram_setmode>
			enableRAM();
 8001334:	465a      	mov	r2, fp
 8001336:	4638      	mov	r0, r7
 8001338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133c:	f001 fdfa 	bl	8002f34 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
 8001340:	2204      	movs	r2, #4
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001346:	eb0d 0102 	add.w	r1, sp, r2
 800134a:	4630      	mov	r0, r6
 800134c:	f003 f9c1 	bl	80046d2 <HAL_SPI_Transmit>
 8001350:	e7df      	b.n	8001312 <spiram_write_array_to_ringbuffer+0x7e>
 8001352:	bf00      	nop
 8001354:	20000760 	.word	0x20000760
 8001358:	40010800 	.word	0x40010800
 800135c:	200055b0 	.word	0x200055b0
 8001360:	0001ffff 	.word	0x0001ffff

08001364 <spiram_read_array_from_ringbuffer>:

uint32_t spiram_read_array_from_ringbuffer(uint8_t* data, uint32_t len) {
	uint8_t tmp[4] = {READ, (uint8_t)(spiram_ringbuffer_tail >> 16), (uint8_t)(spiram_ringbuffer_tail >> 8), (uint8_t)spiram_ringbuffer_tail};
 8001364:	2303      	movs	r3, #3
uint32_t spiram_read_array_from_ringbuffer(uint8_t* data, uint32_t len) {
 8001366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t tmp[4] = {READ, (uint8_t)(spiram_ringbuffer_tail >> 16), (uint8_t)(spiram_ringbuffer_tail >> 8), (uint8_t)spiram_ringbuffer_tail};
 800136a:	4c31      	ldr	r4, [pc, #196]	; (8001430 <spiram_read_array_from_ringbuffer+0xcc>)
uint32_t spiram_read_array_from_ringbuffer(uint8_t* data, uint32_t len) {
 800136c:	b085      	sub	sp, #20
	uint8_t tmp[4] = {READ, (uint8_t)(spiram_ringbuffer_tail >> 16), (uint8_t)(spiram_ringbuffer_tail >> 8), (uint8_t)spiram_ringbuffer_tail};
 800136e:	f88d 300c 	strb.w	r3, [sp, #12]
 8001372:	6823      	ldr	r3, [r4, #0]
	uint32_t bytes_read = 0;

	if (spiram_ringbuffer_head == spiram_ringbuffer_tail) return 0;
 8001374:	4e2f      	ldr	r6, [pc, #188]	; (8001434 <spiram_read_array_from_ringbuffer+0xd0>)
	uint8_t tmp[4] = {READ, (uint8_t)(spiram_ringbuffer_tail >> 16), (uint8_t)(spiram_ringbuffer_tail >> 8), (uint8_t)spiram_ringbuffer_tail};
 8001376:	0c1a      	lsrs	r2, r3, #16
 8001378:	f88d 200d 	strb.w	r2, [sp, #13]
 800137c:	0a1a      	lsrs	r2, r3, #8
 800137e:	f88d 200e 	strb.w	r2, [sp, #14]
	if (spiram_ringbuffer_head == spiram_ringbuffer_tail) return 0;
 8001382:	6832      	ldr	r2, [r6, #0]
uint32_t spiram_read_array_from_ringbuffer(uint8_t* data, uint32_t len) {
 8001384:	4682      	mov	sl, r0
	if (spiram_ringbuffer_head == spiram_ringbuffer_tail) return 0;
 8001386:	4293      	cmp	r3, r2
uint32_t spiram_read_array_from_ringbuffer(uint8_t* data, uint32_t len) {
 8001388:	4689      	mov	r9, r1
	uint8_t tmp[4] = {READ, (uint8_t)(spiram_ringbuffer_tail >> 16), (uint8_t)(spiram_ringbuffer_tail >> 8), (uint8_t)spiram_ringbuffer_tail};
 800138a:	f88d 300f 	strb.w	r3, [sp, #15]
	if (spiram_ringbuffer_head == spiram_ringbuffer_tail) return 0;
 800138e:	d04d      	beq.n	800142c <spiram_read_array_from_ringbuffer+0xc8>

	//printf("Reading from ring buffer, head: %lu, tail: %lu\r\n", spiram_ringbuffer_head, spiram_ringbuffer_tail);

	enableRAM();
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <spiram_read_array_from_ringbuffer+0xd4>)
 8001398:	f001 fdcc 	bl	8002f34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
 800139c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a0:	2204      	movs	r2, #4
 80013a2:	a903      	add	r1, sp, #12
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <spiram_read_array_from_ringbuffer+0xd8>)
 80013a6:	f003 f994 	bl	80046d2 <HAL_SPI_Transmit>
	uint32_t bytes_read = 0;
 80013aa:	2500      	movs	r5, #0
	for(int i=0; i<len; i++) {
		HAL_SPI_Receive(&hspi3, &data[i], 1, HAL_MAX_DELAY);
 80013ac:	4f23      	ldr	r7, [pc, #140]	; (800143c <spiram_read_array_from_ringbuffer+0xd8>)
		spiram_ringbuffer_tail++;
		bytes_read++;
		if (spiram_ringbuffer_tail >= 0x20000) {
 80013ae:	f8df b090 	ldr.w	fp, [pc, #144]	; 8001440 <spiram_read_array_from_ringbuffer+0xdc>
			spiram_ringbuffer_tail = 0;
			disableRAM();
 80013b2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001438 <spiram_read_array_from_ringbuffer+0xd4>
	for(int i=0; i<len; i++) {
 80013b6:	454d      	cmp	r5, r9
 80013b8:	d011      	beq.n	80013de <spiram_read_array_from_ringbuffer+0x7a>
		HAL_SPI_Receive(&hspi3, &data[i], 1, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013be:	eb0a 0105 	add.w	r1, sl, r5
 80013c2:	2201      	movs	r2, #1
 80013c4:	4638      	mov	r0, r7
 80013c6:	f003 fb1f 	bl	8004a08 <HAL_SPI_Receive>
		spiram_ringbuffer_tail++;
 80013ca:	6823      	ldr	r3, [r4, #0]
		bytes_read++;
 80013cc:	3501      	adds	r5, #1
		spiram_ringbuffer_tail++;
 80013ce:	3301      	adds	r3, #1
		if (spiram_ringbuffer_tail >= 0x20000) {
 80013d0:	455b      	cmp	r3, fp
 80013d2:	d80e      	bhi.n	80013f2 <spiram_read_array_from_ringbuffer+0x8e>
		spiram_ringbuffer_tail++;
 80013d4:	6023      	str	r3, [r4, #0]
			tmp[3] = 0x00;
			spiram_setmode(SEQ_MODE);
			enableRAM();
			HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
		}
		if (spiram_ringbuffer_tail == spiram_ringbuffer_head) {
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	6833      	ldr	r3, [r6, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d1eb      	bne.n	80013b6 <spiram_read_array_from_ringbuffer+0x52>
			break;
		}
	}
	disableRAM();
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <spiram_read_array_from_ringbuffer+0xd4>)
 80013e6:	f001 fda5 	bl	8002f34 <HAL_GPIO_WritePin>

	return bytes_read;
}
 80013ea:	4628      	mov	r0, r5
 80013ec:	b005      	add	sp, #20
 80013ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			spiram_ringbuffer_tail = 0;
 80013f2:	2300      	movs	r3, #0
			disableRAM();
 80013f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f8:	4640      	mov	r0, r8
 80013fa:	2201      	movs	r2, #1
			spiram_ringbuffer_tail = 0;
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	9301      	str	r3, [sp, #4]
			disableRAM();
 8001400:	f001 fd98 	bl	8002f34 <HAL_GPIO_WritePin>
			tmp[0] = READ;
 8001404:	2203      	movs	r2, #3
			spiram_setmode(SEQ_MODE);
 8001406:	2040      	movs	r0, #64	; 0x40
			tmp[0] = READ;
 8001408:	9203      	str	r2, [sp, #12]
			spiram_setmode(SEQ_MODE);
 800140a:	f7ff fed1 	bl	80011b0 <spiram_setmode>
			enableRAM();
 800140e:	9b01      	ldr	r3, [sp, #4]
 8001410:	4640      	mov	r0, r8
 8001412:	461a      	mov	r2, r3
 8001414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001418:	f001 fd8c 	bl	8002f34 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi3, tmp, 4, HAL_MAX_DELAY);
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001420:	2204      	movs	r2, #4
 8001422:	a903      	add	r1, sp, #12
 8001424:	4638      	mov	r0, r7
 8001426:	f003 f954 	bl	80046d2 <HAL_SPI_Transmit>
 800142a:	e7d4      	b.n	80013d6 <spiram_read_array_from_ringbuffer+0x72>
	if (spiram_ringbuffer_head == spiram_ringbuffer_tail) return 0;
 800142c:	2500      	movs	r5, #0
 800142e:	e7dc      	b.n	80013ea <spiram_read_array_from_ringbuffer+0x86>
 8001430:	20000764 	.word	0x20000764
 8001434:	20000760 	.word	0x20000760
 8001438:	40010800 	.word	0x40010800
 800143c:	200055b0 	.word	0x200055b0
 8001440:	0001ffff 	.word	0x0001ffff

08001444 <spiram_clear_ringbuffer>:

void spiram_clear_ringbuffer(void) {
	spiram_ringbuffer_head = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	4a02      	ldr	r2, [pc, #8]	; (8001450 <spiram_clear_ringbuffer+0xc>)
 8001448:	6013      	str	r3, [r2, #0]
	spiram_ringbuffer_tail = 0;
 800144a:	4a02      	ldr	r2, [pc, #8]	; (8001454 <spiram_clear_ringbuffer+0x10>)
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	4770      	bx	lr
 8001450:	20000760 	.word	0x20000760
 8001454:	20000764 	.word	0x20000764

08001458 <spiram_get_remaining_space_in_ringbuffer>:

uint32_t spiram_get_remaining_space_in_ringbuffer() {
	return (spiram_ringbuffer_tail > spiram_ringbuffer_head) ? spiram_ringbuffer_tail-spiram_ringbuffer_head : 0x20000 - spiram_ringbuffer_head + spiram_ringbuffer_tail;
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <spiram_get_remaining_space_in_ringbuffer+0x14>)
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <spiram_get_remaining_space_in_ringbuffer+0x18>)
 800145c:	6810      	ldr	r0, [r2, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4283      	cmp	r3, r0
 8001462:	bf98      	it	ls
 8001464:	f503 3300 	addls.w	r3, r3, #131072	; 0x20000
 8001468:	1a18      	subs	r0, r3, r0
}
 800146a:	4770      	bx	lr
 800146c:	20000760 	.word	0x20000760
 8001470:	20000764 	.word	0x20000764

08001474 <spiram_get_num_of_bytes_in_ringbuffer>:

uint16_t spiram_get_num_of_bytes_in_ringbuffer() {
 8001474:	b508      	push	{r3, lr}
    return 0x20000 - spiram_get_remaining_space_in_ringbuffer();
 8001476:	f7ff ffef 	bl	8001458 <spiram_get_remaining_space_in_ringbuffer>
 800147a:	4240      	negs	r0, r0
}
 800147c:	b280      	uxth	r0, r0
 800147e:	bd08      	pop	{r3, pc}

08001480 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_MspInit+0x48>)
{
 8001482:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001484:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001486:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001490:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001494:	f002 0201 	and.w	r2, r2, #1
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a2:	61da      	str	r2, [r3, #28]
 80014a4:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b0:	f000 ff3c 	bl	800232c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_MspInit+0x4c>)
 80014b6:	6853      	ldr	r3, [r2, #4]
 80014b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	b003      	add	sp, #12
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_CRC_MspInit+0x24>)
{
 80014d4:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d10a      	bne.n	80014f0 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014da:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014f0:	b002      	add	sp, #8
 80014f2:	4770      	bx	lr
 80014f4:	40023000 	.word	0x40023000

080014f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014f8:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RTC_MspInit+0x30>)
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10e      	bne.n	8001520 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001502:	f002 f96d 	bl	80037e0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RTC_MspInit+0x34>)
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800150e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001510:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_RTC_MspInit+0x38>)
 800151e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001520:	b003      	add	sp, #12
 8001522:	f85d fb04 	ldr.w	pc, [sp], #4
 8001526:	bf00      	nop
 8001528:	40002800 	.word	0x40002800
 800152c:	40021000 	.word	0x40021000
 8001530:	4242043c 	.word	0x4242043c

08001534 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001534:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	2410      	movs	r4, #16
{
 8001538:	4605      	mov	r5, r0
 800153a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	4622      	mov	r2, r4
 800153e:	2100      	movs	r1, #0
 8001540:	eb0d 0004 	add.w	r0, sp, r4
 8001544:	f015 f8f2 	bl	801672c <memset>
  if(hspi->Instance==SPI1)
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	4a32      	ldr	r2, [pc, #200]	; (8001614 <HAL_SPI_MspInit+0xe0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d130      	bne.n	80015b2 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001550:	4b31      	ldr	r3, [pc, #196]	; (8001618 <HAL_SPI_MspInit+0xe4>)
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2028      	movs	r0, #40	; 0x28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001554:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2500      	movs	r5, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001564:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	f042 0208 	orr.w	r2, r2, #8
 8001572:	619a      	str	r2, [r3, #24]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001584:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	4825      	ldr	r0, [pc, #148]	; (800161c <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f001 fb79 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	eb0d 0104 	add.w	r1, sp, r4
 8001594:	4821      	ldr	r0, [pc, #132]	; (800161c <HAL_SPI_MspInit+0xe8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001596:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800159a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f001 fb70 	bl	8002c80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_SPI_MspInit+0xec>)
 80015a2:	6853      	ldr	r3, [r2, #4]
 80015a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015a8:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    __HAL_AFIO_REMAP_SPI3_ENABLE();
 80015ac:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015ae:	b009      	add	sp, #36	; 0x24
 80015b0:	bd30      	pop	{r4, r5, pc}
  else if(hspi->Instance==SPI3)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <HAL_SPI_MspInit+0xf0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d1fa      	bne.n	80015ae <HAL_SPI_MspInit+0x7a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_SPI_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015bc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	481a      	ldr	r0, [pc, #104]	; (8001628 <HAL_SPI_MspInit+0xf4>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c4:	61da      	str	r2, [r3, #28]
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80015cc:	9202      	str	r2, [sp, #8]
 80015ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0210 	orr.w	r2, r2, #16
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	9303      	str	r3, [sp, #12]
 80015e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f001 fb46 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f8:	2300      	movs	r3, #0
 80015fa:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	a904      	add	r1, sp, #16
 8001602:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_SPI_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001606:	f001 fb3b 	bl	8002c80 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI3_ENABLE();
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_SPI_MspInit+0xec>)
 800160c:	6853      	ldr	r3, [r2, #4]
 800160e:	f043 53b8 	orr.w	r3, r3, #385875968	; 0x17000000
 8001612:	e7cb      	b.n	80015ac <HAL_SPI_MspInit+0x78>
 8001614:	40013000 	.word	0x40013000
 8001618:	40021000 	.word	0x40021000
 800161c:	40010c00 	.word	0x40010c00
 8001620:	40010000 	.word	0x40010000
 8001624:	40003c00 	.word	0x40003c00
 8001628:	40011000 	.word	0x40011000

0800162c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_SPI_MspDeInit+0x38>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d109      	bne.n	8001648 <HAL_SPI_MspDeInit+0x1c>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8001634:	2138      	movs	r1, #56	; 0x38
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001636:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
 800163a:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <HAL_SPI_MspDeInit+0x3c>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 800163e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001642:	6193      	str	r3, [r2, #24]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8001644:	f001 bbfc 	b.w	8002e40 <HAL_GPIO_DeInit>
  else if(hspi->Instance==SPI3)
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_SPI_MspDeInit+0x40>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d109      	bne.n	8001662 <HAL_SPI_MspDeInit+0x36>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800164e:	f502 32ea 	add.w	r2, r2, #119808	; 0x1d400
 8001652:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8001654:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001658:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800165c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <HAL_SPI_MspDeInit+0x44>)
 8001660:	e7f0      	b.n	8001644 <HAL_SPI_MspDeInit+0x18>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001662:	4770      	bx	lr
 8001664:	40013000 	.word	0x40013000
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40003c00 	.word	0x40003c00
 8001670:	40011000 	.word	0x40011000

08001674 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001674:	6802      	ldr	r2, [r0, #0]
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_TIM_Base_MspInit+0x24>)
{
 8001678:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM4)
 800167a:	429a      	cmp	r2, r3
 800167c:	d10a      	bne.n	8001694 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800167e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	61da      	str	r2, [r3, #28]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001694:	b002      	add	sp, #8
 8001696:	4770      	bx	lr
 8001698:	40000800 	.word	0x40000800

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b510      	push	{r4, lr}
 800169e:	4604      	mov	r4, r0
 80016a0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	a802      	add	r0, sp, #8
 80016a8:	f015 f840 	bl	801672c <memset>
  if(huart->Instance==USART1)
 80016ac:	6822      	ldr	r2, [r4, #0]
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_UART_MspInit+0x70>)
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d128      	bne.n	8001706 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016b4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80016b8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80016bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c0:	619a      	str	r2, [r3, #24]
 80016c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	f042 0204 	orr.w	r2, r2, #4
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f001 fac7 	bl	8002c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f001 fabd 	bl	8002c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001706:	b006      	add	sp, #24
 8001708:	bd10      	pop	{r4, pc}
 800170a:	bf00      	nop
 800170c:	40013800 	.word	0x40013800
 8001710:	40010800 	.word	0x40010800

08001714 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_InitTick+0x7c>)
{
 8001716:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001718:	699a      	ldr	r2, [r3, #24]
{
 800171a:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800171c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001720:	619a      	str	r2, [r3, #24]
 8001722:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172a:	9302      	str	r3, [sp, #8]
{
 800172c:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800172e:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001730:	4c18      	ldr	r4, [pc, #96]	; (8001794 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001734:	f002 fb7e 	bl	8003e34 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001738:	f002 fb6c 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_InitTick+0x84>)
 800173e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001740:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001744:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_InitTick+0x88>)
 8001748:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800174c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001750:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8001752:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001754:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800175a:	f003 fb2f 	bl	8004dbc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800175e:	4605      	mov	r5, r0
 8001760:	b980      	cbnz	r0, 8001784 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001762:	4620      	mov	r0, r4
 8001764:	f003 fa16 	bl	8004b94 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001768:	4605      	mov	r5, r0
 800176a:	b958      	cbnz	r0, 8001784 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f000 fe11 	bl	8002394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	2e0f      	cmp	r6, #15
 8001774:	d809      	bhi.n	800178a <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001776:	462a      	mov	r2, r5
 8001778:	4631      	mov	r1, r6
 800177a:	2019      	movs	r0, #25
 800177c:	f000 fdd6 	bl	800232c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <HAL_InitTick+0x8c>)
 8001782:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001784:	4628      	mov	r0, r5
 8001786:	b008      	add	sp, #32
 8001788:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 800178a:	2501      	movs	r5, #1
 800178c:	e7fa      	b.n	8001784 <HAL_InitTick+0x70>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	200058f0 	.word	0x200058f0
 8001798:	40012c00 	.word	0x40012c00
 800179c:	000f4240 	.word	0x000f4240
 80017a0:	20000054 	.word	0x20000054

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler>

080017ae <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	4770      	bx	lr

080017b0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b0:	4801      	ldr	r0, [pc, #4]	; (80017b8 <TIM1_UP_IRQHandler+0x8>)
 80017b2:	f003 ba21 	b.w	8004bf8 <HAL_TIM_IRQHandler>
 80017b6:	bf00      	nop
 80017b8:	200058f0 	.word	0x200058f0

080017bc <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80017bc:	4801      	ldr	r0, [pc, #4]	; (80017c4 <ETH_IRQHandler+0x8>)
 80017be:	f000 bfdc 	b.w	800277a <HAL_ETH_IRQHandler>
 80017c2:	bf00      	nop
 80017c4:	20009718 	.word	0x20009718

080017c8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017c8:	4801      	ldr	r0, [pc, #4]	; (80017d0 <OTG_FS_IRQHandler+0x8>)
 80017ca:	f001 bcaf 	b.w	800312c <HAL_HCD_IRQHandler>
 80017ce:	bf00      	nop
 80017d0:	2000ddb8 	.word	0x2000ddb8

080017d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	460e      	mov	r6, r1
 80017d8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	460c      	mov	r4, r1
 80017dc:	1ba3      	subs	r3, r4, r6
 80017de:	429d      	cmp	r5, r3
 80017e0:	dc01      	bgt.n	80017e6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017e2:	4628      	mov	r0, r5
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	f804 0b01 	strb.w	r0, [r4], #1
 80017ee:	e7f5      	b.n	80017dc <_read+0x8>

080017f0 <_close>:
}

int _close(int file)
{
	return -1;
}
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f4:	4770      	bx	lr

080017f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80017fa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80017fc:	604b      	str	r3, [r1, #4]
}
 80017fe:	4770      	bx	lr

08001800 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001800:	2001      	movs	r0, #1
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001804:	2000      	movs	r0, #0
 8001806:	4770      	bx	lr

08001808 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <_sbrk+0x2c>)
{
 800180a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800180c:	6819      	ldr	r1, [r3, #0]
{
 800180e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001810:	b909      	cbnz	r1, 8001816 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <_sbrk+0x30>)
 8001814:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	4c08      	ldr	r4, [pc, #32]	; (800183c <_sbrk+0x34>)
 800181a:	4909      	ldr	r1, [pc, #36]	; (8001840 <_sbrk+0x38>)
 800181c:	4402      	add	r2, r0
 800181e:	1b09      	subs	r1, r1, r4
 8001820:	428a      	cmp	r2, r1
  {
    errno = ENOMEM;
 8001822:	bf81      	itttt	hi
 8001824:	220c      	movhi	r2, #12
 8001826:	4b07      	ldrhi	r3, [pc, #28]	; (8001844 <_sbrk+0x3c>)
    return (void *)-1;
 8001828:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    errno = ENOMEM;
 800182c:	601a      	strhi	r2, [r3, #0]
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800182e:	bf98      	it	ls
 8001830:	601a      	strls	r2, [r3, #0]

  return (void *)prev_heap_end;
}
 8001832:	bd10      	pop	{r4, pc}
 8001834:	20000768 	.word	0x20000768
 8001838:	2000e0c0 	.word	0x2000e0c0
 800183c:	00000400 	.word	0x00000400
 8001840:	20010000 	.word	0x20010000
 8001844:	2000e0bc 	.word	0x2000e0bc

08001848 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	4770      	bx	lr
	...

0800184c <delay_us>:
#include <tm.h>

extern TIM_HandleTypeDef htim4;

void delay_us (uint16_t us) {
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 800184c:	2200      	movs	r2, #0
 800184e:	4b03      	ldr	r3, [pc, #12]	; (800185c <delay_us+0x10>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8001854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001856:	4282      	cmp	r2, r0
 8001858:	d3fc      	bcc.n	8001854 <delay_us+0x8>
}
 800185a:	4770      	bx	lr
 800185c:	2000532c 	.word	0x2000532c

08001860 <control_mode_on>:

static inline void await_data_request(void) {
while ( !HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin) );
}

static inline void control_mode_on(void) {
 8001860:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 1);
 8001862:	4c06      	ldr	r4, [pc, #24]	; (800187c <control_mode_on+0x1c>)
 8001864:	2201      	movs	r2, #1
 8001866:	4620      	mov	r0, r4
 8001868:	2140      	movs	r1, #64	; 0x40
 800186a:	f001 fb63 	bl	8002f34 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 0);
 800186e:	4620      	mov	r0, r4
}
 8001870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	f001 bb5c 	b.w	8002f34 <HAL_GPIO_WritePin>
 800187c:	40010c00 	.word	0x40010c00

08001880 <data_mode_on>:

static inline void control_mode_off(void) {
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
}

static inline void data_mode_on(void) {
 8001880:	b510      	push	{r4, lr}
HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 8001882:	4c06      	ldr	r4, [pc, #24]	; (800189c <data_mode_on+0x1c>)
 8001884:	2201      	movs	r2, #1
 8001886:	4620      	mov	r0, r4
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	f001 fb53 	bl	8002f34 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 0);
 800188e:	4620      	mov	r0, r4
}
 8001890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	f001 bb4c 	b.w	8002f34 <HAL_GPIO_WritePin>
 800189c:	40010c00 	.word	0x40010c00

080018a0 <data_mode_off>:

static inline void data_mode_off(void) {
  HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2140      	movs	r1, #64	; 0x40
 80018a4:	4801      	ldr	r0, [pc, #4]	; (80018ac <data_mode_off+0xc>)
 80018a6:	f001 bb45 	b.w	8002f34 <HAL_GPIO_WritePin>
 80018aa:	bf00      	nop
 80018ac:	40010c00 	.word	0x40010c00

080018b0 <VS1003_SPI_transfer>:
  spiram_clear_ringbuffer();
  VS1003_sdi_send_zeroes(2048);
  spiram_clear_ringbuffer();
}

static uint8_t VS1003_SPI_transfer(uint8_t outB) {
 80018b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
uint8_t answer;

HAL_SPI_TransmitReceive(&hspi1, &outB, &answer, 1, HAL_MAX_DELAY);
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
static uint8_t VS1003_SPI_transfer(uint8_t outB) {
 80018b6:	f88d 000f 	strb.w	r0, [sp, #15]
HAL_SPI_TransmitReceive(&hspi1, &outB, &answer, 1, HAL_MAX_DELAY);
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f10d 0217 	add.w	r2, sp, #23
 80018c0:	2301      	movs	r3, #1
 80018c2:	f10d 010f 	add.w	r1, sp, #15
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <VS1003_SPI_transfer+0x28>)
 80018c8:	f002 ffae 	bl	8004828 <HAL_SPI_TransmitReceive>
return answer;
}
 80018cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018d0:	b007      	add	sp, #28
 80018d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018d6:	bf00      	nop
 80018d8:	20005664 	.word	0x20005664

080018dc <await_data_request>:
static inline void await_data_request(void) {
 80018dc:	b510      	push	{r4, lr}
while ( !HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin) );
 80018de:	4c04      	ldr	r4, [pc, #16]	; (80018f0 <await_data_request+0x14>)
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4620      	mov	r0, r4
 80018e6:	f001 fb1f 	bl	8002f28 <HAL_GPIO_ReadPin>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d0f8      	beq.n	80018e0 <await_data_request+0x4>
}
 80018ee:	bd10      	pop	{r4, pc}
 80018f0:	40010c00 	.word	0x40010c00

080018f4 <VS1003_sdi_send_chunk.part.0>:
void VS1003_sdi_send_chunk(const uint8_t* data, int len) {
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
    data_mode_on();
 80018fa:	f7ff ffc1 	bl	8001880 <data_mode_on>
    await_data_request();
 80018fe:	f7ff ffed 	bl	80018dc <await_data_request>
 8001902:	4425      	add	r5, r4
    while ( len-- ) VS1003_SPI_transfer(*data++);
 8001904:	42ac      	cmp	r4, r5
 8001906:	d103      	bne.n	8001910 <VS1003_sdi_send_chunk.part.0+0x1c>
}
 8001908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    data_mode_off();
 800190c:	f7ff bfc8 	b.w	80018a0 <data_mode_off>
    while ( len-- ) VS1003_SPI_transfer(*data++);
 8001910:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001914:	f7ff ffcc 	bl	80018b0 <VS1003_SPI_transfer>
 8001918:	e7f4      	b.n	8001904 <VS1003_sdi_send_chunk.part.0+0x10>
	...

0800191c <VS1003_feed_from_buffer>:
static feed_ret_t VS1003_feed_from_buffer (void) {
 800191c:	b510      	push	{r4, lr}
    if (!HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin)) return FEED_RET_NO_DATA_NEEDED;
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
static feed_ret_t VS1003_feed_from_buffer (void) {
 8001922:	b088      	sub	sp, #32
    if (!HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin)) return FEED_RET_NO_DATA_NEEDED;
 8001924:	4810      	ldr	r0, [pc, #64]	; (8001968 <VS1003_feed_from_buffer+0x4c>)
 8001926:	f001 faff 	bl	8002f28 <HAL_GPIO_ReadPin>
 800192a:	b1c8      	cbz	r0, 8001960 <VS1003_feed_from_buffer+0x44>
    } while(HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin));
 800192c:	4c0e      	ldr	r4, [pc, #56]	; (8001968 <VS1003_feed_from_buffer+0x4c>)
        if (spiram_get_num_of_bytes_in_ringbuffer() < 32) return FEED_RET_BUFFER_EMPTY;
 800192e:	f7ff fda1 	bl	8001474 <spiram_get_num_of_bytes_in_ringbuffer>
 8001932:	281f      	cmp	r0, #31
 8001934:	d916      	bls.n	8001964 <VS1003_feed_from_buffer+0x48>
        uint16_t w = spiram_read_array_from_ringbuffer(data, 32);
 8001936:	2120      	movs	r1, #32
 8001938:	4668      	mov	r0, sp
 800193a:	f7ff fd13 	bl	8001364 <spiram_read_array_from_ringbuffer>
        if (w == 32) VS1003_sdi_send_chunk(data, 32);
 800193e:	b281      	uxth	r1, r0
 8001940:	2920      	cmp	r1, #32
 8001942:	d102      	bne.n	800194a <VS1003_feed_from_buffer+0x2e>
 8001944:	4668      	mov	r0, sp
 8001946:	f7ff ffd5 	bl	80018f4 <VS1003_sdi_send_chunk.part.0>
        asm("nop");
 800194a:	bf00      	nop
        asm("nop");
 800194c:	bf00      	nop
        asm("nop");
 800194e:	bf00      	nop
    } while(HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin));
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001954:	4620      	mov	r0, r4
 8001956:	f001 fae7 	bl	8002f28 <HAL_GPIO_ReadPin>
 800195a:	2800      	cmp	r0, #0
 800195c:	d1e7      	bne.n	800192e <VS1003_feed_from_buffer+0x12>
    return FEED_RET_OK;
 800195e:	2001      	movs	r0, #1
}
 8001960:	b008      	add	sp, #32
 8001962:	bd10      	pop	{r4, pc}
        if (spiram_get_num_of_bytes_in_ringbuffer() < 32) return FEED_RET_BUFFER_EMPTY;
 8001964:	2002      	movs	r0, #2
 8001966:	e7fb      	b.n	8001960 <VS1003_feed_from_buffer+0x44>
 8001968:	40010c00 	.word	0x40010c00

0800196c <VS1003_read_register>:
uint16_t VS1003_read_register(uint8_t _reg) {
 800196c:	b510      	push	{r4, lr}
 800196e:	4604      	mov	r4, r0
  control_mode_on();
 8001970:	f7ff ff76 	bl	8001860 <control_mode_on>
  delay_us(1); // tXCSS
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ff69 	bl	800184c <delay_us>
  VS1003_SPI_transfer(VS_READ_COMMAND); // Read operation
 800197a:	2003      	movs	r0, #3
 800197c:	f7ff ff98 	bl	80018b0 <VS1003_SPI_transfer>
  VS1003_SPI_transfer(_reg); // Which register
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff ff95 	bl	80018b0 <VS1003_SPI_transfer>
  result = VS1003_SPI_transfer(0xff) << 8; // read high byte
 8001986:	20ff      	movs	r0, #255	; 0xff
 8001988:	f7ff ff92 	bl	80018b0 <VS1003_SPI_transfer>
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	b284      	uxth	r4, r0
  result |= VS1003_SPI_transfer(0xff); // read low byte
 8001990:	20ff      	movs	r0, #255	; 0xff
 8001992:	f7ff ff8d 	bl	80018b0 <VS1003_SPI_transfer>
 8001996:	4304      	orrs	r4, r0
  delay_us(1); // tXCSH
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff ff57 	bl	800184c <delay_us>
  result |= VS1003_SPI_transfer(0xff); // read low byte
 800199e:	b2a4      	uxth	r4, r4
  await_data_request();
 80019a0:	f7ff ff9c 	bl	80018dc <await_data_request>
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <VS1003_read_register+0x48>)
 80019aa:	f001 fac3 	bl	8002f34 <HAL_GPIO_WritePin>
}
 80019ae:	4620      	mov	r0, r4
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	40010c00 	.word	0x40010c00

080019b8 <VS1003_write_register>:
void VS1003_write_register(uint8_t _reg,uint16_t _value) {
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	4605      	mov	r5, r0
 80019bc:	460c      	mov	r4, r1
  control_mode_on();
 80019be:	f7ff ff4f 	bl	8001860 <control_mode_on>
  delay_us(1); // tXCSS
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff ff42 	bl	800184c <delay_us>
  VS1003_SPI_transfer(VS_WRITE_COMMAND); // Write operation
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff ff71 	bl	80018b0 <VS1003_SPI_transfer>
  VS1003_SPI_transfer(_reg); // Which register
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff ff6e 	bl	80018b0 <VS1003_SPI_transfer>
  VS1003_SPI_transfer(_value >> 8); // Send hi byte
 80019d4:	0a20      	lsrs	r0, r4, #8
 80019d6:	f7ff ff6b 	bl	80018b0 <VS1003_SPI_transfer>
  VS1003_SPI_transfer(_value & 0xff); // Send lo byte
 80019da:	b2e0      	uxtb	r0, r4
 80019dc:	f7ff ff68 	bl	80018b0 <VS1003_SPI_transfer>
  delay_us(1); // tXCSH
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff ff33 	bl	800184c <delay_us>
  await_data_request();
 80019e6:	f7ff ff79 	bl	80018dc <await_data_request>
}
 80019ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	4801      	ldr	r0, [pc, #4]	; (80019f8 <VS1003_write_register+0x40>)
 80019f4:	f001 ba9e 	b.w	8002f34 <HAL_GPIO_WritePin>
 80019f8:	40010c00 	.word	0x40010c00

080019fc <VS1003_sdi_send_zeroes>:
void VS1003_sdi_send_zeroes(int len) {
 80019fc:	b538      	push	{r3, r4, r5, lr}
 80019fe:	4604      	mov	r4, r0
  data_mode_on();
 8001a00:	f7ff ff3e 	bl	8001880 <data_mode_on>
  while ( len ) {
 8001a04:	b91c      	cbnz	r4, 8001a0e <VS1003_sdi_send_zeroes+0x12>
}
 8001a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  data_mode_off();
 8001a0a:	f7ff bf49 	b.w	80018a0 <data_mode_off>
    await_data_request();
 8001a0e:	f7ff ff65 	bl	80018dc <await_data_request>
    chunk_length = min(len,vs1003_chunk_size);
 8001a12:	2c20      	cmp	r4, #32
 8001a14:	4625      	mov	r5, r4
 8001a16:	bfa8      	it	ge
 8001a18:	2520      	movge	r5, #32
    len -= chunk_length;
 8001a1a:	1b64      	subs	r4, r4, r5
    while ( chunk_length-- ) VS1003_SPI_transfer(0);
 8001a1c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8001a20:	d3f0      	bcc.n	8001a04 <VS1003_sdi_send_zeroes+0x8>
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff44 	bl	80018b0 <VS1003_SPI_transfer>
 8001a28:	e7f8      	b.n	8001a1c <VS1003_sdi_send_zeroes+0x20>

08001a2a <VS1003_stopPlaying>:
static void VS1003_stopPlaying(void) {
 8001a2a:	b508      	push	{r3, lr}
  spiram_clear_ringbuffer();
 8001a2c:	f7ff fd0a 	bl	8001444 <spiram_clear_ringbuffer>
  VS1003_sdi_send_zeroes(2048);
 8001a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a34:	f7ff ffe2 	bl	80019fc <VS1003_sdi_send_zeroes>
}
 8001a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  spiram_clear_ringbuffer();
 8001a3c:	f7ff bd02 	b.w	8001444 <spiram_clear_ringbuffer>

08001a40 <VS1003_setVolume>:
  VS1003_write_register(SCI_VOL,value); // VOL
 8001a40:	ea40 2100 	orr.w	r1, r0, r0, lsl #8
 8001a44:	200b      	movs	r0, #11
 8001a46:	f7ff bfb7 	b.w	80019b8 <VS1003_write_register>
	...

08001a4c <VS1003_print_byte_register>:
  char extra_tab = strlen(register_names[reg]) < 5 ? '\t' : 0;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <VS1003_print_byte_register+0x30>)
void VS1003_print_byte_register(uint8_t reg) {
 8001a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  char extra_tab = strlen(register_names[reg]) < 5 ? '\t' : 0;
 8001a50:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
void VS1003_print_byte_register(uint8_t reg) {
 8001a54:	4604      	mov	r4, r0
  char extra_tab = strlen(register_names[reg]) < 5 ? '\t' : 0;
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7fe fbf4 	bl	8000244 <strlen>
 8001a5c:	2804      	cmp	r0, #4
  printf("%02x %s\t%c = 0x%02x\r\n", reg, register_names[reg], extra_tab, VS1003_read_register(reg));
 8001a5e:	4620      	mov	r0, r4
  char extra_tab = strlen(register_names[reg]) < 5 ? '\t' : 0;
 8001a60:	bf94      	ite	ls
 8001a62:	2609      	movls	r6, #9
 8001a64:	2600      	movhi	r6, #0
  printf("%02x %s\t%c = 0x%02x\r\n", reg, register_names[reg], extra_tab, VS1003_read_register(reg));
 8001a66:	f7ff ff81 	bl	800196c <VS1003_read_register>
 8001a6a:	4633      	mov	r3, r6
 8001a6c:	9000      	str	r0, [sp, #0]
 8001a6e:	462a      	mov	r2, r5
 8001a70:	4621      	mov	r1, r4
 8001a72:	4803      	ldr	r0, [pc, #12]	; (8001a80 <VS1003_print_byte_register+0x34>)
 8001a74:	f014 ff08 	bl	8016888 <iprintf>
}
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	0801830f 	.word	0x0801830f

08001a84 <VS1003_printDetails>:
void VS1003_printDetails(void) {
 8001a84:	b510      	push	{r4, lr}
  printf("VS1003 Configuration:\r\n");
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <VS1003_printDetails+0x18>)
 8001a88:	f014 ff86 	bl	8016998 <puts>
 8001a8c:	2400      	movs	r4, #0
    VS1003_print_byte_register(i++);
 8001a8e:	b2e0      	uxtb	r0, r4
 8001a90:	3401      	adds	r4, #1
 8001a92:	f7ff ffdb 	bl	8001a4c <VS1003_print_byte_register>
  while ( i <= SCI_num_registers )
 8001a96:	2c10      	cmp	r4, #16
 8001a98:	d1f9      	bne.n	8001a8e <VS1003_printDetails+0xa>
}
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	080182f8 	.word	0x080182f8

08001aa0 <VS1003_begin>:
void VS1003_begin(void) {
 8001aa0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 0);
 8001aa2:	4d33      	ldr	r5, [pc, #204]	; (8001b70 <VS1003_begin+0xd0>)
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 8001aa4:	4c33      	ldr	r4, [pc, #204]	; (8001b74 <VS1003_begin+0xd4>)
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 0);
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aae:	f001 fa41 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XCS_GPIO_Port, VS_XCS_Pin, 1);
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	f001 fa3c 	bl	8002f34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VS_XDCS_GPIO_Port, VS_XDCS_Pin, 1);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f001 fa37 	bl	8002f34 <HAL_GPIO_WritePin>
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256); //281 kHz
 8001ac6:	4c2c      	ldr	r4, [pc, #176]	; (8001b78 <VS1003_begin+0xd8>)
  printf("Booting VS1003...\r\n");
 8001ac8:	482c      	ldr	r0, [pc, #176]	; (8001b7c <VS1003_begin+0xdc>)
 8001aca:	f014 ff65 	bl	8016998 <puts>
  osDelay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f007 ff7f 	bl	80099d2 <osDelay>
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256); //281 kHz
 8001ad4:	6822      	ldr	r2, [r4, #0]
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 1);
 8001ad6:	4628      	mov	r0, r5
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256); //281 kHz
 8001ad8:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 1);
 8001ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_256); //281 kHz
 8001ade:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001ae2:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(VS_XRST_GPIO_Port, VS_XRST_Pin, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f001 fa25 	bl	8002f34 <HAL_GPIO_WritePin>
  VS1003_write_register(SCI_VOL,0xffff); // VOL
 8001aea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aee:	200b      	movs	r0, #11
 8001af0:	f7ff ff62 	bl	80019b8 <VS1003_write_register>
  VS1003_write_register(SCI_AUDATA,10);
 8001af4:	210a      	movs	r1, #10
 8001af6:	2005      	movs	r0, #5
 8001af8:	f7ff ff5e 	bl	80019b8 <VS1003_write_register>
  osDelay(100);
 8001afc:	2064      	movs	r0, #100	; 0x64
 8001afe:	f007 ff68 	bl	80099d2 <osDelay>
  VS1003_write_register(SCI_VOL,0xfefe); // VOL
 8001b02:	f64f 61fe 	movw	r1, #65278	; 0xfefe
 8001b06:	200b      	movs	r0, #11
 8001b08:	f7ff ff56 	bl	80019b8 <VS1003_write_register>
  printf("VS1003 still booting\r\n");
 8001b0c:	481c      	ldr	r0, [pc, #112]	; (8001b80 <VS1003_begin+0xe0>)
 8001b0e:	f014 ff43 	bl	8016998 <puts>
  VS1003_write_register(SCI_AUDATA,44101); // 44.1kHz stereo
 8001b12:	f64a 4145 	movw	r1, #44101	; 0xac45
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff ff4e 	bl	80019b8 <VS1003_write_register>
  VS1003_write_register(SCI_VOL,0x2020); // VOL
 8001b1c:	f242 0120 	movw	r1, #8224	; 0x2020
 8001b20:	200b      	movs	r0, #11
 8001b22:	f7ff ff49 	bl	80019b8 <VS1003_write_register>
  VS1003_write_register(SCI_MODE, (1 << SM_SDINEW) | (1 << SM_RESET) );
 8001b26:	f640 0104 	movw	r1, #2052	; 0x804
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff ff44 	bl	80019b8 <VS1003_write_register>
  osDelay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f007 ff4e 	bl	80099d2 <osDelay>
  await_data_request();
 8001b36:	f7ff fed1 	bl	80018dc <await_data_request>
  VS1003_write_register(SCI_CLOCKF,0xF800); // Experimenting with highest clock settings
 8001b3a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7ff ff3a 	bl	80019b8 <VS1003_write_register>
  osDelay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f007 ff44 	bl	80099d2 <osDelay>
  await_data_request();
 8001b4a:	f7ff fec7 	bl	80018dc <await_data_request>
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_8);       //9 MHz
 8001b4e:	6822      	ldr	r2, [r4, #0]
  printf("VS1003 Set\r\n");
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <VS1003_begin+0xe4>)
  MODIFY_REG(hspi1.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_8);       //9 MHz
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6013      	str	r3, [r2, #0]
  printf("VS1003 Set\r\n");
 8001b5e:	f014 ff1b 	bl	8016998 <puts>
  VS1003_printDetails();
 8001b62:	f7ff ff8f 	bl	8001a84 <VS1003_printDetails>
}
 8001b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  printf("VS1003 OK\r\n");
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <VS1003_begin+0xe8>)
 8001b6c:	f014 bf14 	b.w	8016998 <puts>
 8001b70:	40011000 	.word	0x40011000
 8001b74:	40010c00 	.word	0x40010c00
 8001b78:	20005664 	.word	0x20005664
 8001b7c:	08018012 	.word	0x08018012
 8001b80:	08018025 	.word	0x08018025
 8001b84:	0801803b 	.word	0x0801803b
 8001b88:	08018047 	.word	0x08018047

08001b8c <VS1003_play_http_stream>:

  return;
}

/*Always call VS1003_stop() before calling that function*/
void VS1003_play_http_stream(const char* url) {
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (StreamState != STREAM_HOME) return;
 8001b8e:	4d11      	ldr	r5, [pc, #68]	; (8001bd4 <VS1003_play_http_stream+0x48>)
void VS1003_play_http_stream(const char* url) {
 8001b90:	4607      	mov	r7, r0
  if (StreamState != STREAM_HOME) return;
 8001b92:	782b      	ldrb	r3, [r5, #0]
 8001b94:	b9e3      	cbnz	r3, 8001bd0 <VS1003_play_http_stream+0x44>

  if (parse_url(url, strlen(url), &uri)) {
 8001b96:	f7fe fb55 	bl	8000244 <strlen>
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <VS1003_play_http_stream+0x4c>)
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	f7fe fd9a 	bl	80006d8 <parse_url>
 8001ba4:	4e0d      	ldr	r6, [pc, #52]	; (8001bdc <VS1003_play_http_stream+0x50>)
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	b160      	cbz	r0, 8001bc4 <VS1003_play_http_stream+0x38>
	  printf("URL %s parsed sucessfully\r\n", url);
 8001baa:	4639      	mov	r1, r7
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <VS1003_play_http_stream+0x54>)
 8001bae:	f014 fe6b 	bl	8016888 <iprintf>
	  StreamState = STREAM_HTTP_CLOSE;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	702b      	strb	r3, [r5, #0]
	  ReconnectStrategy = RECONNECT_WAIT_SHORT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	7033      	strb	r3, [r6, #0]
	VS1003_sdi_send_zeroes(10);
 8001bba:	200a      	movs	r0, #10
	  printf("URL parsing error\r\n");
	  StreamState = STREAM_HOME;
	  ReconnectStrategy = DO_NOT_RECONNECT;
  }
  VS1003_startPlaying();
}
 8001bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	VS1003_sdi_send_zeroes(10);
 8001bc0:	f7ff bf1c 	b.w	80019fc <VS1003_sdi_send_zeroes>
	  printf("URL parsing error\r\n");
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <VS1003_play_http_stream+0x58>)
 8001bc6:	f014 fee7 	bl	8016998 <puts>
	  StreamState = STREAM_HOME;
 8001bca:	702c      	strb	r4, [r5, #0]
	  ReconnectStrategy = DO_NOT_RECONNECT;
 8001bcc:	7034      	strb	r4, [r6, #0]
 8001bce:	e7f4      	b.n	8001bba <VS1003_play_http_stream+0x2e>
}
 8001bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000076d 	.word	0x2000076d
 8001bd8:	20000774 	.word	0x20000774
 8001bdc:	2000076c 	.word	0x2000076c
 8001be0:	080182aa 	.word	0x080182aa
 8001be4:	080182c6 	.word	0x080182c6

08001be8 <VS1003_play_file>:
    VS1003_stop();
    VS1003_play_http_stream(url);
}

/*Always call VS1003_stop() or VS1003_soft_stop() before calling that function*/
void VS1003_play_file (char* url) {
 8001be8:	b538      	push	{r3, r4, r5, lr}
  if (StreamState != STREAM_HOME) return;
 8001bea:	4c0b      	ldr	r4, [pc, #44]	; (8001c18 <VS1003_play_file+0x30>)
void VS1003_play_file (char* url) {
 8001bec:	4601      	mov	r1, r0
  if (StreamState != STREAM_HOME) return;
 8001bee:	7825      	ldrb	r5, [r4, #0]
 8001bf0:	b94d      	cbnz	r5, 8001c06 <VS1003_play_file+0x1e>

  FRESULT res = f_open(&fsrc, url, FA_READ);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4809      	ldr	r0, [pc, #36]	; (8001c1c <VS1003_play_file+0x34>)
 8001bf6:	f007 f99f 	bl	8008f38 <f_open>
  if (res != FR_OK) {
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	b120      	cbz	r0, 8001c08 <VS1003_play_file+0x20>
	  printf("f_open error code: %i\r\n", res);
 8001bfe:	4808      	ldr	r0, [pc, #32]	; (8001c20 <VS1003_play_file+0x38>)
 8001c00:	f014 fe42 	bl	8016888 <iprintf>
	  StreamState = STREAM_HOME;
 8001c04:	7025      	strb	r5, [r4, #0]
	  return;
  }

  StreamState = STREAM_FILE_GET_DATA;
  VS1003_startPlaying();         //Start playing song
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
  StreamState = STREAM_FILE_GET_DATA;
 8001c08:	2306      	movs	r3, #6
	VS1003_sdi_send_zeroes(10);
 8001c0a:	200a      	movs	r0, #10
  StreamState = STREAM_FILE_GET_DATA;
 8001c0c:	7023      	strb	r3, [r4, #0]
}
 8001c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	VS1003_sdi_send_zeroes(10);
 8001c12:	f7ff bef3 	b.w	80019fc <VS1003_sdi_send_zeroes>
 8001c16:	bf00      	nop
 8001c18:	2000076d 	.word	0x2000076d
 8001c1c:	2000593c 	.word	0x2000593c
 8001c20:	08018292 	.word	0x08018292

08001c24 <VS1003_stop>:
  dir_flag = TRUE;
  strncpy(uri.server, url, sizeof(uri.server)-1);		//we use uri.server to store current directory path
  VS1003_play_next_audio_file_from_directory();
}

void VS1003_stop(void) {
 8001c24:	b538      	push	{r3, r4, r5, lr}
  //Can be stopped only if it is actually playing
  switch (StreamState) {
 8001c26:	4c0e      	ldr	r4, [pc, #56]	; (8001c60 <VS1003_stop+0x3c>)
 8001c28:	7823      	ldrb	r3, [r4, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d816      	bhi.n	8001c5e <VS1003_stop+0x3a>
 8001c30:	e8df f003 	tbb	[pc, r3]
 8001c34:	0f0f0f0f 	.word	0x0f0f0f0f
 8001c38:	0404      	.short	0x0404
 8001c3a:	04          	.byte	0x04
 8001c3b:	00          	.byte	0x00
		  break;
	  case STREAM_FILE_FILL_BUFFER:
	  case STREAM_FILE_GET_DATA:
	  case STREAM_FILE_PLAY_REST:
		  f_close(&fsrc);
		  if (dir_flag) {
 8001c3c:	4d09      	ldr	r5, [pc, #36]	; (8001c64 <VS1003_stop+0x40>)
		  f_close(&fsrc);
 8001c3e:	480a      	ldr	r0, [pc, #40]	; (8001c68 <VS1003_stop+0x44>)
 8001c40:	f007 fb83 	bl	800934a <f_close>
		  if (dir_flag) {
 8001c44:	782b      	ldrb	r3, [r5, #0]
 8001c46:	b123      	cbz	r3, 8001c52 <VS1003_stop+0x2e>
			  f_closedir(&vsdir);
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <VS1003_stop+0x48>)
 8001c4a:	f007 fcf7 	bl	800963c <f_closedir>
			  dir_flag = FALSE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	702b      	strb	r3, [r5, #0]
		  }
		  StreamState = STREAM_HOME;
 8001c52:	2300      	movs	r3, #0
 8001c54:	7023      	strb	r3, [r4, #0]
	  default:
		  return;
		  break;
  }
  VS1003_stopPlaying();
}
 8001c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  VS1003_stopPlaying();
 8001c5a:	f7ff bee6 	b.w	8001a2a <VS1003_stopPlaying>
}
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	2000076d 	.word	0x2000076d
 8001c64:	2000076e 	.word	0x2000076e
 8001c68:	2000593c 	.word	0x2000593c
 8001c6c:	20005b64 	.word	0x20005b64

08001c70 <VS1003_play_next_audio_file_from_directory.part.4>:
void VS1003_play_next_audio_file_from_directory (void) {
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
  while (f_readdir(&vsdir, &info) == FR_OK) {
 8001c72:	4d28      	ldr	r5, [pc, #160]	; (8001d14 <VS1003_play_next_audio_file_from_directory.part.4+0xa4>)
  if (strstr(name, ".MP3") || strstr(name, ".WMA") || strstr(name, ".MID") || strstr(name, ".mp3") || strstr(name, ".wma") || strstr(name, ".mid")) {
 8001c74:	4e28      	ldr	r6, [pc, #160]	; (8001d18 <VS1003_play_next_audio_file_from_directory.part.4+0xa8>)
 8001c76:	4f29      	ldr	r7, [pc, #164]	; (8001d1c <VS1003_play_next_audio_file_from_directory.part.4+0xac>)
void VS1003_play_next_audio_file_from_directory (void) {
 8001c78:	b0d7      	sub	sp, #348	; 0x15c
  while (f_readdir(&vsdir, &info) == FR_OK) {
 8001c7a:	a903      	add	r1, sp, #12
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f007 fcec 	bl	800965a <f_readdir>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d144      	bne.n	8001d10 <VS1003_play_next_audio_file_from_directory.part.4+0xa0>
	  if (!info.fname[0]) {           //Empty string - end of directory
 8001c86:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8001c8a:	b949      	cbnz	r1, 8001ca0 <VS1003_play_next_audio_file_from_directory.part.4+0x30>
		  if (loop_flag) {
 8001c8c:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <VS1003_play_next_audio_file_from_directory.part.4+0xb0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b11b      	cbz	r3, 8001c9a <VS1003_play_next_audio_file_from_directory.part.4+0x2a>
			  f_rewinddir(&vsdir);
 8001c92:	4628      	mov	r0, r5
 8001c94:	f007 fce1 	bl	800965a <f_readdir>
 8001c98:	e7ef      	b.n	8001c7a <VS1003_play_next_audio_file_from_directory.part.4+0xa>
			  VS1003_stop();          //It handles closing dir and resetting dir_flag
 8001c9a:	f7ff ffc3 	bl	8001c24 <VS1003_stop>
 8001c9e:	e7ec      	b.n	8001c7a <VS1003_play_next_audio_file_from_directory.part.4+0xa>
  if (strstr(name, ".MP3") || strstr(name, ".WMA") || strstr(name, ".MID") || strstr(name, ".mp3") || strstr(name, ".wma") || strstr(name, ".mid")) {
 8001ca0:	f10d 0415 	add.w	r4, sp, #21
 8001ca4:	4631      	mov	r1, r6
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f015 f818 	bl	8016cdc <strstr>
 8001cac:	b9c8      	cbnz	r0, 8001ce2 <VS1003_play_next_audio_file_from_directory.part.4+0x72>
 8001cae:	4639      	mov	r1, r7
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f015 f813 	bl	8016cdc <strstr>
 8001cb6:	b9a0      	cbnz	r0, 8001ce2 <VS1003_play_next_audio_file_from_directory.part.4+0x72>
 8001cb8:	491a      	ldr	r1, [pc, #104]	; (8001d24 <VS1003_play_next_audio_file_from_directory.part.4+0xb4>)
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f015 f80e 	bl	8016cdc <strstr>
 8001cc0:	b978      	cbnz	r0, 8001ce2 <VS1003_play_next_audio_file_from_directory.part.4+0x72>
 8001cc2:	4919      	ldr	r1, [pc, #100]	; (8001d28 <VS1003_play_next_audio_file_from_directory.part.4+0xb8>)
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f015 f809 	bl	8016cdc <strstr>
 8001cca:	b950      	cbnz	r0, 8001ce2 <VS1003_play_next_audio_file_from_directory.part.4+0x72>
 8001ccc:	4917      	ldr	r1, [pc, #92]	; (8001d2c <VS1003_play_next_audio_file_from_directory.part.4+0xbc>)
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f015 f804 	bl	8016cdc <strstr>
 8001cd4:	b928      	cbnz	r0, 8001ce2 <VS1003_play_next_audio_file_from_directory.part.4+0x72>
 8001cd6:	4916      	ldr	r1, [pc, #88]	; (8001d30 <VS1003_play_next_audio_file_from_directory.part.4+0xc0>)
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f014 ffff 	bl	8016cdc <strstr>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d0cb      	beq.n	8001c7a <VS1003_play_next_audio_file_from_directory.part.4+0xa>
			  snprintf(buf, sizeof(buf)-1, "%s/%s", uri.server, info.fname);
 8001ce2:	9400      	str	r4, [sp, #0]
	if ( StreamState == STREAM_FILE_GET_DATA || StreamState == STREAM_FILE_PLAY_REST ) {
 8001ce4:	4c13      	ldr	r4, [pc, #76]	; (8001d34 <VS1003_play_next_audio_file_from_directory.part.4+0xc4>)
			  snprintf(buf, sizeof(buf)-1, "%s/%s", uri.server, info.fname);
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <VS1003_play_next_audio_file_from_directory.part.4+0xc8>)
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <VS1003_play_next_audio_file_from_directory.part.4+0xcc>)
 8001cea:	f240 112b 	movw	r1, #299	; 0x12b
 8001cee:	a80b      	add	r0, sp, #44	; 0x2c
 8001cf0:	f014 ff08 	bl	8016b04 <sniprintf>
	if ( StreamState == STREAM_FILE_GET_DATA || StreamState == STREAM_FILE_PLAY_REST ) {
 8001cf4:	7823      	ldrb	r3, [r4, #0]
 8001cf6:	3b06      	subs	r3, #6
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d806      	bhi.n	8001d0a <VS1003_play_next_audio_file_from_directory.part.4+0x9a>
		f_close(&fsrc);
 8001cfc:	4810      	ldr	r0, [pc, #64]	; (8001d40 <VS1003_play_next_audio_file_from_directory.part.4+0xd0>)
 8001cfe:	f007 fb24 	bl	800934a <f_close>
		VS1003_stopPlaying();
 8001d02:	f7ff fe92 	bl	8001a2a <VS1003_stopPlaying>
		StreamState = STREAM_HOME;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7023      	strb	r3, [r4, #0]
			  VS1003_play_file(buf);
 8001d0a:	a80b      	add	r0, sp, #44	; 0x2c
 8001d0c:	f7ff ff6c 	bl	8001be8 <VS1003_play_file>
}
 8001d10:	b057      	add	sp, #348	; 0x15c
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d14:	20005b64 	.word	0x20005b64
 8001d18:	080182d9 	.word	0x080182d9
 8001d1c:	080182de 	.word	0x080182de
 8001d20:	2000076f 	.word	0x2000076f
 8001d24:	080182e3 	.word	0x080182e3
 8001d28:	08017f44 	.word	0x08017f44
 8001d2c:	080182e8 	.word	0x080182e8
 8001d30:	080182ed 	.word	0x080182ed
 8001d34:	2000076d 	.word	0x2000076d
 8001d38:	20000774 	.word	0x20000774
 8001d3c:	080182f2 	.word	0x080182f2
 8001d40:	2000593c 	.word	0x2000593c

08001d44 <VS1003_play_next_audio_file_from_directory>:
  if(!dir_flag) return;       //currently we are not playing directory
 8001d44:	4b02      	ldr	r3, [pc, #8]	; (8001d50 <VS1003_play_next_audio_file_from_directory+0xc>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b10b      	cbz	r3, 8001d4e <VS1003_play_next_audio_file_from_directory+0xa>
 8001d4a:	f7ff bf91 	b.w	8001c70 <VS1003_play_next_audio_file_from_directory.part.4>
}
 8001d4e:	4770      	bx	lr
 8001d50:	2000076e 	.word	0x2000076e

08001d54 <VS1003_handle>:
void VS1003_handle(void) {
 8001d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(StreamState)
 8001d58:	4cae      	ldr	r4, [pc, #696]	; (8002014 <VS1003_handle+0x2c0>)
void VS1003_handle(void) {
 8001d5a:	b08a      	sub	sp, #40	; 0x28
	switch(StreamState)
 8001d5c:	7823      	ldrb	r3, [r4, #0]
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	f200 80de 	bhi.w	8001f20 <VS1003_handle+0x1cc>
 8001d64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d68:	00bb00d0 	.word	0x00bb00d0
 8001d6c:	008a0190 	.word	0x008a0190
 8001d70:	0030004e 	.word	0x0030004e
 8001d74:	01cc000a 	.word	0x01cc000a
 8001d78:	020001eb 	.word	0x020001eb
			   fres = f_read(&fsrc, data, 32, &br);
 8001d7c:	4da6      	ldr	r5, [pc, #664]	; (8002018 <VS1003_handle+0x2c4>)
			   if (HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin)) break;
 8001d7e:	4ea7      	ldr	r6, [pc, #668]	; (800201c <VS1003_handle+0x2c8>)
           while (spiram_get_remaining_space_in_ringbuffer() > 128) {
 8001d80:	f7ff fb6a 	bl	8001458 <spiram_get_remaining_space_in_ringbuffer>
 8001d84:	2880      	cmp	r0, #128	; 0x80
 8001d86:	d914      	bls.n	8001db2 <VS1003_handle+0x5e>
			   fres = f_read(&fsrc, data, 32, &br);
 8001d88:	ab01      	add	r3, sp, #4
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	a902      	add	r1, sp, #8
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f007 f997 	bl	80090c2 <f_read>
			   if ( fres == FR_OK ) {
 8001d94:	2800      	cmp	r0, #0
 8001d96:	f040 81aa 	bne.w	80020ee <VS1003_handle+0x39a>
				   if (br) { spiram_write_array_to_ringbuffer(data, 32); }
 8001d9a:	9b01      	ldr	r3, [sp, #4]
 8001d9c:	b11b      	cbz	r3, 8001da6 <VS1003_handle+0x52>
 8001d9e:	2120      	movs	r1, #32
 8001da0:	a802      	add	r0, sp, #8
 8001da2:	f7ff fa77 	bl	8001294 <spiram_write_array_to_ringbuffer>
				   if (br < 32) {     //end of file
 8001da6:	9b01      	ldr	r3, [sp, #4]
 8001da8:	2b1f      	cmp	r3, #31
 8001daa:	f200 81a0 	bhi.w	80020ee <VS1003_handle+0x39a>
					   StreamState = STREAM_FILE_PLAY_REST;
 8001dae:	2307      	movs	r3, #7
 8001db0:	7023      	strb	r3, [r4, #0]
           if (StreamState == STREAM_FILE_PLAY_REST) break;
 8001db2:	7823      	ldrb	r3, [r4, #0]
 8001db4:	2b07      	cmp	r3, #7
 8001db6:	f000 80a7 	beq.w	8001f08 <VS1003_handle+0x1b4>
           if (VS1003_feed_from_buffer() == FEED_RET_BUFFER_EMPTY) {
 8001dba:	f7ff fdaf 	bl	800191c <VS1003_feed_from_buffer>
 8001dbe:	2802      	cmp	r0, #2
 8001dc0:	f040 80a2 	bne.w	8001f08 <VS1003_handle+0x1b4>
               StreamState = STREAM_FILE_FILL_BUFFER;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	e17d      	b.n	80020c4 <VS1003_handle+0x370>
               fres = f_read(&fsrc, data, 32, &br);
 8001dc8:	4d93      	ldr	r5, [pc, #588]	; (8002018 <VS1003_handle+0x2c4>)
           while (spiram_get_remaining_space_in_ringbuffer() > 128) {
 8001dca:	f7ff fb45 	bl	8001458 <spiram_get_remaining_space_in_ringbuffer>
 8001dce:	2880      	cmp	r0, #128	; 0x80
 8001dd0:	d912      	bls.n	8001df8 <VS1003_handle+0xa4>
               fres = f_read(&fsrc, data, 32, &br);
 8001dd2:	ab01      	add	r3, sp, #4
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	a902      	add	r1, sp, #8
 8001dd8:	4628      	mov	r0, r5
 8001dda:	f007 f972 	bl	80090c2 <f_read>
               if (fres == FR_OK) {
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d1f3      	bne.n	8001dca <VS1003_handle+0x76>
                   if (br) { spiram_write_array_to_ringbuffer(data, br); }
 8001de2:	9901      	ldr	r1, [sp, #4]
 8001de4:	b119      	cbz	r1, 8001dee <VS1003_handle+0x9a>
 8001de6:	b289      	uxth	r1, r1
 8001de8:	a802      	add	r0, sp, #8
 8001dea:	f7ff fa53 	bl	8001294 <spiram_write_array_to_ringbuffer>
                   if (br < 32) {  //end of file
 8001dee:	9b01      	ldr	r3, [sp, #4]
 8001df0:	2b1f      	cmp	r3, #31
 8001df2:	d8ea      	bhi.n	8001dca <VS1003_handle+0x76>
                	   StreamState = STREAM_FILE_PLAY_REST;
 8001df4:	2307      	movs	r3, #7
 8001df6:	7023      	strb	r3, [r4, #0]
           if (StreamState == STREAM_FILE_PLAY_REST) break;
 8001df8:	7823      	ldrb	r3, [r4, #0]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	f000 8084 	beq.w	8001f08 <VS1003_handle+0x1b4>
           StreamState = STREAM_FILE_GET_DATA;
 8001e00:	2306      	movs	r3, #6
 8001e02:	e15f      	b.n	80020c4 <VS1003_handle+0x370>
            	w = lwip_recv(sock, data, 32, 0);
 8001e04:	4f86      	ldr	r7, [pc, #536]	; (8002020 <VS1003_handle+0x2cc>)
 8001e06:	4d87      	ldr	r5, [pc, #540]	; (8002024 <VS1003_handle+0x2d0>)
                    printf("Internet radio: no new data timeout - closing\r\n");
 8001e08:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800202c <VS1003_handle+0x2d8>
            while (spiram_get_remaining_space_in_ringbuffer() > 128) {
 8001e0c:	f7ff fb24 	bl	8001458 <spiram_get_remaining_space_in_ringbuffer>
 8001e10:	2880      	cmp	r0, #128	; 0x80
 8001e12:	d925      	bls.n	8001e60 <VS1003_handle+0x10c>
            	w = lwip_recv(sock, data, 32, 0);
 8001e14:	2300      	movs	r3, #0
 8001e16:	2220      	movs	r2, #32
 8001e18:	a902      	add	r1, sp, #8
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f00b f99c 	bl	800d158 <lwip_recv>
 8001e20:	b286      	uxth	r6, r0
            	if (w > 0) {
 8001e22:	b136      	cbz	r6, 8001e32 <VS1003_handle+0xde>
            		timer = millis();
 8001e24:	f000 fa58 	bl	80022d8 <HAL_GetTick>
            		spiram_write_array_to_ringbuffer(data, w);
 8001e28:	4631      	mov	r1, r6
            		timer = millis();
 8001e2a:	6028      	str	r0, [r5, #0]
            		spiram_write_array_to_ringbuffer(data, w);
 8001e2c:	a802      	add	r0, sp, #8
 8001e2e:	f7ff fa31 	bl	8001294 <spiram_write_array_to_ringbuffer>
                if ( (uint32_t)(millis()-timer) > 5000) {
 8001e32:	f000 fa51 	bl	80022d8 <HAL_GetTick>
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	1ac0      	subs	r0, r0, r3
 8001e3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e3e:	4298      	cmp	r0, r3
 8001e40:	d907      	bls.n	8001e52 <VS1003_handle+0xfe>
                    printf("Internet radio: no new data timeout - closing\r\n");
 8001e42:	4640      	mov	r0, r8
 8001e44:	f014 fda8 	bl	8016998 <puts>
                    ReconnectStrategy = DO_NOT_RECONNECT;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4b77      	ldr	r3, [pc, #476]	; (8002028 <VS1003_handle+0x2d4>)
 8001e4c:	701a      	strb	r2, [r3, #0]
                    StreamState = STREAM_HTTP_CLOSE;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	7023      	strb	r3, [r4, #0]
            	if (HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin)) break;
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	4871      	ldr	r0, [pc, #452]	; (800201c <VS1003_handle+0x2c8>)
 8001e58:	f001 f866 	bl	8002f28 <HAL_GPIO_ReadPin>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d0d5      	beq.n	8001e0c <VS1003_handle+0xb8>
            if (StreamState == STREAM_HTTP_CLOSE) break;
 8001e60:	7823      	ldrb	r3, [r4, #0]
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d050      	beq.n	8001f08 <VS1003_handle+0x1b4>
            if (VS1003_feed_from_buffer() == FEED_RET_BUFFER_EMPTY) {
 8001e66:	f7ff fd59 	bl	800191c <VS1003_feed_from_buffer>
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d14c      	bne.n	8001f08 <VS1003_handle+0x1b4>
                StreamState = STREAM_HTTP_FILL_BUFFER;
 8001e6e:	2303      	movs	r3, #3
                    StreamState = STREAM_HTTP_RECONNECT_WAIT;
 8001e70:	7023      	strb	r3, [r4, #0]
            timer = millis();
 8001e72:	f000 fa31 	bl	80022d8 <HAL_GetTick>
 8001e76:	4b6b      	ldr	r3, [pc, #428]	; (8002024 <VS1003_handle+0x2d0>)
 8001e78:	6018      	str	r0, [r3, #0]
			break;
 8001e7a:	e045      	b.n	8001f08 <VS1003_handle+0x1b4>
            	w = lwip_recv(sock, data, 32, 0);
 8001e7c:	4f68      	ldr	r7, [pc, #416]	; (8002020 <VS1003_handle+0x2cc>)
 8001e7e:	4d69      	ldr	r5, [pc, #420]	; (8002024 <VS1003_handle+0x2d0>)
            while (spiram_get_remaining_space_in_ringbuffer() > 128) {
 8001e80:	f7ff faea 	bl	8001458 <spiram_get_remaining_space_in_ringbuffer>
 8001e84:	2880      	cmp	r0, #128	; 0x80
 8001e86:	d91e      	bls.n	8001ec6 <VS1003_handle+0x172>
            	w = lwip_recv(sock, data, 32, 0);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	a902      	add	r1, sp, #8
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f00b f962 	bl	800d158 <lwip_recv>
 8001e94:	b286      	uxth	r6, r0
            	if (w > 0) {
 8001e96:	b136      	cbz	r6, 8001ea6 <VS1003_handle+0x152>
            		timer = millis();
 8001e98:	f000 fa1e 	bl	80022d8 <HAL_GetTick>
            		spiram_write_array_to_ringbuffer(data, w);
 8001e9c:	4631      	mov	r1, r6
            		timer = millis();
 8001e9e:	6028      	str	r0, [r5, #0]
            		spiram_write_array_to_ringbuffer(data, w);
 8001ea0:	a802      	add	r0, sp, #8
 8001ea2:	f7ff f9f7 	bl	8001294 <spiram_write_array_to_ringbuffer>
                if ( (uint32_t)(millis()-timer) > 5000) {
 8001ea6:	f000 fa17 	bl	80022d8 <HAL_GetTick>
 8001eaa:	682b      	ldr	r3, [r5, #0]
 8001eac:	1ac0      	subs	r0, r0, r3
 8001eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8001eb2:	4298      	cmp	r0, r3
 8001eb4:	d9e4      	bls.n	8001e80 <VS1003_handle+0x12c>
                    printf("Internet radio: no new data timeout - closing\r\n");
 8001eb6:	485d      	ldr	r0, [pc, #372]	; (800202c <VS1003_handle+0x2d8>)
 8001eb8:	f014 fd6e 	bl	8016998 <puts>
                    ReconnectStrategy = DO_NOT_RECONNECT;
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <VS1003_handle+0x2d4>)
 8001ec0:	701a      	strb	r2, [r3, #0]
                    StreamState = STREAM_HTTP_CLOSE;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	7023      	strb	r3, [r4, #0]
            if (StreamState == STREAM_HTTP_CLOSE) break;
 8001ec6:	7823      	ldrb	r3, [r4, #0]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d01d      	beq.n	8001f08 <VS1003_handle+0x1b4>
			printf("Buffer filled\r\n");
 8001ecc:	4858      	ldr	r0, [pc, #352]	; (8002030 <VS1003_handle+0x2dc>)
 8001ece:	f014 fd63 	bl	8016998 <puts>
			timer = millis();
 8001ed2:	f000 fa01 	bl	80022d8 <HAL_GetTick>
 8001ed6:	4b53      	ldr	r3, [pc, #332]	; (8002024 <VS1003_handle+0x2d0>)
 8001ed8:	6018      	str	r0, [r3, #0]
			StreamState = STREAM_HTTP_GET_DATA;
 8001eda:	2304      	movs	r3, #4
 8001edc:	e0f2      	b.n	80020c4 <VS1003_handle+0x370>
			remoteHost = lwip_gethostbyname(uri.server);
 8001ede:	4d55      	ldr	r5, [pc, #340]	; (8002034 <VS1003_handle+0x2e0>)
			printf("Starting new connection\r\n)");
 8001ee0:	4855      	ldr	r0, [pc, #340]	; (8002038 <VS1003_handle+0x2e4>)
 8001ee2:	f014 fcd1 	bl	8016888 <iprintf>
			spiram_clear_ringbuffer();
 8001ee6:	f7ff faad 	bl	8001444 <spiram_clear_ringbuffer>
			memset(&addr, 0x00, sizeof(struct sockaddr_in));
 8001eea:	2100      	movs	r1, #0
 8001eec:	2210      	movs	r2, #16
 8001eee:	a802      	add	r0, sp, #8
 8001ef0:	f014 fc1c 	bl	801672c <memset>
			remoteHost = lwip_gethostbyname(uri.server);
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f00a fe9b 	bl	800cc30 <lwip_gethostbyname>
				printf("Can't resolve address %s\r\n", uri.server);
 8001efa:	4629      	mov	r1, r5
			if (remoteHost == NULL) {
 8001efc:	4606      	mov	r6, r0
 8001efe:	b930      	cbnz	r0, 8001f0e <VS1003_handle+0x1ba>
				printf("Can't resolve address %s\r\n", uri.server);
 8001f00:	484e      	ldr	r0, [pc, #312]	; (800203c <VS1003_handle+0x2e8>)
 8001f02:	f014 fcc1 	bl	8016888 <iprintf>
				StreamState = STREAM_HOME;
 8001f06:	7026      	strb	r6, [r4, #0]
}
 8001f08:	b00a      	add	sp, #40	; 0x28
 8001f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			printf("Address %s has been resolved\r\n", uri.server);
 8001f0e:	484c      	ldr	r0, [pc, #304]	; (8002040 <VS1003_handle+0x2ec>)
 8001f10:	f014 fcba 	bl	8016888 <iprintf>
			if (remoteHost->h_addrtype != AF_INET) {
 8001f14:	68b7      	ldr	r7, [r6, #8]
 8001f16:	2f02      	cmp	r7, #2
 8001f18:	d004      	beq.n	8001f24 <VS1003_handle+0x1d0>
				printf("It is not AF_INET address\r\n");
 8001f1a:	484a      	ldr	r0, [pc, #296]	; (8002044 <VS1003_handle+0x2f0>)
 8001f1c:	f014 fd3c 	bl	8016998 <puts>
        	StreamState = STREAM_HOME;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e0cf      	b.n	80020c4 <VS1003_handle+0x370>
			printf("It is AF_INET\r\n");
 8001f24:	4848      	ldr	r0, [pc, #288]	; (8002048 <VS1003_handle+0x2f4>)
 8001f26:	f014 fd37 	bl	8016998 <puts>
			addr.sin_port = htons(uri.port);
 8001f2a:	f8b5 0204 	ldrh.w	r0, [r5, #516]	; 0x204
			addr.sin_family = AF_INET;
 8001f2e:	f88d 7009 	strb.w	r7, [sp, #9]
			addr.sin_port = htons(uri.port);
 8001f32:	f00c fa7f 	bl	800e434 <lwip_htons>
			addr.sin_addr.s_addr = *(u_long *) remoteHost->h_addr_list[0];
 8001f36:	6933      	ldr	r3, [r6, #16]
			addr.sin_port = htons(uri.port);
 8001f38:	f8ad 000a 	strh.w	r0, [sp, #10]
			addr.sin_addr.s_addr = *(u_long *) remoteHost->h_addr_list[0];
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	a80a      	add	r0, sp, #40	; 0x28
 8001f40:	681b      	ldr	r3, [r3, #0]
        	sock = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 8001f42:	4e37      	ldr	r6, [pc, #220]	; (8002020 <VS1003_handle+0x2cc>)
			addr.sin_addr.s_addr = *(u_long *) remoteHost->h_addr_list[0];
 8001f44:	f840 3d1c 	str.w	r3, [r0, #-28]!
			printf("IPv4 Address: %s\r\n", inet_ntoa(addr.sin_addr));
 8001f48:	f013 fbc0 	bl	80156cc <ip4addr_ntoa>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	483f      	ldr	r0, [pc, #252]	; (800204c <VS1003_handle+0x2f8>)
 8001f50:	f014 fc9a 	bl	8016888 <iprintf>
        	sock = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 8001f54:	2206      	movs	r2, #6
 8001f56:	2101      	movs	r1, #1
 8001f58:	4638      	mov	r0, r7
 8001f5a:	f00b f9b9 	bl	800d2d0 <lwip_socket>
 8001f5e:	6030      	str	r0, [r6, #0]
			if(sock == -1) {
 8001f60:	3001      	adds	r0, #1
 8001f62:	d105      	bne.n	8001f70 <VS1003_handle+0x21c>
				printf("Can't acquire socket. Errno: %d\r\n", errno);
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <VS1003_handle+0x2fc>)
 8001f66:	483b      	ldr	r0, [pc, #236]	; (8002054 <VS1003_handle+0x300>)
 8001f68:	6819      	ldr	r1, [r3, #0]
				printf("Can't connect. Errno: %d\r\n", errno);
 8001f6a:	f014 fc8d 	bl	8016888 <iprintf>
 8001f6e:	e7d7      	b.n	8001f20 <VS1003_handle+0x1cc>
			printf("Socket acquired\r\n");
 8001f70:	4839      	ldr	r0, [pc, #228]	; (8002058 <VS1003_handle+0x304>)
 8001f72:	f014 fd11 	bl	8016998 <puts>
			ret = lwip_connect(sock, (struct sockaddr*)&addr, sizeof(struct sockaddr));
 8001f76:	2210      	movs	r2, #16
 8001f78:	a902      	add	r1, sp, #8
 8001f7a:	6830      	ldr	r0, [r6, #0]
 8001f7c:	f00a ffb2 	bl	800cee4 <lwip_connect>
			if (ret == -1) {
 8001f80:	3001      	adds	r0, #1
 8001f82:	d103      	bne.n	8001f8c <VS1003_handle+0x238>
				printf("Can't connect. Errno: %d\r\n", errno);
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <VS1003_handle+0x2fc>)
 8001f86:	4835      	ldr	r0, [pc, #212]	; (800205c <VS1003_handle+0x308>)
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	e7ee      	b.n	8001f6a <VS1003_handle+0x216>
			printf("Connected\r\n");
 8001f8c:	4834      	ldr	r0, [pc, #208]	; (8002060 <VS1003_handle+0x30c>)
 8001f8e:	f014 fd03 	bl	8016998 <puts>
        	ret = lwip_send(sock, (void*)"GET ", 4, 0);
 8001f92:	2300      	movs	r3, #0
 8001f94:	2204      	movs	r2, #4
 8001f96:	4933      	ldr	r1, [pc, #204]	; (8002064 <VS1003_handle+0x310>)
 8001f98:	6830      	ldr	r0, [r6, #0]
 8001f9a:	f00b f95d 	bl	800d258 <lwip_send>
        	printf("First ret: %d\r\n", ret);
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4831      	ldr	r0, [pc, #196]	; (8002068 <VS1003_handle+0x314>)
 8001fa2:	f014 fc71 	bl	8016888 <iprintf>
			ret = lwip_send(sock, (void*)uri.file, strlen(uri.file), 0);
 8001fa6:	f205 1001 	addw	r0, r5, #257	; 0x101
 8001faa:	f7fe f94b 	bl	8000244 <strlen>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f205 1101 	addw	r1, r5, #257	; 0x101
 8001fb6:	6830      	ldr	r0, [r6, #0]
 8001fb8:	f00b f94e 	bl	800d258 <lwip_send>
			printf("Second ret: %d\r\n", ret);
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	482b      	ldr	r0, [pc, #172]	; (800206c <VS1003_handle+0x318>)
 8001fc0:	f014 fc62 	bl	8016888 <iprintf>
			ret = lwip_send(sock, (void*)" HTTP/1.0\r\nHost: ", 17, 0);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2211      	movs	r2, #17
 8001fc8:	4929      	ldr	r1, [pc, #164]	; (8002070 <VS1003_handle+0x31c>)
 8001fca:	6830      	ldr	r0, [r6, #0]
 8001fcc:	f00b f944 	bl	800d258 <lwip_send>
			printf("Third ret: %d\r\n", ret);
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	4828      	ldr	r0, [pc, #160]	; (8002074 <VS1003_handle+0x320>)
 8001fd4:	f014 fc58 	bl	8016888 <iprintf>
			ret = lwip_send(sock, (void*)uri.server, strlen(uri.server), 0);
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7fe f933 	bl	8000244 <strlen>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	6830      	ldr	r0, [r6, #0]
 8001fe6:	f00b f937 	bl	800d258 <lwip_send>
			printf("Fourth ret: %d\r\n", ret);
 8001fea:	4601      	mov	r1, r0
 8001fec:	4822      	ldr	r0, [pc, #136]	; (8002078 <VS1003_handle+0x324>)
 8001fee:	f014 fc4b 	bl	8016888 <iprintf>
			ret = lwip_send(sock, (void*)"\r\nConnection: keep-alive\r\n\r\n", 28, 0);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	221c      	movs	r2, #28
 8001ff6:	4921      	ldr	r1, [pc, #132]	; (800207c <VS1003_handle+0x328>)
 8001ff8:	6830      	ldr	r0, [r6, #0]
 8001ffa:	f00b f92d 	bl	800d258 <lwip_send>
			printf("Fifth ret: %d\r\n", ret);
 8001ffe:	4601      	mov	r1, r0
 8002000:	481f      	ldr	r0, [pc, #124]	; (8002080 <VS1003_handle+0x32c>)
 8002002:	f014 fc41 	bl	8016888 <iprintf>
            printf("Sending headers\r\n");
 8002006:	481f      	ldr	r0, [pc, #124]	; (8002084 <VS1003_handle+0x330>)
 8002008:	f014 fcc6 	bl	8016998 <puts>
            prepare_http_parser();
 800200c:	f7fe fb58 	bl	80006c0 <prepare_http_parser>
            StreamState = STREAM_HTTP_PROCESS_HEADER;
 8002010:	7027      	strb	r7, [r4, #0]
			break;
 8002012:	e779      	b.n	8001f08 <VS1003_handle+0x1b4>
 8002014:	2000076d 	.word	0x2000076d
 8002018:	2000593c 	.word	0x2000593c
 800201c:	40010c00 	.word	0x40010c00
 8002020:	20005938 	.word	0x20005938
 8002024:	20000770 	.word	0x20000770
 8002028:	2000076c 	.word	0x2000076c
 800202c:	0801820c 	.word	0x0801820c
 8002030:	0801823b 	.word	0x0801823b
 8002034:	20000774 	.word	0x20000774
 8002038:	08018052 	.word	0x08018052
 800203c:	0801806d 	.word	0x0801806d
 8002040:	08018088 	.word	0x08018088
 8002044:	080180a7 	.word	0x080180a7
 8002048:	080180c2 	.word	0x080180c2
 800204c:	080180d1 	.word	0x080180d1
 8002050:	2000e0bc 	.word	0x2000e0bc
 8002054:	080180e4 	.word	0x080180e4
 8002058:	08018106 	.word	0x08018106
 800205c:	08018117 	.word	0x08018117
 8002060:	08018132 	.word	0x08018132
 8002064:	0801813d 	.word	0x0801813d
 8002068:	08018142 	.word	0x08018142
 800206c:	08018152 	.word	0x08018152
 8002070:	08018163 	.word	0x08018163
 8002074:	08018175 	.word	0x08018175
 8002078:	08018185 	.word	0x08018185
 800207c:	08018196 	.word	0x08018196
 8002080:	080181b3 	.word	0x080181b3
 8002084:	080181c3 	.word	0x080181c3
			w = lwip_recv(sock, data, 32, 0);
 8002088:	4842      	ldr	r0, [pc, #264]	; (8002194 <VS1003_handle+0x440>)
 800208a:	2300      	movs	r3, #0
 800208c:	2220      	movs	r2, #32
 800208e:	a902      	add	r1, sp, #8
 8002090:	6800      	ldr	r0, [r0, #0]
 8002092:	f00b f861 	bl	800d158 <lwip_recv>
			if (w > 0) {
 8002096:	b283      	uxth	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	f43f af35 	beq.w	8001f08 <VS1003_handle+0x1b4>
				http_res_t http_result = parse_http_headers((char*)data, w, &uri);
 800209e:	4a3e      	ldr	r2, [pc, #248]	; (8002198 <VS1003_handle+0x444>)
 80020a0:	4619      	mov	r1, r3
 80020a2:	a802      	add	r0, sp, #8
 80020a4:	f7fe fbb0 	bl	8000808 <parse_http_headers>
				switch (http_result) {
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d00d      	beq.n	80020c8 <VS1003_handle+0x374>
 80020ac:	2803      	cmp	r0, #3
 80020ae:	d018      	beq.n	80020e2 <VS1003_handle+0x38e>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	f47f af29 	bne.w	8001f08 <VS1003_handle+0x1b4>
						printf("Parsing headers error\r\n");
 80020b6:	4839      	ldr	r0, [pc, #228]	; (800219c <VS1003_handle+0x448>)
 80020b8:	f014 fc6e 	bl	8016998 <puts>
						ReconnectStrategy = RECONNECT_WAIT_LONG;
 80020bc:	2202      	movs	r2, #2
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <VS1003_handle+0x44c>)
						ReconnectStrategy = RECONNECT_IMMEDIATELY;
 80020c0:	701a      	strb	r2, [r3, #0]
						StreamState = STREAM_HTTP_CLOSE;
 80020c2:	2308      	movs	r3, #8
        	StreamState = STREAM_HOME;
 80020c4:	7023      	strb	r3, [r4, #0]
}
 80020c6:	e71f      	b.n	8001f08 <VS1003_handle+0x1b4>
						printf("It is 200 OK\r\n");
 80020c8:	4836      	ldr	r0, [pc, #216]	; (80021a4 <VS1003_handle+0x450>)
 80020ca:	f014 fc65 	bl	8016998 <puts>
						timer = millis();
 80020ce:	f000 f903 	bl	80022d8 <HAL_GetTick>
 80020d2:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <VS1003_handle+0x454>)
 80020d4:	6018      	str	r0, [r3, #0]
						StreamState = STREAM_HTTP_FILL_BUFFER;     //STREAM_HTTP_GET_DATA
 80020d6:	2303      	movs	r3, #3
	VS1003_sdi_send_zeroes(10);
 80020d8:	200a      	movs	r0, #10
						StreamState = STREAM_HTTP_FILL_BUFFER;     //STREAM_HTTP_GET_DATA
 80020da:	7023      	strb	r3, [r4, #0]
	VS1003_sdi_send_zeroes(10);
 80020dc:	f7ff fc8e 	bl	80019fc <VS1003_sdi_send_zeroes>
 80020e0:	e712      	b.n	8001f08 <VS1003_handle+0x1b4>
						printf("Stream redirected\r\n");
 80020e2:	4832      	ldr	r0, [pc, #200]	; (80021ac <VS1003_handle+0x458>)
 80020e4:	f014 fc58 	bl	8016998 <puts>
						ReconnectStrategy = RECONNECT_IMMEDIATELY;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <VS1003_handle+0x44c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	e7e8      	b.n	80020c0 <VS1003_handle+0x36c>
			   if (HAL_GPIO_ReadPin(VS_DREQ_GPIO_Port, VS_DREQ_Pin)) break;
 80020ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f2:	4630      	mov	r0, r6
 80020f4:	f000 ff18 	bl	8002f28 <HAL_GPIO_ReadPin>
 80020f8:	2800      	cmp	r0, #0
 80020fa:	f43f ae41 	beq.w	8001d80 <VS1003_handle+0x2c>
 80020fe:	e658      	b.n	8001db2 <VS1003_handle+0x5e>
            if (VS1003_feed_from_buffer() == FEED_RET_BUFFER_EMPTY) {
 8002100:	f7ff fc0c 	bl	800191c <VS1003_feed_from_buffer>
 8002104:	2802      	cmp	r0, #2
 8002106:	f47f aeff 	bne.w	8001f08 <VS1003_handle+0x1b4>
    if (dir_flag) {
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <VS1003_handle+0x45c>)
 800210c:	7819      	ldrb	r1, [r3, #0]
 800210e:	b111      	cbz	r1, 8002116 <VS1003_handle+0x3c2>
        VS1003_play_next_audio_file_from_directory();   //it handles loops
 8002110:	f7ff fe18 	bl	8001d44 <VS1003_play_next_audio_file_from_directory>
 8002114:	e6f8      	b.n	8001f08 <VS1003_handle+0x1b4>
        if (loop_flag) {
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <VS1003_handle+0x460>)
 8002118:	781d      	ldrb	r5, [r3, #0]
 800211a:	b14d      	cbz	r5, 8002130 <VS1003_handle+0x3dc>
            res = f_lseek(&fsrc, 0);
 800211c:	4826      	ldr	r0, [pc, #152]	; (80021b8 <VS1003_handle+0x464>)
 800211e:	f007 f928 	bl	8009372 <f_lseek>
            if (res != FR_OK) printf("f_lseek ERROR\r\n");
 8002122:	2800      	cmp	r0, #0
 8002124:	f43f aef0 	beq.w	8001f08 <VS1003_handle+0x1b4>
 8002128:	4824      	ldr	r0, [pc, #144]	; (80021bc <VS1003_handle+0x468>)
 800212a:	f014 fc35 	bl	8016998 <puts>
 800212e:	e6eb      	b.n	8001f08 <VS1003_handle+0x1b4>
            VS1003_stopPlaying();
 8002130:	f7ff fc7b 	bl	8001a2a <VS1003_stopPlaying>
            f_close(&fsrc);
 8002134:	4820      	ldr	r0, [pc, #128]	; (80021b8 <VS1003_handle+0x464>)
 8002136:	f007 f908 	bl	800934a <f_close>
            StreamState = STREAM_HOME;
 800213a:	7025      	strb	r5, [r4, #0]
 800213c:	e6e4      	b.n	8001f08 <VS1003_handle+0x1b4>
			lwip_close(sock);
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <VS1003_handle+0x440>)
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f00a fe87 	bl	800ce54 <lwip_close>
			printf("Successfully disconnected\r\n");
 8002146:	481e      	ldr	r0, [pc, #120]	; (80021c0 <VS1003_handle+0x46c>)
 8002148:	f014 fc26 	bl	8016998 <puts>
            VS1003_stopPlaying();
 800214c:	f7ff fc6d 	bl	8001a2a <VS1003_stopPlaying>
            switch(ReconnectStrategy) {
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <VS1003_handle+0x44c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f43f ae8b 	beq.w	8001e70 <VS1003_handle+0x11c>
 800215a:	d301      	bcc.n	8002160 <VS1003_handle+0x40c>
 800215c:	2b03      	cmp	r3, #3
 800215e:	d901      	bls.n	8002164 <VS1003_handle+0x410>
                    StreamState = STREAM_HOME;
 8002160:	2300      	movs	r3, #0
 8002162:	e685      	b.n	8001e70 <VS1003_handle+0x11c>
                    StreamState = STREAM_HTTP_RECONNECT_WAIT;
 8002164:	2309      	movs	r3, #9
 8002166:	e683      	b.n	8001e70 <VS1003_handle+0x11c>
            if ( (uint32_t)(millis()-timer) > ((ReconnectStrategy == RECONNECT_WAIT_LONG) ? 5000 : 1000) ) {
 8002168:	f000 f8b6 	bl	80022d8 <HAL_GetTick>
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <VS1003_handle+0x454>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <VS1003_handle+0x44c>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b02      	cmp	r3, #2
 8002178:	f241 3388 	movw	r3, #5000	; 0x1388
 800217c:	bf18      	it	ne
 800217e:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
 8002182:	4298      	cmp	r0, r3
 8002184:	f67f aec0 	bls.w	8001f08 <VS1003_handle+0x1b4>
                printf("Internet radio: reconnecting\r\n");
 8002188:	480e      	ldr	r0, [pc, #56]	; (80021c4 <VS1003_handle+0x470>)
 800218a:	f014 fc05 	bl	8016998 <puts>
                StreamState = STREAM_HTTP_BEGIN;
 800218e:	2301      	movs	r3, #1
 8002190:	e798      	b.n	80020c4 <VS1003_handle+0x370>
 8002192:	bf00      	nop
 8002194:	20005938 	.word	0x20005938
 8002198:	20000774 	.word	0x20000774
 800219c:	080181d4 	.word	0x080181d4
 80021a0:	2000076c 	.word	0x2000076c
 80021a4:	080181eb 	.word	0x080181eb
 80021a8:	20000770 	.word	0x20000770
 80021ac:	080181f9 	.word	0x080181f9
 80021b0:	2000076e 	.word	0x2000076e
 80021b4:	2000076f 	.word	0x2000076f
 80021b8:	2000593c 	.word	0x2000593c
 80021bc:	0801824a 	.word	0x0801824a
 80021c0:	08018259 	.word	0x08018259
 80021c4:	08018274 	.word	0x08018274

080021c8 <VS1003_play_next_http_stream_from_list>:
    char* url = get_station_url_from_file(ind, NULL, 0);
 80021c8:	2200      	movs	r2, #0
void VS1003_play_next_http_stream_from_list(void) {
 80021ca:	b538      	push	{r3, r4, r5, lr}
    char* url = get_station_url_from_file(ind, NULL, 0);
 80021cc:	4d0c      	ldr	r5, [pc, #48]	; (8002200 <VS1003_play_next_http_stream_from_list+0x38>)
 80021ce:	4611      	mov	r1, r2
 80021d0:	8828      	ldrh	r0, [r5, #0]
 80021d2:	f7fe fbd9 	bl	8000988 <get_station_url_from_file>
    if (url == NULL) {
 80021d6:	4604      	mov	r4, r0
 80021d8:	b940      	cbnz	r0, 80021ec <VS1003_play_next_http_stream_from_list+0x24>
        ind = 1;
 80021da:	2001      	movs	r0, #1
        url = get_station_url_from_file(ind, NULL, 0);
 80021dc:	4622      	mov	r2, r4
 80021de:	4621      	mov	r1, r4
        ind = 1;
 80021e0:	6028      	str	r0, [r5, #0]
        url = get_station_url_from_file(ind, NULL, 0);
 80021e2:	f7fe fbd1 	bl	8000988 <get_station_url_from_file>
        if (url == NULL) return;
 80021e6:	4604      	mov	r4, r0
 80021e8:	b918      	cbnz	r0, 80021f2 <VS1003_play_next_http_stream_from_list+0x2a>
}
 80021ea:	bd38      	pop	{r3, r4, r5, pc}
        ind++;
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	602b      	str	r3, [r5, #0]
    VS1003_stop();
 80021f2:	f7ff fd17 	bl	8001c24 <VS1003_stop>
    VS1003_play_http_stream(url);
 80021f6:	4620      	mov	r0, r4
}
 80021f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    VS1003_play_http_stream(url);
 80021fc:	f7ff bcc6 	b.w	8001b8c <VS1003_play_http_stream>
 8002200:	2000000c 	.word	0x2000000c

08002204 <VS1003_play_next>:
void VS1003_play_next(void) {
 8002204:	b508      	push	{r3, lr}
    switch (StreamState) {
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <VS1003_play_next+0x38>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	2a06      	cmp	r2, #6
 800220c:	d814      	bhi.n	8002238 <VS1003_play_next+0x34>
 800220e:	2301      	movs	r3, #1
 8002210:	4093      	lsls	r3, r2
 8002212:	f013 0f19 	tst.w	r3, #25
 8002216:	d109      	bne.n	800222c <VS1003_play_next+0x28>
 8002218:	f013 0f60 	tst.w	r3, #96	; 0x60
 800221c:	d00c      	beq.n	8002238 <VS1003_play_next+0x34>
            if (dir_flag) {
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <VS1003_play_next+0x3c>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b14b      	cbz	r3, 8002238 <VS1003_play_next+0x34>
}
 8002224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                VS1003_play_next_audio_file_from_directory();
 8002228:	f7ff bd8c 	b.w	8001d44 <VS1003_play_next_audio_file_from_directory>
            VS1003_stop();
 800222c:	f7ff fcfa 	bl	8001c24 <VS1003_stop>
}
 8002230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            VS1003_play_next_http_stream_from_list();
 8002234:	f7ff bfc8 	b.w	80021c8 <VS1003_play_next_http_stream_from_list>
}
 8002238:	bd08      	pop	{r3, pc}
 800223a:	bf00      	nop
 800223c:	2000076d 	.word	0x2000076d
 8002240:	2000076e 	.word	0x2000076e

08002244 <VS1003_setLoop>:

void VS1003_setLoop(uint8_t val) {
  loop_flag = val;
 8002244:	4b01      	ldr	r3, [pc, #4]	; (800224c <VS1003_setLoop+0x8>)
 8002246:	7018      	strb	r0, [r3, #0]
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000076f 	.word	0x2000076f

08002250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002250:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002252:	e003      	b.n	800225c <LoopCopyDataInit>

08002254 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002256:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002258:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800225a:	3104      	adds	r1, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800225c:	480a      	ldr	r0, [pc, #40]	; (8002288 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002260:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002262:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002264:	d3f6      	bcc.n	8002254 <CopyDataInit>
  ldr r2, =_sbss
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002268:	e002      	b.n	8002270 <LoopFillZerobss>

0800226a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800226c:	f842 3b04 	str.w	r3, [r2], #4

08002270 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002272:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002274:	d3f9      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002276:	f7ff fae7 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f014 fa09 	bl	8016690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227e:	f7fe fd9f 	bl	8000dc0 <main>
  bx lr
 8002282:	4770      	bx	lr
  ldr r3, =_sidata
 8002284:	08022a20 	.word	0x08022a20
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800228c:	2000026c 	.word	0x2000026c
  ldr r2, =_sbss
 8002290:	2000026c 	.word	0x2000026c
  ldr r3, = _ebss
 8002294:	2000e0c0 	.word	0x2000e0c0

08002298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC1_2_IRQHandler>
	...

0800229c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_Init+0x20>)
{
 800229e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022aa:	f000 f82d 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	200f      	movs	r0, #15
 80022b0:	f7ff fa30 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff f8e4 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80022b8:	2000      	movs	r0, #0
 80022ba:	bd08      	pop	{r3, pc}
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x10>)
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_IncTick+0x14>)
 80022c4:	6811      	ldr	r1, [r2, #0]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	440b      	add	r3, r1
 80022ca:	6013      	str	r3, [r2, #0]
}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20005d88 	.word	0x20005d88
 80022d4:	20000050 	.word	0x20000050

080022d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80022d8:	4b01      	ldr	r3, [pc, #4]	; (80022e0 <HAL_GetTick+0x8>)
 80022da:	6818      	ldr	r0, [r3, #0]
}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20005d88 	.word	0x20005d88

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff fff6 	bl	80022d8 <HAL_GetTick>
 80022ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80022f0:	bf1e      	ittt	ne
 80022f2:	4b04      	ldrne	r3, [pc, #16]	; (8002304 <HAL_Delay+0x20>)
 80022f4:	781b      	ldrbne	r3, [r3, #0]
 80022f6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	1b40      	subs	r0, r0, r5
 80022fe:	42a0      	cmp	r0, r4
 8002300:	d3fa      	bcc.n	80022f8 <HAL_Delay+0x14>
  {
  }
}
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000050 	.word	0x20000050

08002308 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800230a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800230e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800231e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002322:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002324:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b570      	push	{r4, r5, r6, lr}
 8002330:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002332:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002336:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233a:	f1c4 0507 	rsb	r5, r4, #7
 800233e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002340:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	bf28      	it	cs
 8002346:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002348:	2b06      	cmp	r3, #6
 800234a:	bf98      	it	ls
 800234c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	bf88      	it	hi
 8002354:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002356:	ea21 0303 	bic.w	r3, r1, r3
 800235a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	fa06 f404 	lsl.w	r4, r6, r4
 8002360:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002364:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002366:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	bfa8      	it	ge
 800236c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002370:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	bfb8      	it	lt
 8002376:	4a06      	ldrlt	r2, [pc, #24]	; (8002390 <HAL_NVIC_SetPriority+0x64>)
 8002378:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	bfab      	itete	ge
 800237c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	e000ed00 	.word	0xe000ed00
 8002390:	e000ed14 	.word	0xe000ed14

08002394 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002394:	2800      	cmp	r0, #0
 8002396:	db08      	blt.n	80023aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002398:	2301      	movs	r3, #1
 800239a:	0942      	lsrs	r2, r0, #5
 800239c:	f000 001f 	and.w	r0, r0, #31
 80023a0:	fa03 f000 	lsl.w	r0, r3, r0
 80023a4:	4b01      	ldr	r3, [pc, #4]	; (80023ac <HAL_NVIC_EnableIRQ+0x18>)
 80023a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023b0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023b2:	4604      	mov	r4, r0
 80023b4:	b150      	cbz	r0, 80023cc <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023b6:	7943      	ldrb	r3, [r0, #5]
 80023b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023bc:	b913      	cbnz	r3, 80023c4 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023be:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023c0:	f7ff f886 	bl	80014d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023c4:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 80023c6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80023c8:	7163      	strb	r3, [r4, #5]
}
 80023ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023cc:	2001      	movs	r0, #1
 80023ce:	e7fc      	b.n	80023ca <HAL_CRC_Init+0x1a>

080023d0 <ETH_Delay.constprop.4>:
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <ETH_Delay.constprop.4+0x20>)
static void ETH_Delay(uint32_t mdelay)
 80023d6:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fbb3 f3f2 	udiv	r3, r3, r2
 80023de:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	9b01      	ldr	r3, [sp, #4]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	9201      	str	r2, [sp, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <ETH_Delay.constprop.4+0x10>
}
 80023ec:	b002      	add	sp, #8
 80023ee:	4770      	bx	lr
 80023f0:	20000008 	.word	0x20000008

080023f4 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg1 = 0U;
 80023f4:	2300      	movs	r3, #0
{
 80023f6:	b507      	push	{r0, r1, r2, lr}
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023f8:	f241 0118 	movw	r1, #4120	; 0x1018
  __IO uint32_t tmpreg1 = 0U;
 80023fc:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	585a      	ldr	r2, [r3, r1]
 8002402:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002406:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002408:	585b      	ldr	r3, [r3, r1]
 800240a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800240c:	f7ff ffe0 	bl	80023d0 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002410:	9a01      	ldr	r2, [sp, #4]
 8002412:	6803      	ldr	r3, [r0, #0]
 8002414:	505a      	str	r2, [r3, r1]
}
 8002416:	b003      	add	sp, #12
 8002418:	f85d fb04 	ldr.w	pc, [sp], #4

0800241c <ETH_MACDMAConfig>:
{
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002420:	b129      	cbz	r1, 800242e <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8002422:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800242a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800242e:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8002430:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf08      	it	eq
 8002436:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                        macinit.LoopbackMode |
 800243a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800243e:	bf18      	it	ne
 8002440:	2100      	movne	r1, #0
  tmpreg1 = (heth->Instance)->MACCR;
 8002442:	6815      	ldr	r5, [r2, #0]
                        macinit.LoopbackMode |
 8002444:	4303      	orrs	r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002446:	482e      	ldr	r0, [pc, #184]	; (8002500 <ETH_MACDMAConfig+0xe4>)
 8002448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244c:	4028      	ands	r0, r5
 800244e:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002450:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002452:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002454:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8002456:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002458:	f7ff ff44 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800245c:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1;
 800245e:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002460:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg1;
 8002462:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002464:	605a      	str	r2, [r3, #4]
  tmpreg1 = (heth->Instance)->MACFFR;
 8002466:	685d      	ldr	r5, [r3, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002468:	f7ff ff3c 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 800246c:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800246e:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = tmpreg1;
 8002470:	605d      	str	r5, [r3, #4]
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002472:	2500      	movs	r5, #0
 8002474:	609d      	str	r5, [r3, #8]
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002476:	60dd      	str	r5, [r3, #12]
  tmpreg1 = (heth->Instance)->MACFCR;
 8002478:	699a      	ldr	r2, [r3, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800247a:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800247e:	0412      	lsls	r2, r2, #16
 8002480:	0c12      	lsrs	r2, r2, #16
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002486:	619a      	str	r2, [r3, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8002488:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248a:	f7ff ff2b 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800248e:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002490:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = tmpreg1;
 8002492:	619e      	str	r6, [r3, #24]
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002494:	61dd      	str	r5, [r3, #28]
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002496:	69dd      	ldr	r5, [r3, #28]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002498:	f7ff ff24 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800249c:	6822      	ldr	r2, [r4, #0]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <ETH_MACDMAConfig+0xe8>)
  (heth->Instance)->MACVLANTR = tmpreg1;
 80024a0:	61d5      	str	r5, [r2, #28]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024a2:	f241 0518 	movw	r5, #4120	; 0x1018
 80024a6:	5951      	ldr	r1, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a8:	2001      	movs	r0, #1
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80024aa:	400b      	ands	r3, r1
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80024ac:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80024b0:	f043 0304 	orr.w	r3, r3, #4
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80024b4:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024b6:	5956      	ldr	r6, [r2, r5]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b8:	f7ff ff14 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024bc:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <ETH_MACDMAConfig+0xec>)
  (heth->Instance)->DMAOMR = tmpreg1;
 80024c0:	515e      	str	r6, [r3, r5]
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	601a      	str	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c8:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->DMABMR;
 80024ca:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024cc:	f7ff ff0a 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80024d6:	601d      	str	r5, [r3, #0]
  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024d8:	69a3      	ldr	r3, [r4, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <ETH_MACDMAConfig+0xd2>
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024de:	f241 011c 	movw	r1, #4124	; 0x101c
 80024e2:	5853      	ldr	r3, [r2, r1]
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ec:	5053      	str	r3, [r2, r1]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024ee:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024f2:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024f4:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024f6:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <ETH_MACDMAConfig+0xf4>)
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	bf00      	nop
 8002500:	ff20810f 	.word	0xff20810f
 8002504:	f8de3f23 	.word	0xf8de3f23
 8002508:	02c12000 	.word	0x02c12000
 800250c:	40028040 	.word	0x40028040
 8002510:	40028044 	.word	0x40028044

08002514 <HAL_ETH_DMATxDescListInit>:
{
 8002514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002518:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800251c:	2c01      	cmp	r4, #1
 800251e:	f04f 0402 	mov.w	r4, #2
 8002522:	d031      	beq.n	8002588 <HAL_ETH_DMATxDescListInit+0x74>
 8002524:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002526:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800252a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < TxBuffCount; i++)
 800252e:	460c      	mov	r4, r1
 8002530:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8002532:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8002536:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  heth->TxDesc = DMATxDescTab;
 800253a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (i < (TxBuffCount - 1U))
 800253c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
  for (i = 0U; i < TxBuffCount; i++)
 8002540:	429d      	cmp	r5, r3
 8002542:	d10c      	bne.n	800255e <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002544:	f241 0310 	movw	r3, #4112	; 0x1010
 8002548:	6802      	ldr	r2, [r0, #0]
 800254a:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 800254c:	2301      	movs	r3, #1
 800254e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002552:	2300      	movs	r3, #0
 8002554:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002558:	4618      	mov	r0, r3
}
 800255a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800255e:	fb0c 2605 	mla	r6, ip, r5, r2
 8002562:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002564:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8002566:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002568:	b91e      	cbnz	r6, 8002572 <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800256a:	6826      	ldr	r6, [r4, #0]
 800256c:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8002570:	6026      	str	r6, [r4, #0]
 8002572:	f104 0610 	add.w	r6, r4, #16
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8002576:	45ae      	cmp	lr, r5
 8002578:	bf94      	ite	ls
 800257a:	4688      	movls	r8, r1
 800257c:	46b0      	movhi	r8, r6
 800257e:	3501      	adds	r5, #1
 8002580:	f8c4 800c 	str.w	r8, [r4, #12]
 8002584:	4634      	mov	r4, r6
 8002586:	e7db      	b.n	8002540 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8002588:	4620      	mov	r0, r4
 800258a:	e7e6      	b.n	800255a <HAL_ETH_DMATxDescListInit+0x46>

0800258c <HAL_ETH_DMARxDescListInit>:
{
 800258c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8002590:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002594:	2c01      	cmp	r4, #1
 8002596:	f04f 0402 	mov.w	r4, #2
 800259a:	d02f      	beq.n	80025fc <HAL_ETH_DMARxDescListInit+0x70>
 800259c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800259e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 80025a2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  for (i = 0U; i < RxBuffCount; i++)
 80025a6:	460c      	mov	r4, r1
 80025a8:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80025aa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025ae:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80025b2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  heth->RxDesc = DMARxDescTab;
 80025b6:	6281      	str	r1, [r0, #40]	; 0x28
    if (i < (RxBuffCount - 1U))
 80025b8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
  for (i = 0U; i < RxBuffCount; i++)
 80025bc:	42ab      	cmp	r3, r5
 80025be:	d10c      	bne.n	80025da <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80025c0:	f241 030c 	movw	r3, #4108	; 0x100c
 80025c4:	6802      	ldr	r2, [r0, #0]
 80025c6:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80025ce:	2300      	movs	r3, #0
 80025d0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80025d4:	4618      	mov	r0, r3
}
 80025d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80025da:	fb0e 2605 	mla	r6, lr, r5, r2
 80025de:	60a6      	str	r6, [r4, #8]
 80025e0:	f104 0610 	add.w	r6, r4, #16
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80025e4:	45a8      	cmp	r8, r5
 80025e6:	bf94      	ite	ls
 80025e8:	4689      	movls	r9, r1
 80025ea:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80025ec:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025ee:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80025f2:	f8c4 900c 	str.w	r9, [r4, #12]
 80025f6:	3501      	adds	r5, #1
 80025f8:	4634      	mov	r4, r6
 80025fa:	e7df      	b.n	80025bc <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 80025fc:	4620      	mov	r0, r4
 80025fe:	e7ea      	b.n	80025d6 <HAL_ETH_DMARxDescListInit+0x4a>

08002600 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8002600:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8002606:	2b01      	cmp	r3, #1
 8002608:	f04f 0302 	mov.w	r3, #2
 800260c:	d069      	beq.n	80026e2 <HAL_ETH_TransmitFrame+0xe2>
 800260e:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002610:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8002614:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0U)
 8002618:	b929      	cbnz	r1, 8002626 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800261a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800261e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8002622:	4610      	mov	r0, r2
}
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002626:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002628:	681c      	ldr	r4, [r3, #0]
 800262a:	2c00      	cmp	r4, #0
 800262c:	da06      	bge.n	800263c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800262e:	2312      	movs	r3, #18
 8002630:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002634:	2300      	movs	r3, #0
 8002636:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800263a:	e7f2      	b.n	8002622 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800263c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8002640:	42a1      	cmp	r1, r4
 8002642:	d92f      	bls.n	80026a4 <HAL_ETH_TransmitFrame+0xa4>
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8002644:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE)
 8002648:	fb04 1412 	mls	r4, r4, r2, r1
 800264c:	b344      	cbz	r4, 80026a0 <HAL_ETH_TransmitFrame+0xa0>
      bufcount++;
 800264e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8002650:	4c25      	ldr	r4, [pc, #148]	; (80026e8 <HAL_ETH_TransmitFrame+0xe8>)
 8002652:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8002656:	fb04 1102 	mla	r1, r4, r2, r1
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800265a:	f240 57f4 	movw	r7, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800265e:	2400      	movs	r4, #0
 8002660:	f3c1 010c 	ubfx	r1, r1, #0, #13
      if (i == (bufcount - 1U))
 8002664:	1e56      	subs	r6, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002666:	681d      	ldr	r5, [r3, #0]
 8002668:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800266c:	601d      	str	r5, [r3, #0]
      if (i == 0U)
 800266e:	b91c      	cbnz	r4, 8002678 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8002670:	681d      	ldr	r5, [r3, #0]
 8002672:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002676:	601d      	str	r5, [r3, #0]
      if (i == (bufcount - 1U))
 8002678:	42a6      	cmp	r6, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800267a:	bf08      	it	eq
 800267c:	681d      	ldreq	r5, [r3, #0]
    for (i = 0U; i < bufcount; i++)
 800267e:	f104 0401 	add.w	r4, r4, #1
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002682:	bf04      	itt	eq
 8002684:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8002688:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800268a:	681d      	ldr	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800268c:	605f      	str	r7, [r3, #4]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800268e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002692:	bf08      	it	eq
 8002694:	6059      	streq	r1, [r3, #4]
    for (i = 0U; i < bufcount; i++)
 8002696:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002698:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800269a:	68db      	ldr	r3, [r3, #12]
    for (i = 0U; i < bufcount; i++)
 800269c:	d1e3      	bne.n	8002666 <HAL_ETH_TransmitFrame+0x66>
 800269e:	e00d      	b.n	80026bc <HAL_ETH_TransmitFrame+0xbc>
  if (bufcount == 1U)
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d1d5      	bne.n	8002650 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80026a4:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80026a6:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80026aa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80026ae:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80026b0:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80026b2:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80026b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026b8:	601a      	str	r2, [r3, #0]
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80026ba:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80026bc:	f241 0214 	movw	r2, #4116	; 0x1014
 80026c0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	5899      	ldr	r1, [r3, r2]
 80026c6:	0749      	lsls	r1, r1, #29
 80026c8:	d505      	bpl.n	80026d6 <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80026ca:	2104      	movs	r1, #4
 80026cc:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80026ce:	f241 0204 	movw	r2, #4100	; 0x1004
 80026d2:	2100      	movs	r1, #0
 80026d4:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80026dc:	2300      	movs	r3, #0
 80026de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80026e2:	4618      	mov	r0, r3
 80026e4:	e79e      	b.n	8002624 <HAL_ETH_TransmitFrame+0x24>
 80026e6:	bf00      	nop
 80026e8:	fffffa0c 	.word	0xfffffa0c

080026ec <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80026ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 80026f0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f04f 0302 	mov.w	r3, #2
 80026f8:	d03b      	beq.n	8002772 <HAL_ETH_GetReceivedFrame_IT+0x86>
 80026fa:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80026fc:	2409      	movs	r4, #9
      heth->RxFrameInfos.SegCount = 1U;
 80026fe:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8002700:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002704:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002708:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2a00      	cmp	r2, #0
 800270e:	db01      	blt.n	8002714 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8002710:	3c01      	subs	r4, #1
 8002712:	d106      	bne.n	8002722 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8002714:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002716:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8002718:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800271c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8002720:	e027      	b.n	8002772 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68dd      	ldr	r5, [r3, #12]
 8002726:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800272a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800272e:	d103      	bne.n	8002738 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002730:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8002732:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002734:	6285      	str	r5, [r0, #40]	; 0x28
 8002736:	e7e7      	b.n	8002708 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002738:	681e      	ldr	r6, [r3, #0]
 800273a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800273c:	f416 7f40 	tst.w	r6, #768	; 0x300
 8002740:	f102 0201 	add.w	r2, r2, #1
 8002744:	d101      	bne.n	800274a <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8002746:	6382      	str	r2, [r0, #56]	; 0x38
 8002748:	e7f4      	b.n	8002734 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800274a:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800274c:	bf08      	it	eq
 800274e:	6303      	streq	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos.SegCount)++;
 8002750:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800275a:	3b04      	subs	r3, #4
 800275c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800275e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002760:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002762:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002764:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8002766:	2301      	movs	r3, #1
 8002768:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800276c:	2300      	movs	r3, #0
 800276e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8002772:	4618      	mov	r0, r3
 8002774:	bd70      	pop	{r4, r5, r6, pc}

08002776 <HAL_ETH_TxCpltCallback>:
 8002776:	4770      	bx	lr

08002778 <HAL_ETH_ErrorCallback>:
 8002778:	4770      	bx	lr

0800277a <HAL_ETH_IRQHandler>:
{
 800277a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 800277c:	f241 0614 	movw	r6, #4116	; 0x1014
 8002780:	6802      	ldr	r2, [r0, #0]
{
 8002782:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8002784:	5995      	ldr	r5, [r2, r6]
 8002786:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800278a:	d021      	beq.n	80027d0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 800278c:	f003 fc4c 	bl	8006028 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002790:	2240      	movs	r2, #64	; 0x40
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8002796:	2301      	movs	r3, #1
 8002798:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800279c:	2300      	movs	r3, #0
 800279e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80027a2:	f241 0514 	movw	r5, #4116	; 0x1014
 80027a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	515a      	str	r2, [r3, r5]
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80027ae:	595b      	ldr	r3, [r3, r5]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	d50c      	bpl.n	80027ce <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ffdf 	bl	8002778 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80027ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 80027c2:	2301      	movs	r3, #1
 80027c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80027c8:	2300      	movs	r3, #0
 80027ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 80027d0:	5993      	ldr	r3, [r2, r6]
 80027d2:	07da      	lsls	r2, r3, #31
 80027d4:	d5e5      	bpl.n	80027a2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 80027d6:	f7ff ffce 	bl	8002776 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80027da:	2301      	movs	r3, #1
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 80027e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80027e4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80027e8:	e7db      	b.n	80027a2 <HAL_ETH_IRQHandler+0x28>

080027ea <HAL_ETH_ReadPHYRegister>:
{
 80027ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80027ec:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 80027f0:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80027f2:	2b82      	cmp	r3, #130	; 0x82
{
 80027f4:	4616      	mov	r6, r2
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80027f6:	d030      	beq.n	800285a <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80027f8:	2382      	movs	r3, #130	; 0x82
 80027fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80027fe:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002800:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002802:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002804:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8002808:	f044 0401 	orr.w	r4, r4, #1
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800280c:	f000 001c 	and.w	r0, r0, #28
 8002810:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002812:	8a2c      	ldrh	r4, [r5, #16]
 8002814:	02e4      	lsls	r4, r4, #11
 8002816:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002818:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg1;
 800281a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800281c:	f7ff fd5c 	bl	80022d8 <HAL_GetTick>
 8002820:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002822:	f014 0001 	ands.w	r0, r4, #1
 8002826:	d107      	bne.n	8002838 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002828:	682b      	ldr	r3, [r5, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	b29b      	uxth	r3, r3
 800282e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002830:	2301      	movs	r3, #1
 8002832:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8002836:	e00c      	b.n	8002852 <HAL_ETH_ReadPHYRegister+0x68>
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002838:	f7ff fd4e 	bl	80022d8 <HAL_GetTick>
 800283c:	1bc0      	subs	r0, r0, r7
 800283e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002842:	d307      	bcc.n	8002854 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State = HAL_ETH_STATE_READY;
 8002844:	2301      	movs	r3, #1
 8002846:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800284a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800284c:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 800284e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8002852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	691c      	ldr	r4, [r3, #16]
 8002858:	e7e3      	b.n	8002822 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 800285a:	2002      	movs	r0, #2
 800285c:	e7f9      	b.n	8002852 <HAL_ETH_ReadPHYRegister+0x68>

0800285e <HAL_ETH_WritePHYRegister>:
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 800285e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8002862:	b570      	push	{r4, r5, r6, lr}
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002864:	2b42      	cmp	r3, #66	; 0x42
{
 8002866:	4605      	mov	r5, r0
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8002868:	d02e      	beq.n	80028c8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800286a:	2342      	movs	r3, #66	; 0x42
 800286c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8002870:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002872:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8002874:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002876:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800287a:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800287e:	f000 001c 	and.w	r0, r0, #28
 8002882:	4320      	orrs	r0, r4
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002884:	8a2c      	ldrh	r4, [r5, #16]
 8002886:	b292      	uxth	r2, r2
 8002888:	02e4      	lsls	r4, r4, #11
 800288a:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800288c:	4304      	orrs	r4, r0
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800288e:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002890:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002892:	f7ff fd21 	bl	80022d8 <HAL_GetTick>
 8002896:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002898:	f014 0001 	ands.w	r0, r4, #1
 800289c:	d103      	bne.n	80028a6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 800289e:	2301      	movs	r3, #1
 80028a0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80028a4:	e00c      	b.n	80028c0 <HAL_ETH_WritePHYRegister+0x62>
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80028a6:	f7ff fd17 	bl	80022d8 <HAL_GetTick>
 80028aa:	1b80      	subs	r0, r0, r6
 80028ac:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80028b0:	d307      	bcc.n	80028c2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State = HAL_ETH_STATE_READY;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80028b8:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80028ba:	2003      	movs	r0, #3
      __HAL_UNLOCK(heth);
 80028bc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80028c2:	682b      	ldr	r3, [r5, #0]
 80028c4:	691c      	ldr	r4, [r3, #16]
 80028c6:	e7e7      	b.n	8002898 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80028c8:	2002      	movs	r0, #2
 80028ca:	e7f9      	b.n	80028c0 <HAL_ETH_WritePHYRegister+0x62>

080028cc <HAL_ETH_Init>:
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80028cc:	2300      	movs	r3, #0
{
 80028ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (heth == NULL)
 80028d0:	4604      	mov	r4, r0
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80028d2:	9301      	str	r3, [sp, #4]
  if (heth == NULL)
 80028d4:	2800      	cmp	r0, #0
 80028d6:	f000 80c3 	beq.w	8002a60 <HAL_ETH_Init+0x194>
  if (heth->State == HAL_ETH_STATE_RESET)
 80028da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80028de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028e2:	b91b      	cbnz	r3, 80028ec <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80028e4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80028e8:	f003 fb1c 	bl	8005f24 <HAL_ETH_MspInit>
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 80028ec:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_ETH_Init+0x198>)
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80028f4:	605a      	str	r2, [r3, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	6a21      	ldr	r1, [r4, #32]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800290c:	f7ff fce4 	bl	80022d8 <HAL_GetTick>
 8002910:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	07d0      	lsls	r0, r2, #31
 800291c:	d41d      	bmi.n	800295a <HAL_ETH_Init+0x8e>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800291e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002920:	f001 fa62 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_ETH_Init+0x19c>)
 8002926:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_ETH_Init+0x1a0>)
 8002928:	4403      	add	r3, r0
 800292a:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800292c:	f025 051c 	bic.w	r5, r5, #28
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002930:	d822      	bhi.n	8002978 <HAL_ETH_Init+0xac>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8002932:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002936:	6823      	ldr	r3, [r4, #0]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002938:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800293c:	611d      	str	r5, [r3, #16]
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800293e:	2100      	movs	r1, #0
 8002940:	4620      	mov	r0, r4
 8002942:	f7ff ff8c 	bl	800285e <HAL_ETH_WritePHYRegister>
 8002946:	4605      	mov	r5, r0
 8002948:	b1f0      	cbz	r0, 8002988 <HAL_ETH_Init+0xbc>
      heth->State = HAL_ETH_STATE_READY;
 800294a:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 800294c:	2101      	movs	r1, #1
 800294e:	4620      	mov	r0, r4
 8002950:	f7ff fd64 	bl	800241c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002954:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002958:	e00b      	b.n	8002972 <HAL_ETH_Init+0xa6>
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 800295a:	f7ff fcbd 	bl	80022d8 <HAL_GetTick>
 800295e:	1b40      	subs	r0, r0, r5
 8002960:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002964:	d9d5      	bls.n	8002912 <HAL_ETH_Init+0x46>
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8002966:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002968:	2300      	movs	r3, #0
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800296a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800296e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002972:	4628      	mov	r0, r5
 8002974:	b003      	add	sp, #12
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_ETH_Init+0x1a4>)
 800297a:	4a3e      	ldr	r2, [pc, #248]	; (8002a74 <HAL_ETH_Init+0x1a8>)
 800297c:	4403      	add	r3, r0
 800297e:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8002980:	bf98      	it	ls
 8002982:	f045 050c 	orrls.w	r5, r5, #12
 8002986:	e7d6      	b.n	8002936 <HAL_ETH_Init+0x6a>
  HAL_Delay(PHY_RESET_DELAY);
 8002988:	20ff      	movs	r0, #255	; 0xff
 800298a:	f7ff fcab 	bl	80022e4 <HAL_Delay>
  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800298e:	6863      	ldr	r3, [r4, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d053      	beq.n	8002a3c <HAL_ETH_Init+0x170>
    tickstart = HAL_GetTick();
 8002994:	f7ff fca0 	bl	80022d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8002998:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800299c:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800299e:	aa01      	add	r2, sp, #4
 80029a0:	2101      	movs	r1, #1
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff ff21 	bl	80027ea <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80029a8:	f7ff fc96 	bl	80022d8 <HAL_GetTick>
 80029ac:	1b80      	subs	r0, r0, r6
 80029ae:	42b8      	cmp	r0, r7
 80029b0:	d90b      	bls.n	80029ca <HAL_ETH_Init+0xfe>
        ETH_MACDMAConfig(heth, err);
 80029b2:	2101      	movs	r1, #1
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff fd31 	bl	800241c <ETH_MACDMAConfig>
        heth->State = HAL_ETH_STATE_READY;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80029c0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80029c2:	2503      	movs	r5, #3
        __HAL_UNLOCK(heth);
 80029c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80029c8:	e7d3      	b.n	8002972 <HAL_ETH_Init+0xa6>
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80029ca:	9b01      	ldr	r3, [sp, #4]
 80029cc:	0759      	lsls	r1, r3, #29
 80029ce:	d5e6      	bpl.n	800299e <HAL_ETH_Init+0xd2>
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80029d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d4:	2100      	movs	r1, #0
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff ff41 	bl	800285e <HAL_ETH_WritePHYRegister>
 80029dc:	2800      	cmp	r0, #0
 80029de:	d1b4      	bne.n	800294a <HAL_ETH_Init+0x7e>
    tickstart = HAL_GetTick();
 80029e0:	f7ff fc7a 	bl	80022d8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80029e4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029e8:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80029ea:	aa01      	add	r2, sp, #4
 80029ec:	2101      	movs	r1, #1
 80029ee:	4620      	mov	r0, r4
 80029f0:	f7ff fefb 	bl	80027ea <HAL_ETH_ReadPHYRegister>
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80029f4:	f7ff fc70 	bl	80022d8 <HAL_GetTick>
 80029f8:	1b80      	subs	r0, r0, r6
 80029fa:	42b8      	cmp	r0, r7
 80029fc:	d8d9      	bhi.n	80029b2 <HAL_ETH_Init+0xe6>
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80029fe:	9b01      	ldr	r3, [sp, #4]
 8002a00:	069a      	lsls	r2, r3, #26
 8002a02:	d5f2      	bpl.n	80029ea <HAL_ETH_Init+0x11e>
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002a04:	aa01      	add	r2, sp, #4
 8002a06:	2110      	movs	r1, #16
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7ff feee 	bl	80027ea <HAL_ETH_ReadPHYRegister>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d19b      	bne.n	800294a <HAL_ETH_Init+0x7e>
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002a12:	9b01      	ldr	r3, [sp, #4]
 8002a14:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a18:	bf18      	it	ne
 8002a1a:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002a1e:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M;
 8002a20:	bf4c      	ite	mi
 8002a22:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a24:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8002a28:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8002a2a:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff fcf4 	bl	800241c <ETH_MACDMAConfig>
  heth->State = HAL_ETH_STATE_READY;
 8002a34:	2301      	movs	r3, #1
 8002a36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8002a3a:	e79a      	b.n	8002972 <HAL_ETH_Init+0xa6>
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002a3c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002a40:	085b      	lsrs	r3, r3, #1
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002a42:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8002a46:	b292      	uxth	r2, r2
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff ff07 	bl	800285e <HAL_ETH_WritePHYRegister>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	f47f af7a 	bne.w	800294a <HAL_ETH_Init+0x7e>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002a56:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002a5a:	f7ff fc43 	bl	80022e4 <HAL_Delay>
 8002a5e:	e7e5      	b.n	8002a2c <HAL_ETH_Init+0x160>
    return HAL_ERROR;
 8002a60:	2501      	movs	r5, #1
 8002a62:	e786      	b.n	8002972 <HAL_ETH_Init+0xa6>
 8002a64:	40010000 	.word	0x40010000
 8002a68:	feced300 	.word	0xfeced300
 8002a6c:	00e4e1bf 	.word	0x00e4e1bf
 8002a70:	fde9f140 	.word	0xfde9f140
 8002a74:	017d783f 	.word	0x017d783f

08002a78 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8002a78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002a7e:	2b01      	cmp	r3, #1
{
 8002a80:	4605      	mov	r5, r0
 8002a82:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8002a86:	d031      	beq.n	8002aec <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8002a88:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 8002a8a:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002a8c:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002a8e:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8002a92:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002a94:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8002a96:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002a9a:	f042 0208 	orr.w	r2, r2, #8
 8002a9e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002aa4:	f7ff fc94 	bl	80023d0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8002aa8:	9a01      	ldr	r2, [sp, #4]
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002aae:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f042 0204 	orr.w	r2, r2, #4
 8002ab6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002abc:	f7ff fc88 	bl	80023d0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	9a00      	ldr	r2, [sp, #0]
  ETH_FlushTransmitFIFO(heth);
 8002ac4:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 8002ac6:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002ac8:	f7ff fc94 	bl	80023f4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002acc:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8002ad0:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002ad2:	682a      	ldr	r2, [r5, #0]
 8002ad4:	58d1      	ldr	r1, [r2, r3]
 8002ad6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002ada:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002adc:	58d1      	ldr	r1, [r2, r3]
 8002ade:	f041 0102 	orr.w	r1, r1, #2
 8002ae2:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8002ae4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002ae8:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8002aec:	b002      	add	sp, #8
 8002aee:	bd70      	pop	{r4, r5, r6, pc}

08002af0 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8002af0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002af4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8002af6:	2b01      	cmp	r3, #1
{
 8002af8:	4605      	mov	r5, r0
 8002afa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8002afe:	d031      	beq.n	8002b64 <HAL_ETH_Stop+0x74>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b00:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 8002b04:	2601      	movs	r6, #1
  __IO uint32_t tmpreg1 = 0U;
 8002b06:	2400      	movs	r4, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b08:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002b0a:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b0e:	5899      	ldr	r1, [r3, r2]
  __HAL_LOCK(heth);
 8002b10:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b14:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002b18:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b1a:	5899      	ldr	r1, [r3, r2]
 8002b1c:	f021 0102 	bic.w	r1, r1, #2
 8002b20:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 8002b22:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f022 0204 	bic.w	r2, r2, #4
 8002b2a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002b30:	f7ff fc4e 	bl	80023d0 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	9a01      	ldr	r2, [sp, #4]
  ETH_FlushTransmitFIFO(heth);
 8002b38:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg1;
 8002b3a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8002b3c:	f7ff fc5a 	bl	80023f4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b40:	682b      	ldr	r3, [r5, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002b42:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f022 0208 	bic.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002b50:	f7ff fc3e 	bl	80023d0 <ETH_Delay.constprop.4>
  return HAL_OK;
 8002b54:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg1;
 8002b56:	9a00      	ldr	r2, [sp, #0]
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002b5c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002b60:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8002b64:	b002      	add	sp, #8
 8002b66:	bd70      	pop	{r4, r5, r6, pc}

08002b68 <HAL_ETH_ConfigMAC>:
{
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8002b6a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{
 8002b6e:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8002b70:	2b01      	cmp	r3, #1
{
 8002b72:	460c      	mov	r4, r1
 8002b74:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8002b78:	d071      	beq.n	8002c5e <HAL_ETH_ConfigMAC+0xf6>
 8002b7a:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002b7c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8002b80:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
 8002b84:	682a      	ldr	r2, [r5, #0]
 8002b86:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (macconf != NULL)
 8002b8a:	2900      	cmp	r1, #0
 8002b8c:	d068      	beq.n	8002c60 <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 8002b8e:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b90:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8002c7c <HAL_ETH_ConfigMAC+0x114>
 8002b94:	ea0c 0c03 	and.w	ip, ip, r3
                          macconf->BackOffLimit |
 8002b98:	e9d1 3100 	ldrd	r3, r1, [r1]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	68a1      	ldr	r1, [r4, #8]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	68e1      	ldr	r1, [r4, #12]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6921      	ldr	r1, [r4, #16]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6961      	ldr	r1, [r4, #20]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	69a1      	ldr	r1, [r4, #24]
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	69e1      	ldr	r1, [r4, #28]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6a21      	ldr	r1, [r4, #32]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	433b      	orrs	r3, r7
 8002bc4:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002bc6:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bca:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bcc:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8002bce:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd0:	f7ff fb88 	bl	80022e4 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002bd4:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 8002bd8:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8002bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1;
 8002bdc:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 8002bde:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8002be0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1;
 8002be2:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 8002be4:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception |
 8002be6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be8:	4630      	mov	r0, r6
                                          macconf->BroadcastFramesReception |
 8002bea:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8002bec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bee:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 8002bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002bf2:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8002bf4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002bf6:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002bf8:	6053      	str	r3, [r2, #4]
    tmpreg1 = (heth->Instance)->MACFFR;
 8002bfa:	6857      	ldr	r7, [r2, #4]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bfc:	f7ff fb72 	bl	80022e4 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002c00:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002c02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    (heth->Instance)->MACFFR = tmpreg1;
 8002c04:	6057      	str	r7, [r2, #4]
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002c06:	6093      	str	r3, [r2, #8]
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002c08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c0a:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 8002c0c:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 8002c10:	4303      	orrs	r3, r0
 8002c12:	6e20      	ldr	r0, [r4, #96]	; 0x60
    tmpreg1 = (heth->Instance)->MACFCR;
 8002c14:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8002c16:	4303      	orrs	r3, r0
 8002c18:	6e60      	ldr	r0, [r4, #100]	; 0x64
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c1a:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 8002c1e:	4303      	orrs	r3, r0
 8002c20:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c22:	0409      	lsls	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8002c24:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c28:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8002c2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c2e:	430b      	orrs	r3, r1
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c30:	6193      	str	r3, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c32:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACFCR;
 8002c34:	6997      	ldr	r7, [r2, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c36:	f7ff fb55 	bl	80022e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002c3a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
    (heth->Instance)->MACFCR = tmpreg1;
 8002c3e:	682b      	ldr	r3, [r5, #0]
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002c40:	430a      	orrs	r2, r1
    (heth->Instance)->MACFCR = tmpreg1;
 8002c42:	619f      	str	r7, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c44:	4630      	mov	r0, r6
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002c46:	61da      	str	r2, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002c48:	69dc      	ldr	r4, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4a:	f7ff fb4b 	bl	80022e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	61dc      	str	r4, [r3, #28]
  heth->State = HAL_ETH_STATE_READY;
 8002c52:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8002c54:	2000      	movs	r0, #0
  heth->State = HAL_ETH_STATE_READY;
 8002c56:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002c5a:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 8002c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 8002c60:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002c62:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 8002c66:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002c6a:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c6c:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6e:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8002c70:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c72:	f7ff fb37 	bl	80022e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	601c      	str	r4, [r3, #0]
 8002c7a:	e7ea      	b.n	8002c52 <HAL_ETH_ConfigMAC+0xea>
 8002c7c:	ff20810f 	.word	0xff20810f

08002c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c84:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002c86:	4626      	mov	r6, r4
 8002c88:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002e30 <HAL_GPIO_Init+0x1b0>
 8002c8e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002e34 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c92:	680a      	ldr	r2, [r1, #0]
 8002c94:	fa32 f506 	lsrs.w	r5, r2, r6
 8002c98:	d102      	bne.n	8002ca0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002c9a:	b003      	add	sp, #12
 8002c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ca0:	f04f 0801 	mov.w	r8, #1
 8002ca4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002cac:	4590      	cmp	r8, r2
 8002cae:	d17e      	bne.n	8002dae <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002cb0:	684d      	ldr	r5, [r1, #4]
 8002cb2:	2d12      	cmp	r5, #18
 8002cb4:	f000 80a9 	beq.w	8002e0a <HAL_GPIO_Init+0x18a>
 8002cb8:	f200 8082 	bhi.w	8002dc0 <HAL_GPIO_Init+0x140>
 8002cbc:	2d02      	cmp	r5, #2
 8002cbe:	f000 80a1 	beq.w	8002e04 <HAL_GPIO_Init+0x184>
 8002cc2:	d876      	bhi.n	8002db2 <HAL_GPIO_Init+0x132>
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	f000 8088 	beq.w	8002dda <HAL_GPIO_Init+0x15a>
 8002cca:	2d01      	cmp	r5, #1
 8002ccc:	f000 8098 	beq.w	8002e00 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cd4:	2aff      	cmp	r2, #255	; 0xff
 8002cd6:	bf93      	iteet	ls
 8002cd8:	4682      	movls	sl, r0
 8002cda:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002cde:	3d08      	subhi	r5, #8
 8002ce0:	f8d0 b000 	ldrls.w	fp, [r0]
 8002ce4:	bf92      	itee	ls
 8002ce6:	00b5      	lslls	r5, r6, #2
 8002ce8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002cec:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cee:	fa09 f805 	lsl.w	r8, r9, r5
 8002cf2:	ea2b 0808 	bic.w	r8, fp, r8
 8002cf6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cfa:	bf88      	it	hi
 8002cfc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d00:	ea48 0505 	orr.w	r5, r8, r5
 8002d04:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d08:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002d0c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002d10:	d04d      	beq.n	8002dae <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d12:	4f44      	ldr	r7, [pc, #272]	; (8002e24 <HAL_GPIO_Init+0x1a4>)
 8002d14:	f026 0803 	bic.w	r8, r6, #3
 8002d18:	69bd      	ldr	r5, [r7, #24]
 8002d1a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002d1e:	f045 0501 	orr.w	r5, r5, #1
 8002d22:	61bd      	str	r5, [r7, #24]
 8002d24:	69bd      	ldr	r5, [r7, #24]
 8002d26:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002d2a:	f005 0501 	and.w	r5, r5, #1
 8002d2e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d30:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d34:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d36:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002d3a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3e:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d42:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d46:	4d38      	ldr	r5, [pc, #224]	; (8002e28 <HAL_GPIO_Init+0x1a8>)
 8002d48:	42a8      	cmp	r0, r5
 8002d4a:	d063      	beq.n	8002e14 <HAL_GPIO_Init+0x194>
 8002d4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d50:	42a8      	cmp	r0, r5
 8002d52:	d061      	beq.n	8002e18 <HAL_GPIO_Init+0x198>
 8002d54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d58:	42a8      	cmp	r0, r5
 8002d5a:	d05f      	beq.n	8002e1c <HAL_GPIO_Init+0x19c>
 8002d5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d60:	42a8      	cmp	r0, r5
 8002d62:	bf0c      	ite	eq
 8002d64:	2503      	moveq	r5, #3
 8002d66:	2504      	movne	r5, #4
 8002d68:	fa05 f50b 	lsl.w	r5, r5, fp
 8002d6c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002d70:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002d74:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d76:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002d7a:	bf14      	ite	ne
 8002d7c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d7e:	4395      	biceq	r5, r2
 8002d80:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002d82:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d84:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002d88:	bf14      	ite	ne
 8002d8a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d8c:	4395      	biceq	r5, r2
 8002d8e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d90:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d92:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d96:	bf14      	ite	ne
 8002d98:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d9a:	4395      	biceq	r5, r2
 8002d9c:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d9e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da4:	bf14      	ite	ne
 8002da6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002da8:	ea25 0202 	biceq.w	r2, r5, r2
 8002dac:	60da      	str	r2, [r3, #12]
	position++;
 8002dae:	3601      	adds	r6, #1
 8002db0:	e76f      	b.n	8002c92 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002db2:	2d03      	cmp	r5, #3
 8002db4:	d022      	beq.n	8002dfc <HAL_GPIO_Init+0x17c>
 8002db6:	2d11      	cmp	r5, #17
 8002db8:	d18a      	bne.n	8002cd0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dba:	68cc      	ldr	r4, [r1, #12]
 8002dbc:	3404      	adds	r4, #4
          break;
 8002dbe:	e787      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002dc0:	4f1a      	ldr	r7, [pc, #104]	; (8002e2c <HAL_GPIO_Init+0x1ac>)
 8002dc2:	42bd      	cmp	r5, r7
 8002dc4:	d009      	beq.n	8002dda <HAL_GPIO_Init+0x15a>
 8002dc6:	d812      	bhi.n	8002dee <HAL_GPIO_Init+0x16e>
 8002dc8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002e38 <HAL_GPIO_Init+0x1b8>
 8002dcc:	454d      	cmp	r5, r9
 8002dce:	d004      	beq.n	8002dda <HAL_GPIO_Init+0x15a>
 8002dd0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002dd4:	454d      	cmp	r5, r9
 8002dd6:	f47f af7b 	bne.w	8002cd0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dda:	688c      	ldr	r4, [r1, #8]
 8002ddc:	b1c4      	cbz	r4, 8002e10 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dde:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002de0:	bf0c      	ite	eq
 8002de2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002de6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dea:	2408      	movs	r4, #8
 8002dec:	e770      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002dee:	4565      	cmp	r5, ip
 8002df0:	d0f3      	beq.n	8002dda <HAL_GPIO_Init+0x15a>
 8002df2:	4575      	cmp	r5, lr
 8002df4:	d0f1      	beq.n	8002dda <HAL_GPIO_Init+0x15a>
 8002df6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002e3c <HAL_GPIO_Init+0x1bc>
 8002dfa:	e7eb      	b.n	8002dd4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dfc:	2400      	movs	r4, #0
 8002dfe:	e767      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e00:	68cc      	ldr	r4, [r1, #12]
          break;
 8002e02:	e765      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e04:	68cc      	ldr	r4, [r1, #12]
 8002e06:	3408      	adds	r4, #8
          break;
 8002e08:	e762      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e0a:	68cc      	ldr	r4, [r1, #12]
 8002e0c:	340c      	adds	r4, #12
          break;
 8002e0e:	e75f      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e10:	2404      	movs	r4, #4
 8002e12:	e75d      	b.n	8002cd0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	2500      	movs	r5, #0
 8002e16:	e7a7      	b.n	8002d68 <HAL_GPIO_Init+0xe8>
 8002e18:	2501      	movs	r5, #1
 8002e1a:	e7a5      	b.n	8002d68 <HAL_GPIO_Init+0xe8>
 8002e1c:	2502      	movs	r5, #2
 8002e1e:	e7a3      	b.n	8002d68 <HAL_GPIO_Init+0xe8>
 8002e20:	40010400 	.word	0x40010400
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40010800 	.word	0x40010800
 8002e2c:	10210000 	.word	0x10210000
 8002e30:	10310000 	.word	0x10310000
 8002e34:	10320000 	.word	0x10320000
 8002e38:	10110000 	.word	0x10110000
 8002e3c:	10220000 	.word	0x10220000

08002e40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002e44:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8002e48:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e4a:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e4e:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e52:	eb00 020b 	add.w	r2, r0, fp
 8002e56:	9201      	str	r2, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002e58:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_GPIO_DeInit+0xe0>)
  while ((GPIO_Pin >> position) != 0u)
 8002e5a:	fa31 f403 	lsrs.w	r4, r1, r3
 8002e5e:	d102      	bne.n	8002e66 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8002e60:	b003      	add	sp, #12
 8002e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e66:	fa0a f703 	lsl.w	r7, sl, r3
    if (iocurrent)
 8002e6a:	400f      	ands	r7, r1
 8002e6c:	d04f      	beq.n	8002f0e <HAL_GPIO_DeInit+0xce>
 8002e6e:	f023 0403 	bic.w	r4, r3, #3
 8002e72:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002e76:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e7a:	f003 0c03 	and.w	ip, r3, #3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e7e:	4d29      	ldr	r5, [pc, #164]	; (8002f24 <HAL_GPIO_DeInit+0xe4>)
      tmp = AFIO->EXTICR[position >> 2u];
 8002e80:	68a6      	ldr	r6, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e82:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002e86:	fa08 f90c 	lsl.w	r9, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e8a:	42a8      	cmp	r0, r5
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002e8c:	ea09 0e06 	and.w	lr, r9, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002e90:	d03f      	beq.n	8002f12 <HAL_GPIO_DeInit+0xd2>
 8002e92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e96:	42a8      	cmp	r0, r5
 8002e98:	d03d      	beq.n	8002f16 <HAL_GPIO_DeInit+0xd6>
 8002e9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e9e:	42a8      	cmp	r0, r5
 8002ea0:	d03b      	beq.n	8002f1a <HAL_GPIO_DeInit+0xda>
 8002ea2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ea6:	42a8      	cmp	r0, r5
 8002ea8:	bf14      	ite	ne
 8002eaa:	2504      	movne	r5, #4
 8002eac:	2503      	moveq	r5, #3
 8002eae:	fa05 f50c 	lsl.w	r5, r5, ip
 8002eb2:	4575      	cmp	r5, lr
 8002eb4:	ea6f 0607 	mvn.w	r6, r7
 8002eb8:	d10f      	bne.n	8002eda <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002eba:	68a5      	ldr	r5, [r4, #8]
 8002ebc:	ea25 0509 	bic.w	r5, r5, r9
 8002ec0:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002ec2:	6814      	ldr	r4, [r2, #0]
 8002ec4:	4034      	ands	r4, r6
 8002ec6:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002ec8:	6854      	ldr	r4, [r2, #4]
 8002eca:	4034      	ands	r4, r6
 8002ecc:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002ece:	6894      	ldr	r4, [r2, #8]
 8002ed0:	4034      	ands	r4, r6
 8002ed2:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002ed4:	68d4      	ldr	r4, [r2, #12]
 8002ed6:	4034      	ands	r4, r6
 8002ed8:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eda:	2fff      	cmp	r7, #255	; 0xff
 8002edc:	bf93      	iteet	ls
 8002ede:	4607      	movls	r7, r0
 8002ee0:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 8002ee4:	3c08      	subhi	r4, #8
 8002ee6:	f8d0 c000 	ldrls.w	ip, [r0]
 8002eea:	bf8a      	itet	hi
 8002eec:	f8d0 c004 	ldrhi.w	ip, [r0, #4]
 8002ef0:	009c      	lslls	r4, r3, #2
 8002ef2:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002ef4:	fa08 f504 	lsl.w	r5, r8, r4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef8:	bf88      	it	hi
 8002efa:	9f01      	ldrhi	r7, [sp, #4]
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002efc:	fa0b f404 	lsl.w	r4, fp, r4
 8002f00:	ea2c 0505 	bic.w	r5, ip, r5
 8002f04:	4325      	orrs	r5, r4
 8002f06:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002f08:	68c4      	ldr	r4, [r0, #12]
 8002f0a:	4026      	ands	r6, r4
 8002f0c:	60c6      	str	r6, [r0, #12]
    position++;
 8002f0e:	3301      	adds	r3, #1
 8002f10:	e7a3      	b.n	8002e5a <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002f12:	2500      	movs	r5, #0
 8002f14:	e7cb      	b.n	8002eae <HAL_GPIO_DeInit+0x6e>
 8002f16:	2501      	movs	r5, #1
 8002f18:	e7c9      	b.n	8002eae <HAL_GPIO_DeInit+0x6e>
 8002f1a:	2502      	movs	r5, #2
 8002f1c:	e7c7      	b.n	8002eae <HAL_GPIO_DeInit+0x6e>
 8002f1e:	bf00      	nop
 8002f20:	40010400 	.word	0x40010400
 8002f24:	40010800 	.word	0x40010800

08002f28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f28:	6883      	ldr	r3, [r0, #8]
 8002f2a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002f2c:	bf14      	ite	ne
 8002f2e:	2001      	movne	r0, #1
 8002f30:	2000      	moveq	r0, #0
 8002f32:	4770      	bx	lr

08002f34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	b10a      	cbz	r2, 8002f3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f36:	6101      	str	r1, [r0, #16]
  }
}
 8002f38:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f3a:	0409      	lsls	r1, r1, #16
 8002f3c:	e7fb      	b.n	8002f36 <HAL_GPIO_WritePin+0x2>

08002f3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f42:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f44:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
{
 8002f48:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8002f4c:	2801      	cmp	r0, #1
{
 8002f4e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8002f52:	f8bd e038 	ldrh.w	lr, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8002f56:	d027      	beq.n	8002fa8 <HAL_HCD_HC_Init+0x6a>
 8002f58:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	202c      	movs	r0, #44	; 0x2c
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f5e:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8002f62:	f884 52f8 	strb.w	r5, [r4, #760]	; 0x2f8
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f66:	bf08      	it	eq
 8002f68:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8002f6a:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f6e:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8002f72:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f7a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f7e:	f880 c03f 	strb.w	ip, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f82:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f86:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002f8a:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8002f8e:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8002f92:	e9cd ce01 	strd	ip, lr, [sp, #4]
 8002f96:	9700      	str	r7, [sp, #0]
 8002f98:	6820      	ldr	r0, [r4, #0]
 8002f9a:	f002 fa6b 	bl	8005474 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f9e:	f884 62f8 	strb.w	r6, [r4, #760]	; 0x2f8

  return status;
}
 8002fa2:	b004      	add	sp, #16
 8002fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8002fa8:	2002      	movs	r0, #2
 8002faa:	e7fa      	b.n	8002fa2 <HAL_HCD_HC_Init+0x64>

08002fac <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002fac:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 8002fb0:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8002fb2:	2b01      	cmp	r3, #1
{
 8002fb4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002fb6:	d009      	beq.n	8002fcc <HAL_HCD_HC_Halt+0x20>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbe:	6800      	ldr	r0, [r0, #0]
 8002fc0:	f002 fb57 	bl	8005672 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8002fca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002fcc:	2002      	movs	r0, #2
 8002fce:	e7fc      	b.n	8002fca <HAL_HCD_HC_Halt+0x1e>

08002fd0 <HAL_HCD_Init>:
{
 8002fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8002fd4:	4607      	mov	r7, r0
{
 8002fd6:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d041      	beq.n	8003060 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002fdc:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8002fe0:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002fe2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fe6:	b91b      	cbnz	r3, 8002ff0 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8002fe8:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002fec:	f013 f8c2 	bl	8016174 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	f887 32f9 	strb.w	r3, [r7, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8002ff8:	463c      	mov	r4, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ffa:	466d      	mov	r5, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ffc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8003000:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8003004:	bf08      	it	eq
 8003006:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8003008:	f002 f8f0 	bl	80051ec <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003014:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800301a:	e885 0003 	stmia.w	r5, {r0, r1}
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800301e:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003020:	f107 0804 	add.w	r8, r7, #4
 8003024:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f002 f8b1 	bl	8005190 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800302e:	f856 0b10 	ldr.w	r0, [r6], #16
 8003032:	2101      	movs	r1, #1
 8003034:	f002 f8e0 	bl	80051f8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003038:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800303e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003040:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003044:	e885 0003 	stmia.w	r5, {r0, r1}
 8003048:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800304c:	6838      	ldr	r0, [r7, #0]
 800304e:	f002 f961 	bl	8005314 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8003052:	2301      	movs	r3, #1
  return HAL_OK;
 8003054:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8003056:	f887 32f9 	strb.w	r3, [r7, #761]	; 0x2f9
}
 800305a:	b00a      	add	sp, #40	; 0x28
 800305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003060:	2001      	movs	r0, #1
 8003062:	e7fa      	b.n	800305a <HAL_HCD_Init+0x8a>

08003064 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003064:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8003066:	242c      	movs	r4, #44	; 0x2c
 8003068:	fb04 0401 	mla	r4, r4, r1, r0
{
 800306c:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8003070:	9e05      	ldr	r6, [sp, #20]
 8003072:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8003076:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800307a:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800307e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8003082:	b97f      	cbnz	r7, 80030a4 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003084:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003086:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 800308c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 8003090:	d02b      	beq.n	80030ea <HAL_HCD_HC_SubmitRequest+0x86>
 8003092:	42bb      	cmp	r3, r7
 8003094:	d029      	beq.n	80030ea <HAL_HCD_HC_SubmitRequest+0x86>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d131      	bne.n	80030fe <HAL_HCD_HC_SubmitRequest+0x9a>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800309a:	232c      	movs	r3, #44	; 0x2c
 800309c:	2200      	movs	r2, #0
 800309e:	fb03 0301 	mla	r3, r3, r1, r0
 80030a2:	e02a      	b.n	80030fa <HAL_HCD_HC_SubmitRequest+0x96>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030a4:	f04f 0c02 	mov.w	ip, #2
 80030a8:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  switch (ep_type)
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d826      	bhi.n	80030fe <HAL_HCD_HC_SubmitRequest+0x9a>
 80030b0:	a401      	add	r4, pc, #4	; (adr r4, 80030b8 <HAL_HCD_HC_SubmitRequest+0x54>)
 80030b2:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	0800309b 	.word	0x0800309b
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	080030eb 	.word	0x080030eb
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030c8:	2f01      	cmp	r7, #1
 80030ca:	d118      	bne.n	80030fe <HAL_HCD_HC_SubmitRequest+0x9a>
 80030cc:	b9ba      	cbnz	r2, 80030fe <HAL_HCD_HC_SubmitRequest+0x9a>
        if (length == 0U)
 80030ce:	b925      	cbnz	r5, 80030da <HAL_HCD_HC_SubmitRequest+0x76>
          hhcd->hc[ch_num].toggle_out = 1U;
 80030d0:	232c      	movs	r3, #44	; 0x2c
 80030d2:	fb03 0301 	mla	r3, r3, r1, r0
 80030d6:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030da:	232c      	movs	r3, #44	; 0x2c
 80030dc:	fb03 0301 	mla	r3, r3, r1, r0
 80030e0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030e4:	b14a      	cbz	r2, 80030fa <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e6:	2202      	movs	r2, #2
 80030e8:	e007      	b.n	80030fa <HAL_HCD_HC_SubmitRequest+0x96>
 80030ea:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030ec:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80030f0:	b9ca      	cbnz	r2, 8003126 <HAL_HCD_HC_SubmitRequest+0xc2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030f2:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
 80030f6:	2c00      	cmp	r4, #0
 80030f8:	d1f5      	bne.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x82>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030fe:	232c      	movs	r3, #44	; 0x2c
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003100:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003102:	434b      	muls	r3, r1
 8003104:	18c2      	adds	r2, r0, r3
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8003106:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800310a:	f103 0138 	add.w	r1, r3, #56	; 0x38
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800310e:	6456      	str	r6, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8003110:	64d5      	str	r5, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003112:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8003116:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].state = HC_IDLE;
 8003118:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800311c:	4401      	add	r1, r0
}
 800311e:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003120:	6800      	ldr	r0, [r0, #0]
 8003122:	f002 ba25 	b.w	8005570 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003126:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800312a:	e7db      	b.n	80030e4 <HAL_HCD_HC_SubmitRequest+0x80>

0800312c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003130:	6807      	ldr	r7, [r0, #0]
{
 8003132:	b085      	sub	sp, #20
 8003134:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003136:	4638      	mov	r0, r7
 8003138:	f002 f8e7 	bl	800530a <USB_GetMode>
 800313c:	2801      	cmp	r0, #1
 800313e:	f040 80f2 	bne.w	8003326 <HAL_HCD_IRQHandler+0x1fa>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003142:	6828      	ldr	r0, [r5, #0]
 8003144:	f002 f8dd 	bl	8005302 <USB_ReadInterrupts>
 8003148:	2800      	cmp	r0, #0
 800314a:	f000 80ec 	beq.w	8003326 <HAL_HCD_IRQHandler+0x1fa>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800314e:	6828      	ldr	r0, [r5, #0]
 8003150:	f002 f8d7 	bl	8005302 <USB_ReadInterrupts>
 8003154:	0284      	lsls	r4, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003156:	bf44      	itt	mi
 8003158:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 800315c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800315e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003160:	bf48      	it	mi
 8003162:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003164:	f002 f8cd 	bl	8005302 <USB_ReadInterrupts>
 8003168:	02c0      	lsls	r0, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800316a:	bf44      	itt	mi
 800316c:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8003170:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003172:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003174:	bf48      	it	mi
 8003176:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003178:	f002 f8c3 	bl	8005302 <USB_ReadInterrupts>
 800317c:	0141      	lsls	r1, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800317e:	bf44      	itt	mi
 8003180:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8003184:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003186:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003188:	bf48      	it	mi
 800318a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800318c:	f002 f8b9 	bl	8005302 <USB_ReadInterrupts>
 8003190:	0782      	lsls	r2, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003192:	bf44      	itt	mi
 8003194:	2202      	movmi	r2, #2
 8003196:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003198:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800319a:	bf48      	it	mi
 800319c:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800319e:	f002 f8b0 	bl	8005302 <USB_ReadInterrupts>
 80031a2:	0083      	lsls	r3, r0, #2
 80031a4:	d50e      	bpl.n	80031c4 <HAL_HCD_IRQHandler+0x98>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031aa:	682b      	ldr	r3, [r5, #0]
 80031ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031ae:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80031b2:	07de      	lsls	r6, r3, #31
 80031b4:	d406      	bmi.n	80031c4 <HAL_HCD_IRQHandler+0x98>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031b6:	4628      	mov	r0, r5
 80031b8:	f013 f804 	bl	80161c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031bc:	2101      	movs	r1, #1
 80031be:	6828      	ldr	r0, [r5, #0]
 80031c0:	f002 f8ee 	bl	80053a0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031c4:	6828      	ldr	r0, [r5, #0]
 80031c6:	f002 f89c 	bl	8005302 <USB_ReadInterrupts>
 80031ca:	01c4      	lsls	r4, r0, #7
 80031cc:	d53d      	bpl.n	800324a <HAL_HCD_IRQHandler+0x11e>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031d0:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80031d4:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80031d6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 80031da:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031dc:	9b03      	ldr	r3, [sp, #12]
 80031de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031e2:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031e4:	9b02      	ldr	r3, [sp, #8]
 80031e6:	0798      	lsls	r0, r3, #30
 80031e8:	d509      	bpl.n	80031fe <HAL_HCD_IRQHandler+0xd2>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031ea:	9b02      	ldr	r3, [sp, #8]
 80031ec:	07d9      	lsls	r1, r3, #31
 80031ee:	d502      	bpl.n	80031f6 <HAL_HCD_IRQHandler+0xca>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031f0:	4628      	mov	r0, r5
 80031f2:	f012 ffe3 	bl	80161bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031fe:	9b02      	ldr	r3, [sp, #8]
 8003200:	071a      	lsls	r2, r3, #28
 8003202:	d518      	bpl.n	8003236 <HAL_HCD_IRQHandler+0x10a>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800320c:	9b02      	ldr	r3, [sp, #8]
 800320e:	075b      	lsls	r3, r3, #29
 8003210:	f140 8094 	bpl.w	800333c <HAL_HCD_IRQHandler+0x210>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003214:	69a9      	ldr	r1, [r5, #24]
 8003216:	2902      	cmp	r1, #2
 8003218:	f040 8088 	bne.w	800332c <HAL_HCD_IRQHandler+0x200>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800321c:	9b02      	ldr	r3, [sp, #8]
 800321e:	6828      	ldr	r0, [r5, #0]
 8003220:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003228:	bf18      	it	ne
 800322a:	2101      	movne	r1, #1
 800322c:	f002 f8b8 	bl	80053a0 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003230:	4628      	mov	r0, r5
 8003232:	f012 ffcf 	bl	80161d4 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003236:	9b02      	ldr	r3, [sp, #8]
 8003238:	069e      	lsls	r6, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800323a:	bf42      	ittt	mi
 800323c:	9b03      	ldrmi	r3, [sp, #12]
 800323e:	f043 0320 	orrmi.w	r3, r3, #32
 8003242:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800324a:	6828      	ldr	r0, [r5, #0]
 800324c:	f002 f859 	bl	8005302 <USB_ReadInterrupts>
 8003250:	0704      	lsls	r4, r0, #28
 8003252:	d505      	bpl.n	8003260 <HAL_HCD_IRQHandler+0x134>
      HAL_HCD_SOF_Callback(hhcd);
 8003254:	4628      	mov	r0, r5
 8003256:	f012 ffad 	bl	80161b4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800325a:	2208      	movs	r2, #8
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003260:	6828      	ldr	r0, [r5, #0]
 8003262:	f002 f84e 	bl	8005302 <USB_ReadInterrupts>
 8003266:	06c0      	lsls	r0, r0, #27
 8003268:	d545      	bpl.n	80032f6 <HAL_HCD_IRQHandler+0x1ca>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800326a:	f8d5 8000 	ldr.w	r8, [r5]
 800326e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003272:	f023 0310 	bic.w	r3, r3, #16
 8003276:	f8c8 3018 	str.w	r3, [r8, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 800327a:	f8d8 6020 	ldr.w	r6, [r8, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800327e:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8003282:	2a02      	cmp	r2, #2
 8003284:	d132      	bne.n	80032ec <HAL_HCD_IRQHandler+0x1c0>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003286:	f3c6 190a 	ubfx	r9, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800328a:	f1b9 0f00 	cmp.w	r9, #0
 800328e:	d02d      	beq.n	80032ec <HAL_HCD_IRQHandler+0x1c0>
 8003290:	242c      	movs	r4, #44	; 0x2c
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003292:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003296:	fb04 5406 	mla	r4, r4, r6, r5
 800329a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800329c:	b331      	cbz	r1, 80032ec <HAL_HCD_IRQHandler+0x1c0>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800329e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80032a0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80032a2:	444b      	add	r3, r9
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d84d      	bhi.n	8003344 <HAL_HCD_IRQHandler+0x218>
          (void)USB_ReadPacket(hhcd->Instance,
 80032a8:	464a      	mov	r2, r9
 80032aa:	4640      	mov	r0, r8
 80032ac:	f002 f804 	bl	80052b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032b2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032b6:	444b      	add	r3, r9
 80032b8:	6463      	str	r3, [r4, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032bc:	f508 60a0 	add.w	r0, r8, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80032c0:	444b      	add	r3, r9
 80032c2:	6523      	str	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032c4:	0173      	lsls	r3, r6, #5
 80032c6:	181a      	adds	r2, r3, r0
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032c8:	4589      	cmp	r9, r1
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032ca:	6912      	ldr	r2, [r2, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032cc:	d10e      	bne.n	80032ec <HAL_HCD_IRQHandler+0x1c0>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032ce:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032d2:	b15a      	cbz	r2, 80032ec <HAL_HCD_IRQHandler+0x1c0>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032d4:	581a      	ldr	r2, [r3, r0]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032de:	501a      	str	r2, [r3, r0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80032e0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80032e4:	f083 0301 	eor.w	r3, r3, #1
 80032e8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ec:	682a      	ldr	r2, [r5, #0]
 80032ee:	6993      	ldr	r3, [r2, #24]
 80032f0:	f043 0310 	orr.w	r3, r3, #16
 80032f4:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f6:	6828      	ldr	r0, [r5, #0]
 80032f8:	f002 f803 	bl	8005302 <USB_ReadInterrupts>
 80032fc:	0181      	lsls	r1, r0, #6
 80032fe:	d512      	bpl.n	8003326 <HAL_HCD_IRQHandler+0x1fa>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003300:	6828      	ldr	r0, [r5, #0]
 8003302:	f002 f9b1 	bl	8005668 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003306:	f04f 0900 	mov.w	r9, #0
 800330a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800330e:	f04f 0802 	mov.w	r8, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003312:	272c      	movs	r7, #44	; 0x2c
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003314:	9000      	str	r0, [sp, #0]
 8003316:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003318:	68ab      	ldr	r3, [r5, #8]
 800331a:	6828      	ldr	r0, [r5, #0]
 800331c:	454b      	cmp	r3, r9
 800331e:	d815      	bhi.n	800334c <HAL_HCD_IRQHandler+0x220>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003324:	6143      	str	r3, [r0, #20]
}
 8003326:	b005      	add	sp, #20
 8003328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800332c:	68eb      	ldr	r3, [r5, #12]
 800332e:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8003330:	bf04      	itt	eq
 8003332:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8003336:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 800333a:	e779      	b.n	8003230 <HAL_HCD_IRQHandler+0x104>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800333c:	4628      	mov	r0, r5
 800333e:	f012 ff4d 	bl	80161dc <HAL_HCD_PortDisabled_Callback>
 8003342:	e778      	b.n	8003236 <HAL_HCD_IRQHandler+0x10a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003344:	2304      	movs	r3, #4
 8003346:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800334a:	e7cf      	b.n	80032ec <HAL_HCD_IRQHandler+0x1c0>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800334c:	9a00      	ldr	r2, [sp, #0]
 800334e:	f009 030f 	and.w	r3, r9, #15
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	07da      	lsls	r2, r3, #31
 8003358:	f140 80a3 	bpl.w	80034a2 <HAL_HCD_IRQHandler+0x376>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800335c:	9a01      	ldr	r2, [sp, #4]
 800335e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003362:	5899      	ldr	r1, [r3, r2]
 8003364:	fa5f f689 	uxtb.w	r6, r9
 8003368:	ea4f 1b46 	mov.w	fp, r6, lsl #5
 800336c:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8003370:	eb0b 040a 	add.w	r4, fp, sl
 8003374:	f411 4f00 	tst.w	r1, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003378:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337a:	f000 8112 	beq.w	80035a2 <HAL_HCD_IRQHandler+0x476>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800337e:	074b      	lsls	r3, r1, #29
 8003380:	d514      	bpl.n	80033ac <HAL_HCD_IRQHandler+0x280>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003382:	2104      	movs	r1, #4
 8003384:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003386:	68e1      	ldr	r1, [r4, #12]
 8003388:	f041 0102 	orr.w	r1, r1, #2
 800338c:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800338e:	68a0      	ldr	r0, [r4, #8]
 8003390:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8003394:	d05a      	beq.n	800344c <HAL_HCD_IRQHandler+0x320>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003396:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003398:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339a:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a2:	f002 f966 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	e0f0      	b.n	800358e <HAL_HCD_IRQHandler+0x462>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80033ac:	68a1      	ldr	r1, [r4, #8]
 80033ae:	05c9      	lsls	r1, r1, #23
 80033b0:	d510      	bpl.n	80033d4 <HAL_HCD_IRQHandler+0x2a8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80033b2:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80033b6:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80033ba:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80033bc:	fb07 5106 	mla	r1, r7, r6, r5
 80033c0:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c4:	68e1      	ldr	r1, [r4, #12]
 80033c6:	f041 0102 	orr.w	r1, r1, #2
 80033ca:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033cc:	4631      	mov	r1, r6
 80033ce:	f002 f950 	bl	8005672 <USB_HC_Halt>
 80033d2:	e7dc      	b.n	800338e <HAL_HCD_IRQHandler+0x262>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033d4:	68a1      	ldr	r1, [r4, #8]
 80033d6:	068a      	lsls	r2, r1, #26
 80033d8:	d502      	bpl.n	80033e0 <HAL_HCD_IRQHandler+0x2b4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033da:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033dc:	60a1      	str	r1, [r4, #8]
 80033de:	e7d6      	b.n	800338e <HAL_HCD_IRQHandler+0x262>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033e0:	68a1      	ldr	r1, [r4, #8]
 80033e2:	070b      	lsls	r3, r1, #28
 80033e4:	d50e      	bpl.n	8003404 <HAL_HCD_IRQHandler+0x2d8>
    hhcd->hc[ch_num].state = HC_STALL;
 80033e6:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033ea:	68e1      	ldr	r1, [r4, #12]
 80033ec:	f041 0102 	orr.w	r1, r1, #2
 80033f0:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80033f2:	fb07 5106 	mla	r1, r7, r6, r5
 80033f6:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033fa:	2110      	movs	r1, #16
 80033fc:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033fe:	2108      	movs	r1, #8
 8003400:	60a1      	str	r1, [r4, #8]
 8003402:	e7e3      	b.n	80033cc <HAL_HCD_IRQHandler+0x2a0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003404:	68a1      	ldr	r1, [r4, #8]
 8003406:	0549      	lsls	r1, r1, #21
 8003408:	d50e      	bpl.n	8003428 <HAL_HCD_IRQHandler+0x2fc>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800340a:	f04f 0c08 	mov.w	ip, #8
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800340e:	68e1      	ldr	r1, [r4, #12]
 8003410:	f041 0102 	orr.w	r1, r1, #2
 8003414:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003416:	fb07 5106 	mla	r1, r7, r6, r5
 800341a:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800341e:	2110      	movs	r1, #16
 8003420:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003426:	e7eb      	b.n	8003400 <HAL_HCD_IRQHandler+0x2d4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003428:	68a1      	ldr	r1, [r4, #8]
 800342a:	060a      	lsls	r2, r1, #24
 800342c:	d5af      	bpl.n	800338e <HAL_HCD_IRQHandler+0x262>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800342e:	f04f 0c06 	mov.w	ip, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003432:	68e1      	ldr	r1, [r4, #12]
 8003434:	f041 0102 	orr.w	r1, r1, #2
 8003438:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800343a:	fb07 5106 	mla	r1, r7, r6, r5
 800343e:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003442:	4631      	mov	r1, r6
 8003444:	f002 f915 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	e7c7      	b.n	80033dc <HAL_HCD_IRQHandler+0x2b0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800344c:	68a1      	ldr	r1, [r4, #8]
 800344e:	07cb      	lsls	r3, r1, #31
 8003450:	d545      	bpl.n	80034de <HAL_HCD_IRQHandler+0x3b2>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003452:	2301      	movs	r3, #1
 8003454:	fb07 5106 	mla	r1, r7, r6, r5
 8003458:	f881 3061 	strb.w	r3, [r1, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 800345c:	65c8      	str	r0, [r1, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800345e:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003460:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8003464:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8003468:	d11e      	bne.n	80034a8 <HAL_HCD_IRQHandler+0x37c>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346a:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346c:	4631      	mov	r1, r6
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003474:	6828      	ldr	r0, [r5, #0]
 8003476:	f002 f8fc 	bl	8005672 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800347a:	2310      	movs	r3, #16
 800347c:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 800347e:	692b      	ldr	r3, [r5, #16]
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003480:	fb07 5606 	mla	r6, r7, r6, r5
    if (hhcd->Init.dma_enable == 1U)
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_HCD_IRQHandler+0x36a>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003488:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 800348c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800348e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003492:	07d9      	lsls	r1, r3, #31
 8003494:	d505      	bpl.n	80034a2 <HAL_HCD_IRQHandler+0x376>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003496:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034a2:	f109 0901 	add.w	r9, r9, #1
 80034a6:	e737      	b.n	8003318 <HAL_HCD_IRQHandler+0x1ec>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034a8:	2a03      	cmp	r2, #3
 80034aa:	d10d      	bne.n	80034c8 <HAL_HCD_IRQHandler+0x39c>
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034ac:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034ae:	f85b 000a 	ldr.w	r0, [fp, sl]
 80034b2:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80034b6:	f84b 000a 	str.w	r0, [fp, sl]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034ba:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034be:	4631      	mov	r1, r6
 80034c0:	4628      	mov	r0, r5
 80034c2:	f012 fe83 	bl	80161cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c6:	e7da      	b.n	800347e <HAL_HCD_IRQHandler+0x352>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80034c8:	2a01      	cmp	r2, #1
 80034ca:	d1d8      	bne.n	800347e <HAL_HCD_IRQHandler+0x352>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034cc:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034d0:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 80034dc:	e7ef      	b.n	80034be <HAL_HCD_IRQHandler+0x392>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034de:	68a1      	ldr	r1, [r4, #8]
 80034e0:	f011 0102 	ands.w	r1, r1, #2
 80034e4:	d040      	beq.n	8003568 <HAL_HCD_IRQHandler+0x43c>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034e6:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034ea:	68e1      	ldr	r1, [r4, #12]
 80034ec:	f021 0102 	bic.w	r1, r1, #2
 80034f0:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034f2:	f890 1061 	ldrb.w	r1, [r0, #97]	; 0x61
 80034f6:	2901      	cmp	r1, #1
 80034f8:	d10c      	bne.n	8003514 <HAL_HCD_IRQHandler+0x3e8>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80034fa:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034fe:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003502:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003506:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	f012 fe5d 	bl	80161cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003512:	e7c6      	b.n	80034a2 <HAL_HCD_IRQHandler+0x376>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003514:	2905      	cmp	r1, #5
 8003516:	d0f0      	beq.n	80034fa <HAL_HCD_IRQHandler+0x3ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003518:	2906      	cmp	r1, #6
 800351a:	d001      	beq.n	8003520 <HAL_HCD_IRQHandler+0x3f4>
 800351c:	2908      	cmp	r1, #8
 800351e:	d10d      	bne.n	800353c <HAL_HCD_IRQHandler+0x410>
      hhcd->hc[ch_num].ErrCnt++;
 8003520:	fb07 5106 	mla	r1, r7, r6, r5
 8003524:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 8003526:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003528:	2802      	cmp	r0, #2
      hhcd->hc[ch_num].ErrCnt++;
 800352a:	65c8      	str	r0, [r1, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800352c:	f240 8119 	bls.w	8003762 <HAL_HCD_IRQHandler+0x636>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	65cb      	str	r3, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003534:	2304      	movs	r3, #4
 8003536:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
 800353a:	e7e0      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800353c:	2903      	cmp	r1, #3
 800353e:	d10a      	bne.n	8003556 <HAL_HCD_IRQHandler+0x42a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003540:	f880 8060 	strb.w	r8, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003544:	f85b 100a 	ldr.w	r1, [fp, sl]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003548:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800354c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003550:	f84b 100a 	str.w	r1, [fp, sl]
 8003554:	e7d3      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003556:	2907      	cmp	r1, #7
 8003558:	d1d1      	bne.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
      hhcd->hc[ch_num].ErrCnt++;
 800355a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800355c:	3301      	adds	r3, #1
 800355e:	65c3      	str	r3, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003560:	2304      	movs	r3, #4
 8003562:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8003566:	e7ca      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003568:	68a3      	ldr	r3, [r4, #8]
 800356a:	06da      	lsls	r2, r3, #27
 800356c:	d599      	bpl.n	80034a2 <HAL_HCD_IRQHandler+0x376>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800356e:	fb07 5206 	mla	r2, r7, r6, r5
 8003572:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8003576:	6828      	ldr	r0, [r5, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d10a      	bne.n	8003592 <HAL_HCD_IRQHandler+0x466>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800357c:	65d1      	str	r1, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800357e:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003580:	4631      	mov	r1, r6
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003588:	f002 f873 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800358c:	2310      	movs	r3, #16
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	e787      	b.n	80034a2 <HAL_HCD_IRQHandler+0x376>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003592:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8003596:	d1f9      	bne.n	800358c <HAL_HCD_IRQHandler+0x460>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003598:	65d3      	str	r3, [r2, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_NAK;
 800359a:	2303      	movs	r3, #3
 800359c:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
 80035a0:	e7ed      	b.n	800357e <HAL_HCD_IRQHandler+0x452>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035a2:	f011 0104 	ands.w	r1, r1, #4
 80035a6:	d006      	beq.n	80035b6 <HAL_HCD_IRQHandler+0x48a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035a8:	2304      	movs	r3, #4
 80035aa:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ac:	68e3      	ldr	r3, [r4, #12]
 80035ae:	f043 0302 	orr.w	r3, r3, #2
 80035b2:	60e3      	str	r3, [r4, #12]
 80035b4:	e775      	b.n	80034a2 <HAL_HCD_IRQHandler+0x376>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	d514      	bpl.n	80035e6 <HAL_HCD_IRQHandler+0x4ba>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035bc:	2320      	movs	r3, #32
 80035be:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035c0:	fb07 5306 	mla	r3, r7, r6, r5
 80035c4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80035c8:	2a01      	cmp	r2, #1
 80035ca:	f47f af6a 	bne.w	80034a2 <HAL_HCD_IRQHandler+0x376>
      hhcd->hc[ch_num].do_ping = 0U;
 80035ce:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035d2:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d6:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d8:	4631      	mov	r1, r6
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e0:	f002 f847 	bl	8005672 <USB_HC_Halt>
 80035e4:	e75d      	b.n	80034a2 <HAL_HCD_IRQHandler+0x376>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035e6:	68a2      	ldr	r2, [r4, #8]
 80035e8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80035ec:	d005      	beq.n	80035fa <HAL_HCD_IRQHandler+0x4ce>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ee:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035f0:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	60e3      	str	r3, [r4, #12]
 80035f8:	e6d3      	b.n	80033a2 <HAL_HCD_IRQHandler+0x276>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035fa:	68a1      	ldr	r1, [r4, #8]
 80035fc:	f011 0101 	ands.w	r1, r1, #1
 8003600:	d018      	beq.n	8003634 <HAL_HCD_IRQHandler+0x508>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003602:	fb07 5306 	mla	r3, r7, r6, r5
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003608:	68a2      	ldr	r2, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360a:	4631      	mov	r1, r6
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800360c:	0652      	lsls	r2, r2, #25
      hhcd->hc[ch_num].do_ping = 1U;
 800360e:	bf41      	itttt	mi
 8003610:	2201      	movmi	r2, #1
 8003612:	f883 203d 	strbmi.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003616:	2340      	movmi	r3, #64	; 0x40
 8003618:	60a3      	strmi	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800361a:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].state = HC_XFRC;
 800361c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003626:	f002 f824 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800362a:	2301      	movs	r3, #1
 800362c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800362e:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8003632:	e736      	b.n	80034a2 <HAL_HCD_IRQHandler+0x376>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003634:	68a3      	ldr	r3, [r4, #8]
 8003636:	065b      	lsls	r3, r3, #25
 8003638:	d511      	bpl.n	800365e <HAL_HCD_IRQHandler+0x532>
    hhcd->hc[ch_num].state = HC_NYET;
 800363a:	2204      	movs	r2, #4
 800363c:	fb07 5306 	mla	r3, r7, r6, r5
 8003640:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800364a:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800364c:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364e:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003656:	f002 f80c 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	e797      	b.n	800358e <HAL_HCD_IRQHandler+0x462>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800365e:	68a1      	ldr	r1, [r4, #8]
 8003660:	0709      	lsls	r1, r1, #28
 8003662:	d50c      	bpl.n	800367e <HAL_HCD_IRQHandler+0x552>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003664:	2308      	movs	r3, #8
 8003666:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003668:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366a:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	f001 fffe 	bl	8005672 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003676:	fb07 5606 	mla	r6, r7, r6, r5
 800367a:	2305      	movs	r3, #5
 800367c:	e7d7      	b.n	800362e <HAL_HCD_IRQHandler+0x502>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800367e:	68a1      	ldr	r1, [r4, #8]
 8003680:	06ca      	lsls	r2, r1, #27
 8003682:	d507      	bpl.n	8003694 <HAL_HCD_IRQHandler+0x568>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003684:	2200      	movs	r2, #0
 8003686:	fb07 5306 	mla	r3, r7, r6, r5
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 800368c:	2203      	movs	r2, #3
 800368e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003692:	e774      	b.n	800357e <HAL_HCD_IRQHandler+0x452>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003694:	68a1      	ldr	r1, [r4, #8]
 8003696:	060b      	lsls	r3, r1, #24
 8003698:	d50d      	bpl.n	80036b6 <HAL_HCD_IRQHandler+0x58a>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800369a:	2206      	movs	r2, #6
 800369c:	fb07 5306 	mla	r3, r7, r6, r5
 80036a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a4:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a6:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	f001 ffe0 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	e76b      	b.n	800358e <HAL_HCD_IRQHandler+0x462>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036b6:	68a1      	ldr	r1, [r4, #8]
 80036b8:	0549      	lsls	r1, r1, #21
 80036ba:	d50f      	bpl.n	80036dc <HAL_HCD_IRQHandler+0x5b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036bc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036be:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c6:	f001 ffd4 	bl	8005672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ca:	2310      	movs	r3, #16
 80036cc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036d2:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036d6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036d8:	2308      	movs	r3, #8
 80036da:	e7a8      	b.n	800362e <HAL_HCD_IRQHandler+0x502>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036dc:	68a1      	ldr	r1, [r4, #8]
 80036de:	078a      	lsls	r2, r1, #30
 80036e0:	f57f aedf 	bpl.w	80034a2 <HAL_HCD_IRQHandler+0x376>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036e4:	68e1      	ldr	r1, [r4, #12]
 80036e6:	f021 0102 	bic.w	r1, r1, #2
 80036ea:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036ec:	fb07 5106 	mla	r1, r7, r6, r5
 80036f0:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
 80036f4:	2801      	cmp	r0, #1
 80036f6:	d121      	bne.n	800373c <HAL_HCD_IRQHandler+0x610>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036f8:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036fc:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003700:	3b02      	subs	r3, #2
 8003702:	2b01      	cmp	r3, #1
 8003704:	f63f aefb 	bhi.w	80034fe <HAL_HCD_IRQHandler+0x3d2>
        if (hhcd->Init.dma_enable == 0U)
 8003708:	692b      	ldr	r3, [r5, #16]
 800370a:	b933      	cbnz	r3, 800371a <HAL_HCD_IRQHandler+0x5ee>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800370c:	f891 3055 	ldrb.w	r3, [r1, #85]	; 0x55
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
 8003718:	e6f1      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800371a:	2b01      	cmp	r3, #1
 800371c:	f47f aeef 	bne.w	80034fe <HAL_HCD_IRQHandler+0x3d2>
 8003720:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003722:	2b00      	cmp	r3, #0
 8003724:	f43f aeeb 	beq.w	80034fe <HAL_HCD_IRQHandler+0x3d2>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003728:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 800372c:	3b01      	subs	r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8003734:	07db      	lsls	r3, r3, #31
 8003736:	f57f aee2 	bpl.w	80034fe <HAL_HCD_IRQHandler+0x3d2>
 800373a:	e7e7      	b.n	800370c <HAL_HCD_IRQHandler+0x5e0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800373c:	2803      	cmp	r0, #3
 800373e:	d102      	bne.n	8003746 <HAL_HCD_IRQHandler+0x61a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003740:	f881 8060 	strb.w	r8, [r1, #96]	; 0x60
 8003744:	e6db      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003746:	2804      	cmp	r0, #4
 8003748:	d0fa      	beq.n	8003740 <HAL_HCD_IRQHandler+0x614>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800374a:	2805      	cmp	r0, #5
 800374c:	d102      	bne.n	8003754 <HAL_HCD_IRQHandler+0x628>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800374e:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 8003752:	e6d4      	b.n	80034fe <HAL_HCD_IRQHandler+0x3d2>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003754:	2806      	cmp	r0, #6
 8003756:	f43f aee3 	beq.w	8003520 <HAL_HCD_IRQHandler+0x3f4>
 800375a:	2808      	cmp	r0, #8
 800375c:	f47f aecf 	bne.w	80034fe <HAL_HCD_IRQHandler+0x3d2>
 8003760:	e6de      	b.n	8003520 <HAL_HCD_IRQHandler+0x3f4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003762:	f881 8060 	strb.w	r8, [r1, #96]	; 0x60
 8003766:	e6ed      	b.n	8003544 <HAL_HCD_IRQHandler+0x418>

08003768 <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8003768:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 800376c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800376e:	2b01      	cmp	r3, #1
{
 8003770:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8003772:	d00c      	beq.n	800378e <HAL_HCD_Start+0x26>
 8003774:	2101      	movs	r1, #1
 8003776:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	f001 fe4a 	bl	8005414 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	f001 fd2d 	bl	80051e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003786:	2000      	movs	r0, #0
 8003788:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800378c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800378e:	2002      	movs	r0, #2
 8003790:	e7fc      	b.n	800378c <HAL_HCD_Start+0x24>

08003792 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003792:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 8003796:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8003798:	2b01      	cmp	r3, #1
{
 800379a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800379c:	d009      	beq.n	80037b2 <HAL_HCD_Stop+0x20>
 800379e:	2301      	movs	r3, #1
 80037a0:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	f001 ffc3 	bl	8005730 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80037b0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80037b2:	2002      	movs	r0, #2
 80037b4:	e7fc      	b.n	80037b0 <HAL_HCD_Stop+0x1e>

080037b6 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80037b6:	6800      	ldr	r0, [r0, #0]
 80037b8:	f001 be0e 	b.w	80053d8 <USB_ResetPort>

080037bc <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80037bc:	232c      	movs	r3, #44	; 0x2c
 80037be:	fb03 0101 	mla	r1, r3, r1, r0
}
 80037c2:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 80037c6:	4770      	bx	lr

080037c8 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80037c8:	232c      	movs	r3, #44	; 0x2c
 80037ca:	fb03 0101 	mla	r1, r3, r1, r0
}
 80037ce:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80037d0:	4770      	bx	lr

080037d2 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80037d2:	6800      	ldr	r0, [r0, #0]
 80037d4:	f001 be49 	b.w	800546a <USB_GetCurrentFrame>

080037d8 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80037d8:	6800      	ldr	r0, [r0, #0]
 80037da:	f001 be3b 	b.w	8005454 <USB_GetHostSpeed>
	...

080037e0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80037e0:	2201      	movs	r2, #1
 80037e2:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	4770      	bx	lr
 80037e8:	420e0020 	.word	0x420e0020

080037ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f0:	4604      	mov	r4, r0
 80037f2:	b918      	cbnz	r0, 80037fc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80037f6:	b002      	add	sp, #8
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fc:	6803      	ldr	r3, [r0, #0]
 80037fe:	07db      	lsls	r3, r3, #31
 8003800:	d414      	bmi.n	800382c <HAL_RCC_OscConfig+0x40>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	079f      	lsls	r7, r3, #30
 8003806:	d45f      	bmi.n	80038c8 <HAL_RCC_OscConfig+0xdc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	0719      	lsls	r1, r3, #28
 800380c:	f100 8096 	bmi.w	800393c <HAL_RCC_OscConfig+0x150>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	075a      	lsls	r2, r3, #29
 8003814:	f100 80c0 	bmi.w	8003998 <HAL_RCC_OscConfig+0x1ac>
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800381a:	2a00      	cmp	r2, #0
 800381c:	f040 812e 	bne.w	8003a7c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003820:	6a22      	ldr	r2, [r4, #32]
 8003822:	2a00      	cmp	r2, #0
 8003824:	f040 8181 	bne.w	8003b2a <HAL_RCC_OscConfig+0x33e>
  return HAL_OK;
 8003828:	2000      	movs	r0, #0
 800382a:	e7e4      	b.n	80037f6 <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800382c:	4d8e      	ldr	r5, [pc, #568]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800382e:	686b      	ldr	r3, [r5, #4]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	d007      	beq.n	8003848 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003838:	686b      	ldr	r3, [r5, #4]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b08      	cmp	r3, #8
 8003840:	d109      	bne.n	8003856 <HAL_RCC_OscConfig+0x6a>
 8003842:	686b      	ldr	r3, [r5, #4]
 8003844:	03de      	lsls	r6, r3, #15
 8003846:	d506      	bpl.n	8003856 <HAL_RCC_OscConfig+0x6a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	039d      	lsls	r5, r3, #14
 800384c:	d5d9      	bpl.n	8003802 <HAL_RCC_OscConfig+0x16>
 800384e:	68a3      	ldr	r3, [r4, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1d6      	bne.n	8003802 <HAL_RCC_OscConfig+0x16>
 8003854:	e7ce      	b.n	80037f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d110      	bne.n	8003880 <HAL_RCC_OscConfig+0x94>
 800385e:	682b      	ldr	r3, [r5, #0]
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003866:	f7fe fd37 	bl	80022d8 <HAL_GetTick>
 800386a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	0398      	lsls	r0, r3, #14
 8003870:	d4c7      	bmi.n	8003802 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003872:	f7fe fd31 	bl	80022d8 <HAL_GetTick>
 8003876:	1b80      	subs	r0, r0, r6
 8003878:	2864      	cmp	r0, #100	; 0x64
 800387a:	d9f7      	bls.n	800386c <HAL_RCC_OscConfig+0x80>
            return HAL_TIMEOUT;
 800387c:	2003      	movs	r0, #3
 800387e:	e7ba      	b.n	80037f6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	b99b      	cbnz	r3, 80038aa <HAL_RCC_OscConfig+0xbe>
 8003882:	682b      	ldr	r3, [r5, #0]
 8003884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003892:	f7fe fd21 	bl	80022d8 <HAL_GetTick>
 8003896:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	0399      	lsls	r1, r3, #14
 800389c:	d5b1      	bpl.n	8003802 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389e:	f7fe fd1b 	bl	80022d8 <HAL_GetTick>
 80038a2:	1b80      	subs	r0, r0, r6
 80038a4:	2864      	cmp	r0, #100	; 0x64
 80038a6:	d9f7      	bls.n	8003898 <HAL_RCC_OscConfig+0xac>
 80038a8:	e7e8      	b.n	800387c <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	d103      	bne.n	80038ba <HAL_RCC_OscConfig+0xce>
 80038b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b6:	602b      	str	r3, [r5, #0]
 80038b8:	e7d1      	b.n	800385e <HAL_RCC_OscConfig+0x72>
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	e7cd      	b.n	8003864 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c8:	4d67      	ldr	r5, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80038ca:	686b      	ldr	r3, [r5, #4]
 80038cc:	f013 0f0c 	tst.w	r3, #12
 80038d0:	d007      	beq.n	80038e2 <HAL_RCC_OscConfig+0xf6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d2:	686b      	ldr	r3, [r5, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d110      	bne.n	80038fe <HAL_RCC_OscConfig+0x112>
 80038dc:	686b      	ldr	r3, [r5, #4]
 80038de:	03da      	lsls	r2, r3, #15
 80038e0:	d40d      	bmi.n	80038fe <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	079b      	lsls	r3, r3, #30
 80038e6:	d502      	bpl.n	80038ee <HAL_RCC_OscConfig+0x102>
 80038e8:	6963      	ldr	r3, [r4, #20]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d182      	bne.n	80037f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	69a2      	ldr	r2, [r4, #24]
 80038f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	e784      	b.n	8003808 <HAL_RCC_OscConfig+0x1c>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fe:	6962      	ldr	r2, [r4, #20]
 8003900:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x280>)
 8003902:	b16a      	cbz	r2, 8003920 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_HSI_ENABLE();
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003908:	f7fe fce6 	bl	80022d8 <HAL_GetTick>
 800390c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	079f      	lsls	r7, r3, #30
 8003912:	d4ec      	bmi.n	80038ee <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe fce0 	bl	80022d8 <HAL_GetTick>
 8003918:	1b80      	subs	r0, r0, r6
 800391a:	2802      	cmp	r0, #2
 800391c:	d9f7      	bls.n	800390e <HAL_RCC_OscConfig+0x122>
 800391e:	e7ad      	b.n	800387c <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_HSI_DISABLE();
 8003920:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003922:	f7fe fcd9 	bl	80022d8 <HAL_GetTick>
 8003926:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	0798      	lsls	r0, r3, #30
 800392c:	f57f af6c 	bpl.w	8003808 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe fcd2 	bl	80022d8 <HAL_GetTick>
 8003934:	1b80      	subs	r0, r0, r6
 8003936:	2802      	cmp	r0, #2
 8003938:	d9f6      	bls.n	8003928 <HAL_RCC_OscConfig+0x13c>
 800393a:	e79f      	b.n	800387c <HAL_RCC_OscConfig+0x90>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	69e2      	ldr	r2, [r4, #28]
 800393e:	4d4a      	ldr	r5, [pc, #296]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_OscConfig+0x284>)
 8003942:	b1da      	cbz	r2, 800397c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003948:	f7fe fcc6 	bl	80022d8 <HAL_GetTick>
 800394c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003950:	079b      	lsls	r3, r3, #30
 8003952:	d50d      	bpl.n	8003970 <HAL_RCC_OscConfig+0x184>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003954:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003958:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_RCC_OscConfig+0x288>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003960:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003962:	bf00      	nop
  }
  while (Delay --);
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_RCC_OscConfig+0x176>
 800396e:	e74f      	b.n	8003810 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe fcb2 	bl	80022d8 <HAL_GetTick>
 8003974:	1b80      	subs	r0, r0, r6
 8003976:	2802      	cmp	r0, #2
 8003978:	d9e9      	bls.n	800394e <HAL_RCC_OscConfig+0x162>
 800397a:	e77f      	b.n	800387c <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_LSI_DISABLE();
 800397c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800397e:	f7fe fcab 	bl	80022d8 <HAL_GetTick>
 8003982:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003986:	079f      	lsls	r7, r3, #30
 8003988:	f57f af42 	bpl.w	8003810 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fca4 	bl	80022d8 <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2802      	cmp	r0, #2
 8003994:	d9f6      	bls.n	8003984 <HAL_RCC_OscConfig+0x198>
 8003996:	e771      	b.n	800387c <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003998:	4d33      	ldr	r5, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800399a:	69eb      	ldr	r3, [r5, #28]
 800399c:	00de      	lsls	r6, r3, #3
 800399e:	d424      	bmi.n	80039ea <HAL_RCC_OscConfig+0x1fe>
      pwrclkchanged = SET;
 80039a0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	69eb      	ldr	r3, [r5, #28]
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	61eb      	str	r3, [r5, #28]
 80039aa:	69eb      	ldr	r3, [r5, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	4e30      	ldr	r6, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x28c>)
 80039b6:	6833      	ldr	r3, [r6, #0]
 80039b8:	05d8      	lsls	r0, r3, #23
 80039ba:	d518      	bpl.n	80039ee <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d126      	bne.n	8003a10 <HAL_RCC_OscConfig+0x224>
 80039c2:	6a2b      	ldr	r3, [r5, #32]
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80039ca:	f7fe fc85 	bl	80022d8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039d2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	6a2b      	ldr	r3, [r5, #32]
 80039d6:	079a      	lsls	r2, r3, #30
 80039d8:	d53f      	bpl.n	8003a5a <HAL_RCC_OscConfig+0x26e>
    if (pwrclkchanged == SET)
 80039da:	2f00      	cmp	r7, #0
 80039dc:	f43f af1c 	beq.w	8003818 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	69eb      	ldr	r3, [r5, #28]
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	61eb      	str	r3, [r5, #28]
 80039e8:	e716      	b.n	8003818 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2700      	movs	r7, #0
 80039ec:	e7e2      	b.n	80039b4 <HAL_RCC_OscConfig+0x1c8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	6833      	ldr	r3, [r6, #0]
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80039f6:	f7fe fc6f 	bl	80022d8 <HAL_GetTick>
 80039fa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	6833      	ldr	r3, [r6, #0]
 80039fe:	05d9      	lsls	r1, r3, #23
 8003a00:	d4dc      	bmi.n	80039bc <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fc69 	bl	80022d8 <HAL_GetTick>
 8003a06:	eba0 0008 	sub.w	r0, r0, r8
 8003a0a:	2864      	cmp	r0, #100	; 0x64
 8003a0c:	d9f6      	bls.n	80039fc <HAL_RCC_OscConfig+0x210>
 8003a0e:	e735      	b.n	800387c <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	b9ab      	cbnz	r3, 8003a3e <HAL_RCC_OscConfig+0x252>
 8003a12:	6a2b      	ldr	r3, [r5, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	622b      	str	r3, [r5, #32]
 8003a1e:	6a2b      	ldr	r3, [r5, #32]
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003a26:	f7fe fc57 	bl	80022d8 <HAL_GetTick>
 8003a2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	6a2b      	ldr	r3, [r5, #32]
 8003a2e:	079b      	lsls	r3, r3, #30
 8003a30:	d5d3      	bpl.n	80039da <HAL_RCC_OscConfig+0x1ee>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fc51 	bl	80022d8 <HAL_GetTick>
 8003a36:	1b80      	subs	r0, r0, r6
 8003a38:	4540      	cmp	r0, r8
 8003a3a:	d9f7      	bls.n	8003a2c <HAL_RCC_OscConfig+0x240>
 8003a3c:	e71e      	b.n	800387c <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	6a2b      	ldr	r3, [r5, #32]
 8003a42:	d103      	bne.n	8003a4c <HAL_RCC_OscConfig+0x260>
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	622b      	str	r3, [r5, #32]
 8003a4a:	e7ba      	b.n	80039c2 <HAL_RCC_OscConfig+0x1d6>
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	622b      	str	r3, [r5, #32]
 8003a52:	6a2b      	ldr	r3, [r5, #32]
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	e7b6      	b.n	80039c8 <HAL_RCC_OscConfig+0x1dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fc3d 	bl	80022d8 <HAL_GetTick>
 8003a5e:	eba0 0008 	sub.w	r0, r0, r8
 8003a62:	42b0      	cmp	r0, r6
 8003a64:	d9b6      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1e8>
 8003a66:	e709      	b.n	800387c <HAL_RCC_OscConfig+0x90>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	42420000 	.word	0x42420000
 8003a70:	42420480 	.word	0x42420480
 8003a74:	20000008 	.word	0x20000008
 8003a78:	40007000 	.word	0x40007000
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a7c:	4d58      	ldr	r5, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x3f4>)
 8003a7e:	686b      	ldr	r3, [r5, #4]
 8003a80:	03d8      	lsls	r0, r3, #15
 8003a82:	d508      	bpl.n	8003a96 <HAL_RCC_OscConfig+0x2aa>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a84:	686b      	ldr	r3, [r5, #4]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d103      	bne.n	8003a96 <HAL_RCC_OscConfig+0x2aa>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003a8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003a90:	03d9      	lsls	r1, r3, #15
 8003a92:	f53f aeaf 	bmi.w	80037f4 <HAL_RCC_OscConfig+0x8>
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003a96:	2a02      	cmp	r2, #2
 8003a98:	d133      	bne.n	8003b02 <HAL_RCC_OscConfig+0x316>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	00da      	lsls	r2, r3, #3
 8003a9e:	d506      	bpl.n	8003aae <HAL_RCC_OscConfig+0x2c2>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003aa0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003aa2:	6b62      	ldr	r2, [r4, #52]	; 0x34
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	f47f aea3 	bne.w	80037f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL2_DISABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4e4c      	ldr	r6, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x3f8>)
 8003ab2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fc10 	bl	80022d8 <HAL_GetTick>
 8003ab8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	d41a      	bmi.n	8003af6 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003ac0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ac2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003acc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003ace:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ad0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003adc:	f7fe fbfc 	bl	80022d8 <HAL_GetTick>
 8003ae0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	011f      	lsls	r7, r3, #4
 8003ae6:	f53f ae9b 	bmi.w	8003820 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003aea:	f7fe fbf5 	bl	80022d8 <HAL_GetTick>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	2864      	cmp	r0, #100	; 0x64
 8003af2:	d9f6      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x2f6>
 8003af4:	e6c2      	b.n	800387c <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003af6:	f7fe fbef 	bl	80022d8 <HAL_GetTick>
 8003afa:	1bc0      	subs	r0, r0, r7
 8003afc:	2864      	cmp	r0, #100	; 0x64
 8003afe:	d9dc      	bls.n	8003aba <HAL_RCC_OscConfig+0x2ce>
 8003b00:	e6bc      	b.n	800387c <HAL_RCC_OscConfig+0x90>
        __HAL_RCC_PLL2_DISABLE();
 8003b02:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003b04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8003b0c:	4b35      	ldr	r3, [pc, #212]	; (8003be4 <HAL_RCC_OscConfig+0x3f8>)
 8003b0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b10:	f7fe fbe2 	bl	80022d8 <HAL_GetTick>
 8003b14:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003b16:	682b      	ldr	r3, [r5, #0]
 8003b18:	0118      	lsls	r0, r3, #4
 8003b1a:	f57f ae81 	bpl.w	8003820 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b1e:	f7fe fbdb 	bl	80022d8 <HAL_GetTick>
 8003b22:	1b80      	subs	r0, r0, r6
 8003b24:	2864      	cmp	r0, #100	; 0x64
 8003b26:	d9f6      	bls.n	8003b16 <HAL_RCC_OscConfig+0x32a>
 8003b28:	e6a8      	b.n	800387c <HAL_RCC_OscConfig+0x90>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x3f4>)
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	461d      	mov	r5, r3
 8003b30:	f001 010c 	and.w	r1, r1, #12
 8003b34:	2908      	cmp	r1, #8
 8003b36:	d041      	beq.n	8003bbc <HAL_RCC_OscConfig+0x3d0>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4e2b      	ldr	r6, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x3fc>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b40:	d12f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3b6>
        tickstart = HAL_GetTick();
 8003b42:	f7fe fbc9 	bl	80022d8 <HAL_GetTick>
 8003b46:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	0199      	lsls	r1, r3, #6
 8003b4c:	d423      	bmi.n	8003b96 <HAL_RCC_OscConfig+0x3aa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_OscConfig+0x37e>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003b56:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003b58:	6861      	ldr	r1, [r4, #4]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	62ea      	str	r2, [r5, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b5e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003b60:	68e1      	ldr	r1, [r4, #12]
 8003b62:	f022 020f 	bic.w	r2, r2, #15
 8003b66:	430a      	orrs	r2, r1
 8003b68:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003b6c:	686a      	ldr	r2, [r5, #4]
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003b74:	4313      	orrs	r3, r2
 8003b76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b78:	2301      	movs	r3, #1
 8003b7a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fbac 	bl	80022d8 <HAL_GetTick>
 8003b80:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	019a      	lsls	r2, r3, #6
 8003b86:	f53f ae4f 	bmi.w	8003828 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7fe fba5 	bl	80022d8 <HAL_GetTick>
 8003b8e:	1b00      	subs	r0, r0, r4
 8003b90:	2802      	cmp	r0, #2
 8003b92:	d9f6      	bls.n	8003b82 <HAL_RCC_OscConfig+0x396>
 8003b94:	e672      	b.n	800387c <HAL_RCC_OscConfig+0x90>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fe fb9f 	bl	80022d8 <HAL_GetTick>
 8003b9a:	1bc0      	subs	r0, r0, r7
 8003b9c:	2802      	cmp	r0, #2
 8003b9e:	d9d3      	bls.n	8003b48 <HAL_RCC_OscConfig+0x35c>
 8003ba0:	e66c      	b.n	800387c <HAL_RCC_OscConfig+0x90>
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fb99 	bl	80022d8 <HAL_GetTick>
 8003ba6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba8:	682b      	ldr	r3, [r5, #0]
 8003baa:	019b      	lsls	r3, r3, #6
 8003bac:	f57f ae3c 	bpl.w	8003828 <HAL_RCC_OscConfig+0x3c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fb92 	bl	80022d8 <HAL_GetTick>
 8003bb4:	1b00      	subs	r0, r0, r4
 8003bb6:	2802      	cmp	r0, #2
 8003bb8:	d9f6      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x3bc>
 8003bba:	e65f      	b.n	800387c <HAL_RCC_OscConfig+0x90>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	2a01      	cmp	r2, #1
 8003bbe:	f43f ae19 	beq.w	80037f4 <HAL_RCC_OscConfig+0x8>
        pll_config = RCC->CFGR;
 8003bc2:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc6:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	f47f ae12 	bne.w	80037f4 <HAL_RCC_OscConfig+0x8>
 8003bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bd2:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003bd6:	1ac0      	subs	r0, r0, r3
 8003bd8:	bf18      	it	ne
 8003bda:	2001      	movne	r0, #1
 8003bdc:	e60b      	b.n	80037f6 <HAL_RCC_OscConfig+0xa>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	42420068 	.word	0x42420068
 8003be8:	42420060 	.word	0x42420060

08003bec <HAL_RCC_GetSysClockFreq>:
{
 8003bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bee:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003bf0:	466a      	mov	r2, sp
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf4:	f103 0508 	add.w	r5, r3, #8
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	c403      	stmia	r4!, {r0, r1}
 8003c02:	42ab      	cmp	r3, r5
 8003c04:	4622      	mov	r2, r4
 8003c06:	d1f7      	bne.n	8003bf8 <HAL_RCC_GetSysClockFreq+0xc>
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	889b      	ldrh	r3, [r3, #4]
 8003c0c:	6020      	str	r0, [r4, #0]
 8003c0e:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c12:	ac04      	add	r4, sp, #16
 8003c14:	f103 0510 	add.w	r5, r3, #16
 8003c18:	4622      	mov	r2, r4
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	6859      	ldr	r1, [r3, #4]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	c203      	stmia	r2!, {r0, r1}
 8003c22:	42ab      	cmp	r3, r5
 8003c24:	4614      	mov	r4, r2
 8003c26:	d1f7      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8003c28:	491e      	ldr	r1, [pc, #120]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c2c:	f003 020c 	and.w	r2, r3, #12
 8003c30:	2a08      	cmp	r2, #8
 8003c32:	d131      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003c38:	a808      	add	r0, sp, #32
 8003c3a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c3c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3e:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c42:	d526      	bpl.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003c44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	4403      	add	r3, r0
 8003c4c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003c50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c56:	4b14      	ldr	r3, [pc, #80]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003c5a:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003c5c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003c5e:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8003c62:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003c64:	fba4 4506 	umull	r4, r5, r4, r6
 8003c68:	fba4 0103 	umull	r0, r1, r4, r3
 8003c6c:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003c70:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8003c74:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003c76:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7a:	f7fc fb3b 	bl	80002f4 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003c7e:	2e0d      	cmp	r6, #13
 8003c80:	d100      	bne.n	8003c84 <HAL_RCC_GetSysClockFreq+0x98>
          pllclk = pllclk / 2;
 8003c82:	0840      	lsrs	r0, r0, #1
}
 8003c84:	b009      	add	sp, #36	; 0x24
 8003c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003c88:	fb03 f006 	mul.w	r0, r3, r6
 8003c8c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003c90:	e7f5      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c92:	4806      	ldr	r0, [pc, #24]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c94:	4370      	muls	r0, r6
 8003c96:	e7f5      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 8003c98:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 8003c9a:	e7f3      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x98>
 8003c9c:	08017cbc 	.word	0x08017cbc
 8003ca0:	08017cca 	.word	0x08017cca
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCC_ClockConfig>:
{
 8003cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	b910      	cbnz	r0, 8003cc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003cba:	2001      	movs	r0, #1
}
 8003cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4a44      	ldr	r2, [pc, #272]	; (8003dd4 <HAL_RCC_ClockConfig+0x124>)
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	d328      	bcc.n	8003d1e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	078e      	lsls	r6, r1, #30
 8003cd0:	d430      	bmi.n	8003d34 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	07ca      	lsls	r2, r1, #31
 8003cd4:	d443      	bmi.n	8003d5e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4a3f      	ldr	r2, [pc, #252]	; (8003dd4 <HAL_RCC_ClockConfig+0x124>)
 8003cd8:	6813      	ldr	r3, [r2, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	42ab      	cmp	r3, r5
 8003ce0:	d865      	bhi.n	8003dae <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	4d3c      	ldr	r5, [pc, #240]	; (8003dd8 <HAL_RCC_ClockConfig+0x128>)
 8003ce6:	f012 0f04 	tst.w	r2, #4
 8003cea:	d16c      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	0713      	lsls	r3, r2, #28
 8003cee:	d506      	bpl.n	8003cfe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cf0:	686b      	ldr	r3, [r5, #4]
 8003cf2:	6922      	ldr	r2, [r4, #16]
 8003cf4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003cf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003cfc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfe:	f7ff ff75 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003d02:	686b      	ldr	r3, [r5, #4]
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_RCC_ClockConfig+0x12c>)
 8003d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	40d8      	lsrs	r0, r3
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_ClockConfig+0x130>)
 8003d10:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d12:	4b34      	ldr	r3, [pc, #208]	; (8003de4 <HAL_RCC_ClockConfig+0x134>)
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	f7fd fcfd 	bl	8001714 <HAL_InitTick>
  return HAL_OK;
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	e7ce      	b.n	8003cbc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	f023 0307 	bic.w	r3, r3, #7
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	6813      	ldr	r3, [r2, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	428b      	cmp	r3, r1
 8003d30:	d1c3      	bne.n	8003cba <HAL_RCC_ClockConfig+0xa>
 8003d32:	e7cb      	b.n	8003ccc <HAL_RCC_ClockConfig+0x1c>
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d36:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d3a:	bf1e      	ittt	ne
 8003d3c:	685a      	ldrne	r2, [r3, #4]
 8003d3e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003d42:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d46:	bf42      	ittt	mi
 8003d48:	685a      	ldrmi	r2, [r3, #4]
 8003d4a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003d4e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	68a0      	ldr	r0, [r4, #8]
 8003d54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d58:	4302      	orrs	r2, r0
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	e7b9      	b.n	8003cd2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	4e1d      	ldr	r6, [pc, #116]	; (8003dd8 <HAL_RCC_ClockConfig+0x128>)
 8003d62:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d64:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	d11a      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6c:	d0a5      	beq.n	8003cba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003d7c:	f7fe faac 	bl	80022d8 <HAL_GetTick>
 8003d80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	6873      	ldr	r3, [r6, #4]
 8003d84:	6862      	ldr	r2, [r4, #4]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d8e:	d0a2      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe faa2 	bl	80022d8 <HAL_GetTick>
 8003d94:	1bc0      	subs	r0, r0, r7
 8003d96:	4540      	cmp	r0, r8
 8003d98:	d9f3      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003d9a:	2003      	movs	r0, #3
 8003d9c:	e78e      	b.n	8003cbc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	2a02      	cmp	r2, #2
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003da6:	e7e1      	b.n	8003d6c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	f013 0f02 	tst.w	r3, #2
 8003dac:	e7de      	b.n	8003d6c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	f023 0307 	bic.w	r3, r3, #7
 8003db4:	432b      	orrs	r3, r5
 8003db6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	42ab      	cmp	r3, r5
 8003dc0:	f47f af7b 	bne.w	8003cba <HAL_RCC_ClockConfig+0xa>
 8003dc4:	e78d      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc6:	686b      	ldr	r3, [r5, #4]
 8003dc8:	68e1      	ldr	r1, [r4, #12]
 8003dca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	606b      	str	r3, [r5, #4]
 8003dd2:	e78b      	b.n	8003cec <HAL_RCC_ClockConfig+0x3c>
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08017ffa 	.word	0x08017ffa
 8003de0:	20000008 	.word	0x20000008
 8003de4:	20000054 	.word	0x20000054

08003de8 <HAL_RCC_GetHCLKFreq>:
}
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x8>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000008 	.word	0x20000008

08003df4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e02:	6810      	ldr	r0, [r2, #0]
}
 8003e04:	40d8      	lsrs	r0, r3
 8003e06:	4770      	bx	lr
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0801800a 	.word	0x0801800a
 8003e10:	20000008 	.word	0x20000008

08003e14 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	4a03      	ldr	r2, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e22:	6810      	ldr	r0, [r2, #0]
}
 8003e24:	40d8      	lsrs	r0, r3
 8003e26:	4770      	bx	lr
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	0801800a 	.word	0x0801800a
 8003e30:	20000008 	.word	0x20000008

08003e34 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e34:	230f      	movs	r3, #15
 8003e36:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_GetClockConfig+0x34>)
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	f002 0203 	and.w	r2, r2, #3
 8003e40:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003e48:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003e50:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e5a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCC_GetClockConfig+0x38>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	600b      	str	r3, [r1, #0]
}
 8003e66:	4770      	bx	lr
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40022000 	.word	0x40022000

08003e70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e70:	6803      	ldr	r3, [r0, #0]
{
 8003e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e76:	f013 0f01 	tst.w	r3, #1
{
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	4c57      	ldr	r4, [pc, #348]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e7e:	d01f      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e80:	69e3      	ldr	r3, [r4, #28]
 8003e82:	00d9      	lsls	r1, r3, #3
 8003e84:	d447      	bmi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003e86:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	69e3      	ldr	r3, [r4, #28]
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	61e3      	str	r3, [r4, #28]
 8003e90:	69e3      	ldr	r3, [r4, #28]
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	4e51      	ldr	r6, [pc, #324]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	05da      	lsls	r2, r3, #23
 8003ea0:	d53b      	bpl.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea2:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ea8:	d14b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eaa:	6a23      	ldr	r3, [r4, #32]
 8003eac:	686a      	ldr	r2, [r5, #4]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb6:	b11f      	cbz	r7, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb8:	69e3      	ldr	r3, [r4, #28]
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec0:	682a      	ldr	r2, [r5, #0]
 8003ec2:	0791      	lsls	r1, r2, #30
 8003ec4:	d505      	bpl.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec6:	6863      	ldr	r3, [r4, #4]
 8003ec8:	68a9      	ldr	r1, [r5, #8]
 8003eca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003ed2:	0753      	lsls	r3, r2, #29
 8003ed4:	d505      	bpl.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ed8:	68e9      	ldr	r1, [r5, #12]
 8003eda:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003ee2:	0717      	lsls	r7, r2, #28
 8003ee4:	d505      	bpl.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003ee6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ee8:	692a      	ldr	r2, [r5, #16]
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003ef2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ef4:	039e      	lsls	r6, r3, #14
 8003ef6:	d442      	bmi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003efa:	0358      	lsls	r0, r3, #13
 8003efc:	d43f      	bmi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003efe:	6828      	ldr	r0, [r5, #0]
 8003f00:	f010 0010 	ands.w	r0, r0, #16
 8003f04:	d01a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	69ea      	ldr	r2, [r5, #28]
 8003f0a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f12:	2000      	movs	r0, #0
 8003f14:	e012      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus pwrclkchanged = RESET;
 8003f16:	2700      	movs	r7, #0
 8003f18:	e7bf      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	6833      	ldr	r3, [r6, #0]
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f22:	f7fe f9d9 	bl	80022d8 <HAL_GetTick>
 8003f26:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f28:	6833      	ldr	r3, [r6, #0]
 8003f2a:	05db      	lsls	r3, r3, #23
 8003f2c:	d4b9      	bmi.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f2e:	f7fe f9d3 	bl	80022d8 <HAL_GetTick>
 8003f32:	eba0 0008 	sub.w	r0, r0, r8
 8003f36:	2864      	cmp	r0, #100	; 0x64
 8003f38:	d9f6      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
}
 8003f3c:	b002      	add	sp, #8
 8003f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	686a      	ldr	r2, [r5, #4]
 8003f44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0ae      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f52:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f54:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f5a:	07de      	lsls	r6, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5c:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003f5e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f60:	d5a3      	bpl.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8003f62:	f7fe f9b9 	bl	80022d8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f6a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	6a23      	ldr	r3, [r4, #32]
 8003f6e:	0798      	lsls	r0, r3, #30
 8003f70:	d49b      	bmi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f9b1 	bl	80022d8 <HAL_GetTick>
 8003f76:	1b80      	subs	r0, r0, r6
 8003f78:	4540      	cmp	r0, r8
 8003f7a:	d9f7      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003f7c:	e7dd      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	d422      	bmi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x15a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	69a9      	ldr	r1, [r5, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	d504      	bpl.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x126>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003f8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f8e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003f92:	428a      	cmp	r2, r1
 8003f94:	d11f      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fa2:	696a      	ldr	r2, [r5, #20]
 8003fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa8:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8003faa:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003fac:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8003fb0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fb2:	f7fe f991 	bl	80022d8 <HAL_GetTick>
 8003fb6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	d49f      	bmi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fbe:	f7fe f98b 	bl	80022d8 <HAL_GetTick>
 8003fc2:	1b80      	subs	r0, r0, r6
 8003fc4:	2864      	cmp	r0, #100	; 0x64
 8003fc6:	d9f7      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003fc8:	e7b7      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003fca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fcc:	696a      	ldr	r2, [r5, #20]
 8003fce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d093      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	e7b0      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42420440 	.word	0x42420440
 8003fe8:	42420070 	.word	0x42420070

08003fec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	4604      	mov	r4, r0
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003ff2:	466a      	mov	r2, sp
 8003ff4:	4b56      	ldr	r3, [pc, #344]	; (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ff6:	f103 0608 	add.w	r6, r3, #8
 8003ffa:	4615      	mov	r5, r2
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	3308      	adds	r3, #8
 8004002:	c503      	stmia	r5!, {r0, r1}
 8004004:	42b3      	cmp	r3, r6
 8004006:	462a      	mov	r2, r5
 8004008:	d1f7      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	889b      	ldrh	r3, [r3, #4]
 800400e:	6028      	str	r0, [r5, #0]
 8004010:	80ab      	strh	r3, [r5, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004012:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004014:	ad04      	add	r5, sp, #16
 8004016:	f103 0610 	add.w	r6, r3, #16
 800401a:	462a      	mov	r2, r5
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	3308      	adds	r3, #8
 8004022:	c203      	stmia	r2!, {r0, r1}
 8004024:	42b3      	cmp	r3, r6
 8004026:	4615      	mov	r5, r2
 8004028:	d1f7      	bne.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800402a:	1e60      	subs	r0, r4, #1
 800402c:	280f      	cmp	r0, #15
 800402e:	f200 808c 	bhi.w	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004032:	e8df f000 	tbb	[pc, r0]
 8004036:	7e60      	.short	0x7e60
 8004038:	8a8a3e8a 	.word	0x8a8a3e8a
 800403c:	8a8a488a 	.word	0x8a8a488a
 8004040:	8a8a8a8a 	.word	0x8a8a8a8a
 8004044:	088a      	.short	0x088a
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004048:	6859      	ldr	r1, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004050:	d04f      	beq.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004052:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8004056:	a808      	add	r0, sp, #32
 8004058:	4402      	add	r2, r0
 800405a:	f812 4c20 	ldrb.w	r4, [r2, #-32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800405e:	03ca      	lsls	r2, r1, #15
 8004060:	d524      	bpl.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	f002 020f 	and.w	r2, r2, #15
 8004068:	4402      	add	r2, r0
 800406a:	f812 5c10 	ldrb.w	r5, [r2, #-16]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	483a      	ldr	r0, [pc, #232]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004072:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800407c:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8004080:	3101      	adds	r1, #1
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8004082:	fbb0 f0f1 	udiv	r0, r0, r1
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004086:	f3c2 2203 	ubfx	r2, r2, #8, #4
 800408a:	3202      	adds	r2, #2
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 800408c:	4350      	muls	r0, r2
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800408e:	fbb0 f0f5 	udiv	r0, r0, r5
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004092:	2c0d      	cmp	r4, #13
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004094:	fb04 f000 	mul.w	r0, r4, r0
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004098:	d100      	bne.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          {
            pllclk = pllclk / 2;
 800409a:	0840      	lsrs	r0, r0, #1
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	025b      	lsls	r3, r3, #9
 80040a0:	d427      	bmi.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
 80040a2:	2303      	movs	r3, #3
 80040a4:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040a6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80040aa:	e022      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040ac:	482c      	ldr	r0, [pc, #176]	; (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80040ae:	4360      	muls	r0, r4
 80040b0:	e7f4      	b.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80040b2:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80040b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040ba:	d109      	bne.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
    {
      break;
    }
  }
  return (frequency);
}
 80040bc:	b008      	add	sp, #32
 80040be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        frequency = HAL_RCC_GetSysClockFreq();
 80040c2:	f7ff bd93 	b.w	8003bec <HAL_RCC_GetSysClockFreq>
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80040c6:	4a24      	ldr	r2, [pc, #144]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80040c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040ca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80040ce:	e7f4      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80040d0:	6810      	ldr	r0, [r2, #0]
 80040d2:	f010 5080 	ands.w	r0, r0, #268435456	; 0x10000000
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80040d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80040da:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80040dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80040e0:	4a1e      	ldr	r2, [pc, #120]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80040e2:	3301      	adds	r3, #1
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80040e8:	f3c0 3003 	ubfx	r0, r0, #12, #4
 80040ec:	3002      	adds	r0, #2
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80040ee:	0040      	lsls	r0, r0, #1
 80040f0:	4358      	muls	r0, r3
}
 80040f2:	b008      	add	sp, #32
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040f6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80040fc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040fe:	4019      	ands	r1, r3
 8004100:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8004104:	d01e      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d107      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
        frequency = LSI_VALUE;
 8004110:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004114:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8004116:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 800411a:	bf08      	it	eq
 800411c:	2000      	moveq	r0, #0
 800411e:	e7e8      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004124:	d111      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004126:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8004128:	f24f 4024 	movw	r0, #62500	; 0xf424
 800412c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004130:	e7f3      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004132:	f7ff fe6f 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	e7b0      	b.n	80040a6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
        frequency = LSE_VALUE;
 8004144:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004148:	e7d3      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
  uint32_t temp_reg = 0U, frequency = 0U;
 800414a:	2000      	movs	r0, #0
 800414c:	e7d1      	b.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
 800414e:	bf00      	nop
 8004150:	08017cda 	.word	0x08017cda
 8004154:	08017ce8 	.word	0x08017ce8
 8004158:	40021000 	.word	0x40021000
 800415c:	007a1200 	.word	0x007a1200
 8004160:	003d0900 	.word	0x003d0900

08004164 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004164:	6803      	ldr	r3, [r0, #0]
{
 8004166:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004168:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800416a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800416c:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 800416e:	b295      	uxth	r5, r2
 8004170:	b28c      	uxth	r4, r1
 8004172:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004174:	bf17      	itett	ne
 8004176:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004178:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800417a:	b280      	uxthne	r0, r0
 800417c:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004180:	bf08      	it	eq
 8004182:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8004186:	bd30      	pop	{r4, r5, pc}

08004188 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004188:	6803      	ldr	r3, [r0, #0]
 800418a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 800418e:	b29b      	uxth	r3, r3
}
 8004190:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004194:	4770      	bx	lr

08004196 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8004196:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004198:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 800419a:	f000 000f 	and.w	r0, r0, #15
 800419e:	fb02 0003 	mla	r0, r2, r3, r0
}
 80041a2:	b2c0      	uxtb	r0, r0
 80041a4:	4770      	bx	lr

080041a6 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80041a6:	b530      	push	{r4, r5, lr}
 80041a8:	2517      	movs	r5, #23
 80041aa:	2309      	movs	r3, #9
 80041ac:	434d      	muls	r5, r1
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 80041ae:	2902      	cmp	r1, #2
  year = 2000U + nYear;
 80041b0:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 80041b4:	fbb5 f5f3 	udiv	r5, r5, r3
  if (nMonth < 3U)
 80041b8:	d817      	bhi.n	80041ea <RTC_WeekDayNum+0x44>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80041ba:	3204      	adds	r2, #4
 80041bc:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 80041c0:	1910      	adds	r0, r2, r4
 80041c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80041c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80041ca:	4428      	add	r0, r5
 80041cc:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 80041d0:	4410      	add	r0, r2
 80041d2:	2264      	movs	r2, #100	; 0x64
 80041d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d8:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80041da:	2307      	movs	r3, #7
 80041dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80041e4:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 80041e6:	b2c0      	uxtb	r0, r0
 80041e8:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80041ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80041ee:	1c90      	adds	r0, r2, #2
 80041f0:	2264      	movs	r2, #100	; 0x64
 80041f2:	4420      	add	r0, r4
 80041f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041f8:	4428      	add	r0, r5
 80041fa:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 80041fe:	fbb4 f4f2 	udiv	r4, r4, r2
 8004202:	4418      	add	r0, r3
 8004204:	1b00      	subs	r0, r0, r4
 8004206:	e7e8      	b.n	80041da <RTC_WeekDayNum+0x34>

08004208 <RTC_EnterInitMode>:
{
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800420c:	f7fe f864 	bl	80022d8 <HAL_GetTick>
 8004210:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	0692      	lsls	r2, r2, #26
 8004218:	d505      	bpl.n	8004226 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 800421a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	f042 0210 	orr.w	r2, r2, #16
 8004222:	605a      	str	r2, [r3, #4]
}
 8004224:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004226:	f7fe f857 	bl	80022d8 <HAL_GetTick>
 800422a:	1b40      	subs	r0, r0, r5
 800422c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004230:	d9ef      	bls.n	8004212 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8004232:	2003      	movs	r0, #3
 8004234:	e7f6      	b.n	8004224 <RTC_EnterInitMode+0x1c>

08004236 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004236:	6802      	ldr	r2, [r0, #0]
{
 8004238:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423a:	6853      	ldr	r3, [r2, #4]
{
 800423c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004244:	f7fe f848 	bl	80022d8 <HAL_GetTick>
 8004248:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	069b      	lsls	r3, r3, #26
 8004250:	d501      	bpl.n	8004256 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8004252:	2000      	movs	r0, #0
}
 8004254:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004256:	f7fe f83f 	bl	80022d8 <HAL_GetTick>
 800425a:	1b40      	subs	r0, r0, r5
 800425c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004260:	d9f3      	bls.n	800424a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8004262:	2003      	movs	r0, #3
 8004264:	e7f6      	b.n	8004254 <RTC_ExitInitMode+0x1e>

08004266 <RTC_WriteTimeCounter>:
{
 8004266:	b538      	push	{r3, r4, r5, lr}
 8004268:	4605      	mov	r5, r0
 800426a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800426c:	f7ff ffcc 	bl	8004208 <RTC_EnterInitMode>
 8004270:	b958      	cbnz	r0, 800428a <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004276:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004278:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800427a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800427c:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800427e:	f7ff ffda 	bl	8004236 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8004282:	3000      	adds	r0, #0
 8004284:	bf18      	it	ne
 8004286:	2001      	movne	r0, #1
}
 8004288:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e7fc      	b.n	8004288 <RTC_WriteTimeCounter+0x22>

0800428e <RTC_WriteAlarmCounter>:
{
 800428e:	b538      	push	{r3, r4, r5, lr}
 8004290:	4605      	mov	r5, r0
 8004292:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004294:	f7ff ffb8 	bl	8004208 <RTC_EnterInitMode>
 8004298:	b958      	cbnz	r0, 80042b2 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800429e:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80042a0:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80042a2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80042a4:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80042a6:	f7ff ffc6 	bl	8004236 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80042aa:	3000      	adds	r0, #0
 80042ac:	bf18      	it	ne
 80042ae:	2001      	movne	r0, #1
}
 80042b0:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7fc      	b.n	80042b0 <RTC_WriteAlarmCounter+0x22>

080042b6 <HAL_RTC_SetTime>:
{
 80042b6:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80042b8:	4604      	mov	r4, r0
 80042ba:	b1e0      	cbz	r0, 80042f6 <HAL_RTC_SetTime+0x40>
 80042bc:	b1d9      	cbz	r1, 80042f6 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80042be:	7c03      	ldrb	r3, [r0, #16]
 80042c0:	2602      	movs	r6, #2
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d046      	beq.n	8004354 <HAL_RTC_SetTime+0x9e>
 80042c6:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c8:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 80042ca:	7403      	strb	r3, [r0, #16]
 80042cc:	7808      	ldrb	r0, [r1, #0]
 80042ce:	784e      	ldrb	r6, [r1, #1]
 80042d0:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 80042d2:	b992      	cbnz	r2, 80042fa <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 80042d4:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 80042da:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80042dc:	fb03 5000 	mla	r0, r3, r0, r5
 80042e0:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80042e2:	4629      	mov	r1, r5
 80042e4:	4620      	mov	r0, r4
 80042e6:	f7ff ffbe 	bl	8004266 <RTC_WriteTimeCounter>
 80042ea:	4606      	mov	r6, r0
 80042ec:	b1b0      	cbz	r0, 800431c <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80042ee:	2304      	movs	r3, #4
 80042f0:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80042f2:	2300      	movs	r3, #0
 80042f4:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80042f6:	2601      	movs	r6, #1
 80042f8:	e02c      	b.n	8004354 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80042fa:	f7ff ff4c 	bl	8004196 <RTC_Bcd2ToByte>
 80042fe:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004300:	4630      	mov	r0, r6
 8004302:	f7ff ff48 	bl	8004196 <RTC_Bcd2ToByte>
 8004306:	233c      	movs	r3, #60	; 0x3c
 8004308:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800430a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800430e:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004312:	4608      	mov	r0, r1
 8004314:	f7ff ff3f 	bl	8004196 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004318:	4405      	add	r5, r0
 800431a:	e7e2      	b.n	80042e2 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800431c:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800431e:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004320:	6853      	ldr	r3, [r2, #4]
 8004322:	f023 0305 	bic.w	r3, r3, #5
 8004326:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004328:	f7ff ff2e 	bl	8004188 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d00d      	beq.n	800434c <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 8004330:	4285      	cmp	r5, r0
 8004332:	d90b      	bls.n	800434c <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004334:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8004338:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff ffa6 	bl	800428e <RTC_WriteAlarmCounter>
 8004342:	b118      	cbz	r0, 800434c <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004344:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8004346:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004348:	7463      	strb	r3, [r4, #17]
 800434a:	e7d4      	b.n	80042f6 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800434c:	2301      	movs	r3, #1
 800434e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8004350:	2300      	movs	r3, #0
 8004352:	7423      	strb	r3, [r4, #16]
}
 8004354:	4630      	mov	r0, r6
 8004356:	bd70      	pop	{r4, r5, r6, pc}

08004358 <HAL_RTC_SetDate>:
{
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 800435c:	4604      	mov	r4, r0
 800435e:	b358      	cbz	r0, 80043b8 <HAL_RTC_SetDate+0x60>
 8004360:	b351      	cbz	r1, 80043b8 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 8004362:	7c03      	ldrb	r3, [r0, #16]
 8004364:	2002      	movs	r0, #2
 8004366:	2b01      	cmp	r3, #1
 8004368:	d04b      	beq.n	8004402 <HAL_RTC_SetDate+0xaa>
 800436a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800436c:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 800436e:	7423      	strb	r3, [r4, #16]
 8004370:	78c8      	ldrb	r0, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8004372:	bb1a      	cbnz	r2, 80043bc <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004374:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004376:	784b      	ldrb	r3, [r1, #1]
 8004378:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800437a:	788b      	ldrb	r3, [r1, #2]
 800437c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800437e:	7ba2      	ldrb	r2, [r4, #14]
 8004380:	7b61      	ldrb	r1, [r4, #13]
 8004382:	7be0      	ldrb	r0, [r4, #15]
 8004384:	f7ff ff0f 	bl	80041a6 <RTC_WeekDayNum>
 8004388:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800438a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 800438c:	4620      	mov	r0, r4
 800438e:	f7ff fee9 	bl	8004164 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <HAL_RTC_SetDate+0xac>)
 8004394:	4298      	cmp	r0, r3
 8004396:	d930      	bls.n	80043fa <HAL_RTC_SetDate+0xa2>
 8004398:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 800439c:	fbb0 f5f3 	udiv	r5, r0, r3
 80043a0:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7ff ff5d 	bl	8004266 <RTC_WriteTimeCounter>
 80043ac:	4606      	mov	r6, r0
 80043ae:	b188      	cbz	r0, 80043d4 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043b0:	2304      	movs	r3, #4
 80043b2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80043b4:	2300      	movs	r3, #0
 80043b6:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80043b8:	2001      	movs	r0, #1
 80043ba:	e022      	b.n	8004402 <HAL_RTC_SetDate+0xaa>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80043bc:	f7ff feeb 	bl	8004196 <RTC_Bcd2ToByte>
 80043c0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80043c2:	7848      	ldrb	r0, [r1, #1]
 80043c4:	f7ff fee7 	bl	8004196 <RTC_Bcd2ToByte>
 80043c8:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80043ca:	7888      	ldrb	r0, [r1, #2]
 80043cc:	f7ff fee3 	bl	8004196 <RTC_Bcd2ToByte>
 80043d0:	73a0      	strb	r0, [r4, #14]
 80043d2:	e7d4      	b.n	800437e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff fed7 	bl	8004188 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d00d      	beq.n	80043fa <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 80043de:	4285      	cmp	r5, r0
 80043e0:	d90b      	bls.n	80043fa <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80043e2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80043e6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff ff4f 	bl	800428e <RTC_WriteAlarmCounter>
 80043f0:	b118      	cbz	r0, 80043fa <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043f2:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 80043f4:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80043f6:	7463      	strb	r3, [r4, #17]
 80043f8:	e7de      	b.n	80043b8 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 80043fa:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80043fc:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 80043fe:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8004400:	7420      	strb	r0, [r4, #16]
}
 8004402:	bd70      	pop	{r4, r5, r6, pc}
 8004404:	00015f8f 	.word	0x00015f8f

08004408 <HAL_RTC_WaitForSynchro>:
{
 8004408:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800440a:	4604      	mov	r4, r0
 800440c:	b1a8      	cbz	r0, 800443a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800440e:	6802      	ldr	r2, [r0, #0]
 8004410:	6853      	ldr	r3, [r2, #4]
 8004412:	f023 0308 	bic.w	r3, r3, #8
 8004416:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8004418:	f7fd ff5e 	bl	80022d8 <HAL_GetTick>
 800441c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	d501      	bpl.n	800442a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8004426:	2000      	movs	r0, #0
}
 8004428:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800442a:	f7fd ff55 	bl	80022d8 <HAL_GetTick>
 800442e:	1b40      	subs	r0, r0, r5
 8004430:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004434:	d9f3      	bls.n	800441e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8004436:	2003      	movs	r0, #3
 8004438:	e7f6      	b.n	8004428 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800443a:	2001      	movs	r0, #1
 800443c:	e7f4      	b.n	8004428 <HAL_RTC_WaitForSynchro+0x20>
	...

08004440 <HAL_RTC_Init>:
{
 8004440:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004442:	4604      	mov	r4, r0
 8004444:	b170      	cbz	r0, 8004464 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004446:	7c43      	ldrb	r3, [r0, #17]
 8004448:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800444c:	b913      	cbnz	r3, 8004454 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800444e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8004450:	f7fd f852 	bl	80014f8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004454:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004456:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004458:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800445a:	f7ff ffd5 	bl	8004408 <HAL_RTC_WaitForSynchro>
 800445e:	b118      	cbz	r0, 8004468 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004460:	2304      	movs	r3, #4
 8004462:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8004464:	2001      	movs	r0, #1
 8004466:	e037      	b.n	80044d8 <HAL_RTC_Init+0x98>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004468:	4620      	mov	r0, r4
 800446a:	f7ff fecd 	bl	8004208 <RTC_EnterInitMode>
 800446e:	2800      	cmp	r0, #0
 8004470:	d1f6      	bne.n	8004460 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004472:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004474:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004476:	6853      	ldr	r3, [r2, #4]
 8004478:	f023 0307 	bic.w	r3, r3, #7
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004480:	b118      	cbz	r0, 800448a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004482:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004484:	f021 0101 	bic.w	r1, r1, #1
 8004488:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800448a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800448c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8004490:	4303      	orrs	r3, r0
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004494:	6860      	ldr	r0, [r4, #4]
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d105      	bne.n	80044a6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800449a:	2001      	movs	r0, #1
 800449c:	f7ff fda6 	bl	8003fec <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d0dd      	beq.n	8004460 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80044a4:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	6893      	ldr	r3, [r2, #8]
 80044aa:	f023 030f 	bic.w	r3, r3, #15
 80044ae:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80044b2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80044b4:	68d3      	ldr	r3, [r2, #12]
 80044b6:	b280      	uxth	r0, r0
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	4318      	orrs	r0, r3
 80044be:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff feb8 	bl	8004236 <RTC_ExitInitMode>
 80044c6:	2301      	movs	r3, #1
 80044c8:	b110      	cbz	r0, 80044d0 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044ca:	2204      	movs	r2, #4
 80044cc:	7462      	strb	r2, [r4, #17]
 80044ce:	e7c9      	b.n	8004464 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 80044d0:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80044d2:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80044d4:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80044d6:	7463      	strb	r3, [r4, #17]
}
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	bf00      	nop
 80044dc:	40006c00 	.word	0x40006c00

080044e0 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80044e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80044e4:	461c      	mov	r4, r3
 80044e6:	4616      	mov	r6, r2
 80044e8:	460f      	mov	r7, r1
 80044ea:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044ec:	f7fd fef4 	bl	80022d8 <HAL_GetTick>
 80044f0:	4434      	add	r4, r6
 80044f2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80044f4:	f7fd fef0 	bl	80022d8 <HAL_GetTick>
 80044f8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044fa:	4b23      	ldr	r3, [pc, #140]	; (8004588 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004502:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004504:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8004506:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004508:	6893      	ldr	r3, [r2, #8]
 800450a:	ea37 0303 	bics.w	r3, r7, r3
 800450e:	d001      	beq.n	8004514 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x34>
    }
  }

  return HAL_OK;
 8004510:	2000      	movs	r0, #0
 8004512:	e02e      	b.n	8004572 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8004514:	1c73      	adds	r3, r6, #1
 8004516:	d0f7      	beq.n	8004508 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004518:	f7fd fede 	bl	80022d8 <HAL_GetTick>
 800451c:	eba0 0008 	sub.w	r0, r0, r8
 8004520:	42a0      	cmp	r0, r4
 8004522:	d329      	bcc.n	8004578 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004524:	682b      	ldr	r3, [r5, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800452c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800452e:	686a      	ldr	r2, [r5, #4]
 8004530:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004534:	d10a      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
 8004536:	68aa      	ldr	r2, [r5, #8]
 8004538:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800453c:	d002      	beq.n	8004544 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800453e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004542:	d103      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800454e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004552:	d107      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x84>
          SPI_RESET_CRC(hspi);
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004562:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004564:	2301      	movs	r3, #1
 8004566:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800456a:	2300      	movs	r3, #0
 800456c:	2003      	movs	r0, #3
 800456e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8004572:	b002      	add	sp, #8
 8004574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8004578:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800457a:	2b00      	cmp	r3, #0
      count--;
 800457c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800457e:	bf08      	it	eq
 8004580:	2400      	moveq	r4, #0
      count--;
 8004582:	3b01      	subs	r3, #1
 8004584:	e7be      	b.n	8004504 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x24>
 8004586:	bf00      	nop
 8004588:	20000008 	.word	0x20000008

0800458c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004590:	6842      	ldr	r2, [r0, #4]
{
 8004592:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004594:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004598:	d116      	bne.n	80045c8 <SPI_EndRxTransaction+0x3c>
 800459a:	6880      	ldr	r0, [r0, #8]
 800459c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045a0:	d002      	beq.n	80045a8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80045a6:	d10f      	bne.n	80045c8 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045a8:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045aa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80045ae:	6815      	ldr	r5, [r2, #0]
 80045b0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80045b4:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80045b6:	d107      	bne.n	80045c8 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	460a      	mov	r2, r1
 80045ba:	2101      	movs	r1, #1
 80045bc:	4620      	mov	r0, r4
 80045be:	f7ff ff8f 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 80045c2:	b920      	cbnz	r0, 80045ce <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80045c4:	2000      	movs	r0, #0
}
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	460a      	mov	r2, r1
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	e7f6      	b.n	80045bc <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80045d0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d2:	f043 0320 	orr.w	r3, r3, #32
 80045d6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80045d8:	e7f5      	b.n	80045c6 <SPI_EndRxTransaction+0x3a>

080045da <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045da:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	4613      	mov	r3, r2
 80045de:	460a      	mov	r2, r1
 80045e0:	2180      	movs	r1, #128	; 0x80
{
 80045e2:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	f7ff ff7c 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 80045e8:	b120      	cbz	r0, 80045f4 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80045ea:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045ee:	f043 0320 	orr.w	r3, r3, #32
 80045f2:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80045f4:	bd10      	pop	{r4, pc}

080045f6 <HAL_SPI_Init>:
{
 80045f6:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80045f8:	4604      	mov	r4, r0
 80045fa:	2800      	cmp	r0, #0
 80045fc:	d051      	beq.n	80046a2 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d14a      	bne.n	800469a <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004604:	6842      	ldr	r2, [r0, #4]
 8004606:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800460a:	d000      	beq.n	800460e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800460c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460e:	2300      	movs	r3, #0
 8004610:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004612:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800461a:	b923      	cbnz	r3, 8004626 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800461c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004620:	4620      	mov	r0, r4
 8004622:	f7fc ff87 	bl	8001534 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004626:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004628:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800462a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800462e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004630:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004636:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800463e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004642:	4303      	orrs	r3, r0
 8004644:	68e0      	ldr	r0, [r4, #12]
 8004646:	69a1      	ldr	r1, [r4, #24]
 8004648:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800464c:	4303      	orrs	r3, r0
 800464e:	6920      	ldr	r0, [r4, #16]
 8004650:	f000 0002 	and.w	r0, r0, #2
 8004654:	4303      	orrs	r3, r0
 8004656:	6960      	ldr	r0, [r4, #20]
 8004658:	f000 0001 	and.w	r0, r0, #1
 800465c:	4303      	orrs	r3, r0
 800465e:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8004662:	4303      	orrs	r3, r0
 8004664:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004666:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004668:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800466c:	4303      	orrs	r3, r0
 800466e:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004670:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004674:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004678:	4303      	orrs	r3, r0
 800467a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800467c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004680:	4303      	orrs	r3, r0
 8004682:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004684:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004686:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004688:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800468a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8004690:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004692:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004694:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004698:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800469a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800469c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046a0:	e7b5      	b.n	800460e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	e7f8      	b.n	8004698 <HAL_SPI_Init+0xa2>

080046a6 <HAL_SPI_DeInit>:
{
 80046a6:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80046a8:	4604      	mov	r4, r0
 80046aa:	b180      	cbz	r0, 80046ce <HAL_SPI_DeInit+0x28>
  hspi->State = HAL_SPI_STATE_BUSY;
 80046ac:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80046ae:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80046b0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80046b4:	6813      	ldr	r3, [r2, #0]
 80046b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ba:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80046bc:	f7fc ffb6 	bl	800162c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046c0:	2000      	movs	r0, #0
 80046c2:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80046c4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80046c8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 80046cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
 80046d0:	e7fc      	b.n	80046cc <HAL_SPI_DeInit+0x26>

080046d2 <HAL_SPI_Transmit>:
{
 80046d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046d6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80046d8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80046dc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80046de:	2b01      	cmp	r3, #1
{
 80046e0:	460d      	mov	r5, r1
 80046e2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80046e4:	f000 809e 	beq.w	8004824 <HAL_SPI_Transmit+0x152>
 80046e8:	2301      	movs	r3, #1
 80046ea:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80046ee:	f7fd fdf3 	bl	80022d8 <HAL_GetTick>
 80046f2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80046f4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80046f8:	b2c0      	uxtb	r0, r0
 80046fa:	2801      	cmp	r0, #1
 80046fc:	f040 8090 	bne.w	8004820 <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 8004700:	2d00      	cmp	r5, #0
 8004702:	d060      	beq.n	80047c6 <HAL_SPI_Transmit+0xf4>
 8004704:	f1b8 0f00 	cmp.w	r8, #0
 8004708:	d05d      	beq.n	80047c6 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800470a:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470c:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800470e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004712:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004714:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 800471a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800471e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004720:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004722:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004724:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004728:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800472a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 800472e:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004730:	d107      	bne.n	8004742 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8004732:	6803      	ldr	r3, [r0, #0]
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800473a:	6803      	ldr	r3, [r0, #0]
 800473c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004740:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004744:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004748:	bf5e      	ittt	pl
 800474a:	6803      	ldrpl	r3, [r0, #0]
 800474c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004750:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004752:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	d13e      	bne.n	80047d8 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475a:	b113      	cbz	r3, 8004762 <HAL_SPI_Transmit+0x90>
 800475c:	f1b8 0f01 	cmp.w	r8, #1
 8004760:	d107      	bne.n	8004772 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004762:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004766:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004768:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800476a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800476c:	3b01      	subs	r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004772:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	b9a3      	cbnz	r3, 80047a2 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004778:	463a      	mov	r2, r7
 800477a:	4631      	mov	r1, r6
 800477c:	4620      	mov	r0, r4
 800477e:	f7ff ff2c 	bl	80045da <SPI_EndRxTxTransaction>
 8004782:	2800      	cmp	r0, #0
 8004784:	d149      	bne.n	800481a <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	b933      	cbnz	r3, 8004798 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	9201      	str	r2, [sp, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004798:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800479a:	3000      	adds	r0, #0
 800479c:	bf18      	it	ne
 800479e:	2001      	movne	r0, #1
error:
 80047a0:	e011      	b.n	80047c6 <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	6893      	ldr	r3, [r2, #8]
 80047a6:	0798      	lsls	r0, r3, #30
 80047a8:	d505      	bpl.n	80047b6 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047ac:	f833 1b02 	ldrh.w	r1, [r3], #2
 80047b0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b2:	6323      	str	r3, [r4, #48]	; 0x30
 80047b4:	e7d9      	b.n	800476a <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047b6:	f7fd fd8f 	bl	80022d8 <HAL_GetTick>
 80047ba:	1bc0      	subs	r0, r0, r7
 80047bc:	42b0      	cmp	r0, r6
 80047be:	d3d8      	bcc.n	8004772 <HAL_SPI_Transmit+0xa0>
 80047c0:	1c71      	adds	r1, r6, #1
 80047c2:	d0d6      	beq.n	8004772 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80047c4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047cc:	2300      	movs	r3, #0
 80047ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80047d2:	b002      	add	sp, #8
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d8:	b113      	cbz	r3, 80047e0 <HAL_SPI_Transmit+0x10e>
 80047da:	f1b8 0f01 	cmp.w	r8, #1
 80047de:	d108      	bne.n	80047f2 <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047e0:	782b      	ldrb	r3, [r5, #0]
 80047e2:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80047e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047e6:	3301      	adds	r3, #1
 80047e8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80047ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80047f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0be      	beq.n	8004778 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	0792      	lsls	r2, r2, #30
 8004800:	d503      	bpl.n	800480a <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004802:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004804:	7812      	ldrb	r2, [r2, #0]
 8004806:	731a      	strb	r2, [r3, #12]
 8004808:	e7ec      	b.n	80047e4 <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800480a:	f7fd fd65 	bl	80022d8 <HAL_GetTick>
 800480e:	1bc0      	subs	r0, r0, r7
 8004810:	42b0      	cmp	r0, r6
 8004812:	d3ee      	bcc.n	80047f2 <HAL_SPI_Transmit+0x120>
 8004814:	1c73      	adds	r3, r6, #1
 8004816:	d0ec      	beq.n	80047f2 <HAL_SPI_Transmit+0x120>
 8004818:	e7d4      	b.n	80047c4 <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800481a:	2320      	movs	r3, #32
 800481c:	6563      	str	r3, [r4, #84]	; 0x54
 800481e:	e7b2      	b.n	8004786 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8004820:	2002      	movs	r0, #2
 8004822:	e7d0      	b.n	80047c6 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8004824:	2002      	movs	r0, #2
 8004826:	e7d4      	b.n	80047d2 <HAL_SPI_Transmit+0x100>

08004828 <HAL_SPI_TransmitReceive>:
{
 8004828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800482c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800482e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004832:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004834:	2b01      	cmp	r3, #1
{
 8004836:	460d      	mov	r5, r1
 8004838:	4691      	mov	r9, r2
 800483a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800483c:	f000 80e2 	beq.w	8004a04 <HAL_SPI_TransmitReceive+0x1dc>
 8004840:	2301      	movs	r3, #1
 8004842:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004846:	f7fd fd47 	bl	80022d8 <HAL_GetTick>
  tmp_state           = hspi->State;
 800484a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800484e:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004850:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004852:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8004854:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004856:	d00a      	beq.n	800486e <HAL_SPI_TransmitReceive+0x46>
 8004858:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800485c:	f040 80d0 	bne.w	8004a00 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004860:	68a0      	ldr	r0, [r4, #8]
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 80cc 	bne.w	8004a00 <HAL_SPI_TransmitReceive+0x1d8>
 8004868:	2b04      	cmp	r3, #4
 800486a:	f040 80c9 	bne.w	8004a00 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800486e:	2d00      	cmp	r5, #0
 8004870:	f000 80c4 	beq.w	80049fc <HAL_SPI_TransmitReceive+0x1d4>
 8004874:	f1b9 0f00 	cmp.w	r9, #0
 8004878:	f000 80c0 	beq.w	80049fc <HAL_SPI_TransmitReceive+0x1d4>
 800487c:	2e00      	cmp	r6, #0
 800487e:	f000 80bd 	beq.w	80049fc <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004882:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004886:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800488a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800488c:	bf1c      	itt	ne
 800488e:	2305      	movne	r3, #5
 8004890:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004894:	2300      	movs	r3, #0
 8004896:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004898:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800489e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80048a0:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80048a4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a6:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80048a8:	bf58      	it	pl
 80048aa:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048ac:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80048ae:	bf58      	it	pl
 80048b0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80048b4:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80048b6:	bf58      	it	pl
 80048b8:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ba:	68e2      	ldr	r2, [r4, #12]
 80048bc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80048c0:	d158      	bne.n	8004974 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	b109      	cbz	r1, 80048c8 <HAL_SPI_TransmitReceive+0xa0>
 80048c4:	2e01      	cmp	r6, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80048cc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80048ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80048d8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b9ab      	cbnz	r3, 800490c <HAL_SPI_TransmitReceive+0xe4>
 80048e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	b993      	cbnz	r3, 800490c <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e6:	4642      	mov	r2, r8
 80048e8:	4639      	mov	r1, r7
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff fe75 	bl	80045da <SPI_EndRxTxTransaction>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f040 8081 	bne.w	80049f8 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f6:	68a3      	ldr	r3, [r4, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d132      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	9001      	str	r0, [sp, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	9201      	str	r2, [sp, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	9b01      	ldr	r3, [sp, #4]
 800490a:	e02a      	b.n	8004962 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	6893      	ldr	r3, [r2, #8]
 8004910:	0799      	lsls	r1, r3, #30
 8004912:	d50d      	bpl.n	8004930 <HAL_SPI_TransmitReceive+0x108>
 8004914:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004916:	b29b      	uxth	r3, r3
 8004918:	b153      	cbz	r3, 8004930 <HAL_SPI_TransmitReceive+0x108>
 800491a:	b14d      	cbz	r5, 8004930 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800491c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800491e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004920:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004924:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004926:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004928:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800492a:	3b01      	subs	r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004930:	6893      	ldr	r3, [r2, #8]
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	d50c      	bpl.n	8004950 <HAL_SPI_TransmitReceive+0x128>
 8004936:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	b14b      	cbz	r3, 8004950 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800493c:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800493e:	68d2      	ldr	r2, [r2, #12]
 8004940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004942:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004946:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004948:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800494a:	3b01      	subs	r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004950:	f7fd fcc2 	bl	80022d8 <HAL_GetTick>
 8004954:	eba0 0008 	sub.w	r0, r0, r8
 8004958:	4287      	cmp	r7, r0
 800495a:	d8be      	bhi.n	80048da <HAL_SPI_TransmitReceive+0xb2>
 800495c:	1c7e      	adds	r6, r7, #1
 800495e:	d0bc      	beq.n	80048da <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8004960:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004962:	2301      	movs	r3, #1
 8004964:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004968:	2300      	movs	r3, #0
 800496a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800496e:	b003      	add	sp, #12
 8004970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004974:	b109      	cbz	r1, 800497a <HAL_SPI_TransmitReceive+0x152>
 8004976:	2e01      	cmp	r6, #1
 8004978:	d108      	bne.n	800498c <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800497a:	782a      	ldrb	r2, [r5, #0]
 800497c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800497e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004980:	3301      	adds	r3, #1
 8004982:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004984:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800498c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004990:	b29b      	uxth	r3, r3
 8004992:	b91b      	cbnz	r3, 800499c <HAL_SPI_TransmitReceive+0x174>
 8004994:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0a4      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	6893      	ldr	r3, [r2, #8]
 80049a0:	0798      	lsls	r0, r3, #30
 80049a2:	d50e      	bpl.n	80049c2 <HAL_SPI_TransmitReceive+0x19a>
 80049a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b15b      	cbz	r3, 80049c2 <HAL_SPI_TransmitReceive+0x19a>
 80049aa:	b155      	cbz	r5, 80049c2 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80049ac:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80049b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049b6:	3301      	adds	r3, #1
 80049b8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80049ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	6893      	ldr	r3, [r2, #8]
 80049c6:	07d9      	lsls	r1, r3, #31
 80049c8:	d50d      	bpl.n	80049e6 <HAL_SPI_TransmitReceive+0x1be>
 80049ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b153      	cbz	r3, 80049e6 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80049d0:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049d2:	68d2      	ldr	r2, [r2, #12]
 80049d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049da:	3301      	adds	r3, #1
 80049dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80049de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049e6:	f7fd fc77 	bl	80022d8 <HAL_GetTick>
 80049ea:	eba0 0008 	sub.w	r0, r0, r8
 80049ee:	4287      	cmp	r7, r0
 80049f0:	d8cd      	bhi.n	800498e <HAL_SPI_TransmitReceive+0x166>
 80049f2:	1c7b      	adds	r3, r7, #1
 80049f4:	d0cb      	beq.n	800498e <HAL_SPI_TransmitReceive+0x166>
 80049f6:	e7b3      	b.n	8004960 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f8:	2320      	movs	r3, #32
 80049fa:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80049fc:	2001      	movs	r0, #1
 80049fe:	e7b0      	b.n	8004962 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8004a00:	2002      	movs	r0, #2
 8004a02:	e7ae      	b.n	8004962 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8004a04:	2002      	movs	r0, #2
 8004a06:	e7b2      	b.n	800496e <HAL_SPI_TransmitReceive+0x146>

08004a08 <HAL_SPI_Receive>:
{
 8004a08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004a0c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a0e:	6843      	ldr	r3, [r0, #4]
{
 8004a10:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004a16:	4688      	mov	r8, r1
 8004a18:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a1a:	d10c      	bne.n	8004a36 <HAL_SPI_Receive+0x2e>
 8004a1c:	6883      	ldr	r3, [r0, #8]
 8004a1e:	b953      	cbnz	r3, 8004a36 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a20:	2304      	movs	r3, #4
 8004a22:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a26:	4613      	mov	r3, r2
 8004a28:	9500      	str	r5, [sp, #0]
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	f7ff fefc 	bl	8004828 <HAL_SPI_TransmitReceive>
}
 8004a30:	b002      	add	sp, #8
 8004a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8004a36:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d07d      	beq.n	8004b3a <HAL_SPI_Receive+0x132>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a44:	f7fd fc48 	bl	80022d8 <HAL_GetTick>
 8004a48:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a4a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004a4e:	b2c0      	uxtb	r0, r0
 8004a50:	2801      	cmp	r0, #1
 8004a52:	d170      	bne.n	8004b36 <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 8004a54:	f1b8 0f00 	cmp.w	r8, #0
 8004a58:	d05b      	beq.n	8004b12 <HAL_SPI_Receive+0x10a>
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d059      	beq.n	8004b12 <HAL_SPI_Receive+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a68:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8004a6a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8004a6c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a6e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 8004a70:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a74:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a76:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->RxXferSize  = Size;
 8004a7e:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8004a80:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a82:	d107      	bne.n	8004a94 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8004a84:	680b      	ldr	r3, [r1, #0]
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 8004a8c:	680b      	ldr	r3, [r1, #0]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a92:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a94:	680b      	ldr	r3, [r1, #0]
 8004a96:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004a98:	bf5e      	ittt	pl
 8004a9a:	680b      	ldrpl	r3, [r1, #0]
 8004a9c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004aa0:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	b1f3      	cbz	r3, 8004ae4 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8004aa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b1fb      	cbz	r3, 8004aec <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	07d2      	lsls	r2, r2, #31
 8004ab2:	d535      	bpl.n	8004b20 <HAL_SPI_Receive+0x118>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ab8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004abc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004abe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ac6:	e7ee      	b.n	8004aa6 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	07d0      	lsls	r0, r2, #31
 8004ace:	d518      	bpl.n	8004b02 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ad0:	7b1b      	ldrb	r3, [r3, #12]
 8004ad2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ad4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad8:	3301      	adds	r3, #1
 8004ada:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004adc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1ed      	bne.n	8004ac8 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aec:	4632      	mov	r2, r6
 8004aee:	4629      	mov	r1, r5
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff fd4b 	bl	800458c <SPI_EndRxTransaction>
 8004af6:	b9d8      	cbnz	r0, 8004b30 <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004af8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004afa:	3000      	adds	r0, #0
 8004afc:	bf18      	it	ne
 8004afe:	2001      	movne	r0, #1
error :
 8004b00:	e007      	b.n	8004b12 <HAL_SPI_Receive+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b02:	f7fd fbe9 	bl	80022d8 <HAL_GetTick>
 8004b06:	1b80      	subs	r0, r0, r6
 8004b08:	42a8      	cmp	r0, r5
 8004b0a:	d3eb      	bcc.n	8004ae4 <HAL_SPI_Receive+0xdc>
 8004b0c:	1c69      	adds	r1, r5, #1
 8004b0e:	d0e9      	beq.n	8004ae4 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8004b10:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004b1e:	e787      	b.n	8004a30 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fd fbda 	bl	80022d8 <HAL_GetTick>
 8004b24:	1b80      	subs	r0, r0, r6
 8004b26:	42a8      	cmp	r0, r5
 8004b28:	d3bd      	bcc.n	8004aa6 <HAL_SPI_Receive+0x9e>
 8004b2a:	1c6b      	adds	r3, r5, #1
 8004b2c:	d0bb      	beq.n	8004aa6 <HAL_SPI_Receive+0x9e>
 8004b2e:	e7ef      	b.n	8004b10 <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	2320      	movs	r3, #32
 8004b32:	6563      	str	r3, [r4, #84]	; 0x54
 8004b34:	e7e0      	b.n	8004af8 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8004b36:	2002      	movs	r0, #2
 8004b38:	e7eb      	b.n	8004b12 <HAL_SPI_Receive+0x10a>
  __HAL_LOCK(hspi);
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	e778      	b.n	8004a30 <HAL_SPI_Receive+0x28>
	...

08004b40 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d120      	bne.n	8004b8a <HAL_TIM_Base_Start+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4a:	4a11      	ldr	r2, [pc, #68]	; (8004b90 <HAL_TIM_Base_Start+0x50>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	6803      	ldr	r3, [r0, #0]
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_TIM_Base_Start+0x34>
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d00b      	beq.n	8004b74 <HAL_TIM_Base_Start+0x34>
 8004b5c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d007      	beq.n	8004b74 <HAL_TIM_Base_Start+0x34>
 8004b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d003      	beq.n	8004b74 <HAL_TIM_Base_Start+0x34>
 8004b6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_Base_Start+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7a:	2a06      	cmp	r2, #6
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_Base_Start+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b86:	2000      	movs	r0, #0
}
 8004b88:	4770      	bx	lr
    return HAL_ERROR;
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00

08004b94 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d124      	bne.n	8004be6 <HAL_TIM_Base_Start_IT+0x52>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba2:	6803      	ldr	r3, [r0, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	4a0f      	ldr	r2, [pc, #60]	; (8004bec <HAL_TIM_Base_Start_IT+0x58>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x3c>
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d00b      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x3c>
 8004bb8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x3c>
 8004bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x3c>
 8004bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_Base_Start_IT+0x46>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	2a06      	cmp	r2, #6
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_Base_Start_IT+0x4e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be2:	2000      	movs	r0, #0
}
 8004be4:	4770      	bx	lr
    return HAL_ERROR;
 8004be6:	2001      	movs	r0, #1
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40012c00 	.word	0x40012c00

08004bf0 <HAL_TIM_OC_DelayElapsedCallback>:
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_IC_CaptureCallback>:
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_TriggerCallback>:
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf8:	6803      	ldr	r3, [r0, #0]
{
 8004bfa:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bfc:	691a      	ldr	r2, [r3, #16]
{
 8004bfe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c00:	0791      	lsls	r1, r2, #30
 8004c02:	d50e      	bpl.n	8004c22 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	0792      	lsls	r2, r2, #30
 8004c08:	d50b      	bpl.n	8004c22 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c0a:	f06f 0202 	mvn.w	r2, #2
 8004c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c10:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c12:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c14:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c16:	079b      	lsls	r3, r3, #30
 8004c18:	d077      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	f7ff ffea 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	0750      	lsls	r0, r2, #29
 8004c28:	d510      	bpl.n	8004c4c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	0751      	lsls	r1, r2, #29
 8004c2e:	d50d      	bpl.n	8004c4c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c30:	f06f 0204 	mvn.w	r2, #4
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c36:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c38:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c3c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c42:	d068      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c44:	f7ff ffd5 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	0712      	lsls	r2, r2, #28
 8004c52:	d50f      	bpl.n	8004c74 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	0710      	lsls	r0, r2, #28
 8004c58:	d50c      	bpl.n	8004c74 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5a:	f06f 0208 	mvn.w	r2, #8
 8004c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c60:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c66:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c6a:	d05a      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6c:	f7ff ffc1 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c70:	2300      	movs	r3, #0
 8004c72:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	06d2      	lsls	r2, r2, #27
 8004c7a:	d510      	bpl.n	8004c9e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	06d0      	lsls	r0, r2, #27
 8004c80:	d50d      	bpl.n	8004c9e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c82:	f06f 0210 	mvn.w	r2, #16
 8004c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c88:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	d04b      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	f7ff ffac 	bl	8004bf2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	07d1      	lsls	r1, r2, #31
 8004ca4:	d508      	bpl.n	8004cb8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	07d2      	lsls	r2, r2, #31
 8004caa:	d505      	bpl.n	8004cb8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cac:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb4:	f7fc fa70 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	0610      	lsls	r0, r2, #24
 8004cbe:	d508      	bpl.n	8004cd2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	0611      	lsls	r1, r2, #24
 8004cc4:	d505      	bpl.n	8004cd2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ccc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004cce:	f000 f976 	bl	8004fbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	0652      	lsls	r2, r2, #25
 8004cd8:	d508      	bpl.n	8004cec <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	0650      	lsls	r0, r2, #25
 8004cde:	d505      	bpl.n	8004cec <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004ce8:	f7ff ff85 	bl	8004bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	0691      	lsls	r1, r2, #26
 8004cf2:	d522      	bpl.n	8004d3a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	0692      	lsls	r2, r2, #26
 8004cf8:	d51f      	bpl.n	8004d3a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cfa:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfe:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004d06:	f000 b959 	b.w	8004fbc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	f7ff ff71 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f7ff ff70 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d14:	e783      	b.n	8004c1e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	f7ff ff6b 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7ff ff6a 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d20:	e792      	b.n	8004c48 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	f7ff ff65 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7ff ff64 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d2c:	e7a0      	b.n	8004c70 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	f7ff ff5f 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff ff5e 	bl	8004bf4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d38:	e7af      	b.n	8004c9a <HAL_TIM_IRQHandler+0xa2>
}
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8004d3e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d40:	4290      	cmp	r0, r2
 8004d42:	d00e      	beq.n	8004d62 <TIM_Base_SetConfig+0x26>
 8004d44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0x26>
 8004d4a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004d4e:	4290      	cmp	r0, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0x26>
 8004d52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d56:	4290      	cmp	r0, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0x26>
 8004d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d5e:	4290      	cmp	r0, r2
 8004d60:	d119      	bne.n	8004d96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004d62:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d68:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d6a:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <TIM_Base_SetConfig+0x7c>)
 8004d6c:	4290      	cmp	r0, r2
 8004d6e:	d00e      	beq.n	8004d8e <TIM_Base_SetConfig+0x52>
 8004d70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004d74:	d00b      	beq.n	8004d8e <TIM_Base_SetConfig+0x52>
 8004d76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004d7a:	4290      	cmp	r0, r2
 8004d7c:	d007      	beq.n	8004d8e <TIM_Base_SetConfig+0x52>
 8004d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d82:	4290      	cmp	r0, r2
 8004d84:	d003      	beq.n	8004d8e <TIM_Base_SetConfig+0x52>
 8004d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d8a:	4290      	cmp	r0, r2
 8004d8c:	d103      	bne.n	8004d96 <TIM_Base_SetConfig+0x5a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d94:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d96:	694a      	ldr	r2, [r1, #20]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004d9e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	688b      	ldr	r3, [r1, #8]
 8004da2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	680b      	ldr	r3, [r1, #0]
 8004da6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <TIM_Base_SetConfig+0x7c>)
 8004daa:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dac:	bf04      	itt	eq
 8004dae:	690b      	ldreq	r3, [r1, #16]
 8004db0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db2:	2301      	movs	r3, #1
 8004db4:	6143      	str	r3, [r0, #20]
}
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00

08004dbc <HAL_TIM_Base_Init>:
{
 8004dbc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	b330      	cbz	r0, 8004e10 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004dca:	b91b      	cbnz	r3, 8004dd4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004dcc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004dd0:	f7fc fc50 	bl	8001674 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	1d21      	adds	r1, r4, #4
 8004dde:	f7ff ffad 	bl	8004d3c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de2:	2301      	movs	r3, #1
  return HAL_OK;
 8004de4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004dee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004df2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004df6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004e0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e10:	2001      	movs	r0, #1
 8004e12:	e7fc      	b.n	8004e0e <HAL_TIM_Base_Init+0x52>

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e16:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e18:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e1e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004e22:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e24:	6083      	str	r3, [r0, #8]
}
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004e28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004e2c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004e2e:	2b01      	cmp	r3, #1
{
 8004e30:	4604      	mov	r4, r0
 8004e32:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004e36:	d019      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0x44>
 8004e38:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004e3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004e44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004e4e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e50:	680b      	ldr	r3, [r1, #0]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d065      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xfa>
 8004e56:	d815      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x5c>
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d00c      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x4e>
 8004e5c:	d807      	bhi.n	8004e6e <HAL_TIM_ConfigClockSource+0x46>
 8004e5e:	b153      	cbz	r3, 8004e76 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004e62:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004e68:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x4e>
 8004e72:	2b30      	cmp	r3, #48	; 0x30
 8004e74:	d1f4      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8004e76:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e78:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e80:	4313      	orrs	r3, r2
 8004e82:	e01a      	b.n	8004eba <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004e84:	2b60      	cmp	r3, #96	; 0x60
 8004e86:	d034      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xca>
 8004e88:	d819      	bhi.n	8004ebe <HAL_TIM_ConfigClockSource+0x96>
 8004e8a:	2b50      	cmp	r3, #80	; 0x50
 8004e8c:	d1e8      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8e:	684a      	ldr	r2, [r1, #4]
 8004e90:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e92:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e94:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e96:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	f025 0501 	bic.w	r5, r5, #1
 8004e9e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004ea2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004eac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004eae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004eb0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eb6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004eba:	6083      	str	r3, [r0, #8]
 8004ebc:	e7d0      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004ebe:	2b70      	cmp	r3, #112	; 0x70
 8004ec0:	d00c      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0xb4>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec6:	d1cb      	bne.n	8004e60 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec8:	68cb      	ldr	r3, [r1, #12]
 8004eca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004ece:	f7ff ffa1 	bl	8004e14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	6893      	ldr	r3, [r2, #8]
 8004ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eda:	e008      	b.n	8004eee <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	68cb      	ldr	r3, [r1, #12]
 8004ede:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004ee2:	f7ff ff97 	bl	8004e14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eee:	6093      	str	r3, [r2, #8]
      break;
 8004ef0:	e7b6      	b.n	8004e60 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef2:	684d      	ldr	r5, [r1, #4]
 8004ef4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef6:	6a01      	ldr	r1, [r0, #32]
 8004ef8:	f021 0110 	bic.w	r1, r1, #16
 8004efc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004f00:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f02:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f0a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f0e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004f12:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f14:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004f16:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8004f20:	e7cb      	b.n	8004eba <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f22:	684a      	ldr	r2, [r1, #4]
 8004f24:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f26:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f28:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2e:	f025 0501 	bic.w	r5, r5, #1
 8004f32:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f34:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004f36:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004f40:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f42:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004f44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f4a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8004f4e:	e7b4      	b.n	8004eba <HAL_TIM_ConfigClockSource+0x92>

08004f50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004f54:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	f04f 0302 	mov.w	r3, #2
 8004f5c:	d029      	beq.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004f5e:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f64:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f66:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8004f68:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8004f6a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f6e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f72:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f76:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f78:	4c0f      	ldr	r4, [pc, #60]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004f7a:	42a3      	cmp	r3, r4
 8004f7c:	d00e      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f82:	d00b      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f84:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d007      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	d003      	beq.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fac:	2300      	movs	r3, #0
 8004fae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004fb2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004fb4:	bd30      	pop	{r4, r5, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00

08004fbc <HAL_TIMEx_CommutCallback>:
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIMEx_BreakCallback>:
 8004fbe:	4770      	bx	lr

08004fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	68c1      	ldr	r1, [r0, #12]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fd2:	6882      	ldr	r2, [r0, #8]
 8004fd4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004fd6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fd8:	4302      	orrs	r2, r0
 8004fda:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004fdc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004fe0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fe4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	69a1      	ldr	r1, [r4, #24]
 8004fee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	; (8005030 <UART_SetConfig+0x70>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d115      	bne.n	8005028 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ffc:	f7fe ff0a 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005000:	2319      	movs	r3, #25
 8005002:	4358      	muls	r0, r3
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	2264      	movs	r2, #100	; 0x64
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	fbb0 f0f3 	udiv	r0, r0, r3
 800500e:	fbb0 f1f2 	udiv	r1, r0, r2
 8005012:	fb02 0311 	mls	r3, r2, r1, r0
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	3332      	adds	r3, #50	; 0x32
 800501a:	fbb3 f3f2 	udiv	r3, r3, r2
 800501e:	6824      	ldr	r4, [r4, #0]
 8005020:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005024:	60a3      	str	r3, [r4, #8]
#endif /* USART_CR1_OVER8 */
}
 8005026:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe fee4 	bl	8003df4 <HAL_RCC_GetPCLK1Freq>
 800502c:	e7e8      	b.n	8005000 <UART_SetConfig+0x40>
 800502e:	bf00      	nop
 8005030:	40013800 	.word	0x40013800

08005034 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	460e      	mov	r6, r1
 800503a:	4617      	mov	r7, r2
 800503c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503e:	6821      	ldr	r1, [r4, #0]
 8005040:	680b      	ldr	r3, [r1, #0]
 8005042:	ea36 0303 	bics.w	r3, r6, r3
 8005046:	d101      	bne.n	800504c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8005048:	2000      	movs	r0, #0
 800504a:	e014      	b.n	8005076 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800504c:	1c6b      	adds	r3, r5, #1
 800504e:	d0f7      	beq.n	8005040 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005050:	b995      	cbnz	r5, 8005078 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005052:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8005054:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005066:	2320      	movs	r3, #32
 8005068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800506c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8005070:	2300      	movs	r3, #0
 8005072:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005078:	f7fd f92e 	bl	80022d8 <HAL_GetTick>
 800507c:	1bc0      	subs	r0, r0, r7
 800507e:	4285      	cmp	r5, r0
 8005080:	d2dd      	bcs.n	800503e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8005082:	e7e6      	b.n	8005052 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08005084 <HAL_UART_Init>:
{
 8005084:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005086:	4604      	mov	r4, r0
 8005088:	b340      	cbz	r0, 80050dc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800508e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005092:	b91b      	cbnz	r3, 800509c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005094:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005098:	f7fc fb00 	bl	800169c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800509c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800509e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80050a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80050a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80050a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80050ae:	f7ff ff87 	bl	8004fc0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050c4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050cc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80050ce:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80050da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80050dc:	2001      	movs	r0, #1
 80050de:	e7fc      	b.n	80050da <HAL_UART_Init+0x56>

080050e0 <HAL_UART_Transmit>:
{
 80050e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80050e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80050ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80050ec:	2b20      	cmp	r3, #32
{
 80050ee:	460e      	mov	r6, r1
 80050f0:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80050f2:	d14a      	bne.n	800518a <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80050f4:	2900      	cmp	r1, #0
 80050f6:	d046      	beq.n	8005186 <HAL_UART_Transmit+0xa6>
 80050f8:	2a00      	cmp	r2, #0
 80050fa:	d044      	beq.n	8005186 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80050fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d042      	beq.n	800518a <HAL_UART_Transmit+0xaa>
 8005104:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005106:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8005108:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800510e:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005110:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8005114:	f7fd f8e0 	bl	80022d8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005118:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800511a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8005120:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005124:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005128:	d103      	bne.n	8005132 <HAL_UART_Transmit+0x52>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	b90b      	cbnz	r3, 8005132 <HAL_UART_Transmit+0x52>
 800512e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8005130:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8005132:	2300      	movs	r3, #0
 8005134:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8005138:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800513a:	b29b      	uxth	r3, r3
 800513c:	b953      	cbnz	r3, 8005154 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	4643      	mov	r3, r8
 8005140:	463a      	mov	r2, r7
 8005142:	2140      	movs	r1, #64	; 0x40
 8005144:	4620      	mov	r0, r4
 8005146:	f7ff ff75 	bl	8005034 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800514a:	b950      	cbnz	r0, 8005162 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800514c:	2320      	movs	r3, #32
 800514e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005152:	e007      	b.n	8005164 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	4643      	mov	r3, r8
 8005156:	463a      	mov	r2, r7
 8005158:	2180      	movs	r1, #128	; 0x80
 800515a:	4620      	mov	r0, r4
 800515c:	f7ff ff6a 	bl	8005034 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8005160:	b110      	cbz	r0, 8005168 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8005162:	2003      	movs	r0, #3
}
 8005164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005168:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800516a:	b94e      	cbnz	r6, 8005180 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005170:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005174:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005176:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005178:	3b01      	subs	r3, #1
 800517a:	b29b      	uxth	r3, r3
 800517c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800517e:	e7db      	b.n	8005138 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005180:	f816 3b01 	ldrb.w	r3, [r6], #1
 8005184:	e7f6      	b.n	8005174 <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 8005186:	2001      	movs	r0, #1
 8005188:	e7ec      	b.n	8005164 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800518a:	2002      	movs	r0, #2
 800518c:	e7ea      	b.n	8005164 <HAL_UART_Transmit+0x84>
	...

08005190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005190:	b084      	sub	sp, #16
 8005192:	b510      	push	{r4, lr}
 8005194:	4604      	mov	r4, r0
 8005196:	a803      	add	r0, sp, #12
 8005198:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800519c:	68e3      	ldr	r3, [r4, #12]
 800519e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a2:	60e3      	str	r3, [r4, #12]
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <USB_CoreInit+0x4c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051a6:	3b01      	subs	r3, #1
 80051a8:	d015      	beq.n	80051d6 <USB_CoreInit+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	dafa      	bge.n	80051a6 <USB_CoreInit+0x16>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <USB_CoreInit+0x4c>)

  do
  {
    if (++count > 200000U)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	d00b      	beq.n	80051d6 <USB_CoreInit+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051be:	6920      	ldr	r0, [r4, #16]
 80051c0:	f010 0001 	ands.w	r0, r0, #1
 80051c4:	d1f9      	bne.n	80051ba <USB_CoreInit+0x2a>
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051cc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80051ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d2:	b004      	add	sp, #16
 80051d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80051d6:	2003      	movs	r0, #3
 80051d8:	e7f5      	b.n	80051c6 <USB_CoreInit+0x36>
 80051da:	bf00      	nop
 80051dc:	00030d41 	.word	0x00030d41

080051e0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051e0:	6883      	ldr	r3, [r0, #8]
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6083      	str	r3, [r0, #8]
}
 80051e8:	2000      	movs	r0, #0
 80051ea:	4770      	bx	lr

080051ec <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ec:	6883      	ldr	r3, [r0, #8]
 80051ee:	f023 0301 	bic.w	r3, r3, #1
 80051f2:	6083      	str	r3, [r0, #8]
}
 80051f4:	2000      	movs	r0, #0
 80051f6:	4770      	bx	lr

080051f8 <USB_SetCurrentMode>:
{
 80051f8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051fa:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80051fc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051fe:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8005202:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005204:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005206:	d10f      	bne.n	8005228 <USB_SetCurrentMode+0x30>
  uint32_t ms = 0U;
 8005208:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800520a:	68c3      	ldr	r3, [r0, #12]
 800520c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005210:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8005212:	2001      	movs	r0, #1
 8005214:	f7fd f866 	bl	80022e4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8005218:	696b      	ldr	r3, [r5, #20]
      ms++;
 800521a:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800521c:	07d9      	lsls	r1, r3, #31
 800521e:	d414      	bmi.n	800524a <USB_SetCurrentMode+0x52>
 8005220:	2c32      	cmp	r4, #50	; 0x32
 8005222:	d1f6      	bne.n	8005212 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8005224:	2001      	movs	r0, #1
}
 8005226:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8005228:	2900      	cmp	r1, #0
 800522a:	d1fb      	bne.n	8005224 <USB_SetCurrentMode+0x2c>
  uint32_t ms = 0U;
 800522c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800522e:	68c3      	ldr	r3, [r0, #12]
 8005230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005234:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8005236:	2001      	movs	r0, #1
 8005238:	f7fd f854 	bl	80022e4 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800523c:	696b      	ldr	r3, [r5, #20]
      ms++;
 800523e:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005240:	07da      	lsls	r2, r3, #31
 8005242:	d502      	bpl.n	800524a <USB_SetCurrentMode+0x52>
 8005244:	2c32      	cmp	r4, #50	; 0x32
 8005246:	d1f6      	bne.n	8005236 <USB_SetCurrentMode+0x3e>
 8005248:	e7ec      	b.n	8005224 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 800524a:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 800524e:	4258      	negs	r0, r3
 8005250:	4158      	adcs	r0, r3
 8005252:	e7e8      	b.n	8005226 <USB_SetCurrentMode+0x2e>

08005254 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005254:	0189      	lsls	r1, r1, #6
 8005256:	f041 0120 	orr.w	r1, r1, #32
 800525a:	4a06      	ldr	r2, [pc, #24]	; (8005274 <USB_FlushTxFifo+0x20>)
 800525c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800525e:	3a01      	subs	r2, #1
 8005260:	d005      	beq.n	800526e <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005262:	6903      	ldr	r3, [r0, #16]
 8005264:	f013 0320 	ands.w	r3, r3, #32
 8005268:	d1f9      	bne.n	800525e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800526a:	4618      	mov	r0, r3
 800526c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800526e:	2003      	movs	r0, #3
}
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	00030d41 	.word	0x00030d41

08005278 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005278:	2310      	movs	r3, #16
 800527a:	4a06      	ldr	r2, [pc, #24]	; (8005294 <USB_FlushRxFifo+0x1c>)
 800527c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800527e:	3a01      	subs	r2, #1
 8005280:	d005      	beq.n	800528e <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005282:	6903      	ldr	r3, [r0, #16]
 8005284:	f013 0310 	ands.w	r3, r3, #16
 8005288:	d1f9      	bne.n	800527e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800528a:	4618      	mov	r0, r3
 800528c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800528e:	2003      	movs	r0, #3
}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	00030d41 	.word	0x00030d41

08005298 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8005298:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800529a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  count32b = ((uint32_t)len + 3U) / 4U;
 800529e:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052a4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 80052a8:	4299      	cmp	r1, r3
 80052aa:	d101      	bne.n	80052b0 <USB_WritePacket+0x18>
}
 80052ac:	2000      	movs	r0, #0
 80052ae:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80052b4:	6010      	str	r0, [r2, #0]
 80052b6:	e7f7      	b.n	80052a8 <USB_WritePacket+0x10>

080052b8 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 80052b8:	2300      	movs	r3, #0
{
 80052ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 80052bc:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052be:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  uint16_t remaining_bytes = len % 4U;
 80052c2:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	d316      	bcc.n	80052f8 <USB_ReadPacket+0x40>
 80052ca:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 80052ce:	b18a      	cbz	r2, 80052f4 <USB_ReadPacket+0x3c>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d0:	460c      	mov	r4, r1
    i = 0U;
 80052d2:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80052d8:	6805      	ldr	r5, [r0, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052da:	00d8      	lsls	r0, r3, #3
 80052dc:	fa25 f000 	lsr.w	r0, r5, r0
      i++;
 80052e0:	3301      	adds	r3, #1
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e2:	f804 0b01 	strb.w	r0, [r4], #1
    } while (remaining_bytes != 0U);
 80052e6:	b298      	uxth	r0, r3
 80052e8:	4282      	cmp	r2, r0
 80052ea:	d1f6      	bne.n	80052da <USB_ReadPacket+0x22>
 80052ec:	3a01      	subs	r2, #1
 80052ee:	b292      	uxth	r2, r2
 80052f0:	3201      	adds	r2, #1
 80052f2:	4411      	add	r1, r2
}
 80052f4:	4608      	mov	r0, r1
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052f8:	682e      	ldr	r6, [r5, #0]
 80052fa:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < count32b; i++)
 80052fe:	3301      	adds	r3, #1
 8005300:	e7e1      	b.n	80052c6 <USB_ReadPacket+0xe>

08005302 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005302:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005304:	6980      	ldr	r0, [r0, #24]
}
 8005306:	4010      	ands	r0, r2
 8005308:	4770      	bx	lr

0800530a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800530a:	6940      	ldr	r0, [r0, #20]
}
 800530c:	f000 0001 	and.w	r0, r0, #1
 8005310:	4770      	bx	lr
	...

08005314 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005314:	b084      	sub	sp, #16
 8005316:	b570      	push	{r4, r5, r6, lr}
 8005318:	ad05      	add	r5, sp, #20
 800531a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800531e:	2500      	movs	r5, #0
{
 8005320:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 8005322:	f8c0 5e00 	str.w	r5, [r0, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8005326:	6b83      	ldr	r3, [r0, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005328:	2110      	movs	r1, #16
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800532a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532e:	6383      	str	r3, [r0, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8005330:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005332:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005336:	6383      	str	r3, [r0, #56]	; 0x38
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005338:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005344:	f7ff ff86 	bl	8005254 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff ff95 	bl	8005278 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800534e:	462b      	mov	r3, r5
 8005350:	4628      	mov	r0, r5
 8005352:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005356:	9e06      	ldr	r6, [sp, #24]
 8005358:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800535c:	429e      	cmp	r6, r3
 800535e:	d116      	bne.n	800538e <USB_HostInit+0x7a>

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8005360:	2380      	movs	r3, #128	; 0x80
  USBx->GINTMSK = 0U;
 8005362:	61a0      	str	r0, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005364:	6161      	str	r1, [r4, #20]
  USBx->GRXFSIZ  = 0x80U;
 8005366:	6263      	str	r3, [r4, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005368:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 800536c:	62a3      	str	r3, [r4, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <USB_HostInit+0x84>)
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8005370:	2000      	movs	r0, #0
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005372:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005376:	69a3      	ldr	r3, [r4, #24]
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800537e:	69a2      	ldr	r2, [r4, #24]
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <USB_HostInit+0x88>)
 8005382:	4313      	orrs	r3, r2
 8005384:	61a3      	str	r3, [r4, #24]
}
 8005386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800538a:	b004      	add	sp, #16
 800538c:	4770      	bx	lr
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800538e:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005390:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8005392:	60d0      	str	r0, [r2, #12]
 8005394:	3220      	adds	r2, #32
 8005396:	e7e1      	b.n	800535c <USB_HostInit+0x48>
 8005398:	004000e0 	.word	0x004000e0
 800539c:	a3200008 	.word	0xa3200008

080053a0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053a0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
{
 80053a4:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053ae:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80053b2:	f001 0303 	and.w	r3, r1, #3
 80053b6:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80053b8:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053ba:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053be:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80053c2:	d104      	bne.n	80053ce <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80053c4:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80053c8:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80053ca:	2000      	movs	r0, #0
 80053cc:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80053ce:	2902      	cmp	r1, #2
 80053d0:	d1fb      	bne.n	80053ca <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80053d2:	f241 7370 	movw	r3, #6000	; 0x1770
 80053d6:	e7f7      	b.n	80053c8 <USB_InitFSLSPClkSel+0x28>

080053d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80053da:	2500      	movs	r5, #0
{
 80053dc:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 80053de:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80053e0:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80053e4:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053ec:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80053f8:	2064      	movs	r0, #100	; 0x64
 80053fa:	f7fc ff73 	bl	80022e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80053fe:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 8005400:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005406:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800540a:	f7fc ff6b 	bl	80022e4 <HAL_Delay>

  return HAL_OK;
}
 800540e:	4628      	mov	r0, r5
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}

08005414 <USB_DriveVbus>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8005414:	2300      	movs	r3, #0
{
 8005416:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 8005418:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800541a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800541e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005426:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	04da      	lsls	r2, r3, #19
 800542c:	d406      	bmi.n	800543c <USB_DriveVbus+0x28>
 800542e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005430:	bf02      	ittt	eq
 8005432:	9b01      	ldreq	r3, [sp, #4]
 8005434:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8005438:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	04db      	lsls	r3, r3, #19
 8005440:	d505      	bpl.n	800544e <USB_DriveVbus+0x3a>
 8005442:	b921      	cbnz	r1, 800544e <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800544e:	2000      	movs	r0, #0
 8005450:	b002      	add	sp, #8
 8005452:	4770      	bx	lr

08005454 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8005454:	2300      	movs	r3, #0
{
 8005456:	b082      	sub	sp, #8
  __IO uint32_t hprt0 = 0U;
 8005458:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800545a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800545e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005460:	9801      	ldr	r0, [sp, #4]
}
 8005462:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr

0800546a <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800546a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800546e:	6880      	ldr	r0, [r0, #8]
}
 8005470:	b280      	uxth	r0, r0
 8005472:	4770      	bx	lr

08005474 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005478:	461c      	mov	r4, r3
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800547e:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8005482:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005486:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 800548a:	60ab      	str	r3, [r5, #8]
 800548c:	fa4f fe82 	sxtb.w	lr, r2
 8005490:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8005494:	f001 030f 	and.w	r3, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005498:	2e03      	cmp	r6, #3
 800549a:	d857      	bhi.n	800554c <USB_HC_Init+0xd8>
 800549c:	e8df f006 	tbb	[pc, r6]
 80054a0:	49024c02 	.word	0x49024c02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054a4:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80054a8:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054ac:	60e9      	str	r1, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 80054ae:	da51      	bge.n	8005554 <USB_HC_Init+0xe0>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054b0:	68e9      	ldr	r1, [r5, #12]
 80054b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80054b6:	60e9      	str	r1, [r5, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054b8:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054ba:	2101      	movs	r1, #1
 80054bc:	f8dc 8018 	ldr.w	r8, [ip, #24]
 80054c0:	4099      	lsls	r1, r3
 80054c2:	ea41 0108 	orr.w	r1, r1, r8
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054c6:	f1be 0f00 	cmp.w	lr, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80054ca:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80054ce:	bfac      	ite	ge
 80054d0:	2100      	movge	r1, #0
 80054d2:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80054d6:	6983      	ldr	r3, [r0, #24]
 80054d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054dc:	6183      	str	r3, [r0, #24]
  else
  {
    HCcharEpDir = 0U;
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80054de:	f7ff ffb9 	bl	8005454 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d132      	bne.n	8005550 <USB_HC_Init+0xdc>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054ea:	2802      	cmp	r0, #2
 80054ec:	bf0c      	ite	eq
 80054ee:	2000      	moveq	r0, #0
 80054f0:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054f4:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054f6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054fa:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054fe:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005502:	02d2      	lsls	r2, r2, #11
 8005504:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005508:	4323      	orrs	r3, r4
 800550a:	4313      	orrs	r3, r2
 800550c:	04b2      	lsls	r2, r6, #18
 800550e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005512:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005514:	430b      	orrs	r3, r1
 8005516:	4303      	orrs	r3, r0

  if (ep_type == EP_TYPE_INTR)
 8005518:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800551a:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 800551e:	d105      	bne.n	800552c <USB_HC_Init+0xb8>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005520:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8005524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005528:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 800552c:	4628      	mov	r0, r5
 800552e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005532:	f240 619d 	movw	r1, #1693	; 0x69d
 8005536:	e7b7      	b.n	80054a8 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005538:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800553c:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005540:	60e9      	str	r1, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005542:	da07      	bge.n	8005554 <USB_HC_Init+0xe0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005544:	68e9      	ldr	r1, [r5, #12]
 8005546:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800554a:	e7b4      	b.n	80054b6 <USB_HC_Init+0x42>
      ret = HAL_ERROR;
 800554c:	2501      	movs	r5, #1
 800554e:	e7b4      	b.n	80054ba <USB_HC_Init+0x46>
    HCcharLowSpeed = 0U;
 8005550:	2000      	movs	r0, #0
 8005552:	e7cf      	b.n	80054f4 <USB_HC_Init+0x80>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005554:	2101      	movs	r1, #1
 8005556:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800555a:	4099      	lsls	r1, r3
 800555c:	4329      	orrs	r1, r5
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2500      	movs	r5, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005560:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005564:	6983      	ldr	r3, [r0, #24]
    HCcharEpDir = 0U;
 8005566:	4629      	mov	r1, r5
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800556c:	6183      	str	r3, [r0, #24]
 800556e:	e7b6      	b.n	80054de <USB_HC_Init+0x6a>

08005570 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8005570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005574:	694b      	ldr	r3, [r1, #20]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005576:	784a      	ldrb	r2, [r1, #1]
  if (hc->xfer_len > 0U)
 8005578:	2b00      	cmp	r3, #0
 800557a:	d050      	beq.n	800561e <USB_HC_StartXfer+0xae>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800557c:	890d      	ldrh	r5, [r1, #8]
 800557e:	1e5c      	subs	r4, r3, #1
 8005580:	442c      	add	r4, r5
 8005582:	fbb4 f4f5 	udiv	r4, r4, r5
 8005586:	b2a4      	uxth	r4, r4

    if (num_packets > max_hc_pkt_count)
 8005588:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800558c:	d903      	bls.n	8005596 <USB_HC_StartXfer+0x26>
    {
      num_packets = max_hc_pkt_count;
 800558e:	f44f 7480 	mov.w	r4, #256	; 0x100
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005592:	022d      	lsls	r5, r5, #8
 8005594:	610d      	str	r5, [r1, #16]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005596:	78cf      	ldrb	r7, [r1, #3]
 8005598:	2f00      	cmp	r7, #0
 800559a:	d042      	beq.n	8005622 <USB_HC_StartXfer+0xb2>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800559c:	890d      	ldrh	r5, [r1, #8]
 800559e:	4365      	muls	r5, r4
 80055a0:	610d      	str	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80055a2:	7a8d      	ldrb	r5, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055a4:	eb00 1642 	add.w	r6, r0, r2, lsl #5
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80055a8:	076d      	lsls	r5, r5, #29
 80055aa:	f005 48c0 	and.w	r8, r5, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055ae:	690d      	ldr	r5, [r1, #16]
 80055b0:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055b4:	ea48 050e 	orr.w	r5, r8, lr
 80055b8:	ea45 44c4 	orr.w	r4, r5, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055bc:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80055c0:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 80055c4:	68ac      	ldr	r4, [r5, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80055c6:	f8d6 c500 	ldr.w	ip, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80055ca:	43e4      	mvns	r4, r4
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80055cc:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 80055d0:	f8c6 c500 	str.w	ip, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80055d4:	f8d6 c500 	ldr.w	ip, [r6, #1280]	; 0x500
 80055d8:	0764      	lsls	r4, r4, #29
 80055da:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 80055de:	ea44 040c 	orr.w	r4, r4, ip
 80055e2:	f8c6 4500 	str.w	r4, [r6, #1280]	; 0x500

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055e6:	f8d6 4500 	ldr.w	r4, [r6, #1280]	; 0x500
 80055ea:	9401      	str	r4, [sp, #4]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ec:	9c01      	ldr	r4, [sp, #4]
 80055ee:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80055f2:	9401      	str	r4, [sp, #4]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80055f4:	9c01      	ldr	r4, [sp, #4]
  if (hc->ep_is_in != 0U)
 80055f6:	b1b7      	cbz	r7, 8005626 <USB_HC_StartXfer+0xb6>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80055f8:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80055fc:	9401      	str	r4, [sp, #4]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fe:	9c01      	ldr	r4, [sp, #4]
 8005600:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005604:	9401      	str	r4, [sp, #4]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005606:	9c01      	ldr	r4, [sp, #4]
 8005608:	f8c6 4500 	str.w	r4, [r6, #1280]	; 0x500

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800560c:	b9ef      	cbnz	r7, 800564a <USB_HC_StartXfer+0xda>
 800560e:	b1e3      	cbz	r3, 800564a <USB_HC_StartXfer+0xda>
  {
    switch (hc->ep_type)
 8005610:	79cc      	ldrb	r4, [r1, #7]
 8005612:	2c03      	cmp	r4, #3
 8005614:	d815      	bhi.n	8005642 <USB_HC_StartXfer+0xd2>
 8005616:	e8df f004 	tbb	[pc, r4]
 800561a:	1c09      	.short	0x1c09
 800561c:	1c09      	.short	0x1c09
    num_packets = 1U;
 800561e:	2401      	movs	r4, #1
 8005620:	e7b9      	b.n	8005596 <USB_HC_StartXfer+0x26>
    hc->XferSize = hc->xfer_len;
 8005622:	610b      	str	r3, [r1, #16]
 8005624:	e7bd      	b.n	80055a2 <USB_HC_StartXfer+0x32>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005626:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 800562a:	e7e7      	b.n	80055fc <USB_HC_StartXfer+0x8c>
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800562c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800562e:	1cdc      	adds	r4, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005630:	b2ad      	uxth	r5, r5
 8005632:	f3c4 048f 	ubfx	r4, r4, #2, #16
 8005636:	42a5      	cmp	r5, r4
 8005638:	d203      	bcs.n	8005642 <USB_HC_StartXfer+0xd2>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800563a:	6984      	ldr	r4, [r0, #24]
 800563c:	f044 0420 	orr.w	r4, r4, #32
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005640:	6184      	str	r4, [r0, #24]
      default:
        break;
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005642:	b29b      	uxth	r3, r3
 8005644:	68c9      	ldr	r1, [r1, #12]
 8005646:	f7ff fe27 	bl	8005298 <USB_WritePacket>
  }

  return HAL_OK;
}
 800564a:	2000      	movs	r0, #0
 800564c:	b002      	add	sp, #8
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005652:	692d      	ldr	r5, [r5, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005654:	1cdc      	adds	r4, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005656:	b2ad      	uxth	r5, r5
 8005658:	f3c4 048f 	ubfx	r4, r4, #2, #16
 800565c:	42a5      	cmp	r5, r4
 800565e:	d2f0      	bcs.n	8005642 <USB_HC_StartXfer+0xd2>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005660:	6984      	ldr	r4, [r0, #24]
 8005662:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8005666:	e7eb      	b.n	8005640 <USB_HC_StartXfer+0xd0>

08005668 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005668:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800566c:	6940      	ldr	r0, [r0, #20]
}
 800566e:	b280      	uxth	r0, r0
 8005670:	4770      	bx	lr

08005672 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005672:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005676:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
{
 800567a:	b530      	push	{r4, r5, lr}
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800567c:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005680:	6885      	ldr	r5, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005682:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005686:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005688:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800568c:	d501      	bpl.n	8005692 <USB_HC_Halt+0x20>
 800568e:	2c00      	cmp	r4, #0
 8005690:	da28      	bge.n	80056e4 <USB_HC_Halt+0x72>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005692:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005696:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056a2:	d121      	bne.n	80056e8 <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056a4:	6883      	ldr	r3, [r0, #8]
 80056a6:	069b      	lsls	r3, r3, #26
 80056a8:	d41c      	bmi.n	80056e4 <USB_HC_Halt+0x72>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056ac:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056b0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056b4:	d137      	bne.n	8005726 <USB_HC_Halt+0xb4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ba:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056be:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80056c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80056ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056d2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80056d6:	f240 33e9 	movw	r3, #1001	; 0x3e9
        do
        {
          if (++count > 1000U)
 80056da:	3b01      	subs	r3, #1
 80056dc:	d002      	beq.n	80056e4 <USB_HC_Halt+0x72>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056de:	6811      	ldr	r1, [r2, #0]
 80056e0:	2900      	cmp	r1, #0
 80056e2:	dbfa      	blt.n	80056da <USB_HC_Halt+0x68>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80056e4:	2000      	movs	r0, #0
 80056e6:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056e8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80056ec:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056f0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80056f4:	d117      	bne.n	8005726 <USB_HC_Halt+0xb4>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056fa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056fe:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005702:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005706:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800570a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800570e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005712:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005716:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800571a:	3b01      	subs	r3, #1
 800571c:	d0e2      	beq.n	80056e4 <USB_HC_Halt+0x72>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800571e:	6811      	ldr	r1, [r2, #0]
 8005720:	2900      	cmp	r1, #0
 8005722:	dbfa      	blt.n	800571a <USB_HC_Halt+0xa8>
 8005724:	e7de      	b.n	80056e4 <USB_HC_Halt+0x72>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800572a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800572e:	e7d9      	b.n	80056e4 <USB_HC_Halt+0x72>

08005730 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005734:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005736:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800573e:	f7ff fd89 	bl	8005254 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005742:	4620      	mov	r0, r4
 8005744:	f7ff fd98 	bl	8005278 <USB_FlushRxFifo>
 8005748:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	f504 60e0 	add.w	r0, r4, #1792	; 0x700

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005752:	6811      	ldr	r1, [r2, #0]
 8005754:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005758:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800575c:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8005760:	4282      	cmp	r2, r0
 8005762:	d1f6      	bne.n	8005752 <USB_StopHost+0x22>
  uint32_t count = 0U;
 8005764:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800576c:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005770:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8005772:	3001      	adds	r0, #1
 8005774:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005778:	d802      	bhi.n	8005780 <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800577a:	6819      	ldr	r1, [r3, #0]
 800577c:	2900      	cmp	r1, #0
 800577e:	dbf8      	blt.n	8005772 <USB_StopHost+0x42>
 8005780:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8005782:	429a      	cmp	r2, r3
 8005784:	d1ef      	bne.n	8005766 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;

  return HAL_OK;
}
 800578a:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800578c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005790:	6163      	str	r3, [r4, #20]
}
 8005792:	bd10      	pop	{r4, pc}

08005794 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005794:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005796:	4906      	ldr	r1, [pc, #24]	; (80057b0 <MX_FATFS_Init+0x1c>)
 8005798:	4806      	ldr	r0, [pc, #24]	; (80057b4 <MX_FATFS_Init+0x20>)
 800579a:	f003 ffef 	bl	800977c <FATFS_LinkDriver>
 800579e:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <MX_FATFS_Init+0x24>)
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80057a0:	4906      	ldr	r1, [pc, #24]	; (80057bc <MX_FATFS_Init+0x28>)
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80057a2:	7018      	strb	r0, [r3, #0]
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80057a4:	4806      	ldr	r0, [pc, #24]	; (80057c0 <MX_FATFS_Init+0x2c>)
 80057a6:	f003 ffe9 	bl	800977c <FATFS_LinkDriver>
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <MX_FATFS_Init+0x30>)
 80057ac:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80057ae:	bd08      	pop	{r3, pc}
 80057b0:	20005d90 	.word	0x20005d90
 80057b4:	08018988 	.word	0x08018988
 80057b8:	20006650 	.word	0x20006650
 80057bc:	20005d8c 	.word	0x20005d8c
 80057c0:	2000005c 	.word	0x2000005c
 80057c4:	20005fbc 	.word	0x20005fbc

080057c8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80057c8:	2000      	movs	r0, #0
 80057ca:	4770      	bx	lr

080057cc <writeSPI>:
    	printf("SD: SPI3 init error\r\n");
    }
} 

// send one byte of data and receive one back at the same time
unsigned char writeSPI( unsigned char b) {
 80057cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char rcv;
	HAL_SPI_TransmitReceive(&hspi3, &b, &rcv, 1, HAL_MAX_DELAY);
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
unsigned char writeSPI( unsigned char b) {
 80057d2:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi3, &b, &rcv, 1, HAL_MAX_DELAY);
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	f10d 0217 	add.w	r2, sp, #23
 80057dc:	2301      	movs	r3, #1
 80057de:	f10d 010f 	add.w	r1, sp, #15
 80057e2:	4804      	ldr	r0, [pc, #16]	; (80057f4 <writeSPI+0x28>)
 80057e4:	f7ff f820 	bl	8004828 <HAL_SPI_TransmitReceive>
	return rcv;
}// writeSPI
 80057e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80057ec:	b007      	add	sp, #28
 80057ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80057f2:	bf00      	nop
 80057f4:	200055b0 	.word	0x200055b0

080057f8 <spi_wait_ready>:


void spi_wait_ready () {
 80057f8:	b510      	push	{r4, lr}
 80057fa:	4c04      	ldr	r4, [pc, #16]	; (800580c <spi_wait_ready+0x14>)
    uint32_t i;

    for (i=0; i<100000; i++){
        if (writeSPI (0xFF) == 0xFF) break;
 80057fc:	20ff      	movs	r0, #255	; 0xff
 80057fe:	f7ff ffe5 	bl	80057cc <writeSPI>
 8005802:	28ff      	cmp	r0, #255	; 0xff
 8005804:	d001      	beq.n	800580a <spi_wait_ready+0x12>
    for (i=0; i<100000; i++){
 8005806:	3c01      	subs	r4, #1
 8005808:	d1f8      	bne.n	80057fc <spi_wait_ready+0x4>
        //WDT_Reset();
    }
}
 800580a:	bd10      	pop	{r4, pc}
 800580c:	000186a0 	.word	0x000186a0

08005810 <sendSDCmd>:


int sendSDCmd( unsigned char c, unsigned long a) {
 8005810:	b538      	push	{r3, r4, r5, lr}
    int i, r;
    // enable SD card
    enableSD();
 8005812:	2200      	movs	r2, #0
int sendSDCmd( unsigned char c, unsigned long a) {
 8005814:	4605      	mov	r5, r0
 8005816:	460c      	mov	r4, r1
    enableSD();
 8005818:	4817      	ldr	r0, [pc, #92]	; (8005878 <sendSDCmd+0x68>)
 800581a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800581e:	f7fd fb89 	bl	8002f34 <HAL_GPIO_WritePin>
    if(init) spi_wait_ready();
 8005822:	4b16      	ldr	r3, [pc, #88]	; (800587c <sendSDCmd+0x6c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	b10b      	cbz	r3, 800582c <sendSDCmd+0x1c>
 8005828:	f7ff ffe6 	bl	80057f8 <spi_wait_ready>
    // send a     comand packet        (6 bytes)
    writeSPI( c | 0x40);            // send command
 800582c:	f045 0040 	orr.w	r0, r5, #64	; 0x40
 8005830:	f7ff ffcc 	bl	80057cc <writeSPI>
    writeSPI( a>>24);              // msb of the address
 8005834:	0e20      	lsrs	r0, r4, #24
 8005836:	f7ff ffc9 	bl	80057cc <writeSPI>
    writeSPI( a>>16);
 800583a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800583e:	f7ff ffc5 	bl	80057cc <writeSPI>
    writeSPI( a>>8);
 8005842:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8005846:	f7ff ffc1 	bl	80057cc <writeSPI>
    writeSPI( a);                  // lsb
 800584a:	b2e0      	uxtb	r0, r4
 800584c:	f7ff ffbe 	bl	80057cc <writeSPI>

    switch(c) {
 8005850:	b11d      	cbz	r5, 800585a <sendSDCmd+0x4a>
 8005852:	2d08      	cmp	r5, #8
 8005854:	d00d      	beq.n	8005872 <sendSDCmd+0x62>
               break;
            case CMD_SEND_IF_COND:
               writeSPI(0x87);
               break;
            default:
               writeSPI(0xff);
 8005856:	20ff      	movs	r0, #255	; 0xff
 8005858:	e000      	b.n	800585c <sendSDCmd+0x4c>
               writeSPI(0x95);
 800585a:	2095      	movs	r0, #149	; 0x95
               writeSPI(0x87);
 800585c:	f7ff ffb6 	bl	80057cc <writeSPI>
int sendSDCmd( unsigned char c, unsigned long a) {
 8005860:	2408      	movs	r4, #8
    exceed this limit, we would have to assume a major malfunctioning of the card and abort
    communication: */

    // now wait for a response, allow for up to 8 bytes delay
    for( i=0; i<8; i++) {
       r=readSPI();
 8005862:	20ff      	movs	r0, #255	; 0xff
 8005864:	f7ff ffb2 	bl	80057cc <writeSPI>
       if ( r != 0xFF)
 8005868:	28ff      	cmp	r0, #255	; 0xff
 800586a:	d101      	bne.n	8005870 <sendSDCmd+0x60>
    for( i=0; i<8; i++) {
 800586c:	3c01      	subs	r4, #1
 800586e:	d1f8      	bne.n	8005862 <sendSDCmd+0x52>
       break;
    }
    return ( r);
    // NOTE CSCD is still low!
} // sendSDCmd
 8005870:	bd38      	pop	{r3, r4, r5, pc}
               writeSPI(0x87);
 8005872:	2087      	movs	r0, #135	; 0x87
 8005874:	e7f2      	b.n	800585c <sendSDCmd+0x4c>
 8005876:	bf00      	nop
 8005878:	40010c00 	.word	0x40010c00
 800587c:	20006660 	.word	0x20006660

08005880 <sd_init>:


// returns 0 if successful
//          E_COMMAND_ACK   failed to acknowledge reset command
//          E_INIT_TIMEOUT failed to initialize
int sd_init( void) {
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, 1);
 8005884:	2201      	movs	r2, #1
 8005886:	4880      	ldr	r0, [pc, #512]	; (8005a88 <sd_init+0x208>)
 8005888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800588c:	f7fd fb52 	bl	8002f34 <HAL_GPIO_WritePin>
    sd_bytesread=0;
 8005890:	2200      	movs	r2, #0
 8005892:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <sd_init+0x20c>)
    init=1;
 8005894:	4f7e      	ldr	r7, [pc, #504]	; (8005a90 <sd_init+0x210>)
    sd_bytesread=0;
 8005896:	601a      	str	r2, [r3, #0]
    init=1;
 8005898:	2301      	movs	r3, #1
    if (HAL_SPI_DeInit(&hspi3) != HAL_OK) {
 800589a:	487e      	ldr	r0, [pc, #504]	; (8005a94 <sd_init+0x214>)
    init=1;
 800589c:	603b      	str	r3, [r7, #0]
    if (HAL_SPI_DeInit(&hspi3) != HAL_OK) {
 800589e:	f7fe ff02 	bl	80046a6 <HAL_SPI_DeInit>
 80058a2:	b110      	cbz	r0, 80058aa <sd_init+0x2a>
    	printf("SD: SPI3 deinit error\r\n");
 80058a4:	487c      	ldr	r0, [pc, #496]	; (8005a98 <sd_init+0x218>)
 80058a6:	f011 f877 	bl	8016998 <puts>
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80058aa:	2330      	movs	r3, #48	; 0x30
 80058ac:	4e79      	ldr	r6, [pc, #484]	; (8005a94 <sd_init+0x214>)
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80058ae:	4630      	mov	r0, r6
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80058b0:	61f3      	str	r3, [r6, #28]
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80058b2:	f7fe fea0 	bl	80045f6 <HAL_SPI_Init>
 80058b6:	b110      	cbz	r0, 80058be <sd_init+0x3e>
    	printf("SD: SPI3 init error\r\n");
 80058b8:	4878      	ldr	r0, [pc, #480]	; (8005a9c <sd_init+0x21c>)
 80058ba:	f011 f86d 	bl	8016998 <puts>
    int i, r;

    initSD();

    writelock=readlock=0;
 80058be:	2300      	movs	r3, #0
 80058c0:	4a77      	ldr	r2, [pc, #476]	; (8005aa0 <sd_init+0x220>)
    sd_raw_card_type = 0;
 80058c2:	4c78      	ldr	r4, [pc, #480]	; (8005aa4 <sd_init+0x224>)
    writelock=readlock=0;
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	4a78      	ldr	r2, [pc, #480]	; (8005aa8 <sd_init+0x228>)
    sd_raw_card_type = 0;
 80058c8:	6023      	str	r3, [r4, #0]
    writelock=readlock=0;
 80058ca:	6013      	str	r3, [r2, #0]
	lastsec=0xffffffff;
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d0:	4b76      	ldr	r3, [pc, #472]	; (8005aac <sd_init+0x22c>)
    // 1. with the card NOT selected
    disableSD();
 80058d2:	f44f 7100 	mov.w	r1, #512	; 0x200
	lastsec=0xffffffff;
 80058d6:	601a      	str	r2, [r3, #0]
    disableSD();
 80058d8:	486b      	ldr	r0, [pc, #428]	; (8005a88 <sd_init+0x208>)
 80058da:	2201      	movs	r2, #1
 80058dc:	f7fd fb2a 	bl	8002f34 <HAL_GPIO_WritePin>
 80058e0:	20ff      	movs	r0, #255	; 0xff
 80058e2:	f7ff ff73 	bl	80057cc <writeSPI>
 80058e6:	250a      	movs	r5, #10
    // 2. send 80 clock cycles start up
    for ( i=0; i<10; i++)
        clockSPI();
 80058e8:	20ff      	movs	r0, #255	; 0xff
 80058ea:	f7ff ff6f 	bl	80057cc <writeSPI>
    for ( i=0; i<10; i++)
 80058ee:	3d01      	subs	r5, #1
 80058f0:	d1fa      	bne.n	80058e8 <sd_init+0x68>
    // 3. now select the card
    enableSD();
 80058f2:	462a      	mov	r2, r5
 80058f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058f8:	4863      	ldr	r0, [pc, #396]	; (8005a88 <sd_init+0x208>)
 80058fa:	f7fd fb1b 	bl	8002f34 <HAL_GPIO_WritePin>
    // 4. send a single RESET command
    r = sendSDCmd( RESET, 0); 
 80058fe:	4629      	mov	r1, r5
 8005900:	4628      	mov	r0, r5
 8005902:	f7ff ff85 	bl	8005810 <sendSDCmd>
 8005906:	4680      	mov	r8, r0
    disableSD();
 8005908:	2201      	movs	r2, #1
 800590a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800590e:	485e      	ldr	r0, [pc, #376]	; (8005a88 <sd_init+0x208>)
 8005910:	f7fd fb10 	bl	8002f34 <HAL_GPIO_WritePin>
 8005914:	20ff      	movs	r0, #255	; 0xff
 8005916:	f7ff ff59 	bl	80057cc <writeSPI>
    if ( r != 1) return E_COMMAND_ACK;               // must return Idle  comand rejected
 800591a:	f1b8 0f01 	cmp.w	r8, #1
 800591e:	f040 80ac 	bne.w	8005a7a <sd_init+0x1fa>


    /* check for version of SD card specification */
    // r = sendSDCmd(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
	r = sendSDCmd(CMD_SEND_IF_COND, 0x1aa);
 8005922:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005926:	2008      	movs	r0, #8
 8005928:	f7ff ff72 	bl	8005810 <sendSDCmd>
    if((r & (1 << R1_ILL_COMMAND)) == 0) {
 800592c:	0743      	lsls	r3, r0, #29
 800592e:	d43f      	bmi.n	80059b0 <sd_init+0x130>
        readSPI();
 8005930:	20ff      	movs	r0, #255	; 0xff
 8005932:	f7ff ff4b 	bl	80057cc <writeSPI>
        readSPI();
 8005936:	20ff      	movs	r0, #255	; 0xff
 8005938:	f7ff ff48 	bl	80057cc <writeSPI>
        if((readSPI() & 0x01) == 0) return 2; /* card operation voltage range doesn't match */
 800593c:	20ff      	movs	r0, #255	; 0xff
 800593e:	f7ff ff45 	bl	80057cc <writeSPI>
 8005942:	07c0      	lsls	r0, r0, #31
 8005944:	f140 809b 	bpl.w	8005a7e <sd_init+0x1fe>
        if(readSPI() != 0xaa) return 3; /* wrong test pattern */
 8005948:	20ff      	movs	r0, #255	; 0xff
 800594a:	f7ff ff3f 	bl	80057cc <writeSPI>
 800594e:	28aa      	cmp	r0, #170	; 0xaa
 8005950:	f040 8097 	bne.w	8005a82 <sd_init+0x202>

        /* card conforms to SD 2 card specification */
		printf("SD v2 card\r\n");
 8005954:	4856      	ldr	r0, [pc, #344]	; (8005ab0 <sd_init+0x230>)
 8005956:	f011 f81f 	bl	8016998 <puts>
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	6023      	str	r3, [r4, #0]
    disableSD();
 8005962:	f44f 4500 	mov.w	r5, #32768	; 0x8000
        }
    }

    /* wait for card to get ready */
    for( i = 0; ; ++i) {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2))) {
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f013 0103 	ands.w	r1, r3, #3
 800596c:	d034      	beq.n	80059d8 <sd_init+0x158>
            long arg = 0;
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2)) arg = 0x40000000;
 800596e:	f013 0f02 	tst.w	r3, #2
 8005972:	bf0c      	ite	eq
 8005974:	f04f 0800 	moveq.w	r8, #0
 8005978:	f04f 4880 	movne.w	r8, #1073741824	; 0x40000000
            sendSDCmd(CMD_APP, 0);
 800597c:	2100      	movs	r1, #0
 800597e:	2037      	movs	r0, #55	; 0x37
 8005980:	f7ff ff46 	bl	8005810 <sendSDCmd>
            r = sendSDCmd(CMD_SD_SEND_OP_COND, arg);
 8005984:	4641      	mov	r1, r8
 8005986:	2029      	movs	r0, #41	; 0x29
        }
        else {
            r = sendSDCmd(CMD_SEND_OP_COND, 0);
 8005988:	f7ff ff42 	bl	8005810 <sendSDCmd>
        }

        if((r & (1 << R1_IDLE_STATE)) == 0) break;
 800598c:	f010 0101 	ands.w	r1, r0, #1
 8005990:	d024      	beq.n	80059dc <sd_init+0x15c>

        if(i == 0x7fff) {
 8005992:	3d01      	subs	r5, #1
 8005994:	d1e7      	bne.n	8005966 <sd_init+0xe6>
            disableSD();
 8005996:	2201      	movs	r2, #1
 8005998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800599c:	483a      	ldr	r0, [pc, #232]	; (8005a88 <sd_init+0x208>)
 800599e:	f7fd fac9 	bl	8002f34 <HAL_GPIO_WritePin>
 80059a2:	20ff      	movs	r0, #255	; 0xff
 80059a4:	f7ff ff12 	bl	80057cc <writeSPI>
            return 4;
 80059a8:	2404      	movs	r4, #4
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
    	printf("SD: SPI3 init error\r\n");
    }
	init=0;
    return 0;
} // init media
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sendSDCmd(CMD_APP, 0);
 80059b0:	4629      	mov	r1, r5
 80059b2:	2037      	movs	r0, #55	; 0x37
 80059b4:	f7ff ff2c 	bl	8005810 <sendSDCmd>
        r = sendSDCmd(CMD_SD_SEND_OP_COND, 0);
 80059b8:	4629      	mov	r1, r5
 80059ba:	2029      	movs	r0, #41	; 0x29
 80059bc:	f7ff ff28 	bl	8005810 <sendSDCmd>
        if((r & (1 << R1_ILL_COMMAND)) == 0) {
 80059c0:	0741      	lsls	r1, r0, #29
 80059c2:	d407      	bmi.n	80059d4 <sd_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
 80059c4:	6823      	ldr	r3, [r4, #0]
			printf("SD v1 card\r\n");
 80059c6:	483b      	ldr	r0, [pc, #236]	; (8005ab4 <sd_init+0x234>)
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	6023      	str	r3, [r4, #0]
			printf("SD v1 card\r\n");
 80059ce:	f010 ffe3 	bl	8016998 <puts>
 80059d2:	e7c6      	b.n	8005962 <sd_init+0xe2>
			printf("MMC card\r\n");
 80059d4:	4838      	ldr	r0, [pc, #224]	; (8005ab8 <sd_init+0x238>)
 80059d6:	e7fa      	b.n	80059ce <sd_init+0x14e>
            r = sendSDCmd(CMD_SEND_OP_COND, 0);
 80059d8:	2001      	movs	r0, #1
 80059da:	e7d5      	b.n	8005988 <sd_init+0x108>
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2)) {
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	079a      	lsls	r2, r3, #30
 80059e0:	d522      	bpl.n	8005a28 <sd_init+0x1a8>
        if(sendSDCmd(CMD_READ_OCR, 0)) {
 80059e2:	203a      	movs	r0, #58	; 0x3a
 80059e4:	f7ff ff14 	bl	8005810 <sendSDCmd>
 80059e8:	b150      	cbz	r0, 8005a00 <sd_init+0x180>
            disableSD();
 80059ea:	2201      	movs	r2, #1
 80059ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059f0:	4825      	ldr	r0, [pc, #148]	; (8005a88 <sd_init+0x208>)
 80059f2:	f7fd fa9f 	bl	8002f34 <HAL_GPIO_WritePin>
 80059f6:	20ff      	movs	r0, #255	; 0xff
 80059f8:	f7ff fee8 	bl	80057cc <writeSPI>
            return 5;
 80059fc:	2405      	movs	r4, #5
 80059fe:	e7d4      	b.n	80059aa <sd_init+0x12a>
        if(readSPI() & 0x40) sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
 8005a00:	20ff      	movs	r0, #255	; 0xff
 8005a02:	f7ff fee3 	bl	80057cc <writeSPI>
 8005a06:	0643      	lsls	r3, r0, #25
 8005a08:	bf48      	it	mi
 8005a0a:	6823      	ldrmi	r3, [r4, #0]
        readSPI();
 8005a0c:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if(readSPI() & 0x40) sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
 8005a10:	bf44      	itt	mi
 8005a12:	f043 0304 	orrmi.w	r3, r3, #4
 8005a16:	6023      	strmi	r3, [r4, #0]
        readSPI();
 8005a18:	f7ff fed8 	bl	80057cc <writeSPI>
		readSPI();
 8005a1c:	20ff      	movs	r0, #255	; 0xff
 8005a1e:	f7ff fed5 	bl	80057cc <writeSPI>
		readSPI();
 8005a22:	20ff      	movs	r0, #255	; 0xff
 8005a24:	f7ff fed2 	bl	80057cc <writeSPI>
    if(sendSDCmd(CMD_SET_BLOCKLEN, 512)) {
 8005a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a2c:	2010      	movs	r0, #16
 8005a2e:	f7ff feef 	bl	8005810 <sendSDCmd>
 8005a32:	4604      	mov	r4, r0
        disableSD();
 8005a34:	2201      	movs	r2, #1
 8005a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a3a:	4813      	ldr	r0, [pc, #76]	; (8005a88 <sd_init+0x208>)
    if(sendSDCmd(CMD_SET_BLOCKLEN, 512)) {
 8005a3c:	b134      	cbz	r4, 8005a4c <sd_init+0x1cc>
        disableSD();
 8005a3e:	f7fd fa79 	bl	8002f34 <HAL_GPIO_WritePin>
 8005a42:	20ff      	movs	r0, #255	; 0xff
 8005a44:	f7ff fec2 	bl	80057cc <writeSPI>
        return 6;
 8005a48:	2406      	movs	r4, #6
 8005a4a:	e7ae      	b.n	80059aa <sd_init+0x12a>
    disableSD();
 8005a4c:	f7fd fa72 	bl	8002f34 <HAL_GPIO_WritePin>
 8005a50:	20ff      	movs	r0, #255	; 0xff
 8005a52:	f7ff febb 	bl	80057cc <writeSPI>
    if (HAL_SPI_DeInit(&hspi3) != HAL_OK) {
 8005a56:	480f      	ldr	r0, [pc, #60]	; (8005a94 <sd_init+0x214>)
 8005a58:	f7fe fe25 	bl	80046a6 <HAL_SPI_DeInit>
 8005a5c:	b110      	cbz	r0, 8005a64 <sd_init+0x1e4>
    	printf("SD: SPI3 deinit error\r\n");
 8005a5e:	480e      	ldr	r0, [pc, #56]	; (8005a98 <sd_init+0x218>)
 8005a60:	f010 ff9a 	bl	8016998 <puts>
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a64:	2500      	movs	r5, #0
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8005a66:	480b      	ldr	r0, [pc, #44]	; (8005a94 <sd_init+0x214>)
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a68:	61f5      	str	r5, [r6, #28]
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8005a6a:	f7fe fdc4 	bl	80045f6 <HAL_SPI_Init>
 8005a6e:	b110      	cbz	r0, 8005a76 <sd_init+0x1f6>
    	printf("SD: SPI3 init error\r\n");
 8005a70:	480a      	ldr	r0, [pc, #40]	; (8005a9c <sd_init+0x21c>)
 8005a72:	f010 ff91 	bl	8016998 <puts>
	init=0;
 8005a76:	603d      	str	r5, [r7, #0]
    return 0;
 8005a78:	e797      	b.n	80059aa <sd_init+0x12a>
    if ( r != 1) return E_COMMAND_ACK;               // must return Idle  comand rejected
 8005a7a:	2480      	movs	r4, #128	; 0x80
 8005a7c:	e795      	b.n	80059aa <sd_init+0x12a>
        if((readSPI() & 0x01) == 0) return 2; /* card operation voltage range doesn't match */
 8005a7e:	2402      	movs	r4, #2
 8005a80:	e793      	b.n	80059aa <sd_init+0x12a>
        if(readSPI() != 0xaa) return 3; /* wrong test pattern */
 8005a82:	2403      	movs	r4, #3
 8005a84:	e791      	b.n	80059aa <sd_init+0x12a>
 8005a86:	bf00      	nop
 8005a88:	40010c00 	.word	0x40010c00
 8005a8c:	2000665c 	.word	0x2000665c
 8005a90:	20006660 	.word	0x20006660
 8005a94:	200055b0 	.word	0x200055b0
 8005a98:	08018395 	.word	0x08018395
 8005a9c:	080183ac 	.word	0x080183ac
 8005aa0:	20006664 	.word	0x20006664
 8005aa4:	2000097c 	.word	0x2000097c
 8005aa8:	20006658 	.word	0x20006658
 8005aac:	20006668 	.word	0x20006668
 8005ab0:	080183c1 	.word	0x080183c1
 8005ab4:	080183cd 	.word	0x080183cd
 8005ab8:	080183d9 	.word	0x080183d9

08005abc <sd_readSECTOR>:
// p        pointer to sector buffer
// returns TRUE if successful
int sd_readSECTOR( LBA a, char *p) {
    int r, i;  //  int r, i,j;

    sd_led=1;
 8005abc:	2201      	movs	r2, #1
int sd_readSECTOR( LBA a, char *p) {
 8005abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sd_led=1;
 8005ac0:	4b2a      	ldr	r3, [pc, #168]	; (8005b6c <sd_readSECTOR+0xb0>)
int sd_readSECTOR( LBA a, char *p) {
 8005ac2:	460f      	mov	r7, r1
    sd_led=1;
 8005ac4:	701a      	strb	r2, [r3, #0]
        }
    }*/

    #endif

    lastsec=a;
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <sd_readSECTOR+0xb4>)
int sd_readSECTOR( LBA a, char *p) {
 8005ac8:	4605      	mov	r5, r0
    lastsec=a;
 8005aca:	6018      	str	r0, [r3, #0]

    if(sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC)) r = sendSDCmd( READ_SINGLE, ( a << 9)/512); 
 8005acc:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <sd_readSECTOR+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	075b      	lsls	r3, r3, #29
 8005ad2:	bf4c      	ite	mi
 8005ad4:	f3c0 0116 	ubfxmi	r1, r0, #0, #23
    else r = sendSDCmd( READ_SINGLE, ( a << 9));
 8005ad8:	0241      	lslpl	r1, r0, #9
 8005ada:	2011      	movs	r0, #17
 8005adc:	f7ff fe98 	bl	8005810 <sendSDCmd>
 8005ae0:	4604      	mov	r4, r0

    if ( r == 0) {   // check if command was accepted
 8005ae2:	bb90      	cbnz	r0, 8005b4a <sd_readSECTOR+0x8e>
 8005ae4:	4e24      	ldr	r6, [pc, #144]	; (8005b78 <sd_readSECTOR+0xbc>)
        // 2. wait for a response
        for( i=0; i<R_TIMEOUT; i++) {
            r = readSPI();
 8005ae6:	20ff      	movs	r0, #255	; 0xff
 8005ae8:	f7ff fe70 	bl	80057cc <writeSPI>
            if ( r == DATA_START)
 8005aec:	28fe      	cmp	r0, #254	; 0xfe
 8005aee:	d008      	beq.n	8005b02 <sd_readSECTOR+0x46>
        for( i=0; i<R_TIMEOUT; i++) {
 8005af0:	3e01      	subs	r6, #1
 8005af2:	d1f8      	bne.n	8005ae6 <sd_readSECTOR+0x2a>
            // 4. ignore CRC
            readSPI();
            readSPI();
        } // data arrived
		else {
			printf("readSECTOR %ld R_TIMEOUT return -2\r\n",a);
 8005af4:	4629      	mov	r1, r5
 8005af6:	4821      	ldr	r0, [pc, #132]	; (8005b7c <sd_readSECTOR+0xc0>)
 8005af8:	f010 fec6 	bl	8016888 <iprintf>
			readlock=0;
 8005afc:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <sd_readSECTOR+0xc4>)
 8005afe:	601e      	str	r6, [r3, #0]
 8005b00:	e02a      	b.n	8005b58 <sd_readSECTOR+0x9c>
                sdsread++;
 8005b02:	4c20      	ldr	r4, [pc, #128]	; (8005b84 <sd_readSECTOR+0xc8>)
 8005b04:	f507 7500 	add.w	r5, r7, #512	; 0x200
 8005b08:	6823      	ldr	r3, [r4, #0]
                *p++ = readSPI();
 8005b0a:	20ff      	movs	r0, #255	; 0xff
                sdsread++;
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	6023      	str	r3, [r4, #0]
                *p++ = readSPI();
 8005b10:	f7ff fe5c 	bl	80057cc <writeSPI>
 8005b14:	f807 0b01 	strb.w	r0, [r7], #1
            } while (i<512);
 8005b18:	42bd      	cmp	r5, r7
 8005b1a:	d1f5      	bne.n	8005b08 <sd_readSECTOR+0x4c>
            sd_bytesread=sd_bytesread+512;
 8005b1c:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <sd_readSECTOR+0xcc>)
            readSPI();
 8005b1e:	20ff      	movs	r0, #255	; 0xff
            sd_bytesread=sd_bytesread+512;
 8005b20:	6813      	ldr	r3, [r2, #0]
    // 5. remember to disable the card
    disableSD();
    #ifdef SD_LOCK
    readlock=0;
    #endif
    return ( r == DATA_START);    // return TRUE if successful
 8005b22:	2401      	movs	r4, #1
            sd_bytesread=sd_bytesread+512;
 8005b24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005b28:	6013      	str	r3, [r2, #0]
            readSPI();
 8005b2a:	f7ff fe4f 	bl	80057cc <writeSPI>
            readSPI();
 8005b2e:	20ff      	movs	r0, #255	; 0xff
 8005b30:	f7ff fe4c 	bl	80057cc <writeSPI>
    disableSD();
 8005b34:	2201      	movs	r2, #1
 8005b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b3a:	4814      	ldr	r0, [pc, #80]	; (8005b8c <sd_readSECTOR+0xd0>)
 8005b3c:	f7fd f9fa 	bl	8002f34 <HAL_GPIO_WritePin>
 8005b40:	20ff      	movs	r0, #255	; 0xff
 8005b42:	f7ff fe43 	bl	80057cc <writeSPI>
} // readSECTOR
 8005b46:	4620      	mov	r0, r4
 8005b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		readlock=0;	
 8005b4a:	2400      	movs	r4, #0
		printf("readSECTOR  %ld cmd rejected return -1\r\n",a);
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4810      	ldr	r0, [pc, #64]	; (8005b90 <sd_readSECTOR+0xd4>)
 8005b50:	f010 fe9a 	bl	8016888 <iprintf>
		readlock=0;	
 8005b54:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <sd_readSECTOR+0xc4>)
 8005b56:	601c      	str	r4, [r3, #0]
			disableSD();
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b5e:	480b      	ldr	r0, [pc, #44]	; (8005b8c <sd_readSECTOR+0xd0>)
 8005b60:	f7fd f9e8 	bl	8002f34 <HAL_GPIO_WritePin>
 8005b64:	20ff      	movs	r0, #255	; 0xff
 8005b66:	f7ff fe31 	bl	80057cc <writeSPI>
            return 0;
 8005b6a:	e7ec      	b.n	8005b46 <sd_readSECTOR+0x8a>
 8005b6c:	20006654 	.word	0x20006654
 8005b70:	20006668 	.word	0x20006668
 8005b74:	2000097c 	.word	0x2000097c
 8005b78:	0003e418 	.word	0x0003e418
 8005b7c:	0801840c 	.word	0x0801840c
 8005b80:	20006664 	.word	0x20006664
 8005b84:	20000980 	.word	0x20000980
 8005b88:	2000665c 	.word	0x2000665c
 8005b8c:	40010c00 	.word	0x40010c00
 8005b90:	080183e3 	.word	0x080183e3

08005b94 <sd_writeSECTOR>:
// a       LBA of sector requested
// p       pointer to sector buffer
// returns TRUE if successful
int sd_writeSECTOR( LBA a, const char *p) {
    unsigned r, i;
    sd_led=1;
 8005b94:	2201      	movs	r2, #1
int sd_writeSECTOR( LBA a, const char *p) {
 8005b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sd_led=1;
 8005b98:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <sd_writeSECTOR+0x90>)
int sd_writeSECTOR( LBA a, const char *p) {
 8005b9a:	460e      	mov	r6, r1
    sd_led=1;
 8005b9c:	701a      	strb	r2, [r3, #0]
    writelock=1;
    #endif

    // 1. send WRITE command
    //  r = sendSDCmd( WRITE_SINGLE, ( a << 9));
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC)) r = sendSDCmd( WRITE_SINGLE, ( a << 9)/512);
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <sd_writeSECTOR+0x94>)
int sd_writeSECTOR( LBA a, const char *p) {
 8005ba0:	4605      	mov	r5, r0
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC)) r = sendSDCmd( WRITE_SINGLE, ( a << 9)/512);
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	075b      	lsls	r3, r3, #29
 8005ba6:	bf4c      	ite	mi
 8005ba8:	f3c0 0116 	ubfxmi	r1, r0, #0, #23
    else r = sendSDCmd( WRITE_SINGLE, ( a << 9));
 8005bac:	0241      	lslpl	r1, r0, #9
 8005bae:	2018      	movs	r0, #24
 8005bb0:	f7ff fe2e 	bl	8005810 <sendSDCmd>
 8005bb4:	4604      	mov	r4, r0

    if ( r == 0) {     // check if command was accepted
 8005bb6:	bb78      	cbnz	r0, 8005c18 <sd_writeSECTOR+0x84>
        // 2. send data
        writeSPI( DATA_START);
 8005bb8:	20fe      	movs	r0, #254	; 0xfe
 8005bba:	f7ff fe07 	bl	80057cc <writeSPI>
 8005bbe:	f506 7700 	add.w	r7, r6, #512	; 0x200
        // send 512 bytes of data
        for( i=0; i<512; i++) writeSPI( *p++);
 8005bc2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005bc6:	f7ff fe01 	bl	80057cc <writeSPI>
 8005bca:	42b7      	cmp	r7, r6
 8005bcc:	d1f9      	bne.n	8005bc2 <sd_writeSECTOR+0x2e>
        // 3. send dummy CRC
        clockSPI();
 8005bce:	20ff      	movs	r0, #255	; 0xff
 8005bd0:	f7ff fdfc 	bl	80057cc <writeSPI>
        clockSPI();
 8005bd4:	20ff      	movs	r0, #255	; 0xff
 8005bd6:	f7ff fdf9 	bl	80057cc <writeSPI>
        // 4. check if data accepted
        r = readSPI();
 8005bda:	20ff      	movs	r0, #255	; 0xff
 8005bdc:	f7ff fdf6 	bl	80057cc <writeSPI>
        if ( (r & 0xf) == DATA_ACCEPT) {
 8005be0:	f000 000f 	and.w	r0, r0, #15
 8005be4:	2805      	cmp	r0, #5
 8005be6:	d111      	bne.n	8005c0c <sd_writeSECTOR+0x78>
 8005be8:	4c10      	ldr	r4, [pc, #64]	; (8005c2c <sd_writeSECTOR+0x98>)
            // 5. wait for write completion
            for( i=0; i<W_TIMEOUT; i++) {
                r = readSPI();
 8005bea:	20ff      	movs	r0, #255	; 0xff
 8005bec:	f7ff fdee 	bl	80057cc <writeSPI>
                if ( r != 0 )
 8005bf0:	b9b0      	cbnz	r0, 8005c20 <sd_writeSECTOR+0x8c>
            for( i=0; i<W_TIMEOUT; i++) {
 8005bf2:	3c01      	subs	r4, #1
 8005bf4:	d1f9      	bne.n	8005bea <sd_writeSECTOR+0x56>
	else {
		printf("writeSECTOR %ld cmd rejected r=%d\n",a,r);
	}
    // 6. remember to disable the card

    disableSD();
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <sd_writeSECTOR+0x9c>)
 8005bfe:	f7fd f999 	bl	8002f34 <HAL_GPIO_WritePin>
 8005c02:	20ff      	movs	r0, #255	; 0xff
 8005c04:	f7ff fde2 	bl	80057cc <writeSPI>
    #ifdef SD_LOCK
      writelock=0;
    #endif
    return ( r);     // return TRUE if successful
} // writeSECTOR
 8005c08:	4620      	mov	r0, r4
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            printf("writeSECTOR %ld failed r=%d\n",a,r);
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4808      	ldr	r0, [pc, #32]	; (8005c34 <sd_writeSECTOR+0xa0>)
		printf("writeSECTOR %ld cmd rejected r=%d\n",a,r);
 8005c12:	f010 fe39 	bl	8016888 <iprintf>
 8005c16:	e7ee      	b.n	8005bf6 <sd_writeSECTOR+0x62>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4806      	ldr	r0, [pc, #24]	; (8005c38 <sd_writeSECTOR+0xa4>)
 8005c1e:	e7f8      	b.n	8005c12 <sd_writeSECTOR+0x7e>
                r = readSPI();
 8005c20:	4604      	mov	r4, r0
 8005c22:	e7e8      	b.n	8005bf6 <sd_writeSECTOR+0x62>
 8005c24:	20006654 	.word	0x20006654
 8005c28:	2000097c 	.word	0x2000097c
 8005c2c:	0003d090 	.word	0x0003d090
 8005c30:	40010c00 	.word	0x40010c00
 8005c34:	08018431 	.word	0x08018431
 8005c38:	0801844e 	.word	0x0801844e

08005c3c <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return Stat;
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <USER_status+0x8>)
 8005c3e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000058 	.word	0x20000058

08005c48 <USER_initialize>:
{
 8005c48:	b508      	push	{r3, lr}
    if (sd_init() == 0) Stat &= ~STA_NOINIT;
 8005c4a:	f7ff fe19 	bl	8005880 <sd_init>
 8005c4e:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <USER_initialize+0x18>)
 8005c50:	b918      	cbnz	r0, 8005c5a <USER_initialize+0x12>
 8005c52:	781a      	ldrb	r2, [r3, #0]
 8005c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c58:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005c5a:	7818      	ldrb	r0, [r3, #0]
}
 8005c5c:	bd08      	pop	{r3, pc}
 8005c5e:	bf00      	nop
 8005c60:	20000058 	.word	0x20000058

08005c64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	460d      	mov	r5, r1
 8005c68:	461c      	mov	r4, r3
 8005c6a:	18d6      	adds	r6, r2, r3
 8005c6c:	1b30      	subs	r0, r6, r4
  /* USER CODE BEGIN READ */
    while (count) {
 8005c6e:	b91c      	cbnz	r4, 8005c78 <USER_read+0x14>
        sector++;
        count--;
    }
    return count ? RES_ERROR : RES_OK;
  /* USER CODE END READ */
}
 8005c70:	1c20      	adds	r0, r4, #0
 8005c72:	bf18      	it	ne
 8005c74:	2001      	movne	r0, #1
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
        if(!sd_readSECTOR(sector,(char*)buff)) break;
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f7ff ff1f 	bl	8005abc <sd_readSECTOR>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0f6      	beq.n	8005c70 <USER_read+0xc>
        buff+=512;
 8005c82:	f505 7500 	add.w	r5, r5, #512	; 0x200
        count--;
 8005c86:	3c01      	subs	r4, #1
 8005c88:	e7f0      	b.n	8005c6c <USER_read+0x8>

08005c8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005c8a:	b570      	push	{r4, r5, r6, lr}
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	461c      	mov	r4, r3
 8005c90:	18d6      	adds	r6, r2, r3
 8005c92:	1b30      	subs	r0, r6, r4
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    while(count){
 8005c94:	b91c      	cbnz	r4, 8005c9e <USER_write+0x14>
        sector++;
        count--;
    }
    return count ? RES_ERROR : RES_OK;
  /* USER CODE END WRITE */
}
 8005c96:	1c20      	adds	r0, r4, #0
 8005c98:	bf18      	it	ne
 8005c9a:	2001      	movne	r0, #1
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
        if(!sd_writeSECTOR(sector,(char*)buff)) break;
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f7ff ff78 	bl	8005b94 <sd_writeSECTOR>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d0f6      	beq.n	8005c96 <USER_write+0xc>
        buff+=512;
 8005ca8:	f505 7500 	add.w	r5, r5, #512	; 0x200
        count--;
 8005cac:	3c01      	subs	r4, #1
 8005cae:	e7f0      	b.n	8005c92 <USER_write+0x8>

08005cb0 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    if (cmd == GET_SECTOR_SIZE) {
 8005cb0:	2902      	cmp	r1, #2
 8005cb2:	d104      	bne.n	8005cbe <USER_ioctl+0xe>
        *(WORD*)buff = 512;
 8005cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
        return RES_OK;
 8005cb8:	2000      	movs	r0, #0
        *(WORD*)buff = 512;
 8005cba:	8013      	strh	r3, [r2, #0]
        return RES_OK;
 8005cbc:	4770      	bx	lr
    }
    if (Stat & STA_NOINIT) {return RES_NOTRDY;}
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <USER_ioctl+0x20>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f013 0f01 	tst.w	r3, #1
    return RES_PARERR;
 8005cc6:	bf14      	ite	ne
 8005cc8:	2003      	movne	r0, #3
 8005cca:	2004      	moveq	r0, #4
  /* USER CODE END IOCTL */
}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000058 	.word	0x20000058

08005cd4 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005cd4:	2100      	movs	r1, #0
{
 8005cd6:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 8005cd8:	4608      	mov	r0, r1
{
 8005cda:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8005cdc:	f007 fbf8 	bl	800d4d0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005ce0:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <MX_LWIP_Init+0x88>)
  ipaddr.addr = 0;
 8005ce4:	491e      	ldr	r1, [pc, #120]	; (8005d60 <MX_LWIP_Init+0x8c>)
  netmask.addr = 0;
 8005ce6:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <MX_LWIP_Init+0x90>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005ce8:	4d1f      	ldr	r5, [pc, #124]	; (8005d68 <MX_LWIP_Init+0x94>)
  gw.addr = 0;
 8005cea:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8005cec:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8005cee:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005cf0:	4c1e      	ldr	r4, [pc, #120]	; (8005d6c <MX_LWIP_Init+0x98>)
 8005cf2:	9502      	str	r5, [sp, #8]
 8005cf4:	4d1e      	ldr	r5, [pc, #120]	; (8005d70 <MX_LWIP_Init+0x9c>)
 8005cf6:	e9cd 0500 	strd	r0, r5, [sp]
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f009 fb16 	bl	800f32c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d00:	4620      	mov	r0, r4
 8005d02:	f009 fb53 	bl	800f3ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d06:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d0a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8005d0c:	075b      	lsls	r3, r3, #29
 8005d0e:	d522      	bpl.n	8005d56 <MX_LWIP_Init+0x82>
    netif_set_up(&gnetif);
 8005d10:	f009 fb52 	bl	800f3b8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005d14:	4917      	ldr	r1, [pc, #92]	; (8005d74 <MX_LWIP_Init+0xa0>)
 8005d16:	4815      	ldr	r0, [pc, #84]	; (8005d6c <MX_LWIP_Init+0x98>)
 8005d18:	f009 fb92 	bl	800f440 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005d1c:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005d1e:	2101      	movs	r1, #1
 8005d20:	a805      	add	r0, sp, #20
  osSemaphoreDef(Netif_SEM);
 8005d22:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005d26:	f003 feb7 	bl	8009a98 <osSemaphoreCreate>

  link_arg.netif = &gnetif;
 8005d2a:	4e13      	ldr	r6, [pc, #76]	; (8005d78 <MX_LWIP_Init+0xa4>)
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005d2e:	4d14      	ldr	r5, [pc, #80]	; (8005d80 <MX_LWIP_Init+0xac>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8005d30:	e9c6 4000 	strd	r4, r0, [r6]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005d34:	ac07      	add	r4, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005d36:	6018      	str	r0, [r3, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8005d44:	4631      	mov	r1, r6
 8005d46:	a807      	add	r0, sp, #28
 8005d48:	f003 fe1b 	bl	8009982 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005d4c:	4807      	ldr	r0, [pc, #28]	; (8005d6c <MX_LWIP_Init+0x98>)
 8005d4e:	f00e fc15 	bl	801457c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005d52:	b00e      	add	sp, #56	; 0x38
 8005d54:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8005d56:	f009 fb3e 	bl	800f3d6 <netif_set_down>
 8005d5a:	e7db      	b.n	8005d14 <MX_LWIP_Init+0x40>
 8005d5c:	200066b4 	.word	0x200066b4
 8005d60:	200066ac 	.word	0x200066ac
 8005d64:	200066b0 	.word	0x200066b0
 8005d68:	0800d431 	.word	0x0800d431
 8005d6c:	20006674 	.word	0x20006674
 8005d70:	08006035 	.word	0x08006035
 8005d74:	080061f1 	.word	0x080061f1
 8005d78:	2000666c 	.word	0x2000666c
 8005d7c:	20000984 	.word	0x20000984
 8005d80:	08017cf8 	.word	0x08017cf8

08005d84 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8005d88:	f04f 0800 	mov.w	r8, #0
{
 8005d8c:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8005d8e:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005d90:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005d94:	4a22      	ldr	r2, [pc, #136]	; (8005e20 <low_level_output+0x9c>)
 8005d96:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8005d98:	9200      	str	r2, [sp, #0]
 8005d9a:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8005d9c:	b92c      	cbnz	r4, 8005daa <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005d9e:	4639      	mov	r1, r7
 8005da0:	481f      	ldr	r0, [pc, #124]	; (8005e20 <low_level_output+0x9c>)
 8005da2:	f7fc fc2d 	bl	8002600 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005da6:	4620      	mov	r0, r4
 8005da8:	e004      	b.n	8005db4 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005daa:	6832      	ldr	r2, [r6, #0]
 8005dac:	2a00      	cmp	r2, #0
 8005dae:	da11      	bge.n	8005dd4 <low_level_output+0x50>
        errval = ERR_USE;
 8005db0:	f06f 0007 	mvn.w	r0, #7

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005db4:	f241 0214 	movw	r2, #4116	; 0x1014
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	5899      	ldr	r1, [r3, r2]
 8005dbe:	0689      	lsls	r1, r1, #26
 8005dc0:	d505      	bpl.n	8005dce <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005dc2:	2120      	movs	r1, #32
 8005dc4:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005dc6:	f241 0204 	movw	r2, #4100	; 0x1004
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8005dce:	b003      	add	sp, #12
 8005dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005dd4:	4645      	mov	r5, r8
      payloadoffset = 0;
 8005dd6:	f04f 0a00 	mov.w	sl, #0
      byteslefttocopy = q->len;
 8005dda:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005dde:	eb05 0809 	add.w	r8, r5, r9
 8005de2:	6861      	ldr	r1, [r4, #4]
 8005de4:	45d8      	cmp	r8, fp
 8005de6:	eb03 0005 	add.w	r0, r3, r5
 8005dea:	4451      	add	r1, sl
 8005dec:	d807      	bhi.n	8005dfe <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005dee:	464a      	mov	r2, r9
 8005df0:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8005df2:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005df4:	f010 fc8f 	bl	8016716 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8005df8:	6824      	ldr	r4, [r4, #0]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	e7ce      	b.n	8005d9c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005dfe:	ebab 0505 	sub.w	r5, fp, r5
 8005e02:	462a      	mov	r2, r5
 8005e04:	f010 fc87 	bl	8016716 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005e08:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005e0a:	6833      	ldr	r3, [r6, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dbcf      	blt.n	8005db0 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e10:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e12:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005e14:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005e16:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	e7df      	b.n	8005dde <low_level_output+0x5a>
 8005e1e:	bf00      	nop
 8005e20:	20009718 	.word	0x20009718

08005e24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	4683      	mov	fp, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e2a:	4c3b      	ldr	r4, [pc, #236]	; (8005f18 <ethernetif_input+0xf4>)
 8005e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	f003 fe57 	bl	8009ae4 <osSemaphoreWait>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d1f8      	bne.n	8005e2c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005e3a:	4d38      	ldr	r5, [pc, #224]	; (8005f1c <ethernetif_input+0xf8>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005e3c:	4838      	ldr	r0, [pc, #224]	; (8005f20 <ethernetif_input+0xfc>)
 8005e3e:	f010 f934 	bl	80160aa <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005e42:	4628      	mov	r0, r5
 8005e44:	f7fc fc52 	bl	80026ec <HAL_ETH_GetReceivedFrame_IT>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	b130      	cbz	r0, 8005e5a <ethernetif_input+0x36>
    return NULL;
 8005e4c:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8005e4e:	4834      	ldr	r0, [pc, #208]	; (8005f20 <ethernetif_input+0xfc>)
 8005e50:	f010 f930 	bl	80160b4 <sys_mutex_unlock>
      } while(p!=NULL);
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d1f0      	bne.n	8005e3a <ethernetif_input+0x16>
 8005e58:	e7e7      	b.n	8005e2a <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 8005e5a:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  if (len > 0)
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	d051      	beq.n	8005f04 <ethernetif_input+0xe0>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005e60:	2203      	movs	r2, #3
 8005e62:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005e64:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005e66:	f009 fc23 	bl	800f6b0 <pbuf_alloc>
  if (p != NULL)
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d049      	beq.n	8005f04 <ethernetif_input+0xe0>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005e70:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005e72:	f240 59f4 	movw	r9, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005e76:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005e7a:	9700      	str	r7, [sp, #0]
      byteslefttocopy = q->len;
 8005e7c:	4637      	mov	r7, r6
      payloadoffset = 0;
 8005e7e:	2300      	movs	r3, #0
      byteslefttocopy = q->len;
 8005e80:	f8b8 200a 	ldrh.w	r2, [r8, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005e84:	18be      	adds	r6, r7, r2
 8005e86:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005e8a:	9900      	ldr	r1, [sp, #0]
 8005e8c:	454e      	cmp	r6, r9
 8005e8e:	4418      	add	r0, r3
 8005e90:	4439      	add	r1, r7
 8005e92:	d826      	bhi.n	8005ee2 <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005e94:	f010 fc3f 	bl	8016716 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8005e98:	f8d8 8000 	ldr.w	r8, [r8]
 8005e9c:	f1b8 0f00 	cmp.w	r8, #0
 8005ea0:	d1ec      	bne.n	8005e7c <ethernetif_input+0x58>
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ea2:	2200      	movs	r2, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005ea4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005ea6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8005ea8:	4282      	cmp	r2, r0
 8005eaa:	d12d      	bne.n	8005f08 <ethernetif_input+0xe4>
    heth.RxFrameInfos.SegCount =0;
 8005eac:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005eae:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 8005eb2:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	5899      	ldr	r1, [r3, r2]
 8005eb8:	0609      	lsls	r1, r1, #24
 8005eba:	d505      	bpl.n	8005ec8 <ethernetif_input+0xa4>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8005ec0:	f241 0208 	movw	r2, #4104	; 0x1008
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 8005ec8:	2c00      	cmp	r4, #0
 8005eca:	d0bf      	beq.n	8005e4c <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 8005ecc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4798      	blx	r3
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	d0b9      	beq.n	8005e4e <ethernetif_input+0x2a>
            pbuf_free(p);
 8005eda:	4620      	mov	r0, r4
 8005edc:	f009 fb80 	bl	800f5e0 <pbuf_free>
 8005ee0:	e7b5      	b.n	8005e4e <ethernetif_input+0x2a>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005ee2:	eba9 0707 	sub.w	r7, r9, r7
 8005ee6:	463a      	mov	r2, r7
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	f010 fc14 	bl	8016716 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005eee:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005ef2:	f2a6 52f4 	subw	r2, r6, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005ef6:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005efa:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	443b      	add	r3, r7
        bufferoffset = 0;
 8005f00:	2700      	movs	r7, #0
 8005f02:	e7bf      	b.n	8005e84 <ethernetif_input+0x60>
  struct pbuf *p = NULL;
 8005f04:	2400      	movs	r4, #0
 8005f06:	e7cc      	b.n	8005ea2 <ethernetif_input+0x7e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005f08:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005f0a:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005f0c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005f10:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	e7c8      	b.n	8005ea8 <ethernetif_input+0x84>
 8005f16:	bf00      	nop
 8005f18:	20000988 	.word	0x20000988
 8005f1c:	20009718 	.word	0x20009718
 8005f20:	2000af78 	.word	0x2000af78

08005f24 <HAL_ETH_MspInit>:
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f2a:	2210      	movs	r2, #16
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	a806      	add	r0, sp, #24
 8005f30:	f010 fbfc 	bl	801672c <memset>
  if(ethHandle->Instance==ETH)
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	4b38      	ldr	r3, [pc, #224]	; (8006018 <HAL_ETH_MspInit+0xf4>)
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d16a      	bne.n	8006012 <HAL_ETH_MspInit+0xee>
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f3c:	f5a3 43e0 	sub.w	r3, r3, #28672	; 0x7000
 8005f40:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005f42:	2502      	movs	r5, #2
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f48:	615a      	str	r2, [r3, #20]
 8005f4a:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f4c:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f4e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005f52:	9200      	str	r2, [sp, #0]
 8005f54:	9a00      	ldr	r2, [sp, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f58:	a906      	add	r1, sp, #24
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f5e:	615a      	str	r2, [r3, #20]
 8005f60:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f62:	482e      	ldr	r0, [pc, #184]	; (800601c <HAL_ETH_MspInit+0xf8>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f64:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005f68:	9201      	str	r2, [sp, #4]
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f6e:	2400      	movs	r4, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f74:	615a      	str	r2, [r3, #20]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8005f7c:	9202      	str	r2, [sp, #8]
 8005f7e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	f042 0210 	orr.w	r2, r2, #16
 8005f86:	619a      	str	r2, [r3, #24]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	f002 0210 	and.w	r2, r2, #16
 8005f8e:	9203      	str	r2, [sp, #12]
 8005f90:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	f042 0204 	orr.w	r2, r2, #4
 8005f98:	619a      	str	r2, [r3, #24]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	f002 0204 	and.w	r2, r2, #4
 8005fa0:	9204      	str	r2, [sp, #16]
 8005fa2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	619a      	str	r2, [r3, #24]
 8005fac:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fae:	e9cd 5506 	strd	r5, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fba:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fbc:	f7fc fe60 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc0:	2382      	movs	r3, #130	; 0x82
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc2:	a906      	add	r1, sp, #24
 8005fc4:	4816      	ldr	r0, [pc, #88]	; (8006020 <HAL_ETH_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fca:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fcc:	f7fc fe58 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005fd0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fd2:	a906      	add	r1, sp, #24
 8005fd4:	4812      	ldr	r0, [pc, #72]	; (8006020 <HAL_ETH_MspInit+0xfc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fda:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fdc:	f7fc fe50 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005fe0:	2330      	movs	r3, #48	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fe2:	a906      	add	r1, sp, #24
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <HAL_ETH_MspInit+0xf8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fec:	f7fc fe48 	bl	8002c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005ff0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff4:	a906      	add	r1, sp, #24
 8005ff6:	480b      	ldr	r0, [pc, #44]	; (8006024 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ffc:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ffe:	f7fc fe3f 	bl	8002c80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006002:	203d      	movs	r0, #61	; 0x3d
 8006004:	4622      	mov	r2, r4
 8006006:	2105      	movs	r1, #5
 8006008:	f7fc f990 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800600c:	203d      	movs	r0, #61	; 0x3d
 800600e:	f7fc f9c1 	bl	8002394 <HAL_NVIC_EnableIRQ>
}
 8006012:	b00a      	add	sp, #40	; 0x28
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	bf00      	nop
 8006018:	40028000 	.word	0x40028000
 800601c:	40011000 	.word	0x40011000
 8006020:	40010800 	.word	0x40010800
 8006024:	40010c00 	.word	0x40010c00

08006028 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8006028:	4b01      	ldr	r3, [pc, #4]	; (8006030 <HAL_ETH_RxCpltCallback+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	f003 bd80 	b.w	8009b30 <osSemaphoreRelease>
 8006030:	20000988 	.word	0x20000988

08006034 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006034:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006036:	4604      	mov	r4, r0
{
 8006038:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800603a:	b930      	cbnz	r0, 800604a <ethernetif_init+0x16>
 800603c:	4b49      	ldr	r3, [pc, #292]	; (8006164 <ethernetif_init+0x130>)
 800603e:	f240 2237 	movw	r2, #567	; 0x237
 8006042:	4949      	ldr	r1, [pc, #292]	; (8006168 <ethernetif_init+0x134>)
 8006044:	4849      	ldr	r0, [pc, #292]	; (800616c <ethernetif_init+0x138>)
 8006046:	f010 fc1f 	bl	8016888 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800604a:	f247 4373 	movw	r3, #29811	; 0x7473
 800604e:	86a3      	strh	r3, [r4, #52]	; 0x34
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006050:	4b47      	ldr	r3, [pc, #284]	; (8006170 <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 8006052:	4d48      	ldr	r5, [pc, #288]	; (8006174 <ethernetif_init+0x140>)
  netif->output = etharp_output;
 8006054:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006056:	4b48      	ldr	r3, [pc, #288]	; (8006178 <ethernetif_init+0x144>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006058:	4948      	ldr	r1, [pc, #288]	; (800617c <ethernetif_init+0x148>)
  netif->linkoutput = low_level_output;
 800605a:	61a3      	str	r3, [r4, #24]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800605c:	2301      	movs	r3, #1
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800605e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006062:	e9c5 1300 	strd	r1, r3, [r5]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800606a:	e9c5 0102 	strd	r0, r1, [r5, #8]
  MACAddr[0] = 0x00;
 800606e:	4944      	ldr	r1, [pc, #272]	; (8006180 <ethernetif_init+0x14c>)
  uint32_t regvalue = 0;
 8006070:	2200      	movs	r2, #0
  MACAddr[0] = 0x00;
 8006072:	9101      	str	r1, [sp, #4]
  MACAddr[3] = 0x05;
 8006074:	f245 7116 	movw	r1, #22294	; 0x5716
 8006078:	f8ad 1008 	strh.w	r1, [sp, #8]
  heth.Init.MACAddr = &MACAddr[0];
 800607c:	a901      	add	r1, sp, #4
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800607e:	822b      	strh	r3, [r5, #16]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006080:	e9c5 1305 	strd	r1, r3, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006084:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006088:	4628      	mov	r0, r5
  uint32_t regvalue = 0;
 800608a:	9200      	str	r2, [sp, #0]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800608c:	61ea      	str	r2, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800608e:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006090:	f7fc fc1c 	bl	80028cc <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8006094:	b928      	cbnz	r0, 80060a2 <ethernetif_init+0x6e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006096:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80060a2:	2304      	movs	r3, #4
 80060a4:	4a37      	ldr	r2, [pc, #220]	; (8006184 <ethernetif_init+0x150>)
 80060a6:	4938      	ldr	r1, [pc, #224]	; (8006188 <ethernetif_init+0x154>)
 80060a8:	4832      	ldr	r0, [pc, #200]	; (8006174 <ethernetif_init+0x140>)
 80060aa:	f7fc fa33 	bl	8002514 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80060ae:	2308      	movs	r3, #8
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <ethernetif_init+0x158>)
 80060b2:	4937      	ldr	r1, [pc, #220]	; (8006190 <ethernetif_init+0x15c>)
 80060b4:	482f      	ldr	r0, [pc, #188]	; (8006174 <ethernetif_init+0x140>)
 80060b6:	f7fc fa69 	bl	800258c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80060ba:	2306      	movs	r3, #6
 80060bc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80060c0:	696b      	ldr	r3, [r5, #20]
  osSemaphoreDef(SEM);
 80060c2:	2700      	movs	r7, #0
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80060c4:	781a      	ldrb	r2, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80060c6:	2101      	movs	r1, #1
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80060c8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80060cc:	785a      	ldrb	r2, [r3, #1]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80060ce:	a803      	add	r0, sp, #12
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80060d0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80060d4:	789a      	ldrb	r2, [r3, #2]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80060d6:	4e2f      	ldr	r6, [pc, #188]	; (8006194 <ethernetif_init+0x160>)
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80060d8:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80060dc:	78da      	ldrb	r2, [r3, #3]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80060de:	ad05      	add	r5, sp, #20
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80060e0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80060e4:	791a      	ldrb	r2, [r3, #4]
 80060e6:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80060ea:	795b      	ldrb	r3, [r3, #5]
  osSemaphoreDef(SEM);
 80060ec:	e9cd 7703 	strd	r7, r7, [sp, #12]
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80060f0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->mtu = 1500;
 80060f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80060f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80060fa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80060fe:	f043 030a 	orr.w	r3, r3, #10
 8006102:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006106:	f003 fcc7 	bl	8009a98 <osSemaphoreCreate>
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <ethernetif_init+0x164>)
 800610c:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800610e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006112:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006116:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800611a:	4621      	mov	r1, r4
 800611c:	a805      	add	r0, sp, #20
 800611e:	f003 fc30 	bl	8009982 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8006122:	4814      	ldr	r0, [pc, #80]	; (8006174 <ethernetif_init+0x140>)
 8006124:	f7fc fca8 	bl	8002a78 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8006128:	466a      	mov	r2, sp
 800612a:	2111      	movs	r1, #17
 800612c:	4811      	ldr	r0, [pc, #68]	; (8006174 <ethernetif_init+0x140>)
 800612e:	f7fc fb5c 	bl	80027ea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8006132:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8006134:	2111      	movs	r1, #17
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8006136:	f042 0203 	orr.w	r2, r2, #3
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800613a:	480e      	ldr	r0, [pc, #56]	; (8006174 <ethernetif_init+0x140>)
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800613c:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800613e:	f7fc fb8e 	bl	800285e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8006142:	466a      	mov	r2, sp
 8006144:	2112      	movs	r1, #18
 8006146:	480b      	ldr	r0, [pc, #44]	; (8006174 <ethernetif_init+0x140>)
 8006148:	f7fc fb4f 	bl	80027ea <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_MISR_LINK_INT_EN;
 800614c:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800614e:	2112      	movs	r1, #18
  regvalue |= PHY_MISR_LINK_INT_EN;
 8006150:	f042 0220 	orr.w	r2, r2, #32
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8006154:	4807      	ldr	r0, [pc, #28]	; (8006174 <ethernetif_init+0x140>)
  regvalue |= PHY_MISR_LINK_INT_EN;
 8006156:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8006158:	f7fc fb81 	bl	800285e <HAL_ETH_WritePHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800615c:	4638      	mov	r0, r7
 800615e:	b00d      	add	sp, #52	; 0x34
 8006160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006162:	bf00      	nop
 8006164:	08018479 	.word	0x08018479
 8006168:	08021ebd 	.word	0x08021ebd
 800616c:	08018495 	.word	0x08018495
 8006170:	08014ecd 	.word	0x08014ecd
 8006174:	20009718 	.word	0x20009718
 8006178:	08005d85 	.word	0x08005d85
 800617c:	40028000 	.word	0x40028000
 8006180:	05e18000 	.word	0x05e18000
 8006184:	20009760 	.word	0x20009760
 8006188:	200066b8 	.word	0x200066b8
 800618c:	200066f8 	.word	0x200066f8
 8006190:	20009698 	.word	0x20009698
 8006194:	08017d14 	.word	0x08017d14
 8006198:	20000988 	.word	0x20000988

0800619c <sys_now>:
 800619c:	f7fc b89c 	b.w	80022d8 <HAL_GetTick>

080061a0 <ethernetif_set_link>:
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
  uint32_t regvalue = 0;
 80061a0:	2300      	movs	r3, #0
{
 80061a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061a4:	4605      	mov	r5, r0
  uint32_t regvalue = 0;
 80061a6:	ac02      	add	r4, sp, #8
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061a8:	4e0f      	ldr	r6, [pc, #60]	; (80061e8 <ethernetif_set_link+0x48>)
  uint32_t regvalue = 0;
 80061aa:	f844 3d04 	str.w	r3, [r4, #-4]!
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061ae:	4622      	mov	r2, r4
 80061b0:	2101      	movs	r1, #1
 80061b2:	4630      	mov	r0, r6
 80061b4:	f7fc fb19 	bl	80027ea <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80061b8:	6828      	ldr	r0, [r5, #0]
    regvalue &= PHY_LINKED_STATUS;
 80061ba:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80061bc:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
    regvalue &= PHY_LINKED_STATUS;
 80061c0:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80061c4:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 80061c6:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80061c8:	d406      	bmi.n	80061d8 <ethernetif_set_link+0x38>
 80061ca:	b12b      	cbz	r3, 80061d8 <ethernetif_set_link+0x38>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80061cc:	f009 f910 	bl	800f3f0 <netif_set_link_up>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80061d0:	20c8      	movs	r0, #200	; 0xc8
 80061d2:	f003 fbfe 	bl	80099d2 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061d6:	e7ea      	b.n	80061ae <ethernetif_set_link+0xe>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80061d8:	0752      	lsls	r2, r2, #29
 80061da:	d5f9      	bpl.n	80061d0 <ethernetif_set_link+0x30>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f7      	bne.n	80061d0 <ethernetif_set_link+0x30>
      netif_set_link_down(link_arg->netif);
 80061e0:	f009 f922 	bl	800f428 <netif_set_link_down>
 80061e4:	e7f4      	b.n	80061d0 <ethernetif_set_link+0x30>
 80061e6:	bf00      	nop
 80061e8:	20009718 	.word	0x20009718

080061ec <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80061ec:	4770      	bx	lr
	...

080061f0 <ethernetif_update_config>:
{
 80061f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
 80061f2:	2100      	movs	r1, #0
  if(netif_is_link_up(netif))
 80061f4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
{
 80061f8:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 80061fa:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 80061fc:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 80061fe:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8006200:	d544      	bpl.n	800628c <ethernetif_update_config+0x9c>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006202:	4c24      	ldr	r4, [pc, #144]	; (8006294 <ethernetif_update_config+0xa4>)
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d035      	beq.n	8006276 <ethernetif_update_config+0x86>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800620a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800620e:	4620      	mov	r0, r4
 8006210:	f7fc fb25 	bl	800285e <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8006214:	f7fc f860 	bl	80022d8 <HAL_GetTick>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006218:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 800621a:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800621c:	aa01      	add	r2, sp, #4
 800621e:	2101      	movs	r1, #1
 8006220:	4630      	mov	r0, r6
 8006222:	f7fc fae2 	bl	80027ea <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8006226:	f7fc f857 	bl	80022d8 <HAL_GetTick>
 800622a:	9b00      	ldr	r3, [sp, #0]
 800622c:	1ac0      	subs	r0, r0, r3
 800622e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006232:	d820      	bhi.n	8006276 <ethernetif_update_config+0x86>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006234:	9b01      	ldr	r3, [sp, #4]
 8006236:	069a      	lsls	r2, r3, #26
 8006238:	d5f0      	bpl.n	800621c <ethernetif_update_config+0x2c>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800623a:	aa01      	add	r2, sp, #4
 800623c:	2110      	movs	r1, #16
 800623e:	4815      	ldr	r0, [pc, #84]	; (8006294 <ethernetif_update_config+0xa4>)
 8006240:	f7fc fad3 	bl	80027ea <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	f013 0204 	ands.w	r2, r3, #4
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800624a:	bf18      	it	ne
 800624c:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8006250:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8006252:	bf4c      	ite	mi
 8006254:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8006256:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800625a:	60e2      	str	r2, [r4, #12]
        heth.Init.Speed = ETH_SPEED_100M;
 800625c:	60a3      	str	r3, [r4, #8]
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800625e:	2100      	movs	r1, #0
 8006260:	480c      	ldr	r0, [pc, #48]	; (8006294 <ethernetif_update_config+0xa4>)
 8006262:	f7fc fc81 	bl	8002b68 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8006266:	480b      	ldr	r0, [pc, #44]	; (8006294 <ethernetif_update_config+0xa4>)
 8006268:	f7fc fc06 	bl	8002a78 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800626c:	4628      	mov	r0, r5
 800626e:	f7ff ffbd 	bl	80061ec <ethernetif_notify_conn_changed>
}
 8006272:	b002      	add	sp, #8
 8006274:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006276:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800627a:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800627c:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8006280:	b292      	uxth	r2, r2
 8006282:	2100      	movs	r1, #0
 8006284:	4803      	ldr	r0, [pc, #12]	; (8006294 <ethernetif_update_config+0xa4>)
 8006286:	f7fc faea 	bl	800285e <HAL_ETH_WritePHYRegister>
 800628a:	e7e8      	b.n	800625e <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&heth);
 800628c:	4801      	ldr	r0, [pc, #4]	; (8006294 <ethernetif_update_config+0xa4>)
 800628e:	f7fc fc2f 	bl	8002af0 <HAL_ETH_Stop>
 8006292:	e7eb      	b.n	800626c <ethernetif_update_config+0x7c>
 8006294:	20009718 	.word	0x20009718

08006298 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8006298:	2000      	movs	r0, #0
 800629a:	4770      	bx	lr

0800629c <USBH_MSC_Process>:
{
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800629e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80062a2:	4606      	mov	r6, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a4:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 80062a6:	7b22      	ldrb	r2, [r4, #12]
 80062a8:	b122      	cbz	r2, 80062b4 <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY;
 80062aa:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
 80062ae:	bf18      	it	ne
 80062b0:	2001      	movne	r0, #1
}
 80062b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80062b4:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	2701      	movs	r7, #1
 80062bc:	4299      	cmp	r1, r3
 80062be:	f080 8165 	bcs.w	800658c <USBH_MSC_Process+0x2f0>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80062c2:	2534      	movs	r5, #52	; 0x34
 80062c4:	fb05 4301 	mla	r3, r5, r1, r4
 80062c8:	f883 7091 	strb.w	r7, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80062cc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d81c      	bhi.n	800630e <USBH_MSC_Process+0x72>
 80062d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80062d8:	001b0009 	.word	0x001b0009
 80062dc:	00b8005e 	.word	0x00b8005e
 80062e0:	00fa0025 	.word	0x00fa0025
 80062e4:	001b001b 	.word	0x001b001b
 80062e8:	0156      	.short	0x0156
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 80062ea:	48b1      	ldr	r0, [pc, #708]	; (80065b0 <USBH_MSC_Process+0x314>)
 80062ec:	f010 facc 	bl	8016888 <iprintf>
 80062f0:	200a      	movs	r0, #10
 80062f2:	f010 fae1 	bl	80168b8 <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80062f6:	2234      	movs	r2, #52	; 0x34
 80062f8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80062fc:	fb02 4303 	mla	r3, r2, r3, r4
 8006300:	2204      	movs	r2, #4
 8006302:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8006306:	f8d6 33c0 	ldr.w	r3, [r6, #960]	; 0x3c0
 800630a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800630e:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006310:	2200      	movs	r2, #0
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006312:	f8c6 13d8 	str.w	r1, [r6, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006316:	f8d6 03d0 	ldr.w	r0, [r6, #976]	; 0x3d0
 800631a:	f003 fc1f 	bl	8009b5c <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY;
 800631e:	2001      	movs	r0, #1
 8006320:	e7c7      	b.n	80062b2 <USBH_MSC_Process+0x16>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006322:	fb05 4201 	mla	r2, r5, r1, r4
 8006326:	b2c9      	uxtb	r1, r1
 8006328:	329f      	adds	r2, #159	; 0x9f
 800632a:	f000 fd03 	bl	8006d34 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 800632e:	bb40      	cbnz	r0, 8006382 <USBH_MSC_Process+0xe6>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 8006330:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8006334:	489f      	ldr	r0, [pc, #636]	; (80065b4 <USBH_MSC_Process+0x318>)
 8006336:	fb05 4101 	mla	r1, r5, r1, r4
 800633a:	31a2      	adds	r1, #162	; 0xa2
 800633c:	f010 faa4 	bl	8016888 <iprintf>
 8006340:	200a      	movs	r0, #10
 8006342:	f010 fab9 	bl	80168b8 <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8006346:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800634a:	489b      	ldr	r0, [pc, #620]	; (80065b8 <USBH_MSC_Process+0x31c>)
 800634c:	fb05 4101 	mla	r1, r5, r1, r4
 8006350:	31ab      	adds	r1, #171	; 0xab
 8006352:	f010 fa99 	bl	8016888 <iprintf>
 8006356:	200a      	movs	r0, #10
 8006358:	f010 faae 	bl	80168b8 <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800635c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8006360:	4896      	ldr	r0, [pc, #600]	; (80065bc <USBH_MSC_Process+0x320>)
 8006362:	fb05 4101 	mla	r1, r5, r1, r4
 8006366:	31bc      	adds	r1, #188	; 0xbc
 8006368:	f010 fa8e 	bl	8016888 <iprintf>
 800636c:	200a      	movs	r0, #10
 800636e:	f010 faa3 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006372:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8006376:	fb05 4403 	mla	r4, r5, r3, r4
 800637a:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800637c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8006380:	e7c5      	b.n	800630e <USBH_MSC_Process+0x72>
            if (scsi_status == USBH_FAIL)
 8006382:	2802      	cmp	r0, #2
 8006384:	f040 80f6 	bne.w	8006574 <USBH_MSC_Process+0x2d8>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006388:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800638c:	fb05 4403 	mla	r4, r5, r3, r4
 8006390:	2305      	movs	r3, #5
 8006392:	e7f3      	b.n	800637c <USBH_MSC_Process+0xe0>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006394:	b2c9      	uxtb	r1, r1
 8006396:	f000 fc73 	bl	8006c80 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 800639a:	bb08      	cbnz	r0, 80063e0 <USBH_MSC_Process+0x144>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800639c:	2234      	movs	r2, #52	; 0x34
 800639e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80063a2:	fb02 4303 	mla	r3, r2, r3, r4
 80063a6:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80063aa:	b1b2      	cbz	r2, 80063da <USBH_MSC_Process+0x13e>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80063ac:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
 80063ae:	4884      	ldr	r0, [pc, #528]	; (80065c0 <USBH_MSC_Process+0x324>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80063b0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
 80063b4:	f010 fa68 	bl	8016888 <iprintf>
 80063b8:	200a      	movs	r0, #10
 80063ba:	f010 fa7d 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80063be:	2234      	movs	r2, #52	; 0x34
 80063c0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80063c4:	fb02 4403 	mla	r4, r2, r3, r4
 80063c8:	2303      	movs	r3, #3
 80063ca:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80063d4:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 80063d8:	e799      	b.n	800630e <USBH_MSC_Process+0x72>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80063da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 80063de:	e7ee      	b.n	80063be <USBH_MSC_Process+0x122>
            if (ready_status == USBH_FAIL)
 80063e0:	2802      	cmp	r0, #2
 80063e2:	d122      	bne.n	800642a <USBH_MSC_Process+0x18e>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80063e4:	2234      	movs	r2, #52	; 0x34
 80063e6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80063ea:	fb02 4303 	mla	r3, r2, r3, r4
 80063ee:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80063f2:	2a02      	cmp	r2, #2
 80063f4:	d015      	beq.n	8006422 <USBH_MSC_Process+0x186>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80063f6:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
 80063f8:	4872      	ldr	r0, [pc, #456]	; (80065c4 <USBH_MSC_Process+0x328>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80063fa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
 80063fe:	f010 fa43 	bl	8016888 <iprintf>
 8006402:	200a      	movs	r0, #10
 8006404:	f010 fa58 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006408:	2234      	movs	r2, #52	; 0x34
 800640a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800640e:	fb02 4403 	mla	r4, r2, r3, r4
 8006412:	2305      	movs	r3, #5
 8006414:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006418:	2301      	movs	r3, #1
 800641a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800641e:	2302      	movs	r3, #2
 8006420:	e7d8      	b.n	80063d4 <USBH_MSC_Process+0x138>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006422:	2200      	movs	r2, #0
 8006424:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8006428:	e7ee      	b.n	8006408 <USBH_MSC_Process+0x16c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800642a:	2804      	cmp	r0, #4
 800642c:	f47f af6f 	bne.w	800630e <USBH_MSC_Process+0x72>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006430:	2234      	movs	r2, #52	; 0x34
 8006432:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8006436:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800643a:	2301      	movs	r3, #1
 800643c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006440:	2302      	movs	r3, #2
 8006442:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 8006446:	e762      	b.n	800630e <USBH_MSC_Process+0x72>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006448:	fb05 4201 	mla	r2, r5, r1, r4
 800644c:	b2c9      	uxtb	r1, r1
 800644e:	3294      	adds	r2, #148	; 0x94
 8006450:	f000 fc3c 	bl	8006ccc <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8006454:	2800      	cmp	r0, #0
 8006456:	d194      	bne.n	8006382 <USBH_MSC_Process+0xe6>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8006458:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800645c:	fb05 4303 	mla	r3, r5, r3, r4
 8006460:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 8006464:	2a01      	cmp	r2, #1
 8006466:	d122      	bne.n	80064ae <USBH_MSC_Process+0x212>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 8006468:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
 800646c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006470:	4855      	ldr	r0, [pc, #340]	; (80065c8 <USBH_MSC_Process+0x32c>)
 8006472:	4351      	muls	r1, r2
 8006474:	f010 fa08 	bl	8016888 <iprintf>
 8006478:	200a      	movs	r0, #10
 800647a:	f010 fa1d 	bl	80168b8 <putchar>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800647e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8006482:	4852      	ldr	r0, [pc, #328]	; (80065cc <USBH_MSC_Process+0x330>)
 8006484:	fb05 4303 	mla	r3, r5, r3, r4
 8006488:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800648c:	f010 f9fc 	bl	8016888 <iprintf>
 8006490:	200a      	movs	r0, #10
 8006492:	f010 fa11 	bl	80168b8 <putchar>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8006496:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800649a:	484d      	ldr	r0, [pc, #308]	; (80065d0 <USBH_MSC_Process+0x334>)
 800649c:	fb05 4503 	mla	r5, r5, r3, r4
 80064a0:	f8b5 1098 	ldrh.w	r1, [r5, #152]	; 0x98
 80064a4:	f010 f9f0 	bl	8016888 <iprintf>
 80064a8:	200a      	movs	r0, #10
 80064aa:	f010 fa05 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064ae:	2234      	movs	r2, #52	; 0x34
 80064b0:	2101      	movs	r1, #1
 80064b2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80064b6:	fb02 4203 	mla	r2, r2, r3, r4
 80064ba:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80064be:	2100      	movs	r1, #0
              MSC_Handle->current_lun++;
 80064c0:	3301      	adds	r3, #1
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80064c2:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
              MSC_Handle->current_lun++;
 80064c6:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
 80064ca:	e720      	b.n	800630e <USBH_MSC_Process+0x72>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80064cc:	fb05 4201 	mla	r2, r5, r1, r4
 80064d0:	b2c9      	uxtb	r1, r1
 80064d2:	329c      	adds	r2, #156	; 0x9c
 80064d4:	f000 fc9a 	bl	8006e0c <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 80064d8:	2800      	cmp	r0, #0
 80064da:	d13d      	bne.n	8006558 <USBH_MSC_Process+0x2bc>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80064dc:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80064e0:	fb05 4503 	mla	r5, r5, r3, r4
 80064e4:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 80064e8:	f001 02fb 	and.w	r2, r1, #251	; 0xfb
 80064ec:	2a02      	cmp	r2, #2
 80064ee:	d10b      	bne.n	8006508 <USBH_MSC_Process+0x26c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80064f0:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 80064f4:	f8d6 33c0 	ldr.w	r3, [r6, #960]	; 0x3c0
 80064f8:	1a1b      	subs	r3, r3, r0
 80064fa:	f242 700f 	movw	r0, #9999	; 0x270f
 80064fe:	4283      	cmp	r3, r0
 8006500:	d802      	bhi.n	8006508 <USBH_MSC_Process+0x26c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006502:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                  break;
 8006506:	e702      	b.n	800630e <USBH_MSC_Process+0x72>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8006508:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800650a:	4832      	ldr	r0, [pc, #200]	; (80065d4 <USBH_MSC_Process+0x338>)
 800650c:	f010 f9bc 	bl	8016888 <iprintf>
 8006510:	200a      	movs	r0, #10
 8006512:	f010 f9d1 	bl	80168b8 <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8006516:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800651a:	482f      	ldr	r0, [pc, #188]	; (80065d8 <USBH_MSC_Process+0x33c>)
 800651c:	fb05 4303 	mla	r3, r5, r3, r4
 8006520:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
 8006524:	f010 f9b0 	bl	8016888 <iprintf>
 8006528:	200a      	movs	r0, #10
 800652a:	f010 f9c5 	bl	80168b8 <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800652e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8006532:	482a      	ldr	r0, [pc, #168]	; (80065dc <USBH_MSC_Process+0x340>)
 8006534:	fb05 4303 	mla	r3, r5, r3, r4
 8006538:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
 800653c:	f010 f9a4 	bl	8016888 <iprintf>
 8006540:	200a      	movs	r0, #10
 8006542:	f010 f9b9 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006546:	2201      	movs	r2, #1
 8006548:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800654c:	fb05 4503 	mla	r5, r5, r3, r4
              MSC_Handle->current_lun++;
 8006550:	4413      	add	r3, r2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006552:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
 8006556:	e7b6      	b.n	80064c6 <USBH_MSC_Process+0x22a>
            if (scsi_status == USBH_FAIL)
 8006558:	2802      	cmp	r0, #2
 800655a:	d10b      	bne.n	8006574 <USBH_MSC_Process+0x2d8>
              USBH_UsrLog("MSC Device NOT ready");
 800655c:	4819      	ldr	r0, [pc, #100]	; (80065c4 <USBH_MSC_Process+0x328>)
 800655e:	f010 f993 	bl	8016888 <iprintf>
 8006562:	200a      	movs	r0, #10
 8006564:	f010 f9a8 	bl	80168b8 <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006568:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800656c:	fb05 4403 	mla	r4, r5, r3, r4
 8006570:	2308      	movs	r3, #8
 8006572:	e703      	b.n	800637c <USBH_MSC_Process+0xe0>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006574:	2804      	cmp	r0, #4
 8006576:	f47f aeca 	bne.w	800630e <USBH_MSC_Process+0x72>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800657a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800657e:	fb05 4403 	mla	r4, r5, r3, r4
 8006582:	e75a      	b.n	800643a <USBH_MSC_Process+0x19e>
            MSC_Handle->current_lun++;
 8006584:	3101      	adds	r1, #1
 8006586:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 800658a:	e6c0      	b.n	800630e <USBH_MSC_Process+0x72>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800658c:	2104      	movs	r1, #4
        MSC_Handle->current_lun = 0U;
 800658e:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006592:	7327      	strb	r7, [r4, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006594:	f8c0 13d8 	str.w	r1, [r0, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006598:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800659c:	f003 fade 	bl	8009b5c <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065a0:	4630      	mov	r0, r6
 80065a2:	f8d6 33cc 	ldr.w	r3, [r6, #972]	; 0x3cc
 80065a6:	2102      	movs	r1, #2
 80065a8:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 80065aa:	4638      	mov	r0, r7
 80065ac:	e681      	b.n	80062b2 <USBH_MSC_Process+0x16>
 80065ae:	bf00      	nop
 80065b0:	08018537 	.word	0x08018537
 80065b4:	08018541 	.word	0x08018541
 80065b8:	08018556 	.word	0x08018556
 80065bc:	0801856b 	.word	0x0801856b
 80065c0:	08018580 	.word	0x08018580
 80065c4:	08018591 	.word	0x08018591
 80065c8:	080185a6 	.word	0x080185a6
 80065cc:	080185c6 	.word	0x080185c6
 80065d0:	080185d9 	.word	0x080185d9
 80065d4:	080185ec 	.word	0x080185ec
 80065d8:	080185fc 	.word	0x080185fc
 80065dc:	08018617 	.word	0x08018617

080065e0 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80065e4:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e6:	69dc      	ldr	r4, [r3, #28]
{
 80065e8:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 80065ea:	7ba3      	ldrb	r3, [r4, #14]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d002      	beq.n	80065f6 <USBH_MSC_ClassRequest+0x16>
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d02a      	beq.n	800664a <USBH_MSC_ClassRequest+0x6a>
 80065f4:	bb7b      	cbnz	r3, 8006656 <USBH_MSC_ClassRequest+0x76>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 80065f6:	4621      	mov	r1, r4
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 fa17 	bl	8006a2c <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 80065fe:	2803      	cmp	r0, #3
 8006600:	d118      	bne.n	8006634 <USBH_MSC_ClassRequest+0x54>
        MSC_Handle->max_lun = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	6023      	str	r3, [r4, #0]
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 8006606:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);
 8006608:	4814      	ldr	r0, [pc, #80]	; (800665c <USBH_MSC_ClassRequest+0x7c>)
        MSC_Handle->max_lun = ((MSC_Handle->max_lun & 0xFFU) > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : ((MSC_Handle->max_lun & 0xFFU) + 1U);
 800660a:	2902      	cmp	r1, #2
 800660c:	bf8c      	ite	hi
 800660e:	2102      	movhi	r1, #2
 8006610:	3101      	addls	r1, #1
 8006612:	6021      	str	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %lu", MSC_Handle->max_lun);
 8006614:	f010 f938 	bl	8016888 <iprintf>
 8006618:	200a      	movs	r0, #10
 800661a:	f010 f94d 	bl	80168b8 <putchar>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800661e:	2300      	movs	r3, #0
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006620:	2034      	movs	r0, #52	; 0x34
 8006622:	2502      	movs	r5, #2
          MSC_Handle->unit[i].state_changed = 0U;
 8006624:	461e      	mov	r6, r3
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	429a      	cmp	r2, r3
 800662e:	d804      	bhi.n	800663a <USBH_MSC_ClassRequest+0x5a>
 8006630:	2000      	movs	r0, #0
 8006632:	e001      	b.n	8006638 <USBH_MSC_ClassRequest+0x58>
      if (status == USBH_OK)
 8006634:	2800      	cmp	r0, #0
 8006636:	d0e6      	beq.n	8006606 <USBH_MSC_ClassRequest+0x26>
}
 8006638:	bd70      	pop	{r4, r5, r6, pc}
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800663a:	fb00 4303 	mla	r3, r0, r3, r4
 800663e:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8006642:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 8006646:	460b      	mov	r3, r1
 8006648:	e7ee      	b.n	8006628 <USBH_MSC_ClassRequest+0x48>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800664a:	2100      	movs	r1, #0
 800664c:	f001 fa71 	bl	8007b32 <USBH_ClrFeature>
 8006650:	b908      	cbnz	r0, 8006656 <USBH_MSC_ClassRequest+0x76>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006652:	7be3      	ldrb	r3, [r4, #15]
 8006654:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006656:	2001      	movs	r0, #1
 8006658:	e7ee      	b.n	8006638 <USBH_MSC_ClassRequest+0x58>
 800665a:	bf00      	nop
 800665c:	080184c3 	.word	0x080184c3

08006660 <USBH_MSC_InterfaceDeInit>:
{
 8006660:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006662:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006666:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006668:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 800666a:	7969      	ldrb	r1, [r5, #5]
 800666c:	b139      	cbz	r1, 800667e <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800666e:	f001 fadb 	bl	8007c28 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006672:	7969      	ldrb	r1, [r5, #5]
 8006674:	4620      	mov	r0, r4
 8006676:	f001 faf3 	bl	8007c60 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800667a:	2300      	movs	r3, #0
 800667c:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 800667e:	7929      	ldrb	r1, [r5, #4]
 8006680:	b141      	cbz	r1, 8006694 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006682:	4620      	mov	r0, r4
 8006684:	f001 fad0 	bl	8007c28 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006688:	7929      	ldrb	r1, [r5, #4]
 800668a:	4620      	mov	r0, r4
 800668c:	f001 fae8 	bl	8007c60 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006690:	2300      	movs	r3, #0
 8006692:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
 8006694:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8006698:	69d8      	ldr	r0, [r3, #28]
 800669a:	b128      	cbz	r0, 80066a8 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 800669c:	f010 f824 	bl	80166e8 <free>
    phost->pActiveClass->pData = 0U;
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80066a6:	61da      	str	r2, [r3, #28]
}
 80066a8:	2000      	movs	r0, #0
 80066aa:	bd38      	pop	{r3, r4, r5, pc}

080066ac <USBH_MSC_InterfaceInit>:
{
 80066ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80066b0:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 80066b4:	2350      	movs	r3, #80	; 0x50
 80066b6:	2206      	movs	r2, #6
 80066b8:	7909      	ldrb	r1, [r1, #4]
{
 80066ba:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80066bc:	f000 fd4a 	bl	8007154 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80066c0:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80066c2:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80066c4:	d90d      	bls.n	80066e2 <USBH_MSC_InterfaceInit+0x36>
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 80066c6:	4841      	ldr	r0, [pc, #260]	; (80067cc <USBH_MSC_InterfaceInit+0x120>)
 80066c8:	f010 f8de 	bl	8016888 <iprintf>
 80066cc:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80066d0:	483f      	ldr	r0, [pc, #252]	; (80067d0 <USBH_MSC_InterfaceInit+0x124>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	f010 f8d8 	bl	8016888 <iprintf>
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 80066d8:	200a      	movs	r0, #10
 80066da:	f010 f8ed 	bl	80168b8 <putchar>
    return USBH_FAIL;
 80066de:	2702      	movs	r7, #2
 80066e0:	e070      	b.n	80067c4 <USBH_MSC_InterfaceInit+0x118>
  status = USBH_SelectInterface(phost, interface);
 80066e2:	4601      	mov	r1, r0
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 fcf1 	bl	80070cc <USBH_SelectInterface>
  if (status != USBH_OK)
 80066ea:	4607      	mov	r7, r0
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d1f6      	bne.n	80066de <USBH_MSC_InterfaceInit+0x32>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80066f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066f4:	f8d5 8378 	ldr.w	r8, [r5, #888]	; 0x378
 80066f8:	f00f ffee 	bl	80166d8 <malloc>
 80066fc:	4604      	mov	r4, r0
 80066fe:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8006702:	b930      	cbnz	r0, 8006712 <USBH_MSC_InterfaceInit+0x66>
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 8006704:	4831      	ldr	r0, [pc, #196]	; (80067cc <USBH_MSC_InterfaceInit+0x120>)
 8006706:	f010 f8bf 	bl	8016888 <iprintf>
 800670a:	4832      	ldr	r0, [pc, #200]	; (80067d4 <USBH_MSC_InterfaceInit+0x128>)
 800670c:	f010 f8bc 	bl	8016888 <iprintf>
 8006710:	e7e2      	b.n	80066d8 <USBH_MSC_InterfaceInit+0x2c>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006716:	4639      	mov	r1, r7
 8006718:	f010 f808 	bl	801672c <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800671c:	231a      	movs	r3, #26
 800671e:	fb03 5106 	mla	r1, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006722:	fb03 5606 	mla	r6, r3, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006726:	f891 234c 	ldrb.w	r2, [r1, #844]	; 0x34c
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800672a:	f896 3354 	ldrb.w	r3, [r6, #852]	; 0x354
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800672e:	0610      	lsls	r0, r2, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006730:	bf54      	ite	pl
 8006732:	71a2      	strbpl	r2, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006734:	71e2      	strbmi	r2, [r4, #7]
 8006736:	f8b6 2356 	ldrh.w	r2, [r6, #854]	; 0x356
  MSC_Handle->state = MSC_INIT;
 800673a:	f04f 0600 	mov.w	r6, #0
 800673e:	f8b1 134e 	ldrh.w	r1, [r1, #846]	; 0x34e
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006742:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006744:	bf4c      	ite	mi
 8006746:	8161      	strhmi	r1, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006748:	8121      	strhpl	r1, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800674a:	0619      	lsls	r1, r3, #24
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800674c:	bf58      	it	pl
 800674e:	71a3      	strbpl	r3, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006750:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006752:	bf46      	itte	mi
 8006754:	71e3      	strbmi	r3, [r4, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006756:	8162      	strhmi	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006758:	8122      	strhpl	r2, [r4, #8]
  MSC_Handle->state = MSC_INIT;
 800675a:	7326      	strb	r6, [r4, #12]
  MSC_Handle->error = MSC_OK;
 800675c:	7366      	strb	r6, [r4, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800675e:	73a6      	strb	r6, [r4, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006760:	f001 fa67 	bl	8007c32 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006764:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006766:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006768:	4628      	mov	r0, r5
 800676a:	f001 fa62 	bl	8007c32 <USBH_AllocPipe>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800676e:	f04f 0802 	mov.w	r8, #2
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006772:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f963 	bl	8006a40 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800677a:	8920      	ldrh	r0, [r4, #8]
 800677c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8006780:	9002      	str	r0, [sp, #8]
 8006782:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006786:	79a2      	ldrb	r2, [r4, #6]
 8006788:	7961      	ldrb	r1, [r4, #5]
 800678a:	9000      	str	r0, [sp, #0]
 800678c:	f8cd 8004 	str.w	r8, [sp, #4]
 8006790:	4628      	mov	r0, r5
 8006792:	f001 fa3a 	bl	8007c0a <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006796:	8960      	ldrh	r0, [r4, #10]
 8006798:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800679c:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80067a0:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80067a4:	79e2      	ldrb	r2, [r4, #7]
 80067a6:	7921      	ldrb	r1, [r4, #4]
 80067a8:	9000      	str	r0, [sp, #0]
 80067aa:	4628      	mov	r0, r5
 80067ac:	f001 fa2d 	bl	8007c0a <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80067b0:	4632      	mov	r2, r6
 80067b2:	7921      	ldrb	r1, [r4, #4]
 80067b4:	4628      	mov	r0, r5
 80067b6:	f00f fdc8 	bl	801634a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80067ba:	4632      	mov	r2, r6
 80067bc:	7961      	ldrb	r1, [r4, #5]
 80067be:	4628      	mov	r0, r5
 80067c0:	f00f fdc3 	bl	801634a <USBH_LL_SetToggle>
}
 80067c4:	4638      	mov	r0, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	080184e0 	.word	0x080184e0
 80067d0:	080184e9 	.word	0x080184e9
 80067d4:	08018511 	.word	0x08018511

080067d8 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d8:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80067dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067de:	69da      	ldr	r2, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80067e0:	2334      	movs	r3, #52	; 0x34
 80067e2:	434b      	muls	r3, r1
 80067e4:	18d5      	adds	r5, r2, r3
 80067e6:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
{
 80067ea:	4606      	mov	r6, r0
  switch (MSC_Handle->unit[lun].state)
 80067ec:	2c06      	cmp	r4, #6
 80067ee:	d028      	beq.n	8006842 <USBH_MSC_RdWrProcess+0x6a>
 80067f0:	2c07      	cmp	r4, #7
 80067f2:	d03b      	beq.n	800686c <USBH_MSC_RdWrProcess+0x94>
 80067f4:	2c05      	cmp	r4, #5
 80067f6:	d158      	bne.n	80068aa <USBH_MSC_RdWrProcess+0xd2>
#endif
#endif
      break;

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80067f8:	339c      	adds	r3, #156	; 0x9c
 80067fa:	441a      	add	r2, r3
 80067fc:	f000 fb06 	bl	8006e0c <USBH_MSC_SCSI_RequestSense>

      if (scsi_status == USBH_OK)
 8006800:	2800      	cmp	r0, #0
 8006802:	d147      	bne.n	8006894 <USBH_MSC_RdWrProcess+0xbc>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 8006804:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 8006808:	4829      	ldr	r0, [pc, #164]	; (80068b0 <USBH_MSC_RdWrProcess+0xd8>)
 800680a:	f010 f83d 	bl	8016888 <iprintf>
 800680e:	200a      	movs	r0, #10
 8006810:	f010 f852 	bl	80168b8 <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 8006814:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
 8006818:	4826      	ldr	r0, [pc, #152]	; (80068b4 <USBH_MSC_RdWrProcess+0xdc>)
 800681a:	f010 f835 	bl	8016888 <iprintf>
 800681e:	200a      	movs	r0, #10
 8006820:	f010 f84a 	bl	80168b8 <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 8006824:	f895 109e 	ldrb.w	r1, [r5, #158]	; 0x9e
 8006828:	4823      	ldr	r0, [pc, #140]	; (80068b8 <USBH_MSC_RdWrProcess+0xe0>)
 800682a:	f010 f82d 	bl	8016888 <iprintf>
 800682e:	200a      	movs	r0, #10
 8006830:	f010 f842 	bl	80168b8 <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006834:	2402      	movs	r4, #2
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006836:	2301      	movs	r3, #1
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006838:	f885 4091 	strb.w	r4, [r5, #145]	; 0x91
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800683c:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8006840:	e009      	b.n	8006856 <USBH_MSC_RdWrProcess+0x7e>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	f000 fb6d 	bl	8006f26 <USBH_MSC_SCSI_Read>
      if (scsi_status == USBH_OK)
 800684c:	4604      	mov	r4, r0
 800684e:	b998      	cbnz	r0, 8006878 <USBH_MSC_RdWrProcess+0xa0>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006850:	2301      	movs	r3, #1
 8006852:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          error = USBH_FAIL;
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006856:	2104      	movs	r1, #4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006858:	2200      	movs	r2, #0
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800685a:	f8c6 13d8 	str.w	r1, [r6, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800685e:	f8d6 03d0 	ldr.w	r0, [r6, #976]	; 0x3d0
 8006862:	f003 f97b 	bl	8009b5c <osMessagePut>
    default:
      break;

  }
  return error;
}
 8006866:	4620      	mov	r0, r4
 8006868:	b002      	add	sp, #8
 800686a:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800686c:	2300      	movs	r3, #0
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	f000 fb14 	bl	8006e9e <USBH_MSC_SCSI_Write>
 8006876:	e7e9      	b.n	800684c <USBH_MSC_RdWrProcess+0x74>
      else if (scsi_status == USBH_FAIL)
 8006878:	2802      	cmp	r0, #2
 800687a:	d104      	bne.n	8006886 <USBH_MSC_RdWrProcess+0xae>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800687c:	2305      	movs	r3, #5
 800687e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006882:	2401      	movs	r4, #1
 8006884:	e7e7      	b.n	8006856 <USBH_MSC_RdWrProcess+0x7e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006886:	2804      	cmp	r0, #4
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006888:	d1fb      	bne.n	8006882 <USBH_MSC_RdWrProcess+0xaa>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800688a:	2308      	movs	r3, #8
          error = USBH_FAIL;
 800688c:	2402      	movs	r4, #2
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800688e:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 8006892:	e7e0      	b.n	8006856 <USBH_MSC_RdWrProcess+0x7e>
      if (scsi_status == USBH_FAIL)
 8006894:	2802      	cmp	r0, #2
 8006896:	d106      	bne.n	80068a6 <USBH_MSC_RdWrProcess+0xce>
        USBH_UsrLog("MSC Device NOT ready");
 8006898:	4808      	ldr	r0, [pc, #32]	; (80068bc <USBH_MSC_RdWrProcess+0xe4>)
 800689a:	f00f fff5 	bl	8016888 <iprintf>
 800689e:	200a      	movs	r0, #10
 80068a0:	f010 f80a 	bl	80168b8 <putchar>
 80068a4:	e7ed      	b.n	8006882 <USBH_MSC_RdWrProcess+0xaa>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068a6:	2804      	cmp	r0, #4
 80068a8:	e7ee      	b.n	8006888 <USBH_MSC_RdWrProcess+0xb0>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80068aa:	2401      	movs	r4, #1
 80068ac:	e7db      	b.n	8006866 <USBH_MSC_RdWrProcess+0x8e>
 80068ae:	bf00      	nop
 80068b0:	080185ec 	.word	0x080185ec
 80068b4:	080185fc 	.word	0x080185fc
 80068b8:	08018617 	.word	0x08018617
 80068bc:	08018591 	.word	0x08018591

080068c0 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80068c0:	7803      	ldrb	r3, [r0, #0]
 80068c2:	2b0b      	cmp	r3, #11
 80068c4:	bf01      	itttt	eq
 80068c6:	2234      	moveq	r2, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068c8:	f8d0 3378 	ldreq.w	r3, [r0, #888]	; 0x378
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80068cc:	69db      	ldreq	r3, [r3, #28]
 80068ce:	fb02 3101 	mlaeq	r1, r2, r1, r3
 80068d2:	bf03      	ittte	eq
 80068d4:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
 80068d8:	fab0 f080 	clzeq	r0, r0
 80068dc:	0940      	lsreq	r0, r0, #5
  }
  else
  {
    res = 0U;
 80068de:	2000      	movne	r0, #0
  }

  return res;
}
 80068e0:	4770      	bx	lr

080068e2 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 80068e2:	7803      	ldrb	r3, [r0, #0]
 80068e4:	2b0b      	cmp	r3, #11
 80068e6:	d111      	bne.n	800690c <USBH_MSC_GetLUNInfo+0x2a>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80068e8:	2334      	movs	r3, #52	; 0x34
 80068ea:	4359      	muls	r1, r3
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ec:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80068f0:	f101 0390 	add.w	r3, r1, #144	; 0x90
 80068f4:	69c1      	ldr	r1, [r0, #28]
 80068f6:	4419      	add	r1, r3
 80068f8:	f101 0334 	add.w	r3, r1, #52	; 0x34
 80068fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006900:	4299      	cmp	r1, r3
 8006902:	f842 0b04 	str.w	r0, [r2], #4
 8006906:	d1f9      	bne.n	80068fc <USBH_MSC_GetLUNInfo+0x1a>
    return USBH_OK;
 8006908:	2000      	movs	r0, #0
 800690a:	4770      	bx	lr
  }
  else
  {
    return USBH_FAIL;
 800690c:	2002      	movs	r0, #2
  }
}
 800690e:	4770      	bx	lr

08006910 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8006914:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8006918:	4604      	mov	r4, r0
 800691a:	460f      	mov	r7, r1
 800691c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 8006920:	b3bd      	cbz	r5, 8006992 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 8006922:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8006924:	2d0b      	cmp	r5, #11
 8006926:	d134      	bne.n	8006992 <USBH_MSC_Read+0x82>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006928:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800692a:	f8d0 5378 	ldr.w	r5, [r0, #888]	; 0x378
 800692e:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006930:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 8006934:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 8006938:	f1bc 0f01 	cmp.w	ip, #1
 800693c:	d129      	bne.n	8006992 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 800693e:	f04f 0c06 	mov.w	ip, #6
 8006942:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006946:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800694a:	f242 7610 	movw	r6, #10000	; 0x2710
 800694e:	fb06 f608 	mul.w	r6, r6, r8
  MSC_Handle->rw_lun = lun;
 8006952:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006956:	f8cd 8000 	str.w	r8, [sp]
 800695a:	f000 fae4 	bl	8006f26 <USBH_MSC_SCSI_Read>
  timeout = phost->Timer;
 800695e:	f8d4 93c0 	ldr.w	r9, [r4, #960]	; 0x3c0
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006962:	4639      	mov	r1, r7
 8006964:	4620      	mov	r0, r4
 8006966:	f7ff ff37 	bl	80067d8 <USBH_MSC_RdWrProcess>
 800696a:	2801      	cmp	r0, #1
 800696c:	d005      	beq.n	800697a <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800696e:	2301      	movs	r3, #1

  return USBH_OK;
 8006970:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 8006972:	732b      	strb	r3, [r5, #12]
}
 8006974:	b003      	add	sp, #12
 8006976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800697a:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 800697e:	eba3 0309 	sub.w	r3, r3, r9
 8006982:	42b3      	cmp	r3, r6
 8006984:	d803      	bhi.n	800698e <USBH_MSC_Read+0x7e>
 8006986:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e9      	bne.n	8006962 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 800698e:	2301      	movs	r3, #1
 8006990:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8006992:	2002      	movs	r0, #2
 8006994:	e7ee      	b.n	8006974 <USBH_MSC_Read+0x64>

08006996 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006996:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800699a:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 800699e:	4604      	mov	r4, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 80069a6:	b3bd      	cbz	r5, 8006a18 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 80069a8:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80069aa:	2d0b      	cmp	r5, #11
 80069ac:	d134      	bne.n	8006a18 <USBH_MSC_Write+0x82>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80069ae:	2634      	movs	r6, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b0:	f8d0 5378 	ldr.w	r5, [r0, #888]	; 0x378
 80069b4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80069b6:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) ||
 80069ba:	f896 c090 	ldrb.w	ip, [r6, #144]	; 0x90
 80069be:	f1bc 0f01 	cmp.w	ip, #1
 80069c2:	d129      	bne.n	8006a18 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 80069c4:	f04f 0c07 	mov.w	ip, #7
 80069c8:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80069cc:	f886 c090 	strb.w	ip, [r6, #144]	; 0x90
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80069d0:	f242 7610 	movw	r6, #10000	; 0x2710
 80069d4:	fb06 f608 	mul.w	r6, r6, r8
  MSC_Handle->rw_lun = lun;
 80069d8:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80069dc:	f8cd 8000 	str.w	r8, [sp]
 80069e0:	f000 fa5d 	bl	8006e9e <USBH_MSC_SCSI_Write>
  timeout = phost->Timer;
 80069e4:	f8d4 93c0 	ldr.w	r9, [r4, #960]	; 0x3c0
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80069e8:	4639      	mov	r1, r7
 80069ea:	4620      	mov	r0, r4
 80069ec:	f7ff fef4 	bl	80067d8 <USBH_MSC_RdWrProcess>
 80069f0:	2801      	cmp	r0, #1
 80069f2:	d005      	beq.n	8006a00 <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80069f4:	2301      	movs	r3, #1
  return USBH_OK;
 80069f6:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 80069f8:	732b      	strb	r3, [r5, #12]
}
 80069fa:	b003      	add	sp, #12
 80069fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006a00:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 8006a04:	eba3 0309 	sub.w	r3, r3, r9
 8006a08:	42b3      	cmp	r3, r6
 8006a0a:	d803      	bhi.n	8006a14 <USBH_MSC_Write+0x7e>
 8006a0c:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e9      	bne.n	80069e8 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8006a18:	2002      	movs	r0, #2
 8006a1a:	e7ee      	b.n	80069fa <USBH_MSC_Write+0x64>

08006a1c <USBH_MSC_BOT_REQ_Reset>:

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
 8006a1c:	f64f 7121 	movw	r1, #65313	; 0xff21
 8006a20:	2200      	movs	r2, #0
 8006a22:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 8006a26:	4611      	mov	r1, r2
 8006a28:	f000 be5c 	b.w	80076e4 <USBH_CtlReq>

08006a2c <USBH_MSC_BOT_REQ_GetMaxLUN>:
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
 8006a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a30:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8006a34:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f000 be53 	b.w	80076e4 <USBH_CtlReq>
	...

08006a40 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a40:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006a44:	4905      	ldr	r1, [pc, #20]	; (8006a5c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a46:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006a48:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <USBH_MSC_BOT_Init+0x20>)
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 8006a4a:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006a4c:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006a56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 8006a5a:	4770      	bx	lr
 8006a5c:	43425355 	.word	0x43425355
 8006a60:	20304050 	.word	0x20304050

08006a64 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a64:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a6a:	69dc      	ldr	r4, [r3, #28]
{
 8006a6c:	4605      	mov	r5, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8006a6e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006a72:	3b01      	subs	r3, #1
 8006a74:	2b0a      	cmp	r3, #10
 8006a76:	d834      	bhi.n	8006ae2 <USBH_MSC_BOT_Process+0x7e>
 8006a78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006a7c:	001b000b 	.word	0x001b000b
 8006a80:	004e0044 	.word	0x004e0044
 8006a84:	0079006d 	.word	0x0079006d
 8006a88:	00aa00a2 	.word	0x00aa00a2
 8006a8c:	00de00d3 	.word	0x00de00d3
 8006a90:	00f7      	.short	0x00f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006a92:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006a94:	2601      	movs	r6, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006a96:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006a9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006a9e:	221f      	movs	r2, #31
 8006aa0:	7963      	ldrb	r3, [r4, #5]
 8006aa2:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8006aa6:	9600      	str	r6, [sp, #0]
 8006aa8:	f001 f888 	bl	8007bbc <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 8006aac:	4630      	mov	r0, r6
 8006aae:	b002      	add	sp, #8
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006ab2:	7961      	ldrb	r1, [r4, #5]
 8006ab4:	f00f fc38 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006ab8:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006aba:	4601      	mov	r1, r0
      if (URB_Status == USBH_URB_DONE)
 8006abc:	d115      	bne.n	8006aea <USBH_MSC_BOT_Process+0x86>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006abe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ac0:	b18b      	cbz	r3, 8006ae6 <USBH_MSC_BOT_Process+0x82>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006ac2:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8006ac6:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006ac8:	bfb4      	ite	lt
 8006aca:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006acc:	2305      	movge	r3, #5
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ace:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	f8c5 13d8 	str.w	r1, [r5, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8d5 03d0 	ldr.w	r0, [r5, #976]	; 0x3d0
 8006ade:	f003 f83d 	bl	8009b5c <osMessagePut>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006ae2:	2601      	movs	r6, #1
 8006ae4:	e7e2      	b.n	8006aac <USBH_MSC_BOT_Process+0x48>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ae6:	2307      	movs	r3, #7
 8006ae8:	e7f1      	b.n	8006ace <USBH_MSC_BOT_Process+0x6a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006aea:	2802      	cmp	r0, #2
 8006aec:	d164      	bne.n	8006bb8 <USBH_MSC_BOT_Process+0x154>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006aee:	2601      	movs	r6, #1
 8006af0:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006af4:	f8c5 13d8 	str.w	r1, [r5, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8d5 03d0 	ldr.w	r0, [r5, #976]	; 0x3d0
 8006afe:	f003 f82d 	bl	8009b5c <osMessagePut>
 8006b02:	e7d3      	b.n	8006aac <USBH_MSC_BOT_Process+0x48>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b04:	7923      	ldrb	r3, [r4, #4]
 8006b06:	8962      	ldrh	r2, [r4, #10]
 8006b08:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b0c:	f001 f86d 	bl	8007bea <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006b10:	2304      	movs	r3, #4
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006b12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006b16:	e7e4      	b.n	8006ae2 <USBH_MSC_BOT_Process+0x7e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006b18:	7921      	ldrb	r1, [r4, #4]
 8006b1a:	f00f fc05 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006b1e:	2801      	cmp	r0, #1
 8006b20:	d17a      	bne.n	8006c18 <USBH_MSC_BOT_Process+0x1b4>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006b22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b24:	8962      	ldrh	r2, [r4, #10]
 8006b26:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b28:	bf92      	itee	ls
 8006b2a:	2300      	movls	r3, #0
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006b2c:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006b2e:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b32:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006b36:	bf84      	itt	hi
 8006b38:	1889      	addhi	r1, r1, r2
 8006b3a:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b3e:	b133      	cbz	r3, 8006b4e <USBH_MSC_BOT_Process+0xea>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b40:	7923      	ldrb	r3, [r4, #4]
 8006b42:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b46:	4628      	mov	r0, r5
 8006b48:	f001 f84f 	bl	8007bea <USBH_BulkReceiveData>
 8006b4c:	e7c9      	b.n	8006ae2 <USBH_MSC_BOT_Process+0x7e>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b4e:	2207      	movs	r2, #7
 8006b50:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 8006b54:	e7bd      	b.n	8006ad2 <USBH_MSC_BOT_Process+0x6e>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006b56:	2601      	movs	r6, #1
 8006b58:	7963      	ldrb	r3, [r4, #5]
 8006b5a:	8922      	ldrh	r2, [r4, #8]
 8006b5c:	9600      	str	r6, [sp, #0]
 8006b5e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b62:	f001 f82b 	bl	8007bbc <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006b66:	2306      	movs	r3, #6
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006b6c:	e79e      	b.n	8006aac <USBH_MSC_BOT_Process+0x48>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006b6e:	7961      	ldrb	r1, [r4, #5]
 8006b70:	f00f fbda 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006b74:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006b76:	4601      	mov	r1, r0
      if (URB_Status == USBH_URB_DONE)
 8006b78:	d118      	bne.n	8006bac <USBH_MSC_BOT_Process+0x148>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b7c:	8922      	ldrh	r2, [r4, #8]
 8006b7e:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b80:	bf92      	itee	ls
 8006b82:	2300      	movls	r3, #0
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b84:	1a9b      	subhi	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b86:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b8a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b8e:	bf84      	itt	hi
 8006b90:	1889      	addhi	r1, r1, r2
 8006b92:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0a5      	beq.n	8006ae6 <USBH_MSC_BOT_Process+0x82>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	7963      	ldrb	r3, [r4, #5]
 8006b9e:	9100      	str	r1, [sp, #0]
 8006ba0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f001 f809 	bl	8007bbc <USBH_BulkSendData>
 8006baa:	e792      	b.n	8006ad2 <USBH_MSC_BOT_Process+0x6e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006bac:	2802      	cmp	r0, #2
 8006bae:	d103      	bne.n	8006bb8 <USBH_MSC_BOT_Process+0x154>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006bb0:	2305      	movs	r3, #5
 8006bb2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006bb6:	e78d      	b.n	8006ad4 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 8006bb8:	2905      	cmp	r1, #5
 8006bba:	d192      	bne.n	8006ae2 <USBH_MSC_BOT_Process+0x7e>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006bbc:	230a      	movs	r3, #10
 8006bbe:	e786      	b.n	8006ace <USBH_MSC_BOT_Process+0x6a>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006bc0:	7923      	ldrb	r3, [r4, #4]
 8006bc2:	220d      	movs	r2, #13
 8006bc4:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8006bc8:	f001 f80f 	bl	8007bea <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006bcc:	2308      	movs	r3, #8
 8006bce:	e7a0      	b.n	8006b12 <USBH_MSC_BOT_Process+0xae>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006bd0:	7921      	ldrb	r1, [r4, #4]
 8006bd2:	f00f fba9 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8006bd6:	2801      	cmp	r0, #1
 8006bd8:	d11e      	bne.n	8006c18 <USBH_MSC_BOT_Process+0x1b4>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bda:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006bde:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006be2:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006be6:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006be8:	4628      	mov	r0, r5
 8006bea:	7921      	ldrb	r1, [r4, #4]
 8006bec:	f00f fb58 	bl	80162a0 <USBH_LL_GetLastXferSize>
 8006bf0:	280d      	cmp	r0, #13
 8006bf2:	d10f      	bne.n	8006c14 <USBH_MSC_BOT_Process+0x1b0>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006bf4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006bf6:	4b21      	ldr	r3, [pc, #132]	; (8006c7c <USBH_MSC_BOT_Process+0x218>)
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d10b      	bne.n	8006c14 <USBH_MSC_BOT_Process+0x1b0>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006bfc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d107      	bne.n	8006c14 <USBH_MSC_BOT_Process+0x1b0>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006c04:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
          status = USBH_OK;
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2602      	movne	r6, #2
 8006c0e:	2600      	moveq	r6, #0
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006c10:	2102      	movs	r1, #2
 8006c12:	e76f      	b.n	8006af4 <USBH_MSC_BOT_Process+0x90>
          status = USBH_FAIL;
 8006c14:	2602      	movs	r6, #2
 8006c16:	e7fb      	b.n	8006c10 <USBH_MSC_BOT_Process+0x1ac>
      else if (URB_Status == USBH_URB_STALL)
 8006c18:	2805      	cmp	r0, #5
 8006c1a:	f47f af62 	bne.w	8006ae2 <USBH_MSC_BOT_Process+0x7e>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006c1e:	2309      	movs	r3, #9
 8006c20:	e755      	b.n	8006ace <USBH_MSC_BOT_Process+0x6a>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006c22:	79e1      	ldrb	r1, [r4, #7]
 8006c24:	f000 ff85 	bl	8007b32 <USBH_ClrFeature>
      if (error == USBH_OK)
 8006c28:	b908      	cbnz	r0, 8006c2e <USBH_MSC_BOT_Process+0x1ca>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c2a:	2307      	movs	r3, #7
 8006c2c:	e771      	b.n	8006b12 <USBH_MSC_BOT_Process+0xae>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006c2e:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 8006c30:	f47f af57 	bne.w	8006ae2 <USBH_MSC_BOT_Process+0x7e>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c34:	230b      	movs	r3, #11
 8006c36:	e76c      	b.n	8006b12 <USBH_MSC_BOT_Process+0xae>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006c38:	79a1      	ldrb	r1, [r4, #6]
 8006c3a:	f000 ff7a 	bl	8007b32 <USBH_ClrFeature>
      if (error == USBH_OK)
 8006c3e:	4606      	mov	r6, r0
 8006c40:	b988      	cbnz	r0, 8006c66 <USBH_MSC_BOT_Process+0x202>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006c42:	7961      	ldrb	r1, [r4, #5]
 8006c44:	4628      	mov	r0, r5
 8006c46:	f00f fb8f 	bl	8016368 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006c4a:	f1c0 0201 	rsb	r2, r0, #1
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	7961      	ldrb	r1, [r4, #5]
 8006c52:	4628      	mov	r0, r5
 8006c54:	f00f fb79 	bl	801634a <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006c58:	4632      	mov	r2, r6
 8006c5a:	7921      	ldrb	r1, [r4, #4]
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f00f fb74 	bl	801634a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006c62:	2309      	movs	r3, #9
 8006c64:	e755      	b.n	8006b12 <USBH_MSC_BOT_Process+0xae>
        if (error == USBH_UNRECOVERED_ERROR)
 8006c66:	2804      	cmp	r0, #4
 8006c68:	e7e2      	b.n	8006c30 <USBH_MSC_BOT_Process+0x1cc>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006c6a:	f7ff fed7 	bl	8006a1c <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8006c6e:	4606      	mov	r6, r0
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f47f af1b 	bne.w	8006aac <USBH_MSC_BOT_Process+0x48>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e776      	b.n	8006b68 <USBH_MSC_BOT_Process+0x104>
 8006c7a:	bf00      	nop
 8006c7c:	53425355 	.word	0x53425355

08006c80 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c80:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006c84:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c86:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8006c88:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006c8c:	2d01      	cmp	r5, #1
 8006c8e:	d003      	beq.n	8006c98 <USBH_MSC_SCSI_TestUnitReady+0x18>
 8006c90:	2d02      	cmp	r5, #2
 8006c92:	d017      	beq.n	8006cc4 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c94:	2002      	movs	r0, #2
 8006c96:	e014      	b.n	8006cc2 <USBH_MSC_SCSI_TestUnitReady+0x42>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006c98:	2600      	movs	r6, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c9a:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006c9c:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c9e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ca2:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	4631      	mov	r1, r6
 8006caa:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006cae:	f00f fd3d 	bl	801672c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cb2:	2302      	movs	r3, #2
      error = USBH_BUSY;
 8006cb4:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006cb6:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cba:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006cbe:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    default:
      break;
  }

  return error;
}
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8006cc8:	f7ff becc 	b.w	8006a64 <USBH_MSC_BOT_Process>

08006ccc <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ccc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006cd0:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cd2:	69dc      	ldr	r4, [r3, #28]
{
 8006cd4:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
 8006cd6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006cda:	2d01      	cmp	r5, #1
 8006cdc:	d003      	beq.n	8006ce6 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 8006cde:	2d02      	cmp	r5, #2
 8006ce0:	d01c      	beq.n	8006d1c <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e025      	b.n	8006d32 <USBH_MSC_SCSI_ReadCapacity+0x66>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cf0:	230a      	movs	r3, #10

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006cf2:	2210      	movs	r2, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cf4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006cfe:	f00f fd15 	bl	801672c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006d02:	2325      	movs	r3, #37	; 0x25
 8006d04:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d0e:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d12:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d16:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006d1a:	e7e2      	b.n	8006ce2 <USBH_MSC_SCSI_ReadCapacity+0x16>
      error = USBH_BUSY;
      break;

    case BOT_CMD_WAIT:

      error = USBH_MSC_BOT_Process(phost, lun);
 8006d1c:	f7ff fea2 	bl	8006a64 <USBH_MSC_BOT_Process>

      if (error == USBH_OK)
 8006d20:	b938      	cbnz	r0, 8006d32 <USBH_MSC_SCSI_ReadCapacity+0x66>
      {
        /*assign the capacity*/
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006d22:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	ba1b      	rev	r3, r3
 8006d2a:	6033      	str	r3, [r6, #0]
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);

        /*assign the page length*/
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006d2c:	88d3      	ldrh	r3, [r2, #6]
 8006d2e:	ba5b      	rev16	r3, r3
 8006d30:	80b3      	strh	r3, [r6, #4]
    default:
      break;
  }

  return error;
}
 8006d32:	bd70      	pop	{r4, r5, r6, pc}

08006d34 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d36:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006d3a:	460f      	mov	r7, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d3c:	69dc      	ldr	r4, [r3, #28]
{
 8006d3e:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
 8006d40:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006d44:	2d01      	cmp	r5, #1
 8006d46:	d003      	beq.n	8006d50 <USBH_MSC_SCSI_Inquiry+0x1c>
 8006d48:	2d02      	cmp	r5, #2
 8006d4a:	d025      	beq.n	8006d98 <USBH_MSC_SCSI_Inquiry+0x64>
  USBH_StatusTypeDef error = USBH_FAIL;
 8006d4c:	2502      	movs	r5, #2
 8006d4e:	e021      	b.n	8006d94 <USBH_MSC_SCSI_Inquiry+0x60>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d56:	230a      	movs	r3, #10
 8006d58:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c4 3069 	str.w	r3, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006d62:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006d66:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006d6a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;

      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d6e:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006d70:	2224      	movs	r2, #36	; 0x24
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006d72:	2112      	movs	r1, #18
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006d74:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d76:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d7a:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006d7e:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006d80:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006d84:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006d88:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d8c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8006d94:	4628      	mov	r0, r5
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d98:	f7ff fe64 	bl	8006a64 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d1f8      	bne.n	8006d94 <USBH_MSC_SCSI_Inquiry+0x60>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006da2:	4601      	mov	r1, r0
 8006da4:	2222      	movs	r2, #34	; 0x22
 8006da6:	4630      	mov	r0, r6
 8006da8:	f00f fcc0 	bl	801672c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006dac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006db8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006dc2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006dc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
          inquiry->RemovableMedia = 1U;
 8006dcc:	bfb6      	itet	lt
 8006dce:	2301      	movlt	r3, #1
          inquiry->RemovableMedia = 0U;
 8006dd0:	70b5      	strbge	r5, [r6, #2]
          inquiry->RemovableMedia = 1U;
 8006dd2:	70b3      	strblt	r3, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006dd4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006dd8:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8006ddc:	f8c6 3003 	str.w	r3, [r6, #3]
 8006de0:	6853      	ldr	r3, [r2, #4]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006de2:	f106 020c 	add.w	r2, r6, #12
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006de6:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006dea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006dee:	3310      	adds	r3, #16
 8006df0:	f103 0110 	add.w	r1, r3, #16
 8006df4:	f853 0b04 	ldr.w	r0, [r3], #4
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	f842 0b04 	str.w	r0, [r2], #4
 8006dfe:	d1f9      	bne.n	8006df4 <USBH_MSC_SCSI_Inquiry+0xc0>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006e00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f8c6 301d 	str.w	r3, [r6, #29]
 8006e0a:	e7c3      	b.n	8006d94 <USBH_MSC_SCSI_Inquiry+0x60>

08006e0c <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e0c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006e10:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e12:	69dc      	ldr	r4, [r3, #28]
{
 8006e14:	460e      	mov	r6, r1

  switch (MSC_Handle->hbot.cmd_state)
 8006e16:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
{
 8006e1a:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d003      	beq.n	8006e28 <USBH_MSC_SCSI_RequestSense+0x1c>
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d029      	beq.n	8006e78 <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e24:	2002      	movs	r0, #2
 8006e26:	e026      	b.n	8006e76 <USBH_MSC_SCSI_RequestSense+0x6a>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e2e:	220a      	movs	r2, #10
 8006e30:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e34:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006e36:	2003      	movs	r0, #3
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e38:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
 8006e3c:	f8c4 206d 	str.w	r2, [r4, #109]	; 0x6d
 8006e40:	f8a4 2071 	strh.w	r2, [r4, #113]	; 0x71
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006e44:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006e48:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006e4c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68

      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e50:	2202      	movs	r2, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006e52:	210e      	movs	r1, #14
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006e54:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
      error = USBH_BUSY;
 8006e58:	4618      	mov	r0, r3
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006e5a:	0176      	lsls	r6, r6, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e5c:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e60:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006e64:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006e66:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006e6a:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e6e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006e72:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e78:	f7ff fdf4 	bl	8006a64 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1fa      	bne.n	8006e76 <USBH_MSC_SCSI_RequestSense+0x6a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8006e80:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e84:	789b      	ldrb	r3, [r3, #2]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	702b      	strb	r3, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006e8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e90:	7b1b      	ldrb	r3, [r3, #12]
 8006e92:	706b      	strb	r3, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006e94:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e98:	7b5b      	ldrb	r3, [r3, #13]
 8006e9a:	70ab      	strb	r3, [r5, #2]
 8006e9c:	e7eb      	b.n	8006e76 <USBH_MSC_SCSI_RequestSense+0x6a>

08006e9e <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea4:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006ea8:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eaa:	69dc      	ldr	r4, [r3, #28]
{
 8006eac:	9f06      	ldr	r7, [sp, #24]

  switch (MSC_Handle->hbot.cmd_state)
 8006eae:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006eb2:	2d01      	cmp	r5, #1
 8006eb4:	d003      	beq.n	8006ebe <USBH_MSC_SCSI_Write+0x20>
 8006eb6:	2d02      	cmp	r5, #2
 8006eb8:	d031      	beq.n	8006f1e <USBH_MSC_SCSI_Write+0x80>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006eba:	2002      	movs	r0, #2
 8006ebc:	e02d      	b.n	8006f1a <USBH_MSC_SCSI_Write+0x7c>
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ebe:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ec0:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006ec2:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ec6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006eca:	437a      	muls	r2, r7
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ecc:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006ed0:	65e2      	str	r2, [r4, #92]	; 0x5c

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ed2:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	f00f fc28 	bl	801672c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8006edc:	232a      	movs	r3, #42	; 0x2a
 8006ede:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006ee2:	f3c6 6307 	ubfx	r3, r6, #24, #8
 8006ee6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006eea:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8006eee:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006ef2:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006ef6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006efa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8006efe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f02:	2302      	movs	r3, #2
      MSC_Handle->hbot.pbuf = pbuf;
      error = USBH_BUSY;
 8006f04:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006f06:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006f0a:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f12:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006f16:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8006f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f22:	f7ff bd9f 	b.w	8006a64 <USBH_MSC_BOT_Process>

08006f26 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f2c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8006f30:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f32:	69dc      	ldr	r4, [r3, #28]
{
 8006f34:	9f06      	ldr	r7, [sp, #24]

  switch (MSC_Handle->hbot.cmd_state)
 8006f36:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006f3a:	2d01      	cmp	r5, #1
 8006f3c:	d003      	beq.n	8006f46 <USBH_MSC_SCSI_Read+0x20>
 8006f3e:	2d02      	cmp	r5, #2
 8006f40:	d032      	beq.n	8006fa8 <USBH_MSC_SCSI_Read+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006f42:	2002      	movs	r0, #2
 8006f44:	e02e      	b.n	8006fa4 <USBH_MSC_SCSI_Read+0x7e>
  {
    case BOT_CMD_SEND:

      /*Prepare the CBW and relevent field*/
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f4c:	230a      	movs	r3, #10
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006f4e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f52:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006f56:	437a      	muls	r2, r7

      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f58:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8006f5a:	65e2      	str	r2, [r4, #92]	; 0x5c
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f5c:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006f60:	2210      	movs	r2, #16
 8006f62:	f00f fbe3 	bl	801672c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8006f66:	2328      	movs	r3, #40	; 0x28
 8006f68:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

      /*logical block address*/
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8006f6c:	f3c6 6307 	ubfx	r3, r6, #24, #8
 8006f70:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8006f74:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8006f78:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8006f7c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006f80:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);


      /*Transfer length */
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8006f84:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8006f88:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;


      MSC_Handle->hbot.state = BOT_SEND_CBW;
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f8c:	2302      	movs	r3, #2
      MSC_Handle->hbot.pbuf = pbuf;
      error = USBH_BUSY;
 8006f8e:	4628      	mov	r0, r5
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8006f90:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8006f94:	f884 706b 	strb.w	r7, [r4, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f98:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f9c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8006fa0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    default:
      break;
  }

  return error;
}
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8006fac:	f7ff bd5a 	b.w	8006a64 <USBH_MSC_BOT_Process>

08006fb0 <DeInitStateMachine>:
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8006fb6:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
 8006fba:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d1fb      	bne.n	8006fba <DeInitStateMachine+0xa>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8006fc8:	f500 7147 	add.w	r1, r0, #796	; 0x31c
 8006fcc:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fd0:	4291      	cmp	r1, r2
 8006fd2:	d1fb      	bne.n	8006fcc <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8006fd4:	2201      	movs	r2, #1
  phost->gState = HOST_IDLE;
 8006fd6:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8006fd8:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8006fda:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8006fdc:	f8c0 33c0 	str.w	r3, [r0, #960]	; 0x3c0

  phost->Control.state = CTRL_SETUP;
 8006fe0:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;
 8006fe2:	7643      	strb	r3, [r0, #25]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fe4:	2240      	movs	r2, #64	; 0x40

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006fea:	7182      	strb	r2, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fec:	f8a0 331c 	strh.w	r3, [r0, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;

  return USBH_OK;
}
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4770      	bx	lr

08006ff4 <USBH_Init>:
{
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	b08c      	sub	sp, #48	; 0x30
  if (phost == NULL)
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	b958      	cbnz	r0, 8007016 <USBH_Init+0x22>
    USBH_ErrLog("Invalid Host handle");
 8006ffe:	481f      	ldr	r0, [pc, #124]	; (800707c <USBH_Init+0x88>)
 8007000:	f00f fc42 	bl	8016888 <iprintf>
 8007004:	481e      	ldr	r0, [pc, #120]	; (8007080 <USBH_Init+0x8c>)
 8007006:	f00f fc3f 	bl	8016888 <iprintf>
 800700a:	200a      	movs	r0, #10
 800700c:	f00f fc54 	bl	80168b8 <putchar>
    return USBH_FAIL;
 8007010:	2002      	movs	r0, #2
}
 8007012:	b00c      	add	sp, #48	; 0x30
 8007014:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
 8007016:	2400      	movs	r4, #0
  phost->id = id;
 8007018:	f880 23c4 	strb.w	r2, [r0, #964]	; 0x3c4
  phost->pActiveClass = NULL;
 800701c:	f8c0 4378 	str.w	r4, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007020:	f8c0 437c 	str.w	r4, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8007024:	f7ff ffc4 	bl	8006fb0 <DeInitStateMachine>
  phost->device.is_connected = 0U;
 8007028:	f885 431e 	strb.w	r4, [r5, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 800702c:	f885 4321 	strb.w	r4, [r5, #801]	; 0x321
  phost->device.is_disconnected = 0U;
 8007030:	f885 431f 	strb.w	r4, [r5, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8007034:	f885 4320 	strb.w	r4, [r5, #800]	; 0x320
  if (pUsrFunc != NULL)
 8007038:	b10e      	cbz	r6, 800703e <USBH_Init+0x4a>
    phost->pUser = pUsrFunc;
 800703a:	f8c5 63cc 	str.w	r6, [r5, #972]	; 0x3cc
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800703e:	4c11      	ldr	r4, [pc, #68]	; (8007084 <USBH_Init+0x90>)
 8007040:	ae01      	add	r6, sp, #4
 8007042:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007046:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800704a:	2100      	movs	r1, #0
 800704c:	4630      	mov	r0, r6
 800704e:	f002 fd73 	bl	8009b38 <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007052:	ae05      	add	r6, sp, #20
 8007054:	3410      	adds	r4, #16
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8007056:	f8c5 03d0 	str.w	r0, [r5, #976]	; 0x3d0
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800705a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800705c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800705e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007062:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007066:	4629      	mov	r1, r5
 8007068:	a805      	add	r0, sp, #20
 800706a:	f002 fc8a 	bl	8009982 <osThreadCreate>
 800706e:	f8c5 03d4 	str.w	r0, [r5, #980]	; 0x3d4
  USBH_LL_Init(phost);
 8007072:	4628      	mov	r0, r5
 8007074:	f00f f8b6 	bl	80161e4 <USBH_LL_Init>
  return USBH_OK;
 8007078:	2000      	movs	r0, #0
 800707a:	e7ca      	b.n	8007012 <USBH_Init+0x1e>
 800707c:	0801863f 	.word	0x0801863f
 8007080:	08018647 	.word	0x08018647
 8007084:	08017d30 	.word	0x08017d30

08007088 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007088:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800708a:	b1a1      	cbz	r1, 80070b6 <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800708c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8007090:	b933      	cbnz	r3, 80070a0 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007092:	2201      	movs	r2, #1
 8007094:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 8007098:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 800709c:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800709e:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 80070a0:	4807      	ldr	r0, [pc, #28]	; (80070c0 <USBH_RegisterClass+0x38>)
 80070a2:	f00f fbf1 	bl	8016888 <iprintf>
 80070a6:	4807      	ldr	r0, [pc, #28]	; (80070c4 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
 80070a8:	f00f fbee 	bl	8016888 <iprintf>
 80070ac:	200a      	movs	r0, #10
 80070ae:	f00f fc03 	bl	80168b8 <putchar>
    status = USBH_FAIL;
 80070b2:	2002      	movs	r0, #2
 80070b4:	e7f3      	b.n	800709e <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
 80070b6:	4802      	ldr	r0, [pc, #8]	; (80070c0 <USBH_RegisterClass+0x38>)
 80070b8:	f00f fbe6 	bl	8016888 <iprintf>
 80070bc:	4802      	ldr	r0, [pc, #8]	; (80070c8 <USBH_RegisterClass+0x40>)
 80070be:	e7f3      	b.n	80070a8 <USBH_RegisterClass+0x20>
 80070c0:	0801863f 	.word	0x0801863f
 80070c4:	08018822 	.word	0x08018822
 80070c8:	0801883b 	.word	0x0801883b

080070cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070cc:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070ce:	f890 333a 	ldrb.w	r3, [r0, #826]	; 0x33a
{
 80070d2:	4605      	mov	r5, r0
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070d4:	428b      	cmp	r3, r1
{
 80070d6:	460c      	mov	r4, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070d8:	d924      	bls.n	8007124 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
 80070da:	f885 1322 	strb.w	r1, [r5, #802]	; 0x322
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 80070de:	4817      	ldr	r0, [pc, #92]	; (800713c <USBH_SelectInterface+0x70>)
 80070e0:	f00f fbd2 	bl	8016888 <iprintf>
 80070e4:	200a      	movs	r0, #10
 80070e6:	f00f fbe7 	bl	80168b8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 80070ea:	231a      	movs	r3, #26
 80070ec:	fb03 5404 	mla	r4, r3, r4, r5
 80070f0:	4813      	ldr	r0, [pc, #76]	; (8007140 <USBH_SelectInterface+0x74>)
 80070f2:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
 80070f6:	f00f fbc7 	bl	8016888 <iprintf>
 80070fa:	200a      	movs	r0, #10
 80070fc:	f00f fbdc 	bl	80168b8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8007100:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
 8007104:	480f      	ldr	r0, [pc, #60]	; (8007144 <USBH_SelectInterface+0x78>)
 8007106:	f00f fbbf 	bl	8016888 <iprintf>
 800710a:	200a      	movs	r0, #10
 800710c:	f00f fbd4 	bl	80168b8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8007110:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8007114:	480c      	ldr	r0, [pc, #48]	; (8007148 <USBH_SelectInterface+0x7c>)
 8007116:	f00f fbb7 	bl	8016888 <iprintf>
 800711a:	200a      	movs	r0, #10
 800711c:	f00f fbcc 	bl	80168b8 <putchar>
  USBH_StatusTypeDef status = USBH_OK;
 8007120:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
 8007122:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
 8007124:	4809      	ldr	r0, [pc, #36]	; (800714c <USBH_SelectInterface+0x80>)
 8007126:	f00f fbaf 	bl	8016888 <iprintf>
 800712a:	4809      	ldr	r0, [pc, #36]	; (8007150 <USBH_SelectInterface+0x84>)
 800712c:	f00f fbac 	bl	8016888 <iprintf>
 8007130:	200a      	movs	r0, #10
 8007132:	f00f fbc1 	bl	80168b8 <putchar>
    status = USBH_FAIL;
 8007136:	2002      	movs	r0, #2
 8007138:	e7f3      	b.n	8007122 <USBH_SelectInterface+0x56>
 800713a:	bf00      	nop
 800713c:	08018850 	.word	0x08018850
 8007140:	0801886d 	.word	0x0801886d
 8007144:	0801887c 	.word	0x0801887c
 8007148:	0801888b 	.word	0x0801888b
 800714c:	0801863f 	.word	0x0801863f
 8007150:	0801889a 	.word	0x0801889a

08007154 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007154:	b570      	push	{r4, r5, r6, lr}
 8007156:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007158:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800715c:	b2e5      	uxtb	r5, r4
 800715e:	428e      	cmp	r6, r1
 8007160:	d001      	beq.n	8007166 <USBH_FindInterface+0x12>
 8007162:	29ff      	cmp	r1, #255	; 0xff
 8007164:	d10b      	bne.n	800717e <USBH_FindInterface+0x2a>
 8007166:	f890 6346 	ldrb.w	r6, [r0, #838]	; 0x346
 800716a:	4296      	cmp	r6, r2
 800716c:	d001      	beq.n	8007172 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800716e:	2aff      	cmp	r2, #255	; 0xff
 8007170:	d105      	bne.n	800717e <USBH_FindInterface+0x2a>
 8007172:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8007176:	429e      	cmp	r6, r3
 8007178:	d004      	beq.n	8007184 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d002      	beq.n	8007184 <USBH_FindInterface+0x30>
 800717e:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007180:	b114      	cbz	r4, 8007188 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8007182:	25ff      	movs	r5, #255	; 0xff
}
 8007184:	4628      	mov	r0, r5
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	2401      	movs	r4, #1
 800718a:	e7e5      	b.n	8007158 <USBH_FindInterface+0x4>

0800718c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800718c:	b510      	push	{r4, lr}
 800718e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007190:	f00f f84e 	bl	8016230 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007194:	2101      	movs	r1, #1
 8007196:	4620      	mov	r0, r4
 8007198:	f00f f8ca 	bl	8016330 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800719c:	2000      	movs	r0, #0
 800719e:	bd10      	pop	{r4, pc}

080071a0 <USBH_Process>:
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071a0:	2302      	movs	r3, #2
{
 80071a2:	b570      	push	{r4, r5, r6, lr}
 80071a4:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071a6:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071aa:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80071ae:	4604      	mov	r4, r0
  if (phost->device.is_disconnected == 1U)
 80071b0:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071b2:	bf04      	itt	eq
 80071b4:	2303      	moveq	r3, #3
 80071b6:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 80071b8:	7803      	ldrb	r3, [r0, #0]
 80071ba:	2b0b      	cmp	r3, #11
 80071bc:	f200 8099 	bhi.w	80072f2 <USBH_Process+0x152>
 80071c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80071c4:	0028000c 	.word	0x0028000c
 80071c8:	01f20035 	.word	0x01f20035
 80071cc:	006b0097 	.word	0x006b0097
 80071d0:	014f01d5 	.word	0x014f01d5
 80071d4:	01690159 	.word	0x01690159
 80071d8:	01ea017c 	.word	0x01ea017c
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80071dc:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8086 	beq.w	80072f2 <USBH_Process+0x152>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071e6:	2501      	movs	r5, #1
        USBH_UsrLog("USB Device Connected");
 80071e8:	48b8      	ldr	r0, [pc, #736]	; (80074cc <USBH_Process+0x32c>)
 80071ea:	f00f fb4d 	bl	8016888 <iprintf>
 80071ee:	200a      	movs	r0, #10
 80071f0:	f00f fb62 	bl	80168b8 <putchar>
        USBH_Delay(200U);
 80071f4:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071f6:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 80071f8:	f00f f8c4 	bl	8016384 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80071fc:	4620      	mov	r0, r4
 80071fe:	f00f f841 	bl	8016284 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007202:	2200      	movs	r2, #0
 8007204:	4629      	mov	r1, r5
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007206:	f8c4 53d8 	str.w	r5, [r4, #984]	; 0x3d8
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800720a:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 800720e:	f002 fca5 	bl	8009b5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007212:	e06e      	b.n	80072f2 <USBH_Process+0x152>
      if (phost->device.PortEnabled == 1U)
 8007214:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8007218:	2b01      	cmp	r3, #1
 800721a:	d16a      	bne.n	80072f2 <USBH_Process+0x152>
        USBH_UsrLog("USB Device Reset Completed");
 800721c:	48ac      	ldr	r0, [pc, #688]	; (80074d0 <USBH_Process+0x330>)
 800721e:	f00f fb33 	bl	8016888 <iprintf>
 8007222:	200a      	movs	r0, #10
 8007224:	f00f fb48 	bl	80168b8 <putchar>
        phost->gState = HOST_DEV_ATTACHED;
 8007228:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 800722a:	7023      	strb	r3, [r4, #0]
 800722c:	e061      	b.n	80072f2 <USBH_Process+0x152>
      if (phost->pUser != NULL)
 800722e:	f8d0 33cc 	ldr.w	r3, [r0, #972]	; 0x3cc
 8007232:	b10b      	cbz	r3, 8007238 <USBH_Process+0x98>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007234:	2104      	movs	r1, #4
 8007236:	4798      	blx	r3
      USBH_Delay(100U);
 8007238:	2064      	movs	r0, #100	; 0x64
 800723a:	f00f f8a3 	bl	8016384 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800723e:	4620      	mov	r0, r4
 8007240:	f00f f812 	bl	8016268 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8007244:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007246:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800724a:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800724c:	2100      	movs	r1, #0
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fcef 	bl	8007c32 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007254:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007256:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fcea 	bl	8007c32 <USBH_AllocPipe>
      USBH_OpenPipe(phost,
 800725e:	2500      	movs	r5, #0
 8007260:	79a2      	ldrb	r2, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007262:	4601      	mov	r1, r0
      USBH_OpenPipe(phost,
 8007264:	9202      	str	r2, [sp, #8]
 8007266:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800726a:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost,
 800726c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007270:	9200      	str	r2, [sp, #0]
 8007272:	9501      	str	r5, [sp, #4]
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fcc7 	bl	8007c0a <USBH_OpenPipe>
      USBH_OpenPipe(phost,
 800727c:	79a2      	ldrb	r2, [r4, #6]
 800727e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007282:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8007286:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800728a:	7961      	ldrb	r1, [r4, #5]
 800728c:	9200      	str	r2, [sp, #0]
 800728e:	4620      	mov	r0, r4
 8007290:	462a      	mov	r2, r5
 8007292:	f000 fcba 	bl	8007c0a <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007296:	2101      	movs	r1, #1
 8007298:	e084      	b.n	80073a4 <USBH_Process+0x204>
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;

  switch (phost->EnumState)
 800729a:	7843      	ldrb	r3, [r0, #1]
 800729c:	2b07      	cmp	r3, #7
 800729e:	d828      	bhi.n	80072f2 <USBH_Process+0x152>
 80072a0:	e8df f003 	tbb	[pc, r3]
 80072a4:	5b422a04 	.word	0x5b422a04
 80072a8:	a5886a62 	.word	0xa5886a62
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80072ac:	2108      	movs	r1, #8
 80072ae:	f000 fb1d 	bl	80078ec <USBH_Get_DevDesc>
 80072b2:	4605      	mov	r5, r0
 80072b4:	b9e8      	cbnz	r0, 80072f2 <USBH_Process+0x152>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072b6:	2301      	movs	r3, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072b8:	f894 232b 	ldrb.w	r2, [r4, #811]	; 0x32b
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072bc:	7063      	strb	r3, [r4, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 80072be:	7921      	ldrb	r1, [r4, #4]
 80072c0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072c4:	71a2      	strb	r2, [r4, #6]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 80072c6:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80072ca:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80072ce:	4620      	mov	r0, r4
 80072d0:	9200      	str	r2, [sp, #0]
 80072d2:	2280      	movs	r2, #128	; 0x80
 80072d4:	f000 fc99 	bl	8007c0a <USBH_OpenPipe>
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 80072d8:	79a2      	ldrb	r2, [r4, #6]
 80072da:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80072de:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80072e2:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80072e6:	7961      	ldrb	r1, [r4, #5]
 80072e8:	9200      	str	r2, [sp, #0]
 80072ea:	4620      	mov	r0, r4
 80072ec:	462a      	mov	r2, r5
 80072ee:	f000 fc8c 	bl	8007c0a <USBH_OpenPipe>
}
 80072f2:	2000      	movs	r0, #0
 80072f4:	b006      	add	sp, #24
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 80072f8:	2112      	movs	r1, #18
 80072fa:	f000 faf7 	bl	80078ec <USBH_Get_DevDesc>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d1f7      	bne.n	80072f2 <USBH_Process+0x152>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8007302:	f8b4 132e 	ldrh.w	r1, [r4, #814]	; 0x32e
 8007306:	4873      	ldr	r0, [pc, #460]	; (80074d4 <USBH_Process+0x334>)
 8007308:	f00f fabe 	bl	8016888 <iprintf>
 800730c:	200a      	movs	r0, #10
 800730e:	f00f fad3 	bl	80168b8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8007312:	f8b4 132c 	ldrh.w	r1, [r4, #812]	; 0x32c
 8007316:	4870      	ldr	r0, [pc, #448]	; (80074d8 <USBH_Process+0x338>)
 8007318:	f00f fab6 	bl	8016888 <iprintf>
 800731c:	200a      	movs	r0, #10
 800731e:	f00f facb 	bl	80168b8 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
 8007322:	2302      	movs	r3, #2
    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007324:	7063      	strb	r3, [r4, #1]
 8007326:	e7e4      	b.n	80072f2 <USBH_Process+0x152>
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007328:	2101      	movs	r1, #1
 800732a:	f000 fbdb 	bl	8007ae4 <USBH_SetAddress>
 800732e:	4605      	mov	r5, r0
 8007330:	2800      	cmp	r0, #0
 8007332:	d1de      	bne.n	80072f2 <USBH_Process+0x152>
        USBH_Delay(2U);
 8007334:	2002      	movs	r0, #2
 8007336:	f00f f825 	bl	8016384 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800733a:	2101      	movs	r1, #1
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800733c:	4867      	ldr	r0, [pc, #412]	; (80074dc <USBH_Process+0x33c>)
        phost->device.address = USBH_DEVICE_ADDRESS;
 800733e:	f884 131c 	strb.w	r1, [r4, #796]	; 0x31c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8007342:	f00f faa1 	bl	8016888 <iprintf>
 8007346:	200a      	movs	r0, #10
 8007348:	f00f fab6 	bl	80168b8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800734c:	2303      	movs	r3, #3
        USBH_OpenPipe(phost,
 800734e:	7921      	ldrb	r1, [r4, #4]
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007350:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost,
 8007352:	79a2      	ldrb	r2, [r4, #6]
 8007354:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8007358:	e7b5      	b.n	80072c6 <USBH_Process+0x126>
      if (USBH_Get_CfgDesc(phost,
 800735a:	2109      	movs	r1, #9
 800735c:	f000 fb0e 	bl	800797c <USBH_Get_CfgDesc>
 8007360:	2800      	cmp	r0, #0
 8007362:	d1c6      	bne.n	80072f2 <USBH_Process+0x152>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007364:	2304      	movs	r3, #4
 8007366:	e7dd      	b.n	8007324 <USBH_Process+0x184>
      if (USBH_Get_CfgDesc(phost,
 8007368:	f8b0 1338 	ldrh.w	r1, [r0, #824]	; 0x338
 800736c:	f000 fb06 	bl	800797c <USBH_Get_CfgDesc>
 8007370:	2800      	cmp	r0, #0
 8007372:	d1be      	bne.n	80072f2 <USBH_Process+0x152>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007374:	2305      	movs	r3, #5
 8007376:	e7d5      	b.n	8007324 <USBH_Process+0x184>
      }
      break;

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007378:	f890 5332 	ldrb.w	r5, [r0, #818]	; 0x332
 800737c:	b1b5      	cbz	r5, 80073ac <USBH_Process+0x20c>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800737e:	f500 768e 	add.w	r6, r0, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8007382:	23ff      	movs	r3, #255	; 0xff
 8007384:	4632      	mov	r2, r6
 8007386:	4629      	mov	r1, r5
 8007388:	f000 fb85 	bl	8007a96 <USBH_Get_StringDesc>
 800738c:	2800      	cmp	r0, #0
 800738e:	d1b0      	bne.n	80072f2 <USBH_Process+0x152>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8007390:	4631      	mov	r1, r6
 8007392:	4853      	ldr	r0, [pc, #332]	; (80074e0 <USBH_Process+0x340>)
 8007394:	f00f fa78 	bl	8016888 <iprintf>
#endif
        }
      }
      else
      {
        USBH_UsrLog("Manufacturer : N/A");
 8007398:	200a      	movs	r0, #10
 800739a:	f00f fa8d 	bl	80168b8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800739e:	2306      	movs	r3, #6
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073a0:	7063      	strb	r3, [r4, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80073a2:	2105      	movs	r1, #5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073a4:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073a8:	2200      	movs	r2, #0
 80073aa:	e72e      	b.n	800720a <USBH_Process+0x6a>
        USBH_UsrLog("Manufacturer : N/A");
 80073ac:	484d      	ldr	r0, [pc, #308]	; (80074e4 <USBH_Process+0x344>)
 80073ae:	f00f fa6b 	bl	8016888 <iprintf>
 80073b2:	e7f1      	b.n	8007398 <USBH_Process+0x1f8>
      if (phost->device.DevDesc.iProduct != 0U)
 80073b4:	f890 5333 	ldrb.w	r5, [r0, #819]	; 0x333
 80073b8:	b18d      	cbz	r5, 80073de <USBH_Process+0x23e>
                                phost->device.Data,
 80073ba:	f500 768e 	add.w	r6, r0, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80073be:	23ff      	movs	r3, #255	; 0xff
 80073c0:	4632      	mov	r2, r6
 80073c2:	4629      	mov	r1, r5
 80073c4:	f000 fb67 	bl	8007a96 <USBH_Get_StringDesc>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d192      	bne.n	80072f2 <USBH_Process+0x152>
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80073cc:	4631      	mov	r1, r6
 80073ce:	4846      	ldr	r0, [pc, #280]	; (80074e8 <USBH_Process+0x348>)
 80073d0:	f00f fa5a 	bl	8016888 <iprintf>
 80073d4:	200a      	movs	r0, #10
 80073d6:	f00f fa6f 	bl	80168b8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073da:	2307      	movs	r3, #7
 80073dc:	e7a2      	b.n	8007324 <USBH_Process+0x184>
        USBH_UsrLog("Product : N/A");
 80073de:	4843      	ldr	r0, [pc, #268]	; (80074ec <USBH_Process+0x34c>)
 80073e0:	f00f fa52 	bl	8016888 <iprintf>
 80073e4:	200a      	movs	r0, #10
 80073e6:	f00f fa67 	bl	80168b8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ea:	2307      	movs	r3, #7
 80073ec:	e7d8      	b.n	80073a0 <USBH_Process+0x200>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073ee:	f890 5334 	ldrb.w	r5, [r0, #820]	; 0x334
 80073f2:	b32d      	cbz	r5, 8007440 <USBH_Process+0x2a0>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 80073f4:	f500 768e 	add.w	r6, r0, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 80073f8:	23ff      	movs	r3, #255	; 0xff
 80073fa:	4632      	mov	r2, r6
 80073fc:	4629      	mov	r1, r5
 80073fe:	f000 fb4a 	bl	8007a96 <USBH_Get_StringDesc>
 8007402:	2800      	cmp	r0, #0
 8007404:	f47f af75 	bne.w	80072f2 <USBH_Process+0x152>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8007408:	4631      	mov	r1, r6
 800740a:	4839      	ldr	r0, [pc, #228]	; (80074f0 <USBH_Process+0x350>)
 800740c:	f00f fa3c 	bl	8016888 <iprintf>
 8007410:	200a      	movs	r0, #10
 8007412:	f00f fa51 	bl	80168b8 <putchar>
        USBH_UsrLog("Enumeration done.");
 8007416:	4837      	ldr	r0, [pc, #220]	; (80074f4 <USBH_Process+0x354>)
 8007418:	f00f fa36 	bl	8016888 <iprintf>
 800741c:	200a      	movs	r0, #10
 800741e:	f00f fa4b 	bl	80168b8 <putchar>
        phost->device.current_interface = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007428:	f894 3335 	ldrb.w	r3, [r4, #821]	; 0x335
 800742c:	2b01      	cmp	r3, #1
 800742e:	d116      	bne.n	800745e <USBH_Process+0x2be>
          USBH_UsrLog("This device has only 1 configuration.");
 8007430:	4831      	ldr	r0, [pc, #196]	; (80074f8 <USBH_Process+0x358>)
 8007432:	f00f fa29 	bl	8016888 <iprintf>
 8007436:	200a      	movs	r0, #10
 8007438:	f00f fa3e 	bl	80168b8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800743c:	2308      	movs	r3, #8
 800743e:	e6f4      	b.n	800722a <USBH_Process+0x8a>
          Status = USBH_OK;
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
 8007440:	482e      	ldr	r0, [pc, #184]	; (80074fc <USBH_Process+0x35c>)
 8007442:	f00f fa21 	bl	8016888 <iprintf>
 8007446:	200a      	movs	r0, #10
 8007448:	f00f fa36 	bl	80168b8 <putchar>
        Status = USBH_OK;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800744c:	2105      	movs	r1, #5
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800744e:	462a      	mov	r2, r5
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007450:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007454:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 8007458:	f002 fb80 	bl	8009b5c <osMessagePut>
 800745c:	e7db      	b.n	8007416 <USBH_Process+0x276>
          phost->gState = HOST_INPUT;
 800745e:	2307      	movs	r3, #7
 8007460:	e6e3      	b.n	800722a <USBH_Process+0x8a>
      if (phost->pUser != NULL)
 8007462:	f8d0 33cc 	ldr.w	r3, [r0, #972]	; 0x3cc
 8007466:	2b00      	cmp	r3, #0
 8007468:	f43f af43 	beq.w	80072f2 <USBH_Process+0x152>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800746c:	2101      	movs	r1, #1
 800746e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007470:	2308      	movs	r3, #8
 8007472:	7023      	strb	r3, [r4, #0]
 8007474:	e795      	b.n	80073a2 <USBH_Process+0x202>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007476:	f890 133b 	ldrb.w	r1, [r0, #827]	; 0x33b
 800747a:	f000 fb40 	bl	8007afe <USBH_SetCfg>
 800747e:	2800      	cmp	r0, #0
 8007480:	f47f af09 	bne.w	8007296 <USBH_Process+0xf6>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007484:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
 8007486:	481e      	ldr	r0, [pc, #120]	; (8007500 <USBH_Process+0x360>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007488:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog("Default configuration set.");
 800748a:	f00f f9fd 	bl	8016888 <iprintf>
 800748e:	200a      	movs	r0, #10
 8007490:	f00f fa12 	bl	80168b8 <putchar>
 8007494:	e6ff      	b.n	8007296 <USBH_Process+0xf6>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007496:	f890 333d 	ldrb.w	r3, [r0, #829]	; 0x33d
 800749a:	069b      	lsls	r3, r3, #26
 800749c:	d50b      	bpl.n	80074b6 <USBH_Process+0x316>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800749e:	2101      	movs	r1, #1
 80074a0:	f000 fb3a 	bl	8007b18 <USBH_SetFeature>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f47f aef6 	bne.w	8007296 <USBH_Process+0xf6>
          USBH_UsrLog("Device remote wakeup enabled");
 80074aa:	4816      	ldr	r0, [pc, #88]	; (8007504 <USBH_Process+0x364>)
 80074ac:	f00f f9ec 	bl	8016888 <iprintf>
 80074b0:	200a      	movs	r0, #10
 80074b2:	f00f fa01 	bl	80168b8 <putchar>
        phost->gState = HOST_CHECK_CLASS;
 80074b6:	230a      	movs	r3, #10
 80074b8:	7023      	strb	r3, [r4, #0]
 80074ba:	e6ec      	b.n	8007296 <USBH_Process+0xf6>
      if (phost->ClassNumber == 0U)
 80074bc:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80074c0:	bb23      	cbnz	r3, 800750c <USBH_Process+0x36c>
        USBH_UsrLog("No Class has been registered.");
 80074c2:	4811      	ldr	r0, [pc, #68]	; (8007508 <USBH_Process+0x368>)
          USBH_UsrLog("No registered class for this device.");
 80074c4:	f00f f9e0 	bl	8016888 <iprintf>
 80074c8:	e049      	b.n	800755e <USBH_Process+0x3be>
 80074ca:	bf00      	nop
 80074cc:	0801865b 	.word	0x0801865b
 80074d0:	08018670 	.word	0x08018670
 80074d4:	0801868b 	.word	0x0801868b
 80074d8:	08018694 	.word	0x08018694
 80074dc:	0801869d 	.word	0x0801869d
 80074e0:	080186b5 	.word	0x080186b5
 80074e4:	080186c7 	.word	0x080186c7
 80074e8:	0801855e 	.word	0x0801855e
 80074ec:	080186da 	.word	0x080186da
 80074f0:	080186e8 	.word	0x080186e8
 80074f4:	0801870f 	.word	0x0801870f
 80074f8:	08018721 	.word	0x08018721
 80074fc:	080186fb 	.word	0x080186fb
 8007500:	08018747 	.word	0x08018747
 8007504:	08018762 	.word	0x08018762
 8007508:	0801877f 	.word	0x0801877f
        phost->pActiveClass = NULL;
 800750c:	2300      	movs	r3, #0
 800750e:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007512:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8007516:	f890 2345 	ldrb.w	r2, [r0, #837]	; 0x345
 800751a:	7919      	ldrb	r1, [r3, #4]
 800751c:	4291      	cmp	r1, r2
            phost->pActiveClass = phost->pClass[idx];
 800751e:	bf08      	it	eq
 8007520:	f8c0 3378 	streq.w	r3, [r0, #888]	; 0x378
        if (phost->pActiveClass != NULL)
 8007524:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8007528:	b1eb      	cbz	r3, 8007566 <USBH_Process+0x3c6>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4798      	blx	r3
 800752e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8007532:	b970      	cbnz	r0, 8007552 <USBH_Process+0x3b2>
            phost->gState = HOST_CLASS_REQUEST;
 8007534:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8007536:	6819      	ldr	r1, [r3, #0]
            phost->gState = HOST_CLASS_REQUEST;
 8007538:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800753a:	482f      	ldr	r0, [pc, #188]	; (80075f8 <USBH_Process+0x458>)
 800753c:	f00f f9a4 	bl	8016888 <iprintf>
 8007540:	200a      	movs	r0, #10
 8007542:	f00f f9b9 	bl	80168b8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007546:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 800754a:	2103      	movs	r1, #3
 800754c:	4620      	mov	r0, r4
 800754e:	4798      	blx	r3
 8007550:	e727      	b.n	80073a2 <USBH_Process+0x202>
            phost->gState = HOST_ABORT_STATE;
 8007552:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007554:	6819      	ldr	r1, [r3, #0]
            phost->gState = HOST_ABORT_STATE;
 8007556:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007558:	4828      	ldr	r0, [pc, #160]	; (80075fc <USBH_Process+0x45c>)
 800755a:	f00f f995 	bl	8016888 <iprintf>
          USBH_UsrLog("No registered class for this device.");
 800755e:	200a      	movs	r0, #10
 8007560:	f00f f9aa 	bl	80168b8 <putchar>
 8007564:	e71d      	b.n	80073a2 <USBH_Process+0x202>
          phost->gState = HOST_ABORT_STATE;
 8007566:	230d      	movs	r3, #13
 8007568:	7003      	strb	r3, [r0, #0]
          USBH_UsrLog("No registered class for this device.");
 800756a:	4825      	ldr	r0, [pc, #148]	; (8007600 <USBH_Process+0x460>)
 800756c:	e7aa      	b.n	80074c4 <USBH_Process+0x324>
      if (phost->pActiveClass != NULL)
 800756e:	f8d0 5378 	ldr.w	r5, [r0, #888]	; 0x378
 8007572:	b155      	cbz	r5, 800758a <USBH_Process+0x3ea>
        status = phost->pActiveClass->Requests(phost);
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	4798      	blx	r3
 8007578:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800757c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f aeb6 	bne.w	80072f2 <USBH_Process+0x152>
          phost->gState = HOST_CLASS;
 8007586:	230b      	movs	r3, #11
 8007588:	e64f      	b.n	800722a <USBH_Process+0x8a>
        phost->gState = HOST_ABORT_STATE;
 800758a:	230d      	movs	r3, #13
 800758c:	7003      	strb	r3, [r0, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800758e:	481d      	ldr	r0, [pc, #116]	; (8007604 <USBH_Process+0x464>)
 8007590:	f00f f97a 	bl	8016888 <iprintf>
 8007594:	481c      	ldr	r0, [pc, #112]	; (8007608 <USBH_Process+0x468>)
 8007596:	e795      	b.n	80074c4 <USBH_Process+0x324>
      if (phost->pActiveClass != NULL)
 8007598:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800759c:	2b00      	cmp	r3, #0
 800759e:	f43f aea8 	beq.w	80072f2 <USBH_Process+0x152>
        phost->pActiveClass->BgndProcess(phost);
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	4798      	blx	r3
 80075a6:	e6a4      	b.n	80072f2 <USBH_Process+0x152>
      phost->device.is_disconnected = 0U;
 80075a8:	2500      	movs	r5, #0
 80075aa:	f880 531f 	strb.w	r5, [r0, #799]	; 0x31f
      DeInitStateMachine(phost);
 80075ae:	f7ff fcff 	bl	8006fb0 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80075b2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80075b6:	b123      	cbz	r3, 80075c2 <USBH_Process+0x422>
        phost->pActiveClass->DeInit(phost);
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	4620      	mov	r0, r4
 80075bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80075be:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
      if (phost->pUser != NULL)
 80075c2:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
 80075c6:	b113      	cbz	r3, 80075ce <USBH_Process+0x42e>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075c8:	2105      	movs	r1, #5
 80075ca:	4620      	mov	r0, r4
 80075cc:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
 80075ce:	480f      	ldr	r0, [pc, #60]	; (800760c <USBH_Process+0x46c>)
 80075d0:	f00f f95a 	bl	8016888 <iprintf>
 80075d4:	200a      	movs	r0, #10
 80075d6:	f00f f96f 	bl	80168b8 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
 80075da:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d106      	bne.n	80075f0 <USBH_Process+0x450>
        phost->device.is_ReEnumerated = 0U;
 80075e2:	2300      	movs	r3, #0
        USBH_Start(phost);
 80075e4:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 80075e6:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
        USBH_Start(phost);
 80075ea:	f7ff fdcf 	bl	800718c <USBH_Start>
 80075ee:	e652      	b.n	8007296 <USBH_Process+0xf6>
        USBH_LL_Start(phost);
 80075f0:	4620      	mov	r0, r4
 80075f2:	f00e fe1d 	bl	8016230 <USBH_LL_Start>
 80075f6:	e64e      	b.n	8007296 <USBH_Process+0xf6>
 80075f8:	0801879d 	.word	0x0801879d
 80075fc:	080187af 	.word	0x080187af
 8007600:	080187cf 	.word	0x080187cf
 8007604:	0801863f 	.word	0x0801863f
 8007608:	080187f4 	.word	0x080187f4
 800760c:	0801880a 	.word	0x0801880a

08007610 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007612:	4604      	mov	r4, r0
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007618:	f8d4 13d0 	ldr.w	r1, [r4, #976]	; 0x3d0
 800761c:	a801      	add	r0, sp, #4
 800761e:	f002 fac5 	bl	8009bac <osMessageGet>
    if (event.status == osEventMessage)
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	2b10      	cmp	r3, #16
 8007626:	d1f5      	bne.n	8007614 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff fdb9 	bl	80071a0 <USBH_Process>
 800762e:	e7f1      	b.n	8007614 <USBH_Process_OS+0x4>

08007630 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8007630:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
}
 8007634:	4770      	bx	lr

08007636 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8007636:	f8d0 23c0 	ldr.w	r2, [r0, #960]	; 0x3c0
 800763a:	3201      	adds	r2, #1
 800763c:	f8c0 23c0 	str.w	r2, [r0, #960]	; 0x3c0
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007640:	7802      	ldrb	r2, [r0, #0]
 8007642:	2a0b      	cmp	r2, #11
 8007644:	d104      	bne.n	8007650 <USBH_LL_IncTimer+0x1a>
 8007646:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800764a:	b10b      	cbz	r3, 8007650 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	4718      	bx	r3
}
 8007650:	4770      	bx	lr

08007652 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8007652:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007654:	2200      	movs	r2, #0
  phost->device.PortEnabled = 1U;
 8007656:	f880 1321 	strb.w	r1, [r0, #801]	; 0x321
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800765a:	f8c0 13d8 	str.w	r1, [r0, #984]	; 0x3d8
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800765e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8007662:	f002 ba7b 	b.w	8009b5c <osMessagePut>

08007666 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
}
 800766c:	4770      	bx	lr

0800766e <USBH_LL_Connect>:
{
 800766e:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 8007670:	2101      	movs	r1, #1
  phost->device.is_disconnected = 0U;
 8007672:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 8007674:	f880 131e 	strb.w	r1, [r0, #798]	; 0x31e
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007678:	f8c0 13d8 	str.w	r1, [r0, #984]	; 0x3d8
  phost->device.is_disconnected = 0U;
 800767c:	f880 431f 	strb.w	r4, [r0, #799]	; 0x31f
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007680:	4622      	mov	r2, r4
  phost->device.is_ReEnumerated = 0U;
 8007682:	f880 4320 	strb.w	r4, [r0, #800]	; 0x320
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007686:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800768a:	f002 fa67 	bl	8009b5c <osMessagePut>
}
 800768e:	4620      	mov	r0, r4
 8007690:	bd10      	pop	{r4, pc}

08007692 <USBH_LL_Disconnect>:
{
 8007692:	b570      	push	{r4, r5, r6, lr}
  phost->device.is_connected = 0U;
 8007694:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8007696:	2601      	movs	r6, #1
{
 8007698:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800769a:	f880 631f 	strb.w	r6, [r0, #799]	; 0x31f
  phost->device.PortEnabled = 0U;
 800769e:	f880 5321 	strb.w	r5, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 80076a2:	f880 531e 	strb.w	r5, [r0, #798]	; 0x31e
  USBH_LL_Stop(phost);
 80076a6:	f00e fdd1 	bl	801624c <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80076aa:	7921      	ldrb	r1, [r4, #4]
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fad7 	bl	8007c60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80076b2:	7961      	ldrb	r1, [r4, #5]
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 fad3 	bl	8007c60 <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076ba:	f8c4 63d8 	str.w	r6, [r4, #984]	; 0x3d8
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076be:	462a      	mov	r2, r5
 80076c0:	4631      	mov	r1, r6
 80076c2:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 80076c6:	f002 fa49 	bl	8009b5c <osMessagePut>
}
 80076ca:	4628      	mov	r0, r5
 80076cc:	bd70      	pop	{r4, r5, r6, pc}

080076ce <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076ce:	2101      	movs	r1, #1
{
 80076d0:	b508      	push	{r3, lr}

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076d2:	2200      	movs	r2, #0
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80076d4:	f8c0 13d8 	str.w	r1, [r0, #984]	; 0x3d8
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076d8:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 80076dc:	f002 fa3e 	bl	8009b5c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 80076e0:	2000      	movs	r0, #0
 80076e2:	bd08      	pop	{r3, pc}

080076e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80076e6:	7885      	ldrb	r5, [r0, #2]
{
 80076e8:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80076ea:	2d01      	cmp	r5, #1
 80076ec:	d003      	beq.n	80076f6 <USBH_CtlReq+0x12>
 80076ee:	2d02      	cmp	r5, #2
 80076f0:	d00f      	beq.n	8007712 <USBH_CtlReq+0x2e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80076f2:	2001      	movs	r0, #1
  return status;
 80076f4:	e057      	b.n	80077a6 <USBH_CtlReq+0xc2>
      phost->RequestState = CMD_WAIT;
 80076f6:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 80076f8:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80076fa:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80076fc:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80076fe:	7083      	strb	r3, [r0, #2]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007700:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007702:	2200      	movs	r2, #0
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007704:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007708:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 800770c:	f002 fa26 	bl	8009b5c <osMessagePut>
 8007710:	e7ef      	b.n	80076f2 <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 8007712:	7e03      	ldrb	r3, [r0, #24]
 8007714:	2101      	movs	r1, #1
 8007716:	3b01      	subs	r3, #1
 8007718:	2b0a      	cmp	r3, #10
 800771a:	d8ea      	bhi.n	80076f2 <USBH_CtlReq+0xe>
 800771c:	e8df f003 	tbb	[pc, r3]
 8007720:	2f250e06 	.word	0x2f250e06
 8007724:	7a705045 	.word	0x7a705045
 8007728:	a196      	.short	0xa196
 800772a:	ab          	.byte	0xab
 800772b:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800772c:	7942      	ldrb	r2, [r0, #5]
 800772e:	f100 0110 	add.w	r1, r0, #16
 8007732:	f000 fa0b 	bl	8007b4c <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8007736:	2302      	movs	r3, #2
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007738:	7623      	strb	r3, [r4, #24]
 800773a:	e7da      	b.n	80076f2 <USBH_CtlReq+0xe>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800773c:	7941      	ldrb	r1, [r0, #5]
 800773e:	f00e fdf3 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007742:	2801      	cmp	r0, #1
 8007744:	d10c      	bne.n	8007760 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
 8007746:	8ae2      	ldrh	r2, [r4, #22]
 8007748:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800774c:	b122      	cbz	r2, 8007758 <USBH_CtlReq+0x74>
          if (direction == USB_D2H)
 800774e:	2b00      	cmp	r3, #0
 8007750:	da44      	bge.n	80077dc <USBH_CtlReq+0xf8>
            phost->Control.state = CTRL_DATA_IN;
 8007752:	2303      	movs	r3, #3
            phost->Control.state = CTRL_STATUS_IN;
 8007754:	7623      	strb	r3, [r4, #24]
 8007756:	e7d3      	b.n	8007700 <USBH_CtlReq+0x1c>
          if (direction == USB_D2H)
 8007758:	2b00      	cmp	r3, #0
 800775a:	da36      	bge.n	80077ca <USBH_CtlReq+0xe6>
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800775c:	2309      	movs	r3, #9
 800775e:	e7f9      	b.n	8007754 <USBH_CtlReq+0x70>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007760:	2804      	cmp	r0, #4
 8007762:	d06d      	beq.n	8007840 <USBH_CtlReq+0x15c>
 8007764:	2802      	cmp	r0, #2
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8007766:	d1c4      	bne.n	80076f2 <USBH_CtlReq+0xe>
 8007768:	e06a      	b.n	8007840 <USBH_CtlReq+0x15c>
      phost->Control.timer = (uint16_t)phost->Timer;
 800776a:	f8d0 33c0 	ldr.w	r3, [r0, #960]	; 0x3c0
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800776e:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 8007770:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007772:	6881      	ldr	r1, [r0, #8]
 8007774:	7903      	ldrb	r3, [r0, #4]
 8007776:	f000 fa11 	bl	8007b9c <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800777a:	2304      	movs	r3, #4
 800777c:	e7dc      	b.n	8007738 <USBH_CtlReq+0x54>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800777e:	7901      	ldrb	r1, [r0, #4]
 8007780:	f00e fdd2 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007784:	2801      	cmp	r0, #1
 8007786:	d0e9      	beq.n	800775c <USBH_CtlReq+0x78>
      if (URB_Status == USBH_URB_STALL)
 8007788:	2805      	cmp	r0, #5
 800778a:	d172      	bne.n	8007872 <USBH_CtlReq+0x18e>
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800778c:	2103      	movs	r1, #3
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800778e:	2200      	movs	r2, #0
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007790:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007794:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 8007798:	f002 f9e0 	bl	8009b5c <osMessagePut>
        phost->RequestState = CMD_SEND;
 800779c:	2301      	movs	r3, #1
 800779e:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80077a0:	2300      	movs	r3, #0
        status = USBH_NOT_SUPPORTED;
 80077a2:	2003      	movs	r0, #3
        phost->Control.state = CTRL_IDLE;
 80077a4:	7623      	strb	r3, [r4, #24]
}
 80077a6:	b003      	add	sp, #12
 80077a8:	bd30      	pop	{r4, r5, pc}
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077aa:	7943      	ldrb	r3, [r0, #5]
 80077ac:	8982      	ldrh	r2, [r0, #12]
 80077ae:	9100      	str	r1, [sp, #0]
 80077b0:	6881      	ldr	r1, [r0, #8]
 80077b2:	f000 f9dc 	bl	8007b6e <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80077b6:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 80077ba:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80077bc:	2306      	movs	r3, #6
 80077be:	e7bb      	b.n	8007738 <USBH_CtlReq+0x54>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077c0:	7941      	ldrb	r1, [r0, #5]
 80077c2:	f00e fdb1 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80077c6:	2801      	cmp	r0, #1
 80077c8:	d101      	bne.n	80077ce <USBH_CtlReq+0xea>
            phost->Control.state = CTRL_STATUS_IN;
 80077ca:	2307      	movs	r3, #7
 80077cc:	e7c2      	b.n	8007754 <USBH_CtlReq+0x70>
      else if (URB_Status == USBH_URB_STALL)
 80077ce:	2805      	cmp	r0, #5
 80077d0:	d102      	bne.n	80077d8 <USBH_CtlReq+0xf4>
        phost->Control.state = CTRL_STALLED;
 80077d2:	230c      	movs	r3, #12
 80077d4:	7623      	strb	r3, [r4, #24]
 80077d6:	e7d9      	b.n	800778c <USBH_CtlReq+0xa8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80077d8:	2802      	cmp	r0, #2
 80077da:	d101      	bne.n	80077e0 <USBH_CtlReq+0xfc>
        phost->Control.state = CTRL_DATA_OUT;
 80077dc:	2305      	movs	r3, #5
 80077de:	e7b9      	b.n	8007754 <USBH_CtlReq+0x70>
        if (URB_Status == USBH_URB_ERROR)
 80077e0:	2804      	cmp	r0, #4
 80077e2:	d186      	bne.n	80076f2 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 80077e4:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077e6:	2103      	movs	r1, #3
          phost->Control.state = CTRL_ERROR;
 80077e8:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80077ea:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 80077f4:	f002 f9b2 	bl	8009b5c <osMessagePut>
          phost->RequestState = CMD_SEND;
 80077f8:	2301      	movs	r3, #1
          status = USBH_FAIL;
 80077fa:	2002      	movs	r0, #2
          phost->RequestState = CMD_SEND;
 80077fc:	70a3      	strb	r3, [r4, #2]
 80077fe:	e7d2      	b.n	80077a6 <USBH_CtlReq+0xc2>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007800:	2200      	movs	r2, #0
 8007802:	7903      	ldrb	r3, [r0, #4]
 8007804:	4611      	mov	r1, r2
 8007806:	f000 f9c9 	bl	8007b9c <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800780a:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 800780e:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007810:	2308      	movs	r3, #8
 8007812:	e791      	b.n	8007738 <USBH_CtlReq+0x54>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007814:	7901      	ldrb	r1, [r0, #4]
 8007816:	f00e fd87 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800781a:	2801      	cmp	r0, #1
 800781c:	d10e      	bne.n	800783c <USBH_CtlReq+0x158>
        phost->Control.state = CTRL_COMPLETE;
 800781e:	230d      	movs	r3, #13
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007820:	2103      	movs	r1, #3
        phost->Control.state = CTRL_COMPLETE;
 8007822:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007824:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007828:	2200      	movs	r2, #0
 800782a:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 800782e:	f002 f995 	bl	8009b5c <osMessagePut>
        phost->RequestState = CMD_SEND;
 8007832:	2301      	movs	r3, #1
        phost->Control.state = CTRL_IDLE;
 8007834:	2000      	movs	r0, #0
        phost->RequestState = CMD_SEND;
 8007836:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8007838:	7620      	strb	r0, [r4, #24]
 800783a:	e7b4      	b.n	80077a6 <USBH_CtlReq+0xc2>
      else if (URB_Status == USBH_URB_ERROR)
 800783c:	2804      	cmp	r0, #4
 800783e:	d101      	bne.n	8007844 <USBH_CtlReq+0x160>
        {
          phost->Control.state = CTRL_ERROR;
 8007840:	230b      	movs	r3, #11
 8007842:	e787      	b.n	8007754 <USBH_CtlReq+0x70>
        if (URB_Status == USBH_URB_STALL)
 8007844:	2805      	cmp	r0, #5
 8007846:	f47f af54 	bne.w	80076f2 <USBH_CtlReq+0xe>
 800784a:	e79f      	b.n	800778c <USBH_CtlReq+0xa8>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800784c:	2200      	movs	r2, #0
 800784e:	7943      	ldrb	r3, [r0, #5]
 8007850:	9100      	str	r1, [sp, #0]
 8007852:	4611      	mov	r1, r2
 8007854:	f000 f98b 	bl	8007b6e <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8007858:	f8d4 33c0 	ldr.w	r3, [r4, #960]	; 0x3c0
 800785c:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800785e:	230a      	movs	r3, #10
 8007860:	e76a      	b.n	8007738 <USBH_CtlReq+0x54>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007862:	7941      	ldrb	r1, [r0, #5]
 8007864:	f00e fd60 	bl	8016328 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007868:	2801      	cmp	r0, #1
 800786a:	d0d8      	beq.n	800781e <USBH_CtlReq+0x13a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800786c:	2802      	cmp	r0, #2
 800786e:	f43f af75 	beq.w	800775c <USBH_CtlReq+0x78>
        if (URB_Status == USBH_URB_ERROR)
 8007872:	2804      	cmp	r0, #4
 8007874:	e777      	b.n	8007766 <USBH_CtlReq+0x82>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007876:	7e43      	ldrb	r3, [r0, #25]
 8007878:	3301      	adds	r3, #1
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	7643      	strb	r3, [r0, #25]
 8007880:	d803      	bhi.n	800788a <USBH_CtlReq+0x1a6>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007882:	2001      	movs	r0, #1
 8007884:	7620      	strb	r0, [r4, #24]
        phost->RequestState = CMD_SEND;
 8007886:	70a0      	strb	r0, [r4, #2]
 8007888:	e78d      	b.n	80077a6 <USBH_CtlReq+0xc2>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800788a:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800788c:	f8d0 33cc 	ldr.w	r3, [r0, #972]	; 0x3cc
 8007890:	2106      	movs	r1, #6
 8007892:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007894:	7665      	strb	r5, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
 8007896:	4805      	ldr	r0, [pc, #20]	; (80078ac <USBH_CtlReq+0x1c8>)
 8007898:	f00e fff6 	bl	8016888 <iprintf>
 800789c:	4804      	ldr	r0, [pc, #16]	; (80078b0 <USBH_CtlReq+0x1cc>)
 800789e:	f00e fff3 	bl	8016888 <iprintf>
 80078a2:	200a      	movs	r0, #10
 80078a4:	f00f f808 	bl	80168b8 <putchar>
        phost->gState = HOST_IDLE;
 80078a8:	7025      	strb	r5, [r4, #0]
 80078aa:	e7a5      	b.n	80077f8 <USBH_CtlReq+0x114>
 80078ac:	0801863f 	.word	0x0801863f
 80078b0:	080188c4 	.word	0x080188c4

080078b4 <USBH_GetDescriptor>:
{
 80078b4:	b430      	push	{r4, r5}
  if (phost->RequestState == CMD_SEND)
 80078b6:	7884      	ldrb	r4, [r0, #2]
{
 80078b8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 80078bc:	2c01      	cmp	r4, #1
 80078be:	d110      	bne.n	80078e2 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80078c0:	f061 047f 	orn	r4, r1, #127	; 0x7f
 80078c4:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80078c6:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 80078ca:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 80078ce:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078d0:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078d4:	bf0c      	ite	eq
 80078d6:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 80078da:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80078dc:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80078de:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80078e0:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 80078e2:	462a      	mov	r2, r5
}
 80078e4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 80078e6:	4619      	mov	r1, r3
 80078e8:	f7ff befc 	b.w	80076e4 <USBH_CtlReq>

080078ec <USBH_Get_DevDesc>:
{
 80078ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 80078ee:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80078f2:	460d      	mov	r5, r1
 80078f4:	9100      	str	r1, [sp, #0]
 80078f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078fa:	2100      	movs	r1, #0
{
 80078fc:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 80078fe:	f7ff ffd9 	bl	80078b4 <USBH_GetDescriptor>
 8007902:	bbc8      	cbnz	r0, 8007978 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007904:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 8007908:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800790a:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800790e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8007912:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007916:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800791a:	f8a4 3326 	strh.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800791e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8007922:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007926:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800792a:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800792e:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8007932:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007936:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 800793a:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  if (length > 8U)
 800793e:	d91b      	bls.n	8007978 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 8007940:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8007944:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->idProduct          = LE16(buf + 10);
 8007948:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800794c:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007950:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8007954:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007958:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800795c:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007960:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8007964:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007968:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800796c:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007970:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8007974:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
}
 8007978:	b003      	add	sp, #12
 800797a:	bd30      	pop	{r4, r5, pc}

0800797c <USBH_Get_CfgDesc>:
{
 800797c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8007980:	f100 041c 	add.w	r4, r0, #28
{
 8007984:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007986:	9100      	str	r1, [sp, #0]
 8007988:	4623      	mov	r3, r4
 800798a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800798e:	2100      	movs	r1, #0
{
 8007990:	4605      	mov	r5, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007992:	f7ff ff8f 	bl	80078b4 <USBH_GetDescriptor>
 8007996:	bb40      	cbnz	r0, 80079ea <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007998:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800799a:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800799e:	f885 3336 	strb.w	r3, [r5, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079a2:	7f6b      	ldrb	r3, [r5, #29]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079a4:	2e09      	cmp	r6, #9
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80079a6:	f885 3337 	strb.w	r3, [r5, #823]	; 0x337
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80079aa:	f895 3020 	ldrb.w	r3, [r5, #32]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80079ae:	f8a5 c338 	strh.w	ip, [r5, #824]	; 0x338
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80079b2:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80079b6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80079ba:	f885 333b 	strb.w	r3, [r5, #827]	; 0x33b
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80079be:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80079c2:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80079c6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80079ca:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079ce:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80079d2:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079d6:	d908      	bls.n	80079ea <USBH_Get_CfgDesc+0x6e>
 80079d8:	462b      	mov	r3, r5
 80079da:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 80079dc:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80079de:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079e2:	2f02      	cmp	r7, #2
 80079e4:	d001      	beq.n	80079ea <USBH_Get_CfgDesc+0x6e>
 80079e6:	4594      	cmp	ip, r2
 80079e8:	d802      	bhi.n	80079f0 <USBH_Get_CfgDesc+0x74>
}
 80079ea:	b003      	add	sp, #12
 80079ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079f0:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80079f2:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079f4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079f6:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80079f8:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80079fa:	2904      	cmp	r1, #4
 80079fc:	d1f1      	bne.n	80079e2 <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80079fe:	7821      	ldrb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a00:	fb0e f807 	mul.w	r8, lr, r7
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a04:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a08:	7861      	ldrb	r1, [r4, #1]
 8007a0a:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a0e:	78a1      	ldrb	r1, [r4, #2]
 8007a10:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a14:	78e1      	ldrb	r1, [r4, #3]
 8007a16:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a1a:	7921      	ldrb	r1, [r4, #4]
 8007a1c:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a20:	7961      	ldrb	r1, [r4, #5]
 8007a22:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a26:	79a1      	ldrb	r1, [r4, #6]
 8007a28:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a2c:	79e1      	ldrb	r1, [r4, #7]
 8007a2e:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a32:	7a21      	ldrb	r1, [r4, #8]
 8007a34:	f883 1348 	strb.w	r1, [r3, #840]	; 0x348
        ep_ix = 0U;
 8007a38:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a3a:	f893 6344 	ldrb.w	r6, [r3, #836]	; 0x344
 8007a3e:	428e      	cmp	r6, r1
 8007a40:	d901      	bls.n	8007a46 <USBH_Get_CfgDesc+0xca>
 8007a42:	4594      	cmp	ip, r2
 8007a44:	d802      	bhi.n	8007a4c <USBH_Get_CfgDesc+0xd0>
 8007a46:	3701      	adds	r7, #1
 8007a48:	331a      	adds	r3, #26
 8007a4a:	e7ca      	b.n	80079e2 <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a4c:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a4e:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a50:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a52:	7866      	ldrb	r6, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a54:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007a56:	2e05      	cmp	r6, #5
 8007a58:	d1ef      	bne.n	8007a3a <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a5a:	1c4e      	adds	r6, r1, #1
 8007a5c:	f894 9000 	ldrb.w	r9, [r4]
 8007a60:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 8007a64:	4429      	add	r1, r5
 8007a66:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a6a:	f894 9001 	ldrb.w	r9, [r4, #1]
 8007a6e:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a72:	f894 9002 	ldrb.w	r9, [r4, #2]
 8007a76:	f881 9344 	strb.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a7a:	f894 9003 	ldrb.w	r9, [r4, #3]
 8007a7e:	f881 9345 	strb.w	r9, [r1, #837]	; 0x345
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a82:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8007a86:	f8a1 9346 	strh.w	r9, [r1, #838]	; 0x346
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a8a:	f894 9006 	ldrb.w	r9, [r4, #6]
 8007a8e:	f881 9348 	strb.w	r9, [r1, #840]	; 0x348
            ep_ix++;
 8007a92:	b2f1      	uxtb	r1, r6
 8007a94:	e7d1      	b.n	8007a3a <USBH_Get_CfgDesc+0xbe>

08007a96 <USBH_Get_StringDesc>:
{
 8007a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 8007a98:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8007aa6:	462b      	mov	r3, r5
 8007aa8:	2100      	movs	r1, #0
{
 8007aaa:	4606      	mov	r6, r0
  if ((status = USBH_GetDescriptor(phost,
 8007aac:	f7ff ff02 	bl	80078b4 <USBH_GetDescriptor>
 8007ab0:	b978      	cbnz	r0, 8007ad2 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ab2:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d10b      	bne.n	8007ad2 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007aba:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 8007abe:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ac0:	3b02      	subs	r3, #2
 8007ac2:	42bb      	cmp	r3, r7
 8007ac4:	bf28      	it	cs
 8007ac6:	463b      	movcs	r3, r7
 8007ac8:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d803      	bhi.n	8007ad6 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8007ace:	2300      	movs	r3, #0
 8007ad0:	7023      	strb	r3, [r4, #0]
}
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8007ad6:	18a9      	adds	r1, r5, r2
 8007ad8:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ada:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8007adc:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ae0:	b292      	uxth	r2, r2
 8007ae2:	e7f2      	b.n	8007aca <USBH_Get_StringDesc+0x34>

08007ae4 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8007ae4:	7883      	ldrb	r3, [r0, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d105      	bne.n	8007af6 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007aea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007aee:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8007af0:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007af2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007af4:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8007af6:	2200      	movs	r2, #0
 8007af8:	4611      	mov	r1, r2
 8007afa:	f7ff bdf3 	b.w	80076e4 <USBH_CtlReq>

08007afe <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8007afe:	7883      	ldrb	r3, [r0, #2]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d105      	bne.n	8007b10 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b04:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007b08:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b0a:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b0c:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b0e:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8007b10:	2200      	movs	r2, #0
 8007b12:	4611      	mov	r1, r2
 8007b14:	f7ff bde6 	b.w	80076e4 <USBH_CtlReq>

08007b18 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8007b18:	7883      	ldrb	r3, [r0, #2]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d105      	bne.n	8007b2a <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007b22:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b24:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 8007b26:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b28:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	f7ff bdd9 	b.w	80076e4 <USBH_CtlReq>

08007b32 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8007b32:	7883      	ldrb	r3, [r0, #2]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d105      	bne.n	8007b44 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007b38:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007b3c:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8007b3e:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 8007b40:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b42:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8007b44:	2200      	movs	r2, #0
 8007b46:	4611      	mov	r1, r2
 8007b48:	f7ff bdcc 	b.w	80076e4 <USBH_CtlReq>

08007b4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b4c:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b4e:	2308      	movs	r3, #8
 8007b50:	2400      	movs	r4, #0
{
 8007b52:	4615      	mov	r5, r2
 8007b54:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b5a:	e9cd 4100 	strd	r4, r1, [sp]
 8007b5e:	4623      	mov	r3, r4
 8007b60:	4622      	mov	r2, r4
 8007b62:	4629      	mov	r1, r5
 8007b64:	f00e fbc6 	bl	80162f4 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 8007b68:	4620      	mov	r0, r4
 8007b6a:	b005      	add	sp, #20
 8007b6c:	bd30      	pop	{r4, r5, pc}

08007b6e <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b6e:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b70:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8007b74:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b76:	2d00      	cmp	r5, #0
{
 8007b78:	461c      	mov	r4, r3
 8007b7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
 8007b7e:	bf18      	it	ne
 8007b80:	2300      	movne	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b86:	2301      	movs	r3, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9101      	str	r1, [sp, #4]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	4621      	mov	r1, r4
 8007b92:	f00e fbaf 	bl	80162f4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8007b96:	2000      	movs	r0, #0
 8007b98:	b005      	add	sp, #20
 8007b9a:	bd30      	pop	{r4, r5, pc}

08007b9c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b9c:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b9e:	2400      	movs	r4, #0
{
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ba4:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	9101      	str	r1, [sp, #4]
 8007bac:	9200      	str	r2, [sp, #0]
 8007bae:	4623      	mov	r3, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f00e fb9f 	bl	80162f4 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	b005      	add	sp, #20
 8007bba:	bd30      	pop	{r4, r5, pc}

08007bbc <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bbc:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bbe:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8007bc2:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bc4:	2d00      	cmp	r5, #0
{
 8007bc6:	461c      	mov	r4, r3
 8007bc8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
 8007bcc:	bf18      	it	ne
 8007bce:	2300      	movne	r3, #0
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9101      	str	r1, [sp, #4]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2302      	movs	r3, #2
 8007bde:	4621      	mov	r1, r4
 8007be0:	f00e fb88 	bl	80162f4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8007be4:	2000      	movs	r0, #0
 8007be6:	b005      	add	sp, #20
 8007be8:	bd30      	pop	{r4, r5, pc}

08007bea <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007bea:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bec:	2400      	movs	r4, #0
{
 8007bee:	b085      	sub	sp, #20
 8007bf0:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bf2:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	9101      	str	r1, [sp, #4]
 8007bfa:	9200      	str	r2, [sp, #0]
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f00e fb78 	bl	80162f4 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 8007c04:	4620      	mov	r0, r4
 8007c06:	b005      	add	sp, #20
 8007c08:	bd30      	pop	{r4, r5, pc}

08007c0a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c0c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007c10:	9402      	str	r4, [sp, #8]
 8007c12:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8007c16:	9401      	str	r4, [sp, #4]
 8007c18:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8007c1c:	9400      	str	r4, [sp, #0]
 8007c1e:	f00e fb43 	bl	80162a8 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8007c22:	2000      	movs	r0, #0
 8007c24:	b004      	add	sp, #16
 8007c26:	bd10      	pop	{r4, pc}

08007c28 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c28:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c2a:	f00e fb55 	bl	80162d8 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8007c2e:	2000      	movs	r0, #0
 8007c30:	bd08      	pop	{r3, pc}

08007c32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c32:	2300      	movs	r3, #0
 8007c34:	b530      	push	{r4, r5, lr}
 8007c36:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007c3a:	f854 5b04 	ldr.w	r5, [r4], #4
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	042d      	lsls	r5, r5, #16
 8007c42:	d407      	bmi.n	8007c54 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c44:	33e0      	adds	r3, #224	; 0xe0
 8007c46:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8007c4a:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c4c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 8007c50:	b2d0      	uxtb	r0, r2
 8007c52:	bd30      	pop	{r4, r5, pc}
 8007c54:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8007c56:	2b0b      	cmp	r3, #11
 8007c58:	d1ef      	bne.n	8007c3a <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8007c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5e:	e7f7      	b.n	8007c50 <USBH_AllocPipe+0x1e>

08007c60 <USBH_FreePipe>:
  if (idx < 11U)
 8007c60:	290a      	cmp	r1, #10
 8007c62:	bf9f      	itttt	ls
 8007c64:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 8007c68:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8007c6c:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8007c70:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8007c74:	2000      	movs	r0, #0
 8007c76:	4770      	bx	lr

08007c78 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <disk_status+0x10>)
 8007c7a:	181a      	adds	r2, r3, r0
 8007c7c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	7b10      	ldrb	r0, [r2, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	4718      	bx	r3
 8007c88:	20000998 	.word	0x20000998

08007c8c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <disk_initialize+0x1c>)
 8007c8e:	5c1a      	ldrb	r2, [r3, r0]
 8007c90:	b942      	cbnz	r2, 8007ca4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8007c92:	2201      	movs	r2, #1
 8007c94:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c96:	181a      	adds	r2, r3, r0
 8007c98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	7b10      	ldrb	r0, [r2, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4718      	bx	r3
  }
  return stat;
}
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	4770      	bx	lr
 8007ca8:	20000998 	.word	0x20000998

08007cac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007cac:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cae:	4c05      	ldr	r4, [pc, #20]	; (8007cc4 <disk_read+0x18>)
 8007cb0:	1825      	adds	r5, r4, r0
 8007cb2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007cb6:	6860      	ldr	r0, [r4, #4]
 8007cb8:	6884      	ldr	r4, [r0, #8]
 8007cba:	7b28      	ldrb	r0, [r5, #12]
 8007cbc:	46a4      	mov	ip, r4
  return res;
}
 8007cbe:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007cc0:	4760      	bx	ip
 8007cc2:	bf00      	nop
 8007cc4:	20000998 	.word	0x20000998

08007cc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007cc8:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cca:	4c05      	ldr	r4, [pc, #20]	; (8007ce0 <disk_write+0x18>)
 8007ccc:	1825      	adds	r5, r4, r0
 8007cce:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007cd2:	6860      	ldr	r0, [r4, #4]
 8007cd4:	68c4      	ldr	r4, [r0, #12]
 8007cd6:	7b28      	ldrb	r0, [r5, #12]
 8007cd8:	46a4      	mov	ip, r4
  return res;
}
 8007cda:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007cdc:	4760      	bx	ip
 8007cde:	bf00      	nop
 8007ce0:	20000998 	.word	0x20000998

08007ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ce4:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ce6:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <disk_ioctl+0x14>)
 8007ce8:	181c      	adds	r4, r3, r0
 8007cea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	7b20      	ldrb	r0, [r4, #12]
 8007cf2:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8007cf4:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cf6:	4718      	bx	r3
 8007cf8:	20000998 	.word	0x20000998

08007cfc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007cfc:	3801      	subs	r0, #1
 8007cfe:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007d00:	4291      	cmp	r1, r2
 8007d02:	d100      	bne.n	8007d06 <mem_cpy+0xa>
		*d++ = *s++;
}
 8007d04:	4770      	bx	lr
		*d++ = *s++;
 8007d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d0a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8007d0e:	e7f7      	b.n	8007d00 <mem_cpy+0x4>

08007d10 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007d10:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8007d14:	0a49      	lsrs	r1, r1, #9
 8007d16:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d1a:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007d1e:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d22:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d24:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8007d26:	b130      	cbz	r0, 8007d36 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d28:	4281      	cmp	r1, r0
 8007d2a:	d302      	bcc.n	8007d32 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d2c:	1a09      	subs	r1, r1, r0
 8007d2e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d30:	e7f8      	b.n	8007d24 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d32:	6858      	ldr	r0, [r3, #4]
 8007d34:	4408      	add	r0, r1
}
 8007d36:	4770      	bx	lr

08007d38 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8007d3e:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007d40:	01c3      	lsls	r3, r0, #7
 8007d42:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8007d46:	f812 0b01 	ldrb.w	r0, [r2], #1
 8007d4a:	4403      	add	r3, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8007d52:	d1f5      	bne.n	8007d40 <sum_sfn+0x8>
	return sum;
}
 8007d54:	4770      	bx	lr

08007d56 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d56:	6803      	ldr	r3, [r0, #0]
{
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 8007d5c:	b153      	cbz	r3, 8007d74 <get_ldnumber+0x1e>
 8007d5e:	4619      	mov	r1, r3
 8007d60:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d62:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007d66:	281f      	cmp	r0, #31
 8007d68:	d910      	bls.n	8007d8c <get_ldnumber+0x36>
 8007d6a:	283a      	cmp	r0, #58	; 0x3a
 8007d6c:	d1f8      	bne.n	8007d60 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8007d6e:	1c59      	adds	r1, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d70:	428a      	cmp	r2, r1
 8007d72:	d002      	beq.n	8007d7a <get_ldnumber+0x24>
	int vol = -1;
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	e007      	b.n	8007d8a <get_ldnumber+0x34>
			i = *tp++ - '0'; 
 8007d7a:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d7c:	3b30      	subs	r3, #48	; 0x30
 8007d7e:	b2d9      	uxtb	r1, r3
 8007d80:	2901      	cmp	r1, #1
 8007d82:	d8f7      	bhi.n	8007d74 <get_ldnumber+0x1e>
			i = *tp++ - '0'; 
 8007d84:	4618      	mov	r0, r3
					vol = (int)i;
					*path = ++tt;
 8007d86:	3201      	adds	r2, #1
 8007d88:	6022      	str	r2, [r4, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8007d8a:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7fc      	b.n	8007d8a <get_ldnumber+0x34>

08007d90 <get_fileinfo>:
{
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dp->sect) {		/* Get SFN */
 8007d92:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
{
 8007d96:	460d      	mov	r5, r1
	p = fno->fname;
 8007d98:	3109      	adds	r1, #9
	if (dp->sect) {		/* Get SFN */
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d035      	beq.n	8007e0a <get_fileinfo+0x7a>
		dir = dp->dir;
 8007d9e:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007da2:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
		dir = dp->dir;
 8007da6:	4614      	mov	r4, r2
 8007da8:	f102 070b 	add.w	r7, r2, #11
			c = (TCHAR)dir[i++];
 8007dac:	f814 3b01 	ldrb.w	r3, [r4], #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d01a      	beq.n	8007dea <get_fileinfo+0x5a>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	eba4 0602 	sub.w	r6, r4, r2
 8007dba:	d04c      	beq.n	8007e56 <get_fileinfo+0xc6>
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007dbc:	2e09      	cmp	r6, #9
 8007dbe:	d102      	bne.n	8007dc6 <get_fileinfo+0x36>
 8007dc0:	f881 c000 	strb.w	ip, [r1]
 8007dc4:	3101      	adds	r1, #1
			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
 8007dc6:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8007dca:	f1be 0f19 	cmp.w	lr, #25
 8007dce:	d80a      	bhi.n	8007de6 <get_fileinfo+0x56>
 8007dd0:	2e09      	cmp	r6, #9
 8007dd2:	bf34      	ite	cc
 8007dd4:	2608      	movcc	r6, #8
 8007dd6:	2610      	movcs	r6, #16
 8007dd8:	f892 e00c 	ldrb.w	lr, [r2, #12]
 8007ddc:	ea1e 0f06 	tst.w	lr, r6
				c += 0x20;			/* To lower */
 8007de0:	bf1c      	itt	ne
 8007de2:	3320      	addne	r3, #32
 8007de4:	b2db      	uxtbne	r3, r3
			*p++ = c;
 8007de6:	700b      	strb	r3, [r1, #0]
 8007de8:	3101      	adds	r1, #1
		while (i < 11) {		/* Copy name body and extension */
 8007dea:	42bc      	cmp	r4, r7
 8007dec:	d1de      	bne.n	8007dac <get_fileinfo+0x1c>
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007dee:	7ad3      	ldrb	r3, [r2, #11]
 8007df0:	722b      	strb	r3, [r5, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007df2:	69d3      	ldr	r3, [r2, #28]
 8007df4:	602b      	str	r3, [r5, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007df6:	7e54      	ldrb	r4, [r2, #25]
 8007df8:	7e13      	ldrb	r3, [r2, #24]
 8007dfa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007dfe:	80ab      	strh	r3, [r5, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007e00:	7dd4      	ldrb	r4, [r2, #23]
 8007e02:	7d93      	ldrb	r3, [r2, #22]
 8007e04:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8007e08:	80eb      	strh	r3, [r5, #6]
	*p = 0;		/* Terminate SFN string by a \0 */
 8007e0a:	2400      	movs	r4, #0
 8007e0c:	700c      	strb	r4, [r1, #0]
	if (fno->lfname) {
 8007e0e:	69ae      	ldr	r6, [r5, #24]
 8007e10:	b12e      	cbz	r6, 8007e1e <get_fileinfo+0x8e>
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8007e12:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8007e16:	b91b      	cbnz	r3, 8007e20 <get_fileinfo+0x90>
		i = 0; p = fno->lfname;
 8007e18:	2400      	movs	r4, #0
		p[i] = 0;	/* Terminate LFN string by a \0 */
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	5533      	strb	r3, [r6, r4]
}
 8007e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
 8007e20:	69eb      	ldr	r3, [r5, #28]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0f8      	beq.n	8007e18 <get_fileinfo+0x88>
 8007e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e2a:	f8b0 2220 	ldrh.w	r2, [r0, #544]	; 0x220
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d0f2      	beq.n	8007e18 <get_fileinfo+0x88>
			lfn = dp->lfn;
 8007e32:	f8d0 721c 	ldr.w	r7, [r0, #540]	; 0x21c
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8007e36:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0ed      	beq.n	8007e1a <get_fileinfo+0x8a>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f001 fd40 	bl	80098c4 <ff_convert>
				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d0e7      	beq.n	8007e18 <get_fileinfo+0x88>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
 8007e48:	69eb      	ldr	r3, [r5, #28]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	429c      	cmp	r4, r3
 8007e4e:	d2e3      	bcs.n	8007e18 <get_fileinfo+0x88>
				p[i++] = (TCHAR)w;
 8007e50:	5530      	strb	r0, [r6, r4]
 8007e52:	3401      	adds	r4, #1
 8007e54:	e7ef      	b.n	8007e36 <get_fileinfo+0xa6>
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007e56:	2e09      	cmp	r6, #9
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e58:	f04f 03e5 	mov.w	r3, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007e5c:	d1c3      	bne.n	8007de6 <get_fileinfo+0x56>
 8007e5e:	e7af      	b.n	8007dc0 <get_fileinfo+0x30>

08007e60 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007e60:	7eca      	ldrb	r2, [r1, #27]
 8007e62:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8007e64:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8007e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007e6a:	bf01      	itttt	eq
 8007e6c:	7d48      	ldrbeq	r0, [r1, #21]
 8007e6e:	7d0a      	ldrbeq	r2, [r1, #20]
 8007e70:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8007e74:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	4770      	bx	lr

08007e7c <sync_window.part.1>:
FRESULT sync_window (
 8007e7c:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8007e7e:	f8d0 5230 	ldr.w	r5, [r0, #560]	; 0x230
FRESULT sync_window (
 8007e82:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007e84:	4601      	mov	r1, r0
 8007e86:	2301      	movs	r3, #1
 8007e88:	462a      	mov	r2, r5
 8007e8a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8007e8e:	f7ff ff1b 	bl	8007cc8 <disk_write>
 8007e92:	b9d0      	cbnz	r0, 8007eca <sync_window.part.1+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e94:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8007e98:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8007e9c:	1aeb      	subs	r3, r5, r3
 8007e9e:	4293      	cmp	r3, r2
			fs->wflag = 0;
 8007ea0:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ea4:	d301      	bcc.n	8007eaa <sync_window.part.1+0x2e>
	FRESULT res = FR_OK;
 8007ea6:	2000      	movs	r0, #0
}
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007eaa:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8007eae:	2e01      	cmp	r6, #1
 8007eb0:	d9f9      	bls.n	8007ea6 <sync_window.part.1+0x2a>
					wsect += fs->fsize;
 8007eb2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007eb6:	4621      	mov	r1, r4
					wsect += fs->fsize;
 8007eb8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007eba:	462a      	mov	r2, r5
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007ec2:	f7ff ff01 	bl	8007cc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ec6:	3e01      	subs	r6, #1
 8007ec8:	e7f1      	b.n	8007eae <sync_window.part.1+0x32>
			res = FR_DISK_ERR;
 8007eca:	2001      	movs	r0, #1
 8007ecc:	e7ec      	b.n	8007ea8 <sync_window.part.1+0x2c>

08007ece <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ece:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8007ed2:	b10b      	cbz	r3, 8007ed8 <sync_window+0xa>
 8007ed4:	f7ff bfd2 	b.w	8007e7c <sync_window.part.1>
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	4770      	bx	lr

08007edc <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007edc:	f8d0 3230 	ldr.w	r3, [r0, #560]	; 0x230
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ee2:	428b      	cmp	r3, r1
{
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007ee8:	d013      	beq.n	8007f12 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8007eea:	f7ff fff0 	bl	8007ece <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b968      	cbnz	r0, 8007f0e <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8007efc:	f7ff fed6 	bl	8007cac <disk_read>
 8007f00:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8007f02:	bf1c      	itt	ne
 8007f04:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8007f08:	2401      	movne	r4, #1
			fs->winsect = sector;
 8007f0a:	f8c6 5230 	str.w	r5, [r6, #560]	; 0x230
}
 8007f0e:	4620      	mov	r0, r4
 8007f10:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8007f12:	2400      	movs	r4, #0
 8007f14:	e7fb      	b.n	8007f0e <move_window+0x32>
	...

08007f18 <check_fs>:
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007f18:	2300      	movs	r3, #0
{
 8007f1a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007f1c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f24:	f8c0 3230 	str.w	r3, [r0, #560]	; 0x230
{
 8007f28:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007f2a:	f7ff ffd7 	bl	8007edc <move_window>
 8007f2e:	b9c0      	cbnz	r0, 8007f62 <check_fs+0x4a>
		return 3;

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007f30:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8007f34:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8007f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f3c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d110      	bne.n	8007f66 <check_fs+0x4e>
		return 2;

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007f44:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8007f48:	4a08      	ldr	r2, [pc, #32]	; (8007f6c <check_fs+0x54>)
 8007f4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d006      	beq.n	8007f60 <check_fs+0x48>
		return 0;
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007f52:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8007f56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8007f5a:	1a80      	subs	r0, r0, r2
 8007f5c:	bf18      	it	ne
 8007f5e:	2001      	movne	r0, #1
		return 0;

	return 1;
}
 8007f60:	bd10      	pop	{r4, pc}
		return 3;
 8007f62:	2003      	movs	r0, #3
 8007f64:	e7fc      	b.n	8007f60 <check_fs+0x48>
		return 2;
 8007f66:	2002      	movs	r0, #2
 8007f68:	e7fa      	b.n	8007f60 <check_fs+0x48>
 8007f6a:	bf00      	nop
 8007f6c:	00544146 	.word	0x00544146

08007f70 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007f70:	2300      	movs	r3, #0
{
 8007f72:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8007f74:	6003      	str	r3, [r0, #0]
{
 8007f76:	b085      	sub	sp, #20
 8007f78:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8007f7a:	4608      	mov	r0, r1
{
 8007f7c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8007f7e:	f7ff feea 	bl	8007d56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f82:	1e06      	subs	r6, r0, #0
 8007f84:	f2c0 811c 	blt.w	80081c0 <find_volume+0x250>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f88:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <find_volume+0x260>)
 8007f8a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	f000 8118 	beq.w	80081c4 <find_volume+0x254>
	return ff_req_grant(fs->sobj);
 8007f94:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8007f98:	f001 fcd8 	bl	800994c <ff_req_grant>

	ENTER_FF(fs);						/* Lock the volume */
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f000 8113 	beq.w	80081c8 <find_volume+0x258>
	*rfs = fs;							/* Return pointer to the file system object */
 8007fa2:	603c      	str	r4, [r7, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fa4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8007fa8:	b173      	cbz	r3, 8007fc8 <find_volume+0x58>
		stat = disk_status(fs->drv);
 8007faa:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8007fae:	f7ff fe63 	bl	8007c78 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fb2:	07c7      	lsls	r7, r0, #31
 8007fb4:	d408      	bmi.n	8007fc8 <find_volume+0x58>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	f000 80e0 	beq.w	800817c <find_volume+0x20c>
 8007fbc:	f010 0004 	ands.w	r0, r0, #4
 8007fc0:	d000      	beq.n	8007fc4 <find_volume+0x54>
				return FR_WRITE_PROTECTED;
 8007fc2:	200a      	movs	r0, #10
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 8007fc4:	b005      	add	sp, #20
 8007fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8007fc8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fca:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8007fcc:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fd0:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fd4:	f7ff fe5a 	bl	8007c8c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007fd8:	07c1      	lsls	r1, r0, #31
 8007fda:	f100 80f7 	bmi.w	80081cc <find_volume+0x25c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007fde:	b10d      	cbz	r5, 8007fe4 <find_volume+0x74>
 8007fe0:	0742      	lsls	r2, r0, #29
 8007fe2:	d4ee      	bmi.n	8007fc2 <find_volume+0x52>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ff96 	bl	8007f18 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007fec:	2801      	cmp	r0, #1
 8007fee:	f040 80d0 	bne.w	8008192 <find_volume+0x222>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007ff8:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8007ffc:	b103      	cbz	r3, 8008000 <find_volume+0x90>
 8007ffe:	680b      	ldr	r3, [r1, #0]
 8008000:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008004:	3201      	adds	r2, #1
 8008006:	2a04      	cmp	r2, #4
 8008008:	f101 0110 	add.w	r1, r1, #16
 800800c:	d1f4      	bne.n	8007ff8 <find_volume+0x88>
 800800e:	2600      	movs	r6, #0
			bsect = br[i];
 8008010:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008014:	2d00      	cmp	r5, #0
 8008016:	f000 80b3 	beq.w	8008180 <find_volume+0x210>
 800801a:	4629      	mov	r1, r5
 800801c:	4620      	mov	r0, r4
 800801e:	f7ff ff7b 	bl	8007f18 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008022:	2800      	cmp	r0, #0
 8008024:	f040 80ad 	bne.w	8008182 <find_volume+0x212>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008028:	7b22      	ldrb	r2, [r4, #12]
 800802a:	7ae3      	ldrb	r3, [r4, #11]
 800802c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008034:	f040 80b0 	bne.w	8008198 <find_volume+0x228>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008038:	7de3      	ldrb	r3, [r4, #23]
 800803a:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800803c:	7c26      	ldrb	r6, [r4, #16]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800803e:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008042:	bf08      	it	eq
 8008044:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008046:	1e73      	subs	r3, r6, #1
 8008048:	2b01      	cmp	r3, #1
	fs->fsize = fasize;
 800804a:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800804e:	f884 6203 	strb.w	r6, [r4, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008052:	f200 80a1 	bhi.w	8008198 <find_volume+0x228>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008056:	f894 e00d 	ldrb.w	lr, [r4, #13]
 800805a:	f884 e202 	strb.w	lr, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800805e:	f1be 0f00 	cmp.w	lr, #0
 8008062:	f000 8099 	beq.w	8008198 <find_volume+0x228>
 8008066:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 800806a:	ea13 0f0e 	tst.w	r3, lr
 800806e:	f040 8093 	bne.w	8008198 <find_volume+0x228>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008072:	7ca3      	ldrb	r3, [r4, #18]
 8008074:	7c60      	ldrb	r0, [r4, #17]
 8008076:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800807a:	0703      	lsls	r3, r0, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800807c:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008080:	f040 808a 	bne.w	8008198 <find_volume+0x228>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008084:	7ce2      	ldrb	r2, [r4, #19]
 8008086:	7d23      	ldrb	r3, [r4, #20]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008088:	7be7      	ldrb	r7, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800808a:	ea52 2303 	orrs.w	r3, r2, r3, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800808e:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008090:	bf08      	it	eq
 8008092:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008094:	ea52 2207 	orrs.w	r2, r2, r7, lsl #8
 8008098:	d07e      	beq.n	8008198 <find_volume+0x228>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800809a:	fb01 fc06 	mul.w	ip, r1, r6
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800809e:	eb02 1710 	add.w	r7, r2, r0, lsr #4
 80080a2:	4467      	add	r7, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80080a4:	42bb      	cmp	r3, r7
 80080a6:	d377      	bcc.n	8008198 <find_volume+0x228>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80080a8:	1bdb      	subs	r3, r3, r7
 80080aa:	fbb3 f3fe 	udiv	r3, r3, lr
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d072      	beq.n	8008198 <find_volume+0x228>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80080b2:	f640 76f5 	movw	r6, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80080b6:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80080ba:	42b3      	cmp	r3, r6
 80080bc:	bf94      	ite	ls
 80080be:	2601      	movls	r6, #1
 80080c0:	2602      	movhi	r6, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80080c2:	4573      	cmp	r3, lr
 80080c4:	bf88      	it	hi
 80080c6:	2603      	movhi	r6, #3
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80080c8:	442a      	add	r2, r5
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80080ca:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
 80080cc:	442f      	add	r7, r5
	if (fmt == FS_FAT32) {
 80080ce:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80080d0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80080d4:	f8c4 5220 	str.w	r5, [r4, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80080d8:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80080dc:	f8c4 722c 	str.w	r7, [r4, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80080e0:	d15e      	bne.n	80081a0 <find_volume+0x230>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d158      	bne.n	8008198 <find_volume+0x228>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80080e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80080e8:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80080ea:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80080ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80080f2:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 80080f6:	d34f      	bcc.n	8008198 <find_volume+0x228>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80080f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080fc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 8008100:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
	fs->fsi_flag = 0x80;
 8008104:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008106:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8008108:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800810c:	d12d      	bne.n	800816a <find_volume+0x1fa>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800810e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8008112:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800811a:	2b01      	cmp	r3, #1
 800811c:	d125      	bne.n	800816a <find_volume+0x1fa>
		&& move_window(fs, bsect + 1) == FR_OK)
 800811e:	1c69      	adds	r1, r5, #1
 8008120:	4620      	mov	r0, r4
 8008122:	f7ff fedb 	bl	8007edc <move_window>
 8008126:	bb00      	cbnz	r0, 800816a <find_volume+0x1fa>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008128:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800812c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8008130:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008138:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800813c:	4293      	cmp	r3, r2
 800813e:	d114      	bne.n	800816a <find_volume+0x1fa>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <find_volume+0x264>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d110      	bne.n	800816a <find_volume+0x1fa>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008148:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800814c:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8008150:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008154:	3320      	adds	r3, #32
 8008156:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008158:	bf01      	itttt	eq
 800815a:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800815e:	f8c4 3214 	streq.w	r3, [r4, #532]	; 0x214
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008162:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8008166:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
	fs->id = ++Fsid;	/* File system mount ID */
 800816a:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <find_volume+0x268>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800816c:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008170:	8813      	ldrh	r3, [r2, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	b29b      	uxth	r3, r3
 8008176:	8013      	strh	r3, [r2, #0]
 8008178:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
	return FR_OK;
 800817c:	2000      	movs	r0, #0
 800817e:	e721      	b.n	8007fc4 <find_volume+0x54>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008180:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008182:	3601      	adds	r6, #1
 8008184:	2e04      	cmp	r6, #4
 8008186:	f47f af43 	bne.w	8008010 <find_volume+0xa0>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800818a:	2803      	cmp	r0, #3
 800818c:	d104      	bne.n	8008198 <find_volume+0x228>
 800818e:	2001      	movs	r0, #1
 8008190:	e718      	b.n	8007fc4 <find_volume+0x54>
 8008192:	2803      	cmp	r0, #3
 8008194:	d0fb      	beq.n	800818e <find_volume+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008196:	b108      	cbz	r0, 800819c <find_volume+0x22c>
 8008198:	200d      	movs	r0, #13
 800819a:	e713      	b.n	8007fc4 <find_volume+0x54>
	bsect = 0;
 800819c:	4605      	mov	r5, r0
 800819e:	e743      	b.n	8008028 <find_volume+0xb8>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d0f9      	beq.n	8008198 <find_volume+0x228>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80081a4:	4462      	add	r2, ip
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081a6:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80081a8:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
 80081ac:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081b0:	bf1b      	ittet	ne
 80081b2:	18d2      	addne	r2, r2, r3
 80081b4:	f003 0301 	andne.w	r3, r3, #1
 80081b8:	4613      	moveq	r3, r2
 80081ba:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80081be:	e796      	b.n	80080ee <find_volume+0x17e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80081c0:	200b      	movs	r0, #11
 80081c2:	e6ff      	b.n	8007fc4 <find_volume+0x54>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081c4:	200c      	movs	r0, #12
 80081c6:	e6fd      	b.n	8007fc4 <find_volume+0x54>
	ENTER_FF(fs);						/* Lock the volume */
 80081c8:	200f      	movs	r0, #15
 80081ca:	e6fb      	b.n	8007fc4 <find_volume+0x54>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081cc:	2003      	movs	r0, #3
 80081ce:	e6f9      	b.n	8007fc4 <find_volume+0x54>
 80081d0:	2000098c 	.word	0x2000098c
 80081d4:	41615252 	.word	0x41615252
 80081d8:	20000994 	.word	0x20000994

080081dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80081dc:	b510      	push	{r4, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80081de:	4604      	mov	r4, r0
 80081e0:	b908      	cbnz	r0, 80081e6 <validate+0xa>
		return FR_INVALID_OBJECT;
 80081e2:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80081e4:	bd10      	pop	{r4, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80081e6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0f9      	beq.n	80081e2 <validate+0x6>
 80081ee:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	d0f5      	beq.n	80081e2 <validate+0x6>
 80081f6:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80081fa:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80081fe:	4291      	cmp	r1, r2
 8008200:	d1ef      	bne.n	80081e2 <validate+0x6>
 8008202:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008206:	f7ff fd37 	bl	8007c78 <disk_status>
 800820a:	07c3      	lsls	r3, r0, #31
 800820c:	d4e9      	bmi.n	80081e2 <validate+0x6>
	ENTER_FF(fil->fs);		/* Lock file system */
 800820e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return ff_req_grant(fs->sobj);
 8008212:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8008216:	f001 fb99 	bl	800994c <ff_req_grant>
	return FR_OK;
 800821a:	2800      	cmp	r0, #0
 800821c:	bf0c      	ite	eq
 800821e:	200f      	moveq	r0, #15
 8008220:	2000      	movne	r0, #0
 8008222:	e7df      	b.n	80081e4 <validate+0x8>

08008224 <unlock_fs>:
	if (fs &&
 8008224:	b158      	cbz	r0, 800823e <unlock_fs+0x1a>
		res != FR_INVALID_DRIVE &&
 8008226:	290f      	cmp	r1, #15
 8008228:	d805      	bhi.n	8008236 <unlock_fs+0x12>
 800822a:	f44f 431a 	mov.w	r3, #39424	; 0x9a00
 800822e:	fa23 f101 	lsr.w	r1, r3, r1
 8008232:	07cb      	lsls	r3, r1, #31
 8008234:	d403      	bmi.n	800823e <unlock_fs+0x1a>
		ff_rel_grant(fs->sobj);
 8008236:	f8d0 020c 	ldr.w	r0, [r0, #524]	; 0x20c
 800823a:	f001 bb90 	b.w	800995e <ff_rel_grant>
}
 800823e:	4770      	bx	lr

08008240 <sync_fs>:
{
 8008240:	b510      	push	{r4, lr}
 8008242:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008244:	f7ff fe43 	bl	8007ece <sync_window>
	if (res == FR_OK) {
 8008248:	2800      	cmp	r0, #0
 800824a:	d14c      	bne.n	80082e6 <sync_fs+0xa6>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800824c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008250:	2b03      	cmp	r3, #3
 8008252:	d13f      	bne.n	80082d4 <sync_fs+0x94>
 8008254:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8008258:	2b01      	cmp	r3, #1
 800825a:	d13b      	bne.n	80082d4 <sync_fs+0x94>
	BYTE *d = (BYTE*)dst;
 800825c:	4623      	mov	r3, r4
 800825e:	f504 7200 	add.w	r2, r4, #512	; 0x200
	while (cnt--)
 8008262:	4293      	cmp	r3, r2
 8008264:	d140      	bne.n	80082e8 <sync_fs+0xa8>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008266:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800826a:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800826e:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <sync_fs+0xb0>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008270:	4621      	mov	r1, r4
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008272:	6023      	str	r3, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008274:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8008278:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800827c:	3320      	adds	r3, #32
 800827e:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008282:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008286:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800828a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800828e:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 8008292:	f884 21e9 	strb.w	r2, [r4, #489]	; 0x1e9
 8008296:	0c1a      	lsrs	r2, r3, #16
 8008298:	0e1b      	lsrs	r3, r3, #24
 800829a:	f884 31eb 	strb.w	r3, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800829e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80082a2:	f884 21ea 	strb.w	r2, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80082a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80082aa:	f884 21ed 	strb.w	r2, [r4, #493]	; 0x1ed
 80082ae:	0c1a      	lsrs	r2, r3, #16
 80082b0:	f884 21ee 	strb.w	r2, [r4, #494]	; 0x1ee
			fs->winsect = fs->volbase + 1;
 80082b4:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80082b8:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
			fs->winsect = fs->volbase + 1;
 80082bc:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80082be:	0e1b      	lsrs	r3, r3, #24
 80082c0:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80082c4:	f8c4 2230 	str.w	r2, [r4, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80082c8:	2301      	movs	r3, #1
 80082ca:	f7ff fcfd 	bl	8007cc8 <disk_write>
			fs->fsi_flag = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80082d4:	2200      	movs	r2, #0
 80082d6:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80082da:	4611      	mov	r1, r2
 80082dc:	f7ff fd02 	bl	8007ce4 <disk_ioctl>
			res = FR_DISK_ERR;
 80082e0:	3000      	adds	r0, #0
 80082e2:	bf18      	it	ne
 80082e4:	2001      	movne	r0, #1
}
 80082e6:	bd10      	pop	{r4, pc}
		*d++ = (BYTE)val;
 80082e8:	f803 0b01 	strb.w	r0, [r3], #1
 80082ec:	e7b9      	b.n	8008262 <sync_fs+0x22>
 80082ee:	bf00      	nop
 80082f0:	41615252 	.word	0x41615252

080082f4 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082f4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
	clst -= 2;
 80082f8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80082fa:	3b02      	subs	r3, #2
 80082fc:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80082fe:	bf83      	ittte	hi
 8008300:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 8008304:	f8d0 022c 	ldrhi.w	r0, [r0, #556]	; 0x22c
 8008308:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800830c:	2000      	movls	r0, #0
}
 800830e:	4770      	bx	lr

08008310 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008310:	2901      	cmp	r1, #1
{
 8008312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008314:	4606      	mov	r6, r0
 8008316:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008318:	d959      	bls.n	80083ce <get_fat+0xbe>
 800831a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800831e:	428b      	cmp	r3, r1
 8008320:	d955      	bls.n	80083ce <get_fat+0xbe>
		switch (fs->fs_type) {
 8008322:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8008326:	2b02      	cmp	r3, #2
 8008328:	d027      	beq.n	800837a <get_fat+0x6a>
 800832a:	2b03      	cmp	r3, #3
 800832c:	d036      	beq.n	800839c <get_fat+0x8c>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d14d      	bne.n	80083ce <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8008332:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008336:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 800833a:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800833e:	f7ff fdcd 	bl	8007edc <move_window>
 8008342:	b110      	cbz	r0, 800834a <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800834a:	f8d6 1224 	ldr.w	r1, [r6, #548]	; 0x224
			wc = fs->win.d8[bc++ % SS(fs)];
 800834e:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008350:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8008354:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008358:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800835a:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800835c:	f7ff fdbe 	bl	8007edc <move_window>
 8008360:	2800      	cmp	r0, #0
 8008362:	d1ef      	bne.n	8008344 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008364:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8008368:	5df0      	ldrb	r0, [r6, r7]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800836a:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800836c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008370:	bf4c      	ite	mi
 8008372:	0900      	lsrmi	r0, r0, #4
 8008374:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008378:	e7e6      	b.n	8008348 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800837a:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 800837e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8008382:	f7ff fdab 	bl	8007edc <move_window>
 8008386:	2800      	cmp	r0, #0
 8008388:	d1dc      	bne.n	8008344 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800838a:	006d      	lsls	r5, r5, #1
 800838c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8008390:	1973      	adds	r3, r6, r5
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	5d70      	ldrb	r0, [r6, r5]
 8008396:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800839a:	e7d5      	b.n	8008348 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800839c:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 80083a0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80083a4:	f7ff fd9a 	bl	8007edc <move_window>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d1cb      	bne.n	8008344 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80083ac:	00ad      	lsls	r5, r5, #2
 80083ae:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80083b2:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80083b4:	7898      	ldrb	r0, [r3, #2]
 80083b6:	78da      	ldrb	r2, [r3, #3]
 80083b8:	0400      	lsls	r0, r0, #16
 80083ba:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80083be:	5d72      	ldrb	r2, [r6, r5]
 80083c0:	785b      	ldrb	r3, [r3, #1]
 80083c2:	4310      	orrs	r0, r2
 80083c4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80083c8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80083cc:	e7bc      	b.n	8008348 <get_fat+0x38>
			val = 1;	/* Internal error */
 80083ce:	2001      	movs	r0, #1
	return val;
 80083d0:	e7ba      	b.n	8008348 <get_fat+0x38>

080083d2 <dir_sdi>:
{
 80083d2:	b570      	push	{r4, r5, r6, lr}
 80083d4:	4604      	mov	r4, r0
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80083d6:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 80083da:	460d      	mov	r5, r1
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80083dc:	2a01      	cmp	r2, #1
	dp->index = (WORD)idx;	/* Current index */
 80083de:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80083e2:	d101      	bne.n	80083e8 <dir_sdi+0x16>
		return FR_INT_ERR;
 80083e4:	2002      	movs	r0, #2
}
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80083e8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80083ec:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 80083f0:	4291      	cmp	r1, r2
 80083f2:	d9f7      	bls.n	80083e4 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80083f4:	b9f2      	cbnz	r2, 8008434 <dir_sdi+0x62>
 80083f6:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80083fa:	2903      	cmp	r1, #3
 80083fc:	d102      	bne.n	8008404 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 80083fe:	f8d3 1228 	ldr.w	r1, [r3, #552]	; 0x228
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008402:	b9c1      	cbnz	r1, 8008436 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008404:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8008408:	42a9      	cmp	r1, r5
 800840a:	d9eb      	bls.n	80083e4 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800840c:	f8d3 0228 	ldr.w	r0, [r3, #552]	; 0x228
	dp->clust = clst;	/* Current cluster# */
 8008410:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8008414:	2800      	cmp	r0, #0
 8008416:	d0e5      	beq.n	80083e4 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008418:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800841c:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008420:	f005 050f 	and.w	r5, r5, #15
 8008424:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008428:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800842c:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8008430:	2000      	movs	r0, #0
 8008432:	e7d8      	b.n	80083e6 <dir_sdi+0x14>
 8008434:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8008436:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008438:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 800843c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800843e:	42b5      	cmp	r5, r6
 8008440:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008444:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8008446:	d202      	bcs.n	800844e <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8008448:	f7ff ff54 	bl	80082f4 <clust2sect>
 800844c:	e7e0      	b.n	8008410 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800844e:	f7ff ff5f 	bl	8008310 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008452:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008454:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008456:	d009      	beq.n	800846c <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008458:	2801      	cmp	r0, #1
 800845a:	d9c3      	bls.n	80083e4 <dir_sdi+0x12>
 800845c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8008460:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008464:	4283      	cmp	r3, r0
 8008466:	d9bd      	bls.n	80083e4 <dir_sdi+0x12>
			idx -= ic;
 8008468:	1bad      	subs	r5, r5, r6
 800846a:	e7e8      	b.n	800843e <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800846c:	2001      	movs	r0, #1
 800846e:	e7ba      	b.n	80083e6 <dir_sdi+0x14>

08008470 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008470:	2901      	cmp	r1, #1
{
 8008472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008476:	4605      	mov	r5, r0
 8008478:	460c      	mov	r4, r1
 800847a:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800847c:	d970      	bls.n	8008560 <put_fat+0xf0>
 800847e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008482:	428b      	cmp	r3, r1
 8008484:	d96c      	bls.n	8008560 <put_fat+0xf0>
		switch (fs->fs_type) {
 8008486:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800848a:	2b02      	cmp	r3, #2
 800848c:	d03c      	beq.n	8008508 <put_fat+0x98>
 800848e:	2b03      	cmp	r3, #3
 8008490:	d04b      	beq.n	800852a <put_fat+0xba>
 8008492:	2b01      	cmp	r3, #1
 8008494:	d164      	bne.n	8008560 <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 8008496:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800849a:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 800849e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80084a2:	f7ff fd1b 	bl	8007edc <move_window>
			if (res != FR_OK) break;
 80084a6:	bb28      	cbnz	r0, 80084f4 <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084a8:	f014 0401 	ands.w	r4, r4, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80084ac:	f107 0801 	add.w	r8, r7, #1
 80084b0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084b4:	bf17      	itett	ne
 80084b6:	5deb      	ldrbne	r3, [r5, r7]
 80084b8:	b2f3      	uxtbeq	r3, r6
 80084ba:	f003 020f 	andne.w	r2, r3, #15
 80084be:	0133      	lslne	r3, r6, #4
 80084c0:	bf1c      	itt	ne
 80084c2:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80084c6:	4313      	orrne	r3, r2
 80084c8:	55eb      	strb	r3, [r5, r7]
			fs->wflag = 1;
 80084ca:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084cc:	f8d5 1224 	ldr.w	r1, [r5, #548]	; 0x224
			fs->wflag = 1;
 80084d0:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084d4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff fcff 	bl	8007edc <move_window>
			if (res != FR_OK) break;
 80084de:	b948      	cbnz	r0, 80084f4 <put_fat+0x84>
			p = &fs->win.d8[bc % SS(fs)];
 80084e0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80084e4:	b144      	cbz	r4, 80084f8 <put_fat+0x88>
 80084e6:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80084ea:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 80084ee:	2301      	movs	r3, #1
 80084f0:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
}
 80084f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80084f8:	f815 2008 	ldrb.w	r2, [r5, r8]
 80084fc:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8008500:	f022 020f 	bic.w	r2, r2, #15
 8008504:	4332      	orrs	r2, r6
 8008506:	e7f0      	b.n	80084ea <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008508:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 800850c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8008510:	f7ff fce4 	bl	8007edc <move_window>
			if (res != FR_OK) break;
 8008514:	2800      	cmp	r0, #0
 8008516:	d1ed      	bne.n	80084f4 <put_fat+0x84>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008518:	0064      	lsls	r4, r4, #1
 800851a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800851e:	552e      	strb	r6, [r5, r4]
 8008520:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8008524:	442c      	add	r4, r5
 8008526:	7062      	strb	r2, [r4, #1]
 8008528:	e7e1      	b.n	80084ee <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800852a:	f8d0 1224 	ldr.w	r1, [r0, #548]	; 0x224
 800852e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8008532:	f7ff fcd3 	bl	8007edc <move_window>
			if (res != FR_OK) break;
 8008536:	2800      	cmp	r0, #0
 8008538:	d1dc      	bne.n	80084f4 <put_fat+0x84>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800853a:	00a4      	lsls	r4, r4, #2
 800853c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8008540:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8008542:	78cb      	ldrb	r3, [r1, #3]
 8008544:	061b      	lsls	r3, r3, #24
 8008546:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800854a:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800854e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008552:	552a      	strb	r2, [r5, r4]
 8008554:	704b      	strb	r3, [r1, #1]
 8008556:	0c13      	lsrs	r3, r2, #16
 8008558:	0e12      	lsrs	r2, r2, #24
 800855a:	708b      	strb	r3, [r1, #2]
 800855c:	70ca      	strb	r2, [r1, #3]
 800855e:	e7c6      	b.n	80084ee <put_fat+0x7e>
			res = FR_INT_ERR;
 8008560:	2002      	movs	r0, #2
 8008562:	e7c7      	b.n	80084f4 <put_fat+0x84>

08008564 <create_chain>:
{
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8008568:	460f      	mov	r7, r1
 800856a:	b989      	cbnz	r1, 8008590 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800856c:	f8d0 6210 	ldr.w	r6, [r0, #528]	; 0x210
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008570:	b1fe      	cbz	r6, 80085b2 <create_chain+0x4e>
 8008572:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008576:	429e      	cmp	r6, r3
 8008578:	bf28      	it	cs
 800857a:	2601      	movcs	r6, #1
 800857c:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800857e:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
		ncl++;							/* Next cluster */
 8008582:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008584:	42a3      	cmp	r3, r4
 8008586:	d817      	bhi.n	80085b8 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8008588:	2e01      	cmp	r6, #1
 800858a:	d814      	bhi.n	80085b6 <create_chain+0x52>
 800858c:	2400      	movs	r4, #0
 800858e:	e008      	b.n	80085a2 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008590:	f7ff febe 	bl	8008310 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8008594:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008596:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8008598:	d93b      	bls.n	8008612 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800859a:	3001      	adds	r0, #1
 800859c:	d103      	bne.n	80085a6 <create_chain+0x42>
			ncl = 2;
 800859e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80085a2:	4620      	mov	r0, r4
 80085a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80085a6:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	d8f9      	bhi.n	80085a2 <create_chain+0x3e>
 80085ae:	463e      	mov	r6, r7
 80085b0:	e7e4      	b.n	800857c <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80085b2:	2601      	movs	r6, #1
 80085b4:	e7e2      	b.n	800857c <create_chain+0x18>
			ncl = 2;
 80085b6:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f7ff fea8 	bl	8008310 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80085c0:	b130      	cbz	r0, 80085d0 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80085c2:	1c41      	adds	r1, r0, #1
 80085c4:	d0eb      	beq.n	800859e <create_chain+0x3a>
 80085c6:	2801      	cmp	r0, #1
 80085c8:	d023      	beq.n	8008612 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80085ca:	42b4      	cmp	r4, r6
 80085cc:	d1d7      	bne.n	800857e <create_chain+0x1a>
 80085ce:	e7dd      	b.n	800858c <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80085d0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f7ff ff4a 	bl	8008470 <put_fat>
	if (res == FR_OK && clst != 0) {
 80085dc:	b9b8      	cbnz	r0, 800860e <create_chain+0xaa>
 80085de:	b97f      	cbnz	r7, 8008600 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80085e0:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		fs->last_clust = ncl;			/* Update FSINFO */
 80085e4:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	d0da      	beq.n	80085a2 <create_chain+0x3e>
			fs->free_clust--;
 80085ec:	3b01      	subs	r3, #1
 80085ee:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
			fs->fsi_flag |= 1;
 80085f2:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 80085fe:	e7d0      	b.n	80085a2 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008600:	4622      	mov	r2, r4
 8008602:	4639      	mov	r1, r7
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff ff33 	bl	8008470 <put_fat>
	if (res == FR_OK) {
 800860a:	2800      	cmp	r0, #0
 800860c:	d0e8      	beq.n	80085e0 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800860e:	2801      	cmp	r0, #1
 8008610:	d0c5      	beq.n	800859e <create_chain+0x3a>
 8008612:	2401      	movs	r4, #1
 8008614:	e7c5      	b.n	80085a2 <create_chain+0x3e>

08008616 <dir_next>:
{
 8008616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800861a:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
{
 800861e:	4604      	mov	r4, r0
	i = dp->index + 1;
 8008620:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008622:	b2b3      	uxth	r3, r6
{
 8008624:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008626:	b913      	cbnz	r3, 800862e <dir_next+0x18>
		return FR_NO_FILE;
 8008628:	2004      	movs	r0, #4
}
 800862a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800862e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f8      	beq.n	8008628 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008636:	f016 080f 	ands.w	r8, r6, #15
 800863a:	d10b      	bne.n	8008654 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800863c:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8008640:	3301      	adds	r3, #1
 8008642:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 8008646:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 800864a:	b969      	cbnz	r1, 8008668 <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800864c:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8008650:	42b3      	cmp	r3, r6
 8008652:	d9e9      	bls.n	8008628 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008654:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8008658:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800865c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8008660:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8008664:	2000      	movs	r0, #0
 8008666:	e7e0      	b.n	800862a <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008668:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800866c:	3f01      	subs	r7, #1
 800866e:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8008672:	d1ef      	bne.n	8008654 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008674:	f7ff fe4c 	bl	8008310 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8008678:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800867a:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800867c:	d801      	bhi.n	8008682 <dir_next+0x6c>
 800867e:	2002      	movs	r0, #2
 8008680:	e7d3      	b.n	800862a <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008682:	1c42      	adds	r2, r0, #1
 8008684:	d101      	bne.n	800868a <dir_next+0x74>
 8008686:	2001      	movs	r0, #1
 8008688:	e7cf      	b.n	800862a <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800868a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800868e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008692:	42ab      	cmp	r3, r5
 8008694:	d82e      	bhi.n	80086f4 <dir_next+0xde>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008696:	f1b9 0f00 	cmp.w	r9, #0
 800869a:	d0c5      	beq.n	8008628 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800869c:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80086a0:	f7ff ff60 	bl	8008564 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086a4:	4605      	mov	r5, r0
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d040      	beq.n	800872c <dir_next+0x116>
					if (clst == 1) return FR_INT_ERR;
 80086aa:	2801      	cmp	r0, #1
 80086ac:	d0e7      	beq.n	800867e <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d0e9      	beq.n	8008686 <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80086b2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80086b6:	f7ff fc0a 	bl	8007ece <sync_window>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	d1e3      	bne.n	8008686 <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80086be:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80086c2:	f503 7200 	add.w	r2, r3, #512	; 0x200
	while (cnt--)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d11e      	bne.n	8008708 <dir_next+0xf2>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80086ca:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80086ce:	4629      	mov	r1, r5
 80086d0:	4610      	mov	r0, r2
 80086d2:	f7ff fe0f 	bl	80082f4 <clust2sect>
						dp->fs->wflag = 1;
 80086d6:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80086da:	f8c2 0230 	str.w	r0, [r2, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80086de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80086e2:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80086e6:	42bb      	cmp	r3, r7
 80086e8:	d811      	bhi.n	800870e <dir_next+0xf8>
					dp->fs->winsect -= c;						/* Rewind window offset */
 80086ea:	f8d0 3230 	ldr.w	r3, [r0, #560]	; 0x230
 80086ee:	1bdf      	subs	r7, r3, r7
 80086f0:	f8c0 7230 	str.w	r7, [r0, #560]	; 0x230
				dp->clust = clst;				/* Initialize data for new cluster */
 80086f4:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80086f8:	4629      	mov	r1, r5
 80086fa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80086fe:	f7ff fdf9 	bl	80082f4 <clust2sect>
 8008702:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8008706:	e7a5      	b.n	8008654 <dir_next+0x3e>
		*d++ = (BYTE)val;
 8008708:	f803 0b01 	strb.w	r0, [r3], #1
 800870c:	e7db      	b.n	80086c6 <dir_next+0xb0>
						dp->fs->wflag = 1;
 800870e:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8008712:	f7ff fbb3 	bl	8007e7c <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008716:	2800      	cmp	r0, #0
 8008718:	d1b5      	bne.n	8008686 <dir_next+0x70>
						dp->fs->winsect++;
 800871a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800871e:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8008720:	f8d2 3230 	ldr.w	r3, [r2, #560]	; 0x230
 8008724:	3301      	adds	r3, #1
 8008726:	f8c2 3230 	str.w	r3, [r2, #560]	; 0x230
 800872a:	e7d8      	b.n	80086de <dir_next+0xc8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800872c:	2007      	movs	r0, #7
 800872e:	e77c      	b.n	800862a <dir_next+0x14>

08008730 <dir_find.part.10>:
FRESULT dir_find (
 8008730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008734:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8008738:	f64f 78ff 	movw	r8, #65535	; 0xffff
FRESULT dir_find (
 800873c:	4605      	mov	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800873e:	464c      	mov	r4, r9
 8008740:	f8a0 8220 	strh.w	r8, [r0, #544]	; 0x220
		res = move_window(dp->fs, dp->sect);
 8008744:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8008748:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800874c:	f7ff fbc6 	bl	8007edc <move_window>
		if (res != FR_OK) break;
 8008750:	4607      	mov	r7, r0
 8008752:	2800      	cmp	r0, #0
 8008754:	d15d      	bne.n	8008812 <dir_find.part.10+0xe2>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008756:	f8d5 6214 	ldr.w	r6, [r5, #532]	; 0x214
		c = dir[DIR_Name];
 800875a:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800875c:	2b00      	cmp	r3, #0
 800875e:	d079      	beq.n	8008854 <dir_find.part.10+0x124>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008760:	2be5      	cmp	r3, #229	; 0xe5
 8008762:	d006      	beq.n	8008772 <dir_find.part.10+0x42>
		a = dir[DIR_Attr] & AM_MASK;
 8008764:	7af1      	ldrb	r1, [r6, #11]
 8008766:	f001 023f 	and.w	r2, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800876a:	0709      	lsls	r1, r1, #28
 800876c:	d504      	bpl.n	8008778 <dir_find.part.10+0x48>
 800876e:	2a0f      	cmp	r2, #15
 8008770:	d004      	beq.n	800877c <dir_find.part.10+0x4c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008772:	f8a5 8220 	strh.w	r8, [r5, #544]	; 0x220
 8008776:	e052      	b.n	800881e <dir_find.part.10+0xee>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008778:	2a0f      	cmp	r2, #15
 800877a:	d155      	bne.n	8008828 <dir_find.part.10+0xf8>
				if (dp->lfn) {
 800877c:	f8d5 b21c 	ldr.w	fp, [r5, #540]	; 0x21c
 8008780:	f1bb 0f00 	cmp.w	fp, #0
 8008784:	d03e      	beq.n	8008804 <dir_find.part.10+0xd4>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008786:	0658      	lsls	r0, r3, #25
 8008788:	d547      	bpl.n	800881a <dir_find.part.10+0xea>
						c &= ~LLEF; ord = c;	/* LFN start order */
 800878a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800878e:	f8b5 3206 	ldrh.w	r3, [r5, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 8008792:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8008796:	f8a5 3220 	strh.w	r3, [r5, #544]	; 0x220
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800879a:	7b73      	ldrb	r3, [r6, #13]
 800879c:	454b      	cmp	r3, r9
 800879e:	d13e      	bne.n	800881e <dir_find.part.10+0xee>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80087a0:	7837      	ldrb	r7, [r6, #0]
	s = 0; wc = 1;
 80087a2:	2001      	movs	r0, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80087a4:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80087a8:	1e7b      	subs	r3, r7, #1
 80087aa:	270d      	movs	r7, #13
	s = 0; wc = 1;
 80087ac:	f04f 0a00 	mov.w	sl, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80087b0:	435f      	muls	r7, r3
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80087b2:	4b29      	ldr	r3, [pc, #164]	; (8008858 <dir_find.part.10+0x128>)
 80087b4:	f81a 1003 	ldrb.w	r1, [sl, r3]
 80087b8:	1872      	adds	r2, r6, r1
 80087ba:	f892 c001 	ldrb.w	ip, [r2, #1]
 80087be:	5c72      	ldrb	r2, [r6, r1]
 80087c0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		if (wc) {	/* Last character has not been processed */
 80087c4:	b368      	cbz	r0, 8008822 <dir_find.part.10+0xf2>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80087c6:	4610      	mov	r0, r2
 80087c8:	f001 f89a 	bl	8009900 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80087cc:	2ffe      	cmp	r7, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80087ce:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80087d0:	d825      	bhi.n	800881e <dir_find.part.10+0xee>
 80087d2:	1c7a      	adds	r2, r7, #1
 80087d4:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 80087d8:	9200      	str	r2, [sp, #0]
 80087da:	f001 f891 	bl	8009900 <ff_wtoupper>
 80087de:	9901      	ldr	r1, [sp, #4]
 80087e0:	4281      	cmp	r1, r0
 80087e2:	d11c      	bne.n	800881e <dir_find.part.10+0xee>
 80087e4:	9a00      	ldr	r2, [sp, #0]
 80087e6:	4617      	mov	r7, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80087e8:	f10a 0a01 	add.w	sl, sl, #1
 80087ec:	f1ba 0f0d 	cmp.w	sl, #13
 80087f0:	d1df      	bne.n	80087b2 <dir_find.part.10+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80087f2:	7833      	ldrb	r3, [r6, #0]
 80087f4:	0659      	lsls	r1, r3, #25
 80087f6:	d503      	bpl.n	8008800 <dir_find.part.10+0xd0>
 80087f8:	b110      	cbz	r0, 8008800 <dir_find.part.10+0xd0>
 80087fa:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 80087fe:	b973      	cbnz	r3, 800881e <dir_find.part.10+0xee>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008800:	3c01      	subs	r4, #1
 8008802:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8008804:	2100      	movs	r1, #0
 8008806:	4628      	mov	r0, r5
 8008808:	f7ff ff05 	bl	8008616 <dir_next>
	} while (res == FR_OK);
 800880c:	4607      	mov	r7, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d098      	beq.n	8008744 <dir_find.part.10+0x14>
}
 8008812:	4638      	mov	r0, r7
 8008814:	b003      	add	sp, #12
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800881a:	42a3      	cmp	r3, r4
 800881c:	d0bd      	beq.n	800879a <dir_find.part.10+0x6a>
 800881e:	24ff      	movs	r4, #255	; 0xff
 8008820:	e7f0      	b.n	8008804 <dir_find.part.10+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008822:	4542      	cmp	r2, r8
 8008824:	d0e0      	beq.n	80087e8 <dir_find.part.10+0xb8>
 8008826:	e7fa      	b.n	800881e <dir_find.part.10+0xee>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008828:	b924      	cbnz	r4, 8008834 <dir_find.part.10+0x104>
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff fa84 	bl	8007d38 <sum_sfn>
 8008830:	4548      	cmp	r0, r9
 8008832:	d0ee      	beq.n	8008812 <dir_find.part.10+0xe2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008834:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8008838:	7ada      	ldrb	r2, [r3, #11]
 800883a:	07d2      	lsls	r2, r2, #31
 800883c:	d499      	bmi.n	8008772 <dir_find.part.10+0x42>
 800883e:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008842:	4283      	cmp	r3, r0
 8008844:	d0e5      	beq.n	8008812 <dir_find.part.10+0xe2>
 8008846:	f816 1b01 	ldrb.w	r1, [r6], #1
 800884a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884e:	4291      	cmp	r1, r2
 8008850:	d0f7      	beq.n	8008842 <dir_find.part.10+0x112>
 8008852:	e78e      	b.n	8008772 <dir_find.part.10+0x42>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008854:	2704      	movs	r7, #4
 8008856:	e7dc      	b.n	8008812 <dir_find.part.10+0xe2>
 8008858:	08018969 	.word	0x08018969

0800885c <follow_path>:
{
 800885c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008860:	780b      	ldrb	r3, [r1, #0]
{
 8008862:	4607      	mov	r7, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008864:	2b2f      	cmp	r3, #47	; 0x2f
{
 8008866:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008868:	d001      	beq.n	800886e <follow_path+0x12>
 800886a:	2b5c      	cmp	r3, #92	; 0x5c
 800886c:	d101      	bne.n	8008872 <follow_path+0x16>
		path++;
 800886e:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8008872:	2400      	movs	r4, #0
 8008874:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008878:	f898 3000 	ldrb.w	r3, [r8]
 800887c:	2b1f      	cmp	r3, #31
 800887e:	f200 80d2 	bhi.w	8008a26 <follow_path+0x1ca>
		res = dir_sdi(dp, 0);
 8008882:	4621      	mov	r1, r4
 8008884:	4638      	mov	r0, r7
 8008886:	f7ff fda4 	bl	80083d2 <dir_sdi>
		dp->dir = 0;
 800888a:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
}
 800888e:	b003      	add	sp, #12
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 8008894:	f825 0f02 	strh.w	r0, [r5, #2]!
 8008898:	4646      	mov	r6, r8
 800889a:	e0d4      	b.n	8008a46 <follow_path+0x1ea>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800889c:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 800889e:	44a0      	add	r8, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80088a0:	bf8c      	ite	hi
 80088a2:	2400      	movhi	r4, #0
 80088a4:	2404      	movls	r4, #4
 80088a6:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	while (di) {						/* Strip trailing spaces and dots */
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	f000 80ea 	beq.w	8008a84 <follow_path+0x228>
		w = lfn[di - 1];
 80088b0:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80088b4:	2920      	cmp	r1, #32
 80088b6:	d002      	beq.n	80088be <follow_path+0x62>
 80088b8:	292e      	cmp	r1, #46	; 0x2e
 80088ba:	f040 80e7 	bne.w	8008a8c <follow_path+0x230>
		di--;
 80088be:	3e01      	subs	r6, #1
 80088c0:	e7f3      	b.n	80088aa <follow_path+0x4e>
		*d++ = (BYTE)val;
 80088c2:	f802 1b01 	strb.w	r1, [r2], #1
	while (cnt--)
 80088c6:	4295      	cmp	r5, r2
 80088c8:	d1fb      	bne.n	80088c2 <follow_path+0x66>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80088ca:	2100      	movs	r1, #0
 80088cc:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 80088d0:	2a20      	cmp	r2, #32
 80088d2:	d01e      	beq.n	8008912 <follow_path+0xb6>
 80088d4:	2a2e      	cmp	r2, #46	; 0x2e
 80088d6:	d01c      	beq.n	8008912 <follow_path+0xb6>
	if (si) cf |= NS_LOSS | NS_LFN;
 80088d8:	b109      	cbz	r1, 80088de <follow_path+0x82>
 80088da:	f044 0403 	orr.w	r4, r4, #3
 80088de:	4602      	mov	r2, r0
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80088e0:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 80088e4:	282e      	cmp	r0, #46	; 0x2e
 80088e6:	d001      	beq.n	80088ec <follow_path+0x90>
 80088e8:	3e01      	subs	r6, #1
 80088ea:	d1f9      	bne.n	80088e0 <follow_path+0x84>
		dp->fn[i++] = (BYTE)w;
 80088ec:	f04f 0a00 	mov.w	sl, #0
 80088f0:	f04f 0908 	mov.w	r9, #8
 80088f4:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 80088f6:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 80088fa:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 80088fc:	b1d0      	cbz	r0, 8008934 <follow_path+0xd8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80088fe:	2820      	cmp	r0, #32
 8008900:	d003      	beq.n	800890a <follow_path+0xae>
 8008902:	282e      	cmp	r0, #46	; 0x2e
 8008904:	d107      	bne.n	8008916 <follow_path+0xba>
 8008906:	42b2      	cmp	r2, r6
 8008908:	d009      	beq.n	800891e <follow_path+0xc2>
			cf |= NS_LOSS | NS_LFN; continue;
 800890a:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800890e:	4611      	mov	r1, r2
 8008910:	e7f1      	b.n	80088f6 <follow_path+0x9a>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008912:	3101      	adds	r1, #1
 8008914:	e7da      	b.n	80088cc <follow_path+0x70>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008916:	45ca      	cmp	sl, r9
 8008918:	d205      	bcs.n	8008926 <follow_path+0xca>
 800891a:	42b2      	cmp	r2, r6
 800891c:	d150      	bne.n	80089c0 <follow_path+0x164>
			if (ni == 11) {				/* Long extension */
 800891e:	f1b9 0f0b 	cmp.w	r9, #11
 8008922:	d145      	bne.n	80089b0 <follow_path+0x154>
 8008924:	e002      	b.n	800892c <follow_path+0xd0>
 8008926:	f1b9 0f0b 	cmp.w	r9, #11
 800892a:	d13c      	bne.n	80089a6 <follow_path+0x14a>
				cf |= NS_LOSS | NS_LFN; break;
 800892c:	f04f 090b 	mov.w	r9, #11
 8008930:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008934:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	2ae5      	cmp	r2, #229	; 0xe5
 800893c:	bf04      	itt	eq
 800893e:	2205      	moveq	r2, #5
 8008940:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8008942:	f1b9 0f08 	cmp.w	r9, #8
 8008946:	bf04      	itt	eq
 8008948:	00ad      	lsleq	r5, r5, #2
 800894a:	b2ed      	uxtbeq	r5, r5
 800894c:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8008950:	2b0c      	cmp	r3, #12
 8008952:	d003      	beq.n	800895c <follow_path+0x100>
 8008954:	f005 0203 	and.w	r2, r5, #3
 8008958:	2a03      	cmp	r2, #3
 800895a:	d101      	bne.n	8008960 <follow_path+0x104>
		cf |= NS_LFN;
 800895c:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008960:	07a1      	lsls	r1, r4, #30
 8008962:	d409      	bmi.n	8008978 <follow_path+0x11c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008964:	f005 0503 	and.w	r5, r5, #3
 8008968:	2d01      	cmp	r5, #1
 800896a:	bf08      	it	eq
 800896c:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008970:	2b04      	cmp	r3, #4
 8008972:	bf08      	it	eq
 8008974:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008978:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800897c:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800897e:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008980:	4638      	mov	r0, r7
 8008982:	f7ff fd26 	bl	80083d2 <dir_sdi>
	if (res != FR_OK) return res;
 8008986:	b910      	cbnz	r0, 800898e <follow_path+0x132>
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff fed1 	bl	8008730 <dir_find.part.10>
			ns = dp->fn[NSFLAG];
 800898e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008992:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008994:	b3b8      	cbz	r0, 8008a06 <follow_path+0x1aa>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008996:	2804      	cmp	r0, #4
 8008998:	f47f af79 	bne.w	800888e <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800899c:	f013 0f04 	tst.w	r3, #4
 80089a0:	bf08      	it	eq
 80089a2:	2005      	moveq	r0, #5
 80089a4:	e773      	b.n	800888e <follow_path+0x32>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80089a6:	42b2      	cmp	r2, r6
 80089a8:	d002      	beq.n	80089b0 <follow_path+0x154>
 80089aa:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 80089ae:	d8c1      	bhi.n	8008934 <follow_path+0xd8>
			b <<= 2; continue;
 80089b0:	00ad      	lsls	r5, r5, #2
 80089b2:	b2ed      	uxtb	r5, r5
 80089b4:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80089b6:	f04f 090b 	mov.w	r9, #11
 80089ba:	f04f 0a08 	mov.w	sl, #8
 80089be:	e7a6      	b.n	800890e <follow_path+0xb2>
		if (w >= 0x80) {				/* Non ASCII character */
 80089c0:	287f      	cmp	r0, #127	; 0x7f
 80089c2:	d90c      	bls.n	80089de <follow_path+0x182>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80089c4:	2100      	movs	r1, #0
 80089c6:	9201      	str	r2, [sp, #4]
 80089c8:	f000 ff7c 	bl	80098c4 <ff_convert>
 80089cc:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80089d0:	9a01      	ldr	r2, [sp, #4]
 80089d2:	b158      	cbz	r0, 80089ec <follow_path+0x190>
 80089d4:	4b39      	ldr	r3, [pc, #228]	; (8008abc <follow_path+0x260>)
 80089d6:	4418      	add	r0, r3
 80089d8:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80089dc:	b130      	cbz	r0, 80089ec <follow_path+0x190>
 80089de:	4b38      	ldr	r3, [pc, #224]	; (8008ac0 <follow_path+0x264>)
	while (*str && *str != chr) str++;
 80089e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80089e4:	2900      	cmp	r1, #0
 80089e6:	d05c      	beq.n	8008aa2 <follow_path+0x246>
 80089e8:	4281      	cmp	r1, r0
 80089ea:	d1f9      	bne.n	80089e0 <follow_path+0x184>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80089ec:	205f      	movs	r0, #95	; 0x5f
 80089ee:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 80089f2:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80089f6:	f801 000a 	strb.w	r0, [r1, sl]
 80089fa:	f10a 0a01 	add.w	sl, sl, #1
 80089fe:	e786      	b.n	800890e <follow_path+0xb2>
					b |= 2;
 8008a00:	f045 0502 	orr.w	r5, r5, #2
 8008a04:	e7f5      	b.n	80089f2 <follow_path+0x196>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a06:	075a      	lsls	r2, r3, #29
 8008a08:	f53f af41 	bmi.w	800888e <follow_path+0x32>
			dir = dp->dir;						/* Follow the sub-directory */
 8008a0c:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008a10:	7acb      	ldrb	r3, [r1, #11]
 8008a12:	06db      	lsls	r3, r3, #27
 8008a14:	d538      	bpl.n	8008a88 <follow_path+0x22c>
			dp->sclust = ld_clust(dp->fs, dir);
 8008a16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008a1a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8008a1e:	f7ff fa1f 	bl	8007e60 <ld_clust.isra.0>
 8008a22:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008a26:	f898 3000 	ldrb.w	r3, [r8]
 8008a2a:	4644      	mov	r4, r8
 8008a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	d0f8      	beq.n	8008a26 <follow_path+0x1ca>
 8008a34:	2b5c      	cmp	r3, #92	; 0x5c
 8008a36:	d0f6      	beq.n	8008a26 <follow_path+0x1ca>
	si = di = 0;
 8008a38:	2600      	movs	r6, #0
	lfn = dp->lfn;
 8008a3a:	f8d7 b21c 	ldr.w	fp, [r7, #540]	; 0x21c
 8008a3e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8008a42:	f1ab 0502 	sub.w	r5, fp, #2
		w = p[si++];					/* Get a character */
 8008a46:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 8008a4a:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8008a4e:	281f      	cmp	r0, #31
 8008a50:	f67f af24 	bls.w	800889c <follow_path+0x40>
 8008a54:	282f      	cmp	r0, #47	; 0x2f
 8008a56:	f43f af21 	beq.w	800889c <follow_path+0x40>
 8008a5a:	285c      	cmp	r0, #92	; 0x5c
 8008a5c:	f43f af1e 	beq.w	800889c <follow_path+0x40>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8008a60:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8008a64:	d00e      	beq.n	8008a84 <follow_path+0x228>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a66:	2101      	movs	r1, #1
 8008a68:	f000 ff2c 	bl	80098c4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a6c:	b150      	cbz	r0, 8008a84 <follow_path+0x228>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008a6e:	287f      	cmp	r0, #127	; 0x7f
 8008a70:	f63f af10 	bhi.w	8008894 <follow_path+0x38>
 8008a74:	4913      	ldr	r1, [pc, #76]	; (8008ac4 <follow_path+0x268>)
	while (*str && *str != chr) str++;
 8008a76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	f43f af0a 	beq.w	8008894 <follow_path+0x38>
 8008a80:	4282      	cmp	r2, r0
 8008a82:	d1f8      	bne.n	8008a76 <follow_path+0x21a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a84:	2006      	movs	r0, #6
 8008a86:	e702      	b.n	800888e <follow_path+0x32>
 8008a88:	2005      	movs	r0, #5
	return res;
 8008a8a:	e700      	b.n	800888e <follow_path+0x32>
	lfn[di] = 0;						/* LFN is created */
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f82b 2016 	strh.w	r2, [fp, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8008a92:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
	lfn[di] = 0;						/* LFN is created */
 8008a96:	eb0b 0046 	add.w	r0, fp, r6, lsl #1
 8008a9a:	f102 050b 	add.w	r5, r2, #11
		*d++ = (BYTE)val;
 8008a9e:	2120      	movs	r1, #32
 8008aa0:	e711      	b.n	80088c6 <follow_path+0x6a>
				if (IsUpper(w)) {		/* ASCII large capital */
 8008aa2:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8008aa6:	2919      	cmp	r1, #25
 8008aa8:	d9aa      	bls.n	8008a00 <follow_path+0x1a4>
					if (IsLower(w)) {	/* ASCII small capital */
 8008aaa:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8008aae:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8008ab0:	bf9e      	ittt	ls
 8008ab2:	3820      	subls	r0, #32
 8008ab4:	f045 0501 	orrls.w	r5, r5, #1
 8008ab8:	b280      	uxthls	r0, r0
 8008aba:	e79a      	b.n	80089f2 <follow_path+0x196>
 8008abc:	080188e9 	.word	0x080188e9
 8008ac0:	0801897e 	.word	0x0801897e
 8008ac4:	08018975 	.word	0x08018975

08008ac8 <dir_register>:
	mem_cpy(sn, fn, 12);
 8008ac8:	220c      	movs	r2, #12
{
 8008aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fn = dp->fn; lfn = dp->lfn;
 8008ace:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
{
 8008ad2:	b086      	sub	sp, #24
	fn = dp->fn; lfn = dp->lfn;
 8008ad4:	f8d0 721c 	ldr.w	r7, [r0, #540]	; 0x21c
{
 8008ad8:	4604      	mov	r4, r0
	mem_cpy(sn, fn, 12);
 8008ada:	4631      	mov	r1, r6
 8008adc:	eb0d 0002 	add.w	r0, sp, r2
 8008ae0:	f7ff f90c 	bl	8007cfc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008ae4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008ae8:	07db      	lsls	r3, r3, #31
 8008aea:	f140 8086 	bpl.w	8008bfa <dir_register+0x132>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008aee:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8008af0:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008af4:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8008d3c <dir_register+0x274>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008af8:	72f3      	strb	r3, [r6, #11]
 8008afa:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
	mem_cpy(dst, src, 11);
 8008afe:	220b      	movs	r2, #11
 8008b00:	a903      	add	r1, sp, #12
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff f8fa 	bl	8007cfc <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008b08:	f1b9 0f05 	cmp.w	r9, #5
 8008b0c:	d951      	bls.n	8008bb2 <dir_register+0xea>
 8008b0e:	464b      	mov	r3, r9
 8008b10:	1eb8      	subs	r0, r7, #2
		while (*lfn) {	/* Create a CRC */
 8008b12:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d13d      	bne.n	8008b96 <dir_register+0xce>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008b1a:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8008b1c:	f003 000f 	and.w	r0, r3, #15
 8008b20:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8008b24:	2939      	cmp	r1, #57	; 0x39
 8008b26:	bf88      	it	hi
 8008b28:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8008b2c:	3a01      	subs	r2, #1
 8008b2e:	a801      	add	r0, sp, #4
 8008b30:	4410      	add	r0, r2
	} while (seq);
 8008b32:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8008b34:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8008b36:	d1f1      	bne.n	8008b1c <dir_register+0x54>
	ns[i] = '~';
 8008b38:	207e      	movs	r0, #126	; 0x7e
 8008b3a:	a906      	add	r1, sp, #24
 8008b3c:	4411      	add	r1, r2
 8008b3e:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d003      	beq.n	8008b4e <dir_register+0x86>
 8008b46:	5cf1      	ldrb	r1, [r6, r3]
 8008b48:	1c58      	adds	r0, r3, #1
 8008b4a:	2920      	cmp	r1, #32
 8008b4c:	d133      	bne.n	8008bb6 <dir_register+0xee>
 8008b4e:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008b50:	2a07      	cmp	r2, #7
 8008b52:	bf8f      	iteee	hi
 8008b54:	2120      	movhi	r1, #32
 8008b56:	a906      	addls	r1, sp, #24
 8008b58:	1889      	addls	r1, r1, r2
 8008b5a:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8008b5e:	bf98      	it	ls
 8008b60:	3201      	addls	r2, #1
 8008b62:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8008b66:	1b99      	subs	r1, r3, r6
 8008b68:	2907      	cmp	r1, #7
 8008b6a:	d9f1      	bls.n	8008b50 <dir_register+0x88>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7ff fc2f 	bl	80083d2 <dir_sdi>
	if (res != FR_OK) return res;
 8008b74:	4605      	mov	r5, r0
 8008b76:	bbc8      	cbnz	r0, 8008bec <dir_register+0x124>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f7ff fdd9 	bl	8008730 <dir_find.part.10>
			if (res != FR_OK) break;
 8008b7e:	4605      	mov	r5, r0
 8008b80:	bba0      	cbnz	r0, 8008bec <dir_register+0x124>
		for (n = 1; n < 100; n++) {
 8008b82:	f109 0901 	add.w	r9, r9, #1
 8008b86:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8008b8a:	d1b8      	bne.n	8008afe <dir_register+0x36>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008b8c:	2507      	movs	r5, #7
}
 8008b8e:	4628      	mov	r0, r5
 8008b90:	b006      	add	sp, #24
 8008b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (*lfn) {	/* Create a CRC */
 8008b96:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8008b98:	f002 0501 	and.w	r5, r2, #1
 8008b9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8008ba0:	03dd      	lsls	r5, r3, #15
 8008ba2:	bf48      	it	mi
 8008ba4:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8008ba8:	3901      	subs	r1, #1
				wc >>= 1;
 8008baa:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8008bae:	d1f3      	bne.n	8008b98 <dir_register+0xd0>
 8008bb0:	e7af      	b.n	8008b12 <dir_register+0x4a>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	e7b1      	b.n	8008b1a <dir_register+0x52>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	e7c3      	b.n	8008b42 <dir_register+0x7a>
		for (n = 0; lfn[n]; n++) ;
 8008bba:	3601      	adds	r6, #1
 8008bbc:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1fa      	bne.n	8008bba <dir_register+0xf2>
		nent = (n + 25) / 13;
 8008bc4:	230d      	movs	r3, #13
 8008bc6:	3619      	adds	r6, #25
 8008bc8:	fbb6 f6f3 	udiv	r6, r6, r3
 8008bcc:	e01a      	b.n	8008c04 <dir_register+0x13c>
		for (n = 0; lfn[n]; n++) ;
 8008bce:	2600      	movs	r6, #0
 8008bd0:	e7f4      	b.n	8008bbc <dir_register+0xf4>
				n = 0;					/* Not a blank entry. Restart to search */
 8008bd2:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff fd1d 	bl	8008616 <dir_next>
		} while (res == FR_OK);
 8008bdc:	4605      	mov	r5, r0
 8008bde:	b1c8      	cbz	r0, 8008c14 <dir_register+0x14c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008be0:	2d04      	cmp	r5, #4
 8008be2:	d0d3      	beq.n	8008b8c <dir_register+0xc4>
 8008be4:	e7d3      	b.n	8008b8e <dir_register+0xc6>
		*d++ = (BYTE)val;
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e08e      	b.n	8008d0a <dir_register+0x242>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008bec:	2d04      	cmp	r5, #4
 8008bee:	d1ce      	bne.n	8008b8e <dir_register+0xc6>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008bf0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008bf4:	72f3      	strb	r3, [r6, #11]
 8008bf6:	f8c4 721c 	str.w	r7, [r4, #540]	; 0x21c
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8008bfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008bfe:	079b      	lsls	r3, r3, #30
 8008c00:	d4e5      	bmi.n	8008bce <dir_register+0x106>
		nent = 1;
 8008c02:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
 8008c04:	2100      	movs	r1, #0
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff fbe3 	bl	80083d2 <dir_sdi>
	if (res == FR_OK) {
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d1e6      	bne.n	8008be0 <dir_register+0x118>
		n = 0;
 8008c12:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8008c14:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8008c18:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008c1c:	f7ff f95e 	bl	8007edc <move_window>
			if (res != FR_OK) break;
 8008c20:	4605      	mov	r5, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1dc      	bne.n	8008be0 <dir_register+0x118>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008c26:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2be5      	cmp	r3, #229	; 0xe5
 8008c2e:	d001      	beq.n	8008c34 <dir_register+0x16c>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1ce      	bne.n	8008bd2 <dir_register+0x10a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c34:	3701      	adds	r7, #1
 8008c36:	42be      	cmp	r6, r7
 8008c38:	d1cc      	bne.n	8008bd4 <dir_register+0x10c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008c3a:	3e01      	subs	r6, #1
 8008c3c:	d056      	beq.n	8008cec <dir_register+0x224>
		res = dir_sdi(dp, dp->index - nent);
 8008c3e:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 8008c42:	4620      	mov	r0, r4
 8008c44:	1b89      	subs	r1, r1, r6
 8008c46:	f7ff fbc4 	bl	80083d2 <dir_sdi>
		if (res == FR_OK) {
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d19e      	bne.n	8008b8e <dir_register+0xc6>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8008c50:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8008c54:	f7ff f870 	bl	8007d38 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008c58:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8008c5c:	4607      	mov	r7, r0
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008c5e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008d40 <dir_register+0x278>
				res = move_window(dp->fs, dp->sect);
 8008c62:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8008c66:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008c6a:	f7ff f937 	bl	8007edc <move_window>
 8008c6e:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d18c      	bne.n	8008b8e <dir_register+0xc6>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008c74:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008c76:	250d      	movs	r5, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008c78:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008c7c:	b2f1      	uxtb	r1, r6
 8008c7e:	f8d4 e21c 	ldr.w	lr, [r4, #540]	; 0x21c
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008c82:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008c84:	1e4a      	subs	r2, r1, #1
 8008c86:	436a      	muls	r2, r5
	s = wc = 0;
 8008c88:	4605      	mov	r5, r0
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008c8a:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Type] = 0;
 8008c8c:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008c8e:	7698      	strb	r0, [r3, #26]
 8008c90:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008c92:	4548      	cmp	r0, r9
 8008c94:	bf18      	it	ne
 8008c96:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008c9a:	f815 c008 	ldrb.w	ip, [r5, r8]
	} while (++s < 13);
 8008c9e:	f105 0501 	add.w	r5, r5, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008ca2:	f803 000c 	strb.w	r0, [r3, ip]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008ca6:	bf18      	it	ne
 8008ca8:	3201      	addne	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008caa:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8008cae:	449c      	add	ip, r3
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	bf08      	it	eq
 8008cb4:	4648      	moveq	r0, r9
	} while (++s < 13);
 8008cb6:	2d0d      	cmp	r5, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008cb8:	f88c a001 	strb.w	sl, [ip, #1]
	} while (++s < 13);
 8008cbc:	d1e9      	bne.n	8008c92 <dir_register+0x1ca>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008cbe:	4548      	cmp	r0, r9
 8008cc0:	d002      	beq.n	8008cc8 <dir_register+0x200>
 8008cc2:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8008cc6:	b90a      	cbnz	r2, 8008ccc <dir_register+0x204>
 8008cc8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				dp->fs->wflag = 1;
 8008ccc:	2201      	movs	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008cce:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8008cd0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				res = dir_next(dp, 0);	/* Next entry */
 8008cd4:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8008cd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff fc9b 	bl	8008616 <dir_next>
			} while (res == FR_OK && --nent);
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f47f af53 	bne.w	8008b8e <dir_register+0xc6>
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	d1ba      	bne.n	8008c62 <dir_register+0x19a>
		res = move_window(dp->fs, dp->sect);
 8008cec:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8008cf0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8008cf4:	f7ff f8f2 	bl	8007edc <move_window>
		if (res == FR_OK) {
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f47f af47 	bne.w	8008b8e <dir_register+0xc6>
		*d++ = (BYTE)val;
 8008d00:	4601      	mov	r1, r0
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008d02:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008d06:	f103 0220 	add.w	r2, r3, #32
	while (cnt--)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	f47f af6b 	bne.w	8008be6 <dir_register+0x11e>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008d10:	220b      	movs	r2, #11
 8008d12:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8008d16:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8008d1a:	f7fe ffef 	bl	8007cfc <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d1e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8008d22:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8008d26:	7adb      	ldrb	r3, [r3, #11]
 8008d28:	f003 0318 	and.w	r3, r3, #24
 8008d2c:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8008d34:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8008d38:	e729      	b.n	8008b8e <dir_register+0xc6>
 8008d3a:	bf00      	nop
 8008d3c:	00011021 	.word	0x00011021
 8008d40:	08018969 	.word	0x08018969

08008d44 <dir_read.constprop.14>:
FRESULT dir_read (
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8008d48:	27ff      	movs	r7, #255	; 0xff
FRESULT dir_read (
 8008d4a:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8008d4c:	463c      	mov	r4, r7
	res = FR_NO_FILE;
 8008d4e:	2604      	movs	r6, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008d50:	f64f 79ff 	movw	r9, #65535	; 0xffff
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8008d54:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008e48 <dir_read.constprop.14+0x104>
	while (dp->sect) {
 8008d58:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8008d5c:	b911      	cbnz	r1, 8008d64 <dir_read.constprop.14+0x20>
	if (res != FR_OK) dp->sect = 0;
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d067      	beq.n	8008e32 <dir_read.constprop.14+0xee>
 8008d62:	e056      	b.n	8008e12 <dir_read.constprop.14+0xce>
		res = move_window(dp->fs, dp->sect);
 8008d64:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8008d68:	f7ff f8b8 	bl	8007edc <move_window>
		if (res != FR_OK) break;
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d14f      	bne.n	8008e12 <dir_read.constprop.14+0xce>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008d72:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
		c = dir[DIR_Name];
 8008d76:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d063      	beq.n	8008e44 <dir_read.constprop.14+0x100>
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008d7c:	2be5      	cmp	r3, #229	; 0xe5
 8008d7e:	d04e      	beq.n	8008e1e <dir_read.constprop.14+0xda>
 8008d80:	2b2e      	cmp	r3, #46	; 0x2e
 8008d82:	d04c      	beq.n	8008e1e <dir_read.constprop.14+0xda>
		a = dir[DIR_Attr] & AM_MASK;
 8008d84:	7ac2      	ldrb	r2, [r0, #11]
 8008d86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008d8a:	f022 0120 	bic.w	r1, r2, #32
 8008d8e:	2908      	cmp	r1, #8
 8008d90:	d045      	beq.n	8008e1e <dir_read.constprop.14+0xda>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008d92:	2a0f      	cmp	r2, #15
 8008d94:	d148      	bne.n	8008e28 <dir_read.constprop.14+0xe4>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8008d96:	0659      	lsls	r1, r3, #25
 8008d98:	d53f      	bpl.n	8008e1a <dir_read.constprop.14+0xd6>
					c &= ~LLEF; ord = c;
 8008d9a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
					dp->lfn_idx = dp->index;
 8008d9e:	f8b5 3206 	ldrh.w	r3, [r5, #518]	; 0x206
					sum = dir[LDIR_Chksum];
 8008da2:	7b47      	ldrb	r7, [r0, #13]
					dp->lfn_idx = dp->index;
 8008da4:	f8a5 3220 	strh.w	r3, [r5, #544]	; 0x220
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008da8:	7b43      	ldrb	r3, [r0, #13]
 8008daa:	42bb      	cmp	r3, r7
 8008dac:	d137      	bne.n	8008e1e <dir_read.constprop.14+0xda>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008dae:	220d      	movs	r2, #13
	s = 0; wc = 1;
 8008db0:	f04f 0c01 	mov.w	ip, #1
 8008db4:	2100      	movs	r1, #0
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008db6:	7803      	ldrb	r3, [r0, #0]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008db8:	f8d5 621c 	ldr.w	r6, [r5, #540]	; 0x21c
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	4353      	muls	r3, r2
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8008dc4:	f811 e008 	ldrb.w	lr, [r1, r8]
 8008dc8:	eb00 020e 	add.w	r2, r0, lr
 8008dcc:	f892 a001 	ldrb.w	sl, [r2, #1]
 8008dd0:	f810 200e 	ldrb.w	r2, [r0, lr]
 8008dd4:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
		if (wc) {	/* Last character has not been processed */
 8008dd8:	f1bc 0f00 	cmp.w	ip, #0
 8008ddc:	d021      	beq.n	8008e22 <dir_read.constprop.14+0xde>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008dde:	2bfe      	cmp	r3, #254	; 0xfe
 8008de0:	d81d      	bhi.n	8008e1e <dir_read.constprop.14+0xda>
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8008de2:	4694      	mov	ip, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008de4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8008de8:	3301      	adds	r3, #1
	} while (++s < 13);						/* Read all character in the entry */
 8008dea:	3101      	adds	r1, #1
 8008dec:	290d      	cmp	r1, #13
 8008dee:	d1e9      	bne.n	8008dc4 <dir_read.constprop.14+0x80>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008df0:	7802      	ldrb	r2, [r0, #0]
 8008df2:	0652      	lsls	r2, r2, #25
 8008df4:	d504      	bpl.n	8008e00 <dir_read.constprop.14+0xbc>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008df6:	2bfe      	cmp	r3, #254	; 0xfe
 8008df8:	d811      	bhi.n	8008e1e <dir_read.constprop.14+0xda>
		lfnbuf[i] = 0;
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008e00:	3c01      	subs	r4, #1
 8008e02:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);				/* Next entry */
 8008e04:	2100      	movs	r1, #0
 8008e06:	4628      	mov	r0, r5
 8008e08:	f7ff fc05 	bl	8008616 <dir_next>
		if (res != FR_OK) break;
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0a2      	beq.n	8008d58 <dir_read.constprop.14+0x14>
	if (res != FR_OK) dp->sect = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8008e18:	e00c      	b.n	8008e34 <dir_read.constprop.14+0xf0>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	d0c4      	beq.n	8008da8 <dir_read.constprop.14+0x64>
 8008e1e:	24ff      	movs	r4, #255	; 0xff
 8008e20:	e7f0      	b.n	8008e04 <dir_read.constprop.14+0xc0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008e22:	454a      	cmp	r2, r9
 8008e24:	d0e1      	beq.n	8008dea <dir_read.constprop.14+0xa6>
 8008e26:	e7fa      	b.n	8008e1e <dir_read.constprop.14+0xda>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8008e28:	b93c      	cbnz	r4, 8008e3a <dir_read.constprop.14+0xf6>
 8008e2a:	f7fe ff85 	bl	8007d38 <sum_sfn>
 8008e2e:	42b8      	cmp	r0, r7
 8008e30:	d103      	bne.n	8008e3a <dir_read.constprop.14+0xf6>
		res = move_window(dp->fs, dp->sect);
 8008e32:	2600      	movs	r6, #0
}
 8008e34:	4630      	mov	r0, r6
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8008e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e3e:	f8a5 3220 	strh.w	r3, [r5, #544]	; 0x220
 8008e42:	e7f7      	b.n	8008e34 <dir_read.constprop.14+0xf0>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e44:	2604      	movs	r6, #4
 8008e46:	e7e4      	b.n	8008e12 <dir_read.constprop.14+0xce>
 8008e48:	08018969 	.word	0x08018969

08008e4c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e4c:	2901      	cmp	r1, #1
{
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e54:	d801      	bhi.n	8008e5a <remove_chain+0xe>
		res = FR_INT_ERR;
 8008e56:	2002      	movs	r0, #2
}
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008e5a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008e5e:	428b      	cmp	r3, r1
 8008e60:	d9f9      	bls.n	8008e56 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008e62:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8008e66:	429d      	cmp	r5, r3
 8008e68:	d205      	bcs.n	8008e76 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7ff fa4f 	bl	8008310 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8008e72:	4606      	mov	r6, r0
 8008e74:	b908      	cbnz	r0, 8008e7a <remove_chain+0x2e>
		res = FR_INT_ERR;
 8008e76:	2000      	movs	r0, #0
 8008e78:	e7ee      	b.n	8008e58 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008e7a:	2801      	cmp	r0, #1
 8008e7c:	d0eb      	beq.n	8008e56 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008e7e:	1c41      	adds	r1, r0, #1
 8008e80:	d015      	beq.n	8008eae <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008e82:	2200      	movs	r2, #0
 8008e84:	4629      	mov	r1, r5
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7ff faf2 	bl	8008470 <put_fat>
			if (res != FR_OK) break;
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1e3      	bne.n	8008e58 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008e90:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	d008      	beq.n	8008eaa <remove_chain+0x5e>
				fs->free_clust++;
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
				fs->fsi_flag |= 1;
 8008e9e:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8008eaa:	4635      	mov	r5, r6
 8008eac:	e7d9      	b.n	8008e62 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e7d2      	b.n	8008e58 <remove_chain+0xc>
	...

08008eb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008ebc:	a804      	add	r0, sp, #16
 8008ebe:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8008ec2:	4617      	mov	r7, r2


	vol = get_ldnumber(&rp);
 8008ec4:	f7fe ff47 	bl	8007d56 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ec8:	1e06      	subs	r6, r0, #0
 8008eca:	db2e      	blt.n	8008f2a <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ecc:	4d19      	ldr	r5, [pc, #100]	; (8008f34 <f_mount+0x80>)
 8008ece:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]

	if (cfs) {
 8008ed2:	b15c      	cbz	r4, 8008eec <f_mount+0x38>
#if _FS_LOCK
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008ed4:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8008ed8:	f000 fd33 	bl	8009942 <ff_del_syncobj>
 8008edc:	b918      	cbnz	r0, 8008ee6 <f_mount+0x32>
 8008ede:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	b005      	add	sp, #20
 8008ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	if (fs) {
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	b989      	cbnz	r1, 8008f14 <f_mount+0x60>
	FatFs[vol] = fs;					/* Register new fs object */
 8008ef0:	9c01      	ldr	r4, [sp, #4]
 8008ef2:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	d0f2      	beq.n	8008ee0 <f_mount+0x2c>
 8008efa:	2f01      	cmp	r7, #1
 8008efc:	d117      	bne.n	8008f2e <f_mount+0x7a>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008efe:	4669      	mov	r1, sp
 8008f00:	2200      	movs	r2, #0
 8008f02:	a801      	add	r0, sp, #4
 8008f04:	f7ff f834 	bl	8007f70 <find_volume>
 8008f08:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	9801      	ldr	r0, [sp, #4]
 8008f0e:	f7ff f989 	bl	8008224 <unlock_fs>
 8008f12:	e7e5      	b.n	8008ee0 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f14:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008f16:	f501 7103 	add.w	r1, r1, #524	; 0x20c
		fs->fs_type = 0;				/* Clear new fs object */
 8008f1a:	f801 3c0c 	strb.w	r3, [r1, #-12]
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008f1e:	b2f0      	uxtb	r0, r6
 8008f20:	f000 fd00 	bl	8009924 <ff_cre_syncobj>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d1e3      	bne.n	8008ef0 <f_mount+0x3c>
 8008f28:	e7d9      	b.n	8008ede <f_mount+0x2a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f2a:	240b      	movs	r4, #11
 8008f2c:	e7d8      	b.n	8008ee0 <f_mount+0x2c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f2e:	2400      	movs	r4, #0
 8008f30:	e7d6      	b.n	8008ee0 <f_mount+0x2c>
 8008f32:	bf00      	nop
 8008f34:	2000098c 	.word	0x2000098c

08008f38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008f40:	9101      	str	r1, [sp, #4]
 8008f42:	4691      	mov	r9, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008f44:	4606      	mov	r6, r0
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f000 80b9 	beq.w	80090be <f_open+0x186>
	fp->fs = 0;			/* Clear file object */
 8008f4c:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008f4e:	f002 021e 	and.w	r2, r2, #30
	fp->fs = 0;			/* Clear file object */
 8008f52:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008f56:	a901      	add	r1, sp, #4
 8008f58:	a885      	add	r0, sp, #532	; 0x214
 8008f5a:	f7ff f809 	bl	8007f70 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f040 80ab 	bne.w	80090ba <f_open+0x182>
		INIT_BUF(dj);
 8008f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008f68:	f000 fcfb 	bl	8009962 <ff_memalloc>
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	b948      	cbnz	r0, 8008f84 <f_open+0x4c>
 8008f70:	2111      	movs	r1, #17
 8008f72:	9885      	ldr	r0, [sp, #532]	; 0x214
 8008f74:	f7ff f956 	bl	8008224 <unlock_fs>
 8008f78:	2411      	movs	r4, #17
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		INIT_BUF(dj);
 8008f84:	908c      	str	r0, [sp, #560]	; 0x230
 8008f86:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f88:	9901      	ldr	r1, [sp, #4]
 8008f8a:	a805      	add	r0, sp, #20
		INIT_BUF(dj);
 8008f8c:	938b      	str	r3, [sp, #556]	; 0x22c
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f8e:	f7ff fc65 	bl	800885c <follow_path>
		dir = dj.dir;
 8008f92:	9d8a      	ldr	r5, [sp, #552]	; 0x228
		if (res == FR_OK) {
 8008f94:	4604      	mov	r4, r0
 8008f96:	b910      	cbnz	r0, 8008f9e <f_open+0x66>
				res = FR_INVALID_NAME;
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	bf08      	it	eq
 8008f9c:	2406      	moveq	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f9e:	f019 0f1c 	tst.w	r9, #28
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008fa2:	f009 071f 	and.w	r7, r9, #31
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008fa6:	d078      	beq.n	800909a <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8008fa8:	b36c      	cbz	r4, 8009006 <f_open+0xce>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008faa:	2c04      	cmp	r4, #4
 8008fac:	d103      	bne.n	8008fb6 <f_open+0x7e>
					res = dir_register(&dj);
 8008fae:	a805      	add	r0, sp, #20
 8008fb0:	f7ff fd8a 	bl	8008ac8 <dir_register>
 8008fb4:	4604      	mov	r4, r0
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008fb6:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 8008fba:	9d8a      	ldr	r5, [sp, #552]	; 0x228
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008fbc:	b354      	cbz	r4, 8009014 <f_open+0xdc>
		FREE_BUF();
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	f000 fcd1 	bl	8009966 <ff_memfree>
		if (res == FR_OK) {
 8008fc4:	b9d4      	cbnz	r4, 8008ffc <f_open+0xc4>
			fp->flag = mode;					/* File access mode */
 8008fc6:	f886 7206 	strb.w	r7, [r6, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008fca:	9f85      	ldr	r7, [sp, #532]	; 0x214
			fp->err = 0;						/* Clear error flag */
 8008fcc:	f886 4207 	strb.w	r4, [r6, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008fd0:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7fe ff43 	bl	8007e60 <ld_clust.isra.0>
 8008fda:	f8c6 0210 	str.w	r0, [r6, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008fde:	69eb      	ldr	r3, [r5, #28]
			fp->fptr = 0;						/* File pointer */
 8008fe0:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008fe4:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
			fp->id = fp->fs->id;
 8008fe8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->dsect = 0;
 8008fec:	f8c6 4218 	str.w	r4, [r6, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8008ff0:	f8c6 4224 	str.w	r4, [r6, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8008ff4:	f8c6 7200 	str.w	r7, [r6, #512]	; 0x200
			fp->id = fp->fs->id;
 8008ff8:	f8a6 3204 	strh.w	r3, [r6, #516]	; 0x204
	LEAVE_FF(dj.fs, res);
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	9885      	ldr	r0, [sp, #532]	; 0x214
 8009000:	f7ff f910 	bl	8008224 <unlock_fs>
 8009004:	e7b9      	b.n	8008f7a <f_open+0x42>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009006:	7aeb      	ldrb	r3, [r5, #11]
 8009008:	f013 0f11 	tst.w	r3, #17
 800900c:	d14f      	bne.n	80090ae <f_open+0x176>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800900e:	f019 0f04 	tst.w	r9, #4
 8009012:	d14e      	bne.n	80090b2 <f_open+0x17a>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009014:	0738      	lsls	r0, r7, #28
 8009016:	d533      	bpl.n	8009080 <f_open+0x148>
				dw = GET_FATTIME();				/* Created time */
 8009018:	f7fc fbd6 	bl	80057c8 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800901c:	2400      	movs	r4, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800901e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009022:	73a8      	strb	r0, [r5, #14]
 8009024:	73eb      	strb	r3, [r5, #15]
 8009026:	0c03      	lsrs	r3, r0, #16
 8009028:	0e00      	lsrs	r0, r0, #24
 800902a:	742b      	strb	r3, [r5, #16]
 800902c:	7468      	strb	r0, [r5, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800902e:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009030:	772c      	strb	r4, [r5, #28]
 8009032:	776c      	strb	r4, [r5, #29]
 8009034:	77ac      	strb	r4, [r5, #30]
 8009036:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009038:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800903a:	4629      	mov	r1, r5
 800903c:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009040:	f7fe ff0e 	bl	8007e60 <ld_clust.isra.0>
				dj.fs->wflag = 1;
 8009044:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009046:	76ac      	strb	r4, [r5, #26]
 8009048:	76ec      	strb	r4, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800904a:	752c      	strb	r4, [r5, #20]
 800904c:	756c      	strb	r4, [r5, #21]
				dj.fs->wflag = 1;
 800904e:	9b85      	ldr	r3, [sp, #532]	; 0x214
				if (cl) {						/* Remove the cluster chain if exist */
 8009050:	4681      	mov	r9, r0
				dj.fs->wflag = 1;
 8009052:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009056:	b198      	cbz	r0, 8009080 <f_open+0x148>
					res = remove_chain(dj.fs, cl);
 8009058:	4601      	mov	r1, r0
 800905a:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800905c:	f8d3 a230 	ldr.w	sl, [r3, #560]	; 0x230
					res = remove_chain(dj.fs, cl);
 8009060:	f7ff fef4 	bl	8008e4c <remove_chain>
					if (res == FR_OK) {
 8009064:	4604      	mov	r4, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	d1a9      	bne.n	8008fbe <f_open+0x86>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800906a:	9885      	ldr	r0, [sp, #532]	; 0x214
 800906c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8009070:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8009074:	4651      	mov	r1, sl
 8009076:	f7fe ff31 	bl	8007edc <move_window>
		if (res == FR_OK) {
 800907a:	4604      	mov	r4, r0
 800907c:	2800      	cmp	r0, #0
 800907e:	d19e      	bne.n	8008fbe <f_open+0x86>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009080:	073b      	lsls	r3, r7, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009082:	9b85      	ldr	r3, [sp, #532]	; 0x214
				mode |= FA__WRITTEN;
 8009084:	bf48      	it	mi
 8009086:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800908a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
			fp->dir_ptr = dir;
 800908e:	2400      	movs	r4, #0
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009090:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
			fp->dir_ptr = dir;
 8009094:	f8c6 5220 	str.w	r5, [r6, #544]	; 0x220
 8009098:	e791      	b.n	8008fbe <f_open+0x86>
			if (res == FR_OK) {					/* Follow succeeded */
 800909a:	2c00      	cmp	r4, #0
 800909c:	d18f      	bne.n	8008fbe <f_open+0x86>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800909e:	7aeb      	ldrb	r3, [r5, #11]
 80090a0:	06d9      	lsls	r1, r3, #27
 80090a2:	d408      	bmi.n	80090b6 <f_open+0x17e>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80090a4:	f019 0f02 	tst.w	r9, #2
 80090a8:	d0ea      	beq.n	8009080 <f_open+0x148>
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d5e8      	bpl.n	8009080 <f_open+0x148>
						res = FR_DENIED;
 80090ae:	2407      	movs	r4, #7
 80090b0:	e785      	b.n	8008fbe <f_open+0x86>
						res = FR_EXIST;
 80090b2:	2408      	movs	r4, #8
 80090b4:	e783      	b.n	8008fbe <f_open+0x86>
					res = FR_NO_FILE;
 80090b6:	2404      	movs	r4, #4
 80090b8:	e781      	b.n	8008fbe <f_open+0x86>
 80090ba:	4604      	mov	r4, r0
 80090bc:	e79e      	b.n	8008ffc <f_open+0xc4>
	if (!fp) return FR_INVALID_OBJECT;
 80090be:	2409      	movs	r4, #9
 80090c0:	e75b      	b.n	8008f7a <f_open+0x42>

080090c2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80090c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c6:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8cb 3000 	str.w	r3, [fp]
{
 80090ce:	4604      	mov	r4, r0
 80090d0:	4689      	mov	r9, r1
 80090d2:	4616      	mov	r6, r2

	res = validate(fp);							/* Check validity */
 80090d4:	f7ff f882 	bl	80081dc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80090d8:	4605      	mov	r5, r0
 80090da:	b118      	cbz	r0, 80090e4 <f_read+0x22>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
 80090dc:	4629      	mov	r1, r5
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80090de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80090e2:	e05c      	b.n	800919e <f_read+0xdc>
	if (fp->err)								/* Check error */
 80090e4:	f894 1207 	ldrb.w	r1, [r4, #519]	; 0x207
 80090e8:	b149      	cbz	r1, 80090fe <f_read+0x3c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80090ea:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80090ee:	f7ff f899 	bl	8008224 <unlock_fs>
 80090f2:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
}
 80090f6:	4628      	mov	r0, r5
 80090f8:	b003      	add	sp, #12
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80090fe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009102:	07d8      	lsls	r0, r3, #31
 8009104:	d406      	bmi.n	8009114 <f_read+0x52>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009106:	2107      	movs	r1, #7
 8009108:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800910c:	f7ff f88a 	bl	8008224 <unlock_fs>
 8009110:	2507      	movs	r5, #7
 8009112:	e7f0      	b.n	80090f6 <f_read+0x34>
	remain = fp->fsize - fp->fptr;
 8009114:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009118:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 800911c:	1bdf      	subs	r7, r3, r7
 800911e:	42b7      	cmp	r7, r6
 8009120:	bf28      	it	cs
 8009122:	4637      	movcs	r7, r6
	for ( ;  btr;								/* Repeat until all data read */
 8009124:	b90f      	cbnz	r7, 800912a <f_read+0x68>
	LEAVE_FF(fp->fs, FR_OK);
 8009126:	4639      	mov	r1, r7
 8009128:	e7d9      	b.n	80090de <f_read+0x1c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800912a:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800912e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009132:	2b00      	cmp	r3, #0
 8009134:	f040 808f 	bne.w	8009256 <f_read+0x194>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009138:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800913c:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009140:	3b01      	subs	r3, #1
 8009142:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8009146:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	d11a      	bne.n	8009184 <f_read+0xc2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800914e:	b939      	cbnz	r1, 8009160 <f_read+0x9e>
					clst = fp->sclust;			/* Follow from the origin */
 8009150:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009154:	2801      	cmp	r0, #1
 8009156:	d80f      	bhi.n	8009178 <f_read+0xb6>
 8009158:	2502      	movs	r5, #2
					ABORT(fp->fs, FR_DISK_ERR);
 800915a:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
 800915e:	e7bd      	b.n	80090dc <f_read+0x1a>
					if (fp->cltbl)
 8009160:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009164:	b11b      	cbz	r3, 800916e <f_read+0xac>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009166:	4620      	mov	r0, r4
 8009168:	f7fe fdd2 	bl	8007d10 <clmt_clust>
 800916c:	e7f2      	b.n	8009154 <f_read+0x92>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800916e:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009172:	f7ff f8cd 	bl	8008310 <get_fat>
 8009176:	e7ed      	b.n	8009154 <f_read+0x92>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009178:	1c41      	adds	r1, r0, #1
 800917a:	d101      	bne.n	8009180 <f_read+0xbe>
					ABORT(fp->fs, FR_DISK_ERR);
 800917c:	2501      	movs	r5, #1
 800917e:	e7ec      	b.n	800915a <f_read+0x98>
				fp->clust = clst;				/* Update current cluster */
 8009180:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009184:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8009188:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800918c:	4650      	mov	r0, sl
 800918e:	f7ff f8b1 	bl	80082f4 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009192:	b938      	cbnz	r0, 80091a4 <f_read+0xe2>
 8009194:	2502      	movs	r5, #2
 8009196:	4650      	mov	r0, sl
 8009198:	4629      	mov	r1, r5
 800919a:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
	LEAVE_FF(fp->fs, FR_OK);
 800919e:	f7ff f841 	bl	8008224 <unlock_fs>
 80091a2:	e7a8      	b.n	80090f6 <f_read+0x34>
			sect += csect;
 80091a4:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80091a6:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 80091a8:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 80091ac:	d030      	beq.n	8009210 <f_read+0x14e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80091ae:	9a01      	ldr	r2, [sp, #4]
 80091b0:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 80091b4:	4432      	add	r2, r6
 80091b6:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80091b8:	bf88      	it	hi
 80091ba:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80091bc:	4649      	mov	r1, r9
					cc = fp->fs->csize - csect;
 80091be:	bf88      	it	hi
 80091c0:	1a9e      	subhi	r6, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80091c2:	4633      	mov	r3, r6
 80091c4:	4642      	mov	r2, r8
 80091c6:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 80091ca:	f7fe fd6f 	bl	8007cac <disk_read>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d1d4      	bne.n	800917c <f_read+0xba>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80091d2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80091d6:	065a      	lsls	r2, r3, #25
 80091d8:	d50c      	bpl.n	80091f4 <f_read+0x132>
 80091da:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80091de:	eba0 0008 	sub.w	r0, r0, r8
 80091e2:	4286      	cmp	r6, r0
 80091e4:	d906      	bls.n	80091f4 <f_read+0x132>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80091e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ea:	4621      	mov	r1, r4
 80091ec:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 80091f0:	f7fe fd84 	bl	8007cfc <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80091f4:	0276      	lsls	r6, r6, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80091f6:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80091fa:	44b1      	add	r9, r6
 80091fc:	4433      	add	r3, r6
 80091fe:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009202:	f8db 3000 	ldr.w	r3, [fp]
 8009206:	1bbf      	subs	r7, r7, r6
 8009208:	4433      	add	r3, r6
 800920a:	f8cb 3000 	str.w	r3, [fp]
 800920e:	e789      	b.n	8009124 <f_read+0x62>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009210:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009214:	4590      	cmp	r8, r2
 8009216:	d01c      	beq.n	8009252 <f_read+0x190>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009218:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800921c:	065b      	lsls	r3, r3, #25
 800921e:	d50d      	bpl.n	800923c <f_read+0x17a>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009220:	2301      	movs	r3, #1
 8009222:	4621      	mov	r1, r4
 8009224:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8009228:	f7fe fd4e 	bl	8007cc8 <disk_write>
 800922c:	2800      	cmp	r0, #0
 800922e:	d1a5      	bne.n	800917c <f_read+0xba>
					fp->flag &= ~FA__DIRTY;
 8009230:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009238:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800923c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009240:	2301      	movs	r3, #1
 8009242:	4642      	mov	r2, r8
 8009244:	4621      	mov	r1, r4
 8009246:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800924a:	f7fe fd2f 	bl	8007cac <disk_read>
 800924e:	2800      	cmp	r0, #0
 8009250:	d194      	bne.n	800917c <f_read+0xba>
			fp->dsect = sect;
 8009252:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8009256:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800925a:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800925c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009260:	f5c1 7600 	rsb	r6, r1, #512	; 0x200
 8009264:	42be      	cmp	r6, r7
 8009266:	bf28      	it	cs
 8009268:	463e      	movcs	r6, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800926a:	4421      	add	r1, r4
 800926c:	4632      	mov	r2, r6
 800926e:	f7fe fd45 	bl	8007cfc <mem_cpy>
 8009272:	e7c0      	b.n	80091f6 <f_read+0x134>

08009274 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009278:	f7fe ffb0 	bl	80081dc <validate>
	if (res == FR_OK) {
 800927c:	4606      	mov	r6, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	d15d      	bne.n	800933e <f_sync+0xca>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009282:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009286:	069a      	lsls	r2, r3, #26
 8009288:	d559      	bpl.n	800933e <f_sync+0xca>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800928a:	065b      	lsls	r3, r3, #25
 800928c:	d518      	bpl.n	80092c0 <f_sync+0x4c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800928e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009292:	2301      	movs	r3, #1
 8009294:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009298:	4621      	mov	r1, r4
 800929a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800929e:	f7fe fd13 	bl	8007cc8 <disk_write>
 80092a2:	b138      	cbz	r0, 80092b4 <f_sync+0x40>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80092a4:	2101      	movs	r1, #1
 80092a6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80092aa:	f7fe ffbb 	bl	8008224 <unlock_fs>
 80092ae:	2601      	movs	r6, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80092b0:	4630      	mov	r0, r6
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
				fp->flag &= ~FA__DIRTY;
 80092b4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80092b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092bc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			res = move_window(fp->fs, fp->dir_sect);
 80092c0:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80092c4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80092c8:	f7fe fe08 	bl	8007edc <move_window>
			if (res == FR_OK) {
 80092cc:	4606      	mov	r6, r0
 80092ce:	bbb0      	cbnz	r0, 800933e <f_sync+0xca>
				dir = fp->dir_ptr;
 80092d0:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80092d4:	7aeb      	ldrb	r3, [r5, #11]
 80092d6:	f043 0320 	orr.w	r3, r3, #32
 80092da:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80092dc:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80092e0:	772b      	strb	r3, [r5, #28]
 80092e2:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	776b      	strb	r3, [r5, #29]
 80092ea:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80092ee:	77ab      	strb	r3, [r5, #30]
 80092f0:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80092f4:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80092f6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 80092fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80092fe:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009300:	0c1b      	lsrs	r3, r3, #16
 8009302:	752b      	strb	r3, [r5, #20]
 8009304:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009306:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009308:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 800930a:	f7fc fa5d 	bl	80057c8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800930e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009312:	75a8      	strb	r0, [r5, #22]
 8009314:	75eb      	strb	r3, [r5, #23]
 8009316:	0c03      	lsrs	r3, r0, #16
 8009318:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 800931a:	74ae      	strb	r6, [r5, #18]
 800931c:	74ee      	strb	r6, [r5, #19]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800931e:	762b      	strb	r3, [r5, #24]
 8009320:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 8009322:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009326:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009332:	2301      	movs	r3, #1
 8009334:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009338:	f7fe ff82 	bl	8008240 <sync_fs>
 800933c:	4606      	mov	r6, r0
	LEAVE_FF(fp->fs, res);
 800933e:	4631      	mov	r1, r6
 8009340:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009344:	f7fe ff6e 	bl	8008224 <unlock_fs>
 8009348:	e7b2      	b.n	80092b0 <f_sync+0x3c>

0800934a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800934a:	b538      	push	{r3, r4, r5, lr}
 800934c:	4605      	mov	r5, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800934e:	f7ff ff91 	bl	8009274 <f_sync>
	if (res == FR_OK)
 8009352:	4604      	mov	r4, r0
 8009354:	b958      	cbnz	r0, 800936e <f_close+0x24>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009356:	4628      	mov	r0, r5
 8009358:	f7fe ff40 	bl	80081dc <validate>
		if (res == FR_OK) {
 800935c:	4604      	mov	r4, r0
 800935e:	b930      	cbnz	r0, 800936e <f_close+0x24>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8009360:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009364:	4621      	mov	r1, r4
				fp->fs = 0;				/* Invalidate file object */
 8009366:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800936a:	f7fe ff5b 	bl	8008224 <unlock_fs>
#endif
		}
	}
	return res;
}
 800936e:	4620      	mov	r0, r4
 8009370:	bd38      	pop	{r3, r4, r5, pc}

08009372 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009376:	4604      	mov	r4, r0
 8009378:	460e      	mov	r6, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800937a:	f7fe ff2f 	bl	80081dc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800937e:	4605      	mov	r5, r0
 8009380:	b118      	cbz	r0, 800938a <f_lseek+0x18>
			fp->flag |= FA__WRITTEN;
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009382:	4629      	mov	r1, r5
 8009384:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009388:	e06a      	b.n	8009460 <f_lseek+0xee>
	if (fp->err)						/* Check error */
 800938a:	f894 1207 	ldrb.w	r1, [r4, #519]	; 0x207
 800938e:	b141      	cbz	r1, 80093a2 <f_lseek+0x30>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009390:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009394:	f7fe ff46 	bl	8008224 <unlock_fs>
 8009398:	f894 5207 	ldrb.w	r5, [r4, #519]	; 0x207
}
 800939c:	4628      	mov	r0, r5
 800939e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fp->cltbl) {	/* Fast seek */
 80093a2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 808c 	beq.w	80094c4 <f_lseek+0x152>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80093ac:	1c72      	adds	r2, r6, #1
 80093ae:	d13a      	bne.n	8009426 <f_lseek+0xb4>
			cl = fp->sclust;			/* Top of the chain */
 80093b0:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80093b4:	f103 0904 	add.w	r9, r3, #4
 80093b8:	f8d3 a000 	ldr.w	sl, [r3]
 80093bc:	2602      	movs	r6, #2
			if (cl) {
 80093be:	b347      	cbz	r7, 8009412 <f_lseek+0xa0>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80093c0:	f04f 0800 	mov.w	r8, #0
 80093c4:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(fp->fs, cl);
 80093c8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80093cc:	f7fe ffa0 	bl	8008310 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80093d0:	2801      	cmp	r0, #1
						cl = get_fat(fp->fs, cl);
 80093d2:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80093d6:	d805      	bhi.n	80093e4 <f_lseek+0x72>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80093d8:	2502      	movs	r5, #2
				ABORT(fp->fs, FR_DISK_ERR);
 80093da:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
 80093de:	e7d0      	b.n	8009382 <f_lseek+0x10>
 80093e0:	4607      	mov	r7, r0
 80093e2:	e7ed      	b.n	80093c0 <f_lseek+0x4e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d101      	bne.n	80093ec <f_lseek+0x7a>
				ABORT(fp->fs, FR_DISK_ERR);
 80093e8:	2501      	movs	r5, #1
 80093ea:	e7f6      	b.n	80093da <f_lseek+0x68>
					} while (cl == pcl + 1);
 80093ec:	eb07 0308 	add.w	r3, r7, r8
 80093f0:	4283      	cmp	r3, r0
 80093f2:	d0e7      	beq.n	80093c4 <f_lseek+0x52>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80093f4:	3602      	adds	r6, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80093f6:	45b2      	cmp	sl, r6
						*tbl++ = ncl; *tbl++ = tcl;
 80093f8:	bf21      	itttt	cs
 80093fa:	464b      	movcs	r3, r9
 80093fc:	f843 8b08 	strcs.w	r8, [r3], #8
 8009400:	f8c9 7004 	strcs.w	r7, [r9, #4]
 8009404:	4699      	movcs	r9, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009406:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800940a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800940e:	4283      	cmp	r3, r0
 8009410:	d8e6      	bhi.n	80093e0 <f_lseek+0x6e>
			*fp->cltbl = ulen;	/* Number of items used */
 8009412:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 8009416:	4556      	cmp	r6, sl
			*fp->cltbl = ulen;	/* Number of items used */
 8009418:	601e      	str	r6, [r3, #0]
			if (ulen <= tlen)
 800941a:	f200 810d 	bhi.w	8009638 <f_lseek+0x2c6>
				*tbl = 0;		/* Terminate table */
 800941e:	2300      	movs	r3, #0
 8009420:	f8c9 3000 	str.w	r3, [r9]
 8009424:	e7ad      	b.n	8009382 <f_lseek+0x10>
 8009426:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800942a:	4286      	cmp	r6, r0
 800942c:	bf28      	it	cs
 800942e:	4606      	movcs	r6, r0
			fp->fptr = ofs;				/* Set file pointer */
 8009430:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
			if (ofs) {
 8009434:	2e00      	cmp	r6, #0
 8009436:	d0a4      	beq.n	8009382 <f_lseek+0x10>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009438:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800943c:	4641      	mov	r1, r8
 800943e:	4620      	mov	r0, r4
 8009440:	f7fe fc66 	bl	8007d10 <clmt_clust>
 8009444:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
 8009448:	4601      	mov	r1, r0
 800944a:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800944e:	4638      	mov	r0, r7
 8009450:	f7fe ff50 	bl	80082f4 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009454:	b938      	cbnz	r0, 8009466 <f_lseek+0xf4>
 8009456:	2502      	movs	r5, #2
 8009458:	4638      	mov	r0, r7
 800945a:	4629      	mov	r1, r5
 800945c:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
	LEAVE_FF(fp->fs, res);
 8009460:	f7fe fee0 	bl	8008224 <unlock_fs>
 8009464:	e79a      	b.n	800939c <f_lseek+0x2a>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009466:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800946a:	2e00      	cmp	r6, #0
 800946c:	d089      	beq.n	8009382 <f_lseek+0x10>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800946e:	f897 6202 	ldrb.w	r6, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009472:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009476:	3e01      	subs	r6, #1
 8009478:	ea06 2658 	and.w	r6, r6, r8, lsr #9
 800947c:	4406      	add	r6, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800947e:	42b2      	cmp	r2, r6
 8009480:	f43f af7f 	beq.w	8009382 <f_lseek+0x10>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009484:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009488:	0659      	lsls	r1, r3, #25
 800948a:	d50d      	bpl.n	80094a8 <f_lseek+0x136>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800948c:	2301      	movs	r3, #1
 800948e:	4621      	mov	r1, r4
 8009490:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8009494:	f7fe fc18 	bl	8007cc8 <disk_write>
 8009498:	2800      	cmp	r0, #0
 800949a:	d1a5      	bne.n	80093e8 <f_lseek+0x76>
						fp->flag &= ~FA__DIRTY;
 800949c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80094a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80094a8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094ac:	2301      	movs	r3, #1
 80094ae:	4632      	mov	r2, r6
 80094b0:	4621      	mov	r1, r4
 80094b2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80094b6:	f7fe fbf9 	bl	8007cac <disk_read>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d194      	bne.n	80093e8 <f_lseek+0x76>
					fp->dsect = dsc;
 80094be:	f8c4 6218 	str.w	r6, [r4, #536]	; 0x218
 80094c2:	e75e      	b.n	8009382 <f_lseek+0x10>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80094c4:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80094c8:	42b3      	cmp	r3, r6
 80094ca:	d205      	bcs.n	80094d8 <f_lseek+0x166>
			 && !(fp->flag & FA_WRITE)
 80094cc:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 80094d0:	f012 0f02 	tst.w	r2, #2
 80094d4:	bf08      	it	eq
 80094d6:	461e      	moveq	r6, r3
		fp->fptr = nsect = 0;
 80094d8:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80094da:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 80094de:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 80094e2:	b97e      	cbnz	r6, 8009504 <f_lseek+0x192>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80094e4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80094e8:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80094ec:	4293      	cmp	r3, r2
 80094ee:	f67f af48 	bls.w	8009382 <f_lseek+0x10>
			fp->fsize = fp->fptr;
 80094f2:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 80094f6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80094fa:	f043 0320 	orr.w	r3, r3, #32
 80094fe:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009502:	e73e      	b.n	8009382 <f_lseek+0x10>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009504:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009508:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800950c:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800950e:	2b00      	cmp	r3, #0
 8009510:	d03f      	beq.n	8009592 <f_lseek+0x220>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009512:	3b01      	subs	r3, #1
 8009514:	1e72      	subs	r2, r6, #1
 8009516:	fbb2 f2f7 	udiv	r2, r2, r7
 800951a:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 800951e:	428a      	cmp	r2, r1
 8009520:	d337      	bcc.n	8009592 <f_lseek+0x220>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009522:	427a      	negs	r2, r7
 8009524:	4013      	ands	r3, r2
				clst = fp->clust;
 8009526:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800952a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800952e:	1af6      	subs	r6, r6, r3
			if (clst != 0) {
 8009530:	2900      	cmp	r1, #0
 8009532:	d167      	bne.n	8009604 <f_lseek+0x292>
		fp->fptr = nsect = 0;
 8009534:	2600      	movs	r6, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009536:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800953a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0d0      	beq.n	80094e4 <f_lseek+0x172>
 8009542:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009546:	42b2      	cmp	r2, r6
 8009548:	d0cc      	beq.n	80094e4 <f_lseek+0x172>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800954a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800954e:	065b      	lsls	r3, r3, #25
 8009550:	d510      	bpl.n	8009574 <f_lseek+0x202>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009552:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009556:	2301      	movs	r3, #1
 8009558:	4621      	mov	r1, r4
 800955a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800955e:	f7fe fbb3 	bl	8007cc8 <disk_write>
 8009562:	2800      	cmp	r0, #0
 8009564:	f47f af40 	bne.w	80093e8 <f_lseek+0x76>
				fp->flag &= ~FA__DIRTY;
 8009568:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800956c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009570:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009574:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009578:	2301      	movs	r3, #1
 800957a:	4632      	mov	r2, r6
 800957c:	4621      	mov	r1, r4
 800957e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009582:	f7fe fb93 	bl	8007cac <disk_read>
 8009586:	2800      	cmp	r0, #0
 8009588:	f47f af2e 	bne.w	80093e8 <f_lseek+0x76>
			fp->dsect = nsect;
 800958c:	f8c4 6218 	str.w	r6, [r4, #536]	; 0x218
 8009590:	e7a8      	b.n	80094e4 <f_lseek+0x172>
				clst = fp->sclust;						/* start from the first cluster */
 8009592:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009596:	b951      	cbnz	r1, 80095ae <f_lseek+0x23c>
					clst = create_chain(fp->fs, 0);
 8009598:	f7fe ffe4 	bl	8008564 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800959c:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800959e:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80095a0:	f43f af1a 	beq.w	80093d8 <f_lseek+0x66>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80095a4:	1c42      	adds	r2, r0, #1
 80095a6:	f43f af1f 	beq.w	80093e8 <f_lseek+0x76>
					fp->sclust = clst;
 80095aa:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 80095ae:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 80095b2:	e7bd      	b.n	8009530 <f_lseek+0x1be>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80095b4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80095b8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80095bc:	079b      	lsls	r3, r3, #30
 80095be:	d505      	bpl.n	80095cc <f_lseek+0x25a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80095c0:	f7fe ffd0 	bl	8008564 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80095c4:	4601      	mov	r1, r0
 80095c6:	b920      	cbnz	r0, 80095d2 <f_lseek+0x260>
 80095c8:	463e      	mov	r6, r7
 80095ca:	e01d      	b.n	8009608 <f_lseek+0x296>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80095cc:	f7fe fea0 	bl	8008310 <get_fat>
 80095d0:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80095d2:	1c4a      	adds	r2, r1, #1
 80095d4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80095d8:	d104      	bne.n	80095e4 <f_lseek+0x272>
 80095da:	2501      	movs	r5, #1
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80095dc:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
 80095e0:	4629      	mov	r1, r5
 80095e2:	e73d      	b.n	8009460 <f_lseek+0xee>
 80095e4:	2901      	cmp	r1, #1
 80095e6:	d903      	bls.n	80095f0 <f_lseek+0x27e>
 80095e8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80095ec:	428b      	cmp	r3, r1
 80095ee:	d801      	bhi.n	80095f4 <f_lseek+0x282>
 80095f0:	2502      	movs	r5, #2
 80095f2:	e7f3      	b.n	80095dc <f_lseek+0x26a>
					fp->fptr += bcs;
 80095f4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 80095f8:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 80095fc:	443b      	add	r3, r7
 80095fe:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 8009602:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
 8009604:	42be      	cmp	r6, r7
 8009606:	d8d5      	bhi.n	80095b4 <f_lseek+0x242>
				fp->fptr += ofs;
 8009608:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800960c:	4433      	add	r3, r6
 800960e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8009612:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8009616:	2b00      	cmp	r3, #0
 8009618:	d08c      	beq.n	8009534 <f_lseek+0x1c2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800961a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800961e:	4610      	mov	r0, r2
 8009620:	f7fe fe68 	bl	80082f4 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009624:	b928      	cbnz	r0, 8009632 <f_lseek+0x2c0>
 8009626:	2502      	movs	r5, #2
 8009628:	4610      	mov	r0, r2
 800962a:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
 800962e:	4629      	mov	r1, r5
 8009630:	e716      	b.n	8009460 <f_lseek+0xee>
					nsect += ofs / SS(fp->fs);
 8009632:	eb00 2656 	add.w	r6, r0, r6, lsr #9
 8009636:	e77e      	b.n	8009536 <f_lseek+0x1c4>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009638:	2511      	movs	r5, #17
 800963a:	e6a2      	b.n	8009382 <f_lseek+0x10>

0800963c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4605      	mov	r5, r0
	FRESULT res;


	res = validate(dp);
 8009640:	f7fe fdcc 	bl	80081dc <validate>
	if (res == FR_OK) {
 8009644:	4604      	mov	r4, r0
 8009646:	b930      	cbnz	r0, 8009656 <f_closedir+0x1a>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8009648:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800964c:	4621      	mov	r1, r4
			dp->fs = 0;				/* Invalidate directory object */
 800964e:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009652:	f7fe fde7 	bl	8008224 <unlock_fs>
#endif
	}
	return res;
}
 8009656:	4620      	mov	r0, r4
 8009658:	bd38      	pop	{r3, r4, r5, pc}

0800965a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800965a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800965e:	4604      	mov	r4, r0
 8009660:	4688      	mov	r8, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8009662:	f7fe fdbb 	bl	80081dc <validate>
	if (res == FR_OK) {
 8009666:	4606      	mov	r6, r0
 8009668:	b938      	cbnz	r0, 800967a <f_readdir+0x20>
		if (!fno) {
 800966a:	f1b8 0f00 	cmp.w	r8, #0
 800966e:	d10a      	bne.n	8009686 <f_readdir+0x2c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009670:	4601      	mov	r1, r0
 8009672:	4620      	mov	r0, r4
 8009674:	f7fe fead 	bl	80083d2 <dir_sdi>
 8009678:	4606      	mov	r6, r0
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 800967a:	4631      	mov	r1, r6
 800967c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009680:	f7fe fdd0 	bl	8008224 <unlock_fs>
 8009684:	e00b      	b.n	800969e <f_readdir+0x44>
			INIT_BUF(*dp);
 8009686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800968a:	f000 f96a 	bl	8009962 <ff_memalloc>
 800968e:	4607      	mov	r7, r0
 8009690:	b948      	cbnz	r0, 80096a6 <f_readdir+0x4c>
 8009692:	2111      	movs	r1, #17
 8009694:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009698:	f7fe fdc4 	bl	8008224 <unlock_fs>
 800969c:	2611      	movs	r6, #17
}
 800969e:	4630      	mov	r0, r6
 80096a0:	b004      	add	sp, #16
 80096a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			INIT_BUF(*dp);
 80096a6:	ab01      	add	r3, sp, #4
 80096a8:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 80096ac:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 80096b0:	4620      	mov	r0, r4
 80096b2:	f7ff fb47 	bl	8008d44 <dir_read.constprop.14>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80096b6:	2804      	cmp	r0, #4
			res = dir_read(dp, 0);			/* Read an item */
 80096b8:	4605      	mov	r5, r0
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80096ba:	d110      	bne.n	80096de <f_readdir+0x84>
				dp->sect = 0;
 80096bc:	f8c4 6210 	str.w	r6, [r4, #528]	; 0x210
				get_fileinfo(dp, fno);		/* Get the object information */
 80096c0:	4641      	mov	r1, r8
 80096c2:	4620      	mov	r0, r4
 80096c4:	f7fe fb64 	bl	8007d90 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80096c8:	2100      	movs	r1, #0
 80096ca:	4620      	mov	r0, r4
 80096cc:	f7fe ffa3 	bl	8008616 <dir_next>
				if (res == FR_NO_FILE) {
 80096d0:	2804      	cmp	r0, #4
				res = dir_next(dp, 0);		/* Increment index for next */
 80096d2:	4605      	mov	r5, r0
					dp->sect = 0;
 80096d4:	bf04      	itt	eq
 80096d6:	2500      	moveq	r5, #0
 80096d8:	f8c4 5210 	streq.w	r5, [r4, #528]	; 0x210
 80096dc:	e001      	b.n	80096e2 <f_readdir+0x88>
			if (res == FR_OK) {				/* A valid entry is found */
 80096de:	2800      	cmp	r0, #0
 80096e0:	d0ee      	beq.n	80096c0 <f_readdir+0x66>
			FREE_BUF();
 80096e2:	4638      	mov	r0, r7
 80096e4:	f000 f93f 	bl	8009966 <ff_memfree>
 80096e8:	462e      	mov	r6, r5
 80096ea:	e7c6      	b.n	800967a <f_readdir+0x20>

080096ec <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80096ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096f0:	4606      	mov	r6, r0
 80096f2:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
 80096f4:	4605      	mov	r5, r0
	int n = 0;
 80096f6:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80096f8:	1e4f      	subs	r7, r1, #1
 80096fa:	42bc      	cmp	r4, r7
 80096fc:	da12      	bge.n	8009724 <f_gets+0x38>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80096fe:	ab01      	add	r3, sp, #4
 8009700:	2201      	movs	r2, #1
 8009702:	4669      	mov	r1, sp
 8009704:	4640      	mov	r0, r8
 8009706:	f7ff fcdc 	bl	80090c2 <f_read>
		if (rc != 1) break;
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d109      	bne.n	8009724 <f_gets+0x38>
		c = s[0];
 8009710:	f89d 3000 	ldrb.w	r3, [sp]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009714:	2b0d      	cmp	r3, #13
 8009716:	d0f0      	beq.n	80096fa <f_gets+0xe>
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
 8009718:	2b0a      	cmp	r3, #10
		*p++ = c;
 800971a:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 800971e:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8009722:	d1ea      	bne.n	80096fa <f_gets+0xe>
	}
	*p = 0;
 8009724:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009726:	429c      	cmp	r4, r3
}
 8009728:	bf14      	ite	ne
 800972a:	4630      	movne	r0, r6
 800972c:	4618      	moveq	r0, r3
	*p = 0;
 800972e:	702b      	strb	r3, [r5, #0]
}
 8009730:	b002      	add	sp, #8
 8009732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009738 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009738:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <FATFS_LinkDriverEx+0x40>)
 800973c:	7b9c      	ldrb	r4, [r3, #14]
 800973e:	2c02      	cmp	r4, #2
 8009740:	d818      	bhi.n	8009774 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009742:	2400      	movs	r4, #0
 8009744:	7b9d      	ldrb	r5, [r3, #14]
 8009746:	b2ed      	uxtb	r5, r5
 8009748:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800974a:	7b9d      	ldrb	r5, [r3, #14]
 800974c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009750:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8009752:	7b98      	ldrb	r0, [r3, #14]
 8009754:	4418      	add	r0, r3
 8009756:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8009758:	7b9a      	ldrb	r2, [r3, #14]
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	1c50      	adds	r0, r2, #1
 800975e:	b2c0      	uxtb	r0, r0
 8009760:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009762:	233a      	movs	r3, #58	; 0x3a
 8009764:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009766:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8009768:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800976a:	3230      	adds	r2, #48	; 0x30
 800976c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800976e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009770:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8009772:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009774:	2001      	movs	r0, #1
 8009776:	e7fc      	b.n	8009772 <FATFS_LinkDriverEx+0x3a>
 8009778:	20000998 	.word	0x20000998

0800977c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800977c:	2200      	movs	r2, #0
 800977e:	f7ff bfdb 	b.w	8009738 <FATFS_LinkDriverEx>

08009782 <USBH_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
  return RES_OK;
}
 8009782:	2000      	movs	r0, #0
 8009784:	4770      	bx	lr
	...

08009788 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 8009788:	4601      	mov	r1, r0
{
 800978a:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 800978c:	4803      	ldr	r0, [pc, #12]	; (800979c <USBH_status+0x14>)
 800978e:	f7fd f897 	bl	80068c0 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009792:	fab0 f080 	clz	r0, r0
 8009796:	0940      	lsrs	r0, r0, #5
 8009798:	bd08      	pop	{r3, pc}
 800979a:	bf00      	nop
 800979c:	2000d9dc 	.word	0x2000d9dc

080097a0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80097a0:	b510      	push	{r4, lr}
 80097a2:	4614      	mov	r4, r2
 80097a4:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  
  switch (cmd)
 80097a6:	2903      	cmp	r1, #3
 80097a8:	d803      	bhi.n	80097b2 <USBH_ioctl+0x12>
 80097aa:	e8df f001 	tbb	[pc, r1]
 80097ae:	051a      	.short	0x051a
 80097b0:	1010      	.short	0x1010
      res = RES_ERROR;
    }
    break;
    
  default:
    res = RES_PARERR;
 80097b2:	2004      	movs	r0, #4
  }
  
  return res;
}
 80097b4:	b00e      	add	sp, #56	; 0x38
 80097b6:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80097b8:	4601      	mov	r1, r0
 80097ba:	aa01      	add	r2, sp, #4
 80097bc:	480a      	ldr	r0, [pc, #40]	; (80097e8 <USBH_ioctl+0x48>)
 80097be:	f7fd f890 	bl	80068e2 <USBH_MSC_GetLUNInfo>
 80097c2:	b910      	cbnz	r0, 80097ca <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_nbr;
 80097c4:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	e7f4      	b.n	80097b4 <USBH_ioctl+0x14>
      res = RES_ERROR;
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7f2      	b.n	80097b4 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 80097ce:	4601      	mov	r1, r0
 80097d0:	aa01      	add	r2, sp, #4
 80097d2:	4805      	ldr	r0, [pc, #20]	; (80097e8 <USBH_ioctl+0x48>)
 80097d4:	f7fd f885 	bl	80068e2 <USBH_MSC_GetLUNInfo>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d1f6      	bne.n	80097ca <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_size;
 80097dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80097e0:	e7f1      	b.n	80097c6 <USBH_ioctl+0x26>
    res = RES_OK;
 80097e2:	2000      	movs	r0, #0
 80097e4:	e7e6      	b.n	80097b4 <USBH_ioctl+0x14>
 80097e6:	bf00      	nop
 80097e8:	2000d9dc 	.word	0x2000d9dc

080097ec <USBH_read>:
{
 80097ec:	b510      	push	{r4, lr}
 80097ee:	4604      	mov	r4, r0
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80097f0:	0788      	lsls	r0, r1, #30
{
 80097f2:	b090      	sub	sp, #64	; 0x40
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80097f4:	d11f      	bne.n	8009836 <USBH_read+0x4a>
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	4810      	ldr	r0, [pc, #64]	; (800983c <USBH_read+0x50>)
 80097fa:	460b      	mov	r3, r1
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7fd f887 	bl	8006910 <USBH_MSC_Read>
  if(status == USBH_OK)
 8009802:	b1b0      	cbz	r0, 8009832 <USBH_read+0x46>
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8009804:	aa03      	add	r2, sp, #12
 8009806:	4621      	mov	r1, r4
 8009808:	480c      	ldr	r0, [pc, #48]	; (800983c <USBH_read+0x50>)
 800980a:	f7fd f86a 	bl	80068e2 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800980e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8009812:	2b28      	cmp	r3, #40	; 0x28
 8009814:	d003      	beq.n	800981e <USBH_read+0x32>
 8009816:	2b3a      	cmp	r3, #58	; 0x3a
 8009818:	d001      	beq.n	800981e <USBH_read+0x32>
 800981a:	2b04      	cmp	r3, #4
 800981c:	d10b      	bne.n	8009836 <USBH_read+0x4a>
      USBH_ErrLog ("USB Disk is not ready!");  
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBH_read+0x54>)
 8009820:	f00d f832 	bl	8016888 <iprintf>
 8009824:	4807      	ldr	r0, [pc, #28]	; (8009844 <USBH_read+0x58>)
 8009826:	f00d f82f 	bl	8016888 <iprintf>
 800982a:	200a      	movs	r0, #10
 800982c:	f00d f844 	bl	80168b8 <putchar>
 8009830:	2003      	movs	r0, #3
}
 8009832:	b010      	add	sp, #64	; 0x40
 8009834:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 8009836:	2001      	movs	r0, #1
 8009838:	e7fb      	b.n	8009832 <USBH_read+0x46>
 800983a:	bf00      	nop
 800983c:	2000d9dc 	.word	0x2000d9dc
 8009840:	0801863f 	.word	0x0801863f
 8009844:	0801899c 	.word	0x0801899c

08009848 <USBH_write>:
{
 8009848:	b510      	push	{r4, lr}
 800984a:	4604      	mov	r4, r0
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 800984c:	0788      	lsls	r0, r1, #30
{
 800984e:	b090      	sub	sp, #64	; 0x40
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 8009850:	d12d      	bne.n	80098ae <USBH_write+0x66>
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4817      	ldr	r0, [pc, #92]	; (80098b4 <USBH_write+0x6c>)
 8009856:	460b      	mov	r3, r1
 8009858:	4621      	mov	r1, r4
 800985a:	f7fd f89c 	bl	8006996 <USBH_MSC_Write>
  if(status == USBH_OK)
 800985e:	b320      	cbz	r0, 80098aa <USBH_write+0x62>
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 8009860:	aa03      	add	r2, sp, #12
 8009862:	4621      	mov	r1, r4
 8009864:	4813      	ldr	r0, [pc, #76]	; (80098b4 <USBH_write+0x6c>)
 8009866:	f7fd f83c 	bl	80068e2 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 800986a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800986e:	2b27      	cmp	r3, #39	; 0x27
 8009870:	d011      	beq.n	8009896 <USBH_write+0x4e>
 8009872:	d80c      	bhi.n	800988e <USBH_write+0x46>
 8009874:	2b04      	cmp	r3, #4
 8009876:	d11a      	bne.n	80098ae <USBH_write+0x66>
      USBH_ErrLog ("USB Disk is not ready!");  
 8009878:	480f      	ldr	r0, [pc, #60]	; (80098b8 <USBH_write+0x70>)
 800987a:	f00d f805 	bl	8016888 <iprintf>
 800987e:	480f      	ldr	r0, [pc, #60]	; (80098bc <USBH_write+0x74>)
 8009880:	f00d f802 	bl	8016888 <iprintf>
 8009884:	200a      	movs	r0, #10
 8009886:	f00d f817 	bl	80168b8 <putchar>
 800988a:	2003      	movs	r0, #3
 800988c:	e00d      	b.n	80098aa <USBH_write+0x62>
    switch (info.sense.asc)
 800988e:	2b28      	cmp	r3, #40	; 0x28
 8009890:	d0f2      	beq.n	8009878 <USBH_write+0x30>
 8009892:	2b3a      	cmp	r3, #58	; 0x3a
 8009894:	e7ef      	b.n	8009876 <USBH_write+0x2e>
      USBH_ErrLog("USB Disk is Write protected!");
 8009896:	4808      	ldr	r0, [pc, #32]	; (80098b8 <USBH_write+0x70>)
 8009898:	f00c fff6 	bl	8016888 <iprintf>
 800989c:	4808      	ldr	r0, [pc, #32]	; (80098c0 <USBH_write+0x78>)
 800989e:	f00c fff3 	bl	8016888 <iprintf>
 80098a2:	200a      	movs	r0, #10
 80098a4:	f00d f808 	bl	80168b8 <putchar>
      res = RES_WRPRT;
 80098a8:	2002      	movs	r0, #2
}
 80098aa:	b010      	add	sp, #64	; 0x40
 80098ac:	bd10      	pop	{r4, pc}
      res = RES_ERROR;
 80098ae:	2001      	movs	r0, #1
 80098b0:	e7fb      	b.n	80098aa <USBH_write+0x62>
 80098b2:	bf00      	nop
 80098b4:	2000d9dc 	.word	0x2000d9dc
 80098b8:	0801863f 	.word	0x0801863f
 80098bc:	0801899c 	.word	0x0801899c
 80098c0:	080189b3 	.word	0x080189b3

080098c4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80098c4:	287f      	cmp	r0, #127	; 0x7f
{
 80098c6:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 80098c8:	d906      	bls.n	80098d8 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80098ca:	b131      	cbz	r1, 80098da <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098cc:	28ff      	cmp	r0, #255	; 0xff
 80098ce:	d812      	bhi.n	80098f6 <ff_convert+0x32>
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <ff_convert+0x38>)
 80098d2:	3880      	subs	r0, #128	; 0x80
 80098d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80098d8:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 80098da:	4a08      	ldr	r2, [pc, #32]	; (80098fc <ff_convert+0x38>)
 80098dc:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 80098e0:	b28b      	uxth	r3, r1
 80098e2:	4284      	cmp	r4, r0
 80098e4:	d003      	beq.n	80098ee <ff_convert+0x2a>
 80098e6:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 80098e8:	2980      	cmp	r1, #128	; 0x80
 80098ea:	d1f7      	bne.n	80098dc <ff_convert+0x18>
 80098ec:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 80098ee:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80098f2:	b2c0      	uxtb	r0, r0
 80098f4:	e7f0      	b.n	80098d8 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80098f6:	2000      	movs	r0, #0
 80098f8:	e7ee      	b.n	80098d8 <ff_convert+0x14>
 80098fa:	bf00      	nop
 80098fc:	080189d0 	.word	0x080189d0

08009900 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009900:	2300      	movs	r3, #0
 8009902:	4906      	ldr	r1, [pc, #24]	; (800991c <ff_wtoupper+0x1c>)
 8009904:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009908:	b122      	cbz	r2, 8009914 <ff_wtoupper+0x14>
 800990a:	4282      	cmp	r2, r0
 800990c:	d103      	bne.n	8009916 <ff_wtoupper+0x16>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800990e:	4a04      	ldr	r2, [pc, #16]	; (8009920 <ff_wtoupper+0x20>)
 8009910:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 8009914:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009916:	3301      	adds	r3, #1
 8009918:	e7f4      	b.n	8009904 <ff_wtoupper+0x4>
 800991a:	bf00      	nop
 800991c:	08018ad0 	.word	0x08018ad0
 8009920:	08018cb0 	.word	0x08018cb0

08009924 <ff_cre_syncobj>:
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
  int ret;
  
  osSemaphoreDef(SEM);
 8009924:	2300      	movs	r3, #0
{
 8009926:	b513      	push	{r0, r1, r4, lr}
 8009928:	460c      	mov	r4, r1
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800992a:	4668      	mov	r0, sp
 800992c:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800992e:	e9cd 3300 	strd	r3, r3, [sp]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8009932:	f000 f8b1 	bl	8009a98 <osSemaphoreCreate>
 8009936:	6020      	str	r0, [r4, #0]
  ret = (*sobj != NULL);
  
  return ret;
}
 8009938:	3000      	adds	r0, #0
 800993a:	bf18      	it	ne
 800993c:	2001      	movne	r0, #1
 800993e:	b002      	add	sp, #8
 8009940:	bd10      	pop	{r4, pc}

08009942 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009942:	b508      	push	{r3, lr}
  osSemaphoreDelete (sobj);
 8009944:	f000 f8f6 	bl	8009b34 <osSemaphoreDelete>
  return 1;
}
 8009948:	2001      	movs	r0, #1
 800994a:	bd08      	pop	{r3, pc}

0800994c <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800994c:	b508      	push	{r3, lr}
  int ret = 0;
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800994e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009952:	f000 f8c7 	bl	8009ae4 <osSemaphoreWait>
  {
    ret = 1;
  }
  
  return ret;
}
 8009956:	fab0 f080 	clz	r0, r0
 800995a:	0940      	lsrs	r0, r0, #5
 800995c:	bd08      	pop	{r3, pc}

0800995e <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 800995e:	f000 b8e7 	b.w	8009b30 <osSemaphoreRelease>

08009962 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009962:	f00c beb9 	b.w	80166d8 <malloc>

08009966 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 8009966:	f00c bebf 	b.w	80166e8 <free>

0800996a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800996a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800996c:	f001 f844 	bl	800a9f8 <vTaskStartScheduler>
  
  return osOK;
}
 8009970:	2000      	movs	r0, #0
 8009972:	bd08      	pop	{r3, pc}

08009974 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009974:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8009978:	b10b      	cbz	r3, 800997e <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800997a:	f001 b889 	b.w	800aa90 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800997e:	f001 b881 	b.w	800aa84 <xTaskGetTickCount>

08009982 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009982:	b570      	push	{r4, r5, r6, lr}
 8009984:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009986:	6946      	ldr	r6, [r0, #20]
{
 8009988:	460b      	mov	r3, r1
 800998a:	e9d0 1000 	ldrd	r1, r0, [r0]
 800998e:	b086      	sub	sp, #24
 8009990:	692a      	ldr	r2, [r5, #16]
 8009992:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009996:	b176      	cbz	r6, 80099b6 <osThreadCreate+0x34>
 8009998:	69ad      	ldr	r5, [r5, #24]
 800999a:	b165      	cbz	r5, 80099b6 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800999c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800999e:	bf0c      	ite	eq
 80099a0:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80099a2:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099a4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80099a8:	9400      	str	r4, [sp, #0]
 80099aa:	f000 ffc1 	bl	800a930 <xTaskCreateStatic>
 80099ae:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80099b0:	9805      	ldr	r0, [sp, #20]
}
 80099b2:	b006      	add	sp, #24
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80099b6:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80099b8:	bf0c      	ite	eq
 80099ba:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80099bc:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099be:	ad05      	add	r5, sp, #20
 80099c0:	b292      	uxth	r2, r2
 80099c2:	e9cd 4500 	strd	r4, r5, [sp]
 80099c6:	f000 ffea 	bl	800a99e <xTaskCreate>
 80099ca:	2801      	cmp	r0, #1
 80099cc:	d0f0      	beq.n	80099b0 <osThreadCreate+0x2e>
      return NULL;
 80099ce:	2000      	movs	r0, #0
 80099d0:	e7ef      	b.n	80099b2 <osThreadCreate+0x30>

080099d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80099d2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80099d4:	2800      	cmp	r0, #0
 80099d6:	bf08      	it	eq
 80099d8:	2001      	moveq	r0, #1
 80099da:	f001 f969 	bl	800acb0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80099de:	2000      	movs	r0, #0
 80099e0:	bd08      	pop	{r3, pc}

080099e2 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80099e2:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80099e4:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 80099e6:	b109      	cbz	r1, 80099ec <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80099e8:	f000 bb50 	b.w	800a08c <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80099ec:	f000 bb63 	b.w	800a0b6 <xQueueCreateMutex>

080099f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80099f0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80099f2:	2400      	movs	r4, #0
 80099f4:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80099f6:	b1e0      	cbz	r0, 8009a32 <osMutexWait+0x42>
 80099f8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80099fc:	b1a3      	cbz	r3, 8009a28 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80099fe:	aa01      	add	r2, sp, #4
 8009a00:	4621      	mov	r1, r4
 8009a02:	f000 fd81 	bl	800a508 <xQueueReceiveFromISR>
 8009a06:	2801      	cmp	r0, #1
 8009a08:	d002      	beq.n	8009a10 <osMutexWait+0x20>
      return osErrorOS;
 8009a0a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	b13b      	cbz	r3, 8009a24 <osMutexWait+0x34>
 8009a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a18:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <osMutexWait+0x48>)
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	f3bf 8f6f 	isb	sy
  return osOK;
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7f1      	b.n	8009a0c <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009a28:	f000 fcac 	bl	800a384 <xQueueSemaphoreTake>
 8009a2c:	2801      	cmp	r0, #1
 8009a2e:	d0f9      	beq.n	8009a24 <osMutexWait+0x34>
 8009a30:	e7eb      	b.n	8009a0a <osMutexWait+0x1a>
    return osErrorParameter;
 8009a32:	2080      	movs	r0, #128	; 0x80
 8009a34:	e7ea      	b.n	8009a0c <osMutexWait+0x1c>
 8009a36:	bf00      	nop
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009a3c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8009a3e:	2400      	movs	r4, #0
 8009a40:	9401      	str	r4, [sp, #4]
 8009a42:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8009a46:	b193      	cbz	r3, 8009a6e <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	f000 fba7 	bl	800a19c <xQueueGiveFromISR>
 8009a4e:	2801      	cmp	r0, #1
 8009a50:	d113      	bne.n	8009a7a <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	b913      	cbnz	r3, 8009a5c <osMutexRelease+0x20>
  osStatus result = osOK;
 8009a56:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8009a58:	b002      	add	sp, #8
 8009a5a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8009a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <osMutexRelease+0x44>)
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	e7f3      	b.n	8009a56 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009a6e:	461a      	mov	r2, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	f000 fa59 	bl	8009f28 <xQueueGenericSend>
 8009a76:	2801      	cmp	r0, #1
 8009a78:	d0ed      	beq.n	8009a56 <osMutexRelease+0x1a>
    result = osErrorOS;
 8009a7a:	20ff      	movs	r0, #255	; 0xff
 8009a7c:	e7ec      	b.n	8009a58 <osMutexRelease+0x1c>
 8009a7e:	bf00      	nop
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009a84:	b510      	push	{r4, lr}
 8009a86:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8009a8a:	b91c      	cbnz	r4, 8009a94 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8009a8c:	f000 fdbe 	bl	800a60c <vQueueDelete>

  return osOK;
 8009a90:	4620      	mov	r0, r4
}
 8009a92:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8009a94:	2082      	movs	r0, #130	; 0x82
 8009a96:	e7fc      	b.n	8009a92 <osMutexDelete+0xe>

08009a98 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009a9a:	6844      	ldr	r4, [r0, #4]
{ 
 8009a9c:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8009a9e:	b16c      	cbz	r4, 8009abc <osSemaphoreCreate+0x24>
    if (count == 1) {
 8009aa0:	2901      	cmp	r1, #1
 8009aa2:	d11b      	bne.n	8009adc <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4628      	mov	r0, r5
 8009aac:	4623      	mov	r3, r4
 8009aae:	4611      	mov	r1, r2
 8009ab0:	f000 f9cc 	bl	8009e4c <xQueueGenericCreateStatic>
 8009ab4:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	b003      	add	sp, #12
 8009aba:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8009abc:	2901      	cmp	r1, #1
 8009abe:	d10f      	bne.n	8009ae0 <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f000 fa0a 	bl	8009ede <xQueueGenericCreate>
 8009aca:	4605      	mov	r5, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0f2      	beq.n	8009ab6 <osSemaphoreCreate+0x1e>
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f000 fa27 	bl	8009f28 <xQueueGenericSend>
 8009ada:	e7ec      	b.n	8009ab6 <osSemaphoreCreate+0x1e>
      return NULL;
 8009adc:	2500      	movs	r5, #0
 8009ade:	e7ea      	b.n	8009ab6 <osSemaphoreCreate+0x1e>
 8009ae0:	4625      	mov	r5, r4
 8009ae2:	e7e8      	b.n	8009ab6 <osSemaphoreCreate+0x1e>

08009ae4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009ae4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8009aea:	b1e0      	cbz	r0, 8009b26 <osSemaphoreWait+0x42>
 8009aec:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8009af0:	b1a3      	cbz	r3, 8009b1c <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009af2:	aa01      	add	r2, sp, #4
 8009af4:	4621      	mov	r1, r4
 8009af6:	f000 fd07 	bl	800a508 <xQueueReceiveFromISR>
 8009afa:	2801      	cmp	r0, #1
 8009afc:	d002      	beq.n	8009b04 <osSemaphoreWait+0x20>
      return osErrorOS;
 8009afe:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8009b00:	b002      	add	sp, #8
 8009b02:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	b13b      	cbz	r3, 8009b18 <osSemaphoreWait+0x34>
 8009b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0c:	4b07      	ldr	r3, [pc, #28]	; (8009b2c <osSemaphoreWait+0x48>)
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	f3bf 8f6f 	isb	sy
  return osOK;
 8009b18:	2000      	movs	r0, #0
 8009b1a:	e7f1      	b.n	8009b00 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009b1c:	f000 fc32 	bl	800a384 <xQueueSemaphoreTake>
 8009b20:	2801      	cmp	r0, #1
 8009b22:	d0f9      	beq.n	8009b18 <osSemaphoreWait+0x34>
 8009b24:	e7eb      	b.n	8009afe <osSemaphoreWait+0x1a>
    return osErrorParameter;
 8009b26:	2080      	movs	r0, #128	; 0x80
 8009b28:	e7ea      	b.n	8009b00 <osSemaphoreWait+0x1c>
 8009b2a:	bf00      	nop
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <osSemaphoreRelease>:
 8009b30:	f7ff bf84 	b.w	8009a3c <osMutexRelease>

08009b34 <osSemaphoreDelete>:
 8009b34:	f7ff bfa6 	b.w	8009a84 <osMutexDelete>

08009b38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b38:	b513      	push	{r0, r1, r4, lr}
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	c807      	ldmia	r0, {r0, r1, r2}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b3e:	b13a      	cbz	r2, 8009b50 <osMessageCreate+0x18>
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	b12b      	cbz	r3, 8009b50 <osMessageCreate+0x18>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b44:	2400      	movs	r4, #0
 8009b46:	9400      	str	r4, [sp, #0]
 8009b48:	f000 f980 	bl	8009e4c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009b4c:	b002      	add	sp, #8
 8009b4e:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b50:	2200      	movs	r2, #0
}
 8009b52:	b002      	add	sp, #8
 8009b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b58:	f000 b9c1 	b.w	8009ede <xQueueGenericCreate>

08009b5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8009b5e:	2400      	movs	r4, #0
{
 8009b60:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b62:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8009b64:	42a2      	cmp	r2, r4
 8009b66:	bf08      	it	eq
 8009b68:	2201      	moveq	r2, #1
 8009b6a:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8009b6e:	b1ab      	cbz	r3, 8009b9c <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009b70:	4623      	mov	r3, r4
 8009b72:	aa03      	add	r2, sp, #12
 8009b74:	a901      	add	r1, sp, #4
 8009b76:	f000 fab0 	bl	800a0da <xQueueGenericSendFromISR>
 8009b7a:	2801      	cmp	r0, #1
 8009b7c:	d002      	beq.n	8009b84 <osMessagePut+0x28>
      return osErrorOS;
 8009b7e:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8009b80:	b004      	add	sp, #16
 8009b82:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8009b84:	9b03      	ldr	r3, [sp, #12]
 8009b86:	b13b      	cbz	r3, 8009b98 <osMessagePut+0x3c>
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <osMessagePut+0x4c>)
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	f3bf 8f6f 	isb	sy
  return osOK;
 8009b98:	2000      	movs	r0, #0
 8009b9a:	e7f1      	b.n	8009b80 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009b9c:	a901      	add	r1, sp, #4
 8009b9e:	f000 f9c3 	bl	8009f28 <xQueueGenericSend>
 8009ba2:	2801      	cmp	r0, #1
 8009ba4:	d0f8      	beq.n	8009b98 <osMessagePut+0x3c>
 8009ba6:	e7ea      	b.n	8009b7e <osMessagePut+0x22>
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009bac:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8009bae:	2600      	movs	r6, #0
{
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4617      	mov	r7, r2
 8009bb6:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8009bb8:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8009bba:	9602      	str	r6, [sp, #8]
 8009bbc:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8009bbe:	b911      	cbnz	r1, 8009bc6 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8009bc0:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	e017      	b.n	8009bf6 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8009bc6:	9600      	str	r6, [sp, #0]
 8009bc8:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8009bcc:	b1d3      	cbz	r3, 8009c04 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009bce:	466a      	mov	r2, sp
 8009bd0:	a902      	add	r1, sp, #8
 8009bd2:	f000 fc99 	bl	800a508 <xQueueReceiveFromISR>
 8009bd6:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8009bd8:	bf04      	itt	eq
 8009bda:	2310      	moveq	r3, #16
 8009bdc:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8009bde:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8009be0:	bf18      	it	ne
 8009be2:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8009be4:	b13b      	cbz	r3, 8009bf6 <osMessageGet+0x4a>
 8009be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bea:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <osMessageGet+0x70>)
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8009bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009bfe:	4620      	mov	r0, r4
 8009c00:	b005      	add	sp, #20
 8009c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009c04:	a902      	add	r1, sp, #8
 8009c06:	f000 fb1d 	bl	800a244 <xQueueReceive>
 8009c0a:	2801      	cmp	r0, #1
 8009c0c:	d101      	bne.n	8009c12 <osMessageGet+0x66>
      event.status = osEventMessage;
 8009c0e:	2310      	movs	r3, #16
 8009c10:	e7d7      	b.n	8009bc2 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009c12:	2f00      	cmp	r7, #0
 8009c14:	bf0c      	ite	eq
 8009c16:	2300      	moveq	r3, #0
 8009c18:	2340      	movne	r3, #64	; 0x40
 8009c1a:	e7d2      	b.n	8009bc2 <osMessageGet+0x16>
 8009c1c:	e000ed04 	.word	0xe000ed04

08009c20 <osMessageWaiting>:
 8009c20:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8009c24:	b10b      	cbz	r3, 8009c2a <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009c26:	f000 bcd1 	b.w	800a5cc <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009c2a:	f000 bcbc 	b.w	800a5a6 <uxQueueMessagesWaiting>

08009c2e <osMessageDelete>:
 8009c2e:	f7ff bf29 	b.w	8009a84 <osMutexDelete>

08009c32 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c36:	f100 0308 	add.w	r3, r0, #8
 8009c3a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c46:	4770      	bx	lr

08009c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c4c:	4770      	bx	lr

08009c4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c4e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c50:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009c52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c54:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c5a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8009c5c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c5e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009c60:	3301      	adds	r3, #1
 8009c62:	6003      	str	r3, [r0, #0]
}
 8009c64:	4770      	bx	lr

08009c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c66:	680a      	ldr	r2, [r1, #0]
{
 8009c68:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c6a:	1c53      	adds	r3, r2, #1
 8009c6c:	d10a      	bne.n	8009c84 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c6e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c74:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c76:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c78:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8009c7a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c7c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009c7e:	3301      	adds	r3, #1
 8009c80:	6003      	str	r3, [r0, #0]
}
 8009c82:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c84:	f100 0308 	add.w	r3, r0, #8
 8009c88:	685c      	ldr	r4, [r3, #4]
 8009c8a:	6825      	ldr	r5, [r4, #0]
 8009c8c:	4295      	cmp	r5, r2
 8009c8e:	d8ef      	bhi.n	8009c70 <vListInsert+0xa>
 8009c90:	4623      	mov	r3, r4
 8009c92:	e7f9      	b.n	8009c88 <vListInsert+0x22>

08009c94 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009c94:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c96:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009c9a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c9c:	6882      	ldr	r2, [r0, #8]
 8009c9e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ca0:	6859      	ldr	r1, [r3, #4]
 8009ca2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca4:	bf08      	it	eq
 8009ca6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009ca8:	2200      	movs	r2, #0
 8009caa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	3a01      	subs	r2, #1
 8009cb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cb2:	6818      	ldr	r0, [r3, #0]
}
 8009cb4:	4770      	bx	lr

08009cb6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cba:	f001 fa7b 	bl	800b1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cbe:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009cc0:	f001 fa9a 	bl	800b1f8 <vPortExitCritical>

	return xReturn;
}
 8009cc4:	fab4 f084 	clz	r0, r4
 8009cc8:	0940      	lsrs	r0, r0, #5
 8009cca:	bd10      	pop	{r4, pc}

08009ccc <prvCopyDataToQueue>:
{
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8009cd2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cd4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd6:	b942      	cbnz	r2, 8009cea <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd8:	6805      	ldr	r5, [r0, #0]
 8009cda:	b99d      	cbnz	r5, 8009d04 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009cdc:	6840      	ldr	r0, [r0, #4]
 8009cde:	f001 f95b 	bl	800af98 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8009ce2:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ce4:	3601      	adds	r6, #1
 8009ce6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8009cea:	b96d      	cbnz	r5, 8009d08 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009cec:	6880      	ldr	r0, [r0, #8]
 8009cee:	f00c fd12 	bl	8016716 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009cf2:	68a3      	ldr	r3, [r4, #8]
 8009cf4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009cf6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cf8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009cfa:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d301      	bcc.n	8009d04 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7ed      	b.n	8009ce4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d08:	68c0      	ldr	r0, [r0, #12]
 8009d0a:	f00c fd04 	bl	8016716 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d10:	68e2      	ldr	r2, [r4, #12]
 8009d12:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d14:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d16:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d18:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009d1a:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009d1c:	bf3e      	ittt	cc
 8009d1e:	6862      	ldrcc	r2, [r4, #4]
 8009d20:	189b      	addcc	r3, r3, r2
 8009d22:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009d24:	2d02      	cmp	r5, #2
 8009d26:	d1ed      	bne.n	8009d04 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d28:	b10e      	cbz	r6, 8009d2e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8009d2a:	3e01      	subs	r6, #1
 8009d2c:	e7ea      	b.n	8009d04 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8009d2e:	4630      	mov	r0, r6
 8009d30:	e7d8      	b.n	8009ce4 <prvCopyDataToQueue+0x18>

08009d32 <prvCopyDataFromQueue>:
{
 8009d32:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009d36:	b410      	push	{r4}
 8009d38:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d3a:	b162      	cbz	r2, 8009d56 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009d3c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d3e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009d40:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d42:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009d44:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009d46:	bf28      	it	cs
 8009d48:	6819      	ldrcs	r1, [r3, #0]
}
 8009d4a:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009d4c:	bf28      	it	cs
 8009d4e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009d50:	68d9      	ldr	r1, [r3, #12]
 8009d52:	f00c bce0 	b.w	8016716 <memcpy>
}
 8009d56:	bc10      	pop	{r4}
 8009d58:	4770      	bx	lr

08009d5a <prvUnlockQueue>:
{
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009d5e:	f001 fa29 	bl	800b1b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009d62:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d66:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8009d6a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	dc14      	bgt.n	8009d9a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8009d70:	23ff      	movs	r3, #255	; 0xff
 8009d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009d76:	f001 fa3f 	bl	800b1f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009d7a:	f001 fa1b 	bl	800b1b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009d7e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d82:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8009d86:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	dc12      	bgt.n	8009db2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8009d8c:	23ff      	movs	r3, #255	; 0xff
 8009d8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8009d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009d96:	f001 ba2f 	b.w	800b1f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0e7      	beq.n	8009d70 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009da0:	4630      	mov	r0, r6
 8009da2:	f001 f805 	bl	800adb0 <xTaskRemoveFromEventList>
 8009da6:	b108      	cbz	r0, 8009dac <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8009da8:	f001 f88c 	bl	800aec4 <vTaskMissedYield>
 8009dac:	3d01      	subs	r5, #1
 8009dae:	b26d      	sxtb	r5, r5
 8009db0:	e7dc      	b.n	8009d6c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0e9      	beq.n	8009d8c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 fff9 	bl	800adb0 <xTaskRemoveFromEventList>
 8009dbe:	b108      	cbz	r0, 8009dc4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8009dc0:	f001 f880 	bl	800aec4 <vTaskMissedYield>
 8009dc4:	3d01      	subs	r5, #1
 8009dc6:	b26d      	sxtb	r5, r5
 8009dc8:	e7de      	b.n	8009d88 <prvUnlockQueue+0x2e>
	...

08009dcc <xQueueGenericReset>:
{
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	b940      	cbnz	r0, 8009de6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8009de6:	f001 f9e5 	bl	800b1b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009dea:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8009dee:	4343      	muls	r3, r0
 8009df0:	6822      	ldr	r2, [r4, #0]
 8009df2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009df4:	1a1b      	subs	r3, r3, r0
 8009df6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009df8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009dfa:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009dfc:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8009dfe:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e00:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e02:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009e0c:	b995      	cbnz	r5, 8009e34 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0e:	6923      	ldr	r3, [r4, #16]
 8009e10:	b163      	cbz	r3, 8009e2c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e12:	f104 0010 	add.w	r0, r4, #16
 8009e16:	f000 ffcb 	bl	800adb0 <xTaskRemoveFromEventList>
 8009e1a:	b138      	cbz	r0, 8009e2c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8009e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <xQueueGenericReset+0x7c>)
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009e2c:	f001 f9e4 	bl	800b1f8 <vPortExitCritical>
}
 8009e30:	2001      	movs	r0, #1
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e34:	f104 0010 	add.w	r0, r4, #16
 8009e38:	f7ff fefb 	bl	8009c32 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e40:	f7ff fef7 	bl	8009c32 <vListInitialise>
 8009e44:	e7f2      	b.n	8009e2c <xQueueGenericReset+0x60>
 8009e46:	bf00      	nop
 8009e48:	e000ed04 	.word	0xe000ed04

08009e4c <xQueueGenericCreateStatic>:
	{
 8009e4c:	b513      	push	{r0, r1, r4, lr}
 8009e4e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e50:	b940      	cbnz	r0, 8009e64 <xQueueGenericCreateStatic+0x18>
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	e7fe      	b.n	8009e62 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8009e64:	b943      	cbnz	r3, 8009e78 <xQueueGenericCreateStatic+0x2c>
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	e7fe      	b.n	8009e76 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e78:	b14a      	cbz	r2, 8009e8e <xQueueGenericCreateStatic+0x42>
 8009e7a:	b991      	cbnz	r1, 8009ea2 <xQueueGenericCreateStatic+0x56>
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e8e:	b141      	cbz	r1, 8009ea2 <xQueueGenericCreateStatic+0x56>
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ea2:	2348      	movs	r3, #72	; 0x48
 8009ea4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	2b48      	cmp	r3, #72	; 0x48
 8009eaa:	d008      	beq.n	8009ebe <xQueueGenericCreateStatic+0x72>
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ebe:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	bf08      	it	eq
 8009ec4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8009ec6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009eca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ece:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f7ff ff7a 	bl	8009dcc <xQueueGenericReset>
	}
 8009ed8:	4620      	mov	r0, r4
 8009eda:	b002      	add	sp, #8
 8009edc:	bd10      	pop	{r4, pc}

08009ede <xQueueGenericCreate>:
	{
 8009ede:	b570      	push	{r4, r5, r6, lr}
 8009ee0:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	b940      	cbnz	r0, 8009ef8 <xQueueGenericCreate+0x1a>
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	e7fe      	b.n	8009ef6 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009efa:	3048      	adds	r0, #72	; 0x48
 8009efc:	f001 fa8e 	bl	800b41c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009f00:	4604      	mov	r4, r0
 8009f02:	b150      	cbz	r0, 8009f1a <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f0a:	b945      	cbnz	r5, 8009f1e <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f0c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009f0e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f12:	2101      	movs	r1, #1
 8009f14:	4620      	mov	r0, r4
 8009f16:	f7ff ff59 	bl	8009dcc <xQueueGenericReset>
	}
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009f1e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f22:	6003      	str	r3, [r0, #0]
 8009f24:	e7f3      	b.n	8009f0e <xQueueGenericCreate+0x30>
	...

08009f28 <xQueueGenericSend>:
{
 8009f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	4688      	mov	r8, r1
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009f32:	4604      	mov	r4, r0
 8009f34:	b940      	cbnz	r0, 8009f48 <xQueueGenericSend+0x20>
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	e7fe      	b.n	8009f46 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f48:	b951      	cbnz	r1, 8009f60 <xQueueGenericSend+0x38>
 8009f4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009f4c:	b143      	cbz	r3, 8009f60 <xQueueGenericSend+0x38>
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	e7fe      	b.n	8009f5e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f60:	2f02      	cmp	r7, #2
 8009f62:	d10b      	bne.n	8009f7c <xQueueGenericSend+0x54>
 8009f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d008      	beq.n	8009f7c <xQueueGenericSend+0x54>
 8009f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	e7fe      	b.n	8009f7a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f7c:	f000 ffa8 	bl	800aed0 <xTaskGetSchedulerState>
 8009f80:	b950      	cbnz	r0, 8009f98 <xQueueGenericSend+0x70>
 8009f82:	9e01      	ldr	r6, [sp, #4]
 8009f84:	b14e      	cbz	r6, 8009f9a <xQueueGenericSend+0x72>
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	e7fe      	b.n	8009f96 <xQueueGenericSend+0x6e>
 8009f98:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009f9a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8009f9e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800a088 <xQueueGenericSend+0x160>
 8009fa2:	e037      	b.n	800a014 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fa4:	9d01      	ldr	r5, [sp, #4]
 8009fa6:	b91d      	cbnz	r5, 8009fb0 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8009fa8:	f001 f926 	bl	800b1f8 <vPortExitCritical>
			return errQUEUE_FULL;
 8009fac:	2000      	movs	r0, #0
 8009fae:	e050      	b.n	800a052 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8009fb0:	b916      	cbnz	r6, 8009fb8 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fb2:	a802      	add	r0, sp, #8
 8009fb4:	f000 ff3e 	bl	800ae34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009fb8:	f001 f91e 	bl	800b1f8 <vPortExitCritical>
		vTaskSuspendAll();
 8009fbc:	f000 fd5a 	bl	800aa74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fc0:	f001 f8f8 	bl	800b1b4 <vPortEnterCritical>
 8009fc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	bf08      	it	eq
 8009fcc:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8009fd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009fd4:	2bff      	cmp	r3, #255	; 0xff
 8009fd6:	bf08      	it	eq
 8009fd8:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8009fdc:	f001 f90c 	bl	800b1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fe0:	a901      	add	r1, sp, #4
 8009fe2:	a802      	add	r0, sp, #8
 8009fe4:	f000 ff32 	bl	800ae4c <xTaskCheckForTimeOut>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d146      	bne.n	800a07a <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fec:	f001 f8e2 	bl	800b1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ff0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d12f      	bne.n	800a058 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009ff8:	f001 f8fe 	bl	800b1f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ffc:	9901      	ldr	r1, [sp, #4]
 8009ffe:	f104 0010 	add.w	r0, r4, #16
 800a002:	f000 febb 	bl	800ad7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a006:	4620      	mov	r0, r4
 800a008:	f7ff fea7 	bl	8009d5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a00c:	f000 fdda 	bl	800abc4 <xTaskResumeAll>
 800a010:	b350      	cbz	r0, 800a068 <xQueueGenericSend+0x140>
 800a012:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a014:	f001 f8ce 	bl	800b1b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a01a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d301      	bcc.n	800a024 <xQueueGenericSend+0xfc>
 800a020:	2f02      	cmp	r7, #2
 800a022:	d1bf      	bne.n	8009fa4 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a024:	463a      	mov	r2, r7
 800a026:	4641      	mov	r1, r8
 800a028:	4620      	mov	r0, r4
 800a02a:	f7ff fe4f 	bl	8009ccc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a030:	b11b      	cbz	r3, 800a03a <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a032:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a036:	f000 febb 	bl	800adb0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800a03a:	b138      	cbz	r0, 800a04c <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 800a03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a040:	4b11      	ldr	r3, [pc, #68]	; (800a088 <xQueueGenericSend+0x160>)
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a04c:	f001 f8d4 	bl	800b1f8 <vPortExitCritical>
				return pdPASS;
 800a050:	2001      	movs	r0, #1
}
 800a052:	b004      	add	sp, #16
 800a054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800a058:	f001 f8ce 	bl	800b1f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800a05c:	4620      	mov	r0, r4
 800a05e:	f7ff fe7c 	bl	8009d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a062:	f000 fdaf 	bl	800abc4 <xTaskResumeAll>
 800a066:	e7d4      	b.n	800a012 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800a068:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a06c:	f8ca 3000 	str.w	r3, [sl]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	e7cb      	b.n	800a012 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800a07a:	4620      	mov	r0, r4
 800a07c:	f7ff fe6d 	bl	8009d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a080:	f000 fda0 	bl	800abc4 <xTaskResumeAll>
 800a084:	e792      	b.n	8009fac <xQueueGenericSend+0x84>
 800a086:	bf00      	nop
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <xQueueCreateMutexStatic>:
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a08c:	2200      	movs	r2, #0
	{
 800a08e:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a090:	460b      	mov	r3, r1
 800a092:	9000      	str	r0, [sp, #0]
 800a094:	4611      	mov	r1, r2
 800a096:	2001      	movs	r0, #1
 800a098:	f7ff fed8 	bl	8009e4c <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800a09c:	4604      	mov	r4, r0
 800a09e:	b138      	cbz	r0, 800a0b0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->pxMutexHolder = NULL;
 800a0a0:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a0a2:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a0a6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f7ff ff3c 	bl	8009f28 <xQueueGenericSend>
	}
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	b002      	add	sp, #8
 800a0b4:	bd10      	pop	{r4, pc}

0800a0b6 <xQueueCreateMutex>:
	{
 800a0b6:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7ff ff0e 	bl	8009ede <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b138      	cbz	r0, 800a0d6 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 800a0c6:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a0c8:	e9c0 3300 	strd	r3, r3, [r0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a0cc:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	f7ff ff29 	bl	8009f28 <xQueueGenericSend>
	}
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	bd10      	pop	{r4, pc}

0800a0da <xQueueGenericSendFromISR>:
{
 800a0da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0de:	4689      	mov	r9, r1
 800a0e0:	4690      	mov	r8, r2
 800a0e2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	b940      	cbnz	r0, 800a0fa <xQueueGenericSendFromISR+0x20>
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	e7fe      	b.n	800a0f8 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0fa:	b951      	cbnz	r1, 800a112 <xQueueGenericSendFromISR+0x38>
 800a0fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a0fe:	b143      	cbz	r3, 800a112 <xQueueGenericSendFromISR+0x38>
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	e7fe      	b.n	800a110 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a112:	2f02      	cmp	r7, #2
 800a114:	d10b      	bne.n	800a12e <xQueueGenericSendFromISR+0x54>
 800a116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d008      	beq.n	800a12e <xQueueGenericSendFromISR+0x54>
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a12e:	f001 f923 	bl	800b378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a132:	f3ef 8611 	mrs	r6, BASEPRI
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a146:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d301      	bcc.n	800a152 <xQueueGenericSendFromISR+0x78>
 800a14e:	2f02      	cmp	r7, #2
 800a150:	d122      	bne.n	800a198 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a152:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a156:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800a158:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a15a:	4649      	mov	r1, r9
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fdb5 	bl	8009ccc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a162:	1c6b      	adds	r3, r5, #1
 800a164:	d113      	bne.n	800a18e <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a168:	b90b      	cbnz	r3, 800a16e <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800a16a:	2001      	movs	r0, #1
 800a16c:	e00b      	b.n	800a186 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a16e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a172:	f000 fe1d 	bl	800adb0 <xTaskRemoveFromEventList>
 800a176:	2800      	cmp	r0, #0
 800a178:	d0f7      	beq.n	800a16a <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800a17a:	f1b8 0f00 	cmp.w	r8, #0
 800a17e:	d0f4      	beq.n	800a16a <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a180:	2001      	movs	r0, #1
 800a182:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a186:	f386 8811 	msr	BASEPRI, r6
}
 800a18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a18e:	3501      	adds	r5, #1
 800a190:	b26d      	sxtb	r5, r5
 800a192:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a196:	e7e8      	b.n	800a16a <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800a198:	2000      	movs	r0, #0
 800a19a:	e7f4      	b.n	800a186 <xQueueGenericSendFromISR+0xac>

0800a19c <xQueueGiveFromISR>:
{
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	b940      	cbnz	r0, 800a1b6 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	e7fe      	b.n	800a1b4 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a1b8:	b143      	cbz	r3, 800a1cc <xQueueGiveFromISR+0x30>
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	e7fe      	b.n	800a1ca <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a1cc:	6803      	ldr	r3, [r0, #0]
 800a1ce:	b953      	cbnz	r3, 800a1e6 <xQueueGiveFromISR+0x4a>
 800a1d0:	6843      	ldr	r3, [r0, #4]
 800a1d2:	b143      	cbz	r3, 800a1e6 <xQueueGiveFromISR+0x4a>
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1e6:	f001 f8c7 	bl	800b378 <vPortValidateInterruptPriority>
	__asm volatile
 800a1ea:	f3ef 8611 	mrs	r6, BASEPRI
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a202:	4293      	cmp	r3, r2
 800a204:	d91c      	bls.n	800a240 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a206:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a20a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800a20c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a20e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	d110      	bne.n	800a236 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a216:	b90b      	cbnz	r3, 800a21c <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800a218:	2001      	movs	r0, #1
 800a21a:	e009      	b.n	800a230 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a21c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a220:	f000 fdc6 	bl	800adb0 <xTaskRemoveFromEventList>
 800a224:	2800      	cmp	r0, #0
 800a226:	d0f7      	beq.n	800a218 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d0f5      	beq.n	800a218 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a22c:	2001      	movs	r0, #1
 800a22e:	6028      	str	r0, [r5, #0]
	__asm volatile
 800a230:	f386 8811 	msr	BASEPRI, r6
}
 800a234:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a236:	3301      	adds	r3, #1
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a23e:	e7eb      	b.n	800a218 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800a240:	2000      	movs	r0, #0
 800a242:	e7f5      	b.n	800a230 <xQueueGiveFromISR+0x94>

0800a244 <xQueueReceive>:
{
 800a244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a248:	b085      	sub	sp, #20
 800a24a:	460f      	mov	r7, r1
 800a24c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a24e:	4604      	mov	r4, r0
 800a250:	b940      	cbnz	r0, 800a264 <xQueueReceive+0x20>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	e7fe      	b.n	800a262 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a264:	b951      	cbnz	r1, 800a27c <xQueueReceive+0x38>
 800a266:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a268:	b143      	cbz	r3, 800a27c <xQueueReceive+0x38>
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	e7fe      	b.n	800a27a <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a27c:	f000 fe28 	bl	800aed0 <xTaskGetSchedulerState>
 800a280:	b950      	cbnz	r0, 800a298 <xQueueReceive+0x54>
 800a282:	9e01      	ldr	r6, [sp, #4]
 800a284:	b14e      	cbz	r6, 800a29a <xQueueReceive+0x56>
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	e7fe      	b.n	800a296 <xQueueReceive+0x52>
 800a298:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a29a:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800a29e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800a380 <xQueueReceive+0x13c>
 800a2a2:	e03b      	b.n	800a31c <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2a4:	9d01      	ldr	r5, [sp, #4]
 800a2a6:	b91d      	cbnz	r5, 800a2b0 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800a2a8:	f000 ffa6 	bl	800b1f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e052      	b.n	800a356 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 800a2b0:	b916      	cbnz	r6, 800a2b8 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2b2:	a802      	add	r0, sp, #8
 800a2b4:	f000 fdbe 	bl	800ae34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a2b8:	f000 ff9e 	bl	800b1f8 <vPortExitCritical>
		vTaskSuspendAll();
 800a2bc:	f000 fbda 	bl	800aa74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2c0:	f000 ff78 	bl	800b1b4 <vPortEnterCritical>
 800a2c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a2c8:	2bff      	cmp	r3, #255	; 0xff
 800a2ca:	bf08      	it	eq
 800a2cc:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800a2d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a2d4:	2bff      	cmp	r3, #255	; 0xff
 800a2d6:	bf08      	it	eq
 800a2d8:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800a2dc:	f000 ff8c 	bl	800b1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2e0:	a901      	add	r1, sp, #4
 800a2e2:	a802      	add	r0, sp, #8
 800a2e4:	f000 fdb2 	bl	800ae4c <xTaskCheckForTimeOut>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d13d      	bne.n	800a368 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f7ff fce2 	bl	8009cb6 <prvIsQueueEmpty>
 800a2f2:	b398      	cbz	r0, 800a35c <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a2fa:	f000 fd3f 	bl	800ad7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff fd2b 	bl	8009d5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a304:	f000 fc5e 	bl	800abc4 <xTaskResumeAll>
 800a308:	b938      	cbnz	r0, 800a31a <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800a30a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a30e:	f8c9 3000 	str.w	r3, [r9]
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a31c:	f000 ff4a 	bl	800b1b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a320:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a322:	2d00      	cmp	r5, #0
 800a324:	d0be      	beq.n	800a2a4 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a326:	4639      	mov	r1, r7
 800a328:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a32a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a32c:	f7ff fd01 	bl	8009d32 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a330:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	b163      	cbz	r3, 800a350 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a336:	f104 0010 	add.w	r0, r4, #16
 800a33a:	f000 fd39 	bl	800adb0 <xTaskRemoveFromEventList>
 800a33e:	b138      	cbz	r0, 800a350 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 800a340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a344:	4b0e      	ldr	r3, [pc, #56]	; (800a380 <xQueueReceive+0x13c>)
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a350:	f000 ff52 	bl	800b1f8 <vPortExitCritical>
				return pdPASS;
 800a354:	2001      	movs	r0, #1
}
 800a356:	b005      	add	sp, #20
 800a358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 800a35c:	4620      	mov	r0, r4
 800a35e:	f7ff fcfc 	bl	8009d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a362:	f000 fc2f 	bl	800abc4 <xTaskResumeAll>
 800a366:	e7d8      	b.n	800a31a <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800a368:	4620      	mov	r0, r4
 800a36a:	f7ff fcf6 	bl	8009d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a36e:	f000 fc29 	bl	800abc4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a372:	4620      	mov	r0, r4
 800a374:	f7ff fc9f 	bl	8009cb6 <prvIsQueueEmpty>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0ce      	beq.n	800a31a <xQueueReceive+0xd6>
 800a37c:	e796      	b.n	800a2ac <xQueueReceive+0x68>
 800a37e:	bf00      	nop
 800a380:	e000ed04 	.word	0xe000ed04

0800a384 <xQueueSemaphoreTake>:
{
 800a384:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800a388:	4604      	mov	r4, r0
{
 800a38a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a38c:	b940      	cbnz	r0, 800a3a0 <xQueueSemaphoreTake+0x1c>
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	e7fe      	b.n	800a39e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3a0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a3a2:	b145      	cbz	r5, 800a3b6 <xQueueSemaphoreTake+0x32>
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3b6:	f000 fd8b 	bl	800aed0 <xTaskGetSchedulerState>
 800a3ba:	b950      	cbnz	r0, 800a3d2 <xQueueSemaphoreTake+0x4e>
 800a3bc:	9d01      	ldr	r5, [sp, #4]
 800a3be:	b145      	cbz	r5, 800a3d2 <xQueueSemaphoreTake+0x4e>
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	e7fe      	b.n	800a3d0 <xQueueSemaphoreTake+0x4c>
 800a3d2:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a3d4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800a3d6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800a504 <xQueueSemaphoreTake+0x180>
 800a3da:	e04f      	b.n	800a47c <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	b963      	cbnz	r3, 800a3fa <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3e0:	b145      	cbz	r5, 800a3f4 <xQueueSemaphoreTake+0x70>
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	e7fe      	b.n	800a3f2 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 800a3f4:	f000 ff00 	bl	800b1f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a3f8:	e05e      	b.n	800a4b8 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 800a3fa:	b916      	cbnz	r6, 800a402 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3fc:	a802      	add	r0, sp, #8
 800a3fe:	f000 fd19 	bl	800ae34 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a402:	f000 fef9 	bl	800b1f8 <vPortExitCritical>
		vTaskSuspendAll();
 800a406:	f000 fb35 	bl	800aa74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a40a:	f000 fed3 	bl	800b1b4 <vPortEnterCritical>
 800a40e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a412:	2bff      	cmp	r3, #255	; 0xff
 800a414:	bf08      	it	eq
 800a416:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800a41a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	bf08      	it	eq
 800a422:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800a426:	f000 fee7 	bl	800b1f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a42a:	a901      	add	r1, sp, #4
 800a42c:	a802      	add	r0, sp, #8
 800a42e:	f000 fd0d 	bl	800ae4c <xTaskCheckForTimeOut>
 800a432:	2800      	cmp	r0, #0
 800a434:	d14a      	bne.n	800a4cc <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff fc3d 	bl	8009cb6 <prvIsQueueEmpty>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d03f      	beq.n	800a4c0 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	b93b      	cbnz	r3, 800a454 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 800a444:	f000 feb6 	bl	800b1b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a448:	6860      	ldr	r0, [r4, #4]
 800a44a:	f000 fd51 	bl	800aef0 <xTaskPriorityInherit>
 800a44e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a450:	f000 fed2 	bl	800b1f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a454:	9901      	ldr	r1, [sp, #4]
 800a456:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a45a:	f000 fc8f 	bl	800ad7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff fc7b 	bl	8009d5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a464:	f000 fbae 	bl	800abc4 <xTaskResumeAll>
 800a468:	b938      	cbnz	r0, 800a47a <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 800a46a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a46e:	f8c8 3000 	str.w	r3, [r8]
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a47c:	f000 fe9a 	bl	800b1b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0aa      	beq.n	800a3dc <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a486:	3b01      	subs	r3, #1
 800a488:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	b913      	cbnz	r3, 800a494 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a48e:	f000 fe2b 	bl	800b0e8 <pvTaskIncrementMutexHeldCount>
 800a492:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	b163      	cbz	r3, 800a4b2 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a498:	f104 0010 	add.w	r0, r4, #16
 800a49c:	f000 fc88 	bl	800adb0 <xTaskRemoveFromEventList>
 800a4a0:	b138      	cbz	r0, 800a4b2 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 800a4a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a6:	4b17      	ldr	r3, [pc, #92]	; (800a504 <xQueueSemaphoreTake+0x180>)
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a4b2:	f000 fea1 	bl	800b1f8 <vPortExitCritical>
				return pdPASS;
 800a4b6:	2501      	movs	r5, #1
}
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	b004      	add	sp, #16
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7ff fc4a 	bl	8009d5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4c6:	f000 fb7d 	bl	800abc4 <xTaskResumeAll>
 800a4ca:	e7d6      	b.n	800a47a <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7ff fc44 	bl	8009d5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4d2:	f000 fb77 	bl	800abc4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff fbed 	bl	8009cb6 <prvIsQueueEmpty>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d0cc      	beq.n	800a47a <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	d0e9      	beq.n	800a4b8 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 800a4e4:	f000 fe66 	bl	800b1b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a4e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a4ea:	b119      	cbz	r1, 800a4f4 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4ee:	6819      	ldr	r1, [r3, #0]
 800a4f0:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a4f4:	6860      	ldr	r0, [r4, #4]
 800a4f6:	f000 fd9f 	bl	800b038 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800a4fa:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 800a4fc:	f000 fe7c 	bl	800b1f8 <vPortExitCritical>
 800a500:	e7da      	b.n	800a4b8 <xQueueSemaphoreTake+0x134>
 800a502:	bf00      	nop
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <xQueueReceiveFromISR>:
{
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4689      	mov	r9, r1
 800a50e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a510:	4605      	mov	r5, r0
 800a512:	b940      	cbnz	r0, 800a526 <xQueueReceiveFromISR+0x1e>
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	e7fe      	b.n	800a524 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a526:	b951      	cbnz	r1, 800a53e <xQueueReceiveFromISR+0x36>
 800a528:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a52a:	b143      	cbz	r3, 800a53e <xQueueReceiveFromISR+0x36>
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	e7fe      	b.n	800a53c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a53e:	f000 ff1b 	bl	800b378 <vPortValidateInterruptPriority>
	__asm volatile
 800a542:	f3ef 8711 	mrs	r7, BASEPRI
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a556:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a558:	b31c      	cbz	r4, 800a5a2 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a55a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a55e:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800a560:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a562:	4628      	mov	r0, r5
 800a564:	f7ff fbe5 	bl	8009d32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a568:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800a56a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a56c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a56e:	d113      	bne.n	800a598 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a570:	692b      	ldr	r3, [r5, #16]
 800a572:	b90b      	cbnz	r3, 800a578 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800a574:	2001      	movs	r0, #1
 800a576:	e00b      	b.n	800a590 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a578:	f105 0010 	add.w	r0, r5, #16
 800a57c:	f000 fc18 	bl	800adb0 <xTaskRemoveFromEventList>
 800a580:	2800      	cmp	r0, #0
 800a582:	d0f7      	beq.n	800a574 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800a584:	f1b8 0f00 	cmp.w	r8, #0
 800a588:	d0f4      	beq.n	800a574 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a58a:	2001      	movs	r0, #1
 800a58c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a590:	f387 8811 	msr	BASEPRI, r7
}
 800a594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a598:	3601      	adds	r6, #1
 800a59a:	b276      	sxtb	r6, r6
 800a59c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a5a0:	e7e8      	b.n	800a574 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	e7f4      	b.n	800a590 <xQueueReceiveFromISR+0x88>

0800a5a6 <uxQueueMessagesWaiting>:
{
 800a5a6:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b940      	cbnz	r0, 800a5be <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	e7fe      	b.n	800a5bc <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800a5be:	f000 fdf9 	bl	800b1b4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a5c2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800a5c4:	f000 fe18 	bl	800b1f8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	bd10      	pop	{r4, pc}

0800a5cc <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800a5cc:	b940      	cbnz	r0, 800a5e0 <uxQueueMessagesWaitingFromISR+0x14>
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	e7fe      	b.n	800a5de <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a5e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a5e2:	4770      	bx	lr

0800a5e4 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5e4:	2300      	movs	r3, #0
	{
 800a5e6:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a5e8:	4a07      	ldr	r2, [pc, #28]	; (800a608 <vQueueUnregisterQueue+0x24>)
 800a5ea:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a5ee:	684c      	ldr	r4, [r1, #4]
 800a5f0:	4284      	cmp	r4, r0
 800a5f2:	d104      	bne.n	800a5fe <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a5fa:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a5fc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5fe:	3301      	adds	r3, #1
 800a600:	2b08      	cmp	r3, #8
 800a602:	d1f2      	bne.n	800a5ea <vQueueUnregisterQueue+0x6>
 800a604:	e7fa      	b.n	800a5fc <vQueueUnregisterQueue+0x18>
 800a606:	bf00      	nop
 800a608:	2000af30 	.word	0x2000af30

0800a60c <vQueueDelete>:
{
 800a60c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a60e:	4604      	mov	r4, r0
 800a610:	b940      	cbnz	r0, 800a624 <vQueueDelete+0x18>
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	e7fe      	b.n	800a622 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800a624:	f7ff ffde 	bl	800a5e4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a628:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a62c:	b923      	cbnz	r3, 800a638 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800a62e:	4620      	mov	r0, r4
}
 800a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a634:	f000 bf7e 	b.w	800b534 <vPortFree>
}
 800a638:	bd10      	pop	{r4, pc}
	...

0800a63c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a640:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a642:	f000 fdb7 	bl	800b1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a646:	4b2e      	ldr	r3, [pc, #184]	; (800a700 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 800a648:	4c2e      	ldr	r4, [pc, #184]	; (800a704 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	4f2e      	ldr	r7, [pc, #184]	; (800a708 <prvAddNewTaskToReadyList+0xcc>)
 800a64e:	3201      	adds	r2, #1
 800a650:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a652:	6825      	ldr	r5, [r4, #0]
 800a654:	2d00      	cmp	r5, #0
 800a656:	d148      	bne.n	800a6ea <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a658:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d11f      	bne.n	800a6a0 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a660:	f04f 0814 	mov.w	r8, #20
 800a664:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a668:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a66a:	f7ff fae2 	bl	8009c32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a66e:	2d07      	cmp	r5, #7
 800a670:	d1f8      	bne.n	800a664 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a672:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a734 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800a676:	4d25      	ldr	r5, [pc, #148]	; (800a70c <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800a678:	4640      	mov	r0, r8
 800a67a:	f7ff fada 	bl	8009c32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a67e:	4628      	mov	r0, r5
 800a680:	f7ff fad7 	bl	8009c32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a684:	4822      	ldr	r0, [pc, #136]	; (800a710 <prvAddNewTaskToReadyList+0xd4>)
 800a686:	f7ff fad4 	bl	8009c32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a68a:	4822      	ldr	r0, [pc, #136]	; (800a714 <prvAddNewTaskToReadyList+0xd8>)
 800a68c:	f7ff fad1 	bl	8009c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a690:	4821      	ldr	r0, [pc, #132]	; (800a718 <prvAddNewTaskToReadyList+0xdc>)
 800a692:	f7ff face 	bl	8009c32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a696:	4b21      	ldr	r3, [pc, #132]	; (800a71c <prvAddNewTaskToReadyList+0xe0>)
 800a698:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a69c:	4b20      	ldr	r3, [pc, #128]	; (800a720 <prvAddNewTaskToReadyList+0xe4>)
 800a69e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800a6a0:	4a20      	ldr	r2, [pc, #128]	; (800a724 <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 800a6a2:	4921      	ldr	r1, [pc, #132]	; (800a728 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 800a6a4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a6a6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800a6b0:	4093      	lsls	r3, r2
 800a6b2:	4303      	orrs	r3, r0
 800a6b4:	2014      	movs	r0, #20
 800a6b6:	600b      	str	r3, [r1, #0]
 800a6b8:	fb00 7002 	mla	r0, r0, r2, r7
 800a6bc:	1d31      	adds	r1, r6, #4
 800a6be:	f7ff fac6 	bl	8009c4e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a6c2:	f000 fd99 	bl	800b1f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a6c6:	4b19      	ldr	r3, [pc, #100]	; (800a72c <prvAddNewTaskToReadyList+0xf0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	b163      	cbz	r3, 800a6e6 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d207      	bcs.n	800a6e6 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 800a6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6da:	4b15      	ldr	r3, [pc, #84]	; (800a730 <prvAddNewTaskToReadyList+0xf4>)
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
}
 800a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800a6ea:	4b10      	ldr	r3, [pc, #64]	; (800a72c <prvAddNewTaskToReadyList+0xf0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1d6      	bne.n	800a6a0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a6f8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800a6fa:	bf98      	it	ls
 800a6fc:	6026      	strls	r6, [r4, #0]
 800a6fe:	e7cf      	b.n	800a6a0 <prvAddNewTaskToReadyList+0x64>
 800a700:	20000a40 	.word	0x20000a40
 800a704:	200009a8 	.word	0x200009a8
 800a708:	200009b4 	.word	0x200009b4
 800a70c:	20000a6c 	.word	0x20000a6c
 800a710:	20000a88 	.word	0x20000a88
 800a714:	20000ab4 	.word	0x20000ab4
 800a718:	20000aa0 	.word	0x20000aa0
 800a71c:	200009ac 	.word	0x200009ac
 800a720:	200009b0 	.word	0x200009b0
 800a724:	20000a50 	.word	0x20000a50
 800a728:	20000a54 	.word	0x20000a54
 800a72c:	20000a9c 	.word	0x20000a9c
 800a730:	e000ed04 	.word	0xe000ed04
 800a734:	20000a58 	.word	0x20000a58

0800a738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a738:	b510      	push	{r4, lr}
 800a73a:	4604      	mov	r4, r0

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a73c:	304c      	adds	r0, #76	; 0x4c
 800a73e:	f00c f975 	bl	8016a2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a742:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800a746:	b93b      	cbnz	r3, 800a758 <prvDeleteTCB+0x20>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a748:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a74a:	f000 fef3 	bl	800b534 <vPortFree>
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
 800a74e:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800a754:	f000 beee 	b.w	800b534 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d0f8      	beq.n	800a74e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d008      	beq.n	800a772 <prvDeleteTCB+0x3a>
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	e7fe      	b.n	800a770 <prvDeleteTCB+0x38>
	}
 800a772:	bd10      	pop	{r4, pc}

0800a774 <prvIdleTask>:
{
 800a774:	b580      	push	{r7, lr}
				taskYIELD();
 800a776:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a7d4 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a77a:	4f12      	ldr	r7, [pc, #72]	; (800a7c4 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a77c:	4c12      	ldr	r4, [pc, #72]	; (800a7c8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800a77e:	4d13      	ldr	r5, [pc, #76]	; (800a7cc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	b963      	cbnz	r3, 800a79e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a784:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <prvIdleTask+0x5c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d9f8      	bls.n	800a77e <prvIdleTask+0xa>
				taskYIELD();
 800a78c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a790:	f8c8 3000 	str.w	r3, [r8]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	e7ee      	b.n	800a77c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800a79e:	f000 fd09 	bl	800b1b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a6:	1d30      	adds	r0, r6, #4
 800a7a8:	f7ff fa74 	bl	8009c94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800a7b8:	f000 fd1e 	bl	800b1f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7ff ffbb 	bl	800a738 <prvDeleteTCB>
 800a7c2:	e7dd      	b.n	800a780 <prvIdleTask+0xc>
 800a7c4:	20000ab4 	.word	0x20000ab4
 800a7c8:	20000a44 	.word	0x20000a44
 800a7cc:	20000a40 	.word	0x20000a40
 800a7d0:	200009b4 	.word	0x200009b4
 800a7d4:	e000ed04 	.word	0xe000ed04

0800a7d8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7d8:	4a06      	ldr	r2, [pc, #24]	; (800a7f4 <prvResetNextTaskUnblockTime+0x1c>)
 800a7da:	6813      	ldr	r3, [r2, #0]
 800a7dc:	6819      	ldr	r1, [r3, #0]
 800a7de:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <prvResetNextTaskUnblockTime+0x20>)
 800a7e0:	b919      	cbnz	r1, 800a7ea <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7e6:	601a      	str	r2, [r3, #0]
	}
}
 800a7e8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7ea:	6812      	ldr	r2, [r2, #0]
 800a7ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7ee:	68d2      	ldr	r2, [r2, #12]
 800a7f0:	6852      	ldr	r2, [r2, #4]
 800a7f2:	e7f8      	b.n	800a7e6 <prvResetNextTaskUnblockTime+0xe>
 800a7f4:	200009ac 	.word	0x200009ac
 800a7f8:	20000a80 	.word	0x20000a80

0800a7fc <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	4681      	mov	r9, r0
 800a802:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a806:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a80a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800a80c:	3a01      	subs	r2, #1
 800a80e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800a812:	469a      	mov	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a814:	f026 0607 	bic.w	r6, r6, #7
 800a818:	1e4b      	subs	r3, r1, #1
 800a81a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800a81e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a820:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a824:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 800a828:	7818      	ldrb	r0, [r3, #0]
 800a82a:	b108      	cbz	r0, 800a830 <prvInitialiseNewTask.isra.2+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a82c:	428b      	cmp	r3, r1
 800a82e:	d1f7      	bne.n	800a820 <prvInitialiseNewTask.isra.2+0x24>
 800a830:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a832:	2700      	movs	r7, #0
 800a834:	2d06      	cmp	r5, #6
 800a836:	bf28      	it	cs
 800a838:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a83a:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800a83c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800a83e:	e9c4 5711 	strd	r5, r7, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a842:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a846:	f7ff f9ff 	bl	8009c48 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a84a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a84e:	f104 0018 	add.w	r0, r4, #24
 800a852:	f7ff f9f9 	bl	8009c48 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800a856:	f8c4 70ac 	str.w	r7, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a85a:	2260      	movs	r2, #96	; 0x60
 800a85c:	4639      	mov	r1, r7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a85e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a860:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a862:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a864:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a868:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800a86c:	f00b ff5e 	bl	801672c <memset>
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <prvInitialiseNewTask.isra.2+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a872:	4652      	mov	r2, sl
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a874:	6523      	str	r3, [r4, #80]	; 0x50
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <prvInitialiseNewTask.isra.2+0xa0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a878:	4649      	mov	r1, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a87a:	6563      	str	r3, [r4, #84]	; 0x54
 800a87c:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <prvInitialiseNewTask.isra.2+0xa4>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a87e:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a880:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a882:	f000 fc6d 	bl	800b160 <pxPortInitialiseStack>
 800a886:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	d001      	beq.n	800a892 <prvInitialiseNewTask.isra.2+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a88e:	f8c8 4000 	str.w	r4, [r8]
}
 800a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a896:	bf00      	nop
 800a898:	08022890 	.word	0x08022890
 800a89c:	080228b0 	.word	0x080228b0
 800a8a0:	08022870 	.word	0x08022870

0800a8a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8a6:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8a8:	4e1b      	ldr	r6, [pc, #108]	; (800a918 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800a8aa:	681c      	ldr	r4, [r3, #0]
{
 800a8ac:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ae:	6830      	ldr	r0, [r6, #0]
{
 800a8b0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8b2:	3004      	adds	r0, #4
 800a8b4:	f7ff f9ee 	bl	8009c94 <uxListRemove>
 800a8b8:	4633      	mov	r3, r6
 800a8ba:	b940      	cbnz	r0, 800a8ce <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a8bc:	2001      	movs	r0, #1
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	4e16      	ldr	r6, [pc, #88]	; (800a91c <prvAddCurrentTaskToDelayedList+0x78>)
 800a8c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800a8c4:	6832      	ldr	r2, [r6, #0]
 800a8c6:	4088      	lsls	r0, r1
 800a8c8:	ea22 0200 	bic.w	r2, r2, r0
 800a8cc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8ce:	1c6a      	adds	r2, r5, #1
 800a8d0:	d107      	bne.n	800a8e2 <prvAddCurrentTaskToDelayedList+0x3e>
 800a8d2:	b137      	cbz	r7, 800a8e2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d4:	6819      	ldr	r1, [r3, #0]
 800a8d6:	4812      	ldr	r0, [pc, #72]	; (800a920 <prvAddCurrentTaskToDelayedList+0x7c>)
 800a8d8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8de:	f7ff b9b6 	b.w	8009c4e <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	1964      	adds	r4, r4, r5
 800a8e6:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800a8e8:	d307      	bcc.n	800a8fa <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8ea:	4a0e      	ldr	r2, [pc, #56]	; (800a924 <prvAddCurrentTaskToDelayedList+0x80>)
 800a8ec:	6810      	ldr	r0, [r2, #0]
 800a8ee:	6819      	ldr	r1, [r3, #0]
}
 800a8f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8f4:	3104      	adds	r1, #4
 800a8f6:	f7ff b9b6 	b.w	8009c66 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8fa:	4a0b      	ldr	r2, [pc, #44]	; (800a928 <prvAddCurrentTaskToDelayedList+0x84>)
 800a8fc:	6810      	ldr	r0, [r2, #0]
 800a8fe:	6819      	ldr	r1, [r3, #0]
 800a900:	3104      	adds	r1, #4
 800a902:	f7ff f9b0 	bl	8009c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <prvAddCurrentTaskToDelayedList+0x88>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800a90c:	bf88      	it	hi
 800a90e:	601c      	strhi	r4, [r3, #0]
}
 800a910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a912:	bf00      	nop
 800a914:	20000ac8 	.word	0x20000ac8
 800a918:	200009a8 	.word	0x200009a8
 800a91c:	20000a54 	.word	0x20000a54
 800a920:	20000aa0 	.word	0x20000aa0
 800a924:	200009b0 	.word	0x200009b0
 800a928:	200009ac 	.word	0x200009ac
 800a92c:	20000a80 	.word	0x20000a80

0800a930 <xTaskCreateStatic>:
	{
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a938:	b945      	cbnz	r5, 800a94c <xTaskCreateStatic+0x1c>
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	e7fe      	b.n	800a94a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800a94c:	b944      	cbnz	r4, 800a960 <xTaskCreateStatic+0x30>
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	e7fe      	b.n	800a95e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a960:	26b4      	movs	r6, #180	; 0xb4
 800a962:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a964:	9e04      	ldr	r6, [sp, #16]
 800a966:	2eb4      	cmp	r6, #180	; 0xb4
 800a968:	d008      	beq.n	800a97c <xTaskCreateStatic+0x4c>
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	e7fe      	b.n	800a97a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a97c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a97e:	2502      	movs	r5, #2
 800a980:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a984:	ad05      	add	r5, sp, #20
 800a986:	9501      	str	r5, [sp, #4]
 800a988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a98a:	9402      	str	r4, [sp, #8]
 800a98c:	9500      	str	r5, [sp, #0]
 800a98e:	f7ff ff35 	bl	800a7fc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff fe52 	bl	800a63c <prvAddNewTaskToReadyList>
	}
 800a998:	9805      	ldr	r0, [sp, #20]
 800a99a:	b006      	add	sp, #24
 800a99c:	bd70      	pop	{r4, r5, r6, pc}

0800a99e <xTaskCreate>:
	{
 800a99e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9a2:	4607      	mov	r7, r0
 800a9a4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a6:	0090      	lsls	r0, r2, #2
	{
 800a9a8:	4688      	mov	r8, r1
 800a9aa:	4616      	mov	r6, r2
 800a9ac:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ae:	f000 fd35 	bl	800b41c <pvPortMalloc>
			if( pxStack != NULL )
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	b1e8      	cbz	r0, 800a9f2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a9b6:	20b4      	movs	r0, #180	; 0xb4
 800a9b8:	f000 fd30 	bl	800b41c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a9bc:	4604      	mov	r4, r0
 800a9be:	b1a8      	cbz	r0, 800a9ec <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800a9c8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ce:	9002      	str	r0, [sp, #8]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ff0f 	bl	800a7fc <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7ff fe2c 	bl	800a63c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9e4:	2001      	movs	r0, #1
	}
 800a9e6:	b005      	add	sp, #20
 800a9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 fda1 	bl	800b534 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800a9f6:	e7f6      	b.n	800a9e6 <xTaskCreate+0x48>

0800a9f8 <vTaskStartScheduler>:
{
 800a9f8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9fa:	2400      	movs	r4, #0
{
 800a9fc:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9fe:	aa07      	add	r2, sp, #28
 800aa00:	a906      	add	r1, sp, #24
 800aa02:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa04:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa08:	f7f6 f816 	bl	8000a38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa0c:	9b05      	ldr	r3, [sp, #20]
 800aa0e:	9a07      	ldr	r2, [sp, #28]
 800aa10:	9302      	str	r3, [sp, #8]
 800aa12:	9b06      	ldr	r3, [sp, #24]
 800aa14:	4910      	ldr	r1, [pc, #64]	; (800aa58 <vTaskStartScheduler+0x60>)
 800aa16:	e9cd 4300 	strd	r4, r3, [sp]
 800aa1a:	4810      	ldr	r0, [pc, #64]	; (800aa5c <vTaskStartScheduler+0x64>)
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	f7ff ff87 	bl	800a930 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800aa22:	b1b8      	cbz	r0, 800aa54 <vTaskStartScheduler+0x5c>
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <vTaskStartScheduler+0x68>)
 800aa36:	4a0b      	ldr	r2, [pc, #44]	; (800aa64 <vTaskStartScheduler+0x6c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	334c      	adds	r3, #76	; 0x4c
 800aa3c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <vTaskStartScheduler+0x70>)
 800aa44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa46:	2201      	movs	r2, #1
 800aa48:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <vTaskStartScheduler+0x74>)
 800aa4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <vTaskStartScheduler+0x78>)
 800aa4e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800aa50:	f000 fc38 	bl	800b2c4 <xPortStartScheduler>
}
 800aa54:	b008      	add	sp, #32
 800aa56:	bd10      	pop	{r4, pc}
 800aa58:	08018e90 	.word	0x08018e90
 800aa5c:	0800a775 	.word	0x0800a775
 800aa60:	200009a8 	.word	0x200009a8
 800aa64:	2000009c 	.word	0x2000009c
 800aa68:	20000a80 	.word	0x20000a80
 800aa6c:	20000a9c 	.word	0x20000a9c
 800aa70:	20000ac8 	.word	0x20000ac8

0800aa74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800aa74:	4a02      	ldr	r2, [pc, #8]	; (800aa80 <vTaskSuspendAll+0xc>)
 800aa76:	6813      	ldr	r3, [r2, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	6013      	str	r3, [r2, #0]
}
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	20000a4c 	.word	0x20000a4c

0800aa84 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800aa84:	4b01      	ldr	r3, [pc, #4]	; (800aa8c <xTaskGetTickCount+0x8>)
 800aa86:	6818      	ldr	r0, [r3, #0]
}
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	20000ac8 	.word	0x20000ac8

0800aa90 <xTaskGetTickCountFromISR>:
{
 800aa90:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa92:	f000 fc71 	bl	800b378 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800aa96:	4b01      	ldr	r3, [pc, #4]	; (800aa9c <xTaskGetTickCountFromISR+0xc>)
 800aa98:	6818      	ldr	r0, [r3, #0]
}
 800aa9a:	bd08      	pop	{r3, pc}
 800aa9c:	20000ac8 	.word	0x20000ac8

0800aaa0 <xTaskIncrementTick>:
{
 800aaa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaa4:	4b3c      	ldr	r3, [pc, #240]	; (800ab98 <xTaskIncrementTick+0xf8>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d16e      	bne.n	800ab8a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaac:	4b3b      	ldr	r3, [pc, #236]	; (800ab9c <xTaskIncrementTick+0xfc>)
 800aaae:	681c      	ldr	r4, [r3, #0]
 800aab0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800aab2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aab4:	b9bc      	cbnz	r4, 800aae6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800aab6:	4b3a      	ldr	r3, [pc, #232]	; (800aba0 <xTaskIncrementTick+0x100>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	b142      	cbz	r2, 800aad0 <xTaskIncrementTick+0x30>
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	e7fe      	b.n	800aace <xTaskIncrementTick+0x2e>
 800aad0:	4a34      	ldr	r2, [pc, #208]	; (800aba4 <xTaskIncrementTick+0x104>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6810      	ldr	r0, [r2, #0]
 800aad6:	6018      	str	r0, [r3, #0]
 800aad8:	6011      	str	r1, [r2, #0]
 800aada:	4a33      	ldr	r2, [pc, #204]	; (800aba8 <xTaskIncrementTick+0x108>)
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	f7ff fe79 	bl	800a7d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aae6:	4d31      	ldr	r5, [pc, #196]	; (800abac <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 800aae8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aaec:	682b      	ldr	r3, [r5, #0]
 800aaee:	4f30      	ldr	r7, [pc, #192]	; (800abb0 <xTaskIncrementTick+0x110>)
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d911      	bls.n	800ab18 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <xTaskIncrementTick+0x114>)
 800aaf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800aafa:	2214      	movs	r2, #20
 800aafc:	434a      	muls	r2, r1
 800aafe:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800ab00:	2a02      	cmp	r2, #2
 800ab02:	bf28      	it	cs
 800ab04:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800ab08:	4a2b      	ldr	r2, [pc, #172]	; (800abb8 <xTaskIncrementTick+0x118>)
 800ab0a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800ab0c:	2a00      	cmp	r2, #0
}
 800ab0e:	bf0c      	ite	eq
 800ab10:	4658      	moveq	r0, fp
 800ab12:	2001      	movne	r0, #1
 800ab14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab18:	f8df a084 	ldr.w	sl, [pc, #132]	; 800aba0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800ab1c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800abc0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab20:	f8da 2000 	ldr.w	r2, [sl]
 800ab24:	6812      	ldr	r2, [r2, #0]
 800ab26:	b91a      	cbnz	r2, 800ab30 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab2c:	602a      	str	r2, [r5, #0]
					break;
 800ab2e:	e7e1      	b.n	800aaf4 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab30:	f8da 2000 	ldr.w	r2, [sl]
 800ab34:	68d2      	ldr	r2, [r2, #12]
 800ab36:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab38:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800ab3a:	428c      	cmp	r4, r1
 800ab3c:	d201      	bcs.n	800ab42 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800ab3e:	6029      	str	r1, [r5, #0]
						break;
 800ab40:	e7d8      	b.n	800aaf4 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab42:	f106 0804 	add.w	r8, r6, #4
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7ff f8a4 	bl	8009c94 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab4c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800ab4e:	b119      	cbz	r1, 800ab58 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab50:	f106 0018 	add.w	r0, r6, #24
 800ab54:	f7ff f89e 	bl	8009c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f04f 0c14 	mov.w	ip, #20
 800ab5e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ab60:	f8d9 3000 	ldr.w	r3, [r9]
 800ab64:	fa02 f100 	lsl.w	r1, r2, r0
 800ab68:	4319      	orrs	r1, r3
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <xTaskIncrementTick+0x114>)
 800ab6c:	f8c9 1000 	str.w	r1, [r9]
 800ab70:	fb0c 3000 	mla	r0, ip, r0, r3
 800ab74:	4641      	mov	r1, r8
 800ab76:	f7ff f86a 	bl	8009c4e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab7a:	6838      	ldr	r0, [r7, #0]
 800ab7c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800ab7e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800ab80:	4291      	cmp	r1, r2
 800ab82:	bf28      	it	cs
 800ab84:	f04f 0b01 	movcs.w	fp, #1
 800ab88:	e7ca      	b.n	800ab20 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800ab8a:	4a0c      	ldr	r2, [pc, #48]	; (800abbc <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800ab8c:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800ab90:	6813      	ldr	r3, [r2, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	e7b7      	b.n	800ab08 <xTaskIncrementTick+0x68>
 800ab98:	20000a4c 	.word	0x20000a4c
 800ab9c:	20000ac8 	.word	0x20000ac8
 800aba0:	200009ac 	.word	0x200009ac
 800aba4:	200009b0 	.word	0x200009b0
 800aba8:	20000a84 	.word	0x20000a84
 800abac:	20000a80 	.word	0x20000a80
 800abb0:	200009a8 	.word	0x200009a8
 800abb4:	200009b4 	.word	0x200009b4
 800abb8:	20000acc 	.word	0x20000acc
 800abbc:	20000a48 	.word	0x20000a48
 800abc0:	20000a54 	.word	0x20000a54

0800abc4 <xTaskResumeAll>:
{
 800abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800abc8:	4c30      	ldr	r4, [pc, #192]	; (800ac8c <xTaskResumeAll+0xc8>)
 800abca:	6823      	ldr	r3, [r4, #0]
 800abcc:	b943      	cbnz	r3, 800abe0 <xTaskResumeAll+0x1c>
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	f383 8811 	msr	BASEPRI, r3
 800abd6:	f3bf 8f6f 	isb	sy
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	e7fe      	b.n	800abde <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800abe0:	f000 fae8 	bl	800b1b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abea:	6824      	ldr	r4, [r4, #0]
 800abec:	b12c      	cbz	r4, 800abfa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800abee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800abf0:	f000 fb02 	bl	800b1f8 <vPortExitCritical>
}
 800abf4:	4620      	mov	r0, r4
 800abf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abfa:	4b25      	ldr	r3, [pc, #148]	; (800ac90 <xTaskResumeAll+0xcc>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d0f5      	beq.n	800abee <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac02:	4d24      	ldr	r5, [pc, #144]	; (800ac94 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800ac04:	4e24      	ldr	r6, [pc, #144]	; (800ac98 <xTaskResumeAll+0xd4>)
 800ac06:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800acac <xTaskResumeAll+0xe8>
 800ac0a:	e01f      	b.n	800ac4c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac0c:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800ac0e:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac10:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac12:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac16:	f104 0018 	add.w	r0, r4, #24
 800ac1a:	f7ff f83b 	bl	8009c94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac1e:	4648      	mov	r0, r9
 800ac20:	f7ff f838 	bl	8009c94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac24:	2014      	movs	r0, #20
 800ac26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac28:	6831      	ldr	r1, [r6, #0]
 800ac2a:	fa07 f302 	lsl.w	r3, r7, r2
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	fb00 8002 	mla	r0, r0, r2, r8
 800ac34:	4649      	mov	r1, r9
 800ac36:	6033      	str	r3, [r6, #0]
 800ac38:	f7ff f809 	bl	8009c4e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac3c:	4b17      	ldr	r3, [pc, #92]	; (800ac9c <xTaskResumeAll+0xd8>)
 800ac3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d301      	bcc.n	800ac4c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 800ac48:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <xTaskResumeAll+0xdc>)
 800ac4a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac4c:	682b      	ldr	r3, [r5, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1dc      	bne.n	800ac0c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800ac52:	b10c      	cbz	r4, 800ac58 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800ac54:	f7ff fdc0 	bl	800a7d8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac58:	4d12      	ldr	r5, [pc, #72]	; (800aca4 <xTaskResumeAll+0xe0>)
 800ac5a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ac5c:	b144      	cbz	r4, 800ac70 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800ac5e:	2701      	movs	r7, #1
 800ac60:	4e0f      	ldr	r6, [pc, #60]	; (800aca0 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800ac62:	f7ff ff1d 	bl	800aaa0 <xTaskIncrementTick>
 800ac66:	b100      	cbz	r0, 800ac6a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800ac68:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ac6a:	3c01      	subs	r4, #1
 800ac6c:	d1f9      	bne.n	800ac62 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800ac6e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <xTaskResumeAll+0xdc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d0ba      	beq.n	800abee <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800ac78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <xTaskResumeAll+0xe4>)
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ac88:	2401      	movs	r4, #1
 800ac8a:	e7b1      	b.n	800abf0 <xTaskResumeAll+0x2c>
 800ac8c:	20000a4c 	.word	0x20000a4c
 800ac90:	20000a40 	.word	0x20000a40
 800ac94:	20000a88 	.word	0x20000a88
 800ac98:	20000a54 	.word	0x20000a54
 800ac9c:	200009a8 	.word	0x200009a8
 800aca0:	20000acc 	.word	0x20000acc
 800aca4:	20000a48 	.word	0x20000a48
 800aca8:	e000ed04 	.word	0xe000ed04
 800acac:	200009b4 	.word	0x200009b4

0800acb0 <vTaskDelay>:
	{
 800acb0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acb2:	b940      	cbnz	r0, 800acc6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800acb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <vTaskDelay+0x40>)
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	f3bf 8f6f 	isb	sy
	}
 800acc4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800acc6:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <vTaskDelay+0x44>)
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	b141      	cbz	r1, 800acde <vTaskDelay+0x2e>
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	e7fe      	b.n	800acdc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800acde:	f7ff fec9 	bl	800aa74 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ace2:	f7ff fddf 	bl	800a8a4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ace6:	f7ff ff6d 	bl	800abc4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800acea:	2800      	cmp	r0, #0
 800acec:	d0e2      	beq.n	800acb4 <vTaskDelay+0x4>
 800acee:	e7e9      	b.n	800acc4 <vTaskDelay+0x14>
 800acf0:	e000ed04 	.word	0xe000ed04
 800acf4:	20000a4c 	.word	0x20000a4c

0800acf8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acf8:	4b1a      	ldr	r3, [pc, #104]	; (800ad64 <vTaskSwitchContext+0x6c>)
{
 800acfa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <vTaskSwitchContext+0x70>)
 800ad00:	b112      	cbz	r2, 800ad08 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ad02:	2201      	movs	r2, #1
 800ad04:	601a      	str	r2, [r3, #0]
}
 800ad06:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800ad08:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <vTaskSwitchContext+0x74>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad0e:	fab3 f383 	clz	r3, r3
 800ad12:	2214      	movs	r2, #20
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f1c3 031f 	rsb	r3, r3, #31
 800ad1a:	435a      	muls	r2, r3
 800ad1c:	4914      	ldr	r1, [pc, #80]	; (800ad70 <vTaskSwitchContext+0x78>)
 800ad1e:	588c      	ldr	r4, [r1, r2]
 800ad20:	1888      	adds	r0, r1, r2
 800ad22:	b944      	cbnz	r4, 800ad36 <vTaskSwitchContext+0x3e>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	e7fe      	b.n	800ad34 <vTaskSwitchContext+0x3c>
 800ad36:	6844      	ldr	r4, [r0, #4]
 800ad38:	3208      	adds	r2, #8
 800ad3a:	6864      	ldr	r4, [r4, #4]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	4294      	cmp	r4, r2
 800ad40:	bf08      	it	eq
 800ad42:	6862      	ldreq	r2, [r4, #4]
 800ad44:	6044      	str	r4, [r0, #4]
 800ad46:	bf08      	it	eq
 800ad48:	6042      	streq	r2, [r0, #4]
 800ad4a:	2214      	movs	r2, #20
 800ad4c:	fb02 1303 	mla	r3, r2, r3, r1
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <vTaskSwitchContext+0x7c>)
 800ad56:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a07      	ldr	r2, [pc, #28]	; (800ad78 <vTaskSwitchContext+0x80>)
 800ad5c:	334c      	adds	r3, #76	; 0x4c
 800ad5e:	6013      	str	r3, [r2, #0]
}
 800ad60:	e7d1      	b.n	800ad06 <vTaskSwitchContext+0xe>
 800ad62:	bf00      	nop
 800ad64:	20000a4c 	.word	0x20000a4c
 800ad68:	20000acc 	.word	0x20000acc
 800ad6c:	20000a54 	.word	0x20000a54
 800ad70:	200009b4 	.word	0x200009b4
 800ad74:	200009a8 	.word	0x200009a8
 800ad78:	2000009c 	.word	0x2000009c

0800ad7c <vTaskPlaceOnEventList>:
{
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ad80:	b940      	cbnz	r0, 800ad94 <vTaskPlaceOnEventList+0x18>
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	e7fe      	b.n	800ad92 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <vTaskPlaceOnEventList+0x30>)
 800ad96:	6819      	ldr	r1, [r3, #0]
 800ad98:	3118      	adds	r1, #24
 800ad9a:	f7fe ff64 	bl	8009c66 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad9e:	4620      	mov	r0, r4
}
 800ada0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ada4:	2101      	movs	r1, #1
 800ada6:	f7ff bd7d 	b.w	800a8a4 <prvAddCurrentTaskToDelayedList>
 800adaa:	bf00      	nop
 800adac:	200009a8 	.word	0x200009a8

0800adb0 <xTaskRemoveFromEventList>:
{
 800adb0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800adb2:	68c3      	ldr	r3, [r0, #12]
 800adb4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800adb6:	b944      	cbnz	r4, 800adca <xTaskRemoveFromEventList+0x1a>
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	e7fe      	b.n	800adc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adca:	f104 0518 	add.w	r5, r4, #24
 800adce:	4628      	mov	r0, r5
 800add0:	f7fe ff60 	bl	8009c94 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <xTaskRemoveFromEventList+0x6c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	b9e3      	cbnz	r3, 800ae14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adda:	1d25      	adds	r5, r4, #4
 800addc:	4628      	mov	r0, r5
 800adde:	f7fe ff59 	bl	8009c94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ade2:	2301      	movs	r3, #1
 800ade4:	490e      	ldr	r1, [pc, #56]	; (800ae20 <xTaskRemoveFromEventList+0x70>)
 800ade6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ade8:	6808      	ldr	r0, [r1, #0]
 800adea:	4093      	lsls	r3, r2
 800adec:	4303      	orrs	r3, r0
 800adee:	2014      	movs	r0, #20
 800adf0:	600b      	str	r3, [r1, #0]
 800adf2:	4629      	mov	r1, r5
 800adf4:	4b0b      	ldr	r3, [pc, #44]	; (800ae24 <xTaskRemoveFromEventList+0x74>)
 800adf6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adfa:	f7fe ff28 	bl	8009c4e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adfe:	4b0a      	ldr	r3, [pc, #40]	; (800ae28 <xTaskRemoveFromEventList+0x78>)
 800ae00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae06:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800ae08:	bf85      	ittet	hi
 800ae0a:	2001      	movhi	r0, #1
 800ae0c:	4b07      	ldrhi	r3, [pc, #28]	; (800ae2c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 800ae0e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800ae10:	6018      	strhi	r0, [r3, #0]
}
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae14:	4629      	mov	r1, r5
 800ae16:	4806      	ldr	r0, [pc, #24]	; (800ae30 <xTaskRemoveFromEventList+0x80>)
 800ae18:	e7ef      	b.n	800adfa <xTaskRemoveFromEventList+0x4a>
 800ae1a:	bf00      	nop
 800ae1c:	20000a4c 	.word	0x20000a4c
 800ae20:	20000a54 	.word	0x20000a54
 800ae24:	200009b4 	.word	0x200009b4
 800ae28:	200009a8 	.word	0x200009a8
 800ae2c:	20000acc 	.word	0x20000acc
 800ae30:	20000a88 	.word	0x20000a88

0800ae34 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae34:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <vTaskInternalSetTimeOutState+0x10>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae3a:	4b03      	ldr	r3, [pc, #12]	; (800ae48 <vTaskInternalSetTimeOutState+0x14>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6043      	str	r3, [r0, #4]
}
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000a84 	.word	0x20000a84
 800ae48:	20000ac8 	.word	0x20000ac8

0800ae4c <xTaskCheckForTimeOut>:
{
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ae50:	4605      	mov	r5, r0
 800ae52:	b940      	cbnz	r0, 800ae66 <xTaskCheckForTimeOut+0x1a>
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	e7fe      	b.n	800ae64 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ae66:	b941      	cbnz	r1, 800ae7a <xTaskCheckForTimeOut+0x2e>
 800ae68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6c:	f383 8811 	msr	BASEPRI, r3
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	e7fe      	b.n	800ae78 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ae7a:	f000 f99b 	bl	800b1b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae80:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800ae82:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ae84:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae86:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800ae88:	1c5e      	adds	r6, r3, #1
 800ae8a:	d00d      	beq.n	800aea8 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae8c:	4e0c      	ldr	r6, [pc, #48]	; (800aec0 <xTaskCheckForTimeOut+0x74>)
 800ae8e:	682f      	ldr	r7, [r5, #0]
 800ae90:	6836      	ldr	r6, [r6, #0]
 800ae92:	42b7      	cmp	r7, r6
 800ae94:	d001      	beq.n	800ae9a <xTaskCheckForTimeOut+0x4e>
 800ae96:	4288      	cmp	r0, r1
 800ae98:	d90d      	bls.n	800aeb6 <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d909      	bls.n	800aeb2 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aea2:	4628      	mov	r0, r5
 800aea4:	f7ff ffc6 	bl	800ae34 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800aea8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800aeaa:	f000 f9a5 	bl	800b1f8 <vPortExitCritical>
}
 800aeae:	4620      	mov	r0, r4
 800aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800aeb6:	2401      	movs	r4, #1
 800aeb8:	e7f7      	b.n	800aeaa <xTaskCheckForTimeOut+0x5e>
 800aeba:	bf00      	nop
 800aebc:	20000ac8 	.word	0x20000ac8
 800aec0:	20000a84 	.word	0x20000a84

0800aec4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800aec4:	2201      	movs	r2, #1
 800aec6:	4b01      	ldr	r3, [pc, #4]	; (800aecc <vTaskMissedYield+0x8>)
 800aec8:	601a      	str	r2, [r3, #0]
}
 800aeca:	4770      	bx	lr
 800aecc:	20000acc 	.word	0x20000acc

0800aed0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800aed0:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <xTaskGetSchedulerState+0x18>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	b133      	cbz	r3, 800aee4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aed6:	4b05      	ldr	r3, [pc, #20]	; (800aeec <xTaskGetSchedulerState+0x1c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800aedc:	bf0c      	ite	eq
 800aede:	2002      	moveq	r0, #2
 800aee0:	2000      	movne	r0, #0
 800aee2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aee4:	2001      	movs	r0, #1
	}
 800aee6:	4770      	bx	lr
 800aee8:	20000a9c 	.word	0x20000a9c
 800aeec:	20000a4c 	.word	0x20000a4c

0800aef0 <xTaskPriorityInherit>:
	{
 800aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800aef4:	4604      	mov	r4, r0
 800aef6:	b360      	cbz	r0, 800af52 <xTaskPriorityInherit+0x62>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aef8:	4a24      	ldr	r2, [pc, #144]	; (800af8c <xTaskPriorityInherit+0x9c>)
 800aefa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800aefc:	6811      	ldr	r1, [r2, #0]
 800aefe:	4617      	mov	r7, r2
 800af00:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800af02:	428b      	cmp	r3, r1
 800af04:	d239      	bcs.n	800af7a <xTaskPriorityInherit+0x8a>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af06:	2614      	movs	r6, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af08:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af0a:	4d21      	ldr	r5, [pc, #132]	; (800af90 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af0c:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0e:	bfa8      	it	ge
 800af10:	683a      	ldrge	r2, [r7, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af12:	fb06 5303 	mla	r3, r6, r3, r5
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af16:	bfa2      	ittt	ge
 800af18:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800af1a:	f1c2 0207 	rsbge	r2, r2, #7
 800af1e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800af20:	6942      	ldr	r2, [r0, #20]
 800af22:	429a      	cmp	r2, r3
 800af24:	d117      	bne.n	800af56 <xTaskPriorityInherit+0x66>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af26:	f100 0804 	add.w	r8, r0, #4
 800af2a:	4640      	mov	r0, r8
 800af2c:	f7fe feb2 	bl	8009c94 <uxListRemove>
 800af30:	4b18      	ldr	r3, [pc, #96]	; (800af94 <xTaskPriorityInherit+0xa4>)
 800af32:	b1b0      	cbz	r0, 800af62 <xTaskPriorityInherit+0x72>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af34:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af36:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af3a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800af3c:	2401      	movs	r4, #1
 800af3e:	fa04 f002 	lsl.w	r0, r4, r2
 800af42:	4308      	orrs	r0, r1
 800af44:	6018      	str	r0, [r3, #0]
 800af46:	2014      	movs	r0, #20
 800af48:	4641      	mov	r1, r8
 800af4a:	fb00 5002 	mla	r0, r0, r2, r5
 800af4e:	f7fe fe7e 	bl	8009c4e <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800af52:	4620      	mov	r0, r4
		return xReturn;
 800af54:	e003      	b.n	800af5e <xTaskPriorityInherit+0x6e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800af5c:	2001      	movs	r0, #1
	}
 800af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800af62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800af64:	4346      	muls	r6, r0
 800af66:	59aa      	ldr	r2, [r5, r6]
 800af68:	2a00      	cmp	r2, #0
 800af6a:	d1e3      	bne.n	800af34 <xTaskPriorityInherit+0x44>
 800af6c:	2101      	movs	r1, #1
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	4081      	lsls	r1, r0
 800af72:	ea22 0201 	bic.w	r2, r2, r1
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	e7dc      	b.n	800af34 <xTaskPriorityInherit+0x44>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800af7e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800af80:	42a0      	cmp	r0, r4
 800af82:	bf2c      	ite	cs
 800af84:	2000      	movcs	r0, #0
 800af86:	2001      	movcc	r0, #1
 800af88:	e7e9      	b.n	800af5e <xTaskPriorityInherit+0x6e>
 800af8a:	bf00      	nop
 800af8c:	200009a8 	.word	0x200009a8
 800af90:	200009b4 	.word	0x200009b4
 800af94:	20000a54 	.word	0x20000a54

0800af98 <xTaskPriorityDisinherit>:
	{
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800af9a:	4604      	mov	r4, r0
 800af9c:	b908      	cbnz	r0, 800afa2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800af9e:	2000      	movs	r0, #0
	}
 800afa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800afa2:	4b22      	ldr	r3, [pc, #136]	; (800b02c <xTaskPriorityDisinherit+0x94>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4283      	cmp	r3, r0
 800afa8:	d008      	beq.n	800afbc <xTaskPriorityDisinherit+0x24>
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	e7fe      	b.n	800afba <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800afbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afbe:	b943      	cbnz	r3, 800afd2 <xTaskPriorityDisinherit+0x3a>
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	e7fe      	b.n	800afd0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afd2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800afd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800afd6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afd8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800afda:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800afdc:	d0df      	beq.n	800af9e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1dd      	bne.n	800af9e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afe2:	1d05      	adds	r5, r0, #4
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7fe fe55 	bl	8009c94 <uxListRemove>
 800afea:	4e11      	ldr	r6, [pc, #68]	; (800b030 <xTaskPriorityDisinherit+0x98>)
 800afec:	4a11      	ldr	r2, [pc, #68]	; (800b034 <xTaskPriorityDisinherit+0x9c>)
 800afee:	b950      	cbnz	r0, 800b006 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aff0:	2114      	movs	r1, #20
 800aff2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800aff4:	4379      	muls	r1, r7
 800aff6:	5873      	ldr	r3, [r6, r1]
 800aff8:	b92b      	cbnz	r3, 800b006 <xTaskPriorityDisinherit+0x6e>
 800affa:	2001      	movs	r0, #1
 800affc:	6813      	ldr	r3, [r2, #0]
 800affe:	40b8      	lsls	r0, r7
 800b000:	ea23 0300 	bic.w	r3, r3, r0
 800b004:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b006:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b008:	f1c3 0107 	rsb	r1, r3, #7
 800b00c:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b00e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800b010:	2401      	movs	r4, #1
 800b012:	6811      	ldr	r1, [r2, #0]
 800b014:	fa04 f003 	lsl.w	r0, r4, r3
 800b018:	4308      	orrs	r0, r1
 800b01a:	6010      	str	r0, [r2, #0]
 800b01c:	2014      	movs	r0, #20
 800b01e:	4629      	mov	r1, r5
 800b020:	fb00 6003 	mla	r0, r0, r3, r6
 800b024:	f7fe fe13 	bl	8009c4e <vListInsertEnd>
					xReturn = pdTRUE;
 800b028:	4620      	mov	r0, r4
		return xReturn;
 800b02a:	e7b9      	b.n	800afa0 <xTaskPriorityDisinherit+0x8>
 800b02c:	200009a8 	.word	0x200009a8
 800b030:	200009b4 	.word	0x200009b4
 800b034:	20000a54 	.word	0x20000a54

0800b038 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800b03a:	4604      	mov	r4, r0
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d04c      	beq.n	800b0da <vTaskPriorityDisinheritAfterTimeout+0xa2>
			configASSERT( pxTCB->uxMutexesHeld );
 800b040:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b042:	b942      	cbnz	r2, 800b056 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	e7fe      	b.n	800b054 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800b056:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b058:	4299      	cmp	r1, r3
 800b05a:	bf38      	it	cc
 800b05c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b05e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b060:	428b      	cmp	r3, r1
 800b062:	d03a      	beq.n	800b0da <vTaskPriorityDisinheritAfterTimeout+0xa2>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b064:	2a01      	cmp	r2, #1
 800b066:	d138      	bne.n	800b0da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					configASSERT( pxTCB != pxCurrentTCB );
 800b068:	4a1c      	ldr	r2, [pc, #112]	; (800b0dc <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 800b06a:	6812      	ldr	r2, [r2, #0]
 800b06c:	4282      	cmp	r2, r0
 800b06e:	d108      	bne.n	800b082 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	e7fe      	b.n	800b080 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b082:	2614      	movs	r6, #20
 800b084:	4d16      	ldr	r5, [pc, #88]	; (800b0e0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b086:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b088:	fb06 5303 	mla	r3, r6, r3, r5
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b08c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b08e:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 800b090:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b092:	bfa4      	itt	ge
 800b094:	f1c1 0107 	rsbge	r1, r1, #7
 800b098:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d11d      	bne.n	800b0da <vTaskPriorityDisinheritAfterTimeout+0xa2>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09e:	1d07      	adds	r7, r0, #4
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	f7fe fdf7 	bl	8009c94 <uxListRemove>
 800b0a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b0a8:	4c0e      	ldr	r4, [pc, #56]	; (800b0e4 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800b0aa:	b948      	cbnz	r0, 800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x88>
 800b0ac:	2301      	movs	r3, #1
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0ae:	4356      	muls	r6, r2
 800b0b0:	59a8      	ldr	r0, [r5, r6]
 800b0b2:	fa03 f102 	lsl.w	r1, r3, r2
 800b0b6:	b918      	cbnz	r0, 800b0c0 <vTaskPriorityDisinheritAfterTimeout+0x88>
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	ea23 0301 	bic.w	r3, r3, r1
 800b0be:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	2014      	movs	r0, #20
 800b0c4:	6821      	ldr	r1, [r4, #0]
 800b0c6:	4093      	lsls	r3, r2
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	6023      	str	r3, [r4, #0]
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	fb00 5002 	mla	r0, r0, r2, r5
	}
 800b0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800b0d6:	f7fe bdba 	b.w	8009c4e <vListInsertEnd>
	}
 800b0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0dc:	200009a8 	.word	0x200009a8
 800b0e0:	200009b4 	.word	0x200009b4
 800b0e4:	20000a54 	.word	0x20000a54

0800b0e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <pvTaskIncrementMutexHeldCount+0x14>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	b11a      	cbz	r2, 800b0f6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b0ee:	6819      	ldr	r1, [r3, #0]
 800b0f0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800b0f2:	3201      	adds	r2, #1
 800b0f4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800b0f6:	6818      	ldr	r0, [r3, #0]
	}
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	200009a8 	.word	0x200009a8

0800b100 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800b100:	2300      	movs	r3, #0
{
 800b102:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800b104:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b106:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <prvTaskExitError+0x3c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3301      	adds	r3, #1
 800b10c:	d008      	beq.n	800b120 <prvTaskExitError+0x20>
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	e7fe      	b.n	800b11e <prvTaskExitError+0x1e>
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b130:	9b01      	ldr	r3, [sp, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0fc      	beq.n	800b130 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b136:	b002      	add	sp, #8
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000090 	.word	0x20000090

0800b140 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b140:	4806      	ldr	r0, [pc, #24]	; (800b15c <prvPortStartFirstTask+0x1c>)
 800b142:	6800      	ldr	r0, [r0, #0]
 800b144:	6800      	ldr	r0, [r0, #0]
 800b146:	f380 8808 	msr	MSP, r0
 800b14a:	b662      	cpsie	i
 800b14c:	b661      	cpsie	f
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	df00      	svc	0
 800b158:	bf00      	nop
 800b15a:	0000      	.short	0x0000
 800b15c:	e000ed08 	.word	0xe000ed08

0800b160 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b164:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b16a:	f021 0101 	bic.w	r1, r1, #1
 800b16e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b172:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b176:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b17a:	3840      	subs	r0, #64	; 0x40
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	0800b101 	.word	0x0800b101
	...

0800b190 <SVC_Handler>:
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b1ae:	4770      	bx	lr

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	200009a8 	.word	0x200009a8

0800b1b4 <vPortEnterCritical>:
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1c4:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <vPortEnterCritical+0x3c>)
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b1cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b1ce:	d10d      	bne.n	800b1ec <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1d0:	4b08      	ldr	r3, [pc, #32]	; (800b1f4 <vPortEnterCritical+0x40>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1d8:	d008      	beq.n	800b1ec <vPortEnterCritical+0x38>
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	e7fe      	b.n	800b1ea <vPortEnterCritical+0x36>
	}
}
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	20000090 	.word	0x20000090
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800b1f8:	4a08      	ldr	r2, [pc, #32]	; (800b21c <vPortExitCritical+0x24>)
 800b1fa:	6813      	ldr	r3, [r2, #0]
 800b1fc:	b943      	cbnz	r3, 800b210 <vPortExitCritical+0x18>
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	e7fe      	b.n	800b20e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b210:	3b01      	subs	r3, #1
 800b212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b214:	b90b      	cbnz	r3, 800b21a <vPortExitCritical+0x22>
	__asm volatile
 800b216:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b21a:	4770      	bx	lr
 800b21c:	20000090 	.word	0x20000090

0800b220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b220:	f3ef 8009 	mrs	r0, PSP
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <pxCurrentTCBConst>)
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b230:	6010      	str	r0, [r2, #0]
 800b232:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b236:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b23a:	f380 8811 	msr	BASEPRI, r0
 800b23e:	f7ff fd5b 	bl	800acf8 <vTaskSwitchContext>
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f380 8811 	msr	BASEPRI, r0
 800b24a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b256:	f380 8809 	msr	PSP, r0
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	4770      	bx	lr

0800b260 <pxCurrentTCBConst>:
 800b260:	200009a8 	.word	0x200009a8

0800b264 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b264:	b508      	push	{r3, lr}
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b276:	f7ff fc13 	bl	800aaa0 <xTaskIncrementTick>
 800b27a:	b118      	cbz	r0, 800b284 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b280:	4b02      	ldr	r3, [pc, #8]	; (800b28c <SysTick_Handler+0x28>)
 800b282:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b284:	2300      	movs	r3, #0
 800b286:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b28a:	bd08      	pop	{r3, pc}
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b290:	2300      	movs	r3, #0
 800b292:	4a08      	ldr	r2, [pc, #32]	; (800b2b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b294:	4908      	ldr	r1, [pc, #32]	; (800b2b8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b298:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b29a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b29e:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <vPortSetupTimerInterrupt+0x2c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2a6:	4906      	ldr	r1, [pc, #24]	; (800b2c0 <vPortSetupTimerInterrupt+0x30>)
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2ac:	2307      	movs	r3, #7
 800b2ae:	6013      	str	r3, [r2, #0]
}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	e000e010 	.word	0xe000e010
 800b2b8:	e000e018 	.word	0xe000e018
 800b2bc:	20000008 	.word	0x20000008
 800b2c0:	e000e014 	.word	0xe000e014

0800b2c4 <xPortStartScheduler>:
{
 800b2c4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2c6:	4b27      	ldr	r3, [pc, #156]	; (800b364 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2c8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2ca:	781a      	ldrb	r2, [r3, #0]
 800b2cc:	b2d2      	uxtb	r2, r2
 800b2ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2d0:	22ff      	movs	r2, #255	; 0xff
 800b2d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2d4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2d6:	4a24      	ldr	r2, [pc, #144]	; (800b368 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b2e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2e8:	2207      	movs	r2, #7
 800b2ea:	4b20      	ldr	r3, [pc, #128]	; (800b36c <xPortStartScheduler+0xa8>)
 800b2ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b2f2:	1e54      	subs	r4, r2, #1
 800b2f4:	0600      	lsls	r0, r0, #24
 800b2f6:	d40d      	bmi.n	800b314 <xPortStartScheduler+0x50>
 800b2f8:	b101      	cbz	r1, 800b2fc <xPortStartScheduler+0x38>
 800b2fa:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	2a03      	cmp	r2, #3
 800b300:	d011      	beq.n	800b326 <xPortStartScheduler+0x62>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	e7fe      	b.n	800b312 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b314:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b318:	2101      	movs	r1, #1
 800b31a:	0052      	lsls	r2, r2, #1
 800b31c:	b2d2      	uxtb	r2, r2
 800b31e:	f88d 2003 	strb.w	r2, [sp, #3]
 800b322:	4622      	mov	r2, r4
 800b324:	e7e3      	b.n	800b2ee <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 800b326:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b328:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b32a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b32e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b330:	9b01      	ldr	r3, [sp, #4]
 800b332:	4a0c      	ldr	r2, [pc, #48]	; (800b364 <xPortStartScheduler+0xa0>)
 800b334:	b2db      	uxtb	r3, r3
 800b336:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b338:	4b0d      	ldr	r3, [pc, #52]	; (800b370 <xPortStartScheduler+0xac>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b348:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800b34a:	f7ff ffa1 	bl	800b290 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b34e:	4b09      	ldr	r3, [pc, #36]	; (800b374 <xPortStartScheduler+0xb0>)
 800b350:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800b352:	f7ff fef5 	bl	800b140 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b356:	f7ff fccf 	bl	800acf8 <vTaskSwitchContext>
	prvTaskExitError();
 800b35a:	f7ff fed1 	bl	800b100 <prvTaskExitError>
}
 800b35e:	4620      	mov	r0, r4
 800b360:	b002      	add	sp, #8
 800b362:	bd10      	pop	{r4, pc}
 800b364:	e000e400 	.word	0xe000e400
 800b368:	20000ad0 	.word	0x20000ad0
 800b36c:	20000ad4 	.word	0x20000ad4
 800b370:	e000ed20 	.word	0xe000ed20
 800b374:	20000090 	.word	0x20000090

0800b378 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b378:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b37c:	2b0f      	cmp	r3, #15
 800b37e:	d90e      	bls.n	800b39e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b380:	4a10      	ldr	r2, [pc, #64]	; (800b3c4 <vPortValidateInterruptPriority+0x4c>)
 800b382:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b384:	4a10      	ldr	r2, [pc, #64]	; (800b3c8 <vPortValidateInterruptPriority+0x50>)
 800b386:	7812      	ldrb	r2, [r2, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d908      	bls.n	800b39e <vPortValidateInterruptPriority+0x26>
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	e7fe      	b.n	800b39c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b39e:	4b0b      	ldr	r3, [pc, #44]	; (800b3cc <vPortValidateInterruptPriority+0x54>)
 800b3a0:	4a0b      	ldr	r2, [pc, #44]	; (800b3d0 <vPortValidateInterruptPriority+0x58>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6812      	ldr	r2, [r2, #0]
 800b3a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d908      	bls.n	800b3c0 <vPortValidateInterruptPriority+0x48>
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	e7fe      	b.n	800b3be <vPortValidateInterruptPriority+0x46>
	}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	e000e3f0 	.word	0xe000e3f0
 800b3c8:	20000ad0 	.word	0x20000ad0
 800b3cc:	e000ed0c 	.word	0xe000ed0c
 800b3d0:	20000ad4 	.word	0x20000ad4

0800b3d4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3d4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <prvInsertBlockIntoFreeList+0x40>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4282      	cmp	r2, r0
 800b3dc:	d318      	bcc.n	800b410 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3de:	685c      	ldr	r4, [r3, #4]
 800b3e0:	1919      	adds	r1, r3, r4
 800b3e2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3e4:	bf01      	itttt	eq
 800b3e6:	6841      	ldreq	r1, [r0, #4]
 800b3e8:	4618      	moveq	r0, r3
 800b3ea:	1909      	addeq	r1, r1, r4
 800b3ec:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3ee:	6844      	ldr	r4, [r0, #4]
 800b3f0:	1901      	adds	r1, r0, r4
 800b3f2:	428a      	cmp	r2, r1
 800b3f4:	d107      	bne.n	800b406 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3f6:	4908      	ldr	r1, [pc, #32]	; (800b418 <prvInsertBlockIntoFreeList+0x44>)
 800b3f8:	6809      	ldr	r1, [r1, #0]
 800b3fa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3fc:	bf1f      	itttt	ne
 800b3fe:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b400:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b402:	1909      	addne	r1, r1, r4
 800b404:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b406:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b408:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b40a:	bf18      	it	ne
 800b40c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	4613      	mov	r3, r2
 800b412:	e7e1      	b.n	800b3d8 <prvInsertBlockIntoFreeList+0x4>
 800b414:	200044e8 	.word	0x200044e8
 800b418:	20000ad8 	.word	0x20000ad8

0800b41c <pvPortMalloc>:
{
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b422:	f7ff fb27 	bl	800aa74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b426:	493d      	ldr	r1, [pc, #244]	; (800b51c <pvPortMalloc+0x100>)
 800b428:	4d3d      	ldr	r5, [pc, #244]	; (800b520 <pvPortMalloc+0x104>)
 800b42a:	680b      	ldr	r3, [r1, #0]
 800b42c:	b9fb      	cbnz	r3, 800b46e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800b42e:	4a3d      	ldr	r2, [pc, #244]	; (800b524 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 800b430:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b432:	0756      	lsls	r6, r2, #29
 800b434:	f502 5368 	add.w	r3, r2, #14848	; 0x3a00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b438:	bf0f      	iteee	eq
 800b43a:	f44f 5368 	moveq.w	r3, #14848	; 0x3a00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b43e:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b440:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b444:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b446:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b448:	4e37      	ldr	r6, [pc, #220]	; (800b528 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800b44a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b44c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b450:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b452:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800b454:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b458:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b45a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b45c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b460:	4b32      	ldr	r3, [pc, #200]	; (800b52c <pvPortMalloc+0x110>)
 800b462:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b464:	4b32      	ldr	r3, [pc, #200]	; (800b530 <pvPortMalloc+0x114>)
 800b466:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b46c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b46e:	682f      	ldr	r7, [r5, #0]
 800b470:	4227      	tst	r7, r4
 800b472:	d14d      	bne.n	800b510 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800b474:	2c00      	cmp	r4, #0
 800b476:	d03e      	beq.n	800b4f6 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 800b478:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b47c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b47e:	bf1c      	itt	ne
 800b480:	f023 0307 	bicne.w	r3, r3, #7
 800b484:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b486:	2b00      	cmp	r3, #0
 800b488:	d042      	beq.n	800b510 <pvPortMalloc+0xf4>
 800b48a:	4a29      	ldr	r2, [pc, #164]	; (800b530 <pvPortMalloc+0x114>)
 800b48c:	6816      	ldr	r6, [r2, #0]
 800b48e:	4690      	mov	r8, r2
 800b490:	429e      	cmp	r6, r3
 800b492:	d33d      	bcc.n	800b510 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800b494:	4a24      	ldr	r2, [pc, #144]	; (800b528 <pvPortMalloc+0x10c>)
 800b496:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b498:	6868      	ldr	r0, [r5, #4]
 800b49a:	4298      	cmp	r0, r3
 800b49c:	d201      	bcs.n	800b4a2 <pvPortMalloc+0x86>
 800b49e:	682c      	ldr	r4, [r5, #0]
 800b4a0:	b9a4      	cbnz	r4, 800b4cc <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800b4a2:	6809      	ldr	r1, [r1, #0]
 800b4a4:	42a9      	cmp	r1, r5
 800b4a6:	d033      	beq.n	800b510 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4a8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4aa:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4ac:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4ae:	1ac2      	subs	r2, r0, r3
 800b4b0:	2a10      	cmp	r2, #16
 800b4b2:	d912      	bls.n	800b4da <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4b4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4b6:	0741      	lsls	r1, r0, #29
 800b4b8:	d00b      	beq.n	800b4d2 <pvPortMalloc+0xb6>
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	e7fe      	b.n	800b4ca <pvPortMalloc+0xae>
 800b4cc:	462a      	mov	r2, r5
 800b4ce:	4625      	mov	r5, r4
 800b4d0:	e7e2      	b.n	800b498 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4d2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4d4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4d6:	f7ff ff7d 	bl	800b3d4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4da:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4dc:	4913      	ldr	r1, [pc, #76]	; (800b52c <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4de:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4e0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800b4e2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4e4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4e6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4ea:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4ec:	bf38      	it	cc
 800b4ee:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4f0:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4f2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4f4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800b4f6:	f7ff fb65 	bl	800abc4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4fa:	0763      	lsls	r3, r4, #29
 800b4fc:	d00a      	beq.n	800b514 <pvPortMalloc+0xf8>
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	e7fe      	b.n	800b50e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800b510:	2400      	movs	r4, #0
 800b512:	e7f0      	b.n	800b4f6 <pvPortMalloc+0xda>
}
 800b514:	4620      	mov	r0, r4
 800b516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51a:	bf00      	nop
 800b51c:	20000ad8 	.word	0x20000ad8
 800b520:	200044dc 	.word	0x200044dc
 800b524:	20000adc 	.word	0x20000adc
 800b528:	200044e8 	.word	0x200044e8
 800b52c:	200044e4 	.word	0x200044e4
 800b530:	200044e0 	.word	0x200044e0

0800b534 <vPortFree>:
{
 800b534:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b536:	4604      	mov	r4, r0
 800b538:	b370      	cbz	r0, 800b598 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b53a:	4a18      	ldr	r2, [pc, #96]	; (800b59c <vPortFree+0x68>)
 800b53c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b540:	6812      	ldr	r2, [r2, #0]
 800b542:	4213      	tst	r3, r2
 800b544:	d108      	bne.n	800b558 <vPortFree+0x24>
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	e7fe      	b.n	800b556 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b558:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b55c:	b141      	cbz	r1, 800b570 <vPortFree+0x3c>
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	e7fe      	b.n	800b56e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b570:	ea23 0302 	bic.w	r3, r3, r2
 800b574:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b578:	f7ff fa7c 	bl	800aa74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b57c:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <vPortFree+0x6c>)
 800b57e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b582:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b584:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b588:	440b      	add	r3, r1
 800b58a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b58c:	f7ff ff22 	bl	800b3d4 <prvInsertBlockIntoFreeList>
}
 800b590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800b594:	f7ff bb16 	b.w	800abc4 <xTaskResumeAll>
}
 800b598:	bd10      	pop	{r4, pc}
 800b59a:	bf00      	nop
 800b59c:	200044dc 	.word	0x200044dc
 800b5a0:	200044e0 	.word	0x200044e0

0800b5a4 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b5a4:	680a      	ldr	r2, [r1, #0]
{
 800b5a6:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b5a8:	320c      	adds	r2, #12
{
 800b5aa:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b5ac:	f001 ff80 	bl	800d4b0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800b5b0:	b908      	cbnz	r0, 800b5b6 <netconn_apimsg+0x12>
    return apimsg->err;
 800b5b2:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 800b5b6:	bd10      	pop	{r4, pc}

0800b5b8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b5b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b5ba:	b958      	cbnz	r0, 800b5d4 <netconn_close_shutdown+0x1c>
 800b5bc:	4b0b      	ldr	r3, [pc, #44]	; (800b5ec <netconn_close_shutdown+0x34>)
 800b5be:	f44f 724a 	mov.w	r2, #808	; 0x328
 800b5c2:	490b      	ldr	r1, [pc, #44]	; (800b5f0 <netconn_close_shutdown+0x38>)
 800b5c4:	480b      	ldr	r0, [pc, #44]	; (800b5f4 <netconn_close_shutdown+0x3c>)
 800b5c6:	f00b f95f 	bl	8016888 <iprintf>
 800b5ca:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 800b5ce:	b007      	add	sp, #28
 800b5d0:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b5d4:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800b5d6:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b5d8:	f88d 100c 	strb.w	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b5dc:	4806      	ldr	r0, [pc, #24]	; (800b5f8 <netconn_close_shutdown+0x40>)
 800b5de:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b5e0:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b5e4:	f7ff ffde 	bl	800b5a4 <netconn_apimsg>
  return err;
 800b5e8:	e7f1      	b.n	800b5ce <netconn_close_shutdown+0x16>
 800b5ea:	bf00      	nop
 800b5ec:	08018e95 	.word	0x08018e95
 800b5f0:	08018ec7 	.word	0x08018ec7
 800b5f4:	08018495 	.word	0x08018495
 800b5f8:	0800ca61 	.word	0x0800ca61

0800b5fc <netconn_recv_data>:
  void *buf = NULL;
 800b5fc:	2300      	movs	r3, #0
{
 800b5fe:	b570      	push	{r4, r5, r6, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	4604      	mov	r4, r0
  void *buf = NULL;
 800b604:	9300      	str	r3, [sp, #0]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b606:	460d      	mov	r5, r1
 800b608:	b951      	cbnz	r1, 800b620 <netconn_recv_data+0x24>
 800b60a:	f240 12e7 	movw	r2, #487	; 0x1e7
 800b60e:	4b3d      	ldr	r3, [pc, #244]	; (800b704 <netconn_recv_data+0x108>)
 800b610:	493d      	ldr	r1, [pc, #244]	; (800b708 <netconn_recv_data+0x10c>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b612:	483e      	ldr	r0, [pc, #248]	; (800b70c <netconn_recv_data+0x110>)
 800b614:	f00b f938 	bl	8016888 <iprintf>
 800b618:	f06f 000f 	mvn.w	r0, #15
}
 800b61c:	b006      	add	sp, #24
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 800b620:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b622:	b920      	cbnz	r0, 800b62e <netconn_recv_data+0x32>
 800b624:	4b37      	ldr	r3, [pc, #220]	; (800b704 <netconn_recv_data+0x108>)
 800b626:	f240 12e9 	movw	r2, #489	; 0x1e9
 800b62a:	4939      	ldr	r1, [pc, #228]	; (800b710 <netconn_recv_data+0x114>)
 800b62c:	e7f1      	b.n	800b612 <netconn_recv_data+0x16>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b62e:	7803      	ldrb	r3, [r0, #0]
 800b630:	f100 0610 	add.w	r6, r0, #16
 800b634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b638:	2b10      	cmp	r3, #16
 800b63a:	d10e      	bne.n	800b65a <netconn_recv_data+0x5e>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800b63c:	4630      	mov	r0, r6
 800b63e:	f00a fcd0 	bl	8015fe2 <sys_mbox_valid>
 800b642:	b950      	cbnz	r0, 800b65a <netconn_recv_data+0x5e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800b644:	f104 0014 	add.w	r0, r4, #20
 800b648:	f00a fccb 	bl	8015fe2 <sys_mbox_valid>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	bf0c      	ite	eq
 800b650:	f06f 000e 	mvneq.w	r0, #14
 800b654:	f06f 000a 	mvnne.w	r0, #10
 800b658:	e7e0      	b.n	800b61c <netconn_recv_data+0x20>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800b65a:	4630      	mov	r0, r6
 800b65c:	f00a fcc1 	bl	8015fe2 <sys_mbox_valid>
 800b660:	b948      	cbnz	r0, 800b676 <netconn_recv_data+0x7a>
 800b662:	4b28      	ldr	r3, [pc, #160]	; (800b704 <netconn_recv_data+0x108>)
 800b664:	f240 12f5 	movw	r2, #501	; 0x1f5
 800b668:	492a      	ldr	r1, [pc, #168]	; (800b714 <netconn_recv_data+0x118>)
 800b66a:	4828      	ldr	r0, [pc, #160]	; (800b70c <netconn_recv_data+0x110>)
 800b66c:	f00b f90c 	bl	8016888 <iprintf>
 800b670:	f06f 000a 	mvn.w	r0, #10
 800b674:	e7d2      	b.n	800b61c <netconn_recv_data+0x20>
  if (ERR_IS_FATAL(conn->last_err)) {
 800b676:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800b67a:	f110 0f0c 	cmn.w	r0, #12
 800b67e:	dbcd      	blt.n	800b61c <netconn_recv_data+0x20>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800b680:	2200      	movs	r2, #0
 800b682:	4669      	mov	r1, sp
 800b684:	4630      	mov	r0, r6
 800b686:	f00a fc79 	bl	8015f7c <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b68a:	7823      	ldrb	r3, [r4, #0]
 800b68c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b690:	2b10      	cmp	r3, #16
 800b692:	9b00      	ldr	r3, [sp, #0]
 800b694:	d12a      	bne.n	800b6ec <netconn_recv_data+0xf0>
    API_MSG_VAR_REF(msg).conn = conn;
 800b696:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 800b698:	b1ab      	cbz	r3, 800b6c6 <netconn_recv_data+0xca>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800b69a:	891b      	ldrh	r3, [r3, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800b69c:	a901      	add	r1, sp, #4
 800b69e:	481e      	ldr	r0, [pc, #120]	; (800b718 <netconn_recv_data+0x11c>)
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800b6a0:	9303      	str	r3, [sp, #12]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800b6a2:	f7ff ff7f 	bl	800b5a4 <netconn_apimsg>
    if (buf == NULL) {
 800b6a6:	9a00      	ldr	r2, [sp, #0]
 800b6a8:	b9b2      	cbnz	r2, 800b6d8 <netconn_recv_data+0xdc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b6aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6ac:	b113      	cbz	r3, 800b6b4 <netconn_recv_data+0xb8>
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b6b4:	6863      	ldr	r3, [r4, #4]
 800b6b6:	b943      	cbnz	r3, 800b6ca <netconn_recv_data+0xce>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800b6b8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	bf08      	it	eq
 800b6c0:	f06f 000d 	mvneq.w	r0, #13
 800b6c4:	e7aa      	b.n	800b61c <netconn_recv_data+0x20>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e7e8      	b.n	800b69c <netconn_recv_data+0xa0>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff ff73 	bl	800b5b8 <netconn_close_shutdown>
      return ERR_CLSD;
 800b6d2:	f06f 000e 	mvn.w	r0, #14
 800b6d6:	e7a1      	b.n	800b61c <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 800b6d8:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800b6da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6dc:	b113      	cbz	r3, 800b6e4 <netconn_recv_data+0xe8>
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	4798      	blx	r3
  *new_buf = buf;
 800b6e4:	9b00      	ldr	r3, [sp, #0]
  return ERR_OK;
 800b6e6:	2000      	movs	r0, #0
  *new_buf = buf;
 800b6e8:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800b6ea:	e797      	b.n	800b61c <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800b6ec:	b933      	cbnz	r3, 800b6fc <netconn_recv_data+0x100>
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <netconn_recv_data+0x108>)
 800b6f0:	f240 223e 	movw	r2, #574	; 0x23e
 800b6f4:	4909      	ldr	r1, [pc, #36]	; (800b71c <netconn_recv_data+0x120>)
 800b6f6:	4805      	ldr	r0, [pc, #20]	; (800b70c <netconn_recv_data+0x110>)
 800b6f8:	f00b f8c6 	bl	8016888 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800b6fc:	9b00      	ldr	r3, [sp, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	891a      	ldrh	r2, [r3, #8]
 800b702:	e7ea      	b.n	800b6da <netconn_recv_data+0xde>
 800b704:	08018e95 	.word	0x08018e95
 800b708:	08019034 	.word	0x08019034
 800b70c:	08018495 	.word	0x08018495
 800b710:	08019052 	.word	0x08019052
 800b714:	0801906d 	.word	0x0801906d
 800b718:	0800c88f 	.word	0x0800c88f
 800b71c:	0801908c 	.word	0x0801908c

0800b720 <netconn_new_with_proto_and_callback>:
{
 800b720:	b570      	push	{r4, r5, r6, lr}
 800b722:	460d      	mov	r5, r1
 800b724:	b086      	sub	sp, #24
  conn = netconn_alloc(t, callback);
 800b726:	4611      	mov	r1, r2
 800b728:	f000 fe80 	bl	800c42c <netconn_alloc>
  if (conn != NULL) {
 800b72c:	4604      	mov	r4, r0
 800b72e:	2800      	cmp	r0, #0
 800b730:	d03f      	beq.n	800b7b2 <netconn_new_with_proto_and_callback+0x92>
    API_MSG_VAR_REF(msg).conn = conn;
 800b732:	a906      	add	r1, sp, #24
 800b734:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b738:	481f      	ldr	r0, [pc, #124]	; (800b7b8 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b73a:	f88d 500c 	strb.w	r5, [sp, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b73e:	f7ff ff31 	bl	800b5a4 <netconn_apimsg>
    if (err != ERR_OK) {
 800b742:	2800      	cmp	r0, #0
 800b744:	d035      	beq.n	800b7b2 <netconn_new_with_proto_and_callback+0x92>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b746:	6863      	ldr	r3, [r4, #4]
 800b748:	b12b      	cbz	r3, 800b756 <netconn_new_with_proto_and_callback+0x36>
 800b74a:	4b1c      	ldr	r3, [pc, #112]	; (800b7bc <netconn_new_with_proto_and_callback+0x9c>)
 800b74c:	2289      	movs	r2, #137	; 0x89
 800b74e:	491c      	ldr	r1, [pc, #112]	; (800b7c0 <netconn_new_with_proto_and_callback+0xa0>)
 800b750:	481c      	ldr	r0, [pc, #112]	; (800b7c4 <netconn_new_with_proto_and_callback+0xa4>)
 800b752:	f00b f899 	bl	8016888 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b756:	f104 0510 	add.w	r5, r4, #16
 800b75a:	4628      	mov	r0, r5
 800b75c:	f00a fc41 	bl	8015fe2 <sys_mbox_valid>
 800b760:	b928      	cbnz	r0, 800b76e <netconn_new_with_proto_and_callback+0x4e>
 800b762:	4b16      	ldr	r3, [pc, #88]	; (800b7bc <netconn_new_with_proto_and_callback+0x9c>)
 800b764:	228a      	movs	r2, #138	; 0x8a
 800b766:	4918      	ldr	r1, [pc, #96]	; (800b7c8 <netconn_new_with_proto_and_callback+0xa8>)
 800b768:	4816      	ldr	r0, [pc, #88]	; (800b7c4 <netconn_new_with_proto_and_callback+0xa4>)
 800b76a:	f00b f88d 	bl	8016888 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b76e:	f104 0014 	add.w	r0, r4, #20
 800b772:	f00a fc36 	bl	8015fe2 <sys_mbox_valid>
 800b776:	b128      	cbz	r0, 800b784 <netconn_new_with_proto_and_callback+0x64>
 800b778:	4b10      	ldr	r3, [pc, #64]	; (800b7bc <netconn_new_with_proto_and_callback+0x9c>)
 800b77a:	228c      	movs	r2, #140	; 0x8c
 800b77c:	4913      	ldr	r1, [pc, #76]	; (800b7cc <netconn_new_with_proto_and_callback+0xac>)
 800b77e:	4811      	ldr	r0, [pc, #68]	; (800b7c4 <netconn_new_with_proto_and_callback+0xa4>)
 800b780:	f00b f882 	bl	8016888 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b784:	f104 060c 	add.w	r6, r4, #12
 800b788:	4630      	mov	r0, r6
 800b78a:	f00a fc6b 	bl	8016064 <sys_sem_valid>
 800b78e:	b928      	cbnz	r0, 800b79c <netconn_new_with_proto_and_callback+0x7c>
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <netconn_new_with_proto_and_callback+0x9c>)
 800b792:	228f      	movs	r2, #143	; 0x8f
 800b794:	490e      	ldr	r1, [pc, #56]	; (800b7d0 <netconn_new_with_proto_and_callback+0xb0>)
 800b796:	480b      	ldr	r0, [pc, #44]	; (800b7c4 <netconn_new_with_proto_and_callback+0xa4>)
 800b798:	f00b f876 	bl	8016888 <iprintf>
      sys_sem_free(&conn->op_completed);
 800b79c:	4630      	mov	r0, r6
 800b79e:	f00a fc5e 	bl	801605e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	f00a fbca 	bl	8015f3c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	2007      	movs	r0, #7
 800b7ac:	f003 fd5a 	bl	800f264 <memp_free>
      return NULL;
 800b7b0:	2400      	movs	r4, #0
}
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	b006      	add	sp, #24
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	0800c3ad 	.word	0x0800c3ad
 800b7bc:	08018e95 	.word	0x08018e95
 800b7c0:	08018fc4 	.word	0x08018fc4
 800b7c4:	08018495 	.word	0x08018495
 800b7c8:	08018fe5 	.word	0x08018fe5
 800b7cc:	08018ffa 	.word	0x08018ffa
 800b7d0:	0801901b 	.word	0x0801901b

0800b7d4 <netconn_delete>:
{
 800b7d4:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 800b7d6:	4604      	mov	r4, r0
{
 800b7d8:	b087      	sub	sp, #28
  if (conn == NULL) {
 800b7da:	b178      	cbz	r0, 800b7fc <netconn_delete+0x28>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b7dc:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800b7de:	9001      	str	r0, [sp, #4]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b7e0:	a901      	add	r1, sp, #4
 800b7e2:	4807      	ldr	r0, [pc, #28]	; (800b800 <netconn_delete+0x2c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b7e4:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b7e8:	f7ff fedc 	bl	800b5a4 <netconn_apimsg>
  if (err != ERR_OK) {
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	b910      	cbnz	r0, 800b7f6 <netconn_delete+0x22>
  netconn_free(conn);
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 fe61 	bl	800c4b8 <netconn_free>
}
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	b007      	add	sp, #28
 800b7fa:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	e7fa      	b.n	800b7f6 <netconn_delete+0x22>
 800b800:	0800c5d1 	.word	0x0800c5d1

0800b804 <netconn_getaddr>:
{
 800b804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800b806:	b950      	cbnz	r0, 800b81e <netconn_getaddr+0x1a>
 800b808:	22d9      	movs	r2, #217	; 0xd9
 800b80a:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <netconn_getaddr+0x44>)
 800b80c:	490f      	ldr	r1, [pc, #60]	; (800b84c <netconn_getaddr+0x48>)
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800b80e:	4810      	ldr	r0, [pc, #64]	; (800b850 <netconn_getaddr+0x4c>)
 800b810:	f00b f83a 	bl	8016888 <iprintf>
 800b814:	f06f 000f 	mvn.w	r0, #15
}
 800b818:	b007      	add	sp, #28
 800b81a:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800b81e:	b919      	cbnz	r1, 800b828 <netconn_getaddr+0x24>
 800b820:	4b09      	ldr	r3, [pc, #36]	; (800b848 <netconn_getaddr+0x44>)
 800b822:	22da      	movs	r2, #218	; 0xda
 800b824:	490b      	ldr	r1, [pc, #44]	; (800b854 <netconn_getaddr+0x50>)
 800b826:	e7f2      	b.n	800b80e <netconn_getaddr+0xa>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800b828:	b91a      	cbnz	r2, 800b832 <netconn_getaddr+0x2e>
 800b82a:	4b07      	ldr	r3, [pc, #28]	; (800b848 <netconn_getaddr+0x44>)
 800b82c:	22db      	movs	r2, #219	; 0xdb
 800b82e:	490a      	ldr	r1, [pc, #40]	; (800b858 <netconn_getaddr+0x54>)
 800b830:	e7ed      	b.n	800b80e <netconn_getaddr+0xa>
  API_MSG_VAR_REF(msg).conn = conn;
 800b832:	9001      	str	r0, [sp, #4]
  msg.msg.ad.port = port;
 800b834:	e9cd 1203 	strd	r1, r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800b838:	4808      	ldr	r0, [pc, #32]	; (800b85c <netconn_getaddr+0x58>)
 800b83a:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800b83c:	f88d 3014 	strb.w	r3, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800b840:	f7ff feb0 	bl	800b5a4 <netconn_apimsg>
  return err;
 800b844:	e7e8      	b.n	800b818 <netconn_getaddr+0x14>
 800b846:	bf00      	nop
 800b848:	08018e95 	.word	0x08018e95
 800b84c:	08018f22 	.word	0x08018f22
 800b850:	08018495 	.word	0x08018495
 800b854:	08018f40 	.word	0x08018f40
 800b858:	08018f5e 	.word	0x08018f5e
 800b85c:	0800c9cd 	.word	0x0800c9cd

0800b860 <netconn_connect>:
{
 800b860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800b862:	b958      	cbnz	r0, 800b87c <netconn_connect+0x1c>
 800b864:	4b0c      	ldr	r3, [pc, #48]	; (800b898 <netconn_connect+0x38>)
 800b866:	f240 122b 	movw	r2, #299	; 0x12b
 800b86a:	490c      	ldr	r1, [pc, #48]	; (800b89c <netconn_connect+0x3c>)
 800b86c:	480c      	ldr	r0, [pc, #48]	; (800b8a0 <netconn_connect+0x40>)
 800b86e:	f00b f80b 	bl	8016888 <iprintf>
 800b872:	f06f 000f 	mvn.w	r0, #15
}
 800b876:	b007      	add	sp, #28
 800b878:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 800b87c:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <netconn_connect+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 800b87e:	9001      	str	r0, [sp, #4]
    addr = IP4_ADDR_ANY;
 800b880:	2900      	cmp	r1, #0
 800b882:	bf08      	it	eq
 800b884:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b886:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <netconn_connect+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800b888:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b88a:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800b88c:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800b890:	f7ff fe88 	bl	800b5a4 <netconn_apimsg>
  return err;
 800b894:	e7ef      	b.n	800b876 <netconn_connect+0x16>
 800b896:	bf00      	nop
 800b898:	08018e95 	.word	0x08018e95
 800b89c:	08018ee3 	.word	0x08018ee3
 800b8a0:	08018495 	.word	0x08018495
 800b8a4:	0802264c 	.word	0x0802264c
 800b8a8:	0800c701 	.word	0x0800c701

0800b8ac <netconn_disconnect>:
{
 800b8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800b8ae:	b958      	cbnz	r0, 800b8c8 <netconn_disconnect+0x1c>
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <netconn_disconnect+0x2c>)
 800b8b2:	f240 124b 	movw	r2, #331	; 0x14b
 800b8b6:	4909      	ldr	r1, [pc, #36]	; (800b8dc <netconn_disconnect+0x30>)
 800b8b8:	4809      	ldr	r0, [pc, #36]	; (800b8e0 <netconn_disconnect+0x34>)
 800b8ba:	f00a ffe5 	bl	8016888 <iprintf>
 800b8be:	f06f 000f 	mvn.w	r0, #15
}
 800b8c2:	b007      	add	sp, #28
 800b8c4:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800b8c8:	a906      	add	r1, sp, #24
 800b8ca:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800b8ce:	4805      	ldr	r0, [pc, #20]	; (800b8e4 <netconn_disconnect+0x38>)
 800b8d0:	f7ff fe68 	bl	800b5a4 <netconn_apimsg>
  return err;
 800b8d4:	e7f5      	b.n	800b8c2 <netconn_disconnect+0x16>
 800b8d6:	bf00      	nop
 800b8d8:	08018e95 	.word	0x08018e95
 800b8dc:	08018f01 	.word	0x08018f01
 800b8e0:	08018495 	.word	0x08018495
 800b8e4:	0800c7f1 	.word	0x0800c7f1

0800b8e8 <netconn_recv_tcp_pbuf>:
{
 800b8e8:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 800b8ea:	b140      	cbz	r0, 800b8fe <netconn_recv_tcp_pbuf+0x16>
 800b8ec:	7803      	ldrb	r3, [r0, #0]
 800b8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8f2:	2b10      	cmp	r3, #16
 800b8f4:	d103      	bne.n	800b8fe <netconn_recv_tcp_pbuf+0x16>
}
 800b8f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf);
 800b8fa:	f7ff be7f 	b.w	800b5fc <netconn_recv_data>
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <netconn_recv_tcp_pbuf+0x2c>)
 800b900:	f240 225e 	movw	r2, #606	; 0x25e
 800b904:	4904      	ldr	r1, [pc, #16]	; (800b918 <netconn_recv_tcp_pbuf+0x30>)
 800b906:	4805      	ldr	r0, [pc, #20]	; (800b91c <netconn_recv_tcp_pbuf+0x34>)
 800b908:	f00a ffbe 	bl	8016888 <iprintf>
}
 800b90c:	f06f 000f 	mvn.w	r0, #15
 800b910:	bd08      	pop	{r3, pc}
 800b912:	bf00      	nop
 800b914:	08018e95 	.word	0x08018e95
 800b918:	08019052 	.word	0x08019052
 800b91c:	08018495 	.word	0x08018495

0800b920 <netconn_recv>:
{
 800b920:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b922:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b924:	460e      	mov	r6, r1
 800b926:	b959      	cbnz	r1, 800b940 <netconn_recv+0x20>
 800b928:	f44f 721d 	mov.w	r2, #628	; 0x274
 800b92c:	4b1f      	ldr	r3, [pc, #124]	; (800b9ac <netconn_recv+0x8c>)
 800b92e:	4920      	ldr	r1, [pc, #128]	; (800b9b0 <netconn_recv+0x90>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b930:	4820      	ldr	r0, [pc, #128]	; (800b9b4 <netconn_recv+0x94>)
 800b932:	f00a ffa9 	bl	8016888 <iprintf>
 800b936:	f06f 050f 	mvn.w	r5, #15
}
 800b93a:	4628      	mov	r0, r5
 800b93c:	b002      	add	sp, #8
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 800b940:	2200      	movs	r2, #0
 800b942:	600a      	str	r2, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b944:	b920      	cbnz	r0, 800b950 <netconn_recv+0x30>
 800b946:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <netconn_recv+0x8c>)
 800b948:	f240 2276 	movw	r2, #630	; 0x276
 800b94c:	491a      	ldr	r1, [pc, #104]	; (800b9b8 <netconn_recv+0x98>)
 800b94e:	e7ef      	b.n	800b930 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800b950:	7803      	ldrb	r3, [r0, #0]
 800b952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b956:	2b10      	cmp	r3, #16
 800b958:	d124      	bne.n	800b9a4 <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b95a:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 800b95c:	9201      	str	r2, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b95e:	f003 fc65 	bl	800f22c <memp_malloc>
    if (buf == NULL) {
 800b962:	4604      	mov	r4, r0
 800b964:	b1d8      	cbz	r0, 800b99e <netconn_recv+0x7e>
    err = netconn_recv_data(conn, (void **)&p);
 800b966:	4628      	mov	r0, r5
 800b968:	a901      	add	r1, sp, #4
 800b96a:	f7ff fe47 	bl	800b5fc <netconn_recv_data>
    if (err != ERR_OK) {
 800b96e:	4605      	mov	r5, r0
 800b970:	b120      	cbz	r0, 800b97c <netconn_recv+0x5c>
      memp_free(MEMP_NETBUF, buf);
 800b972:	4621      	mov	r1, r4
 800b974:	2006      	movs	r0, #6
 800b976:	f003 fc75 	bl	800f264 <memp_free>
      return err;
 800b97a:	e7de      	b.n	800b93a <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	b933      	cbnz	r3, 800b98e <netconn_recv+0x6e>
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <netconn_recv+0x8c>)
 800b982:	f240 228a 	movw	r2, #650	; 0x28a
 800b986:	490d      	ldr	r1, [pc, #52]	; (800b9bc <netconn_recv+0x9c>)
 800b988:	480a      	ldr	r0, [pc, #40]	; (800b9b4 <netconn_recv+0x94>)
 800b98a:	f00a ff7d 	bl	8016888 <iprintf>
    buf->p = p;
 800b98e:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 800b990:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 800b998:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 800b99a:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 800b99c:	e7cd      	b.n	800b93a <netconn_recv+0x1a>
      return ERR_MEM;
 800b99e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b9a2:	e7ca      	b.n	800b93a <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf);
 800b9a4:	f7ff fe2a 	bl	800b5fc <netconn_recv_data>
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	e7c6      	b.n	800b93a <netconn_recv+0x1a>
 800b9ac:	08018e95 	.word	0x08018e95
 800b9b0:	08019034 	.word	0x08019034
 800b9b4:	08018495 	.word	0x08018495
 800b9b8:	08019052 	.word	0x08019052
 800b9bc:	080211bf 	.word	0x080211bf

0800b9c0 <netconn_send>:
{
 800b9c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b9c2:	b958      	cbnz	r0, 800b9dc <netconn_send+0x1c>
 800b9c4:	4b09      	ldr	r3, [pc, #36]	; (800b9ec <netconn_send+0x2c>)
 800b9c6:	f240 22c3 	movw	r2, #707	; 0x2c3
 800b9ca:	4909      	ldr	r1, [pc, #36]	; (800b9f0 <netconn_send+0x30>)
 800b9cc:	4809      	ldr	r0, [pc, #36]	; (800b9f4 <netconn_send+0x34>)
 800b9ce:	f00a ff5b 	bl	8016888 <iprintf>
 800b9d2:	f06f 000f 	mvn.w	r0, #15
}
 800b9d6:	b007      	add	sp, #28
 800b9d8:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800b9dc:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800b9de:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800b9e0:	4805      	ldr	r0, [pc, #20]	; (800b9f8 <netconn_send+0x38>)
 800b9e2:	a901      	add	r1, sp, #4
 800b9e4:	f7ff fdde 	bl	800b5a4 <netconn_apimsg>
  return err;
 800b9e8:	e7f5      	b.n	800b9d6 <netconn_send+0x16>
 800b9ea:	bf00      	nop
 800b9ec:	08018e95 	.word	0x08018e95
 800b9f0:	08019098 	.word	0x08019098
 800b9f4:	08018495 	.word	0x08018495
 800b9f8:	0800c82f 	.word	0x0800c82f

0800b9fc <netconn_write_partly>:
{
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	4616      	mov	r6, r2
 800ba02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ba04:	b950      	cbnz	r0, 800ba1c <netconn_write_partly+0x20>
 800ba06:	4b1c      	ldr	r3, [pc, #112]	; (800ba78 <netconn_write_partly+0x7c>)
 800ba08:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ba0c:	491b      	ldr	r1, [pc, #108]	; (800ba7c <netconn_write_partly+0x80>)
 800ba0e:	481c      	ldr	r0, [pc, #112]	; (800ba80 <netconn_write_partly+0x84>)
 800ba10:	f00a ff3a 	bl	8016888 <iprintf>
 800ba14:	f06f 000f 	mvn.w	r0, #15
}
 800ba18:	b006      	add	sp, #24
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800ba1c:	7802      	ldrb	r2, [r0, #0]
 800ba1e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ba22:	2a10      	cmp	r2, #16
 800ba24:	d009      	beq.n	800ba3a <netconn_write_partly+0x3e>
 800ba26:	4b14      	ldr	r3, [pc, #80]	; (800ba78 <netconn_write_partly+0x7c>)
 800ba28:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ba2c:	4915      	ldr	r1, [pc, #84]	; (800ba84 <netconn_write_partly+0x88>)
 800ba2e:	4814      	ldr	r0, [pc, #80]	; (800ba80 <netconn_write_partly+0x84>)
 800ba30:	f00a ff2a 	bl	8016888 <iprintf>
    return ERR_VAL;
 800ba34:	f06f 0005 	mvn.w	r0, #5
 800ba38:	e7ee      	b.n	800ba18 <netconn_write_partly+0x1c>
  if (size == 0) {
 800ba3a:	b90e      	cbnz	r6, 800ba40 <netconn_write_partly+0x44>
    return ERR_OK;
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7eb      	b.n	800ba18 <netconn_write_partly+0x1c>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ba40:	7f02      	ldrb	r2, [r0, #28]
 800ba42:	0792      	lsls	r2, r2, #30
 800ba44:	d402      	bmi.n	800ba4c <netconn_write_partly+0x50>
  if (dontblock && !bytes_written) {
 800ba46:	f013 0504 	ands.w	r5, r3, #4
 800ba4a:	d002      	beq.n	800ba52 <netconn_write_partly+0x56>
 800ba4c:	2c00      	cmp	r4, #0
 800ba4e:	d0f1      	beq.n	800ba34 <netconn_write_partly+0x38>
 800ba50:	2501      	movs	r5, #1
  API_MSG_VAR_REF(msg).conn = conn;
 800ba52:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800ba54:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ba56:	480c      	ldr	r0, [pc, #48]	; (800ba88 <netconn_write_partly+0x8c>)
 800ba58:	a901      	add	r1, sp, #4
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ba5a:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ba5e:	9604      	str	r6, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ba60:	f7ff fda0 	bl	800b5a4 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d1d7      	bne.n	800ba18 <netconn_write_partly+0x1c>
 800ba68:	2c00      	cmp	r4, #0
 800ba6a:	d0e7      	beq.n	800ba3c <netconn_write_partly+0x40>
    if (dontblock) {
 800ba6c:	b115      	cbz	r5, 800ba74 <netconn_write_partly+0x78>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	e7d1      	b.n	800ba18 <netconn_write_partly+0x1c>
      *bytes_written = size;
 800ba74:	6026      	str	r6, [r4, #0]
 800ba76:	e7cf      	b.n	800ba18 <netconn_write_partly+0x1c>
 800ba78:	08018e95 	.word	0x08018e95
 800ba7c:	080190b3 	.word	0x080190b3
 800ba80:	08018495 	.word	0x08018495
 800ba84:	080190cf 	.word	0x080190cf
 800ba88:	0800c8e5 	.word	0x0800c8e5

0800ba8c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	b086      	sub	sp, #24
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800ba90:	b958      	cbnz	r0, 800baaa <netconn_gethostbyname+0x1e>
 800ba92:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ba96:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <netconn_gethostbyname+0x74>)
 800ba98:	491a      	ldr	r1, [pc, #104]	; (800bb04 <netconn_gethostbyname+0x78>)
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800ba9a:	481b      	ldr	r0, [pc, #108]	; (800bb08 <netconn_gethostbyname+0x7c>)
 800ba9c:	f00a fef4 	bl	8016888 <iprintf>
 800baa0:	f06f 040f 	mvn.w	r4, #15
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
}
 800baa4:	4620      	mov	r0, r4
 800baa6:	b006      	add	sp, #24
 800baa8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 800baaa:	b921      	cbnz	r1, 800bab6 <netconn_gethostbyname+0x2a>
 800baac:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <netconn_gethostbyname+0x74>)
 800baae:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bab2:	4916      	ldr	r1, [pc, #88]	; (800bb0c <netconn_gethostbyname+0x80>)
 800bab4:	e7f1      	b.n	800ba9a <netconn_gethostbyname+0xe>
  msg.err = &err;
 800bab6:	f10d 0303 	add.w	r3, sp, #3
 800baba:	9305      	str	r3, [sp, #20]
  msg.sem = &sem;
 800babc:	ab01      	add	r3, sp, #4
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800babe:	e9cd 1303 	strd	r1, r3, [sp, #12]
  API_VAR_REF(msg).name = name;
 800bac2:	9002      	str	r0, [sp, #8]
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800bac4:	2100      	movs	r1, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f00a fa93 	bl	8015ff2 <sys_sem_new>
 800bacc:	4604      	mov	r4, r0
 800bace:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d1e6      	bne.n	800baa4 <netconn_gethostbyname+0x18>
  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
 800bad6:	2201      	movs	r2, #1
 800bad8:	a902      	add	r1, sp, #8
 800bada:	480d      	ldr	r0, [pc, #52]	; (800bb10 <netconn_gethostbyname+0x84>)
 800badc:	f001 fcb6 	bl	800d44c <tcpip_callback_with_block>
  if (cberr != ERR_OK) {
 800bae0:	4604      	mov	r4, r0
 800bae2:	b118      	cbz	r0, 800baec <netconn_gethostbyname+0x60>
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800bae4:	9804      	ldr	r0, [sp, #16]
 800bae6:	f00a faba 	bl	801605e <sys_sem_free>
    return cberr;
 800baea:	e7db      	b.n	800baa4 <netconn_gethostbyname+0x18>
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
 800baec:	4601      	mov	r1, r0
 800baee:	9804      	ldr	r0, [sp, #16]
 800baf0:	f00a fa97 	bl	8016022 <sys_arch_sem_wait>
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800baf4:	9804      	ldr	r0, [sp, #16]
 800baf6:	f00a fab2 	bl	801605e <sys_sem_free>
  return err;
 800bafa:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800bafe:	e7d1      	b.n	800baa4 <netconn_gethostbyname+0x18>
 800bb00:	08018e95 	.word	0x08018e95
 800bb04:	08018f7c 	.word	0x08018f7c
 800bb08:	08018495 	.word	0x08018495
 800bb0c:	08018fa0 	.word	0x08018fa0
 800bb10:	0800cb35 	.word	0x0800cb35

0800bb14 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800bb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb18:	4606      	mov	r6, r0
 800bb1a:	4617      	mov	r7, r2
 800bb1c:	461d      	mov	r5, r3
 800bb1e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800bb22:	460c      	mov	r4, r1
 800bb24:	b929      	cbnz	r1, 800bb32 <recv_udp+0x1e>
 800bb26:	4b22      	ldr	r3, [pc, #136]	; (800bbb0 <recv_udp+0x9c>)
 800bb28:	22b1      	movs	r2, #177	; 0xb1
 800bb2a:	4922      	ldr	r1, [pc, #136]	; (800bbb4 <recv_udp+0xa0>)
 800bb2c:	4822      	ldr	r0, [pc, #136]	; (800bbb8 <recv_udp+0xa4>)
 800bb2e:	f00a feab 	bl	8016888 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800bb32:	b98e      	cbnz	r6, 800bb58 <recv_udp+0x44>
 800bb34:	4b1e      	ldr	r3, [pc, #120]	; (800bbb0 <recv_udp+0x9c>)
 800bb36:	22b2      	movs	r2, #178	; 0xb2
 800bb38:	4920      	ldr	r1, [pc, #128]	; (800bbbc <recv_udp+0xa8>)
 800bb3a:	481f      	ldr	r0, [pc, #124]	; (800bbb8 <recv_udp+0xa4>)
 800bb3c:	f00a fea4 	bl	8016888 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800bb40:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 800bb42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800bb46:	f003 bd4b 	b.w	800f5e0 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bb4a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800bb4c:	b373      	cbz	r3, 800bbac <recv_udp+0x98>
 800bb4e:	462a      	mov	r2, r5
 800bb50:	4630      	mov	r0, r6
}
 800bb52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bb56:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800bb58:	6873      	ldr	r3, [r6, #4]
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	d005      	beq.n	800bb6a <recv_udp+0x56>
 800bb5e:	4b14      	ldr	r3, [pc, #80]	; (800bbb0 <recv_udp+0x9c>)
 800bb60:	22ba      	movs	r2, #186	; 0xba
 800bb62:	4917      	ldr	r1, [pc, #92]	; (800bbc0 <recv_udp+0xac>)
 800bb64:	4814      	ldr	r0, [pc, #80]	; (800bbb8 <recv_udp+0xa4>)
 800bb66:	f00a fe8f 	bl	8016888 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800bb6a:	f106 0810 	add.w	r8, r6, #16
 800bb6e:	4640      	mov	r0, r8
 800bb70:	f00a fa37 	bl	8015fe2 <sys_mbox_valid>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d0e3      	beq.n	800bb40 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bb78:	2006      	movs	r0, #6
 800bb7a:	f003 fb57 	bl	800f22c <memp_malloc>
  if (buf == NULL) {
 800bb7e:	4604      	mov	r4, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0dd      	beq.n	800bb40 <recv_udp+0x2c>
    buf->ptr = p;
 800bb84:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 800bb88:	b105      	cbz	r5, 800bb8c <recv_udp+0x78>
 800bb8a:	682d      	ldr	r5, [r5, #0]
 800bb8c:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800bb8e:	4621      	mov	r1, r4
    buf->port = port;
 800bb90:	f8a4 900c 	strh.w	r9, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800bb94:	4640      	mov	r0, r8
  len = p->tot_len;
 800bb96:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800bb98:	f00a f9e6 	bl	8015f68 <sys_mbox_trypost>
 800bb9c:	4601      	mov	r1, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0d3      	beq.n	800bb4a <recv_udp+0x36>
    netbuf_delete(buf);
 800bba2:	4620      	mov	r0, r4
}
 800bba4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800bba8:	f000 bfec 	b.w	800cb84 <netbuf_delete>
}
 800bbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb0:	08019469 	.word	0x08019469
 800bbb4:	0801949b 	.word	0x0801949b
 800bbb8:	08018495 	.word	0x08018495
 800bbbc:	080194bd 	.word	0x080194bd
 800bbc0:	080194dc 	.word	0x080194dc

0800bbc4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800bbc4:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800bbc6:	6844      	ldr	r4, [r0, #4]
{
 800bbc8:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f004 fa3e 	bl	801004c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	4909      	ldr	r1, [pc, #36]	; (800bbf8 <setup_tcp+0x34>)
 800bbd4:	f004 fa3e 	bl	8010054 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4908      	ldr	r1, [pc, #32]	; (800bbfc <setup_tcp+0x38>)
 800bbdc:	f004 fa52 	bl	8010084 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	4907      	ldr	r1, [pc, #28]	; (800bc00 <setup_tcp+0x3c>)
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	f004 fa81 	bl	80100ec <tcp_poll>
  tcp_err(pcb, err_tcp);
 800bbea:	4620      	mov	r0, r4
}
 800bbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 800bbf0:	4904      	ldr	r1, [pc, #16]	; (800bc04 <setup_tcp+0x40>)
 800bbf2:	f004 ba5d 	b.w	80100b0 <tcp_err>
 800bbf6:	bf00      	nop
 800bbf8:	0800c27d 	.word	0x0800c27d
 800bbfc:	0800c341 	.word	0x0800c341
 800bc00:	0800c205 	.word	0x0800c205
 800bc04:	0800bc09 	.word	0x0800bc09

0800bc08 <err_tcp>:
{
 800bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bc0e:	4604      	mov	r4, r0
 800bc10:	b930      	cbnz	r0, 800bc20 <err_tcp+0x18>
 800bc12:	4b41      	ldr	r3, [pc, #260]	; (800bd18 <err_tcp+0x110>)
 800bc14:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800bc18:	4940      	ldr	r1, [pc, #256]	; (800bd1c <err_tcp+0x114>)
 800bc1a:	4841      	ldr	r0, [pc, #260]	; (800bd20 <err_tcp+0x118>)
 800bc1c:	f00a fe34 	bl	8016888 <iprintf>
  conn->pcb.tcp = NULL;
 800bc20:	2700      	movs	r7, #0
  old_state = conn->state;
 800bc22:	7865      	ldrb	r5, [r4, #1]
  conn->pcb.tcp = NULL;
 800bc24:	6067      	str	r7, [r4, #4]
  if (old_state == NETCONN_CLOSE) {
 800bc26:	2d04      	cmp	r5, #4
  conn->state = NETCONN_NONE;
 800bc28:	7067      	strb	r7, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 800bc2a:	d162      	bne.n	800bcf2 <err_tcp+0xea>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800bc2c:	f00a fa5e 	bl	80160ec <sys_arch_protect>
 800bc30:	f994 3008 	ldrsb.w	r3, [r4, #8]
    err = ERR_OK;
 800bc34:	2600      	movs	r6, #0
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800bc36:	330c      	adds	r3, #12
 800bc38:	bfa8      	it	ge
 800bc3a:	7227      	strbge	r7, [r4, #8]
 800bc3c:	f00a fa62 	bl	8016104 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bc40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc42:	b11b      	cbz	r3, 800bc4c <err_tcp+0x44>
 800bc44:	2200      	movs	r2, #0
 800bc46:	2104      	movs	r1, #4
 800bc48:	4620      	mov	r0, r4
 800bc4a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bc4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc4e:	b11b      	cbz	r3, 800bc58 <err_tcp+0x50>
 800bc50:	2200      	movs	r2, #0
 800bc52:	4620      	mov	r0, r4
 800bc54:	4611      	mov	r1, r2
 800bc56:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bc58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc5a:	b11b      	cbz	r3, 800bc64 <err_tcp+0x5c>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2102      	movs	r1, #2
 800bc60:	4620      	mov	r0, r4
 800bc62:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bc64:	f104 0710 	add.w	r7, r4, #16
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f00a f9ba 	bl	8015fe2 <sys_mbox_valid>
 800bc6e:	b118      	cbz	r0, 800bc78 <err_tcp+0x70>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800bc70:	2100      	movs	r1, #0
 800bc72:	4638      	mov	r0, r7
 800bc74:	f00a f978 	bl	8015f68 <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bc78:	f104 0714 	add.w	r7, r4, #20
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	f00a f9b0 	bl	8015fe2 <sys_mbox_valid>
 800bc82:	b118      	cbz	r0, 800bc8c <err_tcp+0x84>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800bc84:	2100      	movs	r1, #0
 800bc86:	4638      	mov	r0, r7
 800bc88:	f00a f96e 	bl	8015f68 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800bc8c:	2d01      	cmp	r5, #1
 800bc8e:	d002      	beq.n	800bc96 <err_tcp+0x8e>
 800bc90:	3d03      	subs	r5, #3
 800bc92:	2d01      	cmp	r5, #1
 800bc94:	d833      	bhi.n	800bcfe <err_tcp+0xf6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800bc96:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bc98:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800bc9c:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800bc9e:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800bca0:	d438      	bmi.n	800bd14 <err_tcp+0x10c>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bca4:	b933      	cbnz	r3, 800bcb4 <err_tcp+0xac>
 800bca6:	4b1c      	ldr	r3, [pc, #112]	; (800bd18 <err_tcp+0x110>)
 800bca8:	f240 12b3 	movw	r2, #435	; 0x1b3
 800bcac:	491d      	ldr	r1, [pc, #116]	; (800bd24 <err_tcp+0x11c>)
 800bcae:	481c      	ldr	r0, [pc, #112]	; (800bd20 <err_tcp+0x118>)
 800bcb0:	f00a fdea 	bl	8016888 <iprintf>
      conn->current_msg->err = err;
 800bcb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bcb6:	681d      	ldr	r5, [r3, #0]
      conn->current_msg->err = err;
 800bcb8:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bcba:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f00a f9d1 	bl	8016064 <sys_sem_valid>
 800bcc2:	b930      	cbnz	r0, 800bcd2 <err_tcp+0xca>
 800bcc4:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <err_tcp+0x110>)
 800bcc6:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800bcca:	4917      	ldr	r1, [pc, #92]	; (800bd28 <err_tcp+0x120>)
 800bccc:	4814      	ldr	r0, [pc, #80]	; (800bd20 <err_tcp+0x118>)
 800bcce:	f00a fddb 	bl	8016888 <iprintf>
      conn->current_msg = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 800bcd6:	f00a fa09 	bl	80160ec <sys_arch_protect>
 800bcda:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800bcde:	330c      	adds	r3, #12
 800bce0:	bfa8      	it	ge
 800bce2:	7226      	strbge	r6, [r4, #8]
 800bce4:	f00a fa0e 	bl	8016104 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800bce8:	4628      	mov	r0, r5
}
 800bcea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800bcee:	f00a b9b3 	b.w	8016058 <sys_sem_signal>
    SYS_ARCH_SET(conn->last_err, err);
 800bcf2:	f00a f9fb 	bl	80160ec <sys_arch_protect>
 800bcf6:	7226      	strb	r6, [r4, #8]
 800bcf8:	f00a fa04 	bl	8016104 <sys_arch_unprotect>
 800bcfc:	e7a0      	b.n	800bc40 <err_tcp+0x38>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bcfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd00:	b143      	cbz	r3, 800bd14 <err_tcp+0x10c>
}
 800bd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800bd06:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <err_tcp+0x110>)
 800bd08:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bd0c:	4907      	ldr	r1, [pc, #28]	; (800bd2c <err_tcp+0x124>)
 800bd0e:	4804      	ldr	r0, [pc, #16]	; (800bd20 <err_tcp+0x118>)
 800bd10:	f00a bdba 	b.w	8016888 <iprintf>
}
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	08019469 	.word	0x08019469
 800bd1c:	080190f1 	.word	0x080190f1
 800bd20:	08018495 	.word	0x08018495
 800bd24:	080190fe 	.word	0x080190fe
 800bd28:	08019118 	.word	0x08019118
 800bd2c:	08019131 	.word	0x08019131

0800bd30 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	4616      	mov	r6, r2

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 800bd34:	4604      	mov	r4, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d04d      	beq.n	800bdd6 <lwip_netconn_do_connected+0xa6>
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800bd3a:	7843      	ldrb	r3, [r0, #1]
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	d006      	beq.n	800bd4e <lwip_netconn_do_connected+0x1e>
 800bd40:	4b26      	ldr	r3, [pc, #152]	; (800bddc <lwip_netconn_do_connected+0xac>)
 800bd42:	f44f 6293 	mov.w	r2, #1176	; 0x498
 800bd46:	4926      	ldr	r1, [pc, #152]	; (800bde0 <lwip_netconn_do_connected+0xb0>)
 800bd48:	4826      	ldr	r0, [pc, #152]	; (800bde4 <lwip_netconn_do_connected+0xb4>)
 800bd4a:	f00a fd9d 	bl	8016888 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800bd4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd50:	b94b      	cbnz	r3, 800bd66 <lwip_netconn_do_connected+0x36>
 800bd52:	7f23      	ldrb	r3, [r4, #28]
 800bd54:	075b      	lsls	r3, r3, #29
 800bd56:	d406      	bmi.n	800bd66 <lwip_netconn_do_connected+0x36>
 800bd58:	4b20      	ldr	r3, [pc, #128]	; (800bddc <lwip_netconn_do_connected+0xac>)
 800bd5a:	f240 429a 	movw	r2, #1178	; 0x49a
 800bd5e:	4922      	ldr	r1, [pc, #136]	; (800bde8 <lwip_netconn_do_connected+0xb8>)
 800bd60:	4820      	ldr	r0, [pc, #128]	; (800bde4 <lwip_netconn_do_connected+0xb4>)
 800bd62:	f00a fd91 	bl	8016888 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800bd66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bd68:	b115      	cbz	r5, 800bd70 <lwip_netconn_do_connected+0x40>
    conn->current_msg->err = err;
 800bd6a:	712e      	strb	r6, [r5, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bd6c:	682d      	ldr	r5, [r5, #0]
 800bd6e:	350c      	adds	r5, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800bd70:	7823      	ldrb	r3, [r4, #0]
 800bd72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd76:	2b10      	cmp	r3, #16
 800bd78:	d103      	bne.n	800bd82 <lwip_netconn_do_connected+0x52>
 800bd7a:	b916      	cbnz	r6, 800bd82 <lwip_netconn_do_connected+0x52>
    setup_tcp(conn);
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7ff ff21 	bl	800bbc4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800bd82:	7f20      	ldrb	r0, [r4, #28]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800bd84:	f020 0304 	bic.w	r3, r0, #4
  LWIP_ASSERT("blocking connect state error",
 800bd88:	f010 0604 	ands.w	r6, r0, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 800bd8c:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
 800bd8e:	d108      	bne.n	800bda2 <lwip_netconn_do_connected+0x72>
 800bd90:	b94d      	cbnz	r5, 800bda6 <lwip_netconn_do_connected+0x76>
 800bd92:	4b12      	ldr	r3, [pc, #72]	; (800bddc <lwip_netconn_do_connected+0xac>)
 800bd94:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800bd98:	4914      	ldr	r1, [pc, #80]	; (800bdec <lwip_netconn_do_connected+0xbc>)
 800bd9a:	4812      	ldr	r0, [pc, #72]	; (800bde4 <lwip_netconn_do_connected+0xb4>)
 800bd9c:	f00a fd74 	bl	8016888 <iprintf>
 800bda0:	e001      	b.n	800bda6 <lwip_netconn_do_connected+0x76>
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	d1f5      	bne.n	800bd92 <lwip_netconn_do_connected+0x62>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800bda6:	2700      	movs	r7, #0
 800bda8:	6267      	str	r7, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 800bdaa:	7067      	strb	r7, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800bdac:	f00a f99e 	bl	80160ec <sys_arch_protect>
 800bdb0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	bfa8      	it	ge
 800bdb8:	7227      	strbge	r7, [r4, #8]
 800bdba:	f00a f9a3 	bl	8016104 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bdbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bdc0:	b11b      	cbz	r3, 800bdca <lwip_netconn_do_connected+0x9a>
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2102      	movs	r1, #2
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	4798      	blx	r3

  if (was_blocking) {
 800bdca:	b916      	cbnz	r6, 800bdd2 <lwip_netconn_do_connected+0xa2>
    sys_sem_signal(op_completed_sem);
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f00a f943 	bl	8016058 <sys_sem_signal>
  }
  return ERR_OK;
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e001      	b.n	800bdda <lwip_netconn_do_connected+0xaa>
    return ERR_VAL;
 800bdd6:	f06f 0005 	mvn.w	r0, #5
}
 800bdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bddc:	08019469 	.word	0x08019469
 800bde0:	080191d8 	.word	0x080191d8
 800bde4:	08018495 	.word	0x08018495
 800bde8:	080191f7 	.word	0x080191f7
 800bdec:	08019234 	.word	0x08019234

0800bdf0 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800bdf0:	68d3      	ldr	r3, [r2, #12]
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800bdf2:	b921      	cbnz	r1, 800bdfe <lwip_netconn_do_dns_found+0xe>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800bdf4:	21fa      	movs	r1, #250	; 0xfa
 800bdf6:	7019      	strb	r1, [r3, #0]
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800bdf8:	6890      	ldr	r0, [r2, #8]
 800bdfa:	f00a b92d 	b.w	8016058 <sys_sem_signal>
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800bdfe:	2000      	movs	r0, #0
 800be00:	7018      	strb	r0, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800be02:	6853      	ldr	r3, [r2, #4]
 800be04:	6809      	ldr	r1, [r1, #0]
 800be06:	6019      	str	r1, [r3, #0]
 800be08:	e7f6      	b.n	800bdf8 <lwip_netconn_do_dns_found+0x8>
	...

0800be0c <lwip_netconn_do_writemore>:
{
 800be0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be10:	460f      	mov	r7, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800be12:	4604      	mov	r4, r0
 800be14:	b930      	cbnz	r0, 800be24 <lwip_netconn_do_writemore+0x18>
 800be16:	4b74      	ldr	r3, [pc, #464]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800be18:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800be1c:	4973      	ldr	r1, [pc, #460]	; (800bfec <lwip_netconn_do_writemore+0x1e0>)
 800be1e:	4874      	ldr	r0, [pc, #464]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800be20:	f00a fd32 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800be24:	7863      	ldrb	r3, [r4, #1]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d006      	beq.n	800be38 <lwip_netconn_do_writemore+0x2c>
 800be2a:	4b6f      	ldr	r3, [pc, #444]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800be2c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800be30:	4970      	ldr	r1, [pc, #448]	; (800bff4 <lwip_netconn_do_writemore+0x1e8>)
 800be32:	486f      	ldr	r0, [pc, #444]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800be34:	f00a fd28 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800be38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3a:	b933      	cbnz	r3, 800be4a <lwip_netconn_do_writemore+0x3e>
 800be3c:	4b6a      	ldr	r3, [pc, #424]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800be3e:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800be42:	496d      	ldr	r1, [pc, #436]	; (800bff8 <lwip_netconn_do_writemore+0x1ec>)
 800be44:	486a      	ldr	r0, [pc, #424]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800be46:	f00a fd1f 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800be4a:	6863      	ldr	r3, [r4, #4]
 800be4c:	b933      	cbnz	r3, 800be5c <lwip_netconn_do_writemore+0x50>
 800be4e:	4b66      	ldr	r3, [pc, #408]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800be50:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800be54:	4969      	ldr	r1, [pc, #420]	; (800bffc <lwip_netconn_do_writemore+0x1f0>)
 800be56:	4866      	ldr	r0, [pc, #408]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800be58:	f00a fd16 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800be5c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	429a      	cmp	r2, r3
 800be64:	d306      	bcc.n	800be74 <lwip_netconn_do_writemore+0x68>
 800be66:	4b60      	ldr	r3, [pc, #384]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800be68:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800be6c:	4964      	ldr	r1, [pc, #400]	; (800c000 <lwip_netconn_do_writemore+0x1f4>)
 800be6e:	4860      	ldr	r0, [pc, #384]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800be70:	f00a fd0a 	bl	8016888 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 800be74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800be76:	7f22      	ldrb	r2, [r4, #28]
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800be78:	6899      	ldr	r1, [r3, #8]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800be7a:	0790      	lsls	r0, r2, #30
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800be7c:	6a22      	ldr	r2, [r4, #32]
  apiflags = conn->current_msg->msg.w.apiflags;
 800be7e:	7c1e      	ldrb	r6, [r3, #16]
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800be80:	eb01 0902 	add.w	r9, r1, r2
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800be84:	68d9      	ldr	r1, [r3, #12]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800be86:	bf58      	it	pl
 800be88:	f3c6 0880 	ubfxpl	r8, r6, #2, #1
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800be8c:	eba1 0302 	sub.w	r3, r1, r2
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800be90:	bf48      	it	mi
 800be92:	f04f 0801 	movmi.w	r8, #1
    if (diff > 0xffffUL) { /* max_u16_t */
 800be96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
      len = 0xffff;
 800be9a:	bf28      	it	cs
 800be9c:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    available = tcp_sndbuf(conn->pcb.tcp);
 800bea0:	6860      	ldr	r0, [r4, #4]
      len = (u16_t)diff;
 800bea2:	bf38      	it	cc
 800bea4:	b29b      	uxthcc	r3, r3
    available = tcp_sndbuf(conn->pcb.tcp);
 800bea6:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
      apiflags |= TCP_WRITE_FLAG_MORE;
 800beaa:	bf28      	it	cs
 800beac:	f046 0602 	orrcs.w	r6, r6, #2
    if (available < len) {
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	d95f      	bls.n	800bf74 <lwip_netconn_do_writemore+0x168>
      if (dontblock) {
 800beb4:	f1b8 0f00 	cmp.w	r8, #0
 800beb8:	d059      	beq.n	800bf6e <lwip_netconn_do_writemore+0x162>
        if (!len) {
 800beba:	2d00      	cmp	r5, #0
 800bebc:	d05c      	beq.n	800bf78 <lwip_netconn_do_writemore+0x16c>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800bebe:	442a      	add	r2, r5
 800bec0:	4291      	cmp	r1, r2
 800bec2:	d206      	bcs.n	800bed2 <lwip_netconn_do_writemore+0xc6>
 800bec4:	4b48      	ldr	r3, [pc, #288]	; (800bfe8 <lwip_netconn_do_writemore+0x1dc>)
 800bec6:	f240 6213 	movw	r2, #1555	; 0x613
 800beca:	494e      	ldr	r1, [pc, #312]	; (800c004 <lwip_netconn_do_writemore+0x1f8>)
 800becc:	4848      	ldr	r0, [pc, #288]	; (800bff0 <lwip_netconn_do_writemore+0x1e4>)
 800bece:	f00a fcdb 	bl	8016888 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bed2:	4633      	mov	r3, r6
 800bed4:	462a      	mov	r2, r5
 800bed6:	4649      	mov	r1, r9
 800bed8:	6860      	ldr	r0, [r4, #4]
 800beda:	f006 fa3f 	bl	801235c <tcp_write>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b01      	cmp	r3, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bee4:	4606      	mov	r6, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bee6:	d869      	bhi.n	800bfbc <lwip_netconn_do_writemore+0x1b0>
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800bee8:	f1b8 0f00 	cmp.w	r8, #0
 800beec:	d047      	beq.n	800bf7e <lwip_netconn_do_writemore+0x172>
 800beee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	429d      	cmp	r5, r3
 800bef4:	d243      	bcs.n	800bf7e <lwip_netconn_do_writemore+0x172>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800bef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bef8:	b11b      	cbz	r3, 800bf02 <lwip_netconn_do_writemore+0xf6>
 800befa:	462a      	mov	r2, r5
 800befc:	2103      	movs	r1, #3
 800befe:	4620      	mov	r0, r4
 800bf00:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bf02:	7f23      	ldrb	r3, [r4, #28]
 800bf04:	f043 0310 	orr.w	r3, r3, #16
 800bf08:	7723      	strb	r3, [r4, #28]
    if (err == ERR_OK) {
 800bf0a:	2e00      	cmp	r6, #0
 800bf0c:	d14b      	bne.n	800bfa6 <lwip_netconn_do_writemore+0x19a>
      conn->write_offset += len;
 800bf0e:	6a23      	ldr	r3, [r4, #32]
 800bf10:	441d      	add	r5, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800bf12:	6a63      	ldr	r3, [r4, #36]	; 0x24
      conn->write_offset += len;
 800bf14:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800bf16:	68da      	ldr	r2, [r3, #12]
 800bf18:	4295      	cmp	r5, r2
 800bf1a:	d002      	beq.n	800bf22 <lwip_netconn_do_writemore+0x116>
 800bf1c:	f1b8 0f00 	cmp.w	r8, #0
 800bf20:	d03f      	beq.n	800bfa2 <lwip_netconn_do_writemore+0x196>
        conn->current_msg->msg.w.len = conn->write_offset;
 800bf22:	60dd      	str	r5, [r3, #12]
        write_finished = 1;
 800bf24:	2501      	movs	r5, #1
      out_err = tcp_output(conn->pcb.tcp);
 800bf26:	6860      	ldr	r0, [r4, #4]
 800bf28:	f006 fd90 	bl	8012a4c <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800bf2c:	f110 0f0c 	cmn.w	r0, #12
 800bf30:	db01      	blt.n	800bf36 <lwip_netconn_do_writemore+0x12a>
 800bf32:	1d01      	adds	r1, r0, #4
 800bf34:	d153      	bne.n	800bfde <lwip_netconn_do_writemore+0x1d2>
        conn->current_msg->msg.w.len = 0;
 800bf36:	2200      	movs	r2, #0
      out_err = tcp_output(conn->pcb.tcp);
 800bf38:	4606      	mov	r6, r0
        conn->current_msg->msg.w.len = 0;
 800bf3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3c:	60da      	str	r2, [r3, #12]
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bf3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf40:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800bf42:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800bf44:	2300      	movs	r3, #0
    conn->write_offset = 0;
 800bf46:	e9c4 3308 	strd	r3, r3, [r4, #32]
    conn->state = NETCONN_NONE;
 800bf4a:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800bf4c:	f00a f8ce 	bl	80160ec <sys_arch_protect>
 800bf50:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800bf54:	330c      	adds	r3, #12
 800bf56:	bfa8      	it	ge
 800bf58:	7226      	strbge	r6, [r4, #8]
 800bf5a:	f00a f8d3 	bl	8016104 <sys_arch_unprotect>
    if (delayed)
 800bf5e:	2f00      	cmp	r7, #0
 800bf60:	d040      	beq.n	800bfe4 <lwip_netconn_do_writemore+0x1d8>
      sys_sem_signal(op_completed_sem);
 800bf62:	f105 000c 	add.w	r0, r5, #12
 800bf66:	f00a f877 	bl	8016058 <sys_sem_signal>
  return ERR_OK;
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e02f      	b.n	800bfce <lwip_netconn_do_writemore+0x1c2>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bf6e:	f046 0602 	orr.w	r6, r6, #2
 800bf72:	e7a4      	b.n	800bebe <lwip_netconn_do_writemore+0xb2>
 800bf74:	461d      	mov	r5, r3
 800bf76:	e7a2      	b.n	800bebe <lwip_netconn_do_writemore+0xb2>
          err = ERR_WOULDBLOCK;
 800bf78:	f06f 0606 	mvn.w	r6, #6
 800bf7c:	e7b7      	b.n	800beee <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bf7e:	6863      	ldr	r3, [r4, #4]
 800bf80:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bf88:	d303      	bcc.n	800bf92 <lwip_netconn_do_writemore+0x186>
 800bf8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf8e:	2b04      	cmp	r3, #4
 800bf90:	d9bb      	bls.n	800bf0a <lwip_netconn_do_writemore+0xfe>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800bf92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0b8      	beq.n	800bf0a <lwip_netconn_do_writemore+0xfe>
 800bf98:	462a      	mov	r2, r5
 800bf9a:	2103      	movs	r1, #3
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4798      	blx	r3
 800bfa0:	e7b3      	b.n	800bf0a <lwip_netconn_do_writemore+0xfe>
  u8_t write_finished = 0;
 800bfa2:	4635      	mov	r5, r6
 800bfa4:	e7bf      	b.n	800bf26 <lwip_netconn_do_writemore+0x11a>
    } else if (err == ERR_MEM) {
 800bfa6:	1c72      	adds	r2, r6, #1
 800bfa8:	d108      	bne.n	800bfbc <lwip_netconn_do_writemore+0x1b0>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bfaa:	6860      	ldr	r0, [r4, #4]
 800bfac:	f006 fd4e 	bl	8012a4c <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800bfb0:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bfb4:	4606      	mov	r6, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800bfb6:	db01      	blt.n	800bfbc <lwip_netconn_do_writemore+0x1b0>
 800bfb8:	1d03      	adds	r3, r0, #4
 800bfba:	d103      	bne.n	800bfc4 <lwip_netconn_do_writemore+0x1b8>
      conn->current_msg->msg.w.len = 0;
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc0:	60da      	str	r2, [r3, #12]
 800bfc2:	e7bc      	b.n	800bf3e <lwip_netconn_do_writemore+0x132>
      } else if (dontblock) {
 800bfc4:	f1b8 0f00 	cmp.w	r8, #0
 800bfc8:	d103      	bne.n	800bfd2 <lwip_netconn_do_writemore+0x1c6>
    return ERR_MEM;
 800bfca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800bfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        conn->current_msg->msg.w.len = 0;
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
        err = ERR_WOULDBLOCK;
 800bfd6:	f06f 0606 	mvn.w	r6, #6
        conn->current_msg->msg.w.len = 0;
 800bfda:	60da      	str	r2, [r3, #12]
 800bfdc:	e7af      	b.n	800bf3e <lwip_netconn_do_writemore+0x132>
  if (write_finished) {
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	d1ad      	bne.n	800bf3e <lwip_netconn_do_writemore+0x132>
 800bfe2:	e7f2      	b.n	800bfca <lwip_netconn_do_writemore+0x1be>
  return ERR_OK;
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	e7f2      	b.n	800bfce <lwip_netconn_do_writemore+0x1c2>
 800bfe8:	08019469 	.word	0x08019469
 800bfec:	080190f1 	.word	0x080190f1
 800bff0:	08018495 	.word	0x08018495
 800bff4:	080192b0 	.word	0x080192b0
 800bff8:	080190fe 	.word	0x080190fe
 800bffc:	080192cd 	.word	0x080192cd
 800c000:	080192e3 	.word	0x080192e3
 800c004:	08019315 	.word	0x08019315

0800c008 <lwip_netconn_do_close_internal>:
{
 800c008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c00e:	4604      	mov	r4, r0
 800c010:	b930      	cbnz	r0, 800c020 <lwip_netconn_do_close_internal+0x18>
 800c012:	4b71      	ldr	r3, [pc, #452]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c014:	f240 3243 	movw	r2, #835	; 0x343
 800c018:	4970      	ldr	r1, [pc, #448]	; (800c1dc <lwip_netconn_do_close_internal+0x1d4>)
 800c01a:	4871      	ldr	r0, [pc, #452]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c01c:	f00a fc34 	bl	8016888 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c020:	7823      	ldrb	r3, [r4, #0]
 800c022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c026:	2b10      	cmp	r3, #16
 800c028:	d006      	beq.n	800c038 <lwip_netconn_do_close_internal+0x30>
 800c02a:	4b6b      	ldr	r3, [pc, #428]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c02c:	f44f 7251 	mov.w	r2, #836	; 0x344
 800c030:	496c      	ldr	r1, [pc, #432]	; (800c1e4 <lwip_netconn_do_close_internal+0x1dc>)
 800c032:	486b      	ldr	r0, [pc, #428]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c034:	f00a fc28 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c038:	7863      	ldrb	r3, [r4, #1]
 800c03a:	2b04      	cmp	r3, #4
 800c03c:	d006      	beq.n	800c04c <lwip_netconn_do_close_internal+0x44>
 800c03e:	4b66      	ldr	r3, [pc, #408]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c040:	f240 3245 	movw	r2, #837	; 0x345
 800c044:	4968      	ldr	r1, [pc, #416]	; (800c1e8 <lwip_netconn_do_close_internal+0x1e0>)
 800c046:	4866      	ldr	r0, [pc, #408]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c048:	f00a fc1e 	bl	8016888 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c04c:	6863      	ldr	r3, [r4, #4]
 800c04e:	b933      	cbnz	r3, 800c05e <lwip_netconn_do_close_internal+0x56>
 800c050:	4b61      	ldr	r3, [pc, #388]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c052:	f240 3246 	movw	r2, #838	; 0x346
 800c056:	4965      	ldr	r1, [pc, #404]	; (800c1ec <lwip_netconn_do_close_internal+0x1e4>)
 800c058:	4861      	ldr	r0, [pc, #388]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c05a:	f00a fc15 	bl	8016888 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c060:	b933      	cbnz	r3, 800c070 <lwip_netconn_do_close_internal+0x68>
 800c062:	4b5d      	ldr	r3, [pc, #372]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c064:	f240 3247 	movw	r2, #839	; 0x347
 800c068:	4961      	ldr	r1, [pc, #388]	; (800c1f0 <lwip_netconn_do_close_internal+0x1e8>)
 800c06a:	485d      	ldr	r0, [pc, #372]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c06c:	f00a fc0c 	bl	8016888 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800c070:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tpcb = conn->pcb.tcp;
 800c072:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 800c074:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 800c076:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800c078:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800c07c:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 800c080:	d00f      	beq.n	800c0a2 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 800c082:	f1b9 0f00 	cmp.w	r9, #0
 800c086:	d005      	beq.n	800c094 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 800c088:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800c08a:	1f5a      	subs	r2, r3, #5
 800c08c:	2a01      	cmp	r2, #1
 800c08e:	d908      	bls.n	800c0a2 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 800c090:	2b08      	cmp	r3, #8
 800c092:	d006      	beq.n	800c0a2 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c094:	f1b8 0f00 	cmp.w	r8, #0
 800c098:	d016      	beq.n	800c0c8 <lwip_netconn_do_close_internal+0xc0>
 800c09a:	7eaf      	ldrb	r7, [r5, #26]
 800c09c:	f017 0710 	ands.w	r7, r7, #16
 800c0a0:	d004      	beq.n	800c0ac <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 800c0a2:	2100      	movs	r1, #0
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f003 ffd1 	bl	801004c <tcp_arg>
 800c0aa:	2701      	movs	r7, #1
  if (tpcb->state == LISTEN) {
 800c0ac:	7d2b      	ldrb	r3, [r5, #20]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d10c      	bne.n	800c0cc <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f004 f813 	bl	80100e0 <tcp_accept>
  if (close) {
 800c0ba:	bb27      	cbnz	r7, 800c106 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c0bc:	4642      	mov	r2, r8
 800c0be:	4649      	mov	r1, r9
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f004 fbc3 	bl	801084c <tcp_shutdown>
 800c0c6:	e021      	b.n	800c10c <lwip_netconn_do_close_internal+0x104>
 800c0c8:	4647      	mov	r7, r8
 800c0ca:	e7ef      	b.n	800c0ac <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 800c0cc:	f1b9 0f00 	cmp.w	r9, #0
 800c0d0:	d007      	beq.n	800c0e2 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f003 ffbd 	bl	8010054 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c0da:	2100      	movs	r1, #0
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f003 ffff 	bl	80100e0 <tcp_accept>
    if (shut_tx) {
 800c0e2:	f1b8 0f00 	cmp.w	r8, #0
 800c0e6:	d003      	beq.n	800c0f0 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f003 ffca 	bl	8010084 <tcp_sent>
    if (close) {
 800c0f0:	2f00      	cmp	r7, #0
 800c0f2:	d0e3      	beq.n	800c0bc <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	f003 fff7 	bl	80100ec <tcp_poll>
      tcp_err(tpcb, NULL);
 800c0fe:	2100      	movs	r1, #0
 800c100:	4628      	mov	r0, r5
 800c102:	f003 ffd5 	bl	80100b0 <tcp_err>
      err = tcp_close(tpcb);
 800c106:	4628      	mov	r0, r5
 800c108:	f004 fafe 	bl	8010708 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c10c:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800c10e:	b160      	cbz	r0, 800c12a <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d10a      	bne.n	800c12a <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c116:	f893 b009 	ldrb.w	fp, [r3, #9]
 800c11a:	f1bb 0f00 	cmp.w	fp, #0
 800c11e:	d139      	bne.n	800c194 <lwip_netconn_do_close_internal+0x18c>
        if (close) {
 800c120:	b11f      	cbz	r7, 800c12a <lwip_netconn_do_close_internal+0x122>
          tcp_abort(tpcb);
 800c122:	4628      	mov	r0, r5
 800c124:	f004 fc2e 	bl	8010984 <tcp_abort>
          err = ERR_OK;
 800c128:	465e      	mov	r6, fp
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c12c:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800c12e:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800c130:	2300      	movs	r3, #0
 800c132:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800c134:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 800c136:	b9ce      	cbnz	r6, 800c16c <lwip_netconn_do_close_internal+0x164>
      if (close) {
 800c138:	b137      	cbz	r7, 800c148 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c13a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 800c13c:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c13e:	b11b      	cbz	r3, 800c148 <lwip_netconn_do_close_internal+0x140>
 800c140:	4632      	mov	r2, r6
 800c142:	2104      	movs	r1, #4
 800c144:	4620      	mov	r0, r4
 800c146:	4798      	blx	r3
      if (shut_rx) {
 800c148:	f1b9 0f00 	cmp.w	r9, #0
 800c14c:	d005      	beq.n	800c15a <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c14e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c150:	b163      	cbz	r3, 800c16c <lwip_netconn_do_close_internal+0x164>
 800c152:	2200      	movs	r2, #0
 800c154:	4620      	mov	r0, r4
 800c156:	4611      	mov	r1, r2
 800c158:	4798      	blx	r3
      if (shut_tx) {
 800c15a:	f1b8 0f00 	cmp.w	r8, #0
 800c15e:	d005      	beq.n	800c16c <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c162:	b11b      	cbz	r3, 800c16c <lwip_netconn_do_close_internal+0x164>
 800c164:	2200      	movs	r2, #0
 800c166:	2102      	movs	r1, #2
 800c168:	4620      	mov	r0, r4
 800c16a:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 800c16c:	f009 ffbe 	bl	80160ec <sys_arch_protect>
 800c170:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800c174:	330c      	adds	r3, #12
 800c176:	bfa8      	it	ge
 800c178:	7226      	strbge	r6, [r4, #8]
 800c17a:	f009 ffc3 	bl	8016104 <sys_arch_unprotect>
    if (delayed)
 800c17e:	f1ba 0f00 	cmp.w	sl, #0
 800c182:	d026      	beq.n	800c1d2 <lwip_netconn_do_close_internal+0x1ca>
      sys_sem_signal(op_completed_sem);
 800c184:	f105 000c 	add.w	r0, r5, #12
 800c188:	f009 ff66 	bl	8016058 <sys_sem_signal>
    return ERR_OK;
 800c18c:	2600      	movs	r6, #0
}
 800c18e:	4630      	mov	r0, r6
 800c190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800c194:	7d2b      	ldrb	r3, [r5, #20]
 800c196:	2b01      	cmp	r3, #1
 800c198:	d106      	bne.n	800c1a8 <lwip_netconn_do_close_internal+0x1a0>
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <lwip_netconn_do_close_internal+0x1d0>)
 800c19c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c1a0:	4914      	ldr	r1, [pc, #80]	; (800c1f4 <lwip_netconn_do_close_internal+0x1ec>)
 800c1a2:	480f      	ldr	r0, [pc, #60]	; (800c1e0 <lwip_netconn_do_close_internal+0x1d8>)
 800c1a4:	f00a fb70 	bl	8016888 <iprintf>
    if (shut_tx) {
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	d003      	beq.n	800c1b6 <lwip_netconn_do_close_internal+0x1ae>
      tcp_sent(tpcb, sent_tcp);
 800c1ae:	4912      	ldr	r1, [pc, #72]	; (800c1f8 <lwip_netconn_do_close_internal+0x1f0>)
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f003 ff67 	bl	8010084 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	4910      	ldr	r1, [pc, #64]	; (800c1fc <lwip_netconn_do_close_internal+0x1f4>)
 800c1bc:	f003 ff96 	bl	80100ec <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	490f      	ldr	r1, [pc, #60]	; (800c200 <lwip_netconn_do_close_internal+0x1f8>)
 800c1c4:	f003 ff74 	bl	80100b0 <tcp_err>
    tcp_arg(tpcb, conn);
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f003 ff3e 	bl	801004c <tcp_arg>
  return err;
 800c1d0:	e7dd      	b.n	800c18e <lwip_netconn_do_close_internal+0x186>
    return ERR_OK;
 800c1d2:	4656      	mov	r6, sl
 800c1d4:	e7db      	b.n	800c18e <lwip_netconn_do_close_internal+0x186>
 800c1d6:	bf00      	nop
 800c1d8:	08019469 	.word	0x08019469
 800c1dc:	080190a6 	.word	0x080190a6
 800c1e0:	08018495 	.word	0x08018495
 800c1e4:	0801914b 	.word	0x0801914b
 800c1e8:	08019169 	.word	0x08019169
 800c1ec:	0801918d 	.word	0x0801918d
 800c1f0:	080190fe 	.word	0x080190fe
 800c1f4:	080191a0 	.word	0x080191a0
 800c1f8:	0800c341 	.word	0x0800c341
 800c1fc:	0800c205 	.word	0x0800c205
 800c200:	0800bc09 	.word	0x0800bc09

0800c204 <poll_tcp>:
{
 800c204:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c206:	4604      	mov	r4, r0
 800c208:	b930      	cbnz	r0, 800c218 <poll_tcp+0x14>
 800c20a:	4b19      	ldr	r3, [pc, #100]	; (800c270 <poll_tcp+0x6c>)
 800c20c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c210:	4918      	ldr	r1, [pc, #96]	; (800c274 <poll_tcp+0x70>)
 800c212:	4819      	ldr	r0, [pc, #100]	; (800c278 <poll_tcp+0x74>)
 800c214:	f00a fb38 	bl	8016888 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 800c218:	7861      	ldrb	r1, [r4, #1]
 800c21a:	2901      	cmp	r1, #1
 800c21c:	d11b      	bne.n	800c256 <poll_tcp+0x52>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c21e:	4620      	mov	r0, r4
 800c220:	f7ff fdf4 	bl	800be0c <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c224:	7f23      	ldrb	r3, [r4, #28]
 800c226:	06da      	lsls	r2, r3, #27
 800c228:	d513      	bpl.n	800c252 <poll_tcp+0x4e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c22a:	6862      	ldr	r2, [r4, #4]
 800c22c:	b18a      	cbz	r2, 800c252 <poll_tcp+0x4e>
 800c22e:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 800c232:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 800c236:	d30c      	bcc.n	800c252 <poll_tcp+0x4e>
 800c238:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 800c23c:	2a04      	cmp	r2, #4
 800c23e:	d808      	bhi.n	800c252 <poll_tcp+0x4e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800c240:	f023 0310 	bic.w	r3, r3, #16
 800c244:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c246:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c248:	b11b      	cbz	r3, 800c252 <poll_tcp+0x4e>
 800c24a:	2200      	movs	r2, #0
 800c24c:	2102      	movs	r1, #2
 800c24e:	4620      	mov	r0, r4
 800c250:	4798      	blx	r3
}
 800c252:	2000      	movs	r0, #0
 800c254:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 800c256:	2904      	cmp	r1, #4
 800c258:	d1e4      	bne.n	800c224 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c25a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c25c:	b11a      	cbz	r2, 800c266 <poll_tcp+0x62>
 800c25e:	7a53      	ldrb	r3, [r2, #9]
 800c260:	b10b      	cbz	r3, 800c266 <poll_tcp+0x62>
      conn->current_msg->msg.sd.polls_left--;
 800c262:	3b01      	subs	r3, #1
 800c264:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c266:	2101      	movs	r1, #1
 800c268:	4620      	mov	r0, r4
 800c26a:	f7ff fecd 	bl	800c008 <lwip_netconn_do_close_internal>
 800c26e:	e7d9      	b.n	800c224 <poll_tcp+0x20>
 800c270:	08019469 	.word	0x08019469
 800c274:	080190f1 	.word	0x080190f1
 800c278:	08018495 	.word	0x08018495

0800c27c <recv_tcp>:
{
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c280:	4605      	mov	r5, r0
 800c282:	4616      	mov	r6, r2
 800c284:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c286:	460f      	mov	r7, r1
 800c288:	b929      	cbnz	r1, 800c296 <recv_tcp+0x1a>
 800c28a:	4b28      	ldr	r3, [pc, #160]	; (800c32c <recv_tcp+0xb0>)
 800c28c:	22f9      	movs	r2, #249	; 0xf9
 800c28e:	4928      	ldr	r1, [pc, #160]	; (800c330 <recv_tcp+0xb4>)
 800c290:	4828      	ldr	r0, [pc, #160]	; (800c334 <recv_tcp+0xb8>)
 800c292:	f00a faf9 	bl	8016888 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c296:	bb9d      	cbnz	r5, 800c300 <recv_tcp+0x84>
 800c298:	4b24      	ldr	r3, [pc, #144]	; (800c32c <recv_tcp+0xb0>)
 800c29a:	22fa      	movs	r2, #250	; 0xfa
 800c29c:	4926      	ldr	r1, [pc, #152]	; (800c338 <recv_tcp+0xbc>)
 800c29e:	4825      	ldr	r0, [pc, #148]	; (800c334 <recv_tcp+0xb8>)
 800c2a0:	f00a faf2 	bl	8016888 <iprintf>
    return ERR_VAL;
 800c2a4:	f06f 0405 	mvn.w	r4, #5
}
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcp_recved(pcb, p->tot_len);
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	8931      	ldrh	r1, [r6, #8]
 800c2b2:	f003 fe5f 	bl	800ff74 <tcp_recved>
      pbuf_free(p);
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f003 f992 	bl	800f5e0 <pbuf_free>
 800c2bc:	e7f4      	b.n	800c2a8 <recv_tcp+0x2c>
  if (err != ERR_OK) {
 800c2be:	f1b8 0f00 	cmp.w	r8, #0
 800c2c2:	d009      	beq.n	800c2d8 <recv_tcp+0x5c>
    NETCONN_SET_SAFE_ERR(conn, err);
 800c2c4:	f009 ff12 	bl	80160ec <sys_arch_protect>
 800c2c8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	bfa8      	it	ge
 800c2d0:	f885 8008 	strbge.w	r8, [r5, #8]
 800c2d4:	f009 ff16 	bl	8016104 <sys_arch_unprotect>
  if (p != NULL) {
 800c2d8:	b16e      	cbz	r6, 800c2f6 <recv_tcp+0x7a>
    len = p->tot_len;
 800c2da:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4648      	mov	r0, r9
 800c2e0:	f009 fe42 	bl	8015f68 <sys_mbox_trypost>
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	b940      	cbnz	r0, 800c2fa <recv_tcp+0x7e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c2e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c2ea:	b1eb      	cbz	r3, 800c328 <recv_tcp+0xac>
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	463a      	mov	r2, r7
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	4798      	blx	r3
 800c2f4:	e7d8      	b.n	800c2a8 <recv_tcp+0x2c>
    len = 0;
 800c2f6:	4637      	mov	r7, r6
 800c2f8:	e7f0      	b.n	800c2dc <recv_tcp+0x60>
    return ERR_MEM;
 800c2fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2fe:	e7d3      	b.n	800c2a8 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c300:	686b      	ldr	r3, [r5, #4]
 800c302:	42bb      	cmp	r3, r7
 800c304:	d006      	beq.n	800c314 <recv_tcp+0x98>
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <recv_tcp+0xb0>)
 800c308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c30c:	490b      	ldr	r1, [pc, #44]	; (800c33c <recv_tcp+0xc0>)
 800c30e:	4809      	ldr	r0, [pc, #36]	; (800c334 <recv_tcp+0xb8>)
 800c310:	f00a faba 	bl	8016888 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800c314:	f105 0910 	add.w	r9, r5, #16
 800c318:	4648      	mov	r0, r9
 800c31a:	f009 fe62 	bl	8015fe2 <sys_mbox_valid>
 800c31e:	4604      	mov	r4, r0
 800c320:	2800      	cmp	r0, #0
 800c322:	d1cc      	bne.n	800c2be <recv_tcp+0x42>
    if (p != NULL) {
 800c324:	2e00      	cmp	r6, #0
 800c326:	d1c2      	bne.n	800c2ae <recv_tcp+0x32>
    return ERR_OK;
 800c328:	2400      	movs	r4, #0
 800c32a:	e7bd      	b.n	800c2a8 <recv_tcp+0x2c>
 800c32c:	08019469 	.word	0x08019469
 800c330:	0801940a 	.word	0x0801940a
 800c334:	08018495 	.word	0x08018495
 800c338:	0801942c 	.word	0x0801942c
 800c33c:	0801944b 	.word	0x0801944b

0800c340 <sent_tcp>:
{
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c344:	4604      	mov	r4, r0
 800c346:	b970      	cbnz	r0, 800c366 <sent_tcp+0x26>
 800c348:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <sent_tcp+0x60>)
 800c34a:	f240 1261 	movw	r2, #353	; 0x161
 800c34e:	4915      	ldr	r1, [pc, #84]	; (800c3a4 <sent_tcp+0x64>)
 800c350:	4815      	ldr	r0, [pc, #84]	; (800c3a8 <sent_tcp+0x68>)
 800c352:	f00a fa99 	bl	8016888 <iprintf>
}
 800c356:	2000      	movs	r0, #0
 800c358:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 800c35a:	2904      	cmp	r1, #4
 800c35c:	d108      	bne.n	800c370 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c35e:	2101      	movs	r1, #1
 800c360:	f7ff fe52 	bl	800c008 <lwip_netconn_do_close_internal>
 800c364:	e004      	b.n	800c370 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 800c366:	7841      	ldrb	r1, [r0, #1]
 800c368:	2901      	cmp	r1, #1
 800c36a:	d1f6      	bne.n	800c35a <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c36c:	f7ff fd4e 	bl	800be0c <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c370:	6863      	ldr	r3, [r4, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0ef      	beq.n	800c356 <sent_tcp+0x16>
 800c376:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c37a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c37e:	d3ea      	bcc.n	800c356 <sent_tcp+0x16>
 800c380:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c384:	2b04      	cmp	r3, #4
 800c386:	d8e6      	bhi.n	800c356 <sent_tcp+0x16>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800c388:	7f23      	ldrb	r3, [r4, #28]
 800c38a:	f023 0310 	bic.w	r3, r3, #16
 800c38e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0df      	beq.n	800c356 <sent_tcp+0x16>
 800c396:	462a      	mov	r2, r5
 800c398:	2102      	movs	r1, #2
 800c39a:	4620      	mov	r0, r4
 800c39c:	4798      	blx	r3
  return ERR_OK;
 800c39e:	e7da      	b.n	800c356 <sent_tcp+0x16>
 800c3a0:	08019469 	.word	0x08019469
 800c3a4:	080190f1 	.word	0x080190f1
 800c3a8:	08018495 	.word	0x08018495

0800c3ac <lwip_netconn_do_newconn>:
{
 800c3ac:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800c3ae:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800c3b0:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 800c3b2:	7103      	strb	r3, [r0, #4]
{
 800c3b4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800c3b6:	6868      	ldr	r0, [r5, #4]
 800c3b8:	bb28      	cbnz	r0, 800c406 <lwip_netconn_do_newconn+0x5a>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800c3ba:	782b      	ldrb	r3, [r5, #0]
 800c3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3c0:	2b10      	cmp	r3, #16
 800c3c2:	d014      	beq.n	800c3ee <lwip_netconn_do_newconn+0x42>
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d11c      	bne.n	800c402 <lwip_netconn_do_newconn+0x56>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c3c8:	f007 f916 	bl	80135f8 <udp_new_ip_type>
    if (msg->conn->pcb.udp != NULL) {
 800c3cc:	6822      	ldr	r2, [r4, #0]
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c3ce:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 800c3d0:	6850      	ldr	r0, [r2, #4]
 800c3d2:	b150      	cbz	r0, 800c3ea <lwip_netconn_do_newconn+0x3e>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c3d4:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c3d6:	4914      	ldr	r1, [pc, #80]	; (800c428 <lwip_netconn_do_newconn+0x7c>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c3d8:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c3da:	bf04      	itt	eq
 800c3dc:	2301      	moveq	r3, #1
 800c3de:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c3e0:	f007 f8e0 	bl	80135a4 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 800c3e4:	6823      	ldr	r3, [r4, #0]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	b96b      	cbnz	r3, 800c406 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800c3ea:	23ff      	movs	r3, #255	; 0xff
 800c3ec:	e00a      	b.n	800c404 <lwip_netconn_do_newconn+0x58>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c3ee:	f004 fb87 	bl	8010b00 <tcp_new_ip_type>
 800c3f2:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	6843      	ldr	r3, [r0, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d0f6      	beq.n	800c3ea <lwip_netconn_do_newconn+0x3e>
      setup_tcp(msg->conn);
 800c3fc:	f7ff fbe2 	bl	800bbc4 <setup_tcp>
 800c400:	e7f0      	b.n	800c3e4 <lwip_netconn_do_newconn+0x38>
    msg->err = ERR_VAL;
 800c402:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 800c404:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	b163      	cbz	r3, 800c424 <lwip_netconn_do_newconn+0x78>
 800c40a:	f009 fe6f 	bl	80160ec <sys_arch_protect>
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c414:	320c      	adds	r2, #12
 800c416:	bfa4      	itt	ge
 800c418:	7922      	ldrbge	r2, [r4, #4]
 800c41a:	721a      	strbge	r2, [r3, #8]
}
 800c41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 800c420:	f009 be70 	b.w	8016104 <sys_arch_unprotect>
}
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	0800bb15 	.word	0x0800bb15

0800c42c <netconn_alloc>:
{
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c430:	2007      	movs	r0, #7
{
 800c432:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c434:	f002 fefa 	bl	800f22c <memp_malloc>
  if (conn == NULL) {
 800c438:	4604      	mov	r4, r0
 800c43a:	b3a8      	cbz	r0, 800c4a8 <netconn_alloc+0x7c>
  conn->last_err = ERR_OK;
 800c43c:	2300      	movs	r3, #0
  conn->type = t;
 800c43e:	7005      	strb	r5, [r0, #0]
  switch(NETCONNTYPE_GROUP(t)) {
 800c440:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800c444:	2d10      	cmp	r5, #16
  conn->last_err = ERR_OK;
 800c446:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 800c448:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 800c44a:	d00e      	beq.n	800c46a <netconn_alloc+0x3e>
 800c44c:	2d20      	cmp	r5, #32
 800c44e:	d00c      	beq.n	800c46a <netconn_alloc+0x3e>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c450:	4b16      	ldr	r3, [pc, #88]	; (800c4ac <netconn_alloc+0x80>)
 800c452:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c456:	4916      	ldr	r1, [pc, #88]	; (800c4b0 <netconn_alloc+0x84>)
 800c458:	4816      	ldr	r0, [pc, #88]	; (800c4b4 <netconn_alloc+0x88>)
 800c45a:	f00a fa15 	bl	8016888 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800c45e:	4621      	mov	r1, r4
 800c460:	2007      	movs	r0, #7
 800c462:	f002 feff 	bl	800f264 <memp_free>
  return NULL;
 800c466:	2400      	movs	r4, #0
 800c468:	e01e      	b.n	800c4a8 <netconn_alloc+0x7c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c46a:	f104 0610 	add.w	r6, r4, #16
 800c46e:	2106      	movs	r1, #6
 800c470:	4630      	mov	r0, r6
 800c472:	f009 fd51 	bl	8015f18 <sys_mbox_new>
 800c476:	4601      	mov	r1, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1f0      	bne.n	800c45e <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c47c:	f104 000c 	add.w	r0, r4, #12
 800c480:	f009 fdb7 	bl	8015ff2 <sys_sem_new>
 800c484:	4605      	mov	r5, r0
 800c486:	b118      	cbz	r0, 800c490 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 800c488:	4630      	mov	r0, r6
 800c48a:	f009 fd57 	bl	8015f3c <sys_mbox_free>
    goto free_and_return;
 800c48e:	e7e6      	b.n	800c45e <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c490:	f104 0014 	add.w	r0, r4, #20
 800c494:	f009 fdaa 	bl	8015fec <sys_mbox_set_invalid>
  conn->socket       = -1;
 800c498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  conn->current_msg  = NULL;
 800c49c:	e9c4 5709 	strd	r5, r7, [r4, #36]	; 0x24
  conn->state        = NETCONN_NONE;
 800c4a0:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 800c4a2:	61a3      	str	r3, [r4, #24]
  conn->write_offset = 0;
 800c4a4:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 800c4a6:	7725      	strb	r5, [r4, #28]
}
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ac:	08019469 	.word	0x08019469
 800c4b0:	08019340 	.word	0x08019340
 800c4b4:	08018495 	.word	0x08018495

0800c4b8 <netconn_free>:
{
 800c4b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c4ba:	6843      	ldr	r3, [r0, #4]
{
 800c4bc:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c4be:	b133      	cbz	r3, 800c4ce <netconn_free+0x16>
 800c4c0:	4b16      	ldr	r3, [pc, #88]	; (800c51c <netconn_free+0x64>)
 800c4c2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c4c6:	4916      	ldr	r1, [pc, #88]	; (800c520 <netconn_free+0x68>)
 800c4c8:	4816      	ldr	r0, [pc, #88]	; (800c524 <netconn_free+0x6c>)
 800c4ca:	f00a f9dd 	bl	8016888 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c4ce:	f104 0010 	add.w	r0, r4, #16
 800c4d2:	f009 fd86 	bl	8015fe2 <sys_mbox_valid>
 800c4d6:	b130      	cbz	r0, 800c4e6 <netconn_free+0x2e>
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <netconn_free+0x64>)
 800c4da:	f240 22e2 	movw	r2, #738	; 0x2e2
 800c4de:	4912      	ldr	r1, [pc, #72]	; (800c528 <netconn_free+0x70>)
 800c4e0:	4810      	ldr	r0, [pc, #64]	; (800c524 <netconn_free+0x6c>)
 800c4e2:	f00a f9d1 	bl	8016888 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c4e6:	f104 0014 	add.w	r0, r4, #20
 800c4ea:	f009 fd7a 	bl	8015fe2 <sys_mbox_valid>
 800c4ee:	b130      	cbz	r0, 800c4fe <netconn_free+0x46>
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <netconn_free+0x64>)
 800c4f2:	f240 22e5 	movw	r2, #741	; 0x2e5
 800c4f6:	490d      	ldr	r1, [pc, #52]	; (800c52c <netconn_free+0x74>)
 800c4f8:	480a      	ldr	r0, [pc, #40]	; (800c524 <netconn_free+0x6c>)
 800c4fa:	f00a f9c5 	bl	8016888 <iprintf>
  sys_sem_free(&conn->op_completed);
 800c4fe:	f104 050c 	add.w	r5, r4, #12
 800c502:	4628      	mov	r0, r5
 800c504:	f009 fdab 	bl	801605e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c508:	4628      	mov	r0, r5
 800c50a:	f009 fdb0 	bl	801606e <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800c50e:	4621      	mov	r1, r4
}
 800c510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 800c514:	2007      	movs	r0, #7
 800c516:	f002 bea5 	b.w	800f264 <memp_free>
 800c51a:	bf00      	nop
 800c51c:	08019469 	.word	0x08019469
 800c520:	08019366 	.word	0x08019366
 800c524:	08018495 	.word	0x08018495
 800c528:	08019394 	.word	0x08019394
 800c52c:	080193ce 	.word	0x080193ce

0800c530 <netconn_drain>:
{
 800c530:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c532:	f100 0510 	add.w	r5, r0, #16
{
 800c536:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c538:	4628      	mov	r0, r5
 800c53a:	f009 fd52 	bl	8015fe2 <sys_mbox_valid>
 800c53e:	b158      	cbz	r0, 800c558 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c540:	a901      	add	r1, sp, #4
 800c542:	4628      	mov	r0, r5
 800c544:	f009 fd3c 	bl	8015fc0 <sys_arch_mbox_tryfetch>
 800c548:	3001      	adds	r0, #1
 800c54a:	d119      	bne.n	800c580 <netconn_drain+0x50>
    sys_mbox_free(&conn->recvmbox);
 800c54c:	4628      	mov	r0, r5
 800c54e:	f009 fcf5 	bl	8015f3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c552:	4628      	mov	r0, r5
 800c554:	f009 fd4a 	bl	8015fec <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c558:	3414      	adds	r4, #20
 800c55a:	4620      	mov	r0, r4
 800c55c:	f009 fd41 	bl	8015fe2 <sys_mbox_valid>
 800c560:	b160      	cbz	r0, 800c57c <netconn_drain+0x4c>
      if (mem != &netconn_aborted) {
 800c562:	4e1a      	ldr	r6, [pc, #104]	; (800c5cc <netconn_drain+0x9c>)
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c564:	a901      	add	r1, sp, #4
 800c566:	4620      	mov	r0, r4
 800c568:	f009 fd2a 	bl	8015fc0 <sys_arch_mbox_tryfetch>
 800c56c:	3001      	adds	r0, #1
 800c56e:	d11c      	bne.n	800c5aa <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 800c570:	4620      	mov	r0, r4
 800c572:	f009 fce3 	bl	8015f3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c576:	4620      	mov	r0, r4
 800c578:	f009 fd38 	bl	8015fec <sys_mbox_set_invalid>
}
 800c57c:	b002      	add	sp, #8
 800c57e:	bd70      	pop	{r4, r5, r6, pc}
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c580:	7823      	ldrb	r3, [r4, #0]
 800c582:	9e01      	ldr	r6, [sp, #4]
 800c584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c588:	2b10      	cmp	r3, #16
 800c58a:	d10a      	bne.n	800c5a2 <netconn_drain+0x72>
        if (mem != NULL) {
 800c58c:	2e00      	cmp	r6, #0
 800c58e:	d0d7      	beq.n	800c540 <netconn_drain+0x10>
          if (conn->pcb.tcp != NULL) {
 800c590:	6860      	ldr	r0, [r4, #4]
 800c592:	b110      	cbz	r0, 800c59a <netconn_drain+0x6a>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800c594:	8931      	ldrh	r1, [r6, #8]
 800c596:	f003 fced 	bl	800ff74 <tcp_recved>
          pbuf_free(p);
 800c59a:	4630      	mov	r0, r6
 800c59c:	f003 f820 	bl	800f5e0 <pbuf_free>
 800c5a0:	e7ce      	b.n	800c540 <netconn_drain+0x10>
        netbuf_delete((struct netbuf *)mem);
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f000 faee 	bl	800cb84 <netbuf_delete>
 800c5a8:	e7ca      	b.n	800c540 <netconn_drain+0x10>
      if (mem != &netconn_aborted) {
 800c5aa:	9d01      	ldr	r5, [sp, #4]
 800c5ac:	42b5      	cmp	r5, r6
 800c5ae:	d0d9      	beq.n	800c564 <netconn_drain+0x34>
        netconn_drain(newconn);
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	f7ff ffbd 	bl	800c530 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800c5b6:	6868      	ldr	r0, [r5, #4]
 800c5b8:	b118      	cbz	r0, 800c5c2 <netconn_drain+0x92>
          tcp_abort(newconn->pcb.tcp);
 800c5ba:	f004 f9e3 	bl	8010984 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f7ff ff78 	bl	800c4b8 <netconn_free>
 800c5c8:	e7cc      	b.n	800c564 <netconn_drain+0x34>
 800c5ca:	bf00      	nop
 800c5cc:	2000af70 	.word	0x2000af70

0800c5d0 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 800c5d0:	6803      	ldr	r3, [r0, #0]
{
 800c5d2:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 800c5d4:	785d      	ldrb	r5, [r3, #1]
{
 800c5d6:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800c5d8:	b16d      	cbz	r5, 800c5f6 <lwip_netconn_do_delconn+0x26>
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5e0:	2b10      	cmp	r3, #16
 800c5e2:	d006      	beq.n	800c5f2 <lwip_netconn_do_delconn+0x22>
 800c5e4:	4b40      	ldr	r3, [pc, #256]	; (800c6e8 <lwip_netconn_do_delconn+0x118>)
 800c5e6:	f240 4201 	movw	r2, #1025	; 0x401
 800c5ea:	4940      	ldr	r1, [pc, #256]	; (800c6ec <lwip_netconn_do_delconn+0x11c>)
 800c5ec:	4840      	ldr	r0, [pc, #256]	; (800c6f0 <lwip_netconn_do_delconn+0x120>)
 800c5ee:	f00a f94b 	bl	8016888 <iprintf>
  if (((state != NETCONN_NONE) &&
 800c5f2:	2d02      	cmp	r5, #2
 800c5f4:	d121      	bne.n	800c63a <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 800c5f6:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800c5f8:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800c5fa:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800c5fc:	f7ff ff98 	bl	800c530 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	6858      	ldr	r0, [r3, #4]
 800c604:	b160      	cbz	r0, 800c620 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c60c:	2a10      	cmp	r2, #16
 800c60e:	d032      	beq.n	800c676 <lwip_netconn_do_delconn+0xa6>
 800c610:	2a20      	cmp	r2, #32
 800c612:	d102      	bne.n	800c61a <lwip_netconn_do_delconn+0x4a>
        msg->conn->pcb.udp->recv_arg = NULL;
 800c614:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 800c616:	f006 ffc9 	bl	80135ac <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800c61a:	2200      	movs	r2, #0
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c624:	b113      	cbz	r3, 800c62c <lwip_netconn_do_delconn+0x5c>
 800c626:	2200      	movs	r2, #0
 800c628:	4611      	mov	r1, r2
 800c62a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c62c:	6820      	ldr	r0, [r4, #0]
 800c62e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c630:	b15b      	cbz	r3, 800c64a <lwip_netconn_do_delconn+0x7a>
 800c632:	2200      	movs	r2, #0
 800c634:	2102      	movs	r1, #2
 800c636:	4798      	blx	r3
 800c638:	e007      	b.n	800c64a <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 800c63a:	2d03      	cmp	r5, #3
 800c63c:	d103      	bne.n	800c646 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	7f1b      	ldrb	r3, [r3, #28]
 800c642:	075b      	lsls	r3, r3, #29
 800c644:	d4d7      	bmi.n	800c5f6 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 800c646:	23fb      	movs	r3, #251	; 0xfb
 800c648:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c64a:	6820      	ldr	r0, [r4, #0]
 800c64c:	300c      	adds	r0, #12
 800c64e:	f009 fd09 	bl	8016064 <sys_sem_valid>
 800c652:	2800      	cmp	r0, #0
 800c654:	d046      	beq.n	800c6e4 <lwip_netconn_do_delconn+0x114>
    TCPIP_APIMSG_ACK(msg);
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d043      	beq.n	800c6e4 <lwip_netconn_do_delconn+0x114>
 800c65c:	f009 fd46 	bl	80160ec <sys_arch_protect>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c666:	320c      	adds	r2, #12
 800c668:	bfa4      	itt	ge
 800c66a:	7922      	ldrbge	r2, [r4, #4]
 800c66c:	721a      	strbge	r2, [r3, #8]
}
 800c66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 800c672:	f009 bd47 	b.w	8016104 <sys_arch_unprotect>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800c676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c678:	b90a      	cbnz	r2, 800c67e <lwip_netconn_do_delconn+0xae>
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	b133      	cbz	r3, 800c68c <lwip_netconn_do_delconn+0xbc>
 800c67e:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <lwip_netconn_do_delconn+0x118>)
 800c680:	f240 4235 	movw	r2, #1077	; 0x435
 800c684:	491b      	ldr	r1, [pc, #108]	; (800c6f4 <lwip_netconn_do_delconn+0x124>)
 800c686:	481a      	ldr	r0, [pc, #104]	; (800c6f0 <lwip_netconn_do_delconn+0x120>)
 800c688:	f00a f8fe 	bl	8016888 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800c68c:	2304      	movs	r3, #4
 800c68e:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c690:	2100      	movs	r1, #0
        msg->conn->state = NETCONN_CLOSE;
 800c692:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c694:	2303      	movs	r3, #3
 800c696:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 800c698:	6244      	str	r4, [r0, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c69a:	f7ff fcb5 	bl	800c008 <lwip_netconn_do_close_internal>
 800c69e:	b308      	cbz	r0, 800c6e4 <lwip_netconn_do_delconn+0x114>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d006      	beq.n	800c6b6 <lwip_netconn_do_delconn+0xe6>
 800c6a8:	4b0f      	ldr	r3, [pc, #60]	; (800c6e8 <lwip_netconn_do_delconn+0x118>)
 800c6aa:	f240 423b 	movw	r2, #1083	; 0x43b
 800c6ae:	4912      	ldr	r1, [pc, #72]	; (800c6f8 <lwip_netconn_do_delconn+0x128>)
 800c6b0:	480f      	ldr	r0, [pc, #60]	; (800c6f0 <lwip_netconn_do_delconn+0x120>)
 800c6b2:	f00a f8e9 	bl	8016888 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c6b6:	4811      	ldr	r0, [pc, #68]	; (800c6fc <lwip_netconn_do_delconn+0x12c>)
 800c6b8:	f009 fcfc 	bl	80160b4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	2100      	movs	r1, #0
 800c6c0:	300c      	adds	r0, #12
 800c6c2:	f009 fcae 	bl	8016022 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c6c6:	480d      	ldr	r0, [pc, #52]	; (800c6fc <lwip_netconn_do_delconn+0x12c>)
 800c6c8:	f009 fcef 	bl	80160aa <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	785b      	ldrb	r3, [r3, #1]
 800c6d0:	b143      	cbz	r3, 800c6e4 <lwip_netconn_do_delconn+0x114>
}
 800c6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c6d6:	4b04      	ldr	r3, [pc, #16]	; (800c6e8 <lwip_netconn_do_delconn+0x118>)
 800c6d8:	f240 423f 	movw	r2, #1087	; 0x43f
 800c6dc:	4906      	ldr	r1, [pc, #24]	; (800c6f8 <lwip_netconn_do_delconn+0x128>)
 800c6de:	4804      	ldr	r0, [pc, #16]	; (800c6f0 <lwip_netconn_do_delconn+0x120>)
 800c6e0:	f00a b8d2 	b.w	8016888 <iprintf>
}
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08019469 	.word	0x08019469
 800c6ec:	08019251 	.word	0x08019251
 800c6f0:	08018495 	.word	0x08018495
 800c6f4:	08019265 	.word	0x08019265
 800c6f8:	08019280 	.word	0x08019280
 800c6fc:	2000af78 	.word	0x2000af78

0800c700 <lwip_netconn_do_connect>:
  if (msg->conn->pcb.tcp == NULL) {
 800c700:	6803      	ldr	r3, [r0, #0]
{
 800c702:	b570      	push	{r4, r5, r6, lr}
 800c704:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800c706:	6858      	ldr	r0, [r3, #4]
 800c708:	b910      	cbnz	r0, 800c710 <lwip_netconn_do_connect+0x10>
    msg->err = ERR_CLSD;
 800c70a:	23f1      	movs	r3, #241	; 0xf1
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 800c70c:	7123      	strb	r3, [r4, #4]
      break;
 800c70e:	e00b      	b.n	800c728 <lwip_netconn_do_connect+0x28>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c710:	781a      	ldrb	r2, [r3, #0]
 800c712:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c716:	2a10      	cmp	r2, #16
 800c718:	d016      	beq.n	800c748 <lwip_netconn_do_connect+0x48>
 800c71a:	2a20      	cmp	r2, #32
 800c71c:	d151      	bne.n	800c7c2 <lwip_netconn_do_connect+0xc2>
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c71e:	89a2      	ldrh	r2, [r4, #12]
 800c720:	68a1      	ldr	r1, [r4, #8]
 800c722:	f006 ff0f 	bl	8013544 <udp_connect>
 800c726:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d052      	beq.n	800c7d4 <lwip_netconn_do_connect+0xd4>
 800c72e:	f009 fcdd 	bl	80160ec <sys_arch_protect>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c738:	320c      	adds	r2, #12
 800c73a:	bfa4      	itt	ge
 800c73c:	7922      	ldrbge	r2, [r4, #4]
 800c73e:	721a      	strbge	r2, [r3, #8]
}
 800c740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TCPIP_APIMSG_ACK(msg);
 800c744:	f009 bcde 	b.w	8016104 <sys_arch_unprotect>
      if (msg->conn->state == NETCONN_CONNECT) {
 800c748:	785a      	ldrb	r2, [r3, #1]
 800c74a:	2a03      	cmp	r2, #3
 800c74c:	d101      	bne.n	800c752 <lwip_netconn_do_connect+0x52>
        msg->err = ERR_ALREADY;
 800c74e:	23f7      	movs	r3, #247	; 0xf7
 800c750:	e7dc      	b.n	800c70c <lwip_netconn_do_connect+0xc>
      } else if (msg->conn->state != NETCONN_NONE) {
 800c752:	b10a      	cbz	r2, 800c758 <lwip_netconn_do_connect+0x58>
        msg->err = ERR_ISCONN;
 800c754:	23f6      	movs	r3, #246	; 0xf6
 800c756:	e7d9      	b.n	800c70c <lwip_netconn_do_connect+0xc>
        setup_tcp(msg->conn);
 800c758:	4618      	mov	r0, r3
 800c75a:	f7ff fa33 	bl	800bbc4 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	4b1d      	ldr	r3, [pc, #116]	; (800c7d8 <lwip_netconn_do_connect+0xd8>)
 800c762:	89a2      	ldrh	r2, [r4, #12]
 800c764:	68a1      	ldr	r1, [r4, #8]
 800c766:	6840      	ldr	r0, [r0, #4]
 800c768:	f004 f9ea 	bl	8010b40 <tcp_connect>
 800c76c:	7120      	strb	r0, [r4, #4]
        if (msg->err == ERR_OK) {
 800c76e:	2800      	cmp	r0, #0
 800c770:	d1da      	bne.n	800c728 <lwip_netconn_do_connect+0x28>
          msg->conn->state = NETCONN_CONNECT;
 800c772:	2103      	movs	r1, #3
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c774:	6822      	ldr	r2, [r4, #0]
 800c776:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 800c778:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c77a:	f013 0502 	ands.w	r5, r3, #2
 800c77e:	d004      	beq.n	800c78a <lwip_netconn_do_connect+0x8a>
 800c780:	f043 0304 	orr.w	r3, r3, #4
 800c784:	7713      	strb	r3, [r2, #28]
            msg->err = ERR_INPROGRESS;
 800c786:	23fb      	movs	r3, #251	; 0xfb
 800c788:	e7c0      	b.n	800c70c <lwip_netconn_do_connect+0xc>
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c78a:	f023 0304 	bic.w	r3, r3, #4
 800c78e:	7713      	strb	r3, [r2, #28]
            msg->conn->current_msg = msg;
 800c790:	6254      	str	r4, [r2, #36]	; 0x24
            UNLOCK_TCPIP_CORE();
 800c792:	4812      	ldr	r0, [pc, #72]	; (800c7dc <lwip_netconn_do_connect+0xdc>)
 800c794:	f009 fc8e 	bl	80160b4 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c798:	6820      	ldr	r0, [r4, #0]
 800c79a:	4629      	mov	r1, r5
 800c79c:	300c      	adds	r0, #12
 800c79e:	f009 fc40 	bl	8016022 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c7a2:	480e      	ldr	r0, [pc, #56]	; (800c7dc <lwip_netconn_do_connect+0xdc>)
 800c7a4:	f009 fc81 	bl	80160aa <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	785b      	ldrb	r3, [r3, #1]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d111      	bne.n	800c7d4 <lwip_netconn_do_connect+0xd4>
}
 800c7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c7b4:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <lwip_netconn_do_connect+0xe0>)
 800c7b6:	f240 42e9 	movw	r2, #1257	; 0x4e9
 800c7ba:	490a      	ldr	r1, [pc, #40]	; (800c7e4 <lwip_netconn_do_connect+0xe4>)
 800c7bc:	480a      	ldr	r0, [pc, #40]	; (800c7e8 <lwip_netconn_do_connect+0xe8>)
 800c7be:	f00a b863 	b.w	8016888 <iprintf>
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <lwip_netconn_do_connect+0xe0>)
 800c7c4:	f240 42f2 	movw	r2, #1266	; 0x4f2
 800c7c8:	4908      	ldr	r1, [pc, #32]	; (800c7ec <lwip_netconn_do_connect+0xec>)
 800c7ca:	4807      	ldr	r0, [pc, #28]	; (800c7e8 <lwip_netconn_do_connect+0xe8>)
 800c7cc:	f00a f85c 	bl	8016888 <iprintf>
 800c7d0:	23fa      	movs	r3, #250	; 0xfa
 800c7d2:	e79b      	b.n	800c70c <lwip_netconn_do_connect+0xc>
}
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	bf00      	nop
 800c7d8:	0800bd31 	.word	0x0800bd31
 800c7dc:	2000af78 	.word	0x2000af78
 800c7e0:	08019469 	.word	0x08019469
 800c7e4:	08019280 	.word	0x08019280
 800c7e8:	08018495 	.word	0x08018495
 800c7ec:	080191c3 	.word	0x080191c3

0800c7f0 <lwip_netconn_do_disconnect>:
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800c7f0:	6802      	ldr	r2, [r0, #0]
{
 800c7f2:	b510      	push	{r4, lr}
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800c7f4:	7813      	ldrb	r3, [r2, #0]
{
 800c7f6:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800c7f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7fc:	2b20      	cmp	r3, #32
 800c7fe:	d113      	bne.n	800c828 <lwip_netconn_do_disconnect+0x38>
    udp_disconnect(msg->conn->pcb.udp);
 800c800:	6850      	ldr	r0, [r2, #4]
 800c802:	f006 fec7 	bl	8013594 <udp_disconnect>
    msg->err = ERR_OK;
 800c806:	2300      	movs	r3, #0
    msg->err = ERR_VAL;
 800c808:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	b173      	cbz	r3, 800c82c <lwip_netconn_do_disconnect+0x3c>
 800c80e:	f009 fc6d 	bl	80160ec <sys_arch_protect>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c818:	320c      	adds	r2, #12
 800c81a:	bfa4      	itt	ge
 800c81c:	7922      	ldrbge	r2, [r4, #4]
 800c81e:	721a      	strbge	r2, [r3, #8]
}
 800c820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800c824:	f009 bc6e 	b.w	8016104 <sys_arch_unprotect>
    msg->err = ERR_VAL;
 800c828:	23fa      	movs	r3, #250	; 0xfa
 800c82a:	e7ed      	b.n	800c808 <lwip_netconn_do_disconnect+0x18>
}
 800c82c:	bd10      	pop	{r4, pc}

0800c82e <lwip_netconn_do_send>:
{
 800c82e:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800c830:	6803      	ldr	r3, [r0, #0]
{
 800c832:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800c834:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c838:	f112 0f0c 	cmn.w	r2, #12
 800c83c:	da0f      	bge.n	800c85e <lwip_netconn_do_send+0x30>
    msg->err = msg->conn->last_err;
 800c83e:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	b31b      	cbz	r3, 800c88c <lwip_netconn_do_send+0x5e>
 800c844:	f009 fc52 	bl	80160ec <sys_arch_protect>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c84e:	320c      	adds	r2, #12
 800c850:	bfa4      	itt	ge
 800c852:	7922      	ldrbge	r2, [r4, #4]
 800c854:	721a      	strbge	r2, [r3, #8]
}
 800c856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800c85a:	f009 bc53 	b.w	8016104 <sys_arch_unprotect>
    msg->err = ERR_CONN;
 800c85e:	22f5      	movs	r2, #245	; 0xf5
 800c860:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800c862:	6858      	ldr	r0, [r3, #4]
 800c864:	2800      	cmp	r0, #0
 800c866:	d0eb      	beq.n	800c840 <lwip_netconn_do_send+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c86e:	2b20      	cmp	r3, #32
 800c870:	d1e6      	bne.n	800c840 <lwip_netconn_do_send+0x12>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800c872:	68a2      	ldr	r2, [r4, #8]
 800c874:	6893      	ldr	r3, [r2, #8]
 800c876:	6811      	ldr	r1, [r2, #0]
 800c878:	b91b      	cbnz	r3, 800c882 <lwip_netconn_do_send+0x54>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800c87a:	f006 fe59 	bl	8013530 <udp_send>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800c87e:	7120      	strb	r0, [r4, #4]
 800c880:	e7de      	b.n	800c840 <lwip_netconn_do_send+0x12>
 800c882:	8993      	ldrh	r3, [r2, #12]
 800c884:	3208      	adds	r2, #8
 800c886:	f006 fe39 	bl	80134fc <udp_sendto>
 800c88a:	e7f8      	b.n	800c87e <lwip_netconn_do_send+0x50>
}
 800c88c:	bd10      	pop	{r4, pc}

0800c88e <lwip_netconn_do_recv>:
{
 800c88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c894:	6803      	ldr	r3, [r0, #0]
{
 800c896:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800c898:	685a      	ldr	r2, [r3, #4]
 800c89a:	b192      	cbz	r2, 800c8c2 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8a2:	2b10      	cmp	r3, #16
 800c8a4:	d10d      	bne.n	800c8c2 <lwip_netconn_do_recv+0x34>
 800c8a6:	f64f 77ff 	movw	r7, #65535	; 0xffff
      u32_t remaining = msg->msg.r.len;
 800c8aa:	6885      	ldr	r5, [r0, #8]
 800c8ac:	42bd      	cmp	r5, r7
 800c8ae:	462e      	mov	r6, r5
 800c8b0:	bf28      	it	cs
 800c8b2:	463e      	movcs	r6, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	b2b1      	uxth	r1, r6
 800c8b8:	6858      	ldr	r0, [r3, #4]
 800c8ba:	f003 fb5b 	bl	800ff74 <tcp_recved>
      } while (remaining != 0);
 800c8be:	1bad      	subs	r5, r5, r6
 800c8c0:	d1f4      	bne.n	800c8ac <lwip_netconn_do_recv+0x1e>
  TCPIP_APIMSG_ACK(msg);
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	b163      	cbz	r3, 800c8e0 <lwip_netconn_do_recv+0x52>
 800c8c6:	f009 fc11 	bl	80160ec <sys_arch_protect>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c8d0:	320c      	adds	r2, #12
 800c8d2:	bfa4      	itt	ge
 800c8d4:	7922      	ldrbge	r2, [r4, #4]
 800c8d6:	721a      	strbge	r2, [r3, #8]
}
 800c8d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 800c8dc:	f009 bc12 	b.w	8016104 <sys_arch_unprotect>
}
 800c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8e4 <lwip_netconn_do_write>:
{
 800c8e4:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800c8e6:	6803      	ldr	r3, [r0, #0]
{
 800c8e8:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800c8ea:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c8ee:	f112 0f0c 	cmn.w	r2, #12
 800c8f2:	da0d      	bge.n	800c910 <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 800c8f4:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800c8f6:	f009 fbf9 	bl	80160ec <sys_arch_protect>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c900:	320c      	adds	r2, #12
 800c902:	bfa4      	itt	ge
 800c904:	7922      	ldrbge	r2, [r4, #4]
 800c906:	721a      	strbge	r2, [r3, #8]
}
 800c908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800c90c:	f009 bbfa 	b.w	8016104 <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c916:	2a10      	cmp	r2, #16
 800c918:	d149      	bne.n	800c9ae <lwip_netconn_do_write+0xca>
      if (msg->conn->state != NETCONN_NONE) {
 800c91a:	785a      	ldrb	r2, [r3, #1]
 800c91c:	b112      	cbz	r2, 800c924 <lwip_netconn_do_write+0x40>
        msg->err = ERR_INPROGRESS;
 800c91e:	23fb      	movs	r3, #251	; 0xfb
      msg->err = ERR_VAL;
 800c920:	7123      	strb	r3, [r4, #4]
 800c922:	e7e8      	b.n	800c8f6 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	2a00      	cmp	r2, #0
 800c928:	d03f      	beq.n	800c9aa <lwip_netconn_do_write+0xc6>
        msg->conn->state = NETCONN_WRITE;
 800c92a:	2201      	movs	r2, #1
 800c92c:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800c92e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c930:	b90a      	cbnz	r2, 800c936 <lwip_netconn_do_write+0x52>
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	b133      	cbz	r3, 800c944 <lwip_netconn_do_write+0x60>
 800c936:	4b1f      	ldr	r3, [pc, #124]	; (800c9b4 <lwip_netconn_do_write+0xd0>)
 800c938:	f240 6283 	movw	r2, #1667	; 0x683
 800c93c:	491e      	ldr	r1, [pc, #120]	; (800c9b8 <lwip_netconn_do_write+0xd4>)
 800c93e:	481f      	ldr	r0, [pc, #124]	; (800c9bc <lwip_netconn_do_write+0xd8>)
 800c940:	f009 ffa2 	bl	8016888 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c944:	68e3      	ldr	r3, [r4, #12]
 800c946:	b933      	cbnz	r3, 800c956 <lwip_netconn_do_write+0x72>
 800c948:	4b1a      	ldr	r3, [pc, #104]	; (800c9b4 <lwip_netconn_do_write+0xd0>)
 800c94a:	f240 6284 	movw	r2, #1668	; 0x684
 800c94e:	491c      	ldr	r1, [pc, #112]	; (800c9c0 <lwip_netconn_do_write+0xdc>)
 800c950:	481a      	ldr	r0, [pc, #104]	; (800c9bc <lwip_netconn_do_write+0xd8>)
 800c952:	f009 ff99 	bl	8016888 <iprintf>
        msg->conn->write_offset = 0;
 800c956:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 800c958:	6820      	ldr	r0, [r4, #0]
 800c95a:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 800c95c:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c95e:	f7ff fa55 	bl	800be0c <lwip_netconn_do_writemore>
 800c962:	b330      	cbz	r0, 800c9b2 <lwip_netconn_do_write+0xce>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	785b      	ldrb	r3, [r3, #1]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d006      	beq.n	800c97a <lwip_netconn_do_write+0x96>
 800c96c:	4b11      	ldr	r3, [pc, #68]	; (800c9b4 <lwip_netconn_do_write+0xd0>)
 800c96e:	f240 6289 	movw	r2, #1673	; 0x689
 800c972:	4914      	ldr	r1, [pc, #80]	; (800c9c4 <lwip_netconn_do_write+0xe0>)
 800c974:	4811      	ldr	r0, [pc, #68]	; (800c9bc <lwip_netconn_do_write+0xd8>)
 800c976:	f009 ff87 	bl	8016888 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c97a:	4813      	ldr	r0, [pc, #76]	; (800c9c8 <lwip_netconn_do_write+0xe4>)
 800c97c:	f009 fb9a 	bl	80160b4 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	2100      	movs	r1, #0
 800c984:	300c      	adds	r0, #12
 800c986:	f009 fb4c 	bl	8016022 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c98a:	480f      	ldr	r0, [pc, #60]	; (800c9c8 <lwip_netconn_do_write+0xe4>)
 800c98c:	f009 fb8d 	bl	80160aa <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	785b      	ldrb	r3, [r3, #1]
 800c994:	2b01      	cmp	r3, #1
 800c996:	d10c      	bne.n	800c9b2 <lwip_netconn_do_write+0xce>
}
 800c998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <lwip_netconn_do_write+0xd0>)
 800c99e:	f240 628d 	movw	r2, #1677	; 0x68d
 800c9a2:	4908      	ldr	r1, [pc, #32]	; (800c9c4 <lwip_netconn_do_write+0xe0>)
 800c9a4:	4805      	ldr	r0, [pc, #20]	; (800c9bc <lwip_netconn_do_write+0xd8>)
 800c9a6:	f009 bf6f 	b.w	8016888 <iprintf>
        msg->err = ERR_CONN;
 800c9aa:	23f5      	movs	r3, #245	; 0xf5
 800c9ac:	e7b8      	b.n	800c920 <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 800c9ae:	23fa      	movs	r3, #250	; 0xfa
 800c9b0:	e7b6      	b.n	800c920 <lwip_netconn_do_write+0x3c>
}
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	08019469 	.word	0x08019469
 800c9b8:	08019265 	.word	0x08019265
 800c9bc:	08018495 	.word	0x08018495
 800c9c0:	0801929c 	.word	0x0801929c
 800c9c4:	08019280 	.word	0x08019280
 800c9c8:	2000af78 	.word	0x2000af78

0800c9cc <lwip_netconn_do_getaddr>:
  if (msg->conn->pcb.ip != NULL) {
 800c9cc:	6802      	ldr	r2, [r0, #0]
{
 800c9ce:	b538      	push	{r3, r4, r5, lr}
  if (msg->conn->pcb.ip != NULL) {
 800c9d0:	6853      	ldr	r3, [r2, #4]
{
 800c9d2:	4604      	mov	r4, r0
  if (msg->conn->pcb.ip != NULL) {
 800c9d4:	b1bb      	cbz	r3, 800ca06 <lwip_netconn_do_getaddr+0x3a>
    if (msg->msg.ad.local) {
 800c9d6:	7c01      	ldrb	r1, [r0, #16]
 800c9d8:	6880      	ldr	r0, [r0, #8]
 800c9da:	b179      	cbz	r1, 800c9fc <lwip_netconn_do_getaddr+0x30>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800c9dc:	681d      	ldr	r5, [r3, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800c9de:	6005      	str	r5, [r0, #0]
    msg->err = ERR_OK;
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	7120      	strb	r0, [r4, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c9e4:	7812      	ldrb	r2, [r2, #0]
 800c9e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c9ea:	2a10      	cmp	r2, #16
 800c9ec:	d01f      	beq.n	800ca2e <lwip_netconn_do_getaddr+0x62>
 800c9ee:	2a20      	cmp	r2, #32
 800c9f0:	d126      	bne.n	800ca40 <lwip_netconn_do_getaddr+0x74>
      if (msg->msg.ad.local) {
 800c9f2:	b129      	cbz	r1, 800ca00 <lwip_netconn_do_getaddr+0x34>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800c9f4:	68e2      	ldr	r2, [r4, #12]
 800c9f6:	8a5b      	ldrh	r3, [r3, #18]
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800c9f8:	8013      	strh	r3, [r2, #0]
 800c9fa:	e006      	b.n	800ca0a <lwip_netconn_do_getaddr+0x3e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800c9fc:	685d      	ldr	r5, [r3, #4]
 800c9fe:	e7ee      	b.n	800c9de <lwip_netconn_do_getaddr+0x12>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ca00:	7c1a      	ldrb	r2, [r3, #16]
 800ca02:	0752      	lsls	r2, r2, #29
 800ca04:	d410      	bmi.n	800ca28 <lwip_netconn_do_getaddr+0x5c>
          msg->err = ERR_CONN;
 800ca06:	23f5      	movs	r3, #245	; 0xf5
 800ca08:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	b303      	cbz	r3, 800ca50 <lwip_netconn_do_getaddr+0x84>
 800ca0e:	f009 fb6d 	bl	80160ec <sys_arch_protect>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ca18:	320c      	adds	r2, #12
 800ca1a:	bfa4      	itt	ge
 800ca1c:	7922      	ldrbge	r2, [r4, #4]
 800ca1e:	721a      	strbge	r2, [r3, #8]
}
 800ca20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 800ca24:	f009 bb6e 	b.w	8016104 <sys_arch_unprotect>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800ca28:	68e2      	ldr	r2, [r4, #12]
 800ca2a:	8a9b      	ldrh	r3, [r3, #20]
 800ca2c:	e7e4      	b.n	800c9f8 <lwip_netconn_do_getaddr+0x2c>
      if ((msg->msg.ad.local == 0) &&
 800ca2e:	b921      	cbnz	r1, 800ca3a <lwip_netconn_do_getaddr+0x6e>
 800ca30:	7d1a      	ldrb	r2, [r3, #20]
 800ca32:	2a01      	cmp	r2, #1
 800ca34:	d9e7      	bls.n	800ca06 <lwip_netconn_do_getaddr+0x3a>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800ca36:	8b1b      	ldrh	r3, [r3, #24]
 800ca38:	e000      	b.n	800ca3c <lwip_netconn_do_getaddr+0x70>
 800ca3a:	8adb      	ldrh	r3, [r3, #22]
 800ca3c:	68e2      	ldr	r2, [r4, #12]
 800ca3e:	e7db      	b.n	800c9f8 <lwip_netconn_do_getaddr+0x2c>
      LWIP_ASSERT("invalid netconn_type", 0);
 800ca40:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <lwip_netconn_do_getaddr+0x88>)
 800ca42:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ca46:	4904      	ldr	r1, [pc, #16]	; (800ca58 <lwip_netconn_do_getaddr+0x8c>)
 800ca48:	4804      	ldr	r0, [pc, #16]	; (800ca5c <lwip_netconn_do_getaddr+0x90>)
 800ca4a:	f009 ff1d 	bl	8016888 <iprintf>
      break;
 800ca4e:	e7dc      	b.n	800ca0a <lwip_netconn_do_getaddr+0x3e>
}
 800ca50:	bd38      	pop	{r3, r4, r5, pc}
 800ca52:	bf00      	nop
 800ca54:	08019469 	.word	0x08019469
 800ca58:	08019287 	.word	0x08019287
 800ca5c:	08018495 	.word	0x08018495

0800ca60 <lwip_netconn_do_close>:
{
 800ca60:	b510      	push	{r4, lr}
 800ca62:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800ca64:	6800      	ldr	r0, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 800ca66:	6843      	ldr	r3, [r0, #4]
 800ca68:	b163      	cbz	r3, 800ca84 <lwip_netconn_do_close+0x24>
 800ca6a:	7803      	ldrb	r3, [r0, #0]
 800ca6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca70:	2b10      	cmp	r3, #16
 800ca72:	d107      	bne.n	800ca84 <lwip_netconn_do_close+0x24>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ca74:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 800ca76:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ca78:	2a03      	cmp	r2, #3
 800ca7a:	d001      	beq.n	800ca80 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d001      	beq.n	800ca84 <lwip_netconn_do_close+0x24>
    if (state == NETCONN_CONNECT) {
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d10e      	bne.n	800caa2 <lwip_netconn_do_close+0x42>
      msg->err = ERR_CONN;
 800ca84:	23f5      	movs	r3, #245	; 0xf5
      msg->err = ERR_INPROGRESS;
 800ca86:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 800ca88:	f009 fb30 	bl	80160ec <sys_arch_protect>
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ca92:	320c      	adds	r2, #12
 800ca94:	bfa4      	itt	ge
 800ca96:	7922      	ldrbge	r2, [r4, #4]
 800ca98:	721a      	strbge	r2, [r3, #8]
}
 800ca9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 800ca9e:	f009 bb31 	b.w	8016104 <sys_arch_unprotect>
    } else if (state == NETCONN_WRITE) {
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <lwip_netconn_do_close+0x4a>
      msg->err = ERR_INPROGRESS;
 800caa6:	23fb      	movs	r3, #251	; 0xfb
 800caa8:	e7ed      	b.n	800ca86 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800caaa:	07d3      	lsls	r3, r2, #31
 800caac:	d501      	bpl.n	800cab2 <lwip_netconn_do_close+0x52>
        netconn_drain(msg->conn);
 800caae:	f7ff fd3f 	bl	800c530 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cab6:	b90a      	cbnz	r2, 800cabc <lwip_netconn_do_close+0x5c>
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	b133      	cbz	r3, 800caca <lwip_netconn_do_close+0x6a>
 800cabc:	4b18      	ldr	r3, [pc, #96]	; (800cb20 <lwip_netconn_do_close+0xc0>)
 800cabe:	f240 721c 	movw	r2, #1820	; 0x71c
 800cac2:	4918      	ldr	r1, [pc, #96]	; (800cb24 <lwip_netconn_do_close+0xc4>)
 800cac4:	4818      	ldr	r0, [pc, #96]	; (800cb28 <lwip_netconn_do_close+0xc8>)
 800cac6:	f009 fedf 	bl	8016888 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800caca:	2304      	movs	r3, #4
 800cacc:	6820      	ldr	r0, [r4, #0]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cace:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 800cad0:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800cad2:	6244      	str	r4, [r0, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cad4:	f7ff fa98 	bl	800c008 <lwip_netconn_do_close_internal>
 800cad8:	b308      	cbz	r0, 800cb1e <lwip_netconn_do_close+0xbe>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	785b      	ldrb	r3, [r3, #1]
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d006      	beq.n	800caf0 <lwip_netconn_do_close+0x90>
 800cae2:	4b0f      	ldr	r3, [pc, #60]	; (800cb20 <lwip_netconn_do_close+0xc0>)
 800cae4:	f240 7221 	movw	r2, #1825	; 0x721
 800cae8:	4910      	ldr	r1, [pc, #64]	; (800cb2c <lwip_netconn_do_close+0xcc>)
 800caea:	480f      	ldr	r0, [pc, #60]	; (800cb28 <lwip_netconn_do_close+0xc8>)
 800caec:	f009 fecc 	bl	8016888 <iprintf>
        UNLOCK_TCPIP_CORE();
 800caf0:	480f      	ldr	r0, [pc, #60]	; (800cb30 <lwip_netconn_do_close+0xd0>)
 800caf2:	f009 fadf 	bl	80160b4 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800caf6:	6820      	ldr	r0, [r4, #0]
 800caf8:	2100      	movs	r1, #0
 800cafa:	300c      	adds	r0, #12
 800cafc:	f009 fa91 	bl	8016022 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800cb00:	480b      	ldr	r0, [pc, #44]	; (800cb30 <lwip_netconn_do_close+0xd0>)
 800cb02:	f009 fad2 	bl	80160aa <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	b143      	cbz	r3, 800cb1e <lwip_netconn_do_close+0xbe>
}
 800cb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cb10:	4b03      	ldr	r3, [pc, #12]	; (800cb20 <lwip_netconn_do_close+0xc0>)
 800cb12:	f240 7225 	movw	r2, #1829	; 0x725
 800cb16:	4905      	ldr	r1, [pc, #20]	; (800cb2c <lwip_netconn_do_close+0xcc>)
 800cb18:	4803      	ldr	r0, [pc, #12]	; (800cb28 <lwip_netconn_do_close+0xc8>)
 800cb1a:	f009 beb5 	b.w	8016888 <iprintf>
}
 800cb1e:	bd10      	pop	{r4, pc}
 800cb20:	08019469 	.word	0x08019469
 800cb24:	08019265 	.word	0x08019265
 800cb28:	08018495 	.word	0x08018495
 800cb2c:	08019280 	.word	0x08019280
 800cb30:	2000af78 	.word	0x2000af78

0800cb34 <lwip_netconn_do_gethostbyname>:
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800cb34:	2300      	movs	r3, #0
{
 800cb36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800cb38:	68c5      	ldr	r5, [r0, #12]
 800cb3a:	9300      	str	r3, [sp, #0]
{
 800cb3c:	4604      	mov	r4, r0
  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800cb3e:	4603      	mov	r3, r0
 800cb40:	c803      	ldmia	r0, {r0, r1}
 800cb42:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <lwip_netconn_do_gethostbyname+0x30>)
 800cb44:	f001 ffa6 	bl	800ea94 <dns_gethostbyname_addrtype>
 800cb48:	7028      	strb	r0, [r5, #0]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
 800cb4a:	68e3      	ldr	r3, [r4, #12]
 800cb4c:	f993 3000 	ldrsb.w	r3, [r3]
 800cb50:	3305      	adds	r3, #5
 800cb52:	d005      	beq.n	800cb60 <lwip_netconn_do_gethostbyname+0x2c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800cb54:	68a0      	ldr	r0, [r4, #8]
  }
}
 800cb56:	b003      	add	sp, #12
 800cb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800cb5c:	f009 ba7c 	b.w	8016058 <sys_sem_signal>
}
 800cb60:	b003      	add	sp, #12
 800cb62:	bd30      	pop	{r4, r5, pc}
 800cb64:	0800bdf1 	.word	0x0800bdf1

0800cb68 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800cb68:	f100 0310 	add.w	r3, r0, #16
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
 800cb70:	bf9d      	ittte	ls
 800cb72:	4b03      	ldrls	r3, [pc, #12]	; (800cb80 <err_to_errno+0x18>)
 800cb74:	4240      	negls	r0, r0
 800cb76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
 800cb7a:	2005      	movhi	r0, #5
}
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	080194fc 	.word	0x080194fc

0800cb84 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800cb84:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800cb86:	4604      	mov	r4, r0
 800cb88:	b160      	cbz	r0, 800cba4 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	b120      	cbz	r0, 800cb98 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800cb8e:	f002 fd27 	bl	800f5e0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 800cb98:	4621      	mov	r1, r4
  }
}
 800cb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800cb9e:	2006      	movs	r0, #6
 800cba0:	f002 bb60 	b.w	800f264 <memp_free>
}
 800cba4:	bd10      	pop	{r4, pc}
	...

0800cba8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800cba8:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800cbaa:	4604      	mov	r4, r0
 800cbac:	b938      	cbnz	r0, 800cbbe <netbuf_free+0x16>
  if (buf->p != NULL) {
    pbuf_free(buf->p);
  }
  buf->p = buf->ptr = NULL;
}
 800cbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800cbb2:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <netbuf_free+0x28>)
 800cbb4:	2281      	movs	r2, #129	; 0x81
 800cbb6:	4907      	ldr	r1, [pc, #28]	; (800cbd4 <netbuf_free+0x2c>)
 800cbb8:	4807      	ldr	r0, [pc, #28]	; (800cbd8 <netbuf_free+0x30>)
 800cbba:	f009 be65 	b.w	8016888 <iprintf>
  if (buf->p != NULL) {
 800cbbe:	6800      	ldr	r0, [r0, #0]
 800cbc0:	b108      	cbz	r0, 800cbc6 <netbuf_free+0x1e>
    pbuf_free(buf->p);
 800cbc2:	f002 fd0d 	bl	800f5e0 <pbuf_free>
  buf->p = buf->ptr = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e9c4 3300 	strd	r3, r3, [r4]
}
 800cbcc:	bd10      	pop	{r4, pc}
 800cbce:	bf00      	nop
 800cbd0:	08019540 	.word	0x08019540
 800cbd4:	080195af 	.word	0x080195af
 800cbd8:	08018495 	.word	0x08018495

0800cbdc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	460e      	mov	r6, r1
 800cbe0:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	b940      	cbnz	r0, 800cbf8 <netbuf_ref+0x1c>
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <netbuf_ref+0x48>)
 800cbe8:	2295      	movs	r2, #149	; 0x95
 800cbea:	490f      	ldr	r1, [pc, #60]	; (800cc28 <netbuf_ref+0x4c>)
 800cbec:	480f      	ldr	r0, [pc, #60]	; (800cc2c <netbuf_ref+0x50>)
 800cbee:	f009 fe4b 	bl	8016888 <iprintf>
 800cbf2:	f06f 000f 	mvn.w	r0, #15
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
  if (buf->p != NULL) {
 800cbf8:	6800      	ldr	r0, [r0, #0]
 800cbfa:	b108      	cbz	r0, 800cc00 <netbuf_ref+0x24>
    pbuf_free(buf->p);
 800cbfc:	f002 fcf0 	bl	800f5e0 <pbuf_free>
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800cc00:	2100      	movs	r1, #0
 800cc02:	2202      	movs	r2, #2
 800cc04:	4608      	mov	r0, r1
 800cc06:	f002 fd53 	bl	800f6b0 <pbuf_alloc>
 800cc0a:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 800cc0c:	b918      	cbnz	r0, 800cc16 <netbuf_ref+0x3a>
    buf->ptr = NULL;
 800cc0e:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 800cc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc14:	e7ef      	b.n	800cbf6 <netbuf_ref+0x1a>
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 800cc16:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 800cc18:	8105      	strh	r5, [r0, #8]
 800cc1a:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 800cc1c:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 800cc1e:	2000      	movs	r0, #0
 800cc20:	e7e9      	b.n	800cbf6 <netbuf_ref+0x1a>
 800cc22:	bf00      	nop
 800cc24:	08019540 	.word	0x08019540
 800cc28:	080195c8 	.word	0x080195c8
 800cc2c:	08018495 	.word	0x08018495

0800cc30 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
 800cc30:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 800cc32:	a901      	add	r1, sp, #4
{
 800cc34:	4606      	mov	r6, r0
  err = netconn_gethostbyname(name, &addr);
 800cc36:	f7fe ff29 	bl	800ba8c <netconn_gethostbyname>
  if (err != ERR_OK) {
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	b128      	cbz	r0, 800cc4a <lwip_gethostbyname+0x1a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 800cc3e:	22d2      	movs	r2, #210	; 0xd2
    return NULL;
 800cc40:	2000      	movs	r0, #0
    h_errno = HOST_NOT_FOUND;
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <lwip_gethostbyname+0x50>)
 800cc44:	601a      	str	r2, [r3, #0]
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 800cc46:	b002      	add	sp, #8
 800cc48:	bd70      	pop	{r4, r5, r6, pc}
  s_hostent_addr = addr;
 800cc4a:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <lwip_gethostbyname+0x54>)
 800cc4c:	9a01      	ldr	r2, [sp, #4]
  s_phostent_addr[0] = &s_hostent_addr;
 800cc4e:	4d0e      	ldr	r5, [pc, #56]	; (800cc88 <lwip_gethostbyname+0x58>)
  s_hostent_addr = addr;
 800cc50:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 800cc52:	e9c5 3000 	strd	r3, r0, [r5]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <lwip_gethostbyname+0x5c>)
 800cc58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	4631      	mov	r1, r6
 800cc60:	f00a f827 	bl	8016cb2 <strncpy>
 800cc64:	4603      	mov	r3, r0
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 800cc66:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 800cc6a:	4809      	ldr	r0, [pc, #36]	; (800cc90 <lwip_gethostbyname+0x60>)
  s_hostent.h_length = sizeof(ip_addr_t);
 800cc6c:	2202      	movs	r2, #2
  s_hostent.h_name = s_hostname;
 800cc6e:	6003      	str	r3, [r0, #0]
  s_aliases = NULL;
 800cc70:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <lwip_gethostbyname+0x64>)
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
 800cc72:	6105      	str	r5, [r0, #16]
  s_aliases = NULL;
 800cc74:	601c      	str	r4, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 800cc76:	6043      	str	r3, [r0, #4]
  s_hostent.h_length = sizeof(ip_addr_t);
 800cc78:	2304      	movs	r3, #4
 800cc7a:	e9c0 2302 	strd	r2, r3, [r0, #8]
  return &s_hostent;
 800cc7e:	e7e2      	b.n	800cc46 <lwip_gethostbyname+0x16>
 800cc80:	2000af74 	.word	0x2000af74
 800cc84:	20004508 	.word	0x20004508
 800cc88:	20004610 	.word	0x20004610
 800cc8c:	2000450c 	.word	0x2000450c
 800cc90:	200044f4 	.word	0x200044f4
 800cc94:	200044f0 	.word	0x200044f0

0800cc98 <get_socket>:
{
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800cc98:	2803      	cmp	r0, #3
 800cc9a:	d904      	bls.n	800cca6 <get_socket+0xe>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 800cc9c:	2209      	movs	r2, #9
 800cc9e:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <get_socket+0x20>)
    return NULL;
 800cca0:	2000      	movs	r0, #0
    set_errno(EBADF);
 800cca2:	601a      	str	r2, [r3, #0]
    return NULL;
 800cca4:	4770      	bx	lr
  }

  sock = &sockets[s];
 800cca6:	2314      	movs	r3, #20
 800cca8:	4343      	muls	r3, r0
 800ccaa:	4a04      	ldr	r2, [pc, #16]	; (800ccbc <get_socket+0x24>)
 800ccac:	18d0      	adds	r0, r2, r3

  if (!sock->conn) {
 800ccae:	58d3      	ldr	r3, [r2, r3]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0f3      	beq.n	800cc9c <get_socket+0x4>
    set_errno(EBADF);
    return NULL;
  }

  return sock;
}
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	2000e0bc 	.word	0x2000e0bc
 800ccbc:	20004620 	.word	0x20004620

0800ccc0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800ccc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	4680      	mov	r8, r0
 800ccc6:	460f      	mov	r7, r1
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800ccc8:	2500      	movs	r5, #0
 800ccca:	f04f 0a14 	mov.w	sl, #20
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800ccce:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800cd20 <alloc_socket+0x60>
    SYS_ARCH_PROTECT(lev);
 800ccd2:	f009 fa0b 	bl	80160ec <sys_arch_protect>
 800ccd6:	fb0a f405 	mul.w	r4, sl, r5
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800ccda:	f854 3009 	ldr.w	r3, [r4, r9]
    SYS_ARCH_PROTECT(lev);
 800ccde:	4602      	mov	r2, r0
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800cce0:	b9ab      	cbnz	r3, 800cd0e <alloc_socket+0x4e>
 800cce2:	444c      	add	r4, r9
 800cce4:	7c66      	ldrb	r6, [r4, #17]
 800cce6:	b996      	cbnz	r6, 800cd0e <alloc_socket+0x4e>
      sockets[i].conn       = newconn;
 800cce8:	f8c4 8000 	str.w	r8, [r4]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800ccec:	f009 fa0a 	bl	8016104 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
 800ccf0:	e9c4 6601 	strd	r6, r6, [r4, #4]
      sockets[i].rcvevent   = 0;
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800ccf4:	f898 3000 	ldrb.w	r3, [r8]
      sockets[i].errevent   = 0;
 800ccf8:	81e6      	strh	r6, [r4, #14]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800ccfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	bf18      	it	ne
 800cd02:	2701      	movne	r7, #1
      sockets[i].err        = 0;
 800cd04:	7426      	strb	r6, [r4, #16]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800cd06:	81a7      	strh	r7, [r4, #12]
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
}
 800cd08:	4628      	mov	r0, r5
 800cd0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SYS_ARCH_UNPROTECT(lev);
 800cd0e:	4610      	mov	r0, r2
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800cd10:	3501      	adds	r5, #1
    SYS_ARCH_UNPROTECT(lev);
 800cd12:	f009 f9f7 	bl	8016104 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800cd16:	2d04      	cmp	r5, #4
 800cd18:	d1db      	bne.n	800ccd2 <alloc_socket+0x12>
  return -1;
 800cd1a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cd1e:	e7f3      	b.n	800cd08 <alloc_socket+0x48>
 800cd20:	20004620 	.word	0x20004620

0800cd24 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800cd24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd28:	460e      	mov	r6, r1
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f000 8085 	beq.w	800ce3c <event_callback+0x118>
    s = conn->socket;
 800cd32:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
 800cd34:	2d00      	cmp	r5, #0
 800cd36:	da0f      	bge.n	800cd58 <event_callback+0x34>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800cd38:	f009 f9d8 	bl	80160ec <sys_arch_protect>
      if (conn->socket < 0) {
 800cd3c:	69a5      	ldr	r5, [r4, #24]
      SYS_ARCH_PROTECT(lev);
 800cd3e:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	da07      	bge.n	800cd54 <event_callback+0x30>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800cd44:	b90e      	cbnz	r6, 800cd4a <event_callback+0x26>
          conn->socket--;
 800cd46:	3d01      	subs	r5, #1
 800cd48:	61a5      	str	r5, [r4, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800cd4a:	4618      	mov	r0, r3
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
}
 800cd4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SYS_ARCH_UNPROTECT(lev);
 800cd50:	f009 b9d8 	b.w	8016104 <sys_arch_unprotect>
      SYS_ARCH_UNPROTECT(lev);
 800cd54:	f009 f9d6 	bl	8016104 <sys_arch_unprotect>
    sock = get_socket(s);
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f7ff ff9d 	bl	800cc98 <get_socket>
    if (!sock) {
 800cd5e:	4604      	mov	r4, r0
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d06b      	beq.n	800ce3c <event_callback+0x118>
  SYS_ARCH_PROTECT(lev);
 800cd64:	f009 f9c2 	bl	80160ec <sys_arch_protect>
 800cd68:	4607      	mov	r7, r0
  switch (evt) {
 800cd6a:	2e04      	cmp	r6, #4
 800cd6c:	d816      	bhi.n	800cd9c <event_callback+0x78>
 800cd6e:	e8df f006 	tbb	[pc, r6]
 800cd72:	0a03      	.short	0x0a03
 800cd74:	100d      	.short	0x100d
 800cd76:	12          	.byte	0x12
 800cd77:	00          	.byte	0x00
      sock->rcvevent++;
 800cd78:	8963      	ldrh	r3, [r4, #10]
 800cd7a:	3301      	adds	r3, #1
      sock->rcvevent--;
 800cd7c:	8163      	strh	r3, [r4, #10]
  if (sock->select_waiting == 0) {
 800cd7e:	7c63      	ldrb	r3, [r4, #17]
 800cd80:	b9a3      	cbnz	r3, 800cdac <event_callback+0x88>
  SYS_ARCH_UNPROTECT(lev);
 800cd82:	4638      	mov	r0, r7
 800cd84:	e7e2      	b.n	800cd4c <event_callback+0x28>
      sock->rcvevent--;
 800cd86:	8963      	ldrh	r3, [r4, #10]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	e7f7      	b.n	800cd7c <event_callback+0x58>
      sock->sendevent = 1;
 800cd8c:	2301      	movs	r3, #1
      sock->sendevent = 0;
 800cd8e:	81a3      	strh	r3, [r4, #12]
      break;
 800cd90:	e7f5      	b.n	800cd7e <event_callback+0x5a>
      sock->sendevent = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e7fb      	b.n	800cd8e <event_callback+0x6a>
      sock->errevent = 1;
 800cd96:	2301      	movs	r3, #1
 800cd98:	81e3      	strh	r3, [r4, #14]
      break;
 800cd9a:	e7f0      	b.n	800cd7e <event_callback+0x5a>
      LWIP_ASSERT("unknown event", 0);
 800cd9c:	4b28      	ldr	r3, [pc, #160]	; (800ce40 <event_callback+0x11c>)
 800cd9e:	f240 625d 	movw	r2, #1629	; 0x65d
 800cda2:	4928      	ldr	r1, [pc, #160]	; (800ce44 <event_callback+0x120>)
 800cda4:	4828      	ldr	r0, [pc, #160]	; (800ce48 <event_callback+0x124>)
 800cda6:	f009 fd6f 	bl	8016888 <iprintf>
      break;
 800cdaa:	e7e8      	b.n	800cd7e <event_callback+0x5a>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cdac:	2301      	movs	r3, #1
 800cdae:	ea4f 1b55 	mov.w	fp, r5, lsr #5
    last_select_cb_ctr = select_cb_ctr;
 800cdb2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800ce50 <event_callback+0x12c>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cdb6:	f005 051f 	and.w	r5, r5, #31
 800cdba:	fa03 f505 	lsl.w	r5, r3, r5
        scb->sem_signalled = 1;
 800cdbe:	f04f 0901 	mov.w	r9, #1
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cdc2:	4b22      	ldr	r3, [pc, #136]	; (800ce4c <event_callback+0x128>)
 800cdc4:	681e      	ldr	r6, [r3, #0]
 800cdc6:	2e00      	cmp	r6, #0
 800cdc8:	d0db      	beq.n	800cd82 <event_callback+0x5e>
    if (scb->sem_signalled == 0) {
 800cdca:	6973      	ldr	r3, [r6, #20]
    last_select_cb_ctr = select_cb_ctr;
 800cdcc:	f8d8 a000 	ldr.w	sl, [r8]
    if (scb->sem_signalled == 0) {
 800cdd0:	b9fb      	cbnz	r3, 800ce12 <event_callback+0xee>
      if (sock->rcvevent > 0) {
 800cdd2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	dd07      	ble.n	800cdea <event_callback+0xc6>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cdda:	68b2      	ldr	r2, [r6, #8]
 800cddc:	b12a      	cbz	r2, 800cdea <event_callback+0xc6>
 800cdde:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 800cde2:	421d      	tst	r5, r3
 800cde4:	bf14      	ite	ne
 800cde6:	2301      	movne	r3, #1
 800cde8:	2300      	moveq	r3, #0
      if (sock->sendevent != 0) {
 800cdea:	89a2      	ldrh	r2, [r4, #12]
 800cdec:	b142      	cbz	r2, 800ce00 <event_callback+0xdc>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800cdee:	b93b      	cbnz	r3, 800ce00 <event_callback+0xdc>
 800cdf0:	68f2      	ldr	r2, [r6, #12]
 800cdf2:	b12a      	cbz	r2, 800ce00 <event_callback+0xdc>
 800cdf4:	f852 302b 	ldr.w	r3, [r2, fp, lsl #2]
 800cdf8:	421d      	tst	r5, r3
 800cdfa:	bf14      	ite	ne
 800cdfc:	2301      	movne	r3, #1
 800cdfe:	2300      	moveq	r3, #0
      if (sock->errevent != 0) {
 800ce00:	89e2      	ldrh	r2, [r4, #14]
 800ce02:	b192      	cbz	r2, 800ce2a <event_callback+0x106>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ce04:	b99b      	cbnz	r3, 800ce2e <event_callback+0x10a>
 800ce06:	6933      	ldr	r3, [r6, #16]
 800ce08:	b11b      	cbz	r3, 800ce12 <event_callback+0xee>
 800ce0a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ce0e:	421d      	tst	r5, r3
 800ce10:	d10d      	bne.n	800ce2e <event_callback+0x10a>
    SYS_ARCH_UNPROTECT(lev);
 800ce12:	4638      	mov	r0, r7
 800ce14:	f009 f976 	bl	8016104 <sys_arch_unprotect>
    SYS_ARCH_PROTECT(lev);
 800ce18:	f009 f968 	bl	80160ec <sys_arch_protect>
    if (last_select_cb_ctr != select_cb_ctr) {
 800ce1c:	f8d8 3000 	ldr.w	r3, [r8]
    SYS_ARCH_PROTECT(lev);
 800ce20:	4607      	mov	r7, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 800ce22:	4553      	cmp	r3, sl
 800ce24:	d1cb      	bne.n	800cdbe <event_callback+0x9a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ce26:	6836      	ldr	r6, [r6, #0]
 800ce28:	e7cd      	b.n	800cdc6 <event_callback+0xa2>
      if (do_signal) {
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f1      	beq.n	800ce12 <event_callback+0xee>
        scb->sem_signalled = 1;
 800ce2e:	f8c6 9014 	str.w	r9, [r6, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ce32:	f106 0018 	add.w	r0, r6, #24
 800ce36:	f009 f90f 	bl	8016058 <sys_sem_signal>
 800ce3a:	e7ea      	b.n	800ce12 <event_callback+0xee>
}
 800ce3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce40:	080195e0 	.word	0x080195e0
 800ce44:	08019612 	.word	0x08019612
 800ce48:	08018495 	.word	0x08018495
 800ce4c:	2000461c 	.word	0x2000461c
 800ce50:	20004618 	.word	0x20004618

0800ce54 <lwip_close>:
{
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sock = get_socket(s);
 800ce56:	f7ff ff1f 	bl	800cc98 <get_socket>
  if (!sock) {
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	b918      	cbnz	r0, 800ce66 <lwip_close+0x12>
    return -1;
 800ce5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800ce62:	4620      	mov	r0, r4
 800ce64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sock->conn != NULL) {
 800ce66:	6806      	ldr	r6, [r0, #0]
 800ce68:	b19e      	cbz	r6, 800ce92 <lwip_close+0x3e>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800ce6a:	7834      	ldrb	r4, [r6, #0]
 800ce6c:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800ce70:	f1a4 0310 	sub.w	r3, r4, #16
 800ce74:	425c      	negs	r4, r3
 800ce76:	415c      	adcs	r4, r3
  err = netconn_delete(sock->conn);
 800ce78:	6828      	ldr	r0, [r5, #0]
 800ce7a:	f7fe fcab 	bl	800b7d4 <netconn_delete>
  if (err != ERR_OK) {
 800ce7e:	4606      	mov	r6, r0
 800ce80:	b198      	cbz	r0, 800ceaa <lwip_close+0x56>
    sock_set_errno(sock, err_to_errno(err));
 800ce82:	f7ff fe71 	bl	800cb68 <err_to_errno>
 800ce86:	7428      	strb	r0, [r5, #16]
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d0e8      	beq.n	800ce5e <lwip_close+0xa>
 800ce8c:	4b11      	ldr	r3, [pc, #68]	; (800ced4 <lwip_close+0x80>)
 800ce8e:	6018      	str	r0, [r3, #0]
 800ce90:	e7e5      	b.n	800ce5e <lwip_close+0xa>
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 800ce92:	6844      	ldr	r4, [r0, #4]
 800ce94:	2c00      	cmp	r4, #0
 800ce96:	d0ef      	beq.n	800ce78 <lwip_close+0x24>
 800ce98:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <lwip_close+0x84>)
 800ce9a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800ce9e:	490f      	ldr	r1, [pc, #60]	; (800cedc <lwip_close+0x88>)
 800cea0:	480f      	ldr	r0, [pc, #60]	; (800cee0 <lwip_close+0x8c>)
 800cea2:	f009 fcf1 	bl	8016888 <iprintf>
  int is_tcp = 0;
 800cea6:	4634      	mov	r4, r6
 800cea8:	e7e6      	b.n	800ce78 <lwip_close+0x24>
  lastdata         = sock->lastdata;
 800ceaa:	686f      	ldr	r7, [r5, #4]
  sock->lastoffset = 0;
 800ceac:	8128      	strh	r0, [r5, #8]
  sock->lastdata   = NULL;
 800ceae:	6068      	str	r0, [r5, #4]
  sock->err        = 0;
 800ceb0:	7428      	strb	r0, [r5, #16]
  SYS_ARCH_SET(sock->conn, NULL);
 800ceb2:	f009 f91b 	bl	80160ec <sys_arch_protect>
 800ceb6:	602e      	str	r6, [r5, #0]
 800ceb8:	f009 f924 	bl	8016104 <sys_arch_unprotect>
  if (lastdata != NULL) {
 800cebc:	b147      	cbz	r7, 800ced0 <lwip_close+0x7c>
      pbuf_free((struct pbuf *)lastdata);
 800cebe:	4638      	mov	r0, r7
    if (is_tcp) {
 800cec0:	b11c      	cbz	r4, 800ceca <lwip_close+0x76>
      pbuf_free((struct pbuf *)lastdata);
 800cec2:	f002 fb8d 	bl	800f5e0 <pbuf_free>
  return 0;
 800cec6:	4634      	mov	r4, r6
 800cec8:	e7cb      	b.n	800ce62 <lwip_close+0xe>
      netbuf_delete((struct netbuf *)lastdata);
 800ceca:	f7ff fe5b 	bl	800cb84 <netbuf_delete>
 800cece:	e7c8      	b.n	800ce62 <lwip_close+0xe>
  return 0;
 800ced0:	463c      	mov	r4, r7
 800ced2:	e7c6      	b.n	800ce62 <lwip_close+0xe>
 800ced4:	2000e0bc 	.word	0x2000e0bc
 800ced8:	080195e0 	.word	0x080195e0
 800cedc:	08019620 	.word	0x08019620
 800cee0:	08018495 	.word	0x08018495

0800cee4 <lwip_connect>:
{
 800cee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cee6:	4615      	mov	r5, r2
  sock = get_socket(s);
 800cee8:	f7ff fed6 	bl	800cc98 <get_socket>
  if (!sock) {
 800ceec:	4604      	mov	r4, r0
 800ceee:	b918      	cbnz	r0, 800cef8 <lwip_connect+0x14>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800cef4:	b003      	add	sp, #12
 800cef6:	bd30      	pop	{r4, r5, pc}
  if (name->sa_family == AF_UNSPEC) {
 800cef8:	784b      	ldrb	r3, [r1, #1]
 800cefa:	b92b      	cbnz	r3, 800cf08 <lwip_connect+0x24>
    err = netconn_disconnect(sock->conn);
 800cefc:	6800      	ldr	r0, [r0, #0]
 800cefe:	f7fe fcd5 	bl	800b8ac <netconn_disconnect>
  if (err != ERR_OK) {
 800cf02:	b980      	cbnz	r0, 800cf26 <lwip_connect+0x42>
  sock_set_errno(sock, 0);
 800cf04:	7420      	strb	r0, [r4, #16]
  return 0;
 800cf06:	e7f5      	b.n	800cef4 <lwip_connect+0x10>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800cf08:	2d10      	cmp	r5, #16
 800cf0a:	d103      	bne.n	800cf14 <lwip_connect+0x30>
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d101      	bne.n	800cf14 <lwip_connect+0x30>
 800cf10:	078b      	lsls	r3, r1, #30
 800cf12:	d010      	beq.n	800cf36 <lwip_connect+0x52>
 800cf14:	4b0e      	ldr	r3, [pc, #56]	; (800cf50 <lwip_connect+0x6c>)
 800cf16:	f240 229f 	movw	r2, #671	; 0x29f
 800cf1a:	490e      	ldr	r1, [pc, #56]	; (800cf54 <lwip_connect+0x70>)
 800cf1c:	480e      	ldr	r0, [pc, #56]	; (800cf58 <lwip_connect+0x74>)
 800cf1e:	f009 fcb3 	bl	8016888 <iprintf>
 800cf22:	f06f 000f 	mvn.w	r0, #15
 800cf26:	f7ff fe1f 	bl	800cb68 <err_to_errno>
 800cf2a:	7420      	strb	r0, [r4, #16]
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d0df      	beq.n	800cef0 <lwip_connect+0xc>
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <lwip_connect+0x78>)
 800cf32:	6018      	str	r0, [r3, #0]
 800cf34:	e7dc      	b.n	800cef0 <lwip_connect+0xc>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800cf36:	684b      	ldr	r3, [r1, #4]
 800cf38:	ad02      	add	r5, sp, #8
 800cf3a:	8848      	ldrh	r0, [r1, #2]
 800cf3c:	f845 3d04 	str.w	r3, [r5, #-4]!
 800cf40:	f001 fa78 	bl	800e434 <lwip_htons>
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800cf44:	4629      	mov	r1, r5
 800cf46:	4602      	mov	r2, r0
 800cf48:	6820      	ldr	r0, [r4, #0]
 800cf4a:	f7fe fc89 	bl	800b860 <netconn_connect>
 800cf4e:	e7d8      	b.n	800cf02 <lwip_connect+0x1e>
 800cf50:	080195e0 	.word	0x080195e0
 800cf54:	08019637 	.word	0x08019637
 800cf58:	08018495 	.word	0x08018495
 800cf5c:	2000e0bc 	.word	0x2000e0bc

0800cf60 <lwip_recvfrom>:
{
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  void             *buf = NULL;
 800cf64:	2500      	movs	r5, #0
{
 800cf66:	b08b      	sub	sp, #44	; 0x2c
 800cf68:	9101      	str	r1, [sp, #4]
 800cf6a:	4690      	mov	r8, r2
 800cf6c:	469a      	mov	sl, r3
 800cf6e:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
  void             *buf = NULL;
 800cf72:	9504      	str	r5, [sp, #16]
  sock = get_socket(s);
 800cf74:	f7ff fe90 	bl	800cc98 <get_socket>
  if (!sock) {
 800cf78:	4604      	mov	r4, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	f000 8098 	beq.w	800d0b0 <lwip_recvfrom+0x150>
    if (sock->lastdata) {
 800cf80:	6863      	ldr	r3, [r4, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 8082 	beq.w	800d08c <lwip_recvfrom+0x12c>
      buf = sock->lastdata;
 800cf88:	9304      	str	r3, [sp, #16]
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800cf90:	781b      	ldrb	r3, [r3, #0]
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 800cf92:	9901      	ldr	r1, [sp, #4]
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cf94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf98:	2b10      	cmp	r3, #16
      p = ((struct netbuf *)buf)->p;
 800cf9a:	bf18      	it	ne
 800cf9c:	f8d9 9000 	ldrne.w	r9, [r9]
    buflen -= sock->lastoffset;
 800cfa0:	8923      	ldrh	r3, [r4, #8]
    buflen = p->tot_len;
 800cfa2:	f8b9 7008 	ldrh.w	r7, [r9, #8]
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 800cfa6:	4429      	add	r1, r5
    buflen -= sock->lastoffset;
 800cfa8:	1aff      	subs	r7, r7, r3
 800cfaa:	b2bf      	uxth	r7, r7
    if (len > buflen) {
 800cfac:	4547      	cmp	r7, r8
      copylen = buflen;
 800cfae:	bf34      	ite	cc
 800cfb0:	463e      	movcc	r6, r7
      copylen = (u16_t)len;
 800cfb2:	fa1f f688 	uxthcs.w	r6, r8
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 800cfb6:	4632      	mov	r2, r6
 800cfb8:	4648      	mov	r0, r9
 800cfba:	f002 fdb3 	bl	800fb24 <pbuf_copy_partial>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cfbe:	6823      	ldr	r3, [r4, #0]
    off += copylen;
 800cfc0:	4435      	add	r5, r6
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfc8:	2b10      	cmp	r3, #16
 800cfca:	d116      	bne.n	800cffa <lwip_recvfrom+0x9a>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 800cfcc:	4546      	cmp	r6, r8
 800cfce:	d906      	bls.n	800cfde <lwip_recvfrom+0x7e>
 800cfd0:	4b5c      	ldr	r3, [pc, #368]	; (800d144 <lwip_recvfrom+0x1e4>)
 800cfd2:	f240 3243 	movw	r2, #835	; 0x343
 800cfd6:	495c      	ldr	r1, [pc, #368]	; (800d148 <lwip_recvfrom+0x1e8>)
 800cfd8:	485c      	ldr	r0, [pc, #368]	; (800d14c <lwip_recvfrom+0x1ec>)
 800cfda:	f009 fc55 	bl	8016888 <iprintf>
      if ((len <= 0) ||
 800cfde:	ebb8 0806 	subs.w	r8, r8, r6
 800cfe2:	d00a      	beq.n	800cffa <lwip_recvfrom+0x9a>
 800cfe4:	f899 300d 	ldrb.w	r3, [r9, #13]
 800cfe8:	07db      	lsls	r3, r3, #31
 800cfea:	d406      	bmi.n	800cffa <lwip_recvfrom+0x9a>
          (p->flags & PBUF_FLAG_PUSH) ||
 800cfec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	dd02      	ble.n	800cffa <lwip_recvfrom+0x9a>
          (sock->rcvevent <= 0) ||
 800cff4:	f01a 0901 	ands.w	r9, sl, #1
 800cff8:	d032      	beq.n	800d060 <lwip_recvfrom+0x100>
      if (from && fromlen)
 800cffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cffc:	b373      	cbz	r3, 800d05c <lwip_recvfrom+0xfc>
 800cffe:	f1bb 0f00 	cmp.w	fp, #0
 800d002:	d02b      	beq.n	800d05c <lwip_recvfrom+0xfc>
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	7803      	ldrb	r3, [r0, #0]
 800d008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d00c:	2b10      	cmp	r3, #16
 800d00e:	f040 8085 	bne.w	800d11c <lwip_recvfrom+0x1bc>
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800d012:	2300      	movs	r3, #0
 800d014:	f10d 020e 	add.w	r2, sp, #14
 800d018:	a905      	add	r1, sp, #20
 800d01a:	f7fe fbf3 	bl	800b804 <netconn_getaddr>
          fromaddr = &tmpaddr;
 800d01e:	f10d 0914 	add.w	r9, sp, #20
        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800d022:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d026:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d02a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d02e:	f001 fa01 	bl	800e434 <lwip_htons>
 800d032:	f8d9 3000 	ldr.w	r3, [r9]
 800d036:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d03a:	9307      	str	r3, [sp, #28]
 800d03c:	2300      	movs	r3, #0
 800d03e:	e9cd 3308 	strd	r3, r3, [sp, #32]
          if (*fromlen > saddr.sa.sa_len) {
 800d042:	f8db 3000 	ldr.w	r3, [fp]
          MEMCPY(from, &saddr, *fromlen);
 800d046:	a906      	add	r1, sp, #24
          if (*fromlen > saddr.sa.sa_len) {
 800d048:	2b10      	cmp	r3, #16
            *fromlen = saddr.sa.sa_len;
 800d04a:	bf84      	itt	hi
 800d04c:	2310      	movhi	r3, #16
 800d04e:	f8cb 3000 	strhi.w	r3, [fp]
          MEMCPY(from, &saddr, *fromlen);
 800d052:	f8db 2000 	ldr.w	r2, [fp]
 800d056:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d058:	f009 fb5d 	bl	8016716 <memcpy>
 800d05c:	f04f 0901 	mov.w	r9, #1
    if ((flags & MSG_PEEK) == 0) {
 800d060:	f01a 0f01 	tst.w	sl, #1
 800d064:	d10d      	bne.n	800d082 <lwip_recvfrom+0x122>
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	9804      	ldr	r0, [sp, #16]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d070:	2b10      	cmp	r3, #16
 800d072:	d15a      	bne.n	800d12a <lwip_recvfrom+0x1ca>
 800d074:	1bbf      	subs	r7, r7, r6
 800d076:	2f00      	cmp	r7, #0
 800d078:	dd57      	ble.n	800d12a <lwip_recvfrom+0x1ca>
        sock->lastoffset += copylen;
 800d07a:	8923      	ldrh	r3, [r4, #8]
        sock->lastdata = buf;
 800d07c:	6060      	str	r0, [r4, #4]
        sock->lastoffset += copylen;
 800d07e:	441e      	add	r6, r3
 800d080:	8126      	strh	r6, [r4, #8]
  } while (!done);
 800d082:	f1b9 0f00 	cmp.w	r9, #0
 800d086:	f43f af7b 	beq.w	800cf80 <lwip_recvfrom+0x20>
 800d08a:	e00b      	b.n	800d0a4 <lwip_recvfrom+0x144>
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 800d08c:	f01a 0f08 	tst.w	sl, #8
 800d090:	d103      	bne.n	800d09a <lwip_recvfrom+0x13a>
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	7f1b      	ldrb	r3, [r3, #28]
 800d096:	079a      	lsls	r2, r3, #30
 800d098:	d50d      	bpl.n	800d0b6 <lwip_recvfrom+0x156>
 800d09a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	dc09      	bgt.n	800d0b6 <lwip_recvfrom+0x156>
        if (off > 0) {
 800d0a2:	b115      	cbz	r5, 800d0aa <lwip_recvfrom+0x14a>
  sock_set_errno(sock, 0);
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	7423      	strb	r3, [r4, #16]
  return off;
 800d0a8:	e028      	b.n	800d0fc <lwip_recvfrom+0x19c>
        set_errno(EWOULDBLOCK);
 800d0aa:	220b      	movs	r2, #11
 800d0ac:	4b28      	ldr	r3, [pc, #160]	; (800d150 <lwip_recvfrom+0x1f0>)
 800d0ae:	601a      	str	r2, [r3, #0]
    return -1;
 800d0b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d0b4:	e022      	b.n	800d0fc <lwip_recvfrom+0x19c>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d0b6:	6820      	ldr	r0, [r4, #0]
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 800d0b8:	a904      	add	r1, sp, #16
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d0ba:	7803      	ldrb	r3, [r0, #0]
 800d0bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0c0:	2b10      	cmp	r3, #16
 800d0c2:	d10d      	bne.n	800d0e0 <lwip_recvfrom+0x180>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 800d0c4:	f7fe fc10 	bl	800b8e8 <netconn_recv_tcp_pbuf>
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 800d0c8:	4606      	mov	r6, r0
      if (err != ERR_OK) {
 800d0ca:	b1d8      	cbz	r0, 800d104 <lwip_recvfrom+0x1a4>
        if (off > 0) {
 800d0cc:	b15d      	cbz	r5, 800d0e6 <lwip_recvfrom+0x186>
          if (err == ERR_CLSD) {
 800d0ce:	f110 060f 	adds.w	r6, r0, #15
 800d0d2:	d1e7      	bne.n	800d0a4 <lwip_recvfrom+0x144>
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	6820      	ldr	r0, [r4, #0]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	f7ff fe23 	bl	800cd24 <event_callback>
 800d0de:	e7e1      	b.n	800d0a4 <lwip_recvfrom+0x144>
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 800d0e0:	f7fe fc1e 	bl	800b920 <netconn_recv>
 800d0e4:	e7f0      	b.n	800d0c8 <lwip_recvfrom+0x168>
        sock_set_errno(sock, err_to_errno(err));
 800d0e6:	f7ff fd3f 	bl	800cb68 <err_to_errno>
 800d0ea:	7420      	strb	r0, [r4, #16]
 800d0ec:	b108      	cbz	r0, 800d0f2 <lwip_recvfrom+0x192>
 800d0ee:	4b18      	ldr	r3, [pc, #96]	; (800d150 <lwip_recvfrom+0x1f0>)
 800d0f0:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 800d0f2:	f116 050f 	adds.w	r5, r6, #15
 800d0f6:	bf18      	it	ne
 800d0f8:	2501      	movne	r5, #1
 800d0fa:	426d      	negs	r5, r5
}
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	b00b      	add	sp, #44	; 0x2c
 800d100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800d104:	9b04      	ldr	r3, [sp, #16]
 800d106:	b933      	cbnz	r3, 800d116 <lwip_recvfrom+0x1b6>
 800d108:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <lwip_recvfrom+0x1e4>)
 800d10a:	f240 3227 	movw	r2, #807	; 0x327
 800d10e:	4911      	ldr	r1, [pc, #68]	; (800d154 <lwip_recvfrom+0x1f4>)
 800d110:	480e      	ldr	r0, [pc, #56]	; (800d14c <lwip_recvfrom+0x1ec>)
 800d112:	f009 fbb9 	bl	8016888 <iprintf>
      sock->lastdata = buf;
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	6063      	str	r3, [r4, #4]
 800d11a:	e736      	b.n	800cf8a <lwip_recvfrom+0x2a>
          port = netbuf_fromport((struct netbuf *)buf);
 800d11c:	9b04      	ldr	r3, [sp, #16]
 800d11e:	899a      	ldrh	r2, [r3, #12]
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 800d120:	f103 0908 	add.w	r9, r3, #8
          port = netbuf_fromport((struct netbuf *)buf);
 800d124:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d128:	e77b      	b.n	800d022 <lwip_recvfrom+0xc2>
        sock->lastdata = NULL;
 800d12a:	2600      	movs	r6, #0
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d12c:	2b10      	cmp	r3, #16
        sock->lastdata = NULL;
 800d12e:	6066      	str	r6, [r4, #4]
        sock->lastoffset = 0;
 800d130:	8126      	strh	r6, [r4, #8]
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d132:	d103      	bne.n	800d13c <lwip_recvfrom+0x1dc>
          pbuf_free((struct pbuf *)buf);
 800d134:	f002 fa54 	bl	800f5e0 <pbuf_free>
        buf = NULL;
 800d138:	9604      	str	r6, [sp, #16]
 800d13a:	e7a2      	b.n	800d082 <lwip_recvfrom+0x122>
          netbuf_delete((struct netbuf *)buf);
 800d13c:	f7ff fd22 	bl	800cb84 <netbuf_delete>
 800d140:	e7fa      	b.n	800d138 <lwip_recvfrom+0x1d8>
 800d142:	bf00      	nop
 800d144:	080195e0 	.word	0x080195e0
 800d148:	08019655 	.word	0x08019655
 800d14c:	08018495 	.word	0x08018495
 800d150:	2000e0bc 	.word	0x2000e0bc
 800d154:	0801908c 	.word	0x0801908c

0800d158 <lwip_recv>:
{
 800d158:	b513      	push	{r0, r1, r4, lr}
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800d15a:	2400      	movs	r4, #0
 800d15c:	e9cd 4400 	strd	r4, r4, [sp]
 800d160:	f7ff fefe 	bl	800cf60 <lwip_recvfrom>
}
 800d164:	b002      	add	sp, #8
 800d166:	bd10      	pop	{r4, pc}

0800d168 <lwip_sendto>:
{
 800d168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16c:	b085      	sub	sp, #20
 800d16e:	4681      	mov	r9, r0
 800d170:	e9dd 480c 	ldrd	r4, r8, [sp, #48]	; 0x30
 800d174:	460f      	mov	r7, r1
 800d176:	4615      	mov	r5, r2
 800d178:	4619      	mov	r1, r3
  sock = get_socket(s);
 800d17a:	f7ff fd8d 	bl	800cc98 <get_socket>
  if (!sock) {
 800d17e:	4606      	mov	r6, r0
 800d180:	b910      	cbnz	r0, 800d188 <lwip_sendto+0x20>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800d182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d186:	e00b      	b.n	800d1a0 <lwip_sendto+0x38>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800d188:	6803      	ldr	r3, [r0, #0]
 800d18a:	781a      	ldrb	r2, [r3, #0]
 800d18c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800d190:	2a10      	cmp	r2, #16
 800d192:	d108      	bne.n	800d1a6 <lwip_sendto+0x3e>
    return lwip_send(s, data, size, flags);
 800d194:	460b      	mov	r3, r1
 800d196:	462a      	mov	r2, r5
 800d198:	4639      	mov	r1, r7
 800d19a:	4648      	mov	r0, r9
 800d19c:	f000 f85c 	bl	800d258 <lwip_send>
}
 800d1a0:	b005      	add	sp, #20
 800d1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 800d1a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800d1aa:	d306      	bcc.n	800d1ba <lwip_sendto+0x52>
 800d1ac:	4b25      	ldr	r3, [pc, #148]	; (800d244 <lwip_sendto+0xdc>)
 800d1ae:	f240 427b 	movw	r2, #1147	; 0x47b
 800d1b2:	4925      	ldr	r1, [pc, #148]	; (800d248 <lwip_sendto+0xe0>)
 800d1b4:	4825      	ldr	r0, [pc, #148]	; (800d24c <lwip_sendto+0xe4>)
 800d1b6:	f009 fb67 	bl	8016888 <iprintf>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800d1ba:	b914      	cbnz	r4, 800d1c2 <lwip_sendto+0x5a>
 800d1bc:	f1b8 0f00 	cmp.w	r8, #0
 800d1c0:	d018      	beq.n	800d1f4 <lwip_sendto+0x8c>
 800d1c2:	f1b8 0f10 	cmp.w	r8, #16
 800d1c6:	d104      	bne.n	800d1d2 <lwip_sendto+0x6a>
 800d1c8:	7863      	ldrb	r3, [r4, #1]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d101      	bne.n	800d1d2 <lwip_sendto+0x6a>
 800d1ce:	07a3      	lsls	r3, r4, #30
 800d1d0:	d010      	beq.n	800d1f4 <lwip_sendto+0x8c>
 800d1d2:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <lwip_sendto+0xdc>)
 800d1d4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800d1d8:	491d      	ldr	r1, [pc, #116]	; (800d250 <lwip_sendto+0xe8>)
 800d1da:	481c      	ldr	r0, [pc, #112]	; (800d24c <lwip_sendto+0xe4>)
 800d1dc:	f009 fb54 	bl	8016888 <iprintf>
 800d1e0:	f06f 000f 	mvn.w	r0, #15
 800d1e4:	f7ff fcc0 	bl	800cb68 <err_to_errno>
 800d1e8:	7430      	strb	r0, [r6, #16]
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d0c9      	beq.n	800d182 <lwip_sendto+0x1a>
 800d1ee:	4b19      	ldr	r3, [pc, #100]	; (800d254 <lwip_sendto+0xec>)
 800d1f0:	6018      	str	r0, [r3, #0]
 800d1f2:	e7c6      	b.n	800d182 <lwip_sendto+0x1a>
  buf.p = buf.ptr = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e9cd 3300 	strd	r3, r3, [sp]
  if (to) {
 800d1fa:	b304      	cbz	r4, 800d23e <lwip_sendto+0xd6>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800d1fc:	6863      	ldr	r3, [r4, #4]
 800d1fe:	8860      	ldrh	r0, [r4, #2]
 800d200:	9302      	str	r3, [sp, #8]
 800d202:	f001 f917 	bl	800e434 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 800d206:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 800d20a:	b2aa      	uxth	r2, r5
 800d20c:	4639      	mov	r1, r7
 800d20e:	4668      	mov	r0, sp
 800d210:	f7ff fce4 	bl	800cbdc <netbuf_ref>
  if (err == ERR_OK) {
 800d214:	4604      	mov	r4, r0
 800d216:	b920      	cbnz	r0, 800d222 <lwip_sendto+0xba>
    err = netconn_send(sock->conn, &buf);
 800d218:	4669      	mov	r1, sp
 800d21a:	6830      	ldr	r0, [r6, #0]
 800d21c:	f7fe fbd0 	bl	800b9c0 <netconn_send>
 800d220:	4604      	mov	r4, r0
  netbuf_free(&buf);
 800d222:	4668      	mov	r0, sp
 800d224:	f7ff fcc0 	bl	800cba8 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800d228:	4620      	mov	r0, r4
 800d22a:	f7ff fc9d 	bl	800cb68 <err_to_errno>
 800d22e:	7430      	strb	r0, [r6, #16]
 800d230:	b108      	cbz	r0, 800d236 <lwip_sendto+0xce>
 800d232:	4b08      	ldr	r3, [pc, #32]	; (800d254 <lwip_sendto+0xec>)
 800d234:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 800d236:	2c00      	cmp	r4, #0
 800d238:	d1a3      	bne.n	800d182 <lwip_sendto+0x1a>
 800d23a:	b2a8      	uxth	r0, r5
 800d23c:	e7b0      	b.n	800d1a0 <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800d23e:	9402      	str	r4, [sp, #8]
    remote_port = 0;
 800d240:	4620      	mov	r0, r4
 800d242:	e7e0      	b.n	800d206 <lwip_sendto+0x9e>
 800d244:	080195e0 	.word	0x080195e0
 800d248:	0801967a 	.word	0x0801967a
 800d24c:	08018495 	.word	0x08018495
 800d250:	0801969e 	.word	0x0801969e
 800d254:	2000e0bc 	.word	0x2000e0bc

0800d258 <lwip_send>:
{
 800d258:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d25c:	4605      	mov	r5, r0
 800d25e:	4690      	mov	r8, r2
 800d260:	461c      	mov	r4, r3
  sock = get_socket(s);
 800d262:	f7ff fd19 	bl	800cc98 <get_socket>
  if (!sock) {
 800d266:	4606      	mov	r6, r0
 800d268:	b920      	cbnz	r0, 800d274 <lwip_send+0x1c>
    return -1;
 800d26a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d26e:	b004      	add	sp, #16
 800d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800d274:	6800      	ldr	r0, [r0, #0]
 800d276:	7803      	ldrb	r3, [r0, #0]
 800d278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d27c:	2b10      	cmp	r3, #16
 800d27e:	f04f 0300 	mov.w	r3, #0
 800d282:	d007      	beq.n	800d294 <lwip_send+0x3c>
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800d284:	e9cd 3300 	strd	r3, r3, [sp]
 800d288:	4642      	mov	r2, r8
 800d28a:	4623      	mov	r3, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f7ff ff6b 	bl	800d168 <lwip_sendto>
 800d292:	e7ec      	b.n	800d26e <lwip_send+0x16>
  written = 0;
 800d294:	af04      	add	r7, sp, #16
 800d296:	f847 3d04 	str.w	r3, [r7, #-4]!
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800d29a:	10e3      	asrs	r3, r4, #3
 800d29c:	f003 0502 	and.w	r5, r3, #2
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 800d2a0:	1063      	asrs	r3, r4, #1
 800d2a2:	f003 0304 	and.w	r3, r3, #4
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800d2a6:	432b      	orrs	r3, r5
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800d2a8:	f043 0301 	orr.w	r3, r3, #1
 800d2ac:	4642      	mov	r2, r8
 800d2ae:	9700      	str	r7, [sp, #0]
 800d2b0:	f7fe fba4 	bl	800b9fc <netconn_write_partly>
 800d2b4:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 800d2b6:	f7ff fc57 	bl	800cb68 <err_to_errno>
 800d2ba:	7430      	strb	r0, [r6, #16]
 800d2bc:	b108      	cbz	r0, 800d2c2 <lwip_send+0x6a>
 800d2be:	4b03      	ldr	r3, [pc, #12]	; (800d2cc <lwip_send+0x74>)
 800d2c0:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (int)written : -1);
 800d2c2:	2c00      	cmp	r4, #0
 800d2c4:	d1d1      	bne.n	800d26a <lwip_send+0x12>
 800d2c6:	9803      	ldr	r0, [sp, #12]
 800d2c8:	e7d1      	b.n	800d26e <lwip_send+0x16>
 800d2ca:	bf00      	nop
 800d2cc:	2000e0bc 	.word	0x2000e0bc

0800d2d0 <lwip_socket>:
  switch (type) {
 800d2d0:	2902      	cmp	r1, #2
{
 800d2d2:	b538      	push	{r3, r4, r5, lr}
 800d2d4:	4613      	mov	r3, r2
  switch (type) {
 800d2d6:	d011      	beq.n	800d2fc <lwip_socket+0x2c>
 800d2d8:	2903      	cmp	r1, #3
 800d2da:	d005      	beq.n	800d2e8 <lwip_socket+0x18>
 800d2dc:	2901      	cmp	r1, #1
 800d2de:	d115      	bne.n	800d30c <lwip_socket+0x3c>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800d2e0:	4a15      	ldr	r2, [pc, #84]	; (800d338 <lwip_socket+0x68>)
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	2010      	movs	r0, #16
 800d2e6:	e002      	b.n	800d2ee <lwip_socket+0x1e>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800d2e8:	2040      	movs	r0, #64	; 0x40
 800d2ea:	4a13      	ldr	r2, [pc, #76]	; (800d338 <lwip_socket+0x68>)
 800d2ec:	b2d9      	uxtb	r1, r3
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800d2ee:	f7fe fa17 	bl	800b720 <netconn_new_with_proto_and_callback>
 800d2f2:	4604      	mov	r4, r0
  if (!conn) {
 800d2f4:	b988      	cbnz	r0, 800d31a <lwip_socket+0x4a>
    set_errno(ENOBUFS);
 800d2f6:	4b11      	ldr	r3, [pc, #68]	; (800d33c <lwip_socket+0x6c>)
 800d2f8:	2269      	movs	r2, #105	; 0x69
 800d2fa:	e009      	b.n	800d310 <lwip_socket+0x40>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800d2fc:	2a88      	cmp	r2, #136	; 0x88
 800d2fe:	f04f 0100 	mov.w	r1, #0
 800d302:	4a0d      	ldr	r2, [pc, #52]	; (800d338 <lwip_socket+0x68>)
 800d304:	bf0c      	ite	eq
 800d306:	2021      	moveq	r0, #33	; 0x21
 800d308:	2020      	movne	r0, #32
 800d30a:	e7f0      	b.n	800d2ee <lwip_socket+0x1e>
    set_errno(EINVAL);
 800d30c:	2216      	movs	r2, #22
 800d30e:	4b0b      	ldr	r3, [pc, #44]	; (800d33c <lwip_socket+0x6c>)
    return -1;
 800d310:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    set_errno(ENOBUFS);
 800d314:	601a      	str	r2, [r3, #0]
}
 800d316:	4628      	mov	r0, r5
 800d318:	bd38      	pop	{r3, r4, r5, pc}
  i = alloc_socket(conn, 0);
 800d31a:	2100      	movs	r1, #0
 800d31c:	f7ff fcd0 	bl	800ccc0 <alloc_socket>
  if (i == -1) {
 800d320:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
 800d322:	4605      	mov	r5, r0
  if (i == -1) {
 800d324:	d106      	bne.n	800d334 <lwip_socket+0x64>
    netconn_delete(conn);
 800d326:	4620      	mov	r0, r4
 800d328:	f7fe fa54 	bl	800b7d4 <netconn_delete>
    set_errno(ENFILE);
 800d32c:	2217      	movs	r2, #23
 800d32e:	4b03      	ldr	r3, [pc, #12]	; (800d33c <lwip_socket+0x6c>)
 800d330:	601a      	str	r2, [r3, #0]
    return -1;
 800d332:	e7f0      	b.n	800d316 <lwip_socket+0x46>
  conn->socket = i;
 800d334:	61a0      	str	r0, [r4, #24]
  return i;
 800d336:	e7ee      	b.n	800d316 <lwip_socket+0x46>
 800d338:	0800cd25 	.word	0x0800cd25
 800d33c:	2000e0bc 	.word	0x2000e0bc

0800d340 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800d340:	4b1e      	ldr	r3, [pc, #120]	; (800d3bc <tcpip_thread+0x7c>)
{
 800d342:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	b113      	cbz	r3, 800d34e <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 800d348:	4a1d      	ldr	r2, [pc, #116]	; (800d3c0 <tcpip_thread+0x80>)
 800d34a:	6810      	ldr	r0, [r2, #0]
 800d34c:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800d34e:	481d      	ldr	r0, [pc, #116]	; (800d3c4 <tcpip_thread+0x84>)
 800d350:	f008 feab 	bl	80160aa <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800d354:	4d1b      	ldr	r5, [pc, #108]	; (800d3c4 <tcpip_thread+0x84>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800d356:	4e1c      	ldr	r6, [pc, #112]	; (800d3c8 <tcpip_thread+0x88>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d358:	4c1c      	ldr	r4, [pc, #112]	; (800d3cc <tcpip_thread+0x8c>)
    UNLOCK_TCPIP_CORE();
 800d35a:	4628      	mov	r0, r5
 800d35c:	f008 feaa 	bl	80160b4 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800d360:	a901      	add	r1, sp, #4
 800d362:	4630      	mov	r0, r6
 800d364:	f005 ff08 	bl	8013178 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d368:	4628      	mov	r0, r5
 800d36a:	f008 fe9e 	bl	80160aa <sys_mutex_lock>
    if (msg == NULL) {
 800d36e:	9b01      	ldr	r3, [sp, #4]
 800d370:	b933      	cbnz	r3, 800d380 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d372:	4623      	mov	r3, r4
 800d374:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d376:	4916      	ldr	r1, [pc, #88]	; (800d3d0 <tcpip_thread+0x90>)
 800d378:	4816      	ldr	r0, [pc, #88]	; (800d3d4 <tcpip_thread+0x94>)
 800d37a:	f009 fa85 	bl	8016888 <iprintf>
      break;
 800d37e:	e7ec      	b.n	800d35a <tcpip_thread+0x1a>
    switch (msg->type) {
 800d380:	781a      	ldrb	r2, [r3, #0]
 800d382:	2a03      	cmp	r2, #3
 800d384:	d00c      	beq.n	800d3a0 <tcpip_thread+0x60>
 800d386:	2a04      	cmp	r2, #4
 800d388:	d010      	beq.n	800d3ac <tcpip_thread+0x6c>
 800d38a:	2a02      	cmp	r2, #2
 800d38c:	d112      	bne.n	800d3b4 <tcpip_thread+0x74>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800d38e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d392:	6858      	ldr	r0, [r3, #4]
 800d394:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d396:	2009      	movs	r0, #9
 800d398:	9901      	ldr	r1, [sp, #4]
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d39a:	f001 ff63 	bl	800f264 <memp_free>
      break;
 800d39e:	e7dc      	b.n	800d35a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d3a0:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 800d3a4:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d3a6:	9901      	ldr	r1, [sp, #4]
 800d3a8:	2008      	movs	r0, #8
 800d3aa:	e7f6      	b.n	800d39a <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d3ac:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 800d3b0:	4790      	blx	r2
      break;
 800d3b2:	e7d2      	b.n	800d35a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d3b4:	4623      	mov	r3, r4
 800d3b6:	229b      	movs	r2, #155	; 0x9b
 800d3b8:	e7dd      	b.n	800d376 <tcpip_thread+0x36>
 800d3ba:	bf00      	nop
 800d3bc:	20004674 	.word	0x20004674
 800d3c0:	20004678 	.word	0x20004678
 800d3c4:	2000af78 	.word	0x2000af78
 800d3c8:	20004670 	.word	0x20004670
 800d3cc:	08019719 	.word	0x08019719
 800d3d0:	08019749 	.word	0x08019749
 800d3d4:	08018495 	.word	0x08018495

0800d3d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800d3dc:	4810      	ldr	r0, [pc, #64]	; (800d420 <tcpip_inpkt+0x48>)
{
 800d3de:	460e      	mov	r6, r1
 800d3e0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800d3e2:	f008 fdfe 	bl	8015fe2 <sys_mbox_valid>
 800d3e6:	b928      	cbnz	r0, 800d3f4 <tcpip_inpkt+0x1c>
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	; (800d424 <tcpip_inpkt+0x4c>)
 800d3ea:	22b5      	movs	r2, #181	; 0xb5
 800d3ec:	490e      	ldr	r1, [pc, #56]	; (800d428 <tcpip_inpkt+0x50>)
 800d3ee:	480f      	ldr	r0, [pc, #60]	; (800d42c <tcpip_inpkt+0x54>)
 800d3f0:	f009 fa4a 	bl	8016888 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d3f4:	2009      	movs	r0, #9
 800d3f6:	f001 ff19 	bl	800f22c <memp_malloc>
  if (msg == NULL) {
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	b168      	cbz	r0, 800d41a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800d3fe:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 800d400:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_INPKT;
 800d404:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 800d406:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800d408:	4601      	mov	r1, r0
 800d40a:	4805      	ldr	r0, [pc, #20]	; (800d420 <tcpip_inpkt+0x48>)
 800d40c:	f008 fdac 	bl	8015f68 <sys_mbox_trypost>
 800d410:	b128      	cbz	r0, 800d41e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d412:	4621      	mov	r1, r4
 800d414:	2009      	movs	r0, #9
 800d416:	f001 ff25 	bl	800f264 <memp_free>
    return ERR_MEM;
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d420:	20004670 	.word	0x20004670
 800d424:	08019719 	.word	0x08019719
 800d428:	0801970c 	.word	0x0801970c
 800d42c:	08018495 	.word	0x08018495

0800d430 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d430:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 800d434:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800d438:	bf14      	ite	ne
 800d43a:	4a02      	ldrne	r2, [pc, #8]	; (800d444 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800d43c:	4a02      	ldreq	r2, [pc, #8]	; (800d448 <tcpip_input+0x18>)
 800d43e:	f7ff bfcb 	b.w	800d3d8 <tcpip_inpkt>
 800d442:	bf00      	nop
 800d444:	08015e11 	.word	0x08015e11
 800d448:	08015221 	.word	0x08015221

0800d44c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800d450:	4813      	ldr	r0, [pc, #76]	; (800d4a0 <tcpip_callback_with_block+0x54>)
{
 800d452:	460e      	mov	r6, r1
 800d454:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800d456:	f008 fdc4 	bl	8015fe2 <sys_mbox_valid>
 800d45a:	b928      	cbnz	r0, 800d468 <tcpip_callback_with_block+0x1c>
 800d45c:	4b11      	ldr	r3, [pc, #68]	; (800d4a4 <tcpip_callback_with_block+0x58>)
 800d45e:	22ee      	movs	r2, #238	; 0xee
 800d460:	4911      	ldr	r1, [pc, #68]	; (800d4a8 <tcpip_callback_with_block+0x5c>)
 800d462:	4812      	ldr	r0, [pc, #72]	; (800d4ac <tcpip_callback_with_block+0x60>)
 800d464:	f009 fa10 	bl	8016888 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d468:	2008      	movs	r0, #8
 800d46a:	f001 fedf 	bl	800f22c <memp_malloc>
  if (msg == NULL) {
 800d46e:	4604      	mov	r4, r0
 800d470:	b190      	cbz	r0, 800d498 <tcpip_callback_with_block+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d472:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;
 800d474:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 800d478:	7003      	strb	r3, [r0, #0]
  if (block) {
    sys_mbox_post(&mbox, msg);
 800d47a:	4601      	mov	r1, r0
 800d47c:	4808      	ldr	r0, [pc, #32]	; (800d4a0 <tcpip_callback_with_block+0x54>)
  if (block) {
 800d47e:	b11d      	cbz	r5, 800d488 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 800d480:	f008 fd66 	bl	8015f50 <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 800d484:	2000      	movs	r0, #0
}
 800d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800d488:	f008 fd6e 	bl	8015f68 <sys_mbox_trypost>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d0fa      	beq.n	800d486 <tcpip_callback_with_block+0x3a>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d490:	4621      	mov	r1, r4
 800d492:	2008      	movs	r0, #8
 800d494:	f001 fee6 	bl	800f264 <memp_free>
    return ERR_MEM;
 800d498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d49c:	e7f3      	b.n	800d486 <tcpip_callback_with_block+0x3a>
 800d49e:	bf00      	nop
 800d4a0:	20004670 	.word	0x20004670
 800d4a4:	08019719 	.word	0x08019719
 800d4a8:	0801970c 	.word	0x0801970c
 800d4ac:	08018495 	.word	0x08018495

0800d4b0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d4b4:	4c05      	ldr	r4, [pc, #20]	; (800d4cc <tcpip_send_msg_wait_sem+0x1c>)
{
 800d4b6:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f008 fdf6 	bl	80160aa <sys_mutex_lock>
  fn(apimsg);
 800d4be:	4630      	mov	r0, r6
 800d4c0:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f008 fdf6 	bl	80160b4 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	2000af78 	.word	0x2000af78

0800d4d0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d4d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	460c      	mov	r4, r1
  lwip_init();
 800d4d6:	f001 fc20 	bl	800ed1a <lwip_init>

  tcpip_init_done = initfunc;
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d4dc:	2106      	movs	r1, #6
  tcpip_init_done = initfunc;
 800d4de:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800d4e0:	4b11      	ldr	r3, [pc, #68]	; (800d528 <tcpip_init+0x58>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d4e2:	4812      	ldr	r0, [pc, #72]	; (800d52c <tcpip_init+0x5c>)
  tcpip_init_done_arg = arg;
 800d4e4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d4e6:	f008 fd17 	bl	8015f18 <sys_mbox_new>
 800d4ea:	b130      	cbz	r0, 800d4fa <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d4ec:	4b10      	ldr	r3, [pc, #64]	; (800d530 <tcpip_init+0x60>)
 800d4ee:	f240 12d5 	movw	r2, #469	; 0x1d5
 800d4f2:	4910      	ldr	r1, [pc, #64]	; (800d534 <tcpip_init+0x64>)
 800d4f4:	4810      	ldr	r0, [pc, #64]	; (800d538 <tcpip_init+0x68>)
 800d4f6:	f009 f9c7 	bl	8016888 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d4fa:	4810      	ldr	r0, [pc, #64]	; (800d53c <tcpip_init+0x6c>)
 800d4fc:	f008 fdc6 	bl	801608c <sys_mutex_new>
 800d500:	b130      	cbz	r0, 800d510 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d502:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <tcpip_init+0x60>)
 800d504:	f240 12d9 	movw	r2, #473	; 0x1d9
 800d508:	490d      	ldr	r1, [pc, #52]	; (800d540 <tcpip_init+0x70>)
 800d50a:	480b      	ldr	r0, [pc, #44]	; (800d538 <tcpip_init+0x68>)
 800d50c:	f009 f9bc 	bl	8016888 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d510:	2200      	movs	r2, #0
 800d512:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800d516:	9200      	str	r2, [sp, #0]
 800d518:	490a      	ldr	r1, [pc, #40]	; (800d544 <tcpip_init+0x74>)
 800d51a:	480b      	ldr	r0, [pc, #44]	; (800d548 <tcpip_init+0x78>)
 800d51c:	f008 fdcd 	bl	80160ba <sys_thread_new>
}
 800d520:	b003      	add	sp, #12
 800d522:	bd30      	pop	{r4, r5, pc}
 800d524:	20004674 	.word	0x20004674
 800d528:	20004678 	.word	0x20004678
 800d52c:	20004670 	.word	0x20004670
 800d530:	08019719 	.word	0x08019719
 800d534:	080196bb 	.word	0x080196bb
 800d538:	08018495 	.word	0x08018495
 800d53c:	2000af78 	.word	0x2000af78
 800d540:	080196de 	.word	0x080196de
 800d544:	0800d341 	.word	0x0800d341
 800d548:	080196ff 	.word	0x080196ff

0800d54c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800d550:	4605      	mov	r5, r0
 800d552:	b1a8      	cbz	r0, 800d580 <fs_open+0x34>
 800d554:	b1a1      	cbz	r1, 800d580 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800d556:	4c0c      	ldr	r4, [pc, #48]	; (800d588 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800d558:	6861      	ldr	r1, [r4, #4]
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7f2 fe68 	bl	8000230 <strcmp>
 800d560:	b940      	cbnz	r0, 800d574 <fs_open+0x28>
      file->data = (const char *)f->data;
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 800d566:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 800d568:	60e8      	str	r0, [r5, #12]
      file->index = f->len;
 800d56a:	e9c5 3301 	strd	r3, r3, [r5, #4]
      file->flags = f->flags;
 800d56e:	7c23      	ldrb	r3, [r4, #16]
 800d570:	742b      	strb	r3, [r5, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800d572:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800d574:	6824      	ldr	r4, [r4, #0]
 800d576:	2c00      	cmp	r4, #0
 800d578:	d1ee      	bne.n	800d558 <fs_open+0xc>
  return ERR_VAL;
 800d57a:	f06f 0005 	mvn.w	r0, #5
 800d57e:	e7f8      	b.n	800d572 <fs_open+0x26>
     return ERR_ARG;
 800d580:	f06f 000f 	mvn.w	r0, #15
 800d584:	e7f5      	b.n	800d572 <fs_open+0x26>
 800d586:	bf00      	nop
 800d588:	0802066c 	.word	0x0802066c

0800d58c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800d58c:	4770      	bx	lr

0800d58e <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 800d58e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 800d592:	1a10      	subs	r0, r2, r0
 800d594:	4770      	bx	lr

0800d596 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800d596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59a:	4605      	mov	r5, r0
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 800d59c:	8810      	ldrh	r0, [r2, #0]
{
 800d59e:	460f      	mov	r7, r1
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	4698      	mov	r8, r3
  if (len == 0) {
 800d5a4:	b310      	cbz	r0, 800d5ec <http_write+0x56>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800d5a6:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 800d5a8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800d5ac:	0064      	lsls	r4, r4, #1
 800d5ae:	b2a4      	uxth	r4, r4
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	bf28      	it	cs
 800d5b4:	461c      	movcs	r4, r3
 800d5b6:	4284      	cmp	r4, r0
 800d5b8:	bf28      	it	cs
 800d5ba:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800d5bc:	4643      	mov	r3, r8
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4639      	mov	r1, r7
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f004 feca 	bl	801235c <tcp_write>
    if (err == ERR_MEM) {
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d10c      	bne.n	800d5e6 <http_write+0x50>
      if ((tcp_sndbuf(pcb) == 0) ||
 800d5cc:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800d5d0:	b133      	cbz	r3, 800d5e0 <http_write+0x4a>
 800d5d2:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800d5d6:	2b08      	cmp	r3, #8
 800d5d8:	d802      	bhi.n	800d5e0 <http_write+0x4a>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
          /* no need to try smaller sizes */
          len = 1;
      } else {
        len /= 2;
 800d5da:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800d5dc:	2c01      	cmp	r4, #1
 800d5de:	d8ed      	bhi.n	800d5bc <http_write+0x26>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	8033      	strh	r3, [r6, #0]
 800d5e4:	e002      	b.n	800d5ec <http_write+0x56>
  if (err == ERR_OK) {
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d1fa      	bne.n	800d5e0 <http_write+0x4a>
    *length = len;
 800d5ea:	8034      	strh	r4, [r6, #0]
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
}
 800d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5f0 <http_state_eof>:
{
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	4604      	mov	r4, r0
  if(hs->handle) {
 800d5f4:	6940      	ldr	r0, [r0, #20]
 800d5f6:	b118      	cbz	r0, 800d600 <http_state_eof+0x10>
    fs_close(hs->handle);
 800d5f8:	f7ff ffc8 	bl	800d58c <fs_close>
    hs->handle = NULL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 800d600:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d602:	b118      	cbz	r0, 800d60c <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 800d604:	f001 fbd4 	bl	800edb0 <mem_free>
    hs->ssi = NULL;
 800d608:	2300      	movs	r3, #0
 800d60a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 800d60c:	6a20      	ldr	r0, [r4, #32]
 800d60e:	b118      	cbz	r0, 800d618 <http_state_eof+0x28>
    pbuf_free(hs->req);
 800d610:	f001 ffe6 	bl	800f5e0 <pbuf_free>
    hs->req = NULL;
 800d614:	2300      	movs	r3, #0
 800d616:	6223      	str	r3, [r4, #32]
}
 800d618:	bd10      	pop	{r4, pc}
	...

0800d61c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 800d620:	490a      	ldr	r1, [pc, #40]	; (800d64c <http_get_404_file+0x30>)
  err = fs_open(&hs->file_handle, *uri);
 800d622:	4604      	mov	r4, r0
  *uri = "/404.html";
 800d624:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 800d626:	f7ff ff91 	bl	800d54c <fs_open>
  if (err != ERR_OK) {
 800d62a:	b168      	cbz	r0, 800d648 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800d62c:	4908      	ldr	r1, [pc, #32]	; (800d650 <http_get_404_file+0x34>)
    err = fs_open(&hs->file_handle, *uri);
 800d62e:	4620      	mov	r0, r4
    *uri = "/404.htm";
 800d630:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 800d632:	f7ff ff8b 	bl	800d54c <fs_open>
    if (err != ERR_OK) {
 800d636:	b138      	cbz	r0, 800d648 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800d638:	4906      	ldr	r1, [pc, #24]	; (800d654 <http_get_404_file+0x38>)
      err = fs_open(&hs->file_handle, *uri);
 800d63a:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 800d63c:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 800d63e:	f7ff ff85 	bl	800d54c <fs_open>
      if (err != ERR_OK) {
 800d642:	b108      	cbz	r0, 800d648 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800d644:	2400      	movs	r4, #0
 800d646:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 800d648:	4620      	mov	r0, r4
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	080207f8 	.word	0x080207f8
 800d650:	08020802 	.word	0x08020802
 800d654:	0802080b 	.word	0x0802080b

0800d658 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d658:	b570      	push	{r4, r5, r6, lr}
 800d65a:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d65c:	4615      	mov	r5, r2
 800d65e:	bb2a      	cbnz	r2, 800d6ac <http_accept+0x54>
 800d660:	b321      	cbz	r1, 800d6ac <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d662:	2101      	movs	r1, #1
 800d664:	4620      	mov	r0, r4
 800d666:	f002 fcd9 	bl	801001c <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800d66a:	20b0      	movs	r0, #176	; 0xb0
 800d66c:	f001 fce4 	bl	800f038 <mem_malloc>
  if (ret != NULL) {
 800d670:	4606      	mov	r6, r0
 800d672:	b1f0      	cbz	r0, 800d6b2 <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 800d674:	22b0      	movs	r2, #176	; 0xb0
 800d676:	4629      	mov	r1, r5
 800d678:	f009 f858 	bl	801672c <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800d67c:	4631      	mov	r1, r6
 800d67e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 800d680:	61f4      	str	r4, [r6, #28]
  tcp_arg(pcb, hs);
 800d682:	f002 fce3 	bl	801004c <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800d686:	490c      	ldr	r1, [pc, #48]	; (800d6b8 <http_accept+0x60>)
 800d688:	4620      	mov	r0, r4
 800d68a:	f002 fce3 	bl	8010054 <tcp_recv>
  tcp_err(pcb, http_err);
 800d68e:	490b      	ldr	r1, [pc, #44]	; (800d6bc <http_accept+0x64>)
 800d690:	4620      	mov	r0, r4
 800d692:	f002 fd0d 	bl	80100b0 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d696:	490a      	ldr	r1, [pc, #40]	; (800d6c0 <http_accept+0x68>)
 800d698:	4620      	mov	r0, r4
 800d69a:	2204      	movs	r2, #4
 800d69c:	f002 fd26 	bl	80100ec <tcp_poll>
  tcp_sent(pcb, http_sent);
 800d6a0:	4908      	ldr	r1, [pc, #32]	; (800d6c4 <http_accept+0x6c>)
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f002 fcee 	bl	8010084 <tcp_sent>

  return ERR_OK;
}
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800d6ac:	f06f 0505 	mvn.w	r5, #5
 800d6b0:	e7fa      	b.n	800d6a8 <http_accept+0x50>
    return ERR_MEM;
 800d6b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d6b6:	e7f7      	b.n	800d6a8 <http_accept+0x50>
 800d6b8:	0800dbc9 	.word	0x0800dbc9
 800d6bc:	0800e05d 	.word	0x0800e05d
 800d6c0:	0800db8d 	.word	0x0800db8d
 800d6c4:	0800db75 	.word	0x0800db75

0800d6c8 <http_close_conn>:
{
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	460d      	mov	r5, r1
  tcp_arg(pcb, NULL);
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f002 fcbc 	bl	801004c <tcp_arg>
  tcp_recv(pcb, NULL);
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f002 fcbc 	bl	8010054 <tcp_recv>
  tcp_err(pcb, NULL);
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f002 fce6 	bl	80100b0 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	f002 fcff 	bl	80100ec <tcp_poll>
  tcp_sent(pcb, NULL);
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f002 fcc7 	bl	8010084 <tcp_sent>
  if (hs != NULL) {
 800d6f6:	b12d      	cbz	r5, 800d704 <http_close_conn+0x3c>
    http_state_eof(hs);
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f7ff ff79 	bl	800d5f0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800d6fe:	4628      	mov	r0, r5
 800d700:	f001 fb56 	bl	800edb0 <mem_free>
  err = tcp_close(pcb);
 800d704:	4620      	mov	r0, r4
 800d706:	f002 ffff 	bl	8010708 <tcp_close>
  if (err != ERR_OK) {
 800d70a:	4605      	mov	r5, r0
 800d70c:	b120      	cbz	r0, 800d718 <http_close_conn+0x50>
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d70e:	2204      	movs	r2, #4
 800d710:	4902      	ldr	r1, [pc, #8]	; (800d71c <http_close_conn+0x54>)
 800d712:	4620      	mov	r0, r4
 800d714:	f002 fcea 	bl	80100ec <tcp_poll>
}
 800d718:	4628      	mov	r0, r5
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	0800db8d 	.word	0x0800db8d

0800d720 <http_send>:
{
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	4680      	mov	r8, r0
 800d726:	b087      	sub	sp, #28
  if (hs == NULL) {
 800d728:	460d      	mov	r5, r1
 800d72a:	b139      	cbz	r1, 800d73c <http_send+0x1c>
  if (hs->left == 0) {
 800d72c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800d72e:	b9ab      	cbnz	r3, 800d75c <http_send+0x3c>
  if (hs->handle == NULL) {
 800d730:	6948      	ldr	r0, [r1, #20]
 800d732:	b940      	cbnz	r0, 800d746 <http_send+0x26>
    http_close_conn(pcb, hs);
 800d734:	4629      	mov	r1, r5
 800d736:	4640      	mov	r0, r8
 800d738:	f7ff ffc6 	bl	800d6c8 <http_close_conn>
      return 0;
 800d73c:	2600      	movs	r6, #0
}
 800d73e:	4630      	mov	r0, r6
 800d740:	b007      	add	sp, #28
 800d742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bytes_left = fs_bytes_left(hs->handle);
 800d746:	f7ff ff22 	bl	800d58e <fs_bytes_left>
  if (bytes_left <= 0) {
 800d74a:	2800      	cmp	r0, #0
 800d74c:	ddf2      	ble.n	800d734 <http_send+0x14>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800d74e:	4b94      	ldr	r3, [pc, #592]	; (800d9a0 <http_send+0x280>)
 800d750:	f240 4283 	movw	r2, #1155	; 0x483
 800d754:	4993      	ldr	r1, [pc, #588]	; (800d9a4 <http_send+0x284>)
 800d756:	4894      	ldr	r0, [pc, #592]	; (800d9a8 <http_send+0x288>)
 800d758:	f009 f896 	bl	8016888 <iprintf>
  if(hs->ssi) {
 800d75c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800d75e:	69a9      	ldr	r1, [r5, #24]
 800d760:	2c00      	cmp	r4, #0
 800d762:	f000 81bb 	beq.w	800dadc <http_send+0x3bc>
  len = tcp_sndbuf(pcb);
 800d766:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 800d76a:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(ssi->parsed > hs->file) {
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	428b      	cmp	r3, r1
 800d772:	f240 81b0 	bls.w	800dad6 <http_send+0x3b6>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d77a:	1a5b      	subs	r3, r3, r1
 800d77c:	4293      	cmp	r3, r2
 800d77e:	bfa8      	it	ge
 800d780:	4613      	movge	r3, r2
 800d782:	aa06      	add	r2, sp, #24
 800d784:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d788:	4640      	mov	r0, r8
 800d78a:	2301      	movs	r3, #1
 800d78c:	f7ff ff03 	bl	800d596 <http_write>
    if (err == ERR_OK) {
 800d790:	4681      	mov	r9, r0
 800d792:	b9a0      	cbnz	r0, 800d7be <http_send+0x9e>
      data_to_send = 1;
 800d794:	2601      	movs	r6, #1
      hs->file += len;
 800d796:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d79a:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 800d79c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 800d79e:	440a      	add	r2, r1
      hs->left -= len;
 800d7a0:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 800d7a2:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 800d7a4:	626b      	str	r3, [r5, #36]	; 0x24
    if(tcp_sndbuf(pcb) == 0) {
 800d7a6:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 800d7aa:	bb23      	cbnz	r3, 800d7f6 <http_send+0xd6>
  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800d7ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1c5      	bne.n	800d73e <http_send+0x1e>
 800d7b2:	6968      	ldr	r0, [r5, #20]
 800d7b4:	f7ff feeb 	bl	800d58e <fs_bytes_left>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	dcc0      	bgt.n	800d73e <http_send+0x1e>
 800d7bc:	e7ba      	b.n	800d734 <http_send+0x14>
  u8_t data_to_send = 0;
 800d7be:	2600      	movs	r6, #0
 800d7c0:	e7f1      	b.n	800d7a6 <http_send+0x86>
    if (len == 0) {
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	d0f2      	beq.n	800d7ac <http_send+0x8c>
    switch(ssi->tag_state) {
 800d7c6:	f894 20db 	ldrb.w	r2, [r4, #219]	; 0xdb
 800d7ca:	2a04      	cmp	r2, #4
 800d7cc:	d816      	bhi.n	800d7fc <http_send+0xdc>
 800d7ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d7d2:	0005      	.short	0x0005
 800d7d4:	0056003d 	.word	0x0056003d
 800d7d8:	01470077 	.word	0x01470077
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800d7dc:	6822      	ldr	r2, [r4, #0]
        ssi->parse_left--;
 800d7de:	3b01      	subs	r3, #1
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800d7e0:	7811      	ldrb	r1, [r2, #0]
        ssi->parsed++;
 800d7e2:	3201      	adds	r2, #1
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800d7e4:	293c      	cmp	r1, #60	; 0x3c
          ssi->tag_state = TAG_LEADIN;
 800d7e6:	bf08      	it	eq
 800d7e8:	2101      	moveq	r1, #1
        ssi->parse_left--;
 800d7ea:	60a3      	str	r3, [r4, #8]
          ssi->tag_state = TAG_LEADIN;
 800d7ec:	bf04      	itt	eq
 800d7ee:	f884 10db 	strbeq.w	r1, [r4, #219]	; 0xdb
          ssi->tag_index = 1;
 800d7f2:	81a1      	strheq	r1, [r4, #12]
        ssi->parsed++;
 800d7f4:	6022      	str	r2, [r4, #0]
  while((ssi->parse_left) && (err == ERR_OK)) {
 800d7f6:	68a3      	ldr	r3, [r4, #8]
    if (len == 0) {
 800d7f8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  while((ssi->parse_left) && (err == ERR_OK)) {
 800d7fc:	b113      	cbz	r3, 800d804 <http_send+0xe4>
 800d7fe:	f1b9 0f00 	cmp.w	r9, #0
 800d802:	d0de      	beq.n	800d7c2 <http_send+0xa2>
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800d804:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800d808:	2b04      	cmp	r3, #4
 800d80a:	d0cf      	beq.n	800d7ac <http_send+0x8c>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	69a9      	ldr	r1, [r5, #24]
 800d810:	428b      	cmp	r3, r1
 800d812:	d9cb      	bls.n	800d7ac <http_send+0x8c>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d818:	1a5b      	subs	r3, r3, r1
 800d81a:	4293      	cmp	r3, r2
 800d81c:	bfa8      	it	ge
 800d81e:	4613      	movge	r3, r2
 800d820:	aa06      	add	r2, sp, #24
 800d822:	f822 3d02 	strh.w	r3, [r2, #-2]!
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d826:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d828:	4640      	mov	r0, r8
 800d82a:	3300      	adds	r3, #0
 800d82c:	bf18      	it	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	f7ff feb1 	bl	800d596 <http_write>
    if (err == ERR_OK) {
 800d834:	2800      	cmp	r0, #0
 800d836:	d1b9      	bne.n	800d7ac <http_send+0x8c>
    hs->file += len;
 800d838:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800d83c:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 800d83e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 800d840:	440a      	add	r2, r1
    hs->left -= len;
 800d842:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 800d844:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 800d846:	626b      	str	r3, [r5, #36]	; 0x24
    data_to_send = 1;
 800d848:	2601      	movs	r6, #1
 800d84a:	e7af      	b.n	800d7ac <http_send+0x8c>
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800d84c:	89a2      	ldrh	r2, [r4, #12]
 800d84e:	2a05      	cmp	r2, #5
 800d850:	d105      	bne.n	800d85e <http_send+0x13e>
          ssi->tag_index = 0;
 800d852:	2300      	movs	r3, #0
 800d854:	81a3      	strh	r3, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 800d856:	2302      	movs	r3, #2
          ssi->tag_state = TAG_NONE;
 800d858:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
 800d85c:	e7cb      	b.n	800d7f6 <http_send+0xd6>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800d85e:	6821      	ldr	r1, [r4, #0]
 800d860:	4852      	ldr	r0, [pc, #328]	; (800d9ac <http_send+0x28c>)
 800d862:	780f      	ldrb	r7, [r1, #0]
 800d864:	5c10      	ldrb	r0, [r2, r0]
          ssi->parse_left--;
 800d866:	3b01      	subs	r3, #1
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800d868:	4287      	cmp	r7, r0
            ssi->tag_state = TAG_NONE;
 800d86a:	bf13      	iteet	ne
 800d86c:	2200      	movne	r2, #0
            ssi->tag_index++;
 800d86e:	3201      	addeq	r2, #1
 800d870:	81a2      	strheq	r2, [r4, #12]
            ssi->tag_state = TAG_NONE;
 800d872:	f884 20db 	strbne.w	r2, [r4, #219]	; 0xdb
          ssi->parse_left--;
 800d876:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 800d878:	3101      	adds	r1, #1
          ssi->parsed++;
 800d87a:	6021      	str	r1, [r4, #0]
 800d87c:	e7bb      	b.n	800d7f6 <http_send+0xd6>
 800d87e:	6820      	ldr	r0, [r4, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d880:	89a2      	ldrh	r2, [r4, #12]
 800d882:	7801      	ldrb	r1, [r0, #0]
 800d884:	2a00      	cmp	r2, #0
 800d886:	f040 814d 	bne.w	800db24 <http_send+0x404>
 800d88a:	f1a1 0709 	sub.w	r7, r1, #9
 800d88e:	b2ff      	uxtb	r7, r7
 800d890:	2f17      	cmp	r7, #23
 800d892:	f200 8139 	bhi.w	800db08 <http_send+0x3e8>
 800d896:	f8df c138 	ldr.w	ip, [pc, #312]	; 800d9d0 <http_send+0x2b0>
 800d89a:	fa2c f707 	lsr.w	r7, ip, r7
 800d89e:	07ff      	lsls	r7, r7, #31
 800d8a0:	f140 8130 	bpl.w	800db04 <http_send+0x3e4>
          ssi->parse_left--;
 800d8a4:	3b01      	subs	r3, #1
          ssi->parsed++;
 800d8a6:	3001      	adds	r0, #1
          ssi->parse_left--;
 800d8a8:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 800d8aa:	6020      	str	r0, [r4, #0]
 800d8ac:	e7a3      	b.n	800d7f6 <http_send+0xd6>
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800d8ae:	2a07      	cmp	r2, #7
 800d8b0:	f200 8134 	bhi.w	800db1c <http_send+0x3fc>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800d8b4:	1c53      	adds	r3, r2, #1
 800d8b6:	81a3      	strh	r3, [r4, #12]
 800d8b8:	7803      	ldrb	r3, [r0, #0]
 800d8ba:	4422      	add	r2, r4
 800d8bc:	7453      	strb	r3, [r2, #17]
 800d8be:	e14b      	b.n	800db58 <http_send+0x438>
 800d8c0:	6821      	ldr	r1, [r4, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d8c2:	89a2      	ldrh	r2, [r4, #12]
 800d8c4:	f811 7b01 	ldrb.w	r7, [r1], #1
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	b962      	cbnz	r2, 800d8e6 <http_send+0x1c6>
 800d8cc:	f1a7 0009 	sub.w	r0, r7, #9
 800d8d0:	b2c0      	uxtb	r0, r0
 800d8d2:	2817      	cmp	r0, #23
 800d8d4:	d807      	bhi.n	800d8e6 <http_send+0x1c6>
 800d8d6:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800d9d0 <http_send+0x2b0>
 800d8da:	fa2c f000 	lsr.w	r0, ip, r0
 800d8de:	07c0      	lsls	r0, r0, #31
 800d8e0:	d501      	bpl.n	800d8e6 <http_send+0x1c6>
          ssi->parse_left--;
 800d8e2:	60a3      	str	r3, [r4, #8]
 800d8e4:	e7c9      	b.n	800d87a <http_send+0x15a>
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800d8e6:	4832      	ldr	r0, [pc, #200]	; (800d9b0 <http_send+0x290>)
          ssi->parse_left--;
 800d8e8:	60a3      	str	r3, [r4, #8]
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800d8ea:	5c10      	ldrb	r0, [r2, r0]
          ssi->parsed++;
 800d8ec:	6021      	str	r1, [r4, #0]
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800d8ee:	42b8      	cmp	r0, r7
 800d8f0:	f040 80b4 	bne.w	800da5c <http_send+0x33c>
          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800d8f4:	2a02      	cmp	r2, #2
 800d8f6:	f040 80ae 	bne.w	800da56 <http_send+0x336>
  ssi = hs->ssi;
 800d8fa:	6aef      	ldr	r7, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800d8fc:	b937      	cbnz	r7, 800d90c <http_send+0x1ec>
 800d8fe:	4b28      	ldr	r3, [pc, #160]	; (800d9a0 <http_send+0x280>)
 800d900:	f240 22fd 	movw	r2, #765	; 0x2fd
 800d904:	492b      	ldr	r1, [pc, #172]	; (800d9b4 <http_send+0x294>)
 800d906:	4828      	ldr	r0, [pc, #160]	; (800d9a8 <http_send+0x288>)
 800d908:	f008 ffbe 	bl	8016888 <iprintf>
  if(g_pfnSSIHandler
 800d90c:	4b2a      	ldr	r3, [pc, #168]	; (800d9b8 <http_send+0x298>)
 800d90e:	f107 0211 	add.w	r2, r7, #17
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	9201      	str	r2, [sp, #4]
 800d916:	b14b      	cbz	r3, 800d92c <http_send+0x20c>
     && g_ppcTags && g_iNumTags
 800d918:	4a28      	ldr	r2, [pc, #160]	; (800d9bc <http_send+0x29c>)
 800d91a:	6812      	ldr	r2, [r2, #0]
 800d91c:	b132      	cbz	r2, 800d92c <http_send+0x20c>
 800d91e:	4928      	ldr	r1, [pc, #160]	; (800d9c0 <http_send+0x2a0>)
 800d920:	f8d1 b000 	ldr.w	fp, [r1]
 800d924:	f1bb 0f00 	cmp.w	fp, #0
 800d928:	f040 8092 	bne.w	800da50 <http_send+0x330>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800d92c:	9801      	ldr	r0, [sp, #4]
 800d92e:	f7f2 fc89 	bl	8000244 <strlen>
 800d932:	2809      	cmp	r0, #9
 800d934:	bf28      	it	cs
 800d936:	2009      	movcs	r0, #9
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800d938:	f107 0b1a 	add.w	fp, r7, #26
 800d93c:	4682      	mov	sl, r0
 800d93e:	465a      	mov	r2, fp
 800d940:	4b20      	ldr	r3, [pc, #128]	; (800d9c4 <http_send+0x2a4>)
 800d942:	f103 0110 	add.w	r1, r3, #16
 800d946:	f853 0b04 	ldr.w	r0, [r3], #4
 800d94a:	428b      	cmp	r3, r1
 800d94c:	f842 0b04 	str.w	r0, [r2], #4
 800d950:	d1f9      	bne.n	800d946 <http_send+0x226>
 800d952:	881b      	ldrh	r3, [r3, #0]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800d954:	f107 002c 	add.w	r0, r7, #44	; 0x2c
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800d958:	8013      	strh	r3, [r2, #0]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800d95a:	9901      	ldr	r1, [sp, #4]
 800d95c:	4652      	mov	r2, sl
 800d95e:	f008 feda 	bl	8016716 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800d962:	4819      	ldr	r0, [pc, #100]	; (800d9c8 <http_send+0x2a8>)
 800d964:	f10a 022c 	add.w	r2, sl, #44	; 0x2c
 800d968:	6801      	ldr	r1, [r0, #0]
 800d96a:	18bb      	adds	r3, r7, r2
 800d96c:	50b9      	str	r1, [r7, r2]
 800d96e:	8882      	ldrh	r2, [r0, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800d970:	44ba      	add	sl, r7
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800d972:	809a      	strh	r2, [r3, #4]
 800d974:	7982      	ldrb	r2, [r0, #6]
  len = strlen(ssi->tag_insert);
 800d976:	4658      	mov	r0, fp
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800d978:	719a      	strb	r2, [r3, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	f88a 3033 	strb.w	r3, [sl, #51]	; 0x33
  len = strlen(ssi->tag_insert);
 800d980:	f7f2 fc60 	bl	8000244 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800d984:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 800d988:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800d98a:	d306      	bcc.n	800d99a <http_send+0x27a>
 800d98c:	4b04      	ldr	r3, [pc, #16]	; (800d9a0 <http_send+0x280>)
 800d98e:	f240 3236 	movw	r2, #822	; 0x336
 800d992:	490e      	ldr	r1, [pc, #56]	; (800d9cc <http_send+0x2ac>)
 800d994:	4804      	ldr	r0, [pc, #16]	; (800d9a8 <http_send+0x288>)
 800d996:	f008 ff77 	bl	8016888 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800d99a:	f8a7 a00e 	strh.w	sl, [r7, #14]
 800d99e:	e02e      	b.n	800d9fe <http_send+0x2de>
 800d9a0:	0802085d 	.word	0x0802085d
 800d9a4:	08020894 	.word	0x08020894
 800d9a8:	08018495 	.word	0x08018495
 800d9ac:	080208cb 	.word	0x080208cb
 800d9b0:	080208e8 	.word	0x080208e8
 800d9b4:	080208ec 	.word	0x080208ec
 800d9b8:	2000af80 	.word	0x2000af80
 800d9bc:	2000af90 	.word	0x2000af90
 800d9c0:	2000af88 	.word	0x2000af88
 800d9c4:	080208f8 	.word	0x080208f8
 800d9c8:	0802090b 	.word	0x0802090b
 800d9cc:	080227b8 	.word	0x080227b8
 800d9d0:	00800013 	.word	0x00800013
    for(tag = 0; tag < g_iNumTags; tag++) {
 800d9d4:	f10a 0a01 	add.w	sl, sl, #1
 800d9d8:	45d3      	cmp	fp, sl
 800d9da:	dda7      	ble.n	800d92c <http_send+0x20c>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800d9dc:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800d9e0:	9801      	ldr	r0, [sp, #4]
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	9202      	str	r2, [sp, #8]
 800d9e6:	f7f2 fc23 	bl	8000230 <strcmp>
 800d9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d1f0      	bne.n	800d9d4 <http_send+0x2b4>
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800d9f2:	22c0      	movs	r2, #192	; 0xc0
 800d9f4:	f107 011a 	add.w	r1, r7, #26
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4798      	blx	r3
 800d9fc:	81f8      	strh	r0, [r7, #14]
            ssi->tag_index = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	81a3      	strh	r3, [r4, #12]
            ssi->tag_state = TAG_SENDING;
 800da02:	2304      	movs	r3, #4
            if (ssi->tag_end > hs->file) {
 800da04:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_state = TAG_SENDING;
 800da06:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
            ssi->tag_end = ssi->parsed;
 800da0a:	6823      	ldr	r3, [r4, #0]
            if (ssi->tag_end > hs->file) {
 800da0c:	428b      	cmp	r3, r1
            ssi->tag_end = ssi->parsed;
 800da0e:	6063      	str	r3, [r4, #4]
            if (ssi->tag_end > hs->file) {
 800da10:	f67f aef1 	bls.w	800d7f6 <http_send+0xd6>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800da14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da18:	1a5b      	subs	r3, r3, r1
 800da1a:	4293      	cmp	r3, r2
 800da1c:	bfa8      	it	ge
 800da1e:	4613      	movge	r3, r2
 800da20:	aa06      	add	r2, sp, #24
 800da22:	f822 3d02 	strh.w	r3, [r2, #-2]!
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800da26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da28:	4640      	mov	r0, r8
 800da2a:	3300      	adds	r3, #0
 800da2c:	bf18      	it	ne
 800da2e:	2301      	movne	r3, #1
 800da30:	f7ff fdb1 	bl	800d596 <http_write>
              if (err == ERR_OK) {
 800da34:	4681      	mov	r9, r0
 800da36:	2800      	cmp	r0, #0
 800da38:	f47f aedd 	bne.w	800d7f6 <http_send+0xd6>
            hs->file += len;
 800da3c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800da40:	69aa      	ldr	r2, [r5, #24]
            hs->left -= len;
 800da42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            hs->file += len;
 800da44:	440a      	add	r2, r1
            hs->left -= len;
 800da46:	1a5b      	subs	r3, r3, r1
            hs->file += len;
 800da48:	61aa      	str	r2, [r5, #24]
            hs->left -= len;
 800da4a:	626b      	str	r3, [r5, #36]	; 0x24
              data_to_send = 1;
 800da4c:	2601      	movs	r6, #1
 800da4e:	e6d2      	b.n	800d7f6 <http_send+0xd6>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800da50:	f04f 0a00 	mov.w	sl, #0
 800da54:	e7c0      	b.n	800d9d8 <http_send+0x2b8>
            ssi->tag_index++;
 800da56:	3201      	adds	r2, #1
 800da58:	81a2      	strh	r2, [r4, #12]
 800da5a:	e6cc      	b.n	800d7f6 <http_send+0xd6>
          ssi->tag_state = TAG_NONE;
 800da5c:	2300      	movs	r3, #0
 800da5e:	e6fb      	b.n	800d858 <http_send+0x138>
        if(ssi->tag_end > hs->file) {
 800da60:	6863      	ldr	r3, [r4, #4]
 800da62:	69a9      	ldr	r1, [r5, #24]
 800da64:	428b      	cmp	r3, r1
 800da66:	d91b      	bls.n	800daa0 <http_send+0x380>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800da68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800da6c:	1a5b      	subs	r3, r3, r1
 800da6e:	4293      	cmp	r3, r2
 800da70:	dd10      	ble.n	800da94 <http_send+0x374>
 800da72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da76:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800da7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800da7c:	f10d 0216 	add.w	r2, sp, #22
 800da80:	3300      	adds	r3, #0
 800da82:	bf18      	it	ne
 800da84:	2301      	movne	r3, #1
 800da86:	4640      	mov	r0, r8
 800da88:	f7ff fd85 	bl	800d596 <http_write>
          if (err == ERR_OK) {
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d0d5      	beq.n	800da3c <http_send+0x31c>
 800da90:	4681      	mov	r9, r0
 800da92:	e6b0      	b.n	800d7f6 <http_send+0xd6>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800da94:	b29b      	uxth	r3, r3
 800da96:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0ce      	beq.n	800da3c <http_send+0x31c>
 800da9e:	e7ec      	b.n	800da7a <http_send+0x35a>
          if(ssi->tag_index < ssi->tag_insert_len) {
 800daa0:	89a1      	ldrh	r1, [r4, #12]
 800daa2:	89e3      	ldrh	r3, [r4, #14]
 800daa4:	4299      	cmp	r1, r3
 800daa6:	d213      	bcs.n	800dad0 <http_send+0x3b0>
            len = (ssi->tag_insert_len - ssi->tag_index);
 800daa8:	1a5b      	subs	r3, r3, r1
 800daaa:	aa06      	add	r2, sp, #24
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800daac:	311a      	adds	r1, #26
            len = (ssi->tag_insert_len - ssi->tag_index);
 800daae:	f822 3d02 	strh.w	r3, [r2, #-2]!
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800dab2:	4421      	add	r1, r4
 800dab4:	2301      	movs	r3, #1
 800dab6:	4640      	mov	r0, r8
 800dab8:	f7ff fd6d 	bl	800d596 <http_write>
            if (err == ERR_OK) {
 800dabc:	4681      	mov	r9, r0
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f47f ae99 	bne.w	800d7f6 <http_send+0xd6>
              ssi->tag_index += len;
 800dac4:	89a3      	ldrh	r3, [r4, #12]
 800dac6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800daca:	4413      	add	r3, r2
 800dacc:	81a3      	strh	r3, [r4, #12]
 800dace:	e7bd      	b.n	800da4c <http_send+0x32c>
              ssi->tag_index = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	e6c0      	b.n	800d858 <http_send+0x138>
  u8_t data_to_send = 0;
 800dad6:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 800dad8:	46b1      	mov	r9, r6
 800dada:	e68c      	b.n	800d7f6 <http_send+0xd6>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800dadc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800dae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dae4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dae6:	4283      	cmp	r3, r0
 800dae8:	bf88      	it	hi
 800daea:	4613      	movhi	r3, r2
 800daec:	aa06      	add	r2, sp, #24
 800daee:	f822 3d02 	strh.w	r3, [r2, #-2]!
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800daf2:	4640      	mov	r0, r8
 800daf4:	4623      	mov	r3, r4
 800daf6:	f7ff fd4e 	bl	800d596 <http_write>
  if (err == ERR_OK) {
 800dafa:	2800      	cmp	r0, #0
 800dafc:	f43f ae9c 	beq.w	800d838 <http_send+0x118>
  u8_t data_to_send = 0;
 800db00:	4626      	mov	r6, r4
 800db02:	e653      	b.n	800d7ac <http_send+0x8c>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800db04:	2920      	cmp	r1, #32
 800db06:	d009      	beq.n	800db1c <http_send+0x3fc>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800db08:	f1a1 0309 	sub.w	r3, r1, #9
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d904      	bls.n	800db1a <http_send+0x3fa>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800db10:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 800db14:	290d      	cmp	r1, #13
 800db16:	f47f aeca 	bne.w	800d8ae <http_send+0x18e>
          if(ssi->tag_index == 0) {
 800db1a:	b92a      	cbnz	r2, 800db28 <http_send+0x408>
            ssi->tag_state = TAG_NONE;
 800db1c:	2300      	movs	r3, #0
 800db1e:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
 800db22:	e019      	b.n	800db58 <http_send+0x438>
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800db24:	2920      	cmp	r1, #32
 800db26:	d1ef      	bne.n	800db08 <http_send+0x3e8>
            ssi->tag_state = TAG_LEADOUT;
 800db28:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800db2a:	2aff      	cmp	r2, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 800db2c:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800db30:	d906      	bls.n	800db40 <http_send+0x420>
 800db32:	4b0d      	ldr	r3, [pc, #52]	; (800db68 <http_send+0x448>)
 800db34:	f240 521b 	movw	r2, #1307	; 0x51b
 800db38:	490c      	ldr	r1, [pc, #48]	; (800db6c <http_send+0x44c>)
 800db3a:	480d      	ldr	r0, [pc, #52]	; (800db70 <http_send+0x450>)
 800db3c:	f008 fea4 	bl	8016888 <iprintf>
            ssi->tag_name[ssi->tag_index] = '\0';
 800db40:	2200      	movs	r2, #0
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	7423      	strb	r3, [r4, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800db46:	4423      	add	r3, r4
 800db48:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b2d      	cmp	r3, #45	; 0x2d
              ssi->tag_index = 1;
 800db50:	bf0a      	itet	eq
 800db52:	2301      	moveq	r3, #1
              ssi->tag_index = 0;
 800db54:	81a2      	strhne	r2, [r4, #12]
              ssi->tag_index = 1;
 800db56:	81a3      	strheq	r3, [r4, #12]
        ssi->parse_left--;
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	3301      	adds	r3, #1
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	e647      	b.n	800d7f6 <http_send+0xd6>
 800db66:	bf00      	nop
 800db68:	0802085d 	.word	0x0802085d
 800db6c:	080208d1 	.word	0x080208d1
 800db70:	08018495 	.word	0x08018495

0800db74 <http_sent>:
{
 800db74:	b508      	push	{r3, lr}
 800db76:	460b      	mov	r3, r1
  if (hs == NULL) {
 800db78:	4601      	mov	r1, r0
 800db7a:	b128      	cbz	r0, 800db88 <http_sent+0x14>
  hs->retries = 0;
 800db7c:	2200      	movs	r2, #0
 800db7e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff fdcc 	bl	800d720 <http_send>
}
 800db88:	2000      	movs	r0, #0
 800db8a:	bd08      	pop	{r3, pc}

0800db8c <http_poll>:
{
 800db8c:	b510      	push	{r4, lr}
 800db8e:	460c      	mov	r4, r1
  if (hs == NULL) {
 800db90:	4601      	mov	r1, r0
 800db92:	b920      	cbnz	r0, 800db9e <http_poll+0x12>
      http_close_conn(pcb, hs);
 800db94:	4620      	mov	r0, r4
 800db96:	f7ff fd97 	bl	800d6c8 <http_close_conn>
}
 800db9a:	2000      	movs	r0, #0
 800db9c:	bd10      	pop	{r4, pc}
    hs->retries++;
 800db9e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800dba2:	3301      	adds	r3, #1
 800dba4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800dba6:	2b04      	cmp	r3, #4
    hs->retries++;
 800dba8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800dbac:	d0f2      	beq.n	800db94 <http_poll+0x8>
    if(hs && (hs->handle)) {
 800dbae:	6943      	ldr	r3, [r0, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d0f2      	beq.n	800db9a <http_poll+0xe>
      if(http_send(pcb, hs)) {
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f7ff fdb3 	bl	800d720 <http_send>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d0ed      	beq.n	800db9a <http_poll+0xe>
        tcp_output(pcb);
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f004 ff44 	bl	8012a4c <tcp_output>
 800dbc4:	e7e9      	b.n	800db9a <http_poll+0xe>
	...

0800dbc8 <http_recv>:
{
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	b089      	sub	sp, #36	; 0x24
 800dbce:	4604      	mov	r4, r0
 800dbd0:	9100      	str	r1, [sp, #0]
 800dbd2:	4616      	mov	r6, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800dbd4:	461f      	mov	r7, r3
 800dbd6:	b94b      	cbnz	r3, 800dbec <http_recv+0x24>
 800dbd8:	b152      	cbz	r2, 800dbf0 <http_recv+0x28>
 800dbda:	b988      	cbnz	r0, 800dc00 <http_recv+0x38>
      tcp_recved(pcb, p->tot_len);
 800dbdc:	9800      	ldr	r0, [sp, #0]
 800dbde:	8931      	ldrh	r1, [r6, #8]
 800dbe0:	f002 f9c8 	bl	800ff74 <tcp_recved>
      pbuf_free(p);
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f001 fcfb 	bl	800f5e0 <pbuf_free>
 800dbea:	e001      	b.n	800dbf0 <http_recv+0x28>
    if (p != NULL) {
 800dbec:	2a00      	cmp	r2, #0
 800dbee:	d1f5      	bne.n	800dbdc <http_recv+0x14>
    http_close_conn(pcb, hs);
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	9800      	ldr	r0, [sp, #0]
 800dbf4:	f7ff fd68 	bl	800d6c8 <http_close_conn>
}
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	b009      	add	sp, #36	; 0x24
 800dbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tcp_recved(pcb, p->tot_len);
 800dc00:	8911      	ldrh	r1, [r2, #8]
 800dc02:	9800      	ldr	r0, [sp, #0]
 800dc04:	f002 f9b6 	bl	800ff74 <tcp_recved>
    if (hs->handle == NULL) {
 800dc08:	6963      	ldr	r3, [r4, #20]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f040 81fa 	bne.w	800e004 <http_recv+0x43c>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800dc10:	69a3      	ldr	r3, [r4, #24]
 800dc12:	6a20      	ldr	r0, [r4, #32]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f040 8207 	bne.w	800e028 <http_recv+0x460>
  if (hs->req == NULL) {
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f040 8094 	bne.w	800dd48 <http_recv+0x180>
    hs->req = p;
 800dc20:	6226      	str	r6, [r4, #32]
  pbuf_ref(p);
 800dc22:	4630      	mov	r0, r6
 800dc24:	f001 fe98 	bl	800f958 <pbuf_ref>
  if (hs->req->next != NULL) {
 800dc28:	6a20      	ldr	r0, [r4, #32]
 800dc2a:	6803      	ldr	r3, [r0, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 808f 	beq.w	800dd50 <http_recv+0x188>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800dc32:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800dc36:	f8b0 b008 	ldrh.w	fp, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800dc3a:	4986      	ldr	r1, [pc, #536]	; (800de54 <http_recv+0x28c>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800dc3c:	459b      	cmp	fp, r3
 800dc3e:	bf28      	it	cs
 800dc40:	469b      	movcs	fp, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800dc42:	2300      	movs	r3, #0
 800dc44:	465a      	mov	r2, fp
 800dc46:	f001 ff6d 	bl	800fb24 <pbuf_copy_partial>
    data = httpd_req_buf;
 800dc4a:	f8df a208 	ldr.w	sl, [pc, #520]	; 800de54 <http_recv+0x28c>
  if (data_len >= MIN_REQ_LEN) {
 800dc4e:	f1bb 0f06 	cmp.w	fp, #6
 800dc52:	f240 81c4 	bls.w	800dfde <http_recv+0x416>
    crlf = lwip_strnstr(data, CRLF, data_len);
 800dc56:	465a      	mov	r2, fp
 800dc58:	497f      	ldr	r1, [pc, #508]	; (800de58 <http_recv+0x290>)
 800dc5a:	4650      	mov	r0, sl
 800dc5c:	f000 fbef 	bl	800e43e <lwip_strnstr>
    if (crlf != NULL) {
 800dc60:	2800      	cmp	r0, #0
 800dc62:	f000 81bc 	beq.w	800dfde <http_recv+0x416>
      if (!strncmp(data, "GET ", 4)) {
 800dc66:	2204      	movs	r2, #4
 800dc68:	497c      	ldr	r1, [pc, #496]	; (800de5c <http_recv+0x294>)
 800dc6a:	4650      	mov	r0, sl
 800dc6c:	f009 f80f 	bl	8016c8e <strncmp>
 800dc70:	4680      	mov	r8, r0
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d171      	bne.n	800dd5a <http_recv+0x192>
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800dc76:	f1ab 0304 	sub.w	r3, fp, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800dc7a:	b29b      	uxth	r3, r3
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800dc7c:	f10a 0504 	add.w	r5, sl, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800dc80:	461a      	mov	r2, r3
 800dc82:	4977      	ldr	r1, [pc, #476]	; (800de60 <http_recv+0x298>)
 800dc84:	4628      	mov	r0, r5
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	f000 fbd9 	bl	800e43e <lwip_strnstr>
      if (sp2 == NULL) {
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	4681      	mov	r9, r0
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d068      	beq.n	800dd66 <http_recv+0x19e>
      int is_09 = 0;
 800dc94:	f8cd 8004 	str.w	r8, [sp, #4]
        sp1 = data + 3;
 800dc98:	f10a 0303 	add.w	r3, sl, #3
      if ((sp2 != 0) && (sp2 > sp1)) {
 800dc9c:	4599      	cmp	r9, r3
 800dc9e:	f240 819e 	bls.w	800dfde <http_recv+0x416>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800dca2:	465a      	mov	r2, fp
 800dca4:	496f      	ldr	r1, [pc, #444]	; (800de64 <http_recv+0x29c>)
 800dca6:	4650      	mov	r0, sl
 800dca8:	f000 fbc9 	bl	800e43e <lwip_strnstr>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	f000 8196 	beq.w	800dfde <http_recv+0x416>
          *sp1 = 0;
 800dcb2:	2300      	movs	r3, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800dcb4:	eba9 0905 	sub.w	r9, r9, r5
          uri[uri_len] = 0;
 800dcb8:	fa1f f989 	uxth.w	r9, r9
          *sp1 = 0;
 800dcbc:	f88a 3003 	strb.w	r3, [sl, #3]
  size_t uri_len = strlen(uri);
 800dcc0:	4628      	mov	r0, r5
          uri[uri_len] = 0;
 800dcc2:	f805 3009 	strb.w	r3, [r5, r9]
 800dcc6:	9507      	str	r5, [sp, #28]
  size_t uri_len = strlen(uri);
 800dcc8:	f7f2 fabc 	bl	8000244 <strlen>
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800dccc:	4683      	mov	fp, r0
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	f000 80dc 	beq.w	800de8c <http_recv+0x2c4>
 800dcd4:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
 800dcd8:	f815 2009 	ldrb.w	r2, [r5, r9]
 800dcdc:	2a2f      	cmp	r2, #47	; 0x2f
 800dcde:	f040 80d5 	bne.w	800de8c <http_recv+0x2c4>
 800dce2:	4a61      	ldr	r2, [pc, #388]	; (800de68 <http_recv+0x2a0>)
 800dce4:	4295      	cmp	r5, r2
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	d102      	bne.n	800dcf0 <http_recv+0x128>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800dcea:	2801      	cmp	r0, #1
 800dcec:	f040 80ce 	bne.w	800de8c <http_recv+0x2c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800dcf0:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 800dcf4:	bf28      	it	cs
 800dcf6:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 800dcfa:	f1bb 0f01 	cmp.w	fp, #1
 800dcfe:	d008      	beq.n	800dd12 <http_recv+0x14a>
      MEMCPY(http_uri_buf, uri, copy_len);
 800dd00:	464a      	mov	r2, r9
 800dd02:	4629      	mov	r1, r5
 800dd04:	4858      	ldr	r0, [pc, #352]	; (800de68 <http_recv+0x2a0>)
 800dd06:	f008 fd06 	bl	8016716 <memcpy>
      http_uri_buf[copy_len] = 0;
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	9b02      	ldr	r3, [sp, #8]
 800dd0e:	f803 2009 	strb.w	r2, [r3, r9]
      int is_09 = 0;
 800dd12:	f04f 0a00 	mov.w	sl, #0
      if (copy_len > 0) {
 800dd16:	f1bb 0f01 	cmp.w	fp, #1
 800dd1a:	d030      	beq.n	800dd7e <http_recv+0x1b6>
        if (len_left > 0) {
 800dd1c:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 800dd20:	d010      	beq.n	800dd44 <http_recv+0x17c>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800dd22:	4b52      	ldr	r3, [pc, #328]	; (800de6c <http_recv+0x2a4>)
 800dd24:	9203      	str	r2, [sp, #12]
 800dd26:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	f7f2 fa8a 	bl	8000244 <strlen>
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800dd30:	9a03      	ldr	r2, [sp, #12]
 800dd32:	9b02      	ldr	r3, [sp, #8]
 800dd34:	4282      	cmp	r2, r0
 800dd36:	bf28      	it	cs
 800dd38:	4602      	movcs	r2, r0
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	eb03 0009 	add.w	r0, r3, r9
 800dd40:	f008 fce9 	bl	8016716 <memcpy>
        file_name = http_uri_buf;
 800dd44:	4a48      	ldr	r2, [pc, #288]	; (800de68 <http_recv+0x2a0>)
 800dd46:	e01d      	b.n	800dd84 <http_recv+0x1bc>
    pbuf_cat(hs->req, p);
 800dd48:	4631      	mov	r1, r6
 800dd4a:	f001 fe21 	bl	800f990 <pbuf_cat>
 800dd4e:	e768      	b.n	800dc22 <http_recv+0x5a>
    data = (char *)p->payload;
 800dd50:	f8d6 a004 	ldr.w	sl, [r6, #4]
    data_len = p->len;
 800dd54:	f8b6 b00a 	ldrh.w	fp, [r6, #10]
 800dd58:	e779      	b.n	800dc4e <http_recv+0x86>
        data[4] = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f88a 3004 	strb.w	r3, [sl, #4]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800dd60:	f06f 070f 	mvn.w	r7, #15
 800dd64:	e065      	b.n	800de32 <http_recv+0x26a>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800dd66:	461a      	mov	r2, r3
 800dd68:	493b      	ldr	r1, [pc, #236]	; (800de58 <http_recv+0x290>)
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	f000 fb67 	bl	800e43e <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 800dd70:	4681      	mov	r9, r0
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f000 8133 	beq.w	800dfde <http_recv+0x416>
        is_09 = 1;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	e78c      	b.n	800dc98 <http_recv+0xd0>
        file_name = g_psDefaultFilenames[loop].name;
 800dd7e:	4b3b      	ldr	r3, [pc, #236]	; (800de6c <http_recv+0x2a4>)
 800dd80:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 800dd84:	4611      	mov	r1, r2
 800dd86:	4620      	mov	r0, r4
 800dd88:	9203      	str	r2, [sp, #12]
 800dd8a:	f7ff fbdf 	bl	800d54c <fs_open>
 800dd8e:	4625      	mov	r5, r4
      if(err == ERR_OK) {
 800dd90:	9a03      	ldr	r2, [sp, #12]
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d174      	bne.n	800de80 <http_recv+0x2b8>
        tag_check = g_psDefaultFilenames[loop].shtml;
 800dd96:	4b35      	ldr	r3, [pc, #212]	; (800de6c <http_recv+0x2a4>)
        uri = file_name;
 800dd98:	9207      	str	r2, [sp, #28]
        tag_check = g_psDefaultFilenames[loop].shtml;
 800dd9a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800dd9e:	f89a 3004 	ldrb.w	r3, [sl, #4]
    if (tag_check) {
 800dda2:	b1ab      	cbz	r3, 800ddd0 <http_recv+0x208>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800dda4:	20dc      	movs	r0, #220	; 0xdc
 800dda6:	f001 f947 	bl	800f038 <mem_malloc>
  if (ret != NULL) {
 800ddaa:	4680      	mov	r8, r0
 800ddac:	b180      	cbz	r0, 800ddd0 <http_recv+0x208>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800ddae:	22dc      	movs	r2, #220	; 0xdc
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	f008 fcbb 	bl	801672c <memset>
        ssi->tag_index = 0;
 800ddb6:	2300      	movs	r3, #0
        ssi->parse_left = file->len;
 800ddb8:	686a      	ldr	r2, [r5, #4]
        ssi->tag_index = 0;
 800ddba:	f8a8 300c 	strh.w	r3, [r8, #12]
        ssi->tag_state = TAG_NONE;
 800ddbe:	f888 30db 	strb.w	r3, [r8, #219]	; 0xdb
        ssi->parsed = file->data;
 800ddc2:	682b      	ldr	r3, [r5, #0]
 800ddc4:	f8c8 3000 	str.w	r3, [r8]
        ssi->tag_end = file->data;
 800ddc8:	e9c8 3201 	strd	r3, r2, [r8, #4]
        hs->ssi = ssi;
 800ddcc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    hs->file = file->data;
 800ddd0:	682b      	ldr	r3, [r5, #0]
    hs->handle = file;
 800ddd2:	6165      	str	r5, [r4, #20]
    hs->file = file->data;
 800ddd4:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800ddd6:	686b      	ldr	r3, [r5, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da06      	bge.n	800ddea <http_recv+0x222>
 800dddc:	4b24      	ldr	r3, [pc, #144]	; (800de70 <http_recv+0x2a8>)
 800ddde:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800dde2:	4924      	ldr	r1, [pc, #144]	; (800de74 <http_recv+0x2ac>)
 800dde4:	4824      	ldr	r0, [pc, #144]	; (800de78 <http_recv+0x2b0>)
 800dde6:	f008 fd4f 	bl	8016888 <iprintf>
      hs->left = file->len;
 800ddea:	686b      	ldr	r3, [r5, #4]
 800ddec:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 800ddf4:	6963      	ldr	r3, [r4, #20]
 800ddf6:	7c1b      	ldrb	r3, [r3, #16]
 800ddf8:	07da      	lsls	r2, r3, #31
 800ddfa:	f100 8121 	bmi.w	800e040 <http_recv+0x478>
 800ddfe:	4b1c      	ldr	r3, [pc, #112]	; (800de70 <http_recv+0x2a8>)
 800de00:	f640 02df 	movw	r2, #2271	; 0x8df
 800de04:	491d      	ldr	r1, [pc, #116]	; (800de7c <http_recv+0x2b4>)
 800de06:	481c      	ldr	r0, [pc, #112]	; (800de78 <http_recv+0x2b0>)
 800de08:	f008 fd3e 	bl	8016888 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800de0c:	9b01      	ldr	r3, [sp, #4]
 800de0e:	b183      	cbz	r3, 800de32 <http_recv+0x26a>
 800de10:	6963      	ldr	r3, [r4, #20]
 800de12:	7c1b      	ldrb	r3, [r3, #16]
 800de14:	07db      	lsls	r3, r3, #31
 800de16:	d50c      	bpl.n	800de32 <http_recv+0x26a>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800de18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800de1a:	4912      	ldr	r1, [pc, #72]	; (800de64 <http_recv+0x29c>)
 800de1c:	69a0      	ldr	r0, [r4, #24]
 800de1e:	f000 fb0e 	bl	800e43e <lwip_strnstr>
      if (file_start != NULL) {
 800de22:	b130      	cbz	r0, 800de32 <http_recv+0x26a>
        size_t diff = file_start + 4 - hs->file;
 800de24:	69a3      	ldr	r3, [r4, #24]
 800de26:	3004      	adds	r0, #4
 800de28:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 800de2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 800de2c:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 800de2e:	1a9b      	subs	r3, r3, r2
 800de30:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 800de32:	6a20      	ldr	r0, [r4, #32]
 800de34:	b118      	cbz	r0, 800de3e <http_recv+0x276>
          pbuf_free(hs->req);
 800de36:	f001 fbd3 	bl	800f5e0 <pbuf_free>
          hs->req = NULL;
 800de3a:	2300      	movs	r3, #0
 800de3c:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 800de3e:	4630      	mov	r0, r6
 800de40:	f001 fbce 	bl	800f5e0 <pbuf_free>
      if (parsed == ERR_OK) {
 800de44:	2f00      	cmp	r7, #0
 800de46:	f040 80d9 	bne.w	800dffc <http_recv+0x434>
          http_send(pcb, hs);
 800de4a:	4621      	mov	r1, r4
 800de4c:	9800      	ldr	r0, [sp, #0]
 800de4e:	f7ff fc67 	bl	800d720 <http_send>
 800de52:	e6d1      	b.n	800dbf8 <http_recv+0x30>
 800de54:	200046bc 	.word	0x200046bc
 800de58:	080181b0 	.word	0x080181b0
 800de5c:	0801813d 	.word	0x0801813d
 800de60:	080228de 	.word	0x080228de
 800de64:	080181ae 	.word	0x080181ae
 800de68:	2000467c 	.word	0x2000467c
 800de6c:	080207d0 	.word	0x080207d0
 800de70:	0802085d 	.word	0x0802085d
 800de74:	08020816 	.word	0x08020816
 800de78:	08018495 	.word	0x08018495
 800de7c:	08020834 	.word	0x08020834
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800de80:	f10a 0a01 	add.w	sl, sl, #1
 800de84:	f1ba 0f05 	cmp.w	sl, #5
 800de88:	f47f af45 	bne.w	800dd16 <http_recv+0x14e>
    params = (char *)strchr(uri, '?');
 800de8c:	213f      	movs	r1, #63	; 0x3f
 800de8e:	9807      	ldr	r0, [sp, #28]
 800de90:	f008 feaf 	bl	8016bf2 <strchr>
    if (params != NULL) {
 800de94:	4605      	mov	r5, r0
 800de96:	b110      	cbz	r0, 800de9e <http_recv+0x2d6>
      *params = '\0';
 800de98:	2300      	movs	r3, #0
 800de9a:	f805 3b01 	strb.w	r3, [r5], #1
    http_cgi_paramcount = -1;
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dea2:	4b6a      	ldr	r3, [pc, #424]	; (800e04c <http_recv+0x484>)
 800dea4:	601a      	str	r2, [r3, #0]
    if (g_iNumCGIs && g_pCGIs) {
 800dea6:	4a6a      	ldr	r2, [pc, #424]	; (800e050 <http_recv+0x488>)
 800dea8:	9303      	str	r3, [sp, #12]
 800deaa:	f8d2 a000 	ldr.w	sl, [r2]
 800deae:	f1ba 0f00 	cmp.w	sl, #0
 800deb2:	d04b      	beq.n	800df4c <http_recv+0x384>
 800deb4:	4b67      	ldr	r3, [pc, #412]	; (800e054 <http_recv+0x48c>)
 800deb6:	f8d3 b000 	ldr.w	fp, [r3]
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	f1bb 0f00 	cmp.w	fp, #0
 800dec0:	d044      	beq.n	800df4c <http_recv+0x384>
 800dec2:	9b07      	ldr	r3, [sp, #28]
      for (i = 0; i < g_iNumCGIs; i++) {
 800dec4:	45c2      	cmp	sl, r8
 800dec6:	dd41      	ble.n	800df4c <http_recv+0x384>
 800dec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800decc:	4618      	mov	r0, r3
 800dece:	f85b 1038 	ldr.w	r1, [fp, r8, lsl #3]
 800ded2:	9305      	str	r3, [sp, #20]
 800ded4:	9202      	str	r2, [sp, #8]
 800ded6:	f7f2 f9ab 	bl	8000230 <strcmp>
 800deda:	9b05      	ldr	r3, [sp, #20]
 800dedc:	4681      	mov	r9, r0
 800dede:	2800      	cmp	r0, #0
 800dee0:	d173      	bne.n	800dfca <http_recv+0x402>
  if(!params || (params[0] == '\0')) {
 800dee2:	b31d      	cbz	r5, 800df2c <http_recv+0x364>
 800dee4:	782b      	ldrb	r3, [r5, #0]
 800dee6:	b30b      	cbz	r3, 800df2c <http_recv+0x364>
 800dee8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    http_cgi_params[loop] = pair;
 800deec:	f84a 5b04 	str.w	r5, [sl], #4
    pair = strchr(pair, '&');
 800def0:	2126      	movs	r1, #38	; 0x26
 800def2:	4628      	mov	r0, r5
 800def4:	f008 fe7d 	bl	8016bf2 <strchr>
    if(pair) {
 800def8:	2800      	cmp	r0, #0
 800defa:	d05a      	beq.n	800dfb2 <http_recv+0x3ea>
      *pair = '\0';
 800defc:	4683      	mov	fp, r0
 800defe:	f04f 0300 	mov.w	r3, #0
 800df02:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 800df06:	213d      	movs	r1, #61	; 0x3d
 800df08:	4628      	mov	r0, r5
 800df0a:	f008 fe72 	bl	8016bf2 <strchr>
    if(equals) {
 800df0e:	b118      	cbz	r0, 800df18 <http_recv+0x350>
      *equals = '\0';
 800df10:	f04f 0300 	mov.w	r3, #0
 800df14:	f800 3b01 	strb.w	r3, [r0], #1
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800df18:	f109 0901 	add.w	r9, r9, #1
 800df1c:	f1b9 0f10 	cmp.w	r9, #16
      http_cgi_param_vals[loop] = NULL;
 800df20:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800df24:	d002      	beq.n	800df2c <http_recv+0x364>
 800df26:	f1bb 0f00 	cmp.w	fp, #0
 800df2a:	d140      	bne.n	800dfae <http_recv+0x3e6>
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800df2c:	9b03      	ldr	r3, [sp, #12]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800df2e:	9a02      	ldr	r2, [sp, #8]
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800df30:	f8c3 9000 	str.w	r9, [r3]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800df34:	9b04      	ldr	r3, [sp, #16]
 800df36:	4649      	mov	r1, r9
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4640      	mov	r0, r8
 800df3c:	4413      	add	r3, r2
 800df3e:	685d      	ldr	r5, [r3, #4]
 800df40:	f104 0230 	add.w	r2, r4, #48	; 0x30
 800df44:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800df48:	47a8      	blx	r5
 800df4a:	9007      	str	r0, [sp, #28]
    err = fs_open(&hs->file_handle, uri);
 800df4c:	9907      	ldr	r1, [sp, #28]
 800df4e:	4620      	mov	r0, r4
 800df50:	4625      	mov	r5, r4
 800df52:	f7ff fafb 	bl	800d54c <fs_open>
    if (err == ERR_OK) {
 800df56:	b130      	cbz	r0, 800df66 <http_recv+0x39e>
      file = http_get_404_file(hs, &uri);
 800df58:	a907      	add	r1, sp, #28
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7ff fb5e 	bl	800d61c <http_get_404_file>
    if (file != NULL) {
 800df60:	4605      	mov	r5, r0
 800df62:	2800      	cmp	r0, #0
 800df64:	d052      	beq.n	800e00c <http_recv+0x444>
      char* param = (char*)strstr(uri, "?");
 800df66:	213f      	movs	r1, #63	; 0x3f
 800df68:	9807      	ldr	r0, [sp, #28]
 800df6a:	f008 fe42 	bl	8016bf2 <strchr>
      if (param != NULL) {
 800df6e:	4681      	mov	r9, r0
 800df70:	b108      	cbz	r0, 800df76 <http_recv+0x3ae>
         *param = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	7003      	strb	r3, [r0, #0]
      sub = uri;
 800df76:	f8dd a01c 	ldr.w	sl, [sp, #28]
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800df7a:	212e      	movs	r1, #46	; 0x2e
 800df7c:	4650      	mov	r0, sl
 800df7e:	f008 fe38 	bl	8016bf2 <strchr>
 800df82:	4680      	mov	r8, r0
 800df84:	bb20      	cbnz	r0, 800dfd0 <http_recv+0x408>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800df86:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 800e058 <http_recv+0x490>
 800df8a:	f85b 1028 	ldr.w	r1, [fp, r8, lsl #2]
 800df8e:	4650      	mov	r0, sl
 800df90:	f000 fa75 	bl	800e47e <lwip_stricmp>
 800df94:	2800      	cmp	r0, #0
 800df96:	d04a      	beq.n	800e02e <http_recv+0x466>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800df98:	f108 0801 	add.w	r8, r8, #1
 800df9c:	f1b8 0f04 	cmp.w	r8, #4
 800dfa0:	d1f3      	bne.n	800df8a <http_recv+0x3c2>
      if (param != NULL) {
 800dfa2:	f1b9 0f00 	cmp.w	r9, #0
 800dfa6:	f43f af13 	beq.w	800ddd0 <http_recv+0x208>
      tag_check = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	e044      	b.n	800e038 <http_recv+0x470>
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800dfae:	465d      	mov	r5, fp
 800dfb0:	e79c      	b.n	800deec <http_recv+0x324>
 800dfb2:	9005      	str	r0, [sp, #20]
        pair = strchr(equals, ' ');
 800dfb4:	2120      	movs	r1, #32
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f008 fe1b 	bl	8016bf2 <strchr>
        if(pair) {
 800dfbc:	4683      	mov	fp, r0
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d0a1      	beq.n	800df06 <http_recv+0x33e>
            *pair = '\0';
 800dfc2:	9b05      	ldr	r3, [sp, #20]
 800dfc4:	7003      	strb	r3, [r0, #0]
        pair = NULL;
 800dfc6:	469b      	mov	fp, r3
 800dfc8:	e79d      	b.n	800df06 <http_recv+0x33e>
      for (i = 0; i < g_iNumCGIs; i++) {
 800dfca:	f108 0801 	add.w	r8, r8, #1
 800dfce:	e779      	b.n	800dec4 <http_recv+0x2fc>
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800dfd0:	212e      	movs	r1, #46	; 0x2e
 800dfd2:	f108 0001 	add.w	r0, r8, #1
 800dfd6:	f008 fe0c 	bl	8016bf2 <strchr>
 800dfda:	46c2      	mov	sl, r8
 800dfdc:	e7d1      	b.n	800df82 <http_recv+0x3ba>
  clen = pbuf_clen(hs->req);
 800dfde:	6a20      	ldr	r0, [r4, #32]
 800dfe0:	f001 fcb2 	bl	800f948 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800dfe4:	6a23      	ldr	r3, [r4, #32]
 800dfe6:	891b      	ldrh	r3, [r3, #8]
 800dfe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfec:	f4bf aeb8 	bcs.w	800dd60 <http_recv+0x198>
 800dff0:	2805      	cmp	r0, #5
 800dff2:	f63f aeb5 	bhi.w	800dd60 <http_recv+0x198>
 800dff6:	f06f 0704 	mvn.w	r7, #4
 800dffa:	e720      	b.n	800de3e <http_recv+0x276>
      } else if (parsed == ERR_ARG) {
 800dffc:	3710      	adds	r7, #16
 800dffe:	f47f adfb 	bne.w	800dbf8 <http_recv+0x30>
 800e002:	e5f5      	b.n	800dbf0 <http_recv+0x28>
      pbuf_free(p);
 800e004:	4630      	mov	r0, r6
 800e006:	f001 faeb 	bl	800f5e0 <pbuf_free>
 800e00a:	e5f5      	b.n	800dbf8 <http_recv+0x30>
    file = http_get_404_file(hs, &uri);
 800e00c:	a907      	add	r1, sp, #28
 800e00e:	4620      	mov	r0, r4
 800e010:	f7ff fb04 	bl	800d61c <http_get_404_file>
  if (file != NULL) {
 800e014:	4605      	mov	r5, r0
 800e016:	2800      	cmp	r0, #0
 800e018:	f47f aeda 	bne.w	800ddd0 <http_recv+0x208>
    hs->file = NULL;
 800e01c:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hs->left = 0;
 800e020:	6265      	str	r5, [r4, #36]	; 0x24
    hs->retries = 0;
 800e022:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800e026:	e704      	b.n	800de32 <http_recv+0x26a>
    return ERR_USE;
 800e028:	f06f 0707 	mvn.w	r7, #7
 800e02c:	e701      	b.n	800de32 <http_recv+0x26a>
      if (param != NULL) {
 800e02e:	f1b9 0f00 	cmp.w	r9, #0
 800e032:	f43f aeb7 	beq.w	800dda4 <http_recv+0x1dc>
          tag_check = 1;
 800e036:	2301      	movs	r3, #1
         *param = '?';
 800e038:	223f      	movs	r2, #63	; 0x3f
 800e03a:	f889 2000 	strb.w	r2, [r9]
 800e03e:	e6b0      	b.n	800dda2 <http_recv+0x1da>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f43f aef5 	beq.w	800de32 <http_recv+0x26a>
 800e048:	e6e6      	b.n	800de18 <http_recv+0x250>
 800e04a:	bf00      	nop
 800e04c:	2000af84 	.word	0x2000af84
 800e050:	2000af7c 	.word	0x2000af7c
 800e054:	2000af8c 	.word	0x2000af8c
 800e058:	080207c0 	.word	0x080207c0

0800e05c <http_err>:
{
 800e05c:	b510      	push	{r4, lr}
  if (hs != NULL) {
 800e05e:	4604      	mov	r4, r0
 800e060:	b130      	cbz	r0, 800e070 <http_err+0x14>
    http_state_eof(hs);
 800e062:	f7ff fac5 	bl	800d5f0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800e066:	4620      	mov	r0, r4
}
 800e068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 800e06c:	f000 bea0 	b.w	800edb0 <mem_free>
}
 800e070:	bd10      	pop	{r4, pc}
	...

0800e074 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800e074:	b510      	push	{r4, lr}
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800e076:	202e      	movs	r0, #46	; 0x2e
 800e078:	f002 fd42 	bl	8010b00 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800e07c:	4604      	mov	r4, r0
 800e07e:	b930      	cbnz	r0, 800e08e <httpd_init+0x1a>
 800e080:	4b15      	ldr	r3, [pc, #84]	; (800e0d8 <httpd_init+0x64>)
 800e082:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800e086:	4915      	ldr	r1, [pc, #84]	; (800e0dc <httpd_init+0x68>)
 800e088:	4815      	ldr	r0, [pc, #84]	; (800e0e0 <httpd_init+0x6c>)
 800e08a:	f008 fbfd 	bl	8016888 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800e08e:	2101      	movs	r1, #1
 800e090:	4620      	mov	r0, r4
 800e092:	f001 ffc3 	bl	801001c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800e096:	2250      	movs	r2, #80	; 0x50
 800e098:	4912      	ldr	r1, [pc, #72]	; (800e0e4 <httpd_init+0x70>)
 800e09a:	4620      	mov	r0, r4
 800e09c:	f001 fe98 	bl	800fdd0 <tcp_bind>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800e0a0:	b130      	cbz	r0, 800e0b0 <httpd_init+0x3c>
 800e0a2:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <httpd_init+0x64>)
 800e0a4:	f640 2215 	movw	r2, #2581	; 0xa15
 800e0a8:	490f      	ldr	r1, [pc, #60]	; (800e0e8 <httpd_init+0x74>)
 800e0aa:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <httpd_init+0x6c>)
 800e0ac:	f008 fbec 	bl	8016888 <iprintf>
  pcb = tcp_listen(pcb);
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	21ff      	movs	r1, #255	; 0xff
 800e0b4:	f001 ff2e 	bl	800ff14 <tcp_listen_with_backlog>
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	b930      	cbnz	r0, 800e0ca <httpd_init+0x56>
 800e0bc:	4b06      	ldr	r3, [pc, #24]	; (800e0d8 <httpd_init+0x64>)
 800e0be:	f640 2217 	movw	r2, #2583	; 0xa17
 800e0c2:	490a      	ldr	r1, [pc, #40]	; (800e0ec <httpd_init+0x78>)
 800e0c4:	4806      	ldr	r0, [pc, #24]	; (800e0e0 <httpd_init+0x6c>)
 800e0c6:	f008 fbdf 	bl	8016888 <iprintf>
  tcp_accept(pcb, http_accept);
 800e0ca:	4620      	mov	r0, r4
}
 800e0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_accept(pcb, http_accept);
 800e0d0:	4907      	ldr	r1, [pc, #28]	; (800e0f0 <httpd_init+0x7c>)
 800e0d2:	f002 b805 	b.w	80100e0 <tcp_accept>
 800e0d6:	bf00      	nop
 800e0d8:	0802085d 	.word	0x0802085d
 800e0dc:	08020976 	.word	0x08020976
 800e0e0:	08018495 	.word	0x08018495
 800e0e4:	0802264c 	.word	0x0802264c
 800e0e8:	08020991 	.word	0x08020991
 800e0ec:	080209ad 	.word	0x080209ad
 800e0f0:	0800d659 	.word	0x0800d659

0800e0f4 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	b930      	cbnz	r0, 800e10c <http_set_ssi_handler+0x18>
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <http_set_ssi_handler+0x48>)
 800e100:	f640 2228 	movw	r2, #2600	; 0xa28
 800e104:	490e      	ldr	r1, [pc, #56]	; (800e140 <http_set_ssi_handler+0x4c>)
 800e106:	480f      	ldr	r0, [pc, #60]	; (800e144 <http_set_ssi_handler+0x50>)
 800e108:	f008 fbbe 	bl	8016888 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800e10c:	4b0e      	ldr	r3, [pc, #56]	; (800e148 <http_set_ssi_handler+0x54>)
 800e10e:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800e110:	b935      	cbnz	r5, 800e120 <http_set_ssi_handler+0x2c>
 800e112:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <http_set_ssi_handler+0x48>)
 800e114:	f640 222f 	movw	r2, #2607	; 0xa2f
 800e118:	490c      	ldr	r1, [pc, #48]	; (800e14c <http_set_ssi_handler+0x58>)
 800e11a:	480a      	ldr	r0, [pc, #40]	; (800e144 <http_set_ssi_handler+0x50>)
 800e11c:	f008 fbb4 	bl	8016888 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800e120:	2c00      	cmp	r4, #0
 800e122:	dc06      	bgt.n	800e132 <http_set_ssi_handler+0x3e>
 800e124:	4b05      	ldr	r3, [pc, #20]	; (800e13c <http_set_ssi_handler+0x48>)
 800e126:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 800e12a:	4909      	ldr	r1, [pc, #36]	; (800e150 <http_set_ssi_handler+0x5c>)
 800e12c:	4805      	ldr	r0, [pc, #20]	; (800e144 <http_set_ssi_handler+0x50>)
 800e12e:	f008 fbab 	bl	8016888 <iprintf>

  g_ppcTags = tags;
 800e132:	4b08      	ldr	r3, [pc, #32]	; (800e154 <http_set_ssi_handler+0x60>)
 800e134:	601d      	str	r5, [r3, #0]
  g_iNumTags = num_tags;
 800e136:	4b08      	ldr	r3, [pc, #32]	; (800e158 <http_set_ssi_handler+0x64>)
 800e138:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
 800e13c:	0802085d 	.word	0x0802085d
 800e140:	0802093c 	.word	0x0802093c
 800e144:	08018495 	.word	0x08018495
 800e148:	2000af80 	.word	0x2000af80
 800e14c:	08020951 	.word	0x08020951
 800e150:	0802095f 	.word	0x0802095f
 800e154:	2000af90 	.word	0x2000af90
 800e158:	2000af88 	.word	0x2000af88

0800e15c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	460c      	mov	r4, r1
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800e160:	4605      	mov	r5, r0
 800e162:	b930      	cbnz	r0, 800e172 <http_set_cgi_handlers+0x16>
 800e164:	4b0a      	ldr	r3, [pc, #40]	; (800e190 <http_set_cgi_handlers+0x34>)
 800e166:	f640 2242 	movw	r2, #2626	; 0xa42
 800e16a:	490a      	ldr	r1, [pc, #40]	; (800e194 <http_set_cgi_handlers+0x38>)
 800e16c:	480a      	ldr	r0, [pc, #40]	; (800e198 <http_set_cgi_handlers+0x3c>)
 800e16e:	f008 fb8b 	bl	8016888 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800e172:	2c00      	cmp	r4, #0
 800e174:	dc06      	bgt.n	800e184 <http_set_cgi_handlers+0x28>
 800e176:	4b06      	ldr	r3, [pc, #24]	; (800e190 <http_set_cgi_handlers+0x34>)
 800e178:	f640 2243 	movw	r2, #2627	; 0xa43
 800e17c:	4907      	ldr	r1, [pc, #28]	; (800e19c <http_set_cgi_handlers+0x40>)
 800e17e:	4806      	ldr	r0, [pc, #24]	; (800e198 <http_set_cgi_handlers+0x3c>)
 800e180:	f008 fb82 	bl	8016888 <iprintf>

  g_pCGIs = cgis;
 800e184:	4b06      	ldr	r3, [pc, #24]	; (800e1a0 <http_set_cgi_handlers+0x44>)
 800e186:	601d      	str	r5, [r3, #0]
  g_iNumCGIs = num_handlers;
 800e188:	4b06      	ldr	r3, [pc, #24]	; (800e1a4 <http_set_cgi_handlers+0x48>)
 800e18a:	601c      	str	r4, [r3, #0]
}
 800e18c:	bd38      	pop	{r3, r4, r5, pc}
 800e18e:	bf00      	nop
 800e190:	0802085d 	.word	0x0802085d
 800e194:	08020913 	.word	0x08020913
 800e198:	08018495 	.word	0x08018495
 800e19c:	08020921 	.word	0x08020921
 800e1a0:	2000af8c 	.word	0x2000af8c
 800e1a4:	2000af7c 	.word	0x2000af7c

0800e1a8 <sntp_retry>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_retry(void* arg)
{
 800e1a8:	b510      	push	{r4, lr}

  LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_retry: Next request will be sent in %"U32_F" ms\n",
    sntp_retry_timeout));

  /* set up a timer to send a retry and increase the retry delay */
  sys_timeout(sntp_retry_timeout, sntp_request, NULL);
 800e1aa:	4c08      	ldr	r4, [pc, #32]	; (800e1cc <sntp_retry+0x24>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4908      	ldr	r1, [pc, #32]	; (800e1d0 <sntp_retry+0x28>)
 800e1b0:	6820      	ldr	r0, [r4, #0]
 800e1b2:	f004 ff11 	bl	8012fd8 <sys_timeout>
  {
    u32_t new_retry_timeout;
    /* increase the timeout for next retry */
    new_retry_timeout = sntp_retry_timeout << 1;
    /* limit to maximum timeout and prevent overflow */
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800e1b6:	f247 5130 	movw	r1, #30000	; 0x7530
    new_retry_timeout = sntp_retry_timeout << 1;
 800e1ba:	6822      	ldr	r2, [r4, #0]
 800e1bc:	0053      	lsls	r3, r2, #1
    if ((new_retry_timeout <= SNTP_RETRY_TIMEOUT_MAX) &&
 800e1be:	428b      	cmp	r3, r1
 800e1c0:	d802      	bhi.n	800e1c8 <sntp_retry+0x20>
 800e1c2:	429a      	cmp	r2, r3
        (new_retry_timeout > sntp_retry_timeout)) {
      sntp_retry_timeout = new_retry_timeout;
 800e1c4:	bf38      	it	cc
 800e1c6:	6023      	strcc	r3, [r4, #0]
    }
  }
#endif /* SNTP_RETRY_TIMEOUT_EXP */
}
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20004ac4 	.word	0x20004ac4
 800e1d0:	0800e309 	.word	0x0800e309

0800e1d4 <sntp_recv>:
#endif /* SNTP_SUPPORT_MULTIPLE_SERVERS */

/** UDP recv callback for the sntp pcb */
static void
sntp_recv(void *arg, struct udp_pcb* pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1d6:	4615      	mov	r5, r2

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  /* packet received: stop retry timeout  */
  sys_untimeout(sntp_try_next_server, NULL);
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4830      	ldr	r0, [pc, #192]	; (800e29c <sntp_recv+0xc8>)
 800e1dc:	f004 ffa8 	bl	8013130 <sys_untimeout>
  sys_untimeout(sntp_request, NULL);
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	482f      	ldr	r0, [pc, #188]	; (800e2a0 <sntp_recv+0xcc>)
 800e1e4:	f004 ffa4 	bl	8013130 <sys_untimeout>
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  {
    /* process the response */
    if (p->tot_len == SNTP_MSG_LEN) {
 800e1e8:	892b      	ldrh	r3, [r5, #8]
 800e1ea:	2b30      	cmp	r3, #48	; 0x30
 800e1ec:	d144      	bne.n	800e278 <sntp_recv+0xa4>
      pbuf_copy_partial(p, &mode, 1, SNTP_OFFSET_LI_VN_MODE);
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f10d 0102 	add.w	r1, sp, #2
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f001 fc94 	bl	800fb24 <pbuf_copy_partial>
      mode &= SNTP_MODE_MASK;
      /* if this is a SNTP response... */
      if (((sntp_opmode == SNTP_OPMODE_POLL) && (mode == SNTP_MODE_SERVER)) ||
 800e1fc:	4a29      	ldr	r2, [pc, #164]	; (800e2a4 <sntp_recv+0xd0>)
      mode &= SNTP_MODE_MASK;
 800e1fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
      if (((sntp_opmode == SNTP_OPMODE_POLL) && (mode == SNTP_MODE_SERVER)) ||
 800e202:	7812      	ldrb	r2, [r2, #0]
      mode &= SNTP_MODE_MASK;
 800e204:	f003 0307 	and.w	r3, r3, #7
 800e208:	f88d 3002 	strb.w	r3, [sp, #2]
      if (((sntp_opmode == SNTP_OPMODE_POLL) && (mode == SNTP_MODE_SERVER)) ||
 800e20c:	bb82      	cbnz	r2, 800e270 <sntp_recv+0x9c>
 800e20e:	2b04      	cmp	r3, #4
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 800e210:	d135      	bne.n	800e27e <sntp_recv+0xaa>
        pbuf_copy_partial(p, &stratum, 1, SNTP_OFFSET_STRATUM);
 800e212:	2301      	movs	r3, #1
 800e214:	f10d 0103 	add.w	r1, sp, #3
 800e218:	461a      	mov	r2, r3
 800e21a:	4628      	mov	r0, r5
 800e21c:	f001 fc82 	bl	800fb24 <pbuf_copy_partial>
        if (stratum == SNTP_STRATUM_KOD) {
 800e220:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e224:	b373      	cbz	r3, 800e284 <sntp_recv+0xb0>
#endif /* SNTP_CHECK_RESPONSE >= 2 */
          /* @todo: add code for SNTP_CHECK_RESPONSE >= 3 and >= 4 here */
          {
            /* correct answer */
            err = ERR_OK;
            pbuf_copy_partial(p, &receive_timestamp, SNTP_RECEIVE_TIME_SIZE * 4, SNTP_OFFSET_TRANSMIT_TIME);
 800e226:	2204      	movs	r2, #4
 800e228:	2328      	movs	r3, #40	; 0x28
 800e22a:	eb0d 0102 	add.w	r1, sp, r2
 800e22e:	4628      	mov	r0, r5
 800e230:	f001 fc78 	bl	800fb24 <pbuf_copy_partial>
            err = ERR_OK;
 800e234:	2400      	movs	r4, #0
  else {
    /* packet from wrong remote address or port, wait for correct response */
    err = ERR_TIMEOUT;
  }
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  pbuf_free(p);
 800e236:	4628      	mov	r0, r5
 800e238:	f001 f9d2 	bl	800f5e0 <pbuf_free>
  if (err == ERR_OK) {
 800e23c:	bb24      	cbnz	r4, 800e288 <sntp_recv+0xb4>
  u32_t rx_secs = lwip_ntohl(receive_timestamp[0]);
 800e23e:	9801      	ldr	r0, [sp, #4]
 800e240:	f000 f8fb 	bl	800e43a <lwip_htonl>
  SNTP_SET_SYSTEM_TIME(t);
 800e244:	f100 40f8 	add.w	r0, r0, #2080374784	; 0x7c000000
 800e248:	f500 00ab 	add.w	r0, r0, #5603328	; 0x558000
 800e24c:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 800e250:	f7f2 ff5e 	bl	8001110 <rtc_set_with_ntp_timstamp>
    sntp_process(receive_timestamp);

    /* Set up timeout for next request (only if poll response was received)*/
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e254:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <sntp_recv+0xd0>)
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	b943      	cbnz	r3, 800e26c <sntp_recv+0x98>
      /* Correct response, reset retry timeout */
      SNTP_RESET_RETRY_TIMEOUT();
 800e25a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e25e:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <sntp_recv+0xd4>)

      sys_timeout((u32_t)SNTP_UPDATE_DELAY, sntp_request, NULL);
 800e260:	490f      	ldr	r1, [pc, #60]	; (800e2a0 <sntp_recv+0xcc>)
      SNTP_RESET_RETRY_TIMEOUT();
 800e262:	601a      	str	r2, [r3, #0]
      sys_timeout((u32_t)SNTP_UPDATE_DELAY, sntp_request, NULL);
 800e264:	4811      	ldr	r0, [pc, #68]	; (800e2ac <sntp_recv+0xd8>)
 800e266:	4622      	mov	r2, r4
 800e268:	f004 feb6 	bl	8012fd8 <sys_timeout>
        /* another error, try the same server again */
        sntp_retry(NULL);
      }
    }
  }
}
 800e26c:	b003      	add	sp, #12
 800e26e:	bd30      	pop	{r4, r5, pc}
      if (((sntp_opmode == SNTP_OPMODE_POLL) && (mode == SNTP_MODE_SERVER)) ||
 800e270:	2a01      	cmp	r2, #1
 800e272:	d104      	bne.n	800e27e <sntp_recv+0xaa>
          ((sntp_opmode == SNTP_OPMODE_LISTENONLY) && (mode == SNTP_MODE_BROADCAST))) {
 800e274:	2b05      	cmp	r3, #5
 800e276:	e7cb      	b.n	800e210 <sntp_recv+0x3c>
  err = ERR_ARG;
 800e278:	f06f 040f 	mvn.w	r4, #15
 800e27c:	e7db      	b.n	800e236 <sntp_recv+0x62>
        err = ERR_TIMEOUT;
 800e27e:	f06f 0402 	mvn.w	r4, #2
 800e282:	e7d8      	b.n	800e236 <sntp_recv+0x62>
          err = SNTP_ERR_KOD;
 800e284:	2401      	movs	r4, #1
 800e286:	e7d6      	b.n	800e236 <sntp_recv+0x62>
  } else if (err != ERR_TIMEOUT) {
 800e288:	3403      	adds	r4, #3
 800e28a:	d0ef      	beq.n	800e26c <sntp_recv+0x98>
    if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e28c:	4b05      	ldr	r3, [pc, #20]	; (800e2a4 <sntp_recv+0xd0>)
 800e28e:	7818      	ldrb	r0, [r3, #0]
 800e290:	2800      	cmp	r0, #0
 800e292:	d1eb      	bne.n	800e26c <sntp_recv+0x98>
        sntp_try_next_server(NULL);
 800e294:	f7ff ff88 	bl	800e1a8 <sntp_retry>
}
 800e298:	e7e8      	b.n	800e26c <sntp_recv+0x98>
 800e29a:	bf00      	nop
 800e29c:	0800e1a9 	.word	0x0800e1a9
 800e2a0:	0800e309 	.word	0x0800e309
 800e2a4:	20004abc 	.word	0x20004abc
 800e2a8:	20004ac4 	.word	0x20004ac4
 800e2ac:	0036ee80 	.word	0x0036ee80

0800e2b0 <sntp_send_request>:
 */
static void
sntp_send_request(const ip_addr_t *server_addr)
{
  struct pbuf* p;
  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 800e2b0:	2200      	movs	r2, #0
{
 800e2b2:	b538      	push	{r3, r4, r5, lr}
  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 800e2b4:	2130      	movs	r1, #48	; 0x30
{
 800e2b6:	4605      	mov	r5, r0
  p = pbuf_alloc(PBUF_TRANSPORT, SNTP_MSG_LEN, PBUF_RAM);
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f001 f9f9 	bl	800f6b0 <pbuf_alloc>
  if (p != NULL) {
 800e2be:	4604      	mov	r4, r0
 800e2c0:	b1c8      	cbz	r0, 800e2f6 <sntp_send_request+0x46>
    struct sntp_msg *sntpmsg = (struct sntp_msg *)p->payload;
 800e2c2:	6843      	ldr	r3, [r0, #4]
  memset(req, 0, SNTP_MSG_LEN);
 800e2c4:	2230      	movs	r2, #48	; 0x30
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f008 fa2f 	bl	801672c <memset>
  req->li_vn_mode = SNTP_LI_NO_WARNING | SNTP_VERSION | SNTP_MODE_CLIENT;
 800e2ce:	2223      	movs	r2, #35	; 0x23
 800e2d0:	7002      	strb	r2, [r0, #0]
    LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_send_request: Sending request to server\n"));
    /* initialize request message */
    sntp_initialize_request(sntpmsg);
    /* send request */
    udp_sendto(sntp_pcb, p, server_addr, SNTP_PORT);
 800e2d2:	480a      	ldr	r0, [pc, #40]	; (800e2fc <sntp_send_request+0x4c>)
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	237b      	movs	r3, #123	; 0x7b
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	f005 f90e 	bl	80134fc <udp_sendto>
    /* free the pbuf after sending it */
    pbuf_free(p);
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f001 f97d 	bl	800f5e0 <pbuf_free>
    /* set up receive timeout: try next server or retry on timeout */
    sys_timeout((u32_t)SNTP_RECV_TIMEOUT, sntp_try_next_server, NULL);
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	4905      	ldr	r1, [pc, #20]	; (800e300 <sntp_send_request+0x50>)
#endif /* SNTP_CHECK_RESPONSE >= 1 */
  } else {
    LWIP_DEBUGF(SNTP_DEBUG_SERIOUS, ("sntp_send_request: Out of memory, trying again in %"U32_F" ms\n",
      (u32_t)SNTP_RETRY_TIMEOUT));
    /* out of memory: set up a timer to send a retry */
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 800e2ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
  }
}
 800e2ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_request, NULL);
 800e2f2:	f004 be71 	b.w	8012fd8 <sys_timeout>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	4902      	ldr	r1, [pc, #8]	; (800e304 <sntp_send_request+0x54>)
 800e2fa:	e7f6      	b.n	800e2ea <sntp_send_request+0x3a>
 800e2fc:	20004ac0 	.word	0x20004ac0
 800e300:	0800e1a9 	.word	0x0800e1a9
 800e304:	0800e309 	.word	0x0800e309

0800e308 <sntp_request>:
 *
 * @param arg is unused (only necessary to conform to sys_timeout)
 */
static void
sntp_request(void *arg)
{
 800e308:	b513      	push	{r0, r1, r4, lr}

  LWIP_UNUSED_ARG(arg);

  /* initialize SNTP server address */
#if SNTP_SERVER_DNS
  if (sntp_servers[sntp_current_server].name) {
 800e30a:	4c0f      	ldr	r4, [pc, #60]	; (800e348 <sntp_request+0x40>)
 800e30c:	6820      	ldr	r0, [r4, #0]
 800e30e:	b178      	cbz	r0, 800e330 <sntp_request+0x28>
    /* always resolve the name and rely on dns-internal caching & timeout */
    ip_addr_set_zero(&sntp_servers[sntp_current_server].addr);
 800e310:	2300      	movs	r3, #0
    err = dns_gethostbyname(sntp_servers[sntp_current_server].name, &sntp_server_address,
 800e312:	4a0e      	ldr	r2, [pc, #56]	; (800e34c <sntp_request+0x44>)
 800e314:	a901      	add	r1, sp, #4
    ip_addr_set_zero(&sntp_servers[sntp_current_server].addr);
 800e316:	6063      	str	r3, [r4, #4]
    err = dns_gethostbyname(sntp_servers[sntp_current_server].name, &sntp_server_address,
 800e318:	f000 fcf8 	bl	800ed0c <dns_gethostbyname>
      sntp_dns_found, NULL);
    if (err == ERR_INPROGRESS) {
 800e31c:	1d43      	adds	r3, r0, #5
 800e31e:	d005      	beq.n	800e32c <sntp_request+0x24>
      /* DNS request sent, wait for sntp_dns_found being called */
      LWIP_DEBUGF(SNTP_DEBUG_STATE, ("sntp_request: Waiting for server address to be resolved.\n"));
      return;
    } else if (err == ERR_OK) {
 800e320:	b950      	cbnz	r0, 800e338 <sntp_request+0x30>
      sntp_servers[sntp_current_server].addr = sntp_server_address;
 800e322:	9b01      	ldr	r3, [sp, #4]
 800e324:	6063      	str	r3, [r4, #4]
  }

  if (err == ERR_OK) {
    LWIP_DEBUGF(SNTP_DEBUG_TRACE, ("sntp_request: current server address is %s\n",
      ipaddr_ntoa(&sntp_server_address)));
    sntp_send_request(&sntp_server_address);
 800e326:	a801      	add	r0, sp, #4
 800e328:	f7ff ffc2 	bl	800e2b0 <sntp_send_request>
  } else {
    /* address conversion failed, try another server */
    LWIP_DEBUGF(SNTP_DEBUG_WARN_STATE, ("sntp_request: Invalid server address, trying next server.\n"));
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
  }
}
 800e32c:	b002      	add	sp, #8
 800e32e:	bd10      	pop	{r4, pc}
    sntp_server_address = sntp_servers[sntp_current_server].addr;
 800e330:	6863      	ldr	r3, [r4, #4]
 800e332:	9301      	str	r3, [sp, #4]
    err = (ip_addr_isany_val(sntp_server_address)) ? ERR_ARG : ERR_OK;
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1f6      	bne.n	800e326 <sntp_request+0x1e>
    sys_timeout((u32_t)SNTP_RETRY_TIMEOUT, sntp_try_next_server, NULL);
 800e338:	2200      	movs	r2, #0
 800e33a:	4905      	ldr	r1, [pc, #20]	; (800e350 <sntp_request+0x48>)
 800e33c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e340:	f004 fe4a 	bl	8012fd8 <sys_timeout>
 800e344:	e7f2      	b.n	800e32c <sntp_request+0x24>
 800e346:	bf00      	nop
 800e348:	20004ac8 	.word	0x20004ac8
 800e34c:	0800e355 	.word	0x0800e355
 800e350:	0800e1a9 	.word	0x0800e1a9

0800e354 <sntp_dns_found>:
  if (ipaddr != NULL) {
 800e354:	4608      	mov	r0, r1
 800e356:	b109      	cbz	r1, 800e35c <sntp_dns_found+0x8>
    sntp_send_request(ipaddr);
 800e358:	f7ff bfaa 	b.w	800e2b0 <sntp_send_request>
    sntp_try_next_server(NULL);
 800e35c:	f7ff bf24 	b.w	800e1a8 <sntp_retry>

0800e360 <sntp_init>:
 * Initialize this module.
 * Send out request instantly or after SNTP_STARTUP_DELAY(_FUNC).
 */
void
sntp_init(void)
{
 800e360:	b510      	push	{r4, lr}
#else
#error SNTP_SERVER_ADDRESS string not supported SNTP_SERVER_DNS==0
#endif
#endif /* SNTP_SERVER_ADDRESS */

  if (sntp_pcb == NULL) {
 800e362:	4c17      	ldr	r4, [pc, #92]	; (800e3c0 <sntp_init+0x60>)
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	bb4b      	cbnz	r3, 800e3bc <sntp_init+0x5c>
    sntp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800e368:	202e      	movs	r0, #46	; 0x2e
 800e36a:	f005 f945 	bl	80135f8 <udp_new_ip_type>
 800e36e:	6020      	str	r0, [r4, #0]
    LWIP_ASSERT("Failed to allocate udp pcb for sntp client", sntp_pcb != NULL);
 800e370:	b930      	cbnz	r0, 800e380 <sntp_init+0x20>
 800e372:	4b14      	ldr	r3, [pc, #80]	; (800e3c4 <sntp_init+0x64>)
 800e374:	f44f 7209 	mov.w	r2, #548	; 0x224
 800e378:	4913      	ldr	r1, [pc, #76]	; (800e3c8 <sntp_init+0x68>)
 800e37a:	4814      	ldr	r0, [pc, #80]	; (800e3cc <sntp_init+0x6c>)
 800e37c:	f008 fa84 	bl	8016888 <iprintf>
    if (sntp_pcb != NULL) {
 800e380:	6820      	ldr	r0, [r4, #0]
 800e382:	b1d8      	cbz	r0, 800e3bc <sntp_init+0x5c>
      udp_recv(sntp_pcb, sntp_recv, NULL);
 800e384:	2200      	movs	r2, #0
 800e386:	4912      	ldr	r1, [pc, #72]	; (800e3d0 <sntp_init+0x70>)
 800e388:	f005 f90c 	bl	80135a4 <udp_recv>

      if (sntp_opmode == SNTP_OPMODE_POLL) {
 800e38c:	4b11      	ldr	r3, [pc, #68]	; (800e3d4 <sntp_init+0x74>)
 800e38e:	7818      	ldrb	r0, [r3, #0]
 800e390:	b938      	cbnz	r0, 800e3a2 <sntp_init+0x42>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
      }
    }
  }
}
 800e392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SNTP_RESET_RETRY_TIMEOUT();
 800e396:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e39a:	4b0f      	ldr	r3, [pc, #60]	; (800e3d8 <sntp_init+0x78>)
 800e39c:	601a      	str	r2, [r3, #0]
        sntp_request(NULL);
 800e39e:	f7ff bfb3 	b.w	800e308 <sntp_request>
      } else if (sntp_opmode == SNTP_OPMODE_LISTENONLY) {
 800e3a2:	2801      	cmp	r0, #1
 800e3a4:	d10a      	bne.n	800e3bc <sntp_init+0x5c>
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 800e3a6:	6820      	ldr	r0, [r4, #0]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 800e3a8:	227b      	movs	r2, #123	; 0x7b
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 800e3aa:	7a03      	ldrb	r3, [r0, #8]
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 800e3ac:	490b      	ldr	r1, [pc, #44]	; (800e3dc <sntp_init+0x7c>)
        ip_set_option(sntp_pcb, SOF_BROADCAST);
 800e3ae:	f043 0320 	orr.w	r3, r3, #32
 800e3b2:	7203      	strb	r3, [r0, #8]
}
 800e3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        udp_bind(sntp_pcb, IP_ANY_TYPE, SNTP_PORT);
 800e3b8:	f004 bfc8 	b.w	801334c <udp_bind>
}
 800e3bc:	bd10      	pop	{r4, pc}
 800e3be:	bf00      	nop
 800e3c0:	20004ac0 	.word	0x20004ac0
 800e3c4:	08020a0b 	.word	0x08020a0b
 800e3c8:	08020a40 	.word	0x08020a40
 800e3cc:	08018495 	.word	0x08018495
 800e3d0:	0800e1d5 	.word	0x0800e1d5
 800e3d4:	20004abc 	.word	0x20004abc
 800e3d8:	20004ac4 	.word	0x20004ac4
 800e3dc:	0802264c 	.word	0x0802264c

0800e3e0 <sntp_setoperatingmode>:
 * @param operating_mode one of the available operating modes
 */
void
sntp_setoperatingmode(u8_t operating_mode)
{
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 800e3e0:	2801      	cmp	r0, #1
{
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	4604      	mov	r4, r0
  LWIP_ASSERT("Invalid operating mode", operating_mode <= SNTP_OPMODE_LISTENONLY);
 800e3e6:	d906      	bls.n	800e3f6 <sntp_setoperatingmode+0x16>
 800e3e8:	4b09      	ldr	r3, [pc, #36]	; (800e410 <sntp_setoperatingmode+0x30>)
 800e3ea:	f240 2257 	movw	r2, #599	; 0x257
 800e3ee:	4909      	ldr	r1, [pc, #36]	; (800e414 <sntp_setoperatingmode+0x34>)
 800e3f0:	4809      	ldr	r0, [pc, #36]	; (800e418 <sntp_setoperatingmode+0x38>)
 800e3f2:	f008 fa49 	bl	8016888 <iprintf>
  LWIP_ASSERT("Operating mode must not be set while SNTP client is running", sntp_pcb == NULL);
 800e3f6:	4b09      	ldr	r3, [pc, #36]	; (800e41c <sntp_setoperatingmode+0x3c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	b133      	cbz	r3, 800e40a <sntp_setoperatingmode+0x2a>
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <sntp_setoperatingmode+0x30>)
 800e3fe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800e402:	4907      	ldr	r1, [pc, #28]	; (800e420 <sntp_setoperatingmode+0x40>)
 800e404:	4804      	ldr	r0, [pc, #16]	; (800e418 <sntp_setoperatingmode+0x38>)
 800e406:	f008 fa3f 	bl	8016888 <iprintf>
  sntp_opmode = operating_mode;
 800e40a:	4b06      	ldr	r3, [pc, #24]	; (800e424 <sntp_setoperatingmode+0x44>)
 800e40c:	701c      	strb	r4, [r3, #0]
}
 800e40e:	bd10      	pop	{r4, pc}
 800e410:	08020a0b 	.word	0x08020a0b
 800e414:	08020a6b 	.word	0x08020a6b
 800e418:	08018495 	.word	0x08018495
 800e41c:	20004ac0 	.word	0x20004ac0
 800e420:	08020a82 	.word	0x08020a82
 800e424:	20004abc 	.word	0x20004abc

0800e428 <sntp_setservername>:
 * @param dnsserver DNS name of the NTP server to set, to be resolved at contact time
 */
void
sntp_setservername(u8_t idx, char *server)
{
  if (idx < SNTP_MAX_SERVERS) {
 800e428:	b908      	cbnz	r0, 800e42e <sntp_setservername+0x6>
    sntp_servers[idx].name = server;
 800e42a:	4b01      	ldr	r3, [pc, #4]	; (800e430 <sntp_setservername+0x8>)
 800e42c:	6019      	str	r1, [r3, #0]
  }
}
 800e42e:	4770      	bx	lr
 800e430:	20004ac8 	.word	0x20004ac8

0800e434 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800e434:	ba40      	rev16	r0, r0
}
 800e436:	b280      	uxth	r0, r0
 800e438:	4770      	bx	lr

0800e43a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800e43a:	ba00      	rev	r0, r0
 800e43c:	4770      	bx	lr

0800e43e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800e43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e440:	4604      	mov	r4, r0
  const char* p;
  size_t tokenlen = strlen(token);
 800e442:	4608      	mov	r0, r1
{
 800e444:	460f      	mov	r7, r1
 800e446:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 800e448:	f7f1 fefc 	bl	8000244 <strlen>
  if (tokenlen == 0) {
 800e44c:	4606      	mov	r6, r0
 800e44e:	b130      	cbz	r0, 800e45e <lwip_strnstr+0x20>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800e450:	4425      	add	r5, r4
 800e452:	7823      	ldrb	r3, [r4, #0]
 800e454:	b18b      	cbz	r3, 800e47a <lwip_strnstr+0x3c>
 800e456:	19a2      	adds	r2, r4, r6
 800e458:	4295      	cmp	r5, r2
 800e45a:	d202      	bcs.n	800e462 <lwip_strnstr+0x24>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 800e45c:	2400      	movs	r4, #0
}
 800e45e:	4620      	mov	r0, r4
 800e460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800e462:	783a      	ldrb	r2, [r7, #0]
 800e464:	429a      	cmp	r2, r3
 800e466:	d106      	bne.n	800e476 <lwip_strnstr+0x38>
 800e468:	4632      	mov	r2, r6
 800e46a:	4639      	mov	r1, r7
 800e46c:	4620      	mov	r0, r4
 800e46e:	f008 fc0e 	bl	8016c8e <strncmp>
 800e472:	2800      	cmp	r0, #0
 800e474:	d0f3      	beq.n	800e45e <lwip_strnstr+0x20>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800e476:	3401      	adds	r4, #1
 800e478:	e7eb      	b.n	800e452 <lwip_strnstr+0x14>
  return NULL;
 800e47a:	461c      	mov	r4, r3
 800e47c:	e7ef      	b.n	800e45e <lwip_strnstr+0x20>

0800e47e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 800e47e:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 800e480:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 800e484:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 800e488:	4293      	cmp	r3, r2
 800e48a:	d009      	beq.n	800e4a0 <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 800e48c:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800e490:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 800e494:	2d19      	cmp	r5, #25
 800e496:	d807      	bhi.n	800e4a8 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 800e498:	f042 0220 	orr.w	r2, r2, #32
 800e49c:	4294      	cmp	r4, r2
 800e49e:	d103      	bne.n	800e4a8 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1ed      	bne.n	800e480 <lwip_stricmp+0x2>
  return 0;
 800e4a4:	4618      	mov	r0, r3
}
 800e4a6:	bd30      	pop	{r4, r5, pc}
        return 1;
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	e7fc      	b.n	800e4a6 <lwip_stricmp+0x28>

0800e4ac <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	4402      	add	r2, r0
  char c1, c2;

  do {
    c1 = *str1++;
 800e4b0:	7803      	ldrb	r3, [r0, #0]
    c2 = *str2++;
 800e4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    if (c1 != c2) {
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	d009      	beq.n	800e4ce <lwip_strnicmp+0x22>
      char c1_upc = c1 | 0x20;
 800e4ba:	f043 0520 	orr.w	r5, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800e4be:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 800e4c2:	2e19      	cmp	r6, #25
 800e4c4:	d80a      	bhi.n	800e4dc <lwip_strnicmp+0x30>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 800e4c6:	f044 0420 	orr.w	r4, r4, #32
 800e4ca:	42a5      	cmp	r5, r4
 800e4cc:	d106      	bne.n	800e4dc <lwip_strnicmp+0x30>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (len-- && c1 != 0);
 800e4ce:	4290      	cmp	r0, r2
 800e4d0:	d002      	beq.n	800e4d8 <lwip_strnicmp+0x2c>
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1eb      	bne.n	800e4b0 <lwip_strnicmp+0x4>
  return 0;
 800e4d8:	2000      	movs	r0, #0
 800e4da:	e000      	b.n	800e4de <lwip_strnicmp+0x32>
        return 1;
 800e4dc:	2001      	movs	r0, #1
}
 800e4de:	bd70      	pop	{r4, r5, r6, pc}

0800e4e0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 800e4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e4e4:	f44f 7688 	mov.w	r6, #272	; 0x110
{
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	4688      	mov	r8, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e4ec:	4346      	muls	r6, r0
 800e4ee:	4d20      	ldr	r5, [pc, #128]	; (800e570 <dns_call_found+0x90>)
 800e4f0:	3610      	adds	r6, #16
 800e4f2:	f105 0730 	add.w	r7, r5, #48	; 0x30
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800e4f6:	682b      	ldr	r3, [r5, #0]
 800e4f8:	b14b      	cbz	r3, 800e50e <dns_call_found+0x2e>
 800e4fa:	7a2a      	ldrb	r2, [r5, #8]
 800e4fc:	42a2      	cmp	r2, r4
 800e4fe:	d106      	bne.n	800e50e <dns_call_found+0x2e>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e500:	481c      	ldr	r0, [pc, #112]	; (800e574 <dns_call_found+0x94>)
 800e502:	686a      	ldr	r2, [r5, #4]
 800e504:	4641      	mov	r1, r8
 800e506:	4430      	add	r0, r6
 800e508:	4798      	blx	r3
      /* flush this entry */
      dns_requests[i].found = NULL;
 800e50a:	2300      	movs	r3, #0
 800e50c:	602b      	str	r3, [r5, #0]
 800e50e:	350c      	adds	r5, #12
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e510:	42bd      	cmp	r5, r7
 800e512:	d1f0      	bne.n	800e4f6 <dns_call_found+0x16>
 800e514:	f44f 7188 	mov.w	r1, #272	; 0x110
 800e518:	2300      	movs	r3, #0
 800e51a:	4a16      	ldr	r2, [pc, #88]	; (800e574 <dns_call_found+0x94>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e51c:	fb01 2004 	mla	r0, r1, r4, r2
    if (i == idx) {
 800e520:	b2dd      	uxtb	r5, r3
 800e522:	42ac      	cmp	r4, r5
 800e524:	d01f      	beq.n	800e566 <dns_call_found+0x86>
 800e526:	fb01 2503 	mla	r5, r1, r3, r2
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800e52a:	7aae      	ldrb	r6, [r5, #10]
 800e52c:	2e02      	cmp	r6, #2
 800e52e:	d11a      	bne.n	800e566 <dns_call_found+0x86>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e530:	7bef      	ldrb	r7, [r5, #15]
 800e532:	7bc5      	ldrb	r5, [r0, #15]
 800e534:	42af      	cmp	r7, r5
 800e536:	d116      	bne.n	800e566 <dns_call_found+0x86>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e538:	2304      	movs	r3, #4
 800e53a:	73c3      	strb	r3, [r0, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800e53c:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <dns_call_found+0x94>)
 800e542:	fb02 3404 	mla	r4, r2, r4, r3
 800e546:	7be3      	ldrb	r3, [r4, #15]
 800e548:	2b03      	cmp	r3, #3
 800e54a:	d80a      	bhi.n	800e562 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800e54c:	4d0a      	ldr	r5, [pc, #40]	; (800e578 <dns_call_found+0x98>)
 800e54e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800e552:	f005 f82b 	bl	80135ac <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800e556:	2200      	movs	r2, #0
 800e558:	7be3      	ldrb	r3, [r4, #15]
 800e55a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e55e:	2304      	movs	r3, #4
 800e560:	73e3      	strb	r3, [r4, #15]
  }
#endif
}
 800e562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e566:	3301      	adds	r3, #1
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e568:	2b04      	cmp	r3, #4
 800e56a:	d1d9      	bne.n	800e520 <dns_call_found+0x40>
 800e56c:	e7e6      	b.n	800e53c <dns_call_found+0x5c>
 800e56e:	bf00      	nop
 800e570:	20004ae4 	.word	0x20004ae4
 800e574:	20004b20 	.word	0x20004b20
 800e578:	20004ad4 	.word	0x20004ad4

0800e57c <dns_send>:
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e57c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e580:	4a4e      	ldr	r2, [pc, #312]	; (800e6bc <dns_send+0x140>)
{
 800e582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e586:	fb03 2300 	mla	r3, r3, r0, r2
 800e58a:	7adb      	ldrb	r3, [r3, #11]
{
 800e58c:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e58e:	2b01      	cmp	r3, #1
{
 800e590:	4606      	mov	r6, r0
 800e592:	4690      	mov	r8, r2
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e594:	d906      	bls.n	800e5a4 <dns_send+0x28>
 800e596:	4b4a      	ldr	r3, [pc, #296]	; (800e6c0 <dns_send+0x144>)
 800e598:	f240 22ed 	movw	r2, #749	; 0x2ed
 800e59c:	4949      	ldr	r1, [pc, #292]	; (800e6c4 <dns_send+0x148>)
 800e59e:	484a      	ldr	r0, [pc, #296]	; (800e6c8 <dns_send+0x14c>)
 800e5a0:	f008 f972 	bl	8016888 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e5a4:	f44f 7488 	mov.w	r4, #272	; 0x110
 800e5a8:	4374      	muls	r4, r6
 800e5aa:	eb08 0704 	add.w	r7, r8, r4
 800e5ae:	4b47      	ldr	r3, [pc, #284]	; (800e6cc <dns_send+0x150>)
 800e5b0:	7afa      	ldrb	r2, [r7, #11]
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e5b8:	b94d      	cbnz	r5, 800e5ce <dns_send+0x52>
    return ERR_OK;
 800e5ba:	462c      	mov	r4, r5
    dns_call_found(idx, NULL);
 800e5bc:	4629      	mov	r1, r5
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f7ff ff8e 	bl	800e4e0 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 800e5c4:	72bd      	strb	r5, [r7, #10]
}
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	b007      	add	sp, #28
 800e5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800e5ce:	3410      	adds	r4, #16
 800e5d0:	4444      	add	r4, r8
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f7f1 fe36 	bl	8000244 <strlen>
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f100 0112 	add.w	r1, r0, #18
 800e5de:	b289      	uxth	r1, r1
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f001 f865 	bl	800f6b0 <pbuf_alloc>
  if (p != NULL) {
 800e5e6:	4605      	mov	r5, r0
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	d064      	beq.n	800e6b6 <dns_send+0x13a>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e5ec:	2300      	movs	r3, #0
    hdr.id = lwip_htons(entry->txid);
 800e5ee:	8938      	ldrh	r0, [r7, #8]
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e5f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e5f4:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 800e5f6:	f7ff ff1d 	bl	800e434 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 800e5fa:	2301      	movs	r3, #1
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e5fc:	220c      	movs	r2, #12
    hdr.flags1 = DNS_FLAG1_RD;
 800e5fe:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 800e602:	f44f 7380 	mov.w	r3, #256	; 0x100
    query_idx = SIZEOF_DNS_HDR;
 800e606:	270c      	movs	r7, #12
    hdr.id = lwip_htons(entry->txid);
 800e608:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e60c:	eb0d 0102 	add.w	r1, sp, r2
 800e610:	4628      	mov	r0, r5
    hdr.numquestions = PP_HTONS(1);
 800e612:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e616:	f001 facb 	bl	800fbb0 <pbuf_take>
    --hostname;
 800e61a:	1e63      	subs	r3, r4, #1
 800e61c:	9300      	str	r3, [sp, #0]
      ++hostname;
 800e61e:	9b00      	ldr	r3, [sp, #0]
 800e620:	f103 0a01 	add.w	sl, r3, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e624:	46d1      	mov	r9, sl
 800e626:	464b      	mov	r3, r9
 800e628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e62c:	eba9 0b0a 	sub.w	fp, r9, sl
 800e630:	2a2e      	cmp	r2, #46	; 0x2e
 800e632:	fa5f f48b 	uxtb.w	r4, fp
 800e636:	f8cd 9000 	str.w	r9, [sp]
 800e63a:	d138      	bne.n	800e6ae <dns_send+0x132>
      pbuf_put_at(p, query_idx, n);
 800e63c:	4622      	mov	r2, r4
 800e63e:	4639      	mov	r1, r7
 800e640:	4628      	mov	r0, r5
 800e642:	f001 fb59 	bl	800fcf8 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 800e646:	1c7b      	adds	r3, r7, #1
 800e648:	fa1f f28b 	uxth.w	r2, fp
      query_idx += n + 1;
 800e64c:	443c      	add	r4, r7
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 800e64e:	b29b      	uxth	r3, r3
 800e650:	4651      	mov	r1, sl
 800e652:	4628      	mov	r0, r5
 800e654:	f001 fb0e 	bl	800fc74 <pbuf_take_at>
      query_idx += n + 1;
 800e658:	b2a4      	uxth	r4, r4
    } while (*hostname != 0);
 800e65a:	f899 2000 	ldrb.w	r2, [r9]
      query_idx += n + 1;
 800e65e:	1c67      	adds	r7, r4, #1
 800e660:	b2bf      	uxth	r7, r7
    } while (*hostname != 0);
 800e662:	2a00      	cmp	r2, #0
 800e664:	d1db      	bne.n	800e61e <dns_send+0xa2>
    pbuf_put_at(p, query_idx, 0);
 800e666:	4639      	mov	r1, r7
 800e668:	4628      	mov	r0, r5
 800e66a:	f001 fb45 	bl	800fcf8 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800e66e:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800e672:	a906      	add	r1, sp, #24
    query_idx++;
 800e674:	3402      	adds	r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800e676:	f841 3d10 	str.w	r3, [r1, #-16]!
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800e67a:	2204      	movs	r2, #4
 800e67c:	b2a3      	uxth	r3, r4
 800e67e:	4628      	mov	r0, r5
 800e680:	f001 faf8 	bl	800fc74 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 800e684:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e688:	fb03 8606 	mla	r6, r3, r6, r8
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800e68c:	9901      	ldr	r1, [sp, #4]
 800e68e:	7bf4      	ldrb	r4, [r6, #15]
      dst = &dns_servers[entry->server_idx];
 800e690:	7af2      	ldrb	r2, [r6, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800e692:	480f      	ldr	r0, [pc, #60]	; (800e6d0 <dns_send+0x154>)
 800e694:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e698:	2335      	movs	r3, #53	; 0x35
 800e69a:	4629      	mov	r1, r5
 800e69c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e6a0:	f004 ff2c 	bl	80134fc <udp_sendto>
 800e6a4:	4604      	mov	r4, r0
    pbuf_free(p);
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f000 ff9a 	bl	800f5e0 <pbuf_free>
 800e6ac:	e78b      	b.n	800e5c6 <dns_send+0x4a>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	d0c4      	beq.n	800e63c <dns_send+0xc0>
 800e6b2:	4699      	mov	r9, r3
 800e6b4:	e7b7      	b.n	800e626 <dns_send+0xaa>
    err = ERR_MEM;
 800e6b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e6ba:	e784      	b.n	800e5c6 <dns_send+0x4a>
 800e6bc:	20004b20 	.word	0x20004b20
 800e6c0:	08020af7 	.word	0x08020af7
 800e6c4:	08020b26 	.word	0x08020b26
 800e6c8:	08018495 	.word	0x08018495
 800e6cc:	20004b18 	.word	0x20004b18
 800e6d0:	20004ad4 	.word	0x20004ad4

0800e6d4 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e6d4:	2803      	cmp	r0, #3
{
 800e6d6:	b570      	push	{r4, r5, r6, lr}
 800e6d8:	4605      	mov	r5, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e6da:	d906      	bls.n	800e6ea <dns_check_entry+0x16>
 800e6dc:	4b34      	ldr	r3, [pc, #208]	; (800e7b0 <dns_check_entry+0xdc>)
 800e6de:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 800e6e2:	4934      	ldr	r1, [pc, #208]	; (800e7b4 <dns_check_entry+0xe0>)
 800e6e4:	4834      	ldr	r0, [pc, #208]	; (800e7b8 <dns_check_entry+0xe4>)
 800e6e6:	f008 f8cf 	bl	8016888 <iprintf>

  switch (entry->state) {
 800e6ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e6ee:	4c33      	ldr	r4, [pc, #204]	; (800e7bc <dns_check_entry+0xe8>)
 800e6f0:	fb03 4205 	mla	r2, r3, r5, r4
 800e6f4:	7a92      	ldrb	r2, [r2, #10]
 800e6f6:	2a03      	cmp	r2, #3
 800e6f8:	d850      	bhi.n	800e79c <dns_check_entry+0xc8>
 800e6fa:	e8df f002 	tbb	[pc, r2]
 800e6fe:	0243      	.short	0x0243
 800e700:	4622      	.short	0x4622
  txid = (u16_t)DNS_RAND_TXID();
 800e702:	f008 f951 	bl	80169a8 <rand>
 800e706:	2300      	movs	r3, #0
 800e708:	b280      	uxth	r0, r0
 800e70a:	18e2      	adds	r2, r4, r3
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e70c:	7a91      	ldrb	r1, [r2, #10]
 800e70e:	2902      	cmp	r1, #2
 800e710:	d102      	bne.n	800e718 <dns_check_entry+0x44>
 800e712:	8912      	ldrh	r2, [r2, #8]
 800e714:	4282      	cmp	r2, r0
 800e716:	d0f4      	beq.n	800e702 <dns_check_entry+0x2e>
 800e718:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e71c:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800e720:	d1f3      	bne.n	800e70a <dns_check_entry+0x36>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800e722:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e726:	436b      	muls	r3, r5
 800e728:	18e2      	adds	r2, r4, r3
 800e72a:	3308      	adds	r3, #8
 800e72c:	441c      	add	r4, r3
      entry->state = DNS_STATE_ASKING;
 800e72e:	2302      	movs	r3, #2
      entry->txid = dns_create_txid();
 800e730:	8110      	strh	r0, [r2, #8]
      entry->state = DNS_STATE_ASKING;
 800e732:	8063      	strh	r3, [r4, #2]
      entry->server_idx = 0;
 800e734:	2301      	movs	r3, #1
 800e736:	80a3      	strh	r3, [r4, #4]
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800e738:	4628      	mov	r0, r5
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 800e73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        err = dns_send(i);
 800e73e:	f7ff bf1d 	b.w	800e57c <dns_send>
      if (--entry->tmr == 0) {
 800e742:	fb03 4305 	mla	r3, r3, r5, r4
 800e746:	7b1a      	ldrb	r2, [r3, #12]
 800e748:	3a01      	subs	r2, #1
 800e74a:	b2d2      	uxtb	r2, r2
 800e74c:	731a      	strb	r2, [r3, #12]
 800e74e:	b9ca      	cbnz	r2, 800e784 <dns_check_entry+0xb0>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800e750:	7b5a      	ldrb	r2, [r3, #13]
 800e752:	3201      	adds	r2, #1
 800e754:	b2d2      	uxtb	r2, r2
 800e756:	2a04      	cmp	r2, #4
 800e758:	735a      	strb	r2, [r3, #13]
 800e75a:	d114      	bne.n	800e786 <dns_check_entry+0xb2>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 800e75c:	7ada      	ldrb	r2, [r3, #11]
 800e75e:	b93a      	cbnz	r2, 800e770 <dns_check_entry+0x9c>
 800e760:	4917      	ldr	r1, [pc, #92]	; (800e7c0 <dns_check_entry+0xec>)
 800e762:	6849      	ldr	r1, [r1, #4]
 800e764:	b121      	cbz	r1, 800e770 <dns_check_entry+0x9c>
            entry->server_idx++;
 800e766:	2101      	movs	r1, #1
            entry->retries = 0;
 800e768:	735a      	strb	r2, [r3, #13]
            entry->server_idx++;
 800e76a:	72d9      	strb	r1, [r3, #11]
            entry->tmr = 1;
 800e76c:	7319      	strb	r1, [r3, #12]
 800e76e:	e7e3      	b.n	800e738 <dns_check_entry+0x64>
            dns_call_found(i, NULL);
 800e770:	2100      	movs	r1, #0
 800e772:	4628      	mov	r0, r5
 800e774:	f7ff feb4 	bl	800e4e0 <dns_call_found>
        entry->state = DNS_STATE_UNUSED;
 800e778:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e77c:	fb03 4405 	mla	r4, r3, r5, r4
 800e780:	2300      	movs	r3, #0
 800e782:	72a3      	strb	r3, [r4, #10]
}
 800e784:	bd70      	pop	{r4, r5, r6, pc}
          entry->tmr = entry->retries;
 800e786:	731a      	strb	r2, [r3, #12]
 800e788:	e7d6      	b.n	800e738 <dns_check_entry+0x64>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800e78a:	436b      	muls	r3, r5
 800e78c:	58e2      	ldr	r2, [r4, r3]
 800e78e:	2a00      	cmp	r2, #0
 800e790:	d0f2      	beq.n	800e778 <dns_check_entry+0xa4>
 800e792:	3a01      	subs	r2, #1
 800e794:	50e2      	str	r2, [r4, r3]
 800e796:	2a00      	cmp	r2, #0
 800e798:	d0ee      	beq.n	800e778 <dns_check_entry+0xa4>
 800e79a:	e7f3      	b.n	800e784 <dns_check_entry+0xb0>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800e79c:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <dns_check_entry+0xdc>)
 800e79e:	f240 4237 	movw	r2, #1079	; 0x437
}
 800e7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800e7a6:	4907      	ldr	r1, [pc, #28]	; (800e7c4 <dns_check_entry+0xf0>)
 800e7a8:	4803      	ldr	r0, [pc, #12]	; (800e7b8 <dns_check_entry+0xe4>)
 800e7aa:	f008 b86d 	b.w	8016888 <iprintf>
 800e7ae:	bf00      	nop
 800e7b0:	08020af7 	.word	0x08020af7
 800e7b4:	08020abe 	.word	0x08020abe
 800e7b8:	08018495 	.word	0x08018495
 800e7bc:	20004b20 	.word	0x20004b20
 800e7c0:	20004b18 	.word	0x20004b18
 800e7c4:	08020ad8 	.word	0x08020ad8

0800e7c8 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	469a      	mov	sl, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800e7ce:	8913      	ldrh	r3, [r2, #8]
{
 800e7d0:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800e7d2:	2b0f      	cmp	r3, #15
{
 800e7d4:	4615      	mov	r5, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800e7d6:	f240 8131 	bls.w	800ea3c <dns_recv+0x274>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800e7da:	2300      	movs	r3, #0
 800e7dc:	220c      	movs	r2, #12
 800e7de:	a906      	add	r1, sp, #24
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	f001 f99f 	bl	800fb24 <pbuf_copy_partial>
 800e7e6:	280c      	cmp	r0, #12
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	f040 8127 	bne.w	800ea3c <dns_recv+0x274>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800e7ee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800e7f2:	f7ff fe1f 	bl	800e434 <lwip_htons>
 800e7f6:	4b93      	ldr	r3, [pc, #588]	; (800ea44 <dns_recv+0x27c>)
 800e7f8:	2600      	movs	r6, #0
 800e7fa:	f44f 7188 	mov.w	r1, #272	; 0x110
 800e7fe:	461f      	mov	r7, r3
 800e800:	fb01 f906 	mul.w	r9, r1, r6
 800e804:	eb03 0209 	add.w	r2, r3, r9
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
      const struct dns_table_entry *entry = &dns_table[i];
      if ((entry->state == DNS_STATE_ASKING) &&
 800e808:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800e80c:	fa5f fb86 	uxtb.w	fp, r6
 800e810:	f1bc 0f02 	cmp.w	ip, #2
 800e814:	f040 810e 	bne.w	800ea34 <dns_recv+0x26c>
 800e818:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800e81c:	4584      	cmp	ip, r0
 800e81e:	f040 8109 	bne.w	800ea34 <dns_recv+0x26c>
          (entry->txid == txid)) {

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800e822:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800e826:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e82a:	f7ff fe03 	bl	800e434 <lwip_htons>
 800e82e:	9001      	str	r0, [sp, #4]
        nanswers   = lwip_htons(hdr.numanswers);
 800e830:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 800e834:	f7ff fdfe 	bl	800e434 <lwip_htons>

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800e838:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
        nanswers   = lwip_htons(hdr.numanswers);
 800e83c:	4680      	mov	r8, r0
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800e83e:	f99d 001a 	ldrsb.w	r0, [sp, #26]
 800e842:	9b03      	ldr	r3, [sp, #12]
 800e844:	2800      	cmp	r0, #0
 800e846:	f280 80f9 	bge.w	800ea3c <dns_recv+0x274>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
 800e84a:	2901      	cmp	r1, #1
 800e84c:	f040 80f6 	bne.w	800ea3c <dns_recv+0x274>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800e850:	7ad0      	ldrb	r0, [r2, #11]
 800e852:	4a7d      	ldr	r2, [pc, #500]	; (800ea48 <dns_recv+0x280>)
 800e854:	f8da 1000 	ldr.w	r1, [sl]
 800e858:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800e85c:	4291      	cmp	r1, r2
 800e85e:	f040 80ed 	bne.w	800ea3c <dns_recv+0x274>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800e862:	f109 0a10 	add.w	sl, r9, #16
 800e866:	449a      	add	sl, r3
    n = pbuf_try_get_at(p, response_offset++);
 800e868:	1c63      	adds	r3, r4, #1
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4621      	mov	r1, r4
 800e86e:	4628      	mov	r0, r5
 800e870:	9301      	str	r3, [sp, #4]
 800e872:	f001 fa2e 	bl	800fcd2 <pbuf_try_get_at>
    if (n < 0) {
 800e876:	2800      	cmp	r0, #0
 800e878:	f2c0 80e0 	blt.w	800ea3c <dns_recv+0x274>
    if ((n & 0xc0) == 0xc0) {
 800e87c:	f000 02c0 	and.w	r2, r0, #192	; 0xc0
 800e880:	2ac0      	cmp	r2, #192	; 0xc0
 800e882:	f000 80db 	beq.w	800ea3c <dns_recv+0x274>
    n = pbuf_try_get_at(p, response_offset++);
 800e886:	9b01      	ldr	r3, [sp, #4]
 800e888:	eb0a 0200 	add.w	r2, sl, r0
 800e88c:	461c      	mov	r4, r3
      while (n > 0) {
 800e88e:	4592      	cmp	sl, r2
 800e890:	4653      	mov	r3, sl
 800e892:	d13a      	bne.n	800e90a <dns_recv+0x142>
    n = pbuf_try_get_at(p, response_offset);
 800e894:	4621      	mov	r1, r4
 800e896:	4628      	mov	r0, r5
 800e898:	f001 fa1b 	bl	800fcd2 <pbuf_try_get_at>
    if (n < 0) {
 800e89c:	2800      	cmp	r0, #0
      ++query;
 800e89e:	f10a 0a01 	add.w	sl, sl, #1
    if (n < 0) {
 800e8a2:	f2c0 80cb 	blt.w	800ea3c <dns_recv+0x274>
  } while (n != 0);
 800e8a6:	d1df      	bne.n	800e868 <dns_recv+0xa0>
        if (res_idx == 0xFFFF) {
 800e8a8:	f64f 7aff 	movw	sl, #65535	; 0xffff
  return response_offset + 1;
 800e8ac:	1c63      	adds	r3, r4, #1
 800e8ae:	b29b      	uxth	r3, r3
        if (res_idx == 0xFFFF) {
 800e8b0:	4553      	cmp	r3, sl
 800e8b2:	f000 80c3 	beq.w	800ea3c <dns_recv+0x274>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800e8b6:	2204      	movs	r2, #4
 800e8b8:	a904      	add	r1, sp, #16
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	f001 f932 	bl	800fb24 <pbuf_copy_partial>
 800e8c0:	2804      	cmp	r0, #4
 800e8c2:	f040 80bb 	bne.w	800ea3c <dns_recv+0x274>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800e8c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ce:	f040 80b5 	bne.w	800ea3c <dns_recv+0x274>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800e8d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8da:	f040 80af 	bne.w	800ea3c <dns_recv+0x274>
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800e8de:	f89d 301b 	ldrb.w	r3, [sp, #27]
        res_idx += SIZEOF_DNS_QUERY;
 800e8e2:	3405      	adds	r4, #5
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800e8e4:	071b      	lsls	r3, r3, #28
        res_idx += SIZEOF_DNS_QUERY;
 800e8e6:	b2a4      	uxth	r4, r4
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800e8e8:	d036      	beq.n	800e958 <dns_recv+0x190>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f000 fe78 	bl	800f5e0 <pbuf_free>
        dns_call_found(i, NULL);
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4658      	mov	r0, fp
 800e8f4:	f7ff fdf4 	bl	800e4e0 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800e8f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e8fc:	fb03 7606 	mla	r6, r3, r6, r7
 800e900:	2300      	movs	r3, #0
 800e902:	72b3      	strb	r3, [r6, #10]

memerr:
  /* deallocate memory and return */
  pbuf_free(p);
  return;
}
 800e904:	b00d      	add	sp, #52	; 0x34
 800e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int c = pbuf_try_get_at(p, response_offset);
 800e90a:	4621      	mov	r1, r4
 800e90c:	4628      	mov	r0, r5
 800e90e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e912:	f001 f9de 	bl	800fcd2 <pbuf_try_get_at>
        if (c < 0) {
 800e916:	2800      	cmp	r0, #0
 800e918:	f2c0 8090 	blt.w	800ea3c <dns_recv+0x274>
        if ((*query) != (u8_t)c) {
 800e91c:	9b01      	ldr	r3, [sp, #4]
 800e91e:	b2c0      	uxtb	r0, r0
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	f10a 0a01 	add.w	sl, sl, #1
 800e926:	4283      	cmp	r3, r0
 800e928:	f040 8088 	bne.w	800ea3c <dns_recv+0x274>
        ++response_offset;
 800e92c:	3401      	adds	r4, #1
 800e92e:	b2a4      	uxth	r4, r4
 800e930:	9a02      	ldr	r2, [sp, #8]
 800e932:	e7ac      	b.n	800e88e <dns_recv+0xc6>
    n = pbuf_try_get_at(p, offset++);
 800e934:	461c      	mov	r4, r3
 800e936:	e02f      	b.n	800e998 <dns_recv+0x1d0>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800e938:	f7ff fd7c 	bl	800e434 <lwip_htons>
 800e93c:	4420      	add	r0, r4
 800e93e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800e942:	da7b      	bge.n	800ea3c <dns_recv+0x274>
            res_idx += lwip_htons(ans.len);
 800e944:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 800e948:	f7ff fd74 	bl	800e434 <lwip_htons>
            --nanswers;
 800e94c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            res_idx += lwip_htons(ans.len);
 800e950:	4404      	add	r4, r0
 800e952:	b2a4      	uxth	r4, r4
            --nanswers;
 800e954:	fa1f f888 	uxth.w	r8, r8
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800e958:	f1b8 0f00 	cmp.w	r8, #0
 800e95c:	d0c5      	beq.n	800e8ea <dns_recv+0x122>
 800e95e:	892b      	ldrh	r3, [r5, #8]
 800e960:	42a3      	cmp	r3, r4
 800e962:	d9c2      	bls.n	800e8ea <dns_recv+0x122>
    n = pbuf_try_get_at(p, offset++);
 800e964:	1c63      	adds	r3, r4, #1
 800e966:	b29b      	uxth	r3, r3
 800e968:	4621      	mov	r1, r4
 800e96a:	4628      	mov	r0, r5
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	f001 f9b0 	bl	800fcd2 <pbuf_try_get_at>
    if (n < 0) {
 800e972:	1e04      	subs	r4, r0, #0
 800e974:	db62      	blt.n	800ea3c <dns_recv+0x274>
    if ((n & 0xc0) == 0xc0) {
 800e976:	f004 02c0 	and.w	r2, r4, #192	; 0xc0
 800e97a:	2ac0      	cmp	r2, #192	; 0xc0
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	d0d9      	beq.n	800e934 <dns_recv+0x16c>
      if (offset + n >= p->tot_len) {
 800e980:	441c      	add	r4, r3
 800e982:	892b      	ldrh	r3, [r5, #8]
 800e984:	429c      	cmp	r4, r3
 800e986:	da59      	bge.n	800ea3c <dns_recv+0x274>
      offset = (u16_t)(offset + n);
 800e988:	b2a4      	uxth	r4, r4
    n = pbuf_try_get_at(p, offset);
 800e98a:	4621      	mov	r1, r4
 800e98c:	4628      	mov	r0, r5
 800e98e:	f001 f9a0 	bl	800fcd2 <pbuf_try_get_at>
    if (n < 0) {
 800e992:	2800      	cmp	r0, #0
 800e994:	db52      	blt.n	800ea3c <dns_recv+0x274>
  } while (n != 0);
 800e996:	d1e5      	bne.n	800e964 <dns_recv+0x19c>
  return offset + 1;
 800e998:	1c63      	adds	r3, r4, #1
 800e99a:	b29b      	uxth	r3, r3
            if (res_idx == 0xFFFF) {
 800e99c:	4553      	cmp	r3, sl
 800e99e:	d04d      	beq.n	800ea3c <dns_recv+0x274>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	a909      	add	r1, sp, #36	; 0x24
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	f001 f8bd 	bl	800fb24 <pbuf_copy_partial>
 800e9aa:	280a      	cmp	r0, #10
 800e9ac:	d146      	bne.n	800ea3c <dns_recv+0x274>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800e9ae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx += SIZEOF_DNS_ANSWER;
 800e9b2:	340b      	adds	r4, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800e9b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx += SIZEOF_DNS_ANSWER;
 800e9b8:	b2a4      	uxth	r4, r4
 800e9ba:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800e9be:	d1bb      	bne.n	800e938 <dns_recv+0x170>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800e9c0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9c8:	d1b6      	bne.n	800e938 <dns_recv+0x170>
 800e9ca:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e9ce:	d1b3      	bne.n	800e938 <dns_recv+0x170>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800e9d0:	4623      	mov	r3, r4
 800e9d2:	2204      	movs	r2, #4
 800e9d4:	a905      	add	r1, sp, #20
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f001 f8a4 	bl	800fb24 <pbuf_copy_partial>
 800e9dc:	2804      	cmp	r0, #4
 800e9de:	d12d      	bne.n	800ea3c <dns_recv+0x274>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800e9e0:	f44f 7488 	mov.w	r4, #272	; 0x110
 800e9e4:	4374      	muls	r4, r6
 800e9e6:	9b05      	ldr	r3, [sp, #20]
 800e9e8:	eb07 0804 	add.w	r8, r7, r4
 800e9ec:	f8c8 3004 	str.w	r3, [r8, #4]
                  pbuf_free(p);
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	f000 fdf5 	bl	800f5e0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800e9f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9f8:	f7ff fd1f 	bl	800e43a <lwip_htonl>
  entry->state = DNS_STATE_DONE;
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	f888 300a 	strb.w	r3, [r8, #10]
  if (entry->ttl > DNS_MAX_TTL) {
 800ea02:	4b12      	ldr	r3, [pc, #72]	; (800ea4c <dns_recv+0x284>)
  dns_call_found(idx, &entry->ipaddr);
 800ea04:	f109 0104 	add.w	r1, r9, #4
  if (entry->ttl > DNS_MAX_TTL) {
 800ea08:	4298      	cmp	r0, r3
  entry->ttl = ttl;
 800ea0a:	5138      	str	r0, [r7, r4]
  dns_call_found(idx, &entry->ipaddr);
 800ea0c:	4439      	add	r1, r7
    entry->ttl = DNS_MAX_TTL;
 800ea0e:	bf88      	it	hi
 800ea10:	513b      	strhi	r3, [r7, r4]
  dns_call_found(idx, &entry->ipaddr);
 800ea12:	4658      	mov	r0, fp
 800ea14:	f7ff fd64 	bl	800e4e0 <dns_call_found>
  if (entry->ttl == 0) {
 800ea18:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ea1c:	435e      	muls	r6, r3
 800ea1e:	59ba      	ldr	r2, [r7, r6]
 800ea20:	19bb      	adds	r3, r7, r6
 800ea22:	2a00      	cmp	r2, #0
 800ea24:	f47f af6e 	bne.w	800e904 <dns_recv+0x13c>
    if (entry->state == DNS_STATE_DONE) {
 800ea28:	7a99      	ldrb	r1, [r3, #10]
 800ea2a:	2903      	cmp	r1, #3
 800ea2c:	f47f af6a 	bne.w	800e904 <dns_recv+0x13c>
      entry->state = DNS_STATE_UNUSED;
 800ea30:	729a      	strb	r2, [r3, #10]
 800ea32:	e767      	b.n	800e904 <dns_recv+0x13c>
 800ea34:	3601      	adds	r6, #1
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ea36:	2e04      	cmp	r6, #4
 800ea38:	f47f aee2 	bne.w	800e800 <dns_recv+0x38>
  pbuf_free(p);
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f000 fdcf 	bl	800f5e0 <pbuf_free>
  return;
 800ea42:	e75f      	b.n	800e904 <dns_recv+0x13c>
 800ea44:	20004b20 	.word	0x20004b20
 800ea48:	20004b18 	.word	0x20004b18
 800ea4c:	00093a80 	.word	0x00093a80

0800ea50 <dns_init>:
}
 800ea50:	4770      	bx	lr
	...

0800ea54 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 800ea54:	2801      	cmp	r0, #1
 800ea56:	d804      	bhi.n	800ea62 <dns_setserver+0xe>
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <dns_setserver+0x18>)
    if (dnsserver != NULL) {
 800ea5a:	b119      	cbz	r1, 800ea64 <dns_setserver+0x10>
      dns_servers[numdns] = (*dnsserver);
 800ea5c:	680a      	ldr	r2, [r1, #0]
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ea5e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 800ea62:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ea64:	4a02      	ldr	r2, [pc, #8]	; (800ea70 <dns_setserver+0x1c>)
 800ea66:	6812      	ldr	r2, [r2, #0]
 800ea68:	e7f9      	b.n	800ea5e <dns_setserver+0xa>
 800ea6a:	bf00      	nop
 800ea6c:	20004b18 	.word	0x20004b18
 800ea70:	0802264c 	.word	0x0802264c

0800ea74 <dns_tmr>:
{
 800ea74:	b508      	push	{r3, lr}
    dns_check_entry(i);
 800ea76:	2000      	movs	r0, #0
 800ea78:	f7ff fe2c 	bl	800e6d4 <dns_check_entry>
 800ea7c:	2001      	movs	r0, #1
 800ea7e:	f7ff fe29 	bl	800e6d4 <dns_check_entry>
 800ea82:	2002      	movs	r0, #2
 800ea84:	f7ff fe26 	bl	800e6d4 <dns_check_entry>
}
 800ea88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 800ea8c:	2003      	movs	r0, #3
 800ea8e:	f7ff be21 	b.w	800e6d4 <dns_check_entry>
	...

0800ea94 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800ea94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	4605      	mov	r5, r0
 800ea9a:	4692      	mov	sl, r2
 800ea9c:	469b      	mov	fp, r3
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800ea9e:	4688      	mov	r8, r1
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	f000 80f9 	beq.w	800ec98 <dns_gethostbyname_addrtype+0x204>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f000 80f6 	beq.w	800ec98 <dns_gethostbyname_addrtype+0x204>
      (!hostname) || (!hostname[0])) {
 800eaac:	7803      	ldrb	r3, [r0, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f000 80f2 	beq.w	800ec98 <dns_gethostbyname_addrtype+0x204>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800eab4:	f7f1 fbc6 	bl	8000244 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800eab8:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 800eaba:	4606      	mov	r6, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800eabc:	f200 80ec 	bhi.w	800ec98 <dns_gethostbyname_addrtype+0x204>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800eac0:	4641      	mov	r1, r8
 800eac2:	4628      	mov	r0, r5
 800eac4:	f006 fd1c 	bl	8015500 <ip4addr_aton>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	f040 80e8 	bne.w	800ec9e <dns_gethostbyname_addrtype+0x20a>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800eace:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800ed00 <dns_gethostbyname_addrtype+0x26c>
 800ead2:	4604      	mov	r4, r0
 800ead4:	464f      	mov	r7, r9
 800ead6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800eada:	4361      	muls	r1, r4
 800eadc:	eb09 0301 	add.w	r3, r9, r1
 800eae0:	7a9a      	ldrb	r2, [r3, #10]
 800eae2:	2a03      	cmp	r2, #3
 800eae4:	d10f      	bne.n	800eb06 <dns_gethostbyname_addrtype+0x72>
 800eae6:	9301      	str	r3, [sp, #4]
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800eae8:	4b7f      	ldr	r3, [pc, #508]	; (800ece8 <dns_gethostbyname_addrtype+0x254>)
 800eaea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eaee:	4419      	add	r1, r3
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f7ff fcdb 	bl	800e4ac <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800eaf6:	9b01      	ldr	r3, [sp, #4]
 800eaf8:	b928      	cbnz	r0, 800eb06 <dns_gethostbyname_addrtype+0x72>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	f8c8 3000 	str.w	r3, [r8]
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800eb00:	b003      	add	sp, #12
 800eb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb06:	3401      	adds	r4, #1
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800eb08:	2c04      	cmp	r4, #4
 800eb0a:	d1e4      	bne.n	800ead6 <dns_gethostbyname_addrtype+0x42>
    if (ip_addr_isany_val(dns_servers[0])) {
 800eb0c:	4b77      	ldr	r3, [pc, #476]	; (800ecec <dns_gethostbyname_addrtype+0x258>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 80c6 	beq.w	800eca2 <dns_gethostbyname_addrtype+0x20e>
 800eb16:	2400      	movs	r4, #0
 800eb18:	f44f 7988 	mov.w	r9, #272	; 0x110
        if (dns_requests[r].found == 0) {
 800eb1c:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800ecf4 <dns_gethostbyname_addrtype+0x260>
 800eb20:	fb09 f104 	mul.w	r1, r9, r4
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800eb24:	187a      	adds	r2, r7, r1
 800eb26:	7a92      	ldrb	r2, [r2, #10]
 800eb28:	b2e3      	uxtb	r3, r4
 800eb2a:	2a02      	cmp	r2, #2
 800eb2c:	d11d      	bne.n	800eb6a <dns_gethostbyname_addrtype+0xd6>
 800eb2e:	9301      	str	r3, [sp, #4]
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800eb30:	4b6d      	ldr	r3, [pc, #436]	; (800ece8 <dns_gethostbyname_addrtype+0x254>)
 800eb32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb36:	4419      	add	r1, r3
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f7ff fcb7 	bl	800e4ac <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800eb3e:	9b01      	ldr	r3, [sp, #4]
 800eb40:	b998      	cbnz	r0, 800eb6a <dns_gethostbyname_addrtype+0xd6>
        if (dns_requests[r].found == 0) {
 800eb42:	f04f 0c0c 	mov.w	ip, #12
 800eb46:	fb0c f200 	mul.w	r2, ip, r0
 800eb4a:	f852 1008 	ldr.w	r1, [r2, r8]
 800eb4e:	b949      	cbnz	r1, 800eb64 <dns_gethostbyname_addrtype+0xd0>
          dns_requests[r].found = found;
 800eb50:	eb08 0102 	add.w	r1, r8, r2
 800eb54:	f848 a002 	str.w	sl, [r8, r2]
          dns_requests[r].arg = callback_arg;
 800eb58:	f8c1 b004 	str.w	fp, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 800eb5c:	720b      	strb	r3, [r1, #8]
  return ERR_INPROGRESS;
 800eb5e:	f06f 0004 	mvn.w	r0, #4
 800eb62:	e7cd      	b.n	800eb00 <dns_gethostbyname_addrtype+0x6c>
 800eb64:	3001      	adds	r0, #1
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800eb66:	2804      	cmp	r0, #4
 800eb68:	d1ed      	bne.n	800eb46 <dns_gethostbyname_addrtype+0xb2>
 800eb6a:	3401      	adds	r4, #1
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800eb6c:	2c04      	cmp	r4, #4
 800eb6e:	d1d7      	bne.n	800eb20 <dns_gethostbyname_addrtype+0x8c>
      u8_t age = dns_seqno - entry->seqno;
 800eb70:	2300      	movs	r3, #0
 800eb72:	f44f 7e88 	mov.w	lr, #272	; 0x110
  lseq = 0;
 800eb76:	4618      	mov	r0, r3
      u8_t age = dns_seqno - entry->seqno;
 800eb78:	4a5d      	ldr	r2, [pc, #372]	; (800ecf0 <dns_gethostbyname_addrtype+0x25c>)
 800eb7a:	7811      	ldrb	r1, [r2, #0]
 800eb7c:	9201      	str	r2, [sp, #4]
 800eb7e:	fb0e 7203 	mla	r2, lr, r3, r7
    if (entry->state == DNS_STATE_UNUSED) {
 800eb82:	f892 900a 	ldrb.w	r9, [r2, #10]
 800eb86:	fa5f fc83 	uxtb.w	ip, r3
 800eb8a:	f1b9 0f00 	cmp.w	r9, #0
 800eb8e:	d13c      	bne.n	800ec0a <dns_gethostbyname_addrtype+0x176>
    entry = &dns_table[i];
 800eb90:	4617      	mov	r7, r2
 800eb92:	4664      	mov	r4, ip
 800eb94:	f04f 0900 	mov.w	r9, #0
    if (dns_requests[r].found == NULL) {
 800eb98:	f04f 0c0c 	mov.w	ip, #12
 800eb9c:	4a55      	ldr	r2, [pc, #340]	; (800ecf4 <dns_gethostbyname_addrtype+0x260>)
 800eb9e:	fb0c f009 	mul.w	r0, ip, r9
 800eba2:	f850 8002 	ldr.w	r8, [r0, r2]
 800eba6:	f1b8 0f00 	cmp.w	r8, #0
 800ebaa:	d147      	bne.n	800ec3c <dns_gethostbyname_addrtype+0x1a8>
  entry->state = DNS_STATE_NEW;
 800ebac:	f04f 0e01 	mov.w	lr, #1
  req->dns_table_idx = i;
 800ebb0:	eb02 0c00 	add.w	ip, r2, r0
  req->arg   = callback_arg;
 800ebb4:	f8cc b004 	str.w	fp, [ip, #4]
    if (dns_pcbs[i] == NULL) {
 800ebb8:	f8df b148 	ldr.w	fp, [pc, #328]	; 800ed04 <dns_gethostbyname_addrtype+0x270>
  req->found = found;
 800ebbc:	f842 a000 	str.w	sl, [r2, r0]
  entry->seqno = dns_seqno;
 800ebc0:	73b9      	strb	r1, [r7, #14]
  MEMCPY(entry->name, name, namelen);
 800ebc2:	4632      	mov	r2, r6
  req->dns_table_idx = i;
 800ebc4:	f88c 4008 	strb.w	r4, [ip, #8]
  entry->name[namelen] = 0;
 800ebc8:	443e      	add	r6, r7
  entry->state = DNS_STATE_NEW;
 800ebca:	f887 e00a 	strb.w	lr, [r7, #10]
  MEMCPY(entry->name, name, namelen);
 800ebce:	4629      	mov	r1, r5
 800ebd0:	f107 0010 	add.w	r0, r7, #16
 800ebd4:	f007 fd9f 	bl	8016716 <memcpy>
 800ebd8:	46da      	mov	sl, fp
  entry->name[namelen] = 0;
 800ebda:	f886 8010 	strb.w	r8, [r6, #16]
 800ebde:	4646      	mov	r6, r8
    if (dns_pcbs[i] == NULL) {
 800ebe0:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
 800ebe4:	b2f5      	uxtb	r5, r6
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d05e      	beq.n	800eca8 <dns_gethostbyname_addrtype+0x214>
 800ebea:	3601      	adds	r6, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800ebec:	2e04      	cmp	r6, #4
 800ebee:	d1f7      	bne.n	800ebe0 <dns_gethostbyname_addrtype+0x14c>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800ebf0:	2304      	movs	r3, #4
 800ebf2:	4a41      	ldr	r2, [pc, #260]	; (800ecf8 <dns_gethostbyname_addrtype+0x264>)
 800ebf4:	7815      	ldrb	r5, [r2, #0]
 800ebf6:	3501      	adds	r5, #1
 800ebf8:	b2ed      	uxtb	r5, r5
      idx = 0;
 800ebfa:	2d04      	cmp	r5, #4
 800ebfc:	bf28      	it	cs
 800ebfe:	2500      	movcs	r5, #0
    if (dns_pcbs[idx] != NULL) {
 800ec00:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800ec04:	b3b9      	cbz	r1, 800ec76 <dns_gethostbyname_addrtype+0x1e2>
      dns_last_pcb_idx = idx;
 800ec06:	7015      	strb	r5, [r2, #0]
 800ec08:	e029      	b.n	800ec5e <dns_gethostbyname_addrtype+0x1ca>
    if (entry->state == DNS_STATE_DONE) {
 800ec0a:	f1b9 0f03 	cmp.w	r9, #3
 800ec0e:	d106      	bne.n	800ec1e <dns_gethostbyname_addrtype+0x18a>
      u8_t age = dns_seqno - entry->seqno;
 800ec10:	7b92      	ldrb	r2, [r2, #14]
 800ec12:	1a8a      	subs	r2, r1, r2
 800ec14:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 800ec16:	4282      	cmp	r2, r0
 800ec18:	bf84      	itt	hi
 800ec1a:	4664      	movhi	r4, ip
 800ec1c:	4610      	movhi	r0, r2
 800ec1e:	3301      	adds	r3, #1
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ec20:	2b04      	cmp	r3, #4
 800ec22:	d1ac      	bne.n	800eb7e <dns_gethostbyname_addrtype+0xea>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800ec24:	2c04      	cmp	r4, #4
 800ec26:	d006      	beq.n	800ec36 <dns_gethostbyname_addrtype+0x1a2>
 800ec28:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ec2c:	fb03 7704 	mla	r7, r3, r4, r7
 800ec30:	7abb      	ldrb	r3, [r7, #10]
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d0ae      	beq.n	800eb94 <dns_gethostbyname_addrtype+0x100>
      return ERR_MEM;
 800ec36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec3a:	e761      	b.n	800eb00 <dns_gethostbyname_addrtype+0x6c>
 800ec3c:	f109 0901 	add.w	r9, r9, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ec40:	f1b9 0f04 	cmp.w	r9, #4
 800ec44:	d1ab      	bne.n	800eb9e <dns_gethostbyname_addrtype+0x10a>
 800ec46:	e7f6      	b.n	800ec36 <dns_gethostbyname_addrtype+0x1a2>
    dns_pcbs[i] = dns_alloc_random_port();
 800ec48:	f84b 8026 	str.w	r8, [fp, r6, lsl #2]
 800ec4c:	e7d0      	b.n	800ebf0 <dns_gethostbyname_addrtype+0x15c>
  udp_recv(ret, dns_recv, NULL);
 800ec4e:	492b      	ldr	r1, [pc, #172]	; (800ecfc <dns_gethostbyname_addrtype+0x268>)
 800ec50:	4640      	mov	r0, r8
 800ec52:	f004 fca7 	bl	80135a4 <udp_recv>
      dns_last_pcb_idx = i;
 800ec56:	4b28      	ldr	r3, [pc, #160]	; (800ecf8 <dns_gethostbyname_addrtype+0x264>)
    dns_pcbs[i] = dns_alloc_random_port();
 800ec58:	f84a 8026 	str.w	r8, [sl, r6, lsl #2]
      dns_last_pcb_idx = i;
 800ec5c:	701d      	strb	r5, [r3, #0]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800ec5e:	2d04      	cmp	r5, #4
  entry->pcb_idx = dns_alloc_pcb();
 800ec60:	73fd      	strb	r5, [r7, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800ec62:	d110      	bne.n	800ec86 <dns_gethostbyname_addrtype+0x1f2>
    req->found = NULL;
 800ec64:	230c      	movs	r3, #12
    entry->state = DNS_STATE_UNUSED;
 800ec66:	2200      	movs	r2, #0
    req->found = NULL;
 800ec68:	fb03 f909 	mul.w	r9, r3, r9
 800ec6c:	4b21      	ldr	r3, [pc, #132]	; (800ecf4 <dns_gethostbyname_addrtype+0x260>)
    entry->state = DNS_STATE_UNUSED;
 800ec6e:	72ba      	strb	r2, [r7, #10]
    req->found = NULL;
 800ec70:	f843 2009 	str.w	r2, [r3, r9]
 800ec74:	e7df      	b.n	800ec36 <dns_gethostbyname_addrtype+0x1a2>
 800ec76:	3b01      	subs	r3, #1
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800ec78:	3501      	adds	r5, #1
 800ec7a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ec7e:	b2ed      	uxtb	r5, r5
 800ec80:	d1bb      	bne.n	800ebfa <dns_gethostbyname_addrtype+0x166>
  return DNS_MAX_SOURCE_PORTS;
 800ec82:	2504      	movs	r5, #4
 800ec84:	e7eb      	b.n	800ec5e <dns_gethostbyname_addrtype+0x1ca>
  dns_seqno++;
 800ec86:	9b01      	ldr	r3, [sp, #4]
 800ec88:	9a01      	ldr	r2, [sp, #4]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
  dns_check_entry(i);
 800ec8c:	4620      	mov	r0, r4
  dns_seqno++;
 800ec8e:	3301      	adds	r3, #1
 800ec90:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 800ec92:	f7ff fd1f 	bl	800e6d4 <dns_check_entry>
 800ec96:	e762      	b.n	800eb5e <dns_gethostbyname_addrtype+0xca>
    return ERR_ARG;
 800ec98:	f06f 000f 	mvn.w	r0, #15
 800ec9c:	e730      	b.n	800eb00 <dns_gethostbyname_addrtype+0x6c>
      return ERR_OK;
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e72e      	b.n	800eb00 <dns_gethostbyname_addrtype+0x6c>
      return ERR_VAL;
 800eca2:	f06f 0005 	mvn.w	r0, #5
 800eca6:	e72b      	b.n	800eb00 <dns_gethostbyname_addrtype+0x6c>
  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
 800eca8:	202e      	movs	r0, #46	; 0x2e
 800ecaa:	f004 fca5 	bl	80135f8 <udp_new_ip_type>
  if (ret == NULL) {
 800ecae:	4680      	mov	r8, r0
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d0c9      	beq.n	800ec48 <dns_gethostbyname_addrtype+0x1b4>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 800ecb4:	f8df b050 	ldr.w	fp, [pc, #80]	; 800ed08 <dns_gethostbyname_addrtype+0x274>
    u16_t port = (u16_t)DNS_RAND_TXID();
 800ecb8:	f007 fe76 	bl	80169a8 <rand>
 800ecbc:	b282      	uxth	r2, r0
    if (!DNS_PORT_ALLOWED(port)) {
 800ecbe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ecc2:	d3f9      	bcc.n	800ecb8 <dns_gethostbyname_addrtype+0x224>
    err = udp_bind(ret, IP_ANY_TYPE, port);
 800ecc4:	4659      	mov	r1, fp
 800ecc6:	4640      	mov	r0, r8
 800ecc8:	f004 fb40 	bl	801334c <udp_bind>
  } while (err == ERR_USE);
 800eccc:	f110 0f08 	cmn.w	r0, #8
    err = udp_bind(ret, IP_ANY_TYPE, port);
 800ecd0:	4602      	mov	r2, r0
  } while (err == ERR_USE);
 800ecd2:	d0f1      	beq.n	800ecb8 <dns_gethostbyname_addrtype+0x224>
  if (err != ERR_OK) {
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	d0ba      	beq.n	800ec4e <dns_gethostbyname_addrtype+0x1ba>
    udp_remove(ret);
 800ecd8:	4640      	mov	r0, r8
 800ecda:	f004 fc67 	bl	80135ac <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 800ecde:	2300      	movs	r3, #0
 800ece0:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
 800ece4:	e784      	b.n	800ebf0 <dns_gethostbyname_addrtype+0x15c>
 800ece6:	bf00      	nop
 800ece8:	20004b30 	.word	0x20004b30
 800ecec:	20004b18 	.word	0x20004b18
 800ecf0:	20004b14 	.word	0x20004b14
 800ecf4:	20004ae4 	.word	0x20004ae4
 800ecf8:	20004ad0 	.word	0x20004ad0
 800ecfc:	0800e7c9 	.word	0x0800e7c9
 800ed00:	20004b20 	.word	0x20004b20
 800ed04:	20004ad4 	.word	0x20004ad4
 800ed08:	0802264c 	.word	0x0802264c

0800ed0c <dns_gethostbyname>:
{
 800ed0c:	b513      	push	{r0, r1, r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 800ed0e:	2400      	movs	r4, #0
 800ed10:	9400      	str	r4, [sp, #0]
 800ed12:	f7ff febf 	bl	800ea94 <dns_gethostbyname_addrtype>
}
 800ed16:	b002      	add	sp, #8
 800ed18:	bd10      	pop	{r4, pc}

0800ed1a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ed1a:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ed1c:	f007 f9aa 	bl	8016074 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ed20:	f000 f80e 	bl	800ed40 <mem_init>
  memp_init();
 800ed24:	f000 fa74 	bl	800f210 <memp_init>
  pbuf_init();
  netif_init();
 800ed28:	f000 fabf 	bl	800f2aa <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ed2c:	f004 fa76 	bl	801321c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ed30:	f001 f84c 	bl	800fdcc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800ed34:	f7ff fe8c 	bl	800ea50 <dns_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800ed38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800ed3c:	f004 b9d2 	b.w	80130e4 <sys_timeouts_init>

0800ed40 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ed40:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <mem_init+0x4c>)
 800ed42:	4a13      	ldr	r2, [pc, #76]	; (800ed90 <mem_init+0x50>)
 800ed44:	f023 0303 	bic.w	r3, r3, #3
{
 800ed48:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ed4a:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800ed4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed50:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800ed52:	2200      	movs	r2, #0
 800ed54:	711a      	strb	r2, [r3, #4]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ed56:	4a0f      	ldr	r2, [pc, #60]	; (800ed94 <mem_init+0x54>)
 800ed58:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 800ed5c:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800ed5e:	4a0e      	ldr	r2, [pc, #56]	; (800ed98 <mem_init+0x58>)
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ed60:	480e      	ldr	r0, [pc, #56]	; (800ed9c <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
 800ed62:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 800ed6c:	4a0c      	ldr	r2, [pc, #48]	; (800eda0 <mem_init+0x60>)
 800ed6e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ed70:	f007 f98c 	bl	801608c <sys_mutex_new>
 800ed74:	b140      	cbz	r0, 800ed88 <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ed76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ed7a:	4b0a      	ldr	r3, [pc, #40]	; (800eda4 <mem_init+0x64>)
 800ed7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ed80:	4909      	ldr	r1, [pc, #36]	; (800eda8 <mem_init+0x68>)
 800ed82:	480a      	ldr	r0, [pc, #40]	; (800edac <mem_init+0x6c>)
 800ed84:	f007 bd80 	b.w	8016888 <iprintf>
}
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	bf00      	nop
 800ed8c:	2000afaf 	.word	0x2000afaf
 800ed90:	20004f68 	.word	0x20004f68
 800ed94:	20004f6c 	.word	0x20004f6c
 800ed98:	06400640 	.word	0x06400640
 800ed9c:	20004f64 	.word	0x20004f64
 800eda0:	20004f60 	.word	0x20004f60
 800eda4:	08020c00 	.word	0x08020c00
 800eda8:	08020c2f 	.word	0x08020c2f
 800edac:	08018495 	.word	0x08018495

0800edb0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800edb4:	4604      	mov	r4, r0
 800edb6:	2800      	cmp	r0, #0
 800edb8:	f000 8096 	beq.w	800eee8 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800edbc:	0783      	lsls	r3, r0, #30
 800edbe:	d006      	beq.n	800edce <mem_free+0x1e>
 800edc0:	4b4a      	ldr	r3, [pc, #296]	; (800eeec <mem_free+0x13c>)
 800edc2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800edc6:	494a      	ldr	r1, [pc, #296]	; (800eef0 <mem_free+0x140>)
 800edc8:	484a      	ldr	r0, [pc, #296]	; (800eef4 <mem_free+0x144>)
 800edca:	f007 fd5d 	bl	8016888 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800edce:	4f4a      	ldr	r7, [pc, #296]	; (800eef8 <mem_free+0x148>)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	42a3      	cmp	r3, r4
 800edd4:	d803      	bhi.n	800edde <mem_free+0x2e>
 800edd6:	4b49      	ldr	r3, [pc, #292]	; (800eefc <mem_free+0x14c>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	42a3      	cmp	r3, r4
 800eddc:	d806      	bhi.n	800edec <mem_free+0x3c>
 800edde:	4b43      	ldr	r3, [pc, #268]	; (800eeec <mem_free+0x13c>)
 800ede0:	f240 12af 	movw	r2, #431	; 0x1af
 800ede4:	4946      	ldr	r1, [pc, #280]	; (800ef00 <mem_free+0x150>)
 800ede6:	4843      	ldr	r0, [pc, #268]	; (800eef4 <mem_free+0x144>)
 800ede8:	f007 fd4e 	bl	8016888 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	42a3      	cmp	r3, r4
 800edf0:	d804      	bhi.n	800edfc <mem_free+0x4c>
 800edf2:	4b42      	ldr	r3, [pc, #264]	; (800eefc <mem_free+0x14c>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4698      	mov	r8, r3
 800edf8:	42a2      	cmp	r2, r4
 800edfa:	d805      	bhi.n	800ee08 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800edfc:	f007 f976 	bl	80160ec <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ee00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 800ee04:	f007 b97e 	b.w	8016104 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 800ee08:	483e      	ldr	r0, [pc, #248]	; (800ef04 <mem_free+0x154>)
 800ee0a:	f007 f94e 	bl	80160aa <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ee0e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ee12:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ee16:	b933      	cbnz	r3, 800ee26 <mem_free+0x76>
 800ee18:	4b34      	ldr	r3, [pc, #208]	; (800eeec <mem_free+0x13c>)
 800ee1a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ee1e:	493a      	ldr	r1, [pc, #232]	; (800ef08 <mem_free+0x158>)
 800ee20:	4834      	ldr	r0, [pc, #208]	; (800eef4 <mem_free+0x144>)
 800ee22:	f007 fd31 	bl	8016888 <iprintf>
  mem->used = 0;
 800ee26:	2300      	movs	r3, #0
  if (mem < lfree) {
 800ee28:	4e38      	ldr	r6, [pc, #224]	; (800ef0c <mem_free+0x15c>)
  mem->used = 0;
 800ee2a:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800ee2e:	6833      	ldr	r3, [r6, #0]
 800ee30:	42ab      	cmp	r3, r5
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee32:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 800ee34:	bf88      	it	hi
 800ee36:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee38:	429d      	cmp	r5, r3
 800ee3a:	d206      	bcs.n	800ee4a <mem_free+0x9a>
 800ee3c:	4b2b      	ldr	r3, [pc, #172]	; (800eeec <mem_free+0x13c>)
 800ee3e:	f240 125d 	movw	r2, #349	; 0x15d
 800ee42:	4933      	ldr	r1, [pc, #204]	; (800ef10 <mem_free+0x160>)
 800ee44:	482b      	ldr	r0, [pc, #172]	; (800eef4 <mem_free+0x144>)
 800ee46:	f007 fd1f 	bl	8016888 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ee4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	d306      	bcc.n	800ee60 <mem_free+0xb0>
 800ee52:	4b26      	ldr	r3, [pc, #152]	; (800eeec <mem_free+0x13c>)
 800ee54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ee58:	492e      	ldr	r1, [pc, #184]	; (800ef14 <mem_free+0x164>)
 800ee5a:	4826      	ldr	r0, [pc, #152]	; (800eef4 <mem_free+0x144>)
 800ee5c:	f007 fd14 	bl	8016888 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ee60:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800ee64:	b133      	cbz	r3, 800ee74 <mem_free+0xc4>
 800ee66:	4b21      	ldr	r3, [pc, #132]	; (800eeec <mem_free+0x13c>)
 800ee68:	f240 125f 	movw	r2, #351	; 0x15f
 800ee6c:	492a      	ldr	r1, [pc, #168]	; (800ef18 <mem_free+0x168>)
 800ee6e:	4821      	ldr	r0, [pc, #132]	; (800eef4 <mem_free+0x144>)
 800ee70:	f007 fd0a 	bl	8016888 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ee74:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800ee78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee7c:	d906      	bls.n	800ee8c <mem_free+0xdc>
 800ee7e:	4b1b      	ldr	r3, [pc, #108]	; (800eeec <mem_free+0x13c>)
 800ee80:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ee84:	4925      	ldr	r1, [pc, #148]	; (800ef1c <mem_free+0x16c>)
 800ee86:	481b      	ldr	r0, [pc, #108]	; (800eef4 <mem_free+0x144>)
 800ee88:	f007 fcfe 	bl	8016888 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800ee92:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ee94:	4295      	cmp	r5, r2
 800ee96:	d010      	beq.n	800eeba <mem_free+0x10a>
 800ee98:	7910      	ldrb	r0, [r2, #4]
 800ee9a:	b970      	cbnz	r0, 800eeba <mem_free+0x10a>
 800ee9c:	f8d8 0000 	ldr.w	r0, [r8]
 800eea0:	4282      	cmp	r2, r0
 800eea2:	d00a      	beq.n	800eeba <mem_free+0x10a>
    if (lfree == nmem) {
 800eea4:	6830      	ldr	r0, [r6, #0]
 800eea6:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800eea8:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800eeaa:	bf08      	it	eq
 800eeac:	6035      	streq	r5, [r6, #0]
    mem->next = nmem->next;
 800eeae:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800eeb2:	5a5a      	ldrh	r2, [r3, r1]
 800eeb4:	1ae9      	subs	r1, r5, r3
 800eeb6:	441a      	add	r2, r3
 800eeb8:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800eeba:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 800eebe:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800eec0:	428d      	cmp	r5, r1
 800eec2:	d00c      	beq.n	800eede <mem_free+0x12e>
 800eec4:	7908      	ldrb	r0, [r1, #4]
 800eec6:	b950      	cbnz	r0, 800eede <mem_free+0x12e>
    if (lfree == mem) {
 800eec8:	6830      	ldr	r0, [r6, #0]
 800eeca:	4285      	cmp	r5, r0
      lfree = pmem;
 800eecc:	bf08      	it	eq
 800eece:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 800eed0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800eed4:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800eed6:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800eeda:	440b      	add	r3, r1
 800eedc:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800eede:	4809      	ldr	r0, [pc, #36]	; (800ef04 <mem_free+0x154>)
}
 800eee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800eee4:	f007 b8e6 	b.w	80160b4 <sys_mutex_unlock>
}
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	08020c00 	.word	0x08020c00
 800eef0:	08020b3e 	.word	0x08020b3e
 800eef4:	08018495 	.word	0x08018495
 800eef8:	20004f68 	.word	0x20004f68
 800eefc:	20004f6c 	.word	0x20004f6c
 800ef00:	08020b5f 	.word	0x08020b5f
 800ef04:	20004f64 	.word	0x20004f64
 800ef08:	08020b76 	.word	0x08020b76
 800ef0c:	20004f60 	.word	0x20004f60
 800ef10:	08020b8a 	.word	0x08020b8a
 800ef14:	08020ba1 	.word	0x08020ba1
 800ef18:	08020bbb 	.word	0x08020bbb
 800ef1c:	08020bd6 	.word	0x08020bd6

0800ef20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ef20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ef24:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800ef28:	3103      	adds	r1, #3
 800ef2a:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800ef2c:	2d0b      	cmp	r5, #11
{
 800ef2e:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 800ef30:	d904      	bls.n	800ef3c <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ef32:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800ef36:	d902      	bls.n	800ef3e <mem_trim+0x1e>
    return NULL;
 800ef38:	2400      	movs	r4, #0
 800ef3a:	e01c      	b.n	800ef76 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 800ef3c:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ef3e:	4b36      	ldr	r3, [pc, #216]	; (800f018 <mem_trim+0xf8>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	4698      	mov	r8, r3
 800ef44:	42a2      	cmp	r2, r4
 800ef46:	d803      	bhi.n	800ef50 <mem_trim+0x30>
 800ef48:	4b34      	ldr	r3, [pc, #208]	; (800f01c <mem_trim+0xfc>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	42a3      	cmp	r3, r4
 800ef4e:	d806      	bhi.n	800ef5e <mem_trim+0x3e>
 800ef50:	4b33      	ldr	r3, [pc, #204]	; (800f020 <mem_trim+0x100>)
 800ef52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ef56:	4933      	ldr	r1, [pc, #204]	; (800f024 <mem_trim+0x104>)
 800ef58:	4833      	ldr	r0, [pc, #204]	; (800f028 <mem_trim+0x108>)
 800ef5a:	f007 fc95 	bl	8016888 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ef5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef62:	42a3      	cmp	r3, r4
 800ef64:	d803      	bhi.n	800ef6e <mem_trim+0x4e>
 800ef66:	4a2d      	ldr	r2, [pc, #180]	; (800f01c <mem_trim+0xfc>)
 800ef68:	6812      	ldr	r2, [r2, #0]
 800ef6a:	42a2      	cmp	r2, r4
 800ef6c:	d806      	bhi.n	800ef7c <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ef6e:	f007 f8bd 	bl	80160ec <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ef72:	f007 f8c7 	bl	8016104 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800ef76:	4620      	mov	r0, r4
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ef7c:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ef80:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ef84:	1af6      	subs	r6, r6, r3
 800ef86:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ef88:	3f08      	subs	r7, #8
 800ef8a:	1bbf      	subs	r7, r7, r6
 800ef8c:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ef8e:	42af      	cmp	r7, r5
 800ef90:	d219      	bcs.n	800efc6 <mem_trim+0xa6>
 800ef92:	4b23      	ldr	r3, [pc, #140]	; (800f020 <mem_trim+0x100>)
 800ef94:	f240 2206 	movw	r2, #518	; 0x206
 800ef98:	4924      	ldr	r1, [pc, #144]	; (800f02c <mem_trim+0x10c>)
 800ef9a:	4823      	ldr	r0, [pc, #140]	; (800f028 <mem_trim+0x108>)
 800ef9c:	f007 fc74 	bl	8016888 <iprintf>
 800efa0:	e7ca      	b.n	800ef38 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800efa2:	f105 0214 	add.w	r2, r5, #20
 800efa6:	42ba      	cmp	r2, r7
 800efa8:	d832      	bhi.n	800f010 <mem_trim+0xf0>
    if (mem2 < lfree) {
 800efaa:	4821      	ldr	r0, [pc, #132]	; (800f030 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800efac:	f106 0208 	add.w	r2, r6, #8
 800efb0:	4415      	add	r5, r2
    if (mem2 < lfree) {
 800efb2:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800efb4:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800efb6:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 800efb8:	4297      	cmp	r7, r2
      lfree = mem2;
 800efba:	bf88      	it	hi
 800efbc:	6002      	strhi	r2, [r0, #0]
    mem2->used = 0;
 800efbe:	2000      	movs	r0, #0
 800efc0:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 800efc2:	5359      	strh	r1, [r3, r5]
 800efc4:	e01b      	b.n	800effe <mem_trim+0xde>
  if (newsize == size) {
 800efc6:	d0d6      	beq.n	800ef76 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 800efc8:	481a      	ldr	r0, [pc, #104]	; (800f034 <mem_trim+0x114>)
 800efca:	f007 f86e 	bl	80160aa <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800efce:	f8d8 3000 	ldr.w	r3, [r8]
 800efd2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800efd6:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 800efd8:	7902      	ldrb	r2, [r0, #4]
 800efda:	2a00      	cmp	r2, #0
 800efdc:	d1e1      	bne.n	800efa2 <mem_trim+0x82>
    next = mem2->next;
 800efde:	f833 c001 	ldrh.w	ip, [r3, r1]
    if (lfree == mem2) {
 800efe2:	4913      	ldr	r1, [pc, #76]	; (800f030 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800efe4:	f106 0208 	add.w	r2, r6, #8
    if (lfree == mem2) {
 800efe8:	680f      	ldr	r7, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800efea:	4415      	add	r5, r2
 800efec:	b2ad      	uxth	r5, r5
 800efee:	195a      	adds	r2, r3, r5
    if (lfree == mem2) {
 800eff0:	4287      	cmp	r7, r0
      lfree = (struct mem *)(void *)&ram[ptr2];
 800eff2:	bf08      	it	eq
 800eff4:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 800eff6:	2100      	movs	r1, #0
 800eff8:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 800effa:	f823 c005 	strh.w	ip, [r3, r5]
    mem2->prev = ptr;
 800effe:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 800f000:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f004:	5b5a      	ldrh	r2, [r3, r5]
 800f006:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f00a:	bf1c      	itt	ne
 800f00c:	189b      	addne	r3, r3, r2
 800f00e:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800f010:	4808      	ldr	r0, [pc, #32]	; (800f034 <mem_trim+0x114>)
 800f012:	f007 f84f 	bl	80160b4 <sys_mutex_unlock>
  return rmem;
 800f016:	e7ae      	b.n	800ef76 <mem_trim+0x56>
 800f018:	20004f68 	.word	0x20004f68
 800f01c:	20004f6c 	.word	0x20004f6c
 800f020:	08020c00 	.word	0x08020c00
 800f024:	08020ce5 	.word	0x08020ce5
 800f028:	08018495 	.word	0x08018495
 800f02c:	08020cfc 	.word	0x08020cfc
 800f030:	20004f60 	.word	0x20004f60
 800f034:	20004f64 	.word	0x20004f64

0800f038 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d07b      	beq.n	800f138 <mem_malloc+0x100>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f040:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 800f044:	3003      	adds	r0, #3
 800f046:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 800f048:	2d0b      	cmp	r5, #11
 800f04a:	d904      	bls.n	800f056 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f04c:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800f050:	d902      	bls.n	800f058 <mem_malloc+0x20>
    return NULL;
 800f052:	2000      	movs	r0, #0
 800f054:	e070      	b.n	800f138 <mem_malloc+0x100>
    size = MIN_SIZE_ALIGNED;
 800f056:	250c      	movs	r5, #12
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f058:	f06f 0907 	mvn.w	r9, #7
  sys_mutex_lock(&mem_mutex);
 800f05c:	483b      	ldr	r0, [pc, #236]	; (800f14c <mem_malloc+0x114>)
 800f05e:	f007 f824 	bl	80160aa <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f062:	4e3b      	ldr	r6, [pc, #236]	; (800f150 <mem_malloc+0x118>)
 800f064:	483b      	ldr	r0, [pc, #236]	; (800f154 <mem_malloc+0x11c>)
 800f066:	6831      	ldr	r1, [r6, #0]
 800f068:	6807      	ldr	r7, [r0, #0]
 800f06a:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
 800f06e:	1a7b      	subs	r3, r7, r1
 800f070:	b29b      	uxth	r3, r3
 800f072:	4543      	cmp	r3, r8
 800f074:	d303      	bcc.n	800f07e <mem_malloc+0x46>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f076:	4835      	ldr	r0, [pc, #212]	; (800f14c <mem_malloc+0x114>)
 800f078:	f007 f81c 	bl	80160b4 <sys_mutex_unlock>
 800f07c:	e7e9      	b.n	800f052 <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 800f07e:	18cc      	adds	r4, r1, r3
      if ((!mem->used) &&
 800f080:	f894 e004 	ldrb.w	lr, [r4, #4]
 800f084:	f831 c003 	ldrh.w	ip, [r1, r3]
 800f088:	f1be 0f00 	cmp.w	lr, #0
 800f08c:	d15c      	bne.n	800f148 <mem_malloc+0x110>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f08e:	eba9 0203 	sub.w	r2, r9, r3
 800f092:	4462      	add	r2, ip
      if ((!mem->used) &&
 800f094:	42aa      	cmp	r2, r5
 800f096:	d357      	bcc.n	800f148 <mem_malloc+0x110>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f098:	f105 0814 	add.w	r8, r5, #20
 800f09c:	4542      	cmp	r2, r8
 800f09e:	d34d      	bcc.n	800f13c <mem_malloc+0x104>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f0a0:	f105 0208 	add.w	r2, r5, #8
 800f0a4:	441a      	add	r2, r3
 800f0a6:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800f0a8:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 800f0ac:	f888 e004 	strb.w	lr, [r8, #4]
          mem2->next = mem->next;
 800f0b0:	f821 c002 	strh.w	ip, [r1, r2]
          mem2->prev = ptr;
 800f0b4:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 800f0b8:	2301      	movs	r3, #1
          mem->next = ptr2;
 800f0ba:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800f0bc:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0be:	5a8b      	ldrh	r3, [r1, r2]
 800f0c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0c4:	d001      	beq.n	800f0ca <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f0c6:	4419      	add	r1, r3
 800f0c8:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 800f0ca:	42a7      	cmp	r7, r4
 800f0cc:	4f22      	ldr	r7, [pc, #136]	; (800f158 <mem_malloc+0x120>)
 800f0ce:	d112      	bne.n	800f0f6 <mem_malloc+0xbe>
            cur = (struct mem *)(void *)&ram[cur->next];
 800f0d0:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800f0d2:	683a      	ldr	r2, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 800f0d4:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 800f0d6:	7919      	ldrb	r1, [r3, #4]
 800f0d8:	b111      	cbz	r1, 800f0e0 <mem_malloc+0xa8>
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d131      	bne.n	800f142 <mem_malloc+0x10a>
 800f0de:	4613      	mov	r3, r2
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f0e0:	429a      	cmp	r2, r3
          lfree = cur;
 800f0e2:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f0e4:	d007      	beq.n	800f0f6 <mem_malloc+0xbe>
 800f0e6:	b131      	cbz	r1, 800f0f6 <mem_malloc+0xbe>
 800f0e8:	4b1c      	ldr	r3, [pc, #112]	; (800f15c <mem_malloc+0x124>)
 800f0ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f0ee:	491c      	ldr	r1, [pc, #112]	; (800f160 <mem_malloc+0x128>)
 800f0f0:	481c      	ldr	r0, [pc, #112]	; (800f164 <mem_malloc+0x12c>)
 800f0f2:	f007 fbc9 	bl	8016888 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 800f0f6:	4815      	ldr	r0, [pc, #84]	; (800f14c <mem_malloc+0x114>)
 800f0f8:	f006 ffdc 	bl	80160b4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f0fc:	3508      	adds	r5, #8
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	4425      	add	r5, r4
 800f102:	42ab      	cmp	r3, r5
 800f104:	d206      	bcs.n	800f114 <mem_malloc+0xdc>
 800f106:	4b15      	ldr	r3, [pc, #84]	; (800f15c <mem_malloc+0x124>)
 800f108:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f10c:	4916      	ldr	r1, [pc, #88]	; (800f168 <mem_malloc+0x130>)
 800f10e:	4815      	ldr	r0, [pc, #84]	; (800f164 <mem_malloc+0x12c>)
 800f110:	f007 fbba 	bl	8016888 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f114:	07a3      	lsls	r3, r4, #30
 800f116:	d00d      	beq.n	800f134 <mem_malloc+0xfc>
 800f118:	4b10      	ldr	r3, [pc, #64]	; (800f15c <mem_malloc+0x124>)
 800f11a:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f11e:	4913      	ldr	r1, [pc, #76]	; (800f16c <mem_malloc+0x134>)
 800f120:	4810      	ldr	r0, [pc, #64]	; (800f164 <mem_malloc+0x12c>)
 800f122:	f007 fbb1 	bl	8016888 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f126:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <mem_malloc+0x124>)
 800f128:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f12c:	4910      	ldr	r1, [pc, #64]	; (800f170 <mem_malloc+0x138>)
 800f12e:	480d      	ldr	r0, [pc, #52]	; (800f164 <mem_malloc+0x12c>)
 800f130:	f007 fbaa 	bl	8016888 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f134:	f104 0008 	add.w	r0, r4, #8
  return NULL;
}
 800f138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800f13c:	2301      	movs	r3, #1
 800f13e:	7123      	strb	r3, [r4, #4]
 800f140:	e7c3      	b.n	800f0ca <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	4433      	add	r3, r6
 800f146:	e7c6      	b.n	800f0d6 <mem_malloc+0x9e>
 800f148:	4663      	mov	r3, ip
 800f14a:	e792      	b.n	800f072 <mem_malloc+0x3a>
 800f14c:	20004f64 	.word	0x20004f64
 800f150:	20004f68 	.word	0x20004f68
 800f154:	20004f60 	.word	0x20004f60
 800f158:	20004f6c 	.word	0x20004f6c
 800f15c:	08020c00 	.word	0x08020c00
 800f160:	08020c4a 	.word	0x08020c4a
 800f164:	08018495 	.word	0x08018495
 800f168:	08020c63 	.word	0x08020c63
 800f16c:	08020c93 	.word	0x08020c93
 800f170:	08020cc2 	.word	0x08020cc2

0800f174 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f178:	f006 ffb8 	bl	80160ec <sys_arch_protect>

  memp = *desc->tab;
 800f17c:	6823      	ldr	r3, [r4, #0]
  SYS_ARCH_PROTECT(old_level);
 800f17e:	4605      	mov	r5, r0
  memp = *desc->tab;
 800f180:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f182:	b15c      	cbz	r4, 800f19c <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f184:	6822      	ldr	r2, [r4, #0]
 800f186:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f188:	07a3      	lsls	r3, r4, #30
 800f18a:	d006      	beq.n	800f19a <do_memp_malloc_pool.isra.0+0x26>
 800f18c:	4b05      	ldr	r3, [pc, #20]	; (800f1a4 <do_memp_malloc_pool.isra.0+0x30>)
 800f18e:	f240 1249 	movw	r2, #329	; 0x149
 800f192:	4905      	ldr	r1, [pc, #20]	; (800f1a8 <do_memp_malloc_pool.isra.0+0x34>)
 800f194:	4805      	ldr	r0, [pc, #20]	; (800f1ac <do_memp_malloc_pool.isra.0+0x38>)
 800f196:	f007 fb77 	bl	8016888 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f19a:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f19c:	f006 ffb2 	bl	8016104 <sys_arch_unprotect>
  return NULL;
}
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	08020d3c 	.word	0x08020d3c
 800f1a8:	08020d6c 	.word	0x08020d6c
 800f1ac:	08018495 	.word	0x08018495

0800f1b0 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800f1b0:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f1b2:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 800f1b4:	4605      	mov	r5, r0
 800f1b6:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800f1b8:	d006      	beq.n	800f1c8 <do_memp_free_pool.isra.1+0x18>
 800f1ba:	4b08      	ldr	r3, [pc, #32]	; (800f1dc <do_memp_free_pool.isra.1+0x2c>)
 800f1bc:	f240 129d 	movw	r2, #413	; 0x19d
 800f1c0:	4907      	ldr	r1, [pc, #28]	; (800f1e0 <do_memp_free_pool.isra.1+0x30>)
 800f1c2:	4808      	ldr	r0, [pc, #32]	; (800f1e4 <do_memp_free_pool.isra.1+0x34>)
 800f1c4:	f007 fb60 	bl	8016888 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800f1c8:	f006 ff90 	bl	80160ec <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800f1d2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800f1d8:	f006 bf94 	b.w	8016104 <sys_arch_unprotect>
 800f1dc:	08020d3c 	.word	0x08020d3c
 800f1e0:	08020d1c 	.word	0x08020d1c
 800f1e4:	08018495 	.word	0x08018495

0800f1e8 <memp_init_pool>:
  *desc->tab = NULL;
 800f1e8:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f1ea:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800f1ec:	6881      	ldr	r1, [r0, #8]
{
 800f1ee:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f1f0:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 800f1f2:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800f1f4:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f1f6:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800f1fa:	4294      	cmp	r4, r2
 800f1fc:	dc00      	bgt.n	800f200 <memp_init_pool+0x18>
}
 800f1fe:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800f200:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800f202:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800f204:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f206:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800f208:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f20a:	442b      	add	r3, r5
 800f20c:	e7f5      	b.n	800f1fa <memp_init_pool+0x12>
	...

0800f210 <memp_init>:
{
 800f210:	b538      	push	{r3, r4, r5, lr}
 800f212:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800f214:	4d04      	ldr	r5, [pc, #16]	; (800f228 <memp_init+0x18>)
 800f216:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800f21a:	3401      	adds	r4, #1
 800f21c:	f7ff ffe4 	bl	800f1e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f220:	2c0e      	cmp	r4, #14
 800f222:	d1f8      	bne.n	800f216 <memp_init+0x6>
}
 800f224:	bd38      	pop	{r3, r4, r5, pc}
 800f226:	bf00      	nop
 800f228:	08020e70 	.word	0x08020e70

0800f22c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f22c:	280d      	cmp	r0, #13
{
 800f22e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f230:	d807      	bhi.n	800f242 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f232:	4b08      	ldr	r3, [pc, #32]	; (800f254 <memp_malloc+0x28>)
 800f234:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800f238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f23c:	3008      	adds	r0, #8
 800f23e:	f7ff bf99 	b.w	800f174 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f242:	4b05      	ldr	r3, [pc, #20]	; (800f258 <memp_malloc+0x2c>)
 800f244:	f240 1287 	movw	r2, #391	; 0x187
 800f248:	4904      	ldr	r1, [pc, #16]	; (800f25c <memp_malloc+0x30>)
 800f24a:	4805      	ldr	r0, [pc, #20]	; (800f260 <memp_malloc+0x34>)
 800f24c:	f007 fb1c 	bl	8016888 <iprintf>
}
 800f250:	2000      	movs	r0, #0
 800f252:	bd08      	pop	{r3, pc}
 800f254:	08020e70 	.word	0x08020e70
 800f258:	08020d3c 	.word	0x08020d3c
 800f25c:	08020e53 	.word	0x08020e53
 800f260:	08018495 	.word	0x08018495

0800f264 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f264:	280d      	cmp	r0, #13
 800f266:	d906      	bls.n	800f276 <memp_free+0x12>
 800f268:	4b07      	ldr	r3, [pc, #28]	; (800f288 <memp_free+0x24>)
 800f26a:	f240 12db 	movw	r2, #475	; 0x1db
 800f26e:	4907      	ldr	r1, [pc, #28]	; (800f28c <memp_free+0x28>)
 800f270:	4807      	ldr	r0, [pc, #28]	; (800f290 <memp_free+0x2c>)
 800f272:	f007 bb09 	b.w	8016888 <iprintf>

  if (mem == NULL) {
 800f276:	b129      	cbz	r1, 800f284 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f278:	4b06      	ldr	r3, [pc, #24]	; (800f294 <memp_free+0x30>)
 800f27a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f27e:	3008      	adds	r0, #8
 800f280:	f7ff bf96 	b.w	800f1b0 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	08020d3c 	.word	0x08020d3c
 800f28c:	08020e38 	.word	0x08020e38
 800f290:	08018495 	.word	0x08018495
 800f294:	08020e70 	.word	0x08020e70

0800f298 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f298:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
netif_issue_reports(struct netif* netif, u8_t report_type)
 800f29c:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f29e:	071b      	lsls	r3, r3, #28
 800f2a0:	d502      	bpl.n	800f2a8 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800f2a2:	3104      	adds	r1, #4
 800f2a4:	f005 bcd6 	b.w	8014c54 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f2a8:	4770      	bx	lr

0800f2aa <netif_init>:
}
 800f2aa:	4770      	bx	lr

0800f2ac <netif_set_ipaddr>:
{
 800f2ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2ae:	4604      	mov	r4, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f2b0:	460d      	mov	r5, r1
 800f2b2:	b191      	cbz	r1, 800f2da <netif_set_ipaddr+0x2e>
 800f2b4:	680b      	ldr	r3, [r1, #0]
 800f2b6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f2b8:	9a01      	ldr	r2, [sp, #4]
 800f2ba:	6863      	ldr	r3, [r4, #4]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d00a      	beq.n	800f2d6 <netif_set_ipaddr+0x2a>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f2c0:	1d26      	adds	r6, r4, #4
 800f2c2:	a901      	add	r1, sp, #4
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f001 fcbd 	bl	8010c44 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f2ca:	a901      	add	r1, sp, #4
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f004 f995 	bl	80135fc <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f2d2:	b92d      	cbnz	r5, 800f2e0 <netif_set_ipaddr+0x34>
 800f2d4:	6065      	str	r5, [r4, #4]
}
 800f2d6:	b002      	add	sp, #8
 800f2d8:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f2da:	4b05      	ldr	r3, [pc, #20]	; (800f2f0 <netif_set_ipaddr+0x44>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	e7ea      	b.n	800f2b6 <netif_set_ipaddr+0xa>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d0f6      	beq.n	800f2d6 <netif_set_ipaddr+0x2a>
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7ff ffd5 	bl	800f298 <netif_issue_reports.part.0>
}
 800f2ee:	e7f2      	b.n	800f2d6 <netif_set_ipaddr+0x2a>
 800f2f0:	0802264c 	.word	0x0802264c

0800f2f4 <netif_set_addr>:
{
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	4615      	mov	r5, r2
 800f2fa:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 800f2fc:	b109      	cbz	r1, 800f302 <netif_set_addr+0xe>
 800f2fe:	680b      	ldr	r3, [r1, #0]
 800f300:	b94b      	cbnz	r3, 800f316 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ffd2 	bl	800f2ac <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f308:	b105      	cbz	r5, 800f30c <netif_set_addr+0x18>
 800f30a:	682d      	ldr	r5, [r5, #0]
 800f30c:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f30e:	b104      	cbz	r4, 800f312 <netif_set_addr+0x1e>
 800f310:	6824      	ldr	r4, [r4, #0]
 800f312:	60f4      	str	r4, [r6, #12]
}
 800f314:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f316:	b102      	cbz	r2, 800f31a <netif_set_addr+0x26>
 800f318:	6815      	ldr	r5, [r2, #0]
 800f31a:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f31c:	b104      	cbz	r4, 800f320 <netif_set_addr+0x2c>
 800f31e:	6824      	ldr	r4, [r4, #0]
 800f320:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 800f322:	4630      	mov	r0, r6
}
 800f324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 800f328:	f7ff bfc0 	b.w	800f2ac <netif_set_ipaddr>

0800f32c <netif_add>:
{
 800f32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f330:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f332:	4604      	mov	r4, r0
 800f334:	460f      	mov	r7, r1
 800f336:	4690      	mov	r8, r2
 800f338:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 800f33a:	b92e      	cbnz	r6, 800f348 <netif_add+0x1c>
 800f33c:	4b16      	ldr	r3, [pc, #88]	; (800f398 <netif_add+0x6c>)
 800f33e:	22fb      	movs	r2, #251	; 0xfb
 800f340:	4916      	ldr	r1, [pc, #88]	; (800f39c <netif_add+0x70>)
 800f342:	4817      	ldr	r0, [pc, #92]	; (800f3a0 <netif_add+0x74>)
 800f344:	f007 faa0 	bl	8016888 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f348:	2303      	movs	r3, #3
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f34a:	2500      	movs	r5, #0
  netif->num = netif_num++;
 800f34c:	4a15      	ldr	r2, [pc, #84]	; (800f3a4 <netif_add+0x78>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f34e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->state = state;
 800f352:	9b08      	ldr	r3, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f354:	4620      	mov	r0, r4
  netif->state = state;
 800f356:	6223      	str	r3, [r4, #32]
  netif->num = netif_num++;
 800f358:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f35a:	e9c4 5501 	strd	r5, r5, [r4, #4]
  netif->num = netif_num++;
 800f35e:	1c59      	adds	r1, r3, #1
 800f360:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  netif->input = input;
 800f364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 800f366:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 800f368:	6123      	str	r3, [r4, #16]
  ip_addr_set_zero_ip4(&netif->gw);
 800f36a:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 800f36c:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f370:	6265      	str	r5, [r4, #36]	; 0x24
  netif->link_callback = NULL;
 800f372:	61e5      	str	r5, [r4, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f374:	464b      	mov	r3, r9
 800f376:	4642      	mov	r2, r8
 800f378:	4639      	mov	r1, r7
 800f37a:	f7ff ffbb 	bl	800f2f4 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800f37e:	4620      	mov	r0, r4
 800f380:	47b0      	blx	r6
 800f382:	b930      	cbnz	r0, 800f392 <netif_add+0x66>
  netif->next = netif_list;
 800f384:	4b08      	ldr	r3, [pc, #32]	; (800f3a8 <netif_add+0x7c>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800f38a:	601c      	str	r4, [r3, #0]
}
 800f38c:	4620      	mov	r0, r4
 800f38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800f392:	462c      	mov	r4, r5
 800f394:	e7fa      	b.n	800f38c <netif_add+0x60>
 800f396:	bf00      	nop
 800f398:	08020ea8 	.word	0x08020ea8
 800f39c:	08020ed9 	.word	0x08020ed9
 800f3a0:	08018495 	.word	0x08018495
 800f3a4:	20004fa8 	.word	0x20004fa8
 800f3a8:	2000d978 	.word	0x2000d978

0800f3ac <netif_set_default>:
  netif_default = netif;
 800f3ac:	4b01      	ldr	r3, [pc, #4]	; (800f3b4 <netif_set_default+0x8>)
 800f3ae:	6018      	str	r0, [r3, #0]
}
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	2000d97c 	.word	0x2000d97c

0800f3b8 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f3b8:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800f3bc:	07d1      	lsls	r1, r2, #31
 800f3be:	d409      	bmi.n	800f3d4 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800f3c0:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f3c4:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800f3c6:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f3ca:	d503      	bpl.n	800f3d4 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f3cc:	6843      	ldr	r3, [r0, #4]
 800f3ce:	b10b      	cbz	r3, 800f3d4 <netif_set_up+0x1c>
 800f3d0:	f7ff bf62 	b.w	800f298 <netif_issue_reports.part.0>
}
 800f3d4:	4770      	bx	lr

0800f3d6 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800f3d6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800f3da:	07d9      	lsls	r1, r3, #31
 800f3dc:	d507      	bpl.n	800f3ee <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 800f3de:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f3e2:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800f3e4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f3e8:	d501      	bpl.n	800f3ee <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 800f3ea:	f005 bb7f 	b.w	8014aec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f3ee:	4770      	bx	lr

0800f3f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f3f0:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f3f2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
{
 800f3f6:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f3f8:	075a      	lsls	r2, r3, #29
 800f3fa:	d414      	bmi.n	800f426 <netif_set_link_up+0x36>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f3fc:	f043 0304 	orr.w	r3, r3, #4
 800f400:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800f404:	f004 ffc4 	bl	8014390 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800f408:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800f40c:	07db      	lsls	r3, r3, #31
 800f40e:	d504      	bpl.n	800f41a <netif_set_link_up+0x2a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f410:	6863      	ldr	r3, [r4, #4]
 800f412:	b113      	cbz	r3, 800f41a <netif_set_link_up+0x2a>
 800f414:	4620      	mov	r0, r4
 800f416:	f7ff ff3f 	bl	800f298 <netif_issue_reports.part.0>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
    }
    NETIF_LINK_CALLBACK(netif);
 800f41a:	69e3      	ldr	r3, [r4, #28]
 800f41c:	b11b      	cbz	r3, 800f426 <netif_set_link_up+0x36>
 800f41e:	4620      	mov	r0, r4
  }
}
 800f420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800f424:	4718      	bx	r3
}
 800f426:	bd10      	pop	{r4, pc}

0800f428 <netif_set_link_down>:
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f428:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800f42c:	0759      	lsls	r1, r3, #29
 800f42e:	d506      	bpl.n	800f43e <netif_set_link_down+0x16>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800f430:	f023 0304 	bic.w	r3, r3, #4
 800f434:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 800f438:	69c3      	ldr	r3, [r0, #28]
 800f43a:	b103      	cbz	r3, 800f43e <netif_set_link_down+0x16>
 800f43c:	4718      	bx	r3
  }
}
 800f43e:	4770      	bx	lr

0800f440 <netif_set_link_callback>:
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  if (netif) {
 800f440:	b100      	cbz	r0, 800f444 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800f442:	61c1      	str	r1, [r0, #28]
  }
}
 800f444:	4770      	bx	lr

0800f446 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf* q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f446:	b110      	cbz	r0, 800f44e <pbuf_skip_const+0x8>
 800f448:	8943      	ldrh	r3, [r0, #10]
 800f44a:	428b      	cmp	r3, r1
 800f44c:	d902      	bls.n	800f454 <pbuf_skip_const+0xe>
    offset_left -= q->len;
    q = q->next;
  }
  if (out_offset != NULL) {
 800f44e:	b102      	cbz	r2, 800f452 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 800f450:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 800f452:	4770      	bx	lr
    offset_left -= q->len;
 800f454:	1ac9      	subs	r1, r1, r3
 800f456:	b289      	uxth	r1, r1
    q = q->next;
 800f458:	6800      	ldr	r0, [r0, #0]
 800f45a:	e7f4      	b.n	800f446 <pbuf_skip_const>

0800f45c <pbuf_free_ooseq_callback>:
{
 800f45c:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f45e:	f006 fe45 	bl	80160ec <sys_arch_protect>
 800f462:	2200      	movs	r2, #0
 800f464:	4b07      	ldr	r3, [pc, #28]	; (800f484 <pbuf_free_ooseq_callback+0x28>)
 800f466:	701a      	strb	r2, [r3, #0]
 800f468:	f006 fe4c 	bl	8016104 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f46c:	4b06      	ldr	r3, [pc, #24]	; (800f488 <pbuf_free_ooseq_callback+0x2c>)
 800f46e:	681c      	ldr	r4, [r3, #0]
 800f470:	b12c      	cbz	r4, 800f47e <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 800f472:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800f474:	b120      	cbz	r0, 800f480 <pbuf_free_ooseq_callback+0x24>
      tcp_segs_free(pcb->ooseq);
 800f476:	f000 fdc9 	bl	801000c <tcp_segs_free>
      pcb->ooseq = NULL;
 800f47a:	2300      	movs	r3, #0
 800f47c:	6723      	str	r3, [r4, #112]	; 0x70
}
 800f47e:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f480:	68e4      	ldr	r4, [r4, #12]
 800f482:	e7f5      	b.n	800f470 <pbuf_free_ooseq_callback+0x14>
 800f484:	2000d980 	.word	0x2000d980
 800f488:	2000d988 	.word	0x2000d988

0800f48c <pbuf_header_impl>:
{
 800f48c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f48e:	4604      	mov	r4, r0
 800f490:	bb70      	cbnz	r0, 800f4f0 <pbuf_header_impl+0x64>
 800f492:	4b20      	ldr	r3, [pc, #128]	; (800f514 <pbuf_header_impl+0x88>)
 800f494:	f240 223f 	movw	r2, #575	; 0x23f
 800f498:	491f      	ldr	r1, [pc, #124]	; (800f518 <pbuf_header_impl+0x8c>)
 800f49a:	4820      	ldr	r0, [pc, #128]	; (800f51c <pbuf_header_impl+0x90>)
 800f49c:	f007 f9f4 	bl	8016888 <iprintf>
  return 0;
 800f4a0:	2000      	movs	r0, #0
}
 800f4a2:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 800f4a4:	461d      	mov	r5, r3
  type = p->type;
 800f4a6:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 800f4a8:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800f4aa:	b10e      	cbz	r6, 800f4b0 <pbuf_header_impl+0x24>
 800f4ac:	2e03      	cmp	r6, #3
 800f4ae:	d106      	bne.n	800f4be <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 800f4b0:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f4b2:	f104 0210 	add.w	r2, r4, #16
 800f4b6:	4290      	cmp	r0, r2
 800f4b8:	d20a      	bcs.n	800f4d0 <pbuf_header_impl+0x44>
      return 1;
 800f4ba:	2001      	movs	r0, #1
 800f4bc:	e7f1      	b.n	800f4a2 <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800f4be:	3e01      	subs	r6, #1
 800f4c0:	2e01      	cmp	r6, #1
 800f4c2:	d810      	bhi.n	800f4e6 <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f4c4:	2900      	cmp	r1, #0
 800f4c6:	da0b      	bge.n	800f4e0 <pbuf_header_impl+0x54>
 800f4c8:	8962      	ldrh	r2, [r4, #10]
 800f4ca:	42aa      	cmp	r2, r5
 800f4cc:	d3f5      	bcc.n	800f4ba <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f4ce:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 800f4d0:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 800f4d2:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 800f4d4:	441a      	add	r2, r3
 800f4d6:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 800f4d8:	8922      	ldrh	r2, [r4, #8]
 800f4da:	4413      	add	r3, r2
 800f4dc:	8123      	strh	r3, [r4, #8]
 800f4de:	e7df      	b.n	800f4a0 <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 800f4e0:	2a00      	cmp	r2, #0
 800f4e2:	d1f4      	bne.n	800f4ce <pbuf_header_impl+0x42>
 800f4e4:	e7e9      	b.n	800f4ba <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 800f4e6:	4b0b      	ldr	r3, [pc, #44]	; (800f514 <pbuf_header_impl+0x88>)
 800f4e8:	f240 2277 	movw	r2, #631	; 0x277
 800f4ec:	490c      	ldr	r1, [pc, #48]	; (800f520 <pbuf_header_impl+0x94>)
 800f4ee:	e00c      	b.n	800f50a <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 800f4f0:	2900      	cmp	r1, #0
 800f4f2:	d0d5      	beq.n	800f4a0 <pbuf_header_impl+0x14>
 800f4f4:	b28b      	uxth	r3, r1
  if (header_size_increment < 0) {
 800f4f6:	dad5      	bge.n	800f4a4 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 800f4f8:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f4fa:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800f4fc:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f4fe:	42a8      	cmp	r0, r5
 800f500:	d2d1      	bcs.n	800f4a6 <pbuf_header_impl+0x1a>
 800f502:	f240 2247 	movw	r2, #583	; 0x247
 800f506:	4b03      	ldr	r3, [pc, #12]	; (800f514 <pbuf_header_impl+0x88>)
 800f508:	4906      	ldr	r1, [pc, #24]	; (800f524 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 800f50a:	4804      	ldr	r0, [pc, #16]	; (800f51c <pbuf_header_impl+0x90>)
 800f50c:	f007 f9bc 	bl	8016888 <iprintf>
 800f510:	e7d3      	b.n	800f4ba <pbuf_header_impl+0x2e>
 800f512:	bf00      	nop
 800f514:	08021155 	.word	0x08021155
 800f518:	080211bf 	.word	0x080211bf
 800f51c:	08018495 	.word	0x08018495
 800f520:	080211a3 	.word	0x080211a3
 800f524:	08021185 	.word	0x08021185

0800f528 <pbuf_pool_is_empty>:
{
 800f528:	b538      	push	{r3, r4, r5, lr}
  SYS_ARCH_PROTECT(old_level);
 800f52a:	f006 fddf 	bl	80160ec <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 800f52e:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800f530:	4d0a      	ldr	r5, [pc, #40]	; (800f55c <pbuf_pool_is_empty+0x34>)
 800f532:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 800f534:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 800f536:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 800f538:	f006 fde4 	bl	8016104 <sys_arch_unprotect>
  if (!queued) {
 800f53c:	b964      	cbnz	r4, 800f558 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f53e:	4622      	mov	r2, r4
 800f540:	4621      	mov	r1, r4
 800f542:	4807      	ldr	r0, [pc, #28]	; (800f560 <pbuf_pool_is_empty+0x38>)
 800f544:	f7fd ff82 	bl	800d44c <tcpip_callback_with_block>
 800f548:	b130      	cbz	r0, 800f558 <pbuf_pool_is_empty+0x30>
 800f54a:	f006 fdcf 	bl	80160ec <sys_arch_protect>
 800f54e:	702c      	strb	r4, [r5, #0]
}
 800f550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f554:	f006 bdd6 	b.w	8016104 <sys_arch_unprotect>
}
 800f558:	bd38      	pop	{r3, r4, r5, pc}
 800f55a:	bf00      	nop
 800f55c:	2000d980 	.word	0x2000d980
 800f560:	0800f45d 	.word	0x0800f45d

0800f564 <pbuf_alloced_custom>:
{
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 800f568:	2804      	cmp	r0, #4
 800f56a:	d81e      	bhi.n	800f5aa <pbuf_alloced_custom+0x46>
 800f56c:	e8df f000 	tbb	[pc, r0]
 800f570:	1b280326 	.word	0x1b280326
 800f574:	1b          	.byte	0x1b
 800f575:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f576:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f578:	3003      	adds	r0, #3
 800f57a:	f020 0403 	bic.w	r4, r0, #3
 800f57e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800f582:	190e      	adds	r6, r1, r4
 800f584:	4286      	cmp	r6, r0
 800f586:	f04f 0000 	mov.w	r0, #0
 800f58a:	d816      	bhi.n	800f5ba <pbuf_alloced_custom+0x56>
  p->pbuf.next = NULL;
 800f58c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 800f58e:	b1cd      	cbz	r5, 800f5c4 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f590:	442c      	add	r4, r5
 800f592:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f594:	2002      	movs	r0, #2
  p->pbuf.type = type;
 800f596:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800f598:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f59a:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800f59c:	8119      	strh	r1, [r3, #8]
 800f59e:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 800f5a0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	e009      	b.n	800f5ba <pbuf_alloced_custom+0x56>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f5a6:	2000      	movs	r0, #0
    break;
 800f5a8:	e7e6      	b.n	800f578 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800f5aa:	4b07      	ldr	r3, [pc, #28]	; (800f5c8 <pbuf_alloced_custom+0x64>)
 800f5ac:	f240 12c5 	movw	r2, #453	; 0x1c5
 800f5b0:	4906      	ldr	r1, [pc, #24]	; (800f5cc <pbuf_alloced_custom+0x68>)
 800f5b2:	4807      	ldr	r0, [pc, #28]	; (800f5d0 <pbuf_alloced_custom+0x6c>)
 800f5b4:	f007 f968 	bl	8016888 <iprintf>
    return NULL;
 800f5b8:	2000      	movs	r0, #0
}
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f5bc:	2036      	movs	r0, #54	; 0x36
 800f5be:	e7db      	b.n	800f578 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f5c0:	200e      	movs	r0, #14
 800f5c2:	e7d9      	b.n	800f578 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 800f5c4:	605d      	str	r5, [r3, #4]
 800f5c6:	e7e5      	b.n	800f594 <pbuf_alloced_custom+0x30>
 800f5c8:	08021155 	.word	0x08021155
 800f5cc:	08020f98 	.word	0x08020f98
 800f5d0:	08018495 	.word	0x08018495

0800f5d4 <pbuf_header>:
   return pbuf_header_impl(p, header_size_increment, 0);
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f7ff bf59 	b.w	800f48c <pbuf_header_impl>

0800f5da <pbuf_header_force>:
   return pbuf_header_impl(p, header_size_increment, 1);
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f7ff bf56 	b.w	800f48c <pbuf_header_impl>

0800f5e0 <pbuf_free>:
{
 800f5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	b950      	cbnz	r0, 800f5fe <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f5e8:	4b2b      	ldr	r3, [pc, #172]	; (800f698 <pbuf_free+0xb8>)
 800f5ea:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f5ee:	492b      	ldr	r1, [pc, #172]	; (800f69c <pbuf_free+0xbc>)
 800f5f0:	482b      	ldr	r0, [pc, #172]	; (800f6a0 <pbuf_free+0xc0>)
 800f5f2:	f007 f949 	bl	8016888 <iprintf>
    return 0;
 800f5f6:	4625      	mov	r5, r4
}
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800f5fe:	7b03      	ldrb	r3, [r0, #12]
 800f600:	2b03      	cmp	r3, #3
 800f602:	d906      	bls.n	800f612 <pbuf_free+0x32>
 800f604:	4b24      	ldr	r3, [pc, #144]	; (800f698 <pbuf_free+0xb8>)
 800f606:	f240 22de 	movw	r2, #734	; 0x2de
 800f60a:	4926      	ldr	r1, [pc, #152]	; (800f6a4 <pbuf_free+0xc4>)
 800f60c:	4824      	ldr	r0, [pc, #144]	; (800f6a0 <pbuf_free+0xc0>)
 800f60e:	f007 f93b 	bl	8016888 <iprintf>
{
 800f612:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f614:	4f20      	ldr	r7, [pc, #128]	; (800f698 <pbuf_free+0xb8>)
 800f616:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800f6ac <pbuf_free+0xcc>
 800f61a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f6a0 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800f61e:	f006 fd65 	bl	80160ec <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f622:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800f624:	4682      	mov	sl, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f626:	b933      	cbnz	r3, 800f636 <pbuf_free+0x56>
 800f628:	463b      	mov	r3, r7
 800f62a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800f62e:	4649      	mov	r1, r9
 800f630:	4640      	mov	r0, r8
 800f632:	f007 f929 	bl	8016888 <iprintf>
    ref = --(p->ref);
 800f636:	89e6      	ldrh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800f638:	4650      	mov	r0, sl
    ref = --(p->ref);
 800f63a:	3e01      	subs	r6, #1
 800f63c:	b2b6      	uxth	r6, r6
 800f63e:	81e6      	strh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800f640:	f006 fd60 	bl	8016104 <sys_arch_unprotect>
    if (ref == 0) {
 800f644:	2e00      	cmp	r6, #0
 800f646:	d1d7      	bne.n	800f5f8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f648:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800f64a:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f64c:	079b      	lsls	r3, r3, #30
 800f64e:	d511      	bpl.n	800f674 <pbuf_free+0x94>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	b933      	cbnz	r3, 800f662 <pbuf_free+0x82>
 800f654:	463b      	mov	r3, r7
 800f656:	f240 22f9 	movw	r2, #761	; 0x2f9
 800f65a:	4913      	ldr	r1, [pc, #76]	; (800f6a8 <pbuf_free+0xc8>)
 800f65c:	4640      	mov	r0, r8
 800f65e:	f007 f913 	bl	8016888 <iprintf>
        pc->custom_free_function(p);
 800f662:	6923      	ldr	r3, [r4, #16]
 800f664:	4620      	mov	r0, r4
 800f666:	4798      	blx	r3
      count++;
 800f668:	3501      	adds	r5, #1
 800f66a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800f66c:	4634      	mov	r4, r6
 800f66e:	2e00      	cmp	r6, #0
 800f670:	d1d5      	bne.n	800f61e <pbuf_free+0x3e>
 800f672:	e7c1      	b.n	800f5f8 <pbuf_free+0x18>
      type = p->type;
 800f674:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800f676:	2b03      	cmp	r3, #3
 800f678:	d104      	bne.n	800f684 <pbuf_free+0xa4>
          memp_free(MEMP_PBUF_POOL, p);
 800f67a:	4621      	mov	r1, r4
 800f67c:	200d      	movs	r0, #13
          memp_free(MEMP_PBUF, p);
 800f67e:	f7ff fdf1 	bl	800f264 <memp_free>
 800f682:	e7f1      	b.n	800f668 <pbuf_free+0x88>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800f684:	3b01      	subs	r3, #1
 800f686:	2b01      	cmp	r3, #1
 800f688:	d802      	bhi.n	800f690 <pbuf_free+0xb0>
          memp_free(MEMP_PBUF, p);
 800f68a:	4621      	mov	r1, r4
 800f68c:	200c      	movs	r0, #12
 800f68e:	e7f6      	b.n	800f67e <pbuf_free+0x9e>
          mem_free(p);
 800f690:	4620      	mov	r0, r4
 800f692:	f7ff fb8d 	bl	800edb0 <mem_free>
 800f696:	e7e7      	b.n	800f668 <pbuf_free+0x88>
 800f698:	08021155 	.word	0x08021155
 800f69c:	080211bf 	.word	0x080211bf
 800f6a0:	08018495 	.word	0x08018495
 800f6a4:	08021109 	.word	0x08021109
 800f6a8:	08021134 	.word	0x08021134
 800f6ac:	0802111e 	.word	0x0802111e

0800f6b0 <pbuf_alloc>:
{
 800f6b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	460e      	mov	r6, r1
 800f6b6:	4617      	mov	r7, r2
  switch (layer) {
 800f6b8:	2804      	cmp	r0, #4
 800f6ba:	d80e      	bhi.n	800f6da <pbuf_alloc+0x2a>
 800f6bc:	e8df f000 	tbb	[pc, r0]
 800f6c0:	0b170315 	.word	0x0b170315
 800f6c4:	0b          	.byte	0x0b
 800f6c5:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f6c6:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 800f6c8:	2f03      	cmp	r7, #3
 800f6ca:	f200 80b9 	bhi.w	800f840 <pbuf_alloc+0x190>
 800f6ce:	e8df f007 	tbb	[pc, r7]
 800f6d2:	aa8f      	.short	0xaa8f
 800f6d4:	10aa      	.short	0x10aa
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f6d6:	2500      	movs	r5, #0
    break;
 800f6d8:	e7f6      	b.n	800f6c8 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f6da:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f6de:	4b5b      	ldr	r3, [pc, #364]	; (800f84c <pbuf_alloc+0x19c>)
 800f6e0:	495b      	ldr	r1, [pc, #364]	; (800f850 <pbuf_alloc+0x1a0>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f6e2:	485c      	ldr	r0, [pc, #368]	; (800f854 <pbuf_alloc+0x1a4>)
 800f6e4:	f007 f8d0 	bl	8016888 <iprintf>
 800f6e8:	e049      	b.n	800f77e <pbuf_alloc+0xce>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f6ea:	2536      	movs	r5, #54	; 0x36
 800f6ec:	e7ec      	b.n	800f6c8 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f6ee:	250e      	movs	r5, #14
 800f6f0:	e7ea      	b.n	800f6c8 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f6f2:	200d      	movs	r0, #13
 800f6f4:	f7ff fd9a 	bl	800f22c <memp_malloc>
    if (p == NULL) {
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	b920      	cbnz	r0, 800f706 <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 800f6fc:	f7ff ff14 	bl	800f528 <pbuf_pool_is_empty>
}
 800f700:	4620      	mov	r0, r4
 800f702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800f706:	2303      	movs	r3, #3
 800f708:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f70e:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f710:	3503      	adds	r5, #3
 800f712:	f025 0503 	bic.w	r5, r5, #3
 800f716:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
 800f71a:	42b5      	cmp	r5, r6
 800f71c:	bf28      	it	cs
 800f71e:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f720:	3313      	adds	r3, #19
 800f722:	f023 0303 	bic.w	r3, r3, #3
 800f726:	6043      	str	r3, [r0, #4]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f728:	f500 7718 	add.w	r7, r0, #608	; 0x260
 800f72c:	442b      	add	r3, r5
 800f72e:	429f      	cmp	r7, r3
    p->tot_len = length;
 800f730:	8106      	strh	r6, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f732:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f734:	d206      	bcs.n	800f744 <pbuf_alloc+0x94>
 800f736:	4b45      	ldr	r3, [pc, #276]	; (800f84c <pbuf_alloc+0x19c>)
 800f738:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f73c:	4946      	ldr	r1, [pc, #280]	; (800f858 <pbuf_alloc+0x1a8>)
 800f73e:	4845      	ldr	r0, [pc, #276]	; (800f854 <pbuf_alloc+0x1a4>)
 800f740:	f007 f8a2 	bl	8016888 <iprintf>
    p->ref = 1;
 800f744:	2301      	movs	r3, #1
    while (rem_len > 0) {
 800f746:	46a3      	mov	fp, r4
    p->ref = 1;
 800f748:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 800f74a:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f74c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800f84c <pbuf_alloc+0x19c>
 800f750:	f8df a110 	ldr.w	sl, [pc, #272]	; 800f864 <pbuf_alloc+0x1b4>
 800f754:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800f854 <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 800f758:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 800f75a:	2e00      	cmp	r6, #0
 800f75c:	dc04      	bgt.n	800f768 <pbuf_alloc+0xb8>
  p->ref = 1;
 800f75e:	2301      	movs	r3, #1
 800f760:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	7363      	strb	r3, [r4, #13]
  return p;
 800f766:	e7cb      	b.n	800f700 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f768:	200d      	movs	r0, #13
 800f76a:	f7ff fd5f 	bl	800f22c <memp_malloc>
 800f76e:	2300      	movs	r3, #0
      if (q == NULL) {
 800f770:	4605      	mov	r5, r0
 800f772:	b930      	cbnz	r0, 800f782 <pbuf_alloc+0xd2>
        PBUF_POOL_IS_EMPTY();
 800f774:	f7ff fed8 	bl	800f528 <pbuf_pool_is_empty>
        pbuf_free(p);
 800f778:	4620      	mov	r0, r4
 800f77a:	f7ff ff31 	bl	800f5e0 <pbuf_free>
    return NULL;
 800f77e:	2400      	movs	r4, #0
 800f780:	e7be      	b.n	800f700 <pbuf_alloc+0x50>
      q->flags = 0;
 800f782:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800f784:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f786:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 800f78a:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f78c:	429e      	cmp	r6, r3
      q->type = type;
 800f78e:	7302      	strb	r2, [r0, #12]
      r->next = q;
 800f790:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f794:	d106      	bne.n	800f7a4 <pbuf_alloc+0xf4>
 800f796:	4643      	mov	r3, r8
 800f798:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f79c:	4651      	mov	r1, sl
 800f79e:	4648      	mov	r0, r9
 800f7a0:	f007 f872 	bl	8016888 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f7a4:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f7a6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 800f7aa:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f7ac:	bf28      	it	cs
 800f7ae:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f7b2:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f7b4:	f105 0310 	add.w	r3, r5, #16
 800f7b8:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f7ba:	079b      	lsls	r3, r3, #30
 800f7bc:	d006      	beq.n	800f7cc <pbuf_alloc+0x11c>
 800f7be:	4643      	mov	r3, r8
 800f7c0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f7c4:	4925      	ldr	r1, [pc, #148]	; (800f85c <pbuf_alloc+0x1ac>)
 800f7c6:	4648      	mov	r0, r9
 800f7c8:	f007 f85e 	bl	8016888 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f7cc:	8962      	ldrh	r2, [r4, #10]
 800f7ce:	6863      	ldr	r3, [r4, #4]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	429f      	cmp	r7, r3
 800f7d4:	d206      	bcs.n	800f7e4 <pbuf_alloc+0x134>
 800f7d6:	4643      	mov	r3, r8
 800f7d8:	f240 1255 	movw	r2, #341	; 0x155
 800f7dc:	491e      	ldr	r1, [pc, #120]	; (800f858 <pbuf_alloc+0x1a8>)
 800f7de:	4648      	mov	r0, r9
 800f7e0:	f007 f852 	bl	8016888 <iprintf>
      q->ref = 1;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800f7e8:	896b      	ldrh	r3, [r5, #10]
 800f7ea:	46ab      	mov	fp, r5
 800f7ec:	1af6      	subs	r6, r6, r3
 800f7ee:	e7b4      	b.n	800f75a <pbuf_alloc+0xaa>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f7f0:	f105 0013 	add.w	r0, r5, #19
 800f7f4:	1cf3      	adds	r3, r6, #3
 800f7f6:	f023 0303 	bic.w	r3, r3, #3
 800f7fa:	f020 0003 	bic.w	r0, r0, #3
 800f7fe:	4418      	add	r0, r3
 800f800:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f802:	4298      	cmp	r0, r3
 800f804:	d3bb      	bcc.n	800f77e <pbuf_alloc+0xce>
      p = (struct pbuf*)mem_malloc(alloc_len);
 800f806:	f7ff fc17 	bl	800f038 <mem_malloc>
    if (p == NULL) {
 800f80a:	4604      	mov	r4, r0
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d0b6      	beq.n	800f77e <pbuf_alloc+0xce>
    p->next = NULL;
 800f810:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f812:	4405      	add	r5, r0
 800f814:	3513      	adds	r5, #19
 800f816:	f025 0503 	bic.w	r5, r5, #3
 800f81a:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 800f81c:	8106      	strh	r6, [r0, #8]
 800f81e:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800f820:	6003      	str	r3, [r0, #0]
    p->type = type;
 800f822:	7303      	strb	r3, [r0, #12]
 800f824:	e79b      	b.n	800f75e <pbuf_alloc+0xae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f826:	200c      	movs	r0, #12
 800f828:	f7ff fd00 	bl	800f22c <memp_malloc>
    if (p == NULL) {
 800f82c:	4604      	mov	r4, r0
 800f82e:	2800      	cmp	r0, #0
 800f830:	d0a5      	beq.n	800f77e <pbuf_alloc+0xce>
    p->payload = NULL;
 800f832:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800f834:	8106      	strh	r6, [r0, #8]
    p->payload = NULL;
 800f836:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 800f838:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800f83a:	6003      	str	r3, [r0, #0]
    p->type = type;
 800f83c:	7307      	strb	r7, [r0, #12]
    break;
 800f83e:	e78e      	b.n	800f75e <pbuf_alloc+0xae>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f840:	4b02      	ldr	r3, [pc, #8]	; (800f84c <pbuf_alloc+0x19c>)
 800f842:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800f846:	4906      	ldr	r1, [pc, #24]	; (800f860 <pbuf_alloc+0x1b0>)
 800f848:	e74b      	b.n	800f6e2 <pbuf_alloc+0x32>
 800f84a:	bf00      	nop
 800f84c:	08021155 	.word	0x08021155
 800f850:	08020ef0 	.word	0x08020ef0
 800f854:	08018495 	.word	0x08018495
 800f858:	08020f0b 	.word	0x08020f0b
 800f85c:	08020f50 	.word	0x08020f50
 800f860:	08020f7d 	.word	0x08020f7d
 800f864:	08020f3c 	.word	0x08020f3c

0800f868 <pbuf_realloc>:
{
 800f868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f86c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f86e:	4604      	mov	r4, r0
 800f870:	b930      	cbnz	r0, 800f880 <pbuf_realloc+0x18>
 800f872:	4b2e      	ldr	r3, [pc, #184]	; (800f92c <pbuf_realloc+0xc4>)
 800f874:	f240 12f3 	movw	r2, #499	; 0x1f3
 800f878:	492d      	ldr	r1, [pc, #180]	; (800f930 <pbuf_realloc+0xc8>)
 800f87a:	482e      	ldr	r0, [pc, #184]	; (800f934 <pbuf_realloc+0xcc>)
 800f87c:	f007 f804 	bl	8016888 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800f880:	7b23      	ldrb	r3, [r4, #12]
 800f882:	2b03      	cmp	r3, #3
 800f884:	d906      	bls.n	800f894 <pbuf_realloc+0x2c>
 800f886:	4b29      	ldr	r3, [pc, #164]	; (800f92c <pbuf_realloc+0xc4>)
 800f888:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f88c:	492a      	ldr	r1, [pc, #168]	; (800f938 <pbuf_realloc+0xd0>)
 800f88e:	4829      	ldr	r0, [pc, #164]	; (800f934 <pbuf_realloc+0xcc>)
 800f890:	f006 fffa 	bl	8016888 <iprintf>
  if (new_len >= p->tot_len) {
 800f894:	8926      	ldrh	r6, [r4, #8]
 800f896:	42ae      	cmp	r6, r5
 800f898:	d945      	bls.n	800f926 <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f89a:	4f24      	ldr	r7, [pc, #144]	; (800f92c <pbuf_realloc+0xc4>)
 800f89c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800f944 <pbuf_realloc+0xdc>
 800f8a0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800f934 <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 800f8a4:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 800f8a6:	8963      	ldrh	r3, [r4, #10]
 800f8a8:	42ab      	cmp	r3, r5
 800f8aa:	d319      	bcc.n	800f8e0 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800f8ac:	7b22      	ldrb	r2, [r4, #12]
 800f8ae:	2a00      	cmp	r2, #0
 800f8b0:	d131      	bne.n	800f916 <pbuf_realloc+0xae>
 800f8b2:	42ab      	cmp	r3, r5
 800f8b4:	d02f      	beq.n	800f916 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f8b6:	7b63      	ldrb	r3, [r4, #13]
 800f8b8:	079b      	lsls	r3, r3, #30
 800f8ba:	d42c      	bmi.n	800f916 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800f8bc:	6861      	ldr	r1, [r4, #4]
 800f8be:	4620      	mov	r0, r4
 800f8c0:	1b09      	subs	r1, r1, r4
 800f8c2:	4429      	add	r1, r5
 800f8c4:	b289      	uxth	r1, r1
 800f8c6:	f7ff fb2b 	bl	800ef20 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	bb18      	cbnz	r0, 800f916 <pbuf_realloc+0xae>
 800f8ce:	4b17      	ldr	r3, [pc, #92]	; (800f92c <pbuf_realloc+0xc4>)
 800f8d0:	f240 221d 	movw	r2, #541	; 0x21d
 800f8d4:	4919      	ldr	r1, [pc, #100]	; (800f93c <pbuf_realloc+0xd4>)
 800f8d6:	4817      	ldr	r0, [pc, #92]	; (800f934 <pbuf_realloc+0xcc>)
 800f8d8:	f006 ffd6 	bl	8016888 <iprintf>
  q->len = rem_len;
 800f8dc:	8164      	strh	r4, [r4, #10]
 800f8de:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 800f8e0:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f8e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800f8e6:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800f8e8:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f8ea:	dd06      	ble.n	800f8fa <pbuf_realloc+0x92>
 800f8ec:	463b      	mov	r3, r7
 800f8ee:	f240 220b 	movw	r2, #523	; 0x20b
 800f8f2:	4649      	mov	r1, r9
 800f8f4:	4640      	mov	r0, r8
 800f8f6:	f006 ffc7 	bl	8016888 <iprintf>
    q->tot_len += (u16_t)grow;
 800f8fa:	8923      	ldrh	r3, [r4, #8]
 800f8fc:	4433      	add	r3, r6
 800f8fe:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800f900:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f902:	2c00      	cmp	r4, #0
 800f904:	d1cf      	bne.n	800f8a6 <pbuf_realloc+0x3e>
 800f906:	463b      	mov	r3, r7
 800f908:	f240 220f 	movw	r2, #527	; 0x20f
 800f90c:	490c      	ldr	r1, [pc, #48]	; (800f940 <pbuf_realloc+0xd8>)
 800f90e:	4640      	mov	r0, r8
 800f910:	f006 ffba 	bl	8016888 <iprintf>
 800f914:	e7c7      	b.n	800f8a6 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800f916:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800f918:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800f91a:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800f91c:	b108      	cbz	r0, 800f922 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 800f91e:	f7ff fe5f 	bl	800f5e0 <pbuf_free>
  q->next = NULL;
 800f922:	2300      	movs	r3, #0
 800f924:	6023      	str	r3, [r4, #0]
}
 800f926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f92a:	bf00      	nop
 800f92c:	08021155 	.word	0x08021155
 800f930:	080211b1 	.word	0x080211b1
 800f934:	08018495 	.word	0x08018495
 800f938:	080211c9 	.word	0x080211c9
 800f93c:	0802120d 	.word	0x0802120d
 800f940:	080211f5 	.word	0x080211f5
 800f944:	080211e4 	.word	0x080211e4

0800f948 <pbuf_clen>:
{
 800f948:	4603      	mov	r3, r0
  while (p != NULL) {
 800f94a:	2200      	movs	r2, #0
 800f94c:	b290      	uxth	r0, r2
 800f94e:	3201      	adds	r2, #1
 800f950:	b903      	cbnz	r3, 800f954 <pbuf_clen+0xc>
}
 800f952:	4770      	bx	lr
    p = p->next;
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	e7f9      	b.n	800f94c <pbuf_clen+0x4>

0800f958 <pbuf_ref>:
{
 800f958:	b510      	push	{r4, lr}
  if (p != NULL) {
 800f95a:	4604      	mov	r4, r0
 800f95c:	b188      	cbz	r0, 800f982 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 800f95e:	f006 fbc5 	bl	80160ec <sys_arch_protect>
 800f962:	89e3      	ldrh	r3, [r4, #14]
 800f964:	3301      	adds	r3, #1
 800f966:	81e3      	strh	r3, [r4, #14]
 800f968:	f006 fbcc 	bl	8016104 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f96c:	89e3      	ldrh	r3, [r4, #14]
 800f96e:	b943      	cbnz	r3, 800f982 <pbuf_ref+0x2a>
}
 800f970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f974:	4b03      	ldr	r3, [pc, #12]	; (800f984 <pbuf_ref+0x2c>)
 800f976:	f240 3239 	movw	r2, #825	; 0x339
 800f97a:	4903      	ldr	r1, [pc, #12]	; (800f988 <pbuf_ref+0x30>)
 800f97c:	4803      	ldr	r0, [pc, #12]	; (800f98c <pbuf_ref+0x34>)
 800f97e:	f006 bf83 	b.w	8016888 <iprintf>
}
 800f982:	bd10      	pop	{r4, pc}
 800f984:	08021155 	.word	0x08021155
 800f988:	08021229 	.word	0x08021229
 800f98c:	08018495 	.word	0x08018495

0800f990 <pbuf_cat>:
{
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f994:	4604      	mov	r4, r0
 800f996:	b100      	cbz	r0, 800f99a <pbuf_cat+0xa>
 800f998:	b961      	cbnz	r1, 800f9b4 <pbuf_cat+0x24>
}
 800f99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f99e:	4b14      	ldr	r3, [pc, #80]	; (800f9f0 <pbuf_cat+0x60>)
 800f9a0:	f240 324d 	movw	r2, #845	; 0x34d
 800f9a4:	4913      	ldr	r1, [pc, #76]	; (800f9f4 <pbuf_cat+0x64>)
 800f9a6:	4814      	ldr	r0, [pc, #80]	; (800f9f8 <pbuf_cat+0x68>)
 800f9a8:	f006 bf6e 	b.w	8016888 <iprintf>
    p->tot_len += t->tot_len;
 800f9ac:	8929      	ldrh	r1, [r5, #8]
 800f9ae:	440b      	add	r3, r1
 800f9b0:	8123      	strh	r3, [r4, #8]
 800f9b2:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800f9b4:	6822      	ldr	r2, [r4, #0]
 800f9b6:	8923      	ldrh	r3, [r4, #8]
 800f9b8:	2a00      	cmp	r2, #0
 800f9ba:	d1f7      	bne.n	800f9ac <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f9bc:	8962      	ldrh	r2, [r4, #10]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d006      	beq.n	800f9d0 <pbuf_cat+0x40>
 800f9c2:	4b0b      	ldr	r3, [pc, #44]	; (800f9f0 <pbuf_cat+0x60>)
 800f9c4:	f240 3255 	movw	r2, #853	; 0x355
 800f9c8:	490c      	ldr	r1, [pc, #48]	; (800f9fc <pbuf_cat+0x6c>)
 800f9ca:	480b      	ldr	r0, [pc, #44]	; (800f9f8 <pbuf_cat+0x68>)
 800f9cc:	f006 ff5c 	bl	8016888 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f9d0:	6823      	ldr	r3, [r4, #0]
 800f9d2:	b133      	cbz	r3, 800f9e2 <pbuf_cat+0x52>
 800f9d4:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <pbuf_cat+0x60>)
 800f9d6:	f240 3256 	movw	r2, #854	; 0x356
 800f9da:	4909      	ldr	r1, [pc, #36]	; (800fa00 <pbuf_cat+0x70>)
 800f9dc:	4806      	ldr	r0, [pc, #24]	; (800f9f8 <pbuf_cat+0x68>)
 800f9de:	f006 ff53 	bl	8016888 <iprintf>
  p->tot_len += t->tot_len;
 800f9e2:	892a      	ldrh	r2, [r5, #8]
 800f9e4:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800f9e6:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800f9e8:	4413      	add	r3, r2
 800f9ea:	8123      	strh	r3, [r4, #8]
}
 800f9ec:	bd70      	pop	{r4, r5, r6, pc}
 800f9ee:	bf00      	nop
 800f9f0:	08021155 	.word	0x08021155
 800f9f4:	08020fbc 	.word	0x08020fbc
 800f9f8:	08018495 	.word	0x08018495
 800f9fc:	08020ff1 	.word	0x08020ff1
 800fa00:	0802101e 	.word	0x0802101e

0800fa04 <pbuf_chain>:
{
 800fa04:	b510      	push	{r4, lr}
 800fa06:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800fa08:	f7ff ffc2 	bl	800f990 <pbuf_cat>
  pbuf_ref(t);
 800fa0c:	4620      	mov	r0, r4
}
 800fa0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800fa12:	f7ff bfa1 	b.w	800f958 <pbuf_ref>
	...

0800fa18 <pbuf_copy>:
{
 800fa18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fa1e:	4605      	mov	r5, r0
 800fa20:	b120      	cbz	r0, 800fa2c <pbuf_copy+0x14>
 800fa22:	b119      	cbz	r1, 800fa2c <pbuf_copy+0x14>
 800fa24:	8902      	ldrh	r2, [r0, #8]
 800fa26:	890b      	ldrh	r3, [r1, #8]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d20a      	bcs.n	800fa42 <pbuf_copy+0x2a>
 800fa2c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fa30:	4b35      	ldr	r3, [pc, #212]	; (800fb08 <pbuf_copy+0xf0>)
 800fa32:	4936      	ldr	r1, [pc, #216]	; (800fb0c <pbuf_copy+0xf4>)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800fa34:	4836      	ldr	r0, [pc, #216]	; (800fb10 <pbuf_copy+0xf8>)
 800fa36:	f006 ff27 	bl	8016888 <iprintf>
 800fa3a:	f06f 000f 	mvn.w	r0, #15
}
 800fa3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 800fa42:	f04f 0b00 	mov.w	fp, #0
 800fa46:	465f      	mov	r7, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa48:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800fb08 <pbuf_copy+0xf0>
 800fa4c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 800fb20 <pbuf_copy+0x108>
 800fa50:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800fb10 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fa54:	896e      	ldrh	r6, [r5, #10]
 800fa56:	8963      	ldrh	r3, [r4, #10]
 800fa58:	1bf6      	subs	r6, r6, r7
 800fa5a:	eba3 030b 	sub.w	r3, r3, fp
 800fa5e:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800fa60:	6868      	ldr	r0, [r5, #4]
 800fa62:	6861      	ldr	r1, [r4, #4]
      len = p_from->len - offset_from;
 800fa64:	bfac      	ite	ge
 800fa66:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800fa68:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800fa6a:	4632      	mov	r2, r6
 800fa6c:	4459      	add	r1, fp
 800fa6e:	4438      	add	r0, r7
 800fa70:	f006 fe51 	bl	8016716 <memcpy>
    offset_to += len;
 800fa74:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa76:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800fa78:	b2bf      	uxth	r7, r7
    offset_from += len;
 800fa7a:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa7c:	42bb      	cmp	r3, r7
    offset_from += len;
 800fa7e:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa82:	d206      	bcs.n	800fa92 <pbuf_copy+0x7a>
 800fa84:	4643      	mov	r3, r8
 800fa86:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fa8a:	4651      	mov	r1, sl
 800fa8c:	4648      	mov	r0, r9
 800fa8e:	f006 fefb 	bl	8016888 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fa92:	8963      	ldrh	r3, [r4, #10]
 800fa94:	455b      	cmp	r3, fp
 800fa96:	d206      	bcs.n	800faa6 <pbuf_copy+0x8e>
 800fa98:	4643      	mov	r3, r8
 800fa9a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800fa9e:	491d      	ldr	r1, [pc, #116]	; (800fb14 <pbuf_copy+0xfc>)
 800faa0:	4648      	mov	r0, r9
 800faa2:	f006 fef1 	bl	8016888 <iprintf>
    if (offset_from >= p_from->len) {
 800faa6:	8963      	ldrh	r3, [r4, #10]
 800faa8:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800faaa:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800faac:	bf9c      	itt	ls
 800faae:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800fab0:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 800fab4:	42bb      	cmp	r3, r7
 800fab6:	d108      	bne.n	800faca <pbuf_copy+0xb2>
      p_to = p_to->next;
 800fab8:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800faba:	b92d      	cbnz	r5, 800fac8 <pbuf_copy+0xb0>
 800fabc:	b314      	cbz	r4, 800fb04 <pbuf_copy+0xec>
 800fabe:	4b12      	ldr	r3, [pc, #72]	; (800fb08 <pbuf_copy+0xf0>)
 800fac0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fac4:	4914      	ldr	r1, [pc, #80]	; (800fb18 <pbuf_copy+0x100>)
 800fac6:	e7b5      	b.n	800fa34 <pbuf_copy+0x1c>
      offset_to = 0;
 800fac8:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800faca:	b17c      	cbz	r4, 800faec <pbuf_copy+0xd4>
 800facc:	8962      	ldrh	r2, [r4, #10]
 800face:	8923      	ldrh	r3, [r4, #8]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d10b      	bne.n	800faec <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	b14b      	cbz	r3, 800faec <pbuf_copy+0xd4>
 800fad8:	f240 32de 	movw	r2, #990	; 0x3de
 800fadc:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <pbuf_copy+0xf0>)
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fade:	490f      	ldr	r1, [pc, #60]	; (800fb1c <pbuf_copy+0x104>)
 800fae0:	480b      	ldr	r0, [pc, #44]	; (800fb10 <pbuf_copy+0xf8>)
 800fae2:	f006 fed1 	bl	8016888 <iprintf>
 800fae6:	f06f 0005 	mvn.w	r0, #5
 800faea:	e7a8      	b.n	800fa3e <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800faec:	896a      	ldrh	r2, [r5, #10]
 800faee:	892b      	ldrh	r3, [r5, #8]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d105      	bne.n	800fb00 <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800faf4:	682b      	ldr	r3, [r5, #0]
 800faf6:	b11b      	cbz	r3, 800fb00 <pbuf_copy+0xe8>
 800faf8:	4b03      	ldr	r3, [pc, #12]	; (800fb08 <pbuf_copy+0xf0>)
 800fafa:	f240 32e3 	movw	r2, #995	; 0x3e3
 800fafe:	e7ee      	b.n	800fade <pbuf_copy+0xc6>
  } while (p_from);
 800fb00:	2c00      	cmp	r4, #0
 800fb02:	d1a7      	bne.n	800fa54 <pbuf_copy+0x3c>
  return ERR_OK;
 800fb04:	4620      	mov	r0, r4
 800fb06:	e79a      	b.n	800fa3e <pbuf_copy+0x26>
 800fb08:	08021155 	.word	0x08021155
 800fb0c:	0802102e 	.word	0x0802102e
 800fb10:	08018495 	.word	0x08018495
 800fb14:	08021075 	.word	0x08021075
 800fb18:	08021090 	.word	0x08021090
 800fb1c:	0802109d 	.word	0x0802109d
 800fb20:	0802105e 	.word	0x0802105e

0800fb24 <pbuf_copy_partial>:
{
 800fb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb28:	460f      	mov	r7, r1
 800fb2a:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fb2c:	4606      	mov	r6, r0
 800fb2e:	b950      	cbnz	r0, 800fb46 <pbuf_copy_partial+0x22>
 800fb30:	4b1b      	ldr	r3, [pc, #108]	; (800fba0 <pbuf_copy_partial+0x7c>)
 800fb32:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800fb36:	491b      	ldr	r1, [pc, #108]	; (800fba4 <pbuf_copy_partial+0x80>)
 800fb38:	481b      	ldr	r0, [pc, #108]	; (800fba8 <pbuf_copy_partial+0x84>)
 800fb3a:	f006 fea5 	bl	8016888 <iprintf>
 800fb3e:	4635      	mov	r5, r6
}
 800fb40:	4628      	mov	r0, r5
 800fb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fb46:	bb41      	cbnz	r1, 800fb9a <pbuf_copy_partial+0x76>
 800fb48:	4b15      	ldr	r3, [pc, #84]	; (800fba0 <pbuf_copy_partial+0x7c>)
 800fb4a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fb4e:	4917      	ldr	r1, [pc, #92]	; (800fbac <pbuf_copy_partial+0x88>)
 800fb50:	4815      	ldr	r0, [pc, #84]	; (800fba8 <pbuf_copy_partial+0x84>)
 800fb52:	f006 fe99 	bl	8016888 <iprintf>
 800fb56:	463d      	mov	r5, r7
 800fb58:	e7f2      	b.n	800fb40 <pbuf_copy_partial+0x1c>
 800fb5a:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 800fb5c:	b153      	cbz	r3, 800fb74 <pbuf_copy_partial+0x50>
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d308      	bcc.n	800fb74 <pbuf_copy_partial+0x50>
      offset -= p->len;
 800fb62:	1a9b      	subs	r3, r3, r2
 800fb64:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fb66:	6836      	ldr	r6, [r6, #0]
 800fb68:	f1b8 0f00 	cmp.w	r8, #0
 800fb6c:	d0e8      	beq.n	800fb40 <pbuf_copy_partial+0x1c>
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	d1f3      	bne.n	800fb5a <pbuf_copy_partial+0x36>
 800fb72:	e7e5      	b.n	800fb40 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800fb74:	1ad2      	subs	r2, r2, r3
 800fb76:	b294      	uxth	r4, r2
 800fb78:	4544      	cmp	r4, r8
 800fb7a:	bf28      	it	cs
 800fb7c:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800fb7e:	6871      	ldr	r1, [r6, #4]
 800fb80:	4622      	mov	r2, r4
 800fb82:	4419      	add	r1, r3
 800fb84:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 800fb86:	4425      	add	r5, r4
      len -= buf_copy_len;
 800fb88:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800fb8c:	f006 fdc3 	bl	8016716 <memcpy>
      copied_total += buf_copy_len;
 800fb90:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 800fb92:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	e7e5      	b.n	800fb66 <pbuf_copy_partial+0x42>
  left = 0;
 800fb9a:	2500      	movs	r5, #0
 800fb9c:	e7e4      	b.n	800fb68 <pbuf_copy_partial+0x44>
 800fb9e:	bf00      	nop
 800fba0:	08021155 	.word	0x08021155
 800fba4:	080210c7 	.word	0x080210c7
 800fba8:	08018495 	.word	0x08018495
 800fbac:	080210e6 	.word	0x080210e6

0800fbb0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800fbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	4688      	mov	r8, r1
 800fbb6:	4617      	mov	r7, r2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800fbb8:	4605      	mov	r5, r0
 800fbba:	b958      	cbnz	r0, 800fbd4 <pbuf_take+0x24>
 800fbbc:	f240 4284 	movw	r2, #1156	; 0x484
 800fbc0:	4b25      	ldr	r3, [pc, #148]	; (800fc58 <pbuf_take+0xa8>)
 800fbc2:	4926      	ldr	r1, [pc, #152]	; (800fc5c <pbuf_take+0xac>)
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800fbc4:	4826      	ldr	r0, [pc, #152]	; (800fc60 <pbuf_take+0xb0>)
 800fbc6:	f006 fe5f 	bl	8016888 <iprintf>
 800fbca:	f06f 000f 	mvn.w	r0, #15
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
}
 800fbce:	b003      	add	sp, #12
 800fbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800fbd4:	b921      	cbnz	r1, 800fbe0 <pbuf_take+0x30>
 800fbd6:	4b20      	ldr	r3, [pc, #128]	; (800fc58 <pbuf_take+0xa8>)
 800fbd8:	f240 4285 	movw	r2, #1157	; 0x485
 800fbdc:	4921      	ldr	r1, [pc, #132]	; (800fc64 <pbuf_take+0xb4>)
 800fbde:	e7f1      	b.n	800fbc4 <pbuf_take+0x14>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800fbe0:	8903      	ldrh	r3, [r0, #8]
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d22f      	bcs.n	800fc46 <pbuf_take+0x96>
 800fbe6:	4b1c      	ldr	r3, [pc, #112]	; (800fc58 <pbuf_take+0xa8>)
 800fbe8:	f240 4286 	movw	r2, #1158	; 0x486
 800fbec:	491e      	ldr	r1, [pc, #120]	; (800fc68 <pbuf_take+0xb8>)
 800fbee:	481c      	ldr	r0, [pc, #112]	; (800fc60 <pbuf_take+0xb0>)
 800fbf0:	f006 fe4a 	bl	8016888 <iprintf>
 800fbf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbf8:	e7e9      	b.n	800fbce <pbuf_take+0x1e>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800fbfa:	b935      	cbnz	r5, 800fc0a <pbuf_take+0x5a>
 800fbfc:	464b      	mov	r3, r9
 800fbfe:	f240 428e 	movw	r2, #1166	; 0x48e
 800fc02:	4651      	mov	r1, sl
 800fc04:	4658      	mov	r0, fp
 800fc06:	f006 fe3f 	bl	8016888 <iprintf>
 800fc0a:	896b      	ldrh	r3, [r5, #10]
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800fc0c:	eb08 0106 	add.w	r1, r8, r6
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	bf28      	it	cs
 800fc14:	4623      	movcs	r3, r4
 800fc16:	6868      	ldr	r0, [r5, #4]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	9301      	str	r3, [sp, #4]
 800fc1c:	f006 fd7b 	bl	8016716 <memcpy>
    total_copy_len -= buf_copy_len;
 800fc20:	9b01      	ldr	r3, [sp, #4]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fc22:	682d      	ldr	r5, [r5, #0]
    total_copy_len -= buf_copy_len;
 800fc24:	1ae4      	subs	r4, r4, r3
    copied_total += buf_copy_len;
 800fc26:	441e      	add	r6, r3
    total_copy_len -= buf_copy_len;
 800fc28:	b2a4      	uxth	r4, r4
    copied_total += buf_copy_len;
 800fc2a:	b2b6      	uxth	r6, r6
  for (p = buf; total_copy_len != 0; p = p->next) {
 800fc2c:	2c00      	cmp	r4, #0
 800fc2e:	d1e4      	bne.n	800fbfa <pbuf_take+0x4a>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800fc30:	42b7      	cmp	r7, r6
 800fc32:	d006      	beq.n	800fc42 <pbuf_take+0x92>
 800fc34:	4b08      	ldr	r3, [pc, #32]	; (800fc58 <pbuf_take+0xa8>)
 800fc36:	f240 4299 	movw	r2, #1177	; 0x499
 800fc3a:	490c      	ldr	r1, [pc, #48]	; (800fc6c <pbuf_take+0xbc>)
 800fc3c:	4808      	ldr	r0, [pc, #32]	; (800fc60 <pbuf_take+0xb0>)
 800fc3e:	f006 fe23 	bl	8016888 <iprintf>
 800fc42:	4620      	mov	r0, r4
 800fc44:	e7c3      	b.n	800fbce <pbuf_take+0x1e>
 800fc46:	4614      	mov	r4, r2
  u16_t copied_total = 0;
 800fc48:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800fc4a:	f8df 900c 	ldr.w	r9, [pc, #12]	; 800fc58 <pbuf_take+0xa8>
 800fc4e:	f8df a020 	ldr.w	sl, [pc, #32]	; 800fc70 <pbuf_take+0xc0>
 800fc52:	f8df b00c 	ldr.w	fp, [pc, #12]	; 800fc60 <pbuf_take+0xb0>
 800fc56:	e7e9      	b.n	800fc2c <pbuf_take+0x7c>
 800fc58:	08021155 	.word	0x08021155
 800fc5c:	0802123b 	.word	0x0802123b
 800fc60:	08018495 	.word	0x08018495
 800fc64:	08021252 	.word	0x08021252
 800fc68:	0802126d 	.word	0x0802126d
 800fc6c:	080212a5 	.word	0x080212a5
 800fc70:	0802128d 	.word	0x0802128d

0800fc74 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800fc74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fc78:	460f      	mov	r7, r1
 800fc7a:	4614      	mov	r4, r2
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	f10d 0206 	add.w	r2, sp, #6
 800fc82:	f7ff fbe0 	bl	800f446 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800fc86:	4606      	mov	r6, r0
 800fc88:	b1f0      	cbz	r0, 800fcc8 <pbuf_take_at+0x54>
 800fc8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fc8e:	8901      	ldrh	r1, [r0, #8]
 800fc90:	191a      	adds	r2, r3, r4
 800fc92:	4291      	cmp	r1, r2
 800fc94:	db18      	blt.n	800fcc8 <pbuf_take_at+0x54>
    u16_t remaining_len = len;
    const u8_t* src_ptr = (const u8_t*)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800fc96:	8945      	ldrh	r5, [r0, #10]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 800fc98:	4639      	mov	r1, r7
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800fc9a:	1ae8      	subs	r0, r5, r3
 800fc9c:	42a0      	cmp	r0, r4
 800fc9e:	bfa8      	it	ge
 800fca0:	4620      	movge	r0, r4
 800fca2:	4605      	mov	r5, r0
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 800fca4:	fa1f f880 	uxth.w	r8, r0
 800fca8:	6870      	ldr	r0, [r6, #4]
 800fcaa:	4642      	mov	r2, r8
 800fcac:	4418      	add	r0, r3
 800fcae:	f006 fd32 	bl	8016716 <memcpy>
    remaining_len -= first_copy_len;
 800fcb2:	1b60      	subs	r0, r4, r5
 800fcb4:	b282      	uxth	r2, r0
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 800fcb6:	b152      	cbz	r2, 800fcce <pbuf_take_at+0x5a>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800fcb8:	eb07 0108 	add.w	r1, r7, r8
 800fcbc:	6830      	ldr	r0, [r6, #0]
 800fcbe:	f7ff ff77 	bl	800fbb0 <pbuf_take>
    }
    return ERR_OK;
  }
  return ERR_MEM;
}
 800fcc2:	b002      	add	sp, #8
 800fcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 800fcc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fccc:	e7f9      	b.n	800fcc2 <pbuf_take_at+0x4e>
    return ERR_OK;
 800fcce:	4610      	mov	r0, r2
 800fcd0:	e7f7      	b.n	800fcc2 <pbuf_take_at+0x4e>

0800fcd2 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 800fcd2:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 800fcd4:	f10d 0206 	add.w	r2, sp, #6
 800fcd8:	f7ff fbb5 	bl	800f446 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fcdc:	b148      	cbz	r0, 800fcf2 <pbuf_try_get_at+0x20>
 800fcde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fce2:	8942      	ldrh	r2, [r0, #10]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d904      	bls.n	800fcf2 <pbuf_try_get_at+0x20>
    return ((u8_t*)q->payload)[q_idx];
 800fce8:	6842      	ldr	r2, [r0, #4]
 800fcea:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 800fcec:	b003      	add	sp, #12
 800fcee:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800fcf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcf6:	e7f9      	b.n	800fcec <pbuf_try_get_at+0x1a>

0800fcf8 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 800fcf8:	b513      	push	{r0, r1, r4, lr}
 800fcfa:	4614      	mov	r4, r2
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 800fcfc:	f10d 0206 	add.w	r2, sp, #6
 800fd00:	f7ff fba1 	bl	800f446 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fd04:	b130      	cbz	r0, 800fd14 <pbuf_put_at+0x1c>
 800fd06:	8942      	ldrh	r2, [r0, #10]
 800fd08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fd0c:	429a      	cmp	r2, r3
    ((u8_t*)q->payload)[q_idx] = data;
 800fd0e:	bf84      	itt	hi
 800fd10:	6842      	ldrhi	r2, [r0, #4]
 800fd12:	54d4      	strbhi	r4, [r2, r3]
  }
}
 800fd14:	b002      	add	sp, #8
 800fd16:	bd10      	pop	{r4, pc}

0800fd18 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800fd1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800fd22:	4910      	ldr	r1, [pc, #64]	; (800fd64 <tcp_new_port+0x4c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fd24:	4f10      	ldr	r7, [pc, #64]	; (800fd68 <tcp_new_port+0x50>)
 800fd26:	880a      	ldrh	r2, [r1, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800fd28:	42b2      	cmp	r2, r6
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fd2a:	bf08      	it	eq
 800fd2c:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 800fd30:	f04f 0400 	mov.w	r4, #0
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800fd34:	bf1c      	itt	ne
 800fd36:	1c50      	addne	r0, r2, #1
 800fd38:	b280      	uxthne	r0, r0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fd3a:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 800fd3e:	6815      	ldr	r5, [r2, #0]
 800fd40:	b925      	cbnz	r5, 800fd4c <tcp_new_port+0x34>
 800fd42:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fd44:	2c04      	cmp	r4, #4
 800fd46:	d1f8      	bne.n	800fd3a <tcp_new_port+0x22>
 800fd48:	8008      	strh	r0, [r1, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fd4a:	e008      	b.n	800fd5e <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 800fd4c:	8aea      	ldrh	r2, [r5, #22]
 800fd4e:	4282      	cmp	r2, r0
 800fd50:	d106      	bne.n	800fd60 <tcp_new_port+0x48>
 800fd52:	3b01      	subs	r3, #1
 800fd54:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1e6      	bne.n	800fd28 <tcp_new_port+0x10>
 800fd5a:	8008      	strh	r0, [r1, #0]
          return 0;
 800fd5c:	4618      	mov	r0, r3
}
 800fd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fd60:	68ed      	ldr	r5, [r5, #12]
 800fd62:	e7ed      	b.n	800fd40 <tcp_new_port+0x28>
 800fd64:	20000098 	.word	0x20000098
 800fd68:	080213f0 	.word	0x080213f0

0800fd6c <tcp_close_shutdown_fin>:
{
 800fd6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fd6e:	4604      	mov	r4, r0
 800fd70:	b930      	cbnz	r0, 800fd80 <tcp_close_shutdown_fin+0x14>
 800fd72:	4b13      	ldr	r3, [pc, #76]	; (800fdc0 <tcp_close_shutdown_fin+0x54>)
 800fd74:	f240 124d 	movw	r2, #333	; 0x14d
 800fd78:	4912      	ldr	r1, [pc, #72]	; (800fdc4 <tcp_close_shutdown_fin+0x58>)
 800fd7a:	4813      	ldr	r0, [pc, #76]	; (800fdc8 <tcp_close_shutdown_fin+0x5c>)
 800fd7c:	f006 fd84 	bl	8016888 <iprintf>
  switch (pcb->state) {
 800fd80:	7d23      	ldrb	r3, [r4, #20]
 800fd82:	2b04      	cmp	r3, #4
 800fd84:	d003      	beq.n	800fd8e <tcp_close_shutdown_fin+0x22>
 800fd86:	2b07      	cmp	r3, #7
 800fd88:	d00c      	beq.n	800fda4 <tcp_close_shutdown_fin+0x38>
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d108      	bne.n	800fda0 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f002 fe04 	bl	801299c <tcp_send_fin>
    if (err == ERR_OK) {
 800fd94:	b960      	cbnz	r0, 800fdb0 <tcp_close_shutdown_fin+0x44>
      pcb->state = FIN_WAIT_1;
 800fd96:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800fd98:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f002 fe56 	bl	8012a4c <tcp_output>
    return ERR_OK;
 800fda0:	2000      	movs	r0, #0
}
 800fda2:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 800fda4:	4620      	mov	r0, r4
 800fda6:	f002 fdf9 	bl	801299c <tcp_send_fin>
    if (err == ERR_OK) {
 800fdaa:	b908      	cbnz	r0, 800fdb0 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 800fdac:	2309      	movs	r3, #9
 800fdae:	e7f3      	b.n	800fd98 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800fdb0:	1c43      	adds	r3, r0, #1
 800fdb2:	d1f6      	bne.n	800fda2 <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 800fdb4:	7ea3      	ldrb	r3, [r4, #26]
 800fdb6:	f043 0308 	orr.w	r3, r3, #8
 800fdba:	76a3      	strb	r3, [r4, #26]
 800fdbc:	e7f0      	b.n	800fda0 <tcp_close_shutdown_fin+0x34>
 800fdbe:	bf00      	nop
 800fdc0:	0802133a 	.word	0x0802133a
 800fdc4:	08021369 	.word	0x08021369
 800fdc8:	08018495 	.word	0x08018495

0800fdcc <tcp_init>:
}
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <tcp_bind>:
{
 800fdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800fdd2:	4d1e      	ldr	r5, [pc, #120]	; (800fe4c <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800fdd4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800fdd6:	2900      	cmp	r1, #0
 800fdd8:	bf18      	it	ne
 800fdda:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800fddc:	b140      	cbz	r0, 800fdf0 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fdde:	7d03      	ldrb	r3, [r0, #20]
 800fde0:	b14b      	cbz	r3, 800fdf6 <tcp_bind+0x26>
 800fde2:	4b1b      	ldr	r3, [pc, #108]	; (800fe50 <tcp_bind+0x80>)
 800fde4:	f44f 7211 	mov.w	r2, #580	; 0x244
 800fde8:	491a      	ldr	r1, [pc, #104]	; (800fe54 <tcp_bind+0x84>)
 800fdea:	481b      	ldr	r0, [pc, #108]	; (800fe58 <tcp_bind+0x88>)
 800fdec:	f006 fd4c 	bl	8016888 <iprintf>
    return ERR_VAL;
 800fdf0:	f06f 0005 	mvn.w	r0, #5
 800fdf4:	e01a      	b.n	800fe2c <tcp_bind+0x5c>
  if (port == 0) {
 800fdf6:	b932      	cbnz	r2, 800fe06 <tcp_bind+0x36>
    port = tcp_new_port();
 800fdf8:	f7ff ff8e 	bl	800fd18 <tcp_new_port>
    if (port == 0) {
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	b950      	cbnz	r0, 800fe16 <tcp_bind+0x46>
      return ERR_BUF;
 800fe00:	f06f 0001 	mvn.w	r0, #1
 800fe04:	e012      	b.n	800fe2c <tcp_bind+0x5c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fe06:	4f15      	ldr	r7, [pc, #84]	; (800fe5c <tcp_bind+0x8c>)
 800fe08:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800fe0c:	6808      	ldr	r0, [r1, #0]
 800fe0e:	b970      	cbnz	r0, 800fe2e <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 800fe10:	3301      	adds	r3, #1
 800fe12:	2b04      	cmp	r3, #4
 800fe14:	d1f8      	bne.n	800fe08 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800fe16:	682b      	ldr	r3, [r5, #0]
 800fe18:	b103      	cbz	r3, 800fe1c <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fe1a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fe1c:	4b10      	ldr	r3, [pc, #64]	; (800fe60 <tcp_bind+0x90>)
  pcb->local_port = port;
 800fe1e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	601c      	str	r4, [r3, #0]
 800fe24:	60e2      	str	r2, [r4, #12]
 800fe26:	f003 f927 	bl	8013078 <tcp_timer_needed>
  return ERR_OK;
 800fe2a:	2000      	movs	r0, #0
}
 800fe2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800fe2e:	8ac1      	ldrh	r1, [r0, #22]
 800fe30:	4291      	cmp	r1, r2
 800fe32:	d105      	bne.n	800fe40 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fe34:	6806      	ldr	r6, [r0, #0]
 800fe36:	b12e      	cbz	r6, 800fe44 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800fe38:	6829      	ldr	r1, [r5, #0]
 800fe3a:	b119      	cbz	r1, 800fe44 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fe3c:	428e      	cmp	r6, r1
 800fe3e:	d001      	beq.n	800fe44 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fe40:	68c0      	ldr	r0, [r0, #12]
 800fe42:	e7e4      	b.n	800fe0e <tcp_bind+0x3e>
              return ERR_USE;
 800fe44:	f06f 0007 	mvn.w	r0, #7
 800fe48:	e7f0      	b.n	800fe2c <tcp_bind+0x5c>
 800fe4a:	bf00      	nop
 800fe4c:	0802264c 	.word	0x0802264c
 800fe50:	0802133a 	.word	0x0802133a
 800fe54:	080212f9 	.word	0x080212f9
 800fe58:	08018495 	.word	0x08018495
 800fe5c:	080213f0 	.word	0x080213f0
 800fe60:	2000d994 	.word	0x2000d994

0800fe64 <tcp_listen_with_backlog_and_err>:
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fe64:	7d03      	ldrb	r3, [r0, #20]
{
 800fe66:	b570      	push	{r4, r5, r6, lr}
 800fe68:	4605      	mov	r5, r0
 800fe6a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fe6c:	b16b      	cbz	r3, 800fe8a <tcp_listen_with_backlog_and_err+0x26>
 800fe6e:	4b23      	ldr	r3, [pc, #140]	; (800fefc <tcp_listen_with_backlog_and_err+0x98>)
 800fe70:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800fe74:	4922      	ldr	r1, [pc, #136]	; (800ff00 <tcp_listen_with_backlog_and_err+0x9c>)
 800fe76:	4823      	ldr	r0, [pc, #140]	; (800ff04 <tcp_listen_with_backlog_and_err+0xa0>)
 800fe78:	f006 fd06 	bl	8016888 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800fe7c:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fe7e:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 800fe82:	b106      	cbz	r6, 800fe86 <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 800fe84:	7033      	strb	r3, [r6, #0]
}
 800fe86:	4620      	mov	r0, r4
 800fe88:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fe8a:	2002      	movs	r0, #2
 800fe8c:	f7ff f9ce 	bl	800f22c <memp_malloc>
  if (lpcb == NULL) {
 800fe90:	4604      	mov	r4, r0
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d02f      	beq.n	800fef6 <tcp_listen_with_backlog_and_err+0x92>
  lpcb->state = LISTEN;
 800fe96:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800fe98:	692b      	ldr	r3, [r5, #16]
 800fe9a:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800fe9c:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800fe9e:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800fea0:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800fea2:	7d6a      	ldrb	r2, [r5, #21]
 800fea4:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800fea6:	7a2a      	ldrb	r2, [r5, #8]
 800fea8:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800feaa:	7aaa      	ldrb	r2, [r5, #10]
 800feac:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 800feae:	7a6a      	ldrb	r2, [r5, #9]
 800feb0:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800feb2:	682a      	ldr	r2, [r5, #0]
 800feb4:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800feb6:	b13b      	cbz	r3, 800fec8 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800feb8:	4a13      	ldr	r2, [pc, #76]	; (800ff08 <tcp_listen_with_backlog_and_err+0xa4>)
 800feba:	6813      	ldr	r3, [r2, #0]
 800febc:	42ab      	cmp	r3, r5
 800febe:	d112      	bne.n	800fee6 <tcp_listen_with_backlog_and_err+0x82>
 800fec0:	68eb      	ldr	r3, [r5, #12]
 800fec2:	6013      	str	r3, [r2, #0]
 800fec4:	2300      	movs	r3, #0
 800fec6:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 800fec8:	4629      	mov	r1, r5
 800feca:	2001      	movs	r0, #1
 800fecc:	f7ff f9ca 	bl	800f264 <memp_free>
  lpcb->accept = tcp_accept_null;
 800fed0:	4b0e      	ldr	r3, [pc, #56]	; (800ff0c <tcp_listen_with_backlog_and_err+0xa8>)
 800fed2:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fed4:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <tcp_listen_with_backlog_and_err+0xac>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	601c      	str	r4, [r3, #0]
 800feda:	60e2      	str	r2, [r4, #12]
 800fedc:	f003 f8cc 	bl	8013078 <tcp_timer_needed>
  res = ERR_OK;
 800fee0:	2300      	movs	r3, #0
 800fee2:	e7ce      	b.n	800fe82 <tcp_listen_with_backlog_and_err+0x1e>
 800fee4:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d0ec      	beq.n	800fec4 <tcp_listen_with_backlog_and_err+0x60>
 800feea:	68da      	ldr	r2, [r3, #12]
 800feec:	42aa      	cmp	r2, r5
 800feee:	d1f9      	bne.n	800fee4 <tcp_listen_with_backlog_and_err+0x80>
 800fef0:	68ea      	ldr	r2, [r5, #12]
 800fef2:	60da      	str	r2, [r3, #12]
 800fef4:	e7e6      	b.n	800fec4 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 800fef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fefa:	e7c2      	b.n	800fe82 <tcp_listen_with_backlog_and_err+0x1e>
 800fefc:	0802133a 	.word	0x0802133a
 800ff00:	080213cb 	.word	0x080213cb
 800ff04:	08018495 	.word	0x08018495
 800ff08:	2000d994 	.word	0x2000d994
 800ff0c:	0801098b 	.word	0x0801098b
 800ff10:	2000d990 	.word	0x2000d990

0800ff14 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ff14:	2200      	movs	r2, #0
 800ff16:	f7ff bfa5 	b.w	800fe64 <tcp_listen_with_backlog_and_err>
	...

0800ff1c <tcp_update_rcv_ann_wnd>:
{
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ff20:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ff22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ff24:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ff26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff28:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ff2a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ff2e:	4428      	add	r0, r5
 800ff30:	bf94      	ite	ls
 800ff32:	1a82      	subls	r2, r0, r2
 800ff34:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 800ff38:	2a00      	cmp	r2, #0
 800ff3a:	db01      	blt.n	800ff40 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ff3c:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ff40:	1aea      	subs	r2, r5, r3
 800ff42:	2a00      	cmp	r2, #0
 800ff44:	dd02      	ble.n	800ff4c <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 800ff46:	2000      	movs	r0, #0
 800ff48:	8560      	strh	r0, [r4, #42]	; 0x2a
 800ff4a:	e7f8      	b.n	800ff3e <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ff4c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ff4e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800ff52:	d306      	bcc.n	800ff62 <tcp_update_rcv_ann_wnd+0x46>
 800ff54:	4b04      	ldr	r3, [pc, #16]	; (800ff68 <tcp_update_rcv_ann_wnd+0x4c>)
 800ff56:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ff5a:	4904      	ldr	r1, [pc, #16]	; (800ff6c <tcp_update_rcv_ann_wnd+0x50>)
 800ff5c:	4804      	ldr	r0, [pc, #16]	; (800ff70 <tcp_update_rcv_ann_wnd+0x54>)
 800ff5e:	f006 fc93 	bl	8016888 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ff62:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800ff64:	2000      	movs	r0, #0
 800ff66:	e7ea      	b.n	800ff3e <tcp_update_rcv_ann_wnd+0x22>
 800ff68:	0802133a 	.word	0x0802133a
 800ff6c:	08021654 	.word	0x08021654
 800ff70:	08018495 	.word	0x08018495

0800ff74 <tcp_recved>:
{
 800ff74:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ff76:	7d03      	ldrb	r3, [r0, #20]
{
 800ff78:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ff7a:	2b01      	cmp	r3, #1
{
 800ff7c:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ff7e:	d106      	bne.n	800ff8e <tcp_recved+0x1a>
 800ff80:	4b17      	ldr	r3, [pc, #92]	; (800ffe0 <tcp_recved+0x6c>)
 800ff82:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ff86:	4917      	ldr	r1, [pc, #92]	; (800ffe4 <tcp_recved+0x70>)
 800ff88:	4817      	ldr	r0, [pc, #92]	; (800ffe8 <tcp_recved+0x74>)
 800ff8a:	f006 fc7d 	bl	8016888 <iprintf>
  pcb->rcv_wnd += len;
 800ff8e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800ff90:	4429      	add	r1, r5
 800ff92:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800ff94:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800ff98:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800ff9a:	d911      	bls.n	800ffc0 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ff9c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800ffa0:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f7ff ffba 	bl	800ff1c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ffa8:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800ffac:	db17      	blt.n	800ffde <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800ffae:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800ffb0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800ffb2:	f043 0302 	orr.w	r3, r3, #2
 800ffb6:	76a3      	strb	r3, [r4, #26]
}
 800ffb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800ffbc:	f002 bd46 	b.w	8012a4c <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800ffc0:	2900      	cmp	r1, #0
 800ffc2:	d1ee      	bne.n	800ffa2 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800ffc4:	7d23      	ldrb	r3, [r4, #20]
 800ffc6:	2b07      	cmp	r3, #7
 800ffc8:	d0e8      	beq.n	800ff9c <tcp_recved+0x28>
 800ffca:	2b09      	cmp	r3, #9
 800ffcc:	d0e6      	beq.n	800ff9c <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800ffce:	4b04      	ldr	r3, [pc, #16]	; (800ffe0 <tcp_recved+0x6c>)
 800ffd0:	f240 322d 	movw	r2, #813	; 0x32d
 800ffd4:	4905      	ldr	r1, [pc, #20]	; (800ffec <tcp_recved+0x78>)
 800ffd6:	4804      	ldr	r0, [pc, #16]	; (800ffe8 <tcp_recved+0x74>)
 800ffd8:	f006 fc56 	bl	8016888 <iprintf>
 800ffdc:	e7e1      	b.n	800ffa2 <tcp_recved+0x2e>
}
 800ffde:	bd38      	pop	{r3, r4, r5, pc}
 800ffe0:	0802133a 	.word	0x0802133a
 800ffe4:	08021494 	.word	0x08021494
 800ffe8:	08018495 	.word	0x08018495
 800ffec:	080214ba 	.word	0x080214ba

0800fff0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fff0:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800fff2:	4604      	mov	r4, r0
 800fff4:	b148      	cbz	r0, 801000a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800fff6:	6840      	ldr	r0, [r0, #4]
 800fff8:	b108      	cbz	r0, 800fffe <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800fffa:	f7ff faf1 	bl	800f5e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fffe:	4621      	mov	r1, r4
  }
}
 8010000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8010004:	2003      	movs	r0, #3
 8010006:	f7ff b92d 	b.w	800f264 <memp_free>
}
 801000a:	bd10      	pop	{r4, pc}

0801000c <tcp_segs_free>:
{
 801000c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 801000e:	b900      	cbnz	r0, 8010012 <tcp_segs_free+0x6>
}
 8010010:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8010012:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8010014:	f7ff ffec 	bl	800fff0 <tcp_seg_free>
    seg = next;
 8010018:	4620      	mov	r0, r4
 801001a:	e7f8      	b.n	801000e <tcp_segs_free+0x2>

0801001c <tcp_setprio>:
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  pcb->prio = prio;
 801001c:	7541      	strb	r1, [r0, #21]
}
 801001e:	4770      	bx	lr

08010020 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010024:	2003      	movs	r0, #3
 8010026:	f7ff f901 	bl	800f22c <memp_malloc>
  if (cseg == NULL) {
 801002a:	4605      	mov	r5, r0
 801002c:	b160      	cbz	r0, 8010048 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801002e:	4620      	mov	r0, r4
 8010030:	462b      	mov	r3, r5
 8010032:	f104 0210 	add.w	r2, r4, #16
 8010036:	f850 1b04 	ldr.w	r1, [r0], #4
 801003a:	4290      	cmp	r0, r2
 801003c:	f843 1b04 	str.w	r1, [r3], #4
 8010040:	d1f9      	bne.n	8010036 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8010042:	6868      	ldr	r0, [r5, #4]
 8010044:	f7ff fc88 	bl	800f958 <pbuf_ref>
  return cseg;
}
 8010048:	4628      	mov	r0, r5
 801004a:	bd38      	pop	{r3, r4, r5, pc}

0801004c <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801004c:	b100      	cbz	r0, 8010050 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801004e:	6101      	str	r1, [r0, #16]
  }
}
 8010050:	4770      	bx	lr
	...

08010054 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8010058:	4604      	mov	r4, r0
 801005a:	b158      	cbz	r0, 8010074 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801005c:	7d03      	ldrb	r3, [r0, #20]
 801005e:	2b01      	cmp	r3, #1
 8010060:	d106      	bne.n	8010070 <tcp_recv+0x1c>
 8010062:	4b05      	ldr	r3, [pc, #20]	; (8010078 <tcp_recv+0x24>)
 8010064:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8010068:	4904      	ldr	r1, [pc, #16]	; (801007c <tcp_recv+0x28>)
 801006a:	4805      	ldr	r0, [pc, #20]	; (8010080 <tcp_recv+0x2c>)
 801006c:	f006 fc0c 	bl	8016888 <iprintf>
    pcb->recv = recv;
 8010070:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8010074:	bd38      	pop	{r3, r4, r5, pc}
 8010076:	bf00      	nop
 8010078:	0802133a 	.word	0x0802133a
 801007c:	0802146d 	.word	0x0802146d
 8010080:	08018495 	.word	0x08018495

08010084 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8010088:	4604      	mov	r4, r0
 801008a:	b150      	cbz	r0, 80100a2 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801008c:	7d03      	ldrb	r3, [r0, #20]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d106      	bne.n	80100a0 <tcp_sent+0x1c>
 8010092:	4b04      	ldr	r3, [pc, #16]	; (80100a4 <tcp_sent+0x20>)
 8010094:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8010098:	4903      	ldr	r1, [pc, #12]	; (80100a8 <tcp_sent+0x24>)
 801009a:	4804      	ldr	r0, [pc, #16]	; (80100ac <tcp_sent+0x28>)
 801009c:	f006 fbf4 	bl	8016888 <iprintf>
    pcb->sent = sent;
 80100a0:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	0802133a 	.word	0x0802133a
 80100a8:	080214db 	.word	0x080214db
 80100ac:	08018495 	.word	0x08018495

080100b0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 80100b4:	4604      	mov	r4, r0
 80100b6:	b158      	cbz	r0, 80100d0 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80100b8:	7d03      	ldrb	r3, [r0, #20]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d106      	bne.n	80100cc <tcp_err+0x1c>
 80100be:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <tcp_err+0x24>)
 80100c0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80100c4:	4904      	ldr	r1, [pc, #16]	; (80100d8 <tcp_err+0x28>)
 80100c6:	4805      	ldr	r0, [pc, #20]	; (80100dc <tcp_err+0x2c>)
 80100c8:	f006 fbde 	bl	8016888 <iprintf>
    pcb->errf = err;
 80100cc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 80100d0:	bd38      	pop	{r3, r4, r5, pc}
 80100d2:	bf00      	nop
 80100d4:	0802133a 	.word	0x0802133a
 80100d8:	080213a5 	.word	0x080213a5
 80100dc:	08018495 	.word	0x08018495

080100e0 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80100e0:	b118      	cbz	r0, 80100ea <tcp_accept+0xa>
 80100e2:	7d03      	ldrb	r3, [r0, #20]
 80100e4:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 80100e6:	bf08      	it	eq
 80100e8:	6181      	streq	r1, [r0, #24]
  }
}
 80100ea:	4770      	bx	lr

080100ec <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80100ec:	7d03      	ldrb	r3, [r0, #20]
{
 80100ee:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80100f0:	2b01      	cmp	r3, #1
{
 80100f2:	4604      	mov	r4, r0
 80100f4:	460e      	mov	r6, r1
 80100f6:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80100f8:	d106      	bne.n	8010108 <tcp_poll+0x1c>
 80100fa:	4b05      	ldr	r3, [pc, #20]	; (8010110 <tcp_poll+0x24>)
 80100fc:	f240 7203 	movw	r2, #1795	; 0x703
 8010100:	4904      	ldr	r1, [pc, #16]	; (8010114 <tcp_poll+0x28>)
 8010102:	4805      	ldr	r0, [pc, #20]	; (8010118 <tcp_poll+0x2c>)
 8010104:	f006 fbc0 	bl	8016888 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010108:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801010c:	7725      	strb	r5, [r4, #28]
}
 801010e:	bd70      	pop	{r4, r5, r6, pc}
 8010110:	0802133a 	.word	0x0802133a
 8010114:	0802144f 	.word	0x0802144f
 8010118:	08018495 	.word	0x08018495

0801011c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801011c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 801011e:	7d03      	ldrb	r3, [r0, #20]
{
 8010120:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8010122:	2b01      	cmp	r3, #1
 8010124:	d919      	bls.n	801015a <tcp_pcb_purge+0x3e>
 8010126:	2b0a      	cmp	r3, #10
 8010128:	d017      	beq.n	801015a <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801012a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801012c:	b118      	cbz	r0, 8010136 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801012e:	f7ff fa57 	bl	800f5e0 <pbuf_free>
      pcb->refused_data = NULL;
 8010132:	2300      	movs	r3, #0
 8010134:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8010136:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010138:	f7ff ff68 	bl	801000c <tcp_segs_free>
    pcb->ooseq = NULL;
 801013c:	2500      	movs	r5, #0
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801013e:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 8010142:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8010144:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 8010146:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8010148:	f7ff ff60 	bl	801000c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801014c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801014e:	f7ff ff5d 	bl	801000c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010152:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010156:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801015a:	bd38      	pop	{r3, r4, r5, pc}

0801015c <tcp_slowtmr>:
{
 801015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8010160:	4eb0      	ldr	r6, [pc, #704]	; (8010424 <tcp_slowtmr+0x2c8>)
{
 8010162:	b085      	sub	sp, #20
  ++tcp_ticks;
 8010164:	6833      	ldr	r3, [r6, #0]
      tcp_active_pcbs_changed = 0;
 8010166:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8010458 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 801016a:	3301      	adds	r3, #1
 801016c:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 801016e:	4bae      	ldr	r3, [pc, #696]	; (8010428 <tcp_slowtmr+0x2cc>)
 8010170:	781a      	ldrb	r2, [r3, #0]
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	3201      	adds	r2, #1
 8010176:	701a      	strb	r2, [r3, #0]
  prev = NULL;
 8010178:	f04f 0800 	mov.w	r8, #0
  pcb = tcp_active_pcbs;
 801017c:	4fab      	ldr	r7, [pc, #684]	; (801042c <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801017e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 801045c <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8010182:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8010184:	b96c      	cbnz	r4, 80101a2 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8010186:	4faa      	ldr	r7, [pc, #680]	; (8010430 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010188:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 801045c <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 801018c:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801018e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8010460 <tcp_slowtmr+0x304>
 8010192:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8010438 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8010196:	2d00      	cmp	r5, #0
 8010198:	f040 8185 	bne.w	80104a6 <tcp_slowtmr+0x34a>
}
 801019c:	b005      	add	sp, #20
 801019e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80101a2:	7d23      	ldrb	r3, [r4, #20]
 80101a4:	b933      	cbnz	r3, 80101b4 <tcp_slowtmr+0x58>
 80101a6:	464b      	mov	r3, r9
 80101a8:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80101ac:	49a1      	ldr	r1, [pc, #644]	; (8010434 <tcp_slowtmr+0x2d8>)
 80101ae:	48a2      	ldr	r0, [pc, #648]	; (8010438 <tcp_slowtmr+0x2dc>)
 80101b0:	f006 fb6a 	bl	8016888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80101b4:	7d23      	ldrb	r3, [r4, #20]
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d106      	bne.n	80101c8 <tcp_slowtmr+0x6c>
 80101ba:	464b      	mov	r3, r9
 80101bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80101c0:	499e      	ldr	r1, [pc, #632]	; (801043c <tcp_slowtmr+0x2e0>)
 80101c2:	489d      	ldr	r0, [pc, #628]	; (8010438 <tcp_slowtmr+0x2dc>)
 80101c4:	f006 fb60 	bl	8016888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80101c8:	7d23      	ldrb	r3, [r4, #20]
 80101ca:	2b0a      	cmp	r3, #10
 80101cc:	d106      	bne.n	80101dc <tcp_slowtmr+0x80>
 80101ce:	464b      	mov	r3, r9
 80101d0:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80101d4:	499a      	ldr	r1, [pc, #616]	; (8010440 <tcp_slowtmr+0x2e4>)
 80101d6:	4898      	ldr	r0, [pc, #608]	; (8010438 <tcp_slowtmr+0x2dc>)
 80101d8:	f006 fb56 	bl	8016888 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80101dc:	9b02      	ldr	r3, [sp, #8]
 80101de:	7f62      	ldrb	r2, [r4, #29]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d104      	bne.n	80101f0 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 80101e6:	68e5      	ldr	r5, [r4, #12]
 80101e8:	4644      	mov	r4, r8
 80101ea:	46a0      	mov	r8, r4
 80101ec:	462c      	mov	r4, r5
 80101ee:	e7c9      	b.n	8010184 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80101f0:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80101f2:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80101f4:	2902      	cmp	r1, #2
 80101f6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80101fa:	f040 809d 	bne.w	8010338 <tcp_slowtmr+0x1dc>
 80101fe:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010200:	f200 80e4 	bhi.w	80103cc <tcp_slowtmr+0x270>
      if (pcb->persist_backoff > 0) {
 8010204:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8010208:	f1bb 0f00 	cmp.w	fp, #0
 801020c:	f000 80a7 	beq.w	801035e <tcp_slowtmr+0x202>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010210:	488c      	ldr	r0, [pc, #560]	; (8010444 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8010212:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010216:	4483      	add	fp, r0
 8010218:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 801021c:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 801021e:	bf3c      	itt	cc
 8010220:	3301      	addcc	r3, #1
 8010222:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8010226:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 801022a:	4293      	cmp	r3, r2
 801022c:	f080 8086 	bcs.w	801033c <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 8010230:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8010234:	7d23      	ldrb	r3, [r4, #20]
 8010236:	2b06      	cmp	r3, #6
 8010238:	d10b      	bne.n	8010252 <tcp_slowtmr+0xf6>
      if (pcb->flags & TF_RXCLOSED) {
 801023a:	7ea2      	ldrb	r2, [r4, #26]
 801023c:	06d2      	lsls	r2, r2, #27
 801023e:	d508      	bpl.n	8010252 <tcp_slowtmr+0xf6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010240:	6832      	ldr	r2, [r6, #0]
 8010242:	6a21      	ldr	r1, [r4, #32]
 8010244:	1a52      	subs	r2, r2, r1
 8010246:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8010248:	bf84      	itt	hi
 801024a:	f10b 0b01 	addhi.w	fp, fp, #1
 801024e:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010252:	7a25      	ldrb	r5, [r4, #8]
 8010254:	f015 0508 	ands.w	r5, r5, #8
 8010258:	d019      	beq.n	801028e <tcp_slowtmr+0x132>
 801025a:	2b04      	cmp	r3, #4
 801025c:	d002      	beq.n	8010264 <tcp_slowtmr+0x108>
       ((pcb->state == ESTABLISHED) ||
 801025e:	2b07      	cmp	r3, #7
 8010260:	f040 80c9 	bne.w	80103f6 <tcp_slowtmr+0x29a>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8010264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010268:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801026c:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801026e:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8010272:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8010276:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801027a:	6a23      	ldr	r3, [r4, #32]
 801027c:	1ac9      	subs	r1, r1, r3
 801027e:	4291      	cmp	r1, r2
 8010280:	f240 80a7 	bls.w	80103d2 <tcp_slowtmr+0x276>
        ++pcb_reset;
 8010284:	2501      	movs	r5, #1
        ++pcb_remove;
 8010286:	f10b 0b01 	add.w	fp, fp, #1
 801028a:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 801028e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010290:	b160      	cbz	r0, 80102ac <tcp_slowtmr+0x150>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8010292:	6833      	ldr	r3, [r6, #0]
 8010294:	6a22      	ldr	r2, [r4, #32]
 8010296:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801029a:	1a9a      	subs	r2, r3, r2
 801029c:	2306      	movs	r3, #6
 801029e:	434b      	muls	r3, r1
    if (pcb->ooseq != NULL &&
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d303      	bcc.n	80102ac <tcp_slowtmr+0x150>
      tcp_segs_free(pcb->ooseq);
 80102a4:	f7ff feb2 	bl	801000c <tcp_segs_free>
      pcb->ooseq = NULL;
 80102a8:	2300      	movs	r3, #0
 80102aa:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 80102ac:	7d23      	ldrb	r3, [r4, #20]
 80102ae:	2b03      	cmp	r3, #3
 80102b0:	f040 80a3 	bne.w	80103fa <tcp_slowtmr+0x29e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80102b4:	6833      	ldr	r3, [r6, #0]
 80102b6:	6a22      	ldr	r2, [r4, #32]
 80102b8:	1a9b      	subs	r3, r3, r2
 80102ba:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80102bc:	d803      	bhi.n	80102c6 <tcp_slowtmr+0x16a>
    if (pcb_remove) {
 80102be:	f1bb 0f00 	cmp.w	fp, #0
 80102c2:	f000 80cf 	beq.w	8010464 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 80102c6:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80102c8:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 80102cc:	f7ff ff26 	bl	801011c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80102d0:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 80102d2:	f1b8 0f00 	cmp.w	r8, #0
 80102d6:	f000 8098 	beq.w	801040a <tcp_slowtmr+0x2ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80102da:	42a3      	cmp	r3, r4
 80102dc:	d106      	bne.n	80102ec <tcp_slowtmr+0x190>
 80102de:	464b      	mov	r3, r9
 80102e0:	f240 4289 	movw	r2, #1161	; 0x489
 80102e4:	4958      	ldr	r1, [pc, #352]	; (8010448 <tcp_slowtmr+0x2ec>)
 80102e6:	4854      	ldr	r0, [pc, #336]	; (8010438 <tcp_slowtmr+0x2dc>)
 80102e8:	f006 face 	bl	8016888 <iprintf>
        prev->next = pcb->next;
 80102ec:	68e3      	ldr	r3, [r4, #12]
 80102ee:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 80102f2:	b14d      	cbz	r5, 8010308 <tcp_slowtmr+0x1ac>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80102f4:	8b23      	ldrh	r3, [r4, #24]
 80102f6:	4622      	mov	r2, r4
 80102f8:	9301      	str	r3, [sp, #4]
 80102fa:	8ae3      	ldrh	r3, [r4, #22]
 80102fc:	9300      	str	r3, [sp, #0]
 80102fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010300:	1d23      	adds	r3, r4, #4
 8010302:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010304:	f002 fd1a 	bl	8012d3c <tcp_rst>
      err_arg = pcb->callback_arg;
 8010308:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 801030a:	4621      	mov	r1, r4
 801030c:	2001      	movs	r0, #1
      err_arg = pcb->callback_arg;
 801030e:	9303      	str	r3, [sp, #12]
      pcb = pcb->next;
 8010310:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8010312:	f7fe ffa7 	bl	800f264 <memp_free>
      tcp_active_pcbs_changed = 0;
 8010316:	2200      	movs	r2, #0
 8010318:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801031c:	f1bb 0f00 	cmp.w	fp, #0
 8010320:	d004      	beq.n	801032c <tcp_slowtmr+0x1d0>
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	f06f 010c 	mvn.w	r1, #12
 8010328:	4618      	mov	r0, r3
 801032a:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 801032c:	f89a 3000 	ldrb.w	r3, [sl]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f43f af59 	beq.w	80101e8 <tcp_slowtmr+0x8c>
tcp_slowtmr_start:
 8010336:	e71f      	b.n	8010178 <tcp_slowtmr+0x1c>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010338:	2a0b      	cmp	r2, #11
 801033a:	e761      	b.n	8010200 <tcp_slowtmr+0xa4>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801033c:	4620      	mov	r0, r4
 801033e:	f002 fdeb 	bl	8012f18 <tcp_zero_window_probe>
 8010342:	2800      	cmp	r0, #0
 8010344:	f47f af74 	bne.w	8010230 <tcp_slowtmr+0xd4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010348:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 801034c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010350:	2b06      	cmp	r3, #6
 8010352:	f63f af6d 	bhi.w	8010230 <tcp_slowtmr+0xd4>
              pcb->persist_backoff++;
 8010356:	3301      	adds	r3, #1
 8010358:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 801035c:	e768      	b.n	8010230 <tcp_slowtmr+0xd4>
        if (pcb->rtime >= 0) {
 801035e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8010362:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8010364:	bfa4      	itt	ge
 8010366:	3301      	addge	r3, #1
 8010368:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801036a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801036c:	2b00      	cmp	r3, #0
 801036e:	f43f af5f 	beq.w	8010230 <tcp_slowtmr+0xd4>
 8010372:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8010376:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801037a:	4298      	cmp	r0, r3
 801037c:	f6ff af58 	blt.w	8010230 <tcp_slowtmr+0xd4>
          if (pcb->state != SYN_SENT) {
 8010380:	2902      	cmp	r1, #2
 8010382:	d00a      	beq.n	801039a <tcp_slowtmr+0x23e>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010384:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8010388:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801038c:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8010390:	492e      	ldr	r1, [pc, #184]	; (801044c <tcp_slowtmr+0x2f0>)
 8010392:	5c8a      	ldrb	r2, [r1, r2]
 8010394:	4093      	lsls	r3, r2
 8010396:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 801039a:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801039c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 80103a0:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80103a2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80103a6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->ssthresh = eff_wnd >> 1;
 80103a8:	4293      	cmp	r3, r2
 80103aa:	bf28      	it	cs
 80103ac:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80103ae:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 80103b0:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80103b2:	b292      	uxth	r2, r2
 80103b4:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 80103b6:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 80103ba:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->ssthresh = (pcb->mss << 1);
 80103be:	bf38      	it	cc
 80103c0:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 80103c4:	4620      	mov	r0, r4
 80103c6:	f002 fd13 	bl	8012df0 <tcp_rexmit_rto>
 80103ca:	e733      	b.n	8010234 <tcp_slowtmr+0xd8>
      ++pcb_remove;
 80103cc:	f04f 0b01 	mov.w	fp, #1
 80103d0:	e730      	b.n	8010234 <tcp_slowtmr+0xd8>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80103d2:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80103d6:	4a1e      	ldr	r2, [pc, #120]	; (8010450 <tcp_slowtmr+0x2f4>)
 80103d8:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 80103dc:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80103e0:	4299      	cmp	r1, r3
 80103e2:	d908      	bls.n	80103f6 <tcp_slowtmr+0x29a>
        err = tcp_keepalive(pcb);
 80103e4:	4620      	mov	r0, r4
 80103e6:	f002 fd6d 	bl	8012ec4 <tcp_keepalive>
        if (err == ERR_OK) {
 80103ea:	b920      	cbnz	r0, 80103f6 <tcp_slowtmr+0x29a>
          pcb->keep_cnt_sent++;
 80103ec:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80103f0:	3301      	adds	r3, #1
 80103f2:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 80103f6:	2500      	movs	r5, #0
 80103f8:	e749      	b.n	801028e <tcp_slowtmr+0x132>
    if (pcb->state == LAST_ACK) {
 80103fa:	2b09      	cmp	r3, #9
 80103fc:	f47f af5f 	bne.w	80102be <tcp_slowtmr+0x162>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010400:	6833      	ldr	r3, [r6, #0]
 8010402:	6a22      	ldr	r2, [r4, #32]
 8010404:	1a9b      	subs	r3, r3, r2
 8010406:	2bf0      	cmp	r3, #240	; 0xf0
 8010408:	e758      	b.n	80102bc <tcp_slowtmr+0x160>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801040a:	42a3      	cmp	r3, r4
 801040c:	d006      	beq.n	801041c <tcp_slowtmr+0x2c0>
 801040e:	464b      	mov	r3, r9
 8010410:	f240 428d 	movw	r2, #1165	; 0x48d
 8010414:	490f      	ldr	r1, [pc, #60]	; (8010454 <tcp_slowtmr+0x2f8>)
 8010416:	4808      	ldr	r0, [pc, #32]	; (8010438 <tcp_slowtmr+0x2dc>)
 8010418:	f006 fa36 	bl	8016888 <iprintf>
        tcp_active_pcbs = pcb->next;
 801041c:	68e3      	ldr	r3, [r4, #12]
 801041e:	603b      	str	r3, [r7, #0]
 8010420:	e767      	b.n	80102f2 <tcp_slowtmr+0x196>
 8010422:	bf00      	nop
 8010424:	2000d98c 	.word	0x2000d98c
 8010428:	20004faa 	.word	0x20004faa
 801042c:	2000d988 	.word	0x2000d988
 8010430:	2000d998 	.word	0x2000d998
 8010434:	08021502 	.word	0x08021502
 8010438:	08018495 	.word	0x08018495
 801043c:	0802152c 	.word	0x0802152c
 8010440:	08021556 	.word	0x08021556
 8010444:	08021448 	.word	0x08021448
 8010448:	08021583 	.word	0x08021583
 801044c:	080212ec 	.word	0x080212ec
 8010450:	000124f8 	.word	0x000124f8
 8010454:	080215ae 	.word	0x080215ae
 8010458:	2000d984 	.word	0x2000d984
 801045c:	0802133a 	.word	0x0802133a
 8010460:	080215d8 	.word	0x080215d8
      ++prev->polltmr;
 8010464:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010466:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8010468:	3301      	adds	r3, #1
 801046a:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801046c:	429a      	cmp	r2, r3
      pcb = pcb->next;
 801046e:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8010470:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010472:	f63f aeba 	bhi.w	80101ea <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8010476:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 801047a:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 801047e:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8010482:	b173      	cbz	r3, 80104a2 <tcp_slowtmr+0x346>
 8010484:	4621      	mov	r1, r4
 8010486:	6920      	ldr	r0, [r4, #16]
 8010488:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801048a:	f89a 3000 	ldrb.w	r3, [sl]
 801048e:	2b00      	cmp	r3, #0
 8010490:	f47f ae72 	bne.w	8010178 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8010494:	2800      	cmp	r0, #0
 8010496:	f47f aea8 	bne.w	80101ea <tcp_slowtmr+0x8e>
          tcp_output(prev);
 801049a:	4620      	mov	r0, r4
 801049c:	f002 fad6 	bl	8012a4c <tcp_output>
 80104a0:	e6a3      	b.n	80101ea <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 80104a2:	4658      	mov	r0, fp
 80104a4:	e7f1      	b.n	801048a <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80104a6:	7d2b      	ldrb	r3, [r5, #20]
 80104a8:	2b0a      	cmp	r3, #10
 80104aa:	d006      	beq.n	80104ba <tcp_slowtmr+0x35e>
 80104ac:	4643      	mov	r3, r8
 80104ae:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80104b2:	4651      	mov	r1, sl
 80104b4:	4648      	mov	r0, r9
 80104b6:	f006 f9e7 	bl	8016888 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104ba:	6833      	ldr	r3, [r6, #0]
 80104bc:	6a2a      	ldr	r2, [r5, #32]
 80104be:	1a9b      	subs	r3, r3, r2
 80104c0:	2bf0      	cmp	r3, #240	; 0xf0
 80104c2:	d802      	bhi.n	80104ca <tcp_slowtmr+0x36e>
      pcb = pcb->next;
 80104c4:	462c      	mov	r4, r5
 80104c6:	68ed      	ldr	r5, [r5, #12]
 80104c8:	e665      	b.n	8010196 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 80104ca:	4628      	mov	r0, r5
 80104cc:	f7ff fe26 	bl	801011c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80104d0:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 80104d2:	b194      	cbz	r4, 80104fa <tcp_slowtmr+0x39e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80104d4:	42ab      	cmp	r3, r5
 80104d6:	d106      	bne.n	80104e6 <tcp_slowtmr+0x38a>
 80104d8:	4643      	mov	r3, r8
 80104da:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80104de:	490d      	ldr	r1, [pc, #52]	; (8010514 <tcp_slowtmr+0x3b8>)
 80104e0:	4648      	mov	r0, r9
 80104e2:	f006 f9d1 	bl	8016888 <iprintf>
        prev->next = pcb->next;
 80104e6:	68eb      	ldr	r3, [r5, #12]
 80104e8:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80104ea:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80104ee:	4629      	mov	r1, r5
 80104f0:	2001      	movs	r0, #1
 80104f2:	f7fe feb7 	bl	800f264 <memp_free>
      pcb = pcb->next;
 80104f6:	465d      	mov	r5, fp
 80104f8:	e64d      	b.n	8010196 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80104fa:	42ab      	cmp	r3, r5
 80104fc:	d006      	beq.n	801050c <tcp_slowtmr+0x3b0>
 80104fe:	4643      	mov	r3, r8
 8010500:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8010504:	4904      	ldr	r1, [pc, #16]	; (8010518 <tcp_slowtmr+0x3bc>)
 8010506:	4648      	mov	r0, r9
 8010508:	f006 f9be 	bl	8016888 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801050c:	68eb      	ldr	r3, [r5, #12]
 801050e:	603b      	str	r3, [r7, #0]
 8010510:	e7eb      	b.n	80104ea <tcp_slowtmr+0x38e>
 8010512:	bf00      	nop
 8010514:	08021607 	.word	0x08021607
 8010518:	0802162e 	.word	0x0802162e

0801051c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 801051c:	6803      	ldr	r3, [r0, #0]
{
 801051e:	b510      	push	{r4, lr}
  TCP_RMV(pcblist, pcb);
 8010520:	428b      	cmp	r3, r1
{
 8010522:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8010524:	d137      	bne.n	8010596 <tcp_pcb_remove+0x7a>
 8010526:	68cb      	ldr	r3, [r1, #12]
 8010528:	6003      	str	r3, [r0, #0]
 801052a:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 801052c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801052e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8010530:	f7ff fdf4 	bl	801011c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8010534:	7d23      	ldrb	r3, [r4, #20]
 8010536:	2b0a      	cmp	r3, #10
 8010538:	d00a      	beq.n	8010550 <tcp_pcb_remove+0x34>
 801053a:	2b01      	cmp	r3, #1
 801053c:	d008      	beq.n	8010550 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 801053e:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8010540:	07da      	lsls	r2, r3, #31
 8010542:	d505      	bpl.n	8010550 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8010544:	f043 0302 	orr.w	r3, r3, #2
 8010548:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 801054a:	4620      	mov	r0, r4
 801054c:	f002 fa7e 	bl	8012a4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010550:	7d23      	ldrb	r3, [r4, #20]
 8010552:	2b01      	cmp	r3, #1
 8010554:	d01a      	beq.n	801058c <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010556:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010558:	b133      	cbz	r3, 8010568 <tcp_pcb_remove+0x4c>
 801055a:	4b13      	ldr	r3, [pc, #76]	; (80105a8 <tcp_pcb_remove+0x8c>)
 801055c:	f240 7253 	movw	r2, #1875	; 0x753
 8010560:	4912      	ldr	r1, [pc, #72]	; (80105ac <tcp_pcb_remove+0x90>)
 8010562:	4813      	ldr	r0, [pc, #76]	; (80105b0 <tcp_pcb_remove+0x94>)
 8010564:	f006 f990 	bl	8016888 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010568:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801056a:	b133      	cbz	r3, 801057a <tcp_pcb_remove+0x5e>
 801056c:	4b0e      	ldr	r3, [pc, #56]	; (80105a8 <tcp_pcb_remove+0x8c>)
 801056e:	f240 7254 	movw	r2, #1876	; 0x754
 8010572:	4910      	ldr	r1, [pc, #64]	; (80105b4 <tcp_pcb_remove+0x98>)
 8010574:	480e      	ldr	r0, [pc, #56]	; (80105b0 <tcp_pcb_remove+0x94>)
 8010576:	f006 f987 	bl	8016888 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801057a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801057c:	b133      	cbz	r3, 801058c <tcp_pcb_remove+0x70>
 801057e:	4b0a      	ldr	r3, [pc, #40]	; (80105a8 <tcp_pcb_remove+0x8c>)
 8010580:	f240 7256 	movw	r2, #1878	; 0x756
 8010584:	490c      	ldr	r1, [pc, #48]	; (80105b8 <tcp_pcb_remove+0x9c>)
 8010586:	480a      	ldr	r0, [pc, #40]	; (80105b0 <tcp_pcb_remove+0x94>)
 8010588:	f006 f97e 	bl	8016888 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801058c:	2300      	movs	r3, #0
 801058e:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010590:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010592:	bd10      	pop	{r4, pc}
 8010594:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8010596:	2b00      	cmp	r3, #0
 8010598:	d0c7      	beq.n	801052a <tcp_pcb_remove+0xe>
 801059a:	68da      	ldr	r2, [r3, #12]
 801059c:	42a2      	cmp	r2, r4
 801059e:	d1f9      	bne.n	8010594 <tcp_pcb_remove+0x78>
 80105a0:	68e2      	ldr	r2, [r4, #12]
 80105a2:	60da      	str	r2, [r3, #12]
 80105a4:	e7c1      	b.n	801052a <tcp_pcb_remove+0xe>
 80105a6:	bf00      	nop
 80105a8:	0802133a 	.word	0x0802133a
 80105ac:	08021400 	.word	0x08021400
 80105b0:	08018495 	.word	0x08018495
 80105b4:	08021418 	.word	0x08021418
 80105b8:	08021431 	.word	0x08021431

080105bc <tcp_close_shutdown>:
{
 80105bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105be:	7d03      	ldrb	r3, [r0, #20]
 80105c0:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80105c2:	2900      	cmp	r1, #0
 80105c4:	d049      	beq.n	801065a <tcp_close_shutdown+0x9e>
 80105c6:	2b04      	cmp	r3, #4
 80105c8:	d001      	beq.n	80105ce <tcp_close_shutdown+0x12>
 80105ca:	2b07      	cmp	r3, #7
 80105cc:	d145      	bne.n	801065a <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80105ce:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80105d0:	b91a      	cbnz	r2, 80105da <tcp_close_shutdown+0x1e>
 80105d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80105d4:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 80105d8:	d03f      	beq.n	801065a <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80105da:	7ea3      	ldrb	r3, [r4, #26]
 80105dc:	06db      	lsls	r3, r3, #27
 80105de:	d406      	bmi.n	80105ee <tcp_close_shutdown+0x32>
 80105e0:	4b3f      	ldr	r3, [pc, #252]	; (80106e0 <tcp_close_shutdown+0x124>)
 80105e2:	f240 120f 	movw	r2, #271	; 0x10f
 80105e6:	493f      	ldr	r1, [pc, #252]	; (80106e4 <tcp_close_shutdown+0x128>)
 80105e8:	483f      	ldr	r0, [pc, #252]	; (80106e8 <tcp_close_shutdown+0x12c>)
 80105ea:	f006 f94d 	bl	8016888 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80105ee:	8b23      	ldrh	r3, [r4, #24]
 80105f0:	4622      	mov	r2, r4
 80105f2:	9301      	str	r3, [sp, #4]
 80105f4:	8ae3      	ldrh	r3, [r4, #22]
 80105f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80105fc:	1d23      	adds	r3, r4, #4
 80105fe:	f002 fb9d 	bl	8012d3c <tcp_rst>
      tcp_pcb_purge(pcb);
 8010602:	4620      	mov	r0, r4
 8010604:	f7ff fd8a 	bl	801011c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010608:	4a38      	ldr	r2, [pc, #224]	; (80106ec <tcp_close_shutdown+0x130>)
 801060a:	6813      	ldr	r3, [r2, #0]
 801060c:	42a3      	cmp	r3, r4
 801060e:	d115      	bne.n	801063c <tcp_close_shutdown+0x80>
 8010610:	68e3      	ldr	r3, [r4, #12]
 8010612:	6013      	str	r3, [r2, #0]
 8010614:	2300      	movs	r3, #0
 8010616:	2201      	movs	r2, #1
 8010618:	60e3      	str	r3, [r4, #12]
 801061a:	4b35      	ldr	r3, [pc, #212]	; (80106f0 <tcp_close_shutdown+0x134>)
 801061c:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801061e:	7d23      	ldrb	r3, [r4, #20]
 8010620:	2b04      	cmp	r3, #4
 8010622:	d113      	bne.n	801064c <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8010624:	230a      	movs	r3, #10
 8010626:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010628:	4b32      	ldr	r3, [pc, #200]	; (80106f4 <tcp_close_shutdown+0x138>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	601c      	str	r4, [r3, #0]
 801062e:	60e2      	str	r2, [r4, #12]
 8010630:	f002 fd22 	bl	8013078 <tcp_timer_needed>
}
 8010634:	2000      	movs	r0, #0
 8010636:	b003      	add	sp, #12
 8010638:	bd30      	pop	{r4, r5, pc}
 801063a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0e9      	beq.n	8010614 <tcp_close_shutdown+0x58>
 8010640:	68da      	ldr	r2, [r3, #12]
 8010642:	42a2      	cmp	r2, r4
 8010644:	d1f9      	bne.n	801063a <tcp_close_shutdown+0x7e>
 8010646:	68e2      	ldr	r2, [r4, #12]
 8010648:	60da      	str	r2, [r3, #12]
 801064a:	e7e3      	b.n	8010614 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 801064c:	4b2a      	ldr	r3, [pc, #168]	; (80106f8 <tcp_close_shutdown+0x13c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	42a3      	cmp	r3, r4
 8010652:	d117      	bne.n	8010684 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8010654:	f001 fda8 	bl	80121a8 <tcp_trigger_input_pcb_close>
 8010658:	e7ec      	b.n	8010634 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 801065a:	2b01      	cmp	r3, #1
 801065c:	d020      	beq.n	80106a0 <tcp_close_shutdown+0xe4>
 801065e:	d307      	bcc.n	8010670 <tcp_close_shutdown+0xb4>
 8010660:	2b02      	cmp	r3, #2
 8010662:	d033      	beq.n	80106cc <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8010664:	4620      	mov	r0, r4
}
 8010666:	b003      	add	sp, #12
 8010668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 801066c:	f7ff bb7e 	b.w	800fd6c <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8010670:	8ae3      	ldrh	r3, [r4, #22]
 8010672:	b13b      	cbz	r3, 8010684 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010674:	4a21      	ldr	r2, [pc, #132]	; (80106fc <tcp_close_shutdown+0x140>)
 8010676:	6813      	ldr	r3, [r2, #0]
 8010678:	42a3      	cmp	r3, r4
 801067a:	d109      	bne.n	8010690 <tcp_close_shutdown+0xd4>
 801067c:	68e3      	ldr	r3, [r4, #12]
 801067e:	6013      	str	r3, [r2, #0]
 8010680:	2300      	movs	r3, #0
 8010682:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8010684:	4621      	mov	r1, r4
 8010686:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8010688:	f7fe fdec 	bl	800f264 <memp_free>
    break;
 801068c:	e7d2      	b.n	8010634 <tcp_close_shutdown+0x78>
 801068e:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010690:	2b00      	cmp	r3, #0
 8010692:	d0f5      	beq.n	8010680 <tcp_close_shutdown+0xc4>
 8010694:	68da      	ldr	r2, [r3, #12]
 8010696:	42a2      	cmp	r2, r4
 8010698:	d1f9      	bne.n	801068e <tcp_close_shutdown+0xd2>
 801069a:	68e2      	ldr	r2, [r4, #12]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	e7ef      	b.n	8010680 <tcp_close_shutdown+0xc4>
         pcb->listener = NULL;
 80106a0:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80106a2:	4917      	ldr	r1, [pc, #92]	; (8010700 <tcp_close_shutdown+0x144>)
 80106a4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80106a8:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80106aa:	b94a      	cbnz	r2, 80106c0 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80106ac:	3301      	adds	r3, #1
 80106ae:	2b04      	cmp	r3, #4
 80106b0:	d1f8      	bne.n	80106a4 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80106b2:	4621      	mov	r1, r4
 80106b4:	4813      	ldr	r0, [pc, #76]	; (8010704 <tcp_close_shutdown+0x148>)
 80106b6:	f7ff ff31 	bl	801051c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80106ba:	4621      	mov	r1, r4
 80106bc:	2002      	movs	r0, #2
 80106be:	e7e3      	b.n	8010688 <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 80106c0:	6f95      	ldr	r5, [r2, #120]	; 0x78
 80106c2:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 80106c4:	bf08      	it	eq
 80106c6:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80106c8:	68d2      	ldr	r2, [r2, #12]
 80106ca:	e7ee      	b.n	80106aa <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80106cc:	4621      	mov	r1, r4
 80106ce:	4807      	ldr	r0, [pc, #28]	; (80106ec <tcp_close_shutdown+0x130>)
 80106d0:	f7ff ff24 	bl	801051c <tcp_pcb_remove>
 80106d4:	2001      	movs	r0, #1
 80106d6:	4b06      	ldr	r3, [pc, #24]	; (80106f0 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 80106d8:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80106da:	7018      	strb	r0, [r3, #0]
 80106dc:	e7d4      	b.n	8010688 <tcp_close_shutdown+0xcc>
 80106de:	bf00      	nop
 80106e0:	0802133a 	.word	0x0802133a
 80106e4:	08021321 	.word	0x08021321
 80106e8:	08018495 	.word	0x08018495
 80106ec:	2000d988 	.word	0x2000d988
 80106f0:	2000d984 	.word	0x2000d984
 80106f4:	2000d998 	.word	0x2000d998
 80106f8:	2000d99c 	.word	0x2000d99c
 80106fc:	2000d994 	.word	0x2000d994
 8010700:	080213f0 	.word	0x080213f0
 8010704:	2000d990 	.word	0x2000d990

08010708 <tcp_close>:
  if (pcb->state != LISTEN) {
 8010708:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 801070a:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 801070c:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 801070e:	bf1e      	ittt	ne
 8010710:	7e83      	ldrbne	r3, [r0, #26]
 8010712:	f043 0310 	orrne.w	r3, r3, #16
 8010716:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8010718:	f7ff bf50 	b.w	80105bc <tcp_close_shutdown>

0801071c <tcp_recv_null>:
{
 801071c:	b510      	push	{r4, lr}
 801071e:	4608      	mov	r0, r1
  if (p != NULL) {
 8010720:	4614      	mov	r4, r2
 8010722:	b13a      	cbz	r2, 8010734 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8010724:	8911      	ldrh	r1, [r2, #8]
 8010726:	f7ff fc25 	bl	800ff74 <tcp_recved>
    pbuf_free(p);
 801072a:	4620      	mov	r0, r4
 801072c:	f7fe ff58 	bl	800f5e0 <pbuf_free>
}
 8010730:	2000      	movs	r0, #0
 8010732:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1fb      	bne.n	8010730 <tcp_recv_null+0x14>
}
 8010738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 801073c:	f7ff bfe4 	b.w	8010708 <tcp_close>

08010740 <tcp_process_refused_data>:
{
 8010740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pcb->refused_data = NULL;
 8010742:	2300      	movs	r3, #0
    u8_t refused_flags = pcb->refused_data->flags;
 8010744:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010746:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 801074a:	7b77      	ldrb	r7, [r6, #13]
{
 801074c:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 801074e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010750:	b1dd      	cbz	r5, 801078a <tcp_process_refused_data+0x4a>
 8010752:	4601      	mov	r1, r0
 8010754:	4632      	mov	r2, r6
 8010756:	6900      	ldr	r0, [r0, #16]
 8010758:	47a8      	blx	r5
 801075a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 801075c:	b9e0      	cbnz	r0, 8010798 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801075e:	06bb      	lsls	r3, r7, #26
 8010760:	d511      	bpl.n	8010786 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010762:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8010764:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010768:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 801076c:	bf1c      	itt	ne
 801076e:	3301      	addne	r3, #1
 8010770:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8010772:	b146      	cbz	r6, 8010786 <tcp_process_refused_data+0x46>
 8010774:	2300      	movs	r3, #0
 8010776:	4621      	mov	r1, r4
 8010778:	461a      	mov	r2, r3
 801077a:	6920      	ldr	r0, [r4, #16]
 801077c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 801077e:	300d      	adds	r0, #13
 8010780:	d101      	bne.n	8010786 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8010782:	f06f 050c 	mvn.w	r5, #12
}
 8010786:	4628      	mov	r0, r5
 8010788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801078a:	4601      	mov	r1, r0
 801078c:	462b      	mov	r3, r5
 801078e:	4632      	mov	r2, r6
 8010790:	4628      	mov	r0, r5
 8010792:	f7ff ffc3 	bl	801071c <tcp_recv_null>
 8010796:	e7e0      	b.n	801075a <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8010798:	f110 050d 	adds.w	r5, r0, #13
 801079c:	d0f1      	beq.n	8010782 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 801079e:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80107a0:	f06f 0504 	mvn.w	r5, #4
 80107a4:	e7ef      	b.n	8010786 <tcp_process_refused_data+0x46>
	...

080107a8 <tcp_fasttmr>:
{
 80107a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80107ac:	4d1b      	ldr	r5, [pc, #108]	; (801081c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80107ae:	4f1c      	ldr	r7, [pc, #112]	; (8010820 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80107b0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80107b2:	4e1c      	ldr	r6, [pc, #112]	; (8010824 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80107b4:	3301      	adds	r3, #1
 80107b6:	702b      	strb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80107b8:	f04f 0800 	mov.w	r8, #0
  pcb = tcp_active_pcbs;
 80107bc:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 80107be:	b90c      	cbnz	r4, 80107c4 <tcp_fasttmr+0x1c>
}
 80107c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80107c4:	782b      	ldrb	r3, [r5, #0]
 80107c6:	7f62      	ldrb	r2, [r4, #29]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d024      	beq.n	8010816 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 80107cc:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80107ce:	7ea3      	ldrb	r3, [r4, #26]
 80107d0:	07d9      	lsls	r1, r3, #31
 80107d2:	d509      	bpl.n	80107e8 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 80107d4:	f043 0302 	orr.w	r3, r3, #2
 80107d8:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80107da:	4620      	mov	r0, r4
 80107dc:	f002 f936 	bl	8012a4c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80107e0:	7ea3      	ldrb	r3, [r4, #26]
 80107e2:	f023 0303 	bic.w	r3, r3, #3
 80107e6:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 80107e8:	7ea3      	ldrb	r3, [r4, #26]
 80107ea:	071a      	lsls	r2, r3, #28
 80107ec:	d505      	bpl.n	80107fa <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 80107ee:	f023 0308 	bic.w	r3, r3, #8
 80107f2:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80107f4:	4620      	mov	r0, r4
 80107f6:	f7ff fab9 	bl	800fd6c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 80107fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 80107fc:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8010800:	b13b      	cbz	r3, 8010812 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8010802:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8010804:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8010808:	f7ff ff9a 	bl	8010740 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801080c:	7833      	ldrb	r3, [r6, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1d2      	bne.n	80107b8 <tcp_fasttmr+0x10>
{
 8010812:	464c      	mov	r4, r9
 8010814:	e7d3      	b.n	80107be <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8010816:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801081a:	e7fa      	b.n	8010812 <tcp_fasttmr+0x6a>
 801081c:	20004faa 	.word	0x20004faa
 8010820:	2000d988 	.word	0x2000d988
 8010824:	2000d984 	.word	0x2000d984

08010828 <tcp_tmr>:
{
 8010828:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801082a:	f7ff ffbd 	bl	80107a8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801082e:	4a06      	ldr	r2, [pc, #24]	; (8010848 <tcp_tmr+0x20>)
 8010830:	7813      	ldrb	r3, [r2, #0]
 8010832:	3301      	adds	r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	7013      	strb	r3, [r2, #0]
 8010838:	07db      	lsls	r3, r3, #31
 801083a:	d503      	bpl.n	8010844 <tcp_tmr+0x1c>
}
 801083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8010840:	f7ff bc8c 	b.w	801015c <tcp_slowtmr>
}
 8010844:	bd08      	pop	{r3, pc}
 8010846:	bf00      	nop
 8010848:	20004fa9 	.word	0x20004fa9

0801084c <tcp_shutdown>:
{
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4614      	mov	r4, r2
  if (pcb->state == LISTEN) {
 8010850:	7d02      	ldrb	r2, [r0, #20]
{
 8010852:	4605      	mov	r5, r0
  if (pcb->state == LISTEN) {
 8010854:	2a01      	cmp	r2, #1
 8010856:	d01b      	beq.n	8010890 <tcp_shutdown+0x44>
  if (shut_rx) {
 8010858:	b189      	cbz	r1, 801087e <tcp_shutdown+0x32>
    pcb->flags |= TF_RXCLOSED;
 801085a:	7e83      	ldrb	r3, [r0, #26]
 801085c:	f043 0310 	orr.w	r3, r3, #16
 8010860:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8010862:	b124      	cbz	r4, 801086e <tcp_shutdown+0x22>
      return tcp_close_shutdown(pcb, 1);
 8010864:	2101      	movs	r1, #1
}
 8010866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801086a:	f7ff bea7 	b.w	80105bc <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 801086e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8010870:	b908      	cbnz	r0, 8010876 <tcp_shutdown+0x2a>
  return ERR_OK;
 8010872:	2000      	movs	r0, #0
}
 8010874:	bd38      	pop	{r3, r4, r5, pc}
      pbuf_free(pcb->refused_data);
 8010876:	f7fe feb3 	bl	800f5e0 <pbuf_free>
      pcb->refused_data = NULL;
 801087a:	676c      	str	r4, [r5, #116]	; 0x74
 801087c:	e7f9      	b.n	8010872 <tcp_shutdown+0x26>
  if (shut_tx) {
 801087e:	2c00      	cmp	r4, #0
 8010880:	d0f7      	beq.n	8010872 <tcp_shutdown+0x26>
 8010882:	2a07      	cmp	r2, #7
 8010884:	d804      	bhi.n	8010890 <tcp_shutdown+0x44>
 8010886:	2301      	movs	r3, #1
 8010888:	4093      	lsls	r3, r2
 801088a:	f013 0f98 	tst.w	r3, #152	; 0x98
 801088e:	d1ea      	bne.n	8010866 <tcp_shutdown+0x1a>
    return ERR_CONN;
 8010890:	f06f 000a 	mvn.w	r0, #10
 8010894:	e7ee      	b.n	8010874 <tcp_shutdown+0x28>
	...

08010898 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010898:	7d03      	ldrb	r3, [r0, #20]
{
 801089a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801089e:	2b01      	cmp	r3, #1
{
 80108a0:	4604      	mov	r4, r0
 80108a2:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80108a4:	d106      	bne.n	80108b4 <tcp_abandon+0x1c>
 80108a6:	4b30      	ldr	r3, [pc, #192]	; (8010968 <tcp_abandon+0xd0>)
 80108a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80108ac:	492f      	ldr	r1, [pc, #188]	; (801096c <tcp_abandon+0xd4>)
 80108ae:	4830      	ldr	r0, [pc, #192]	; (8010970 <tcp_abandon+0xd8>)
 80108b0:	f005 ffea 	bl	8016888 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80108b4:	7d23      	ldrb	r3, [r4, #20]
 80108b6:	2b0a      	cmp	r3, #10
 80108b8:	d10a      	bne.n	80108d0 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80108ba:	4621      	mov	r1, r4
 80108bc:	482d      	ldr	r0, [pc, #180]	; (8010974 <tcp_abandon+0xdc>)
 80108be:	f7ff fe2d 	bl	801051c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80108c2:	4621      	mov	r1, r4
 80108c4:	2001      	movs	r0, #1
}
 80108c6:	b002      	add	sp, #8
 80108c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80108cc:	f7fe bcca 	b.w	800f264 <memp_free>
    seqno = pcb->snd_nxt;
 80108d0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80108d4:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80108d8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80108dc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80108e0:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80108e2:	b99b      	cbnz	r3, 801090c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80108e4:	b13d      	cbz	r5, 80108f6 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80108e6:	4a24      	ldr	r2, [pc, #144]	; (8010978 <tcp_abandon+0xe0>)
 80108e8:	6813      	ldr	r3, [r2, #0]
 80108ea:	42a3      	cmp	r3, r4
 80108ec:	d106      	bne.n	80108fc <tcp_abandon+0x64>
 80108ee:	68e3      	ldr	r3, [r4, #12]
 80108f0:	6013      	str	r3, [r2, #0]
 80108f2:	2500      	movs	r5, #0
 80108f4:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80108f6:	462e      	mov	r6, r5
 80108f8:	e00f      	b.n	801091a <tcp_abandon+0x82>
 80108fa:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d0f8      	beq.n	80108f2 <tcp_abandon+0x5a>
 8010900:	68da      	ldr	r2, [r3, #12]
 8010902:	42a2      	cmp	r2, r4
 8010904:	d1f9      	bne.n	80108fa <tcp_abandon+0x62>
 8010906:	68e2      	ldr	r2, [r4, #12]
 8010908:	60da      	str	r2, [r3, #12]
 801090a:	e7f2      	b.n	80108f2 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801090c:	4621      	mov	r1, r4
 801090e:	481b      	ldr	r0, [pc, #108]	; (801097c <tcp_abandon+0xe4>)
 8010910:	f7ff fe04 	bl	801051c <tcp_pcb_remove>
 8010914:	2201      	movs	r2, #1
 8010916:	4b1a      	ldr	r3, [pc, #104]	; (8010980 <tcp_abandon+0xe8>)
 8010918:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801091a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801091c:	b108      	cbz	r0, 8010922 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 801091e:	f7ff fb75 	bl	801000c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010922:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8010924:	b108      	cbz	r0, 801092a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8010926:	f7ff fb71 	bl	801000c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801092a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801092c:	b108      	cbz	r0, 8010932 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 801092e:	f7ff fb6d 	bl	801000c <tcp_segs_free>
    if (send_rst) {
 8010932:	b146      	cbz	r6, 8010946 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010934:	8b23      	ldrh	r3, [r4, #24]
 8010936:	4622      	mov	r2, r4
 8010938:	e9cd 5300 	strd	r5, r3, [sp]
 801093c:	4651      	mov	r1, sl
 801093e:	1d23      	adds	r3, r4, #4
 8010940:	4648      	mov	r0, r9
 8010942:	f002 f9fb 	bl	8012d3c <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8010946:	4621      	mov	r1, r4
 8010948:	2001      	movs	r0, #1
 801094a:	f7fe fc8b 	bl	800f264 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801094e:	b13f      	cbz	r7, 8010960 <tcp_abandon+0xc8>
 8010950:	f06f 010c 	mvn.w	r1, #12
 8010954:	4640      	mov	r0, r8
 8010956:	463b      	mov	r3, r7
}
 8010958:	b002      	add	sp, #8
 801095a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801095e:	4718      	bx	r3
}
 8010960:	b002      	add	sp, #8
 8010962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010966:	bf00      	nop
 8010968:	0802133a 	.word	0x0802133a
 801096c:	080212bb 	.word	0x080212bb
 8010970:	08018495 	.word	0x08018495
 8010974:	2000d998 	.word	0x2000d998
 8010978:	2000d994 	.word	0x2000d994
 801097c:	2000d988 	.word	0x2000d988
 8010980:	2000d984 	.word	0x2000d984

08010984 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8010984:	2101      	movs	r1, #1
 8010986:	f7ff bf87 	b.w	8010898 <tcp_abandon>

0801098a <tcp_accept_null>:
{
 801098a:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 801098c:	4608      	mov	r0, r1
 801098e:	f7ff fff9 	bl	8010984 <tcp_abort>
}
 8010992:	f06f 000c 	mvn.w	r0, #12
 8010996:	bd08      	pop	{r3, pc}

08010998 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 801099c:	b901      	cbnz	r1, 80109a0 <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 801099e:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109a0:	680a      	ldr	r2, [r1, #0]
 80109a2:	6823      	ldr	r3, [r4, #0]
 80109a4:	68cd      	ldr	r5, [r1, #12]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d102      	bne.n	80109b0 <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80109aa:	4608      	mov	r0, r1
 80109ac:	f7ff ffea 	bl	8010984 <tcp_abort>
{
 80109b0:	4629      	mov	r1, r5
 80109b2:	e7f3      	b.n	801099c <tcp_netif_ip_addr_changed_pcblist+0x4>

080109b4 <tcp_kill_state>:
{
 80109b4:	b430      	push	{r4, r5}
  inactivity = 0;
 80109b6:	2400      	movs	r4, #0
  inactive = NULL;
 80109b8:	4622      	mov	r2, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109ba:	4b0b      	ldr	r3, [pc, #44]	; (80109e8 <tcp_kill_state+0x34>)
 80109bc:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109be:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <tcp_kill_state+0x38>)
 80109c0:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109c2:	b921      	cbnz	r1, 80109ce <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 80109c4:	b172      	cbz	r2, 80109e4 <tcp_kill_state+0x30>
}
 80109c6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7ff bf65 	b.w	8010898 <tcp_abandon>
    if (pcb->state == state) {
 80109ce:	7d0b      	ldrb	r3, [r1, #20]
 80109d0:	4283      	cmp	r3, r0
 80109d2:	d105      	bne.n	80109e0 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109d4:	6a0b      	ldr	r3, [r1, #32]
 80109d6:	1aeb      	subs	r3, r5, r3
 80109d8:	42a3      	cmp	r3, r4
 80109da:	bf24      	itt	cs
 80109dc:	461c      	movcs	r4, r3
 80109de:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109e0:	68c9      	ldr	r1, [r1, #12]
 80109e2:	e7ee      	b.n	80109c2 <tcp_kill_state+0xe>
}
 80109e4:	bc30      	pop	{r4, r5}
 80109e6:	4770      	bx	lr
 80109e8:	2000d988 	.word	0x2000d988
 80109ec:	2000d98c 	.word	0x2000d98c

080109f0 <tcp_alloc>:
{
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80109f4:	2001      	movs	r0, #1
 80109f6:	f7fe fc19 	bl	800f22c <memp_malloc>
 80109fa:	4c39      	ldr	r4, [pc, #228]	; (8010ae0 <tcp_alloc+0xf0>)
  if (pcb == NULL) {
 80109fc:	4603      	mov	r3, r0
 80109fe:	bb90      	cbnz	r0, 8010a66 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a00:	4a38      	ldr	r2, [pc, #224]	; (8010ae4 <tcp_alloc+0xf4>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010a02:	6826      	ldr	r6, [r4, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a04:	6812      	ldr	r2, [r2, #0]
 8010a06:	2a00      	cmp	r2, #0
 8010a08:	d154      	bne.n	8010ab4 <tcp_alloc+0xc4>
  if (inactive != NULL) {
 8010a0a:	b113      	cbz	r3, 8010a12 <tcp_alloc+0x22>
    tcp_abort(inactive);
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7ff ffb9 	bl	8010984 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a12:	2001      	movs	r0, #1
 8010a14:	f7fe fc0a 	bl	800f22c <memp_malloc>
    if (pcb == NULL) {
 8010a18:	4603      	mov	r3, r0
 8010a1a:	bb20      	cbnz	r0, 8010a66 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8010a1c:	2009      	movs	r0, #9
 8010a1e:	f7ff ffc9 	bl	80109b4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a22:	2001      	movs	r0, #1
 8010a24:	f7fe fc02 	bl	800f22c <memp_malloc>
      if (pcb == NULL) {
 8010a28:	4603      	mov	r3, r0
 8010a2a:	b9e0      	cbnz	r0, 8010a66 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8010a2c:	2008      	movs	r0, #8
 8010a2e:	f7ff ffc1 	bl	80109b4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a32:	2001      	movs	r0, #1
 8010a34:	f7fe fbfa 	bl	800f22c <memp_malloc>
        if (pcb == NULL) {
 8010a38:	4603      	mov	r3, r0
 8010a3a:	b9a0      	cbnz	r0, 8010a66 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010a3c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8010a40:	bf0c      	ite	eq
 8010a42:	4628      	moveq	r0, r5
 8010a44:	207f      	movne	r0, #127	; 0x7f
  inactivity = 0;
 8010a46:	461e      	mov	r6, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a48:	4a27      	ldr	r2, [pc, #156]	; (8010ae8 <tcp_alloc+0xf8>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010a4a:	f8d4 c000 	ldr.w	ip, [r4]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a4e:	6812      	ldr	r2, [r2, #0]
 8010a50:	2a00      	cmp	r2, #0
 8010a52:	d137      	bne.n	8010ac4 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 8010a54:	b113      	cbz	r3, 8010a5c <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff ff94 	bl	8010984 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010a5c:	2001      	movs	r0, #1
 8010a5e:	f7fe fbe5 	bl	800f22c <memp_malloc>
  if (pcb != NULL) {
 8010a62:	4603      	mov	r3, r0
 8010a64:	b320      	cbz	r0, 8010ab0 <tcp_alloc+0xc0>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010a66:	2298      	movs	r2, #152	; 0x98
 8010a68:	2100      	movs	r1, #0
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f005 fe5e 	bl	801672c <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010a70:	491e      	ldr	r1, [pc, #120]	; (8010aec <tcp_alloc+0xfc>)
    pcb->snd_buf = TCP_SND_BUF;
 8010a72:	f44f 6286 	mov.w	r2, #1072	; 0x430
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010a76:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010a78:	21ff      	movs	r1, #255	; 0xff
 8010a7a:	7281      	strb	r1, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010a7c:	2106      	movs	r1, #6
 8010a7e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010a82:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 8010a84:	491a      	ldr	r1, [pc, #104]	; (8010af0 <tcp_alloc+0x100>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010a86:	4603      	mov	r3, r0
    pcb->rtime = -1;
 8010a88:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010a90:	6821      	ldr	r1, [r4, #0]
    pcb->snd_buf = TCP_SND_BUF;
 8010a92:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->tmr = tcp_ticks;
 8010a96:	6201      	str	r1, [r0, #32]
    pcb->ssthresh = TCP_SND_BUF;
 8010a98:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->last_timer = tcp_timer_ctr;
 8010a9c:	4915      	ldr	r1, [pc, #84]	; (8010af4 <tcp_alloc+0x104>)
    pcb->recv = tcp_recv_null;
 8010a9e:	4a16      	ldr	r2, [pc, #88]	; (8010af8 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 8010aa0:	7809      	ldrb	r1, [r1, #0]
    pcb->recv = tcp_recv_null;
 8010aa2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010aa6:	4a15      	ldr	r2, [pc, #84]	; (8010afc <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8010aa8:	7545      	strb	r5, [r0, #21]
    pcb->last_timer = tcp_timer_ctr;
 8010aaa:	7741      	strb	r1, [r0, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010aac:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010ab4:	6a11      	ldr	r1, [r2, #32]
 8010ab6:	1a71      	subs	r1, r6, r1
 8010ab8:	4281      	cmp	r1, r0
 8010aba:	bf24      	itt	cs
 8010abc:	4613      	movcs	r3, r2
 8010abe:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ac0:	68d2      	ldr	r2, [r2, #12]
 8010ac2:	e7a0      	b.n	8010a06 <tcp_alloc+0x16>
    if (pcb->prio <= mprio &&
 8010ac4:	7d57      	ldrb	r7, [r2, #21]
 8010ac6:	4287      	cmp	r7, r0
 8010ac8:	d807      	bhi.n	8010ada <tcp_alloc+0xea>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010aca:	6a11      	ldr	r1, [r2, #32]
 8010acc:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 8010ad0:	42b1      	cmp	r1, r6
 8010ad2:	bf22      	ittt	cs
 8010ad4:	4638      	movcs	r0, r7
 8010ad6:	460e      	movcs	r6, r1
 8010ad8:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ada:	68d2      	ldr	r2, [r2, #12]
 8010adc:	e7b8      	b.n	8010a50 <tcp_alloc+0x60>
 8010ade:	bf00      	nop
 8010ae0:	2000d98c 	.word	0x2000d98c
 8010ae4:	2000d998 	.word	0x2000d998
 8010ae8:	2000d988 	.word	0x2000d988
 8010aec:	08600860 	.word	0x08600860
 8010af0:	0218ffff 	.word	0x0218ffff
 8010af4:	20004faa 	.word	0x20004faa
 8010af8:	0801071d 	.word	0x0801071d
 8010afc:	006ddd00 	.word	0x006ddd00

08010b00 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010b00:	2040      	movs	r0, #64	; 0x40
 8010b02:	f7ff bf75 	b.w	80109f0 <tcp_alloc>
	...

08010b08 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8010b08:	4b03      	ldr	r3, [pc, #12]	; (8010b18 <tcp_next_iss+0x10>)
 8010b0a:	4a04      	ldr	r2, [pc, #16]	; (8010b1c <tcp_next_iss+0x14>)
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	6812      	ldr	r2, [r2, #0]
 8010b10:	4410      	add	r0, r2
 8010b12:	6018      	str	r0, [r3, #0]
}
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	20000094 	.word	0x20000094
 8010b1c:	2000d98c 	.word	0x2000d98c

08010b20 <tcp_eff_send_mss_impl>:
{
 8010b20:	b510      	push	{r4, lr}
 8010b22:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8010b24:	4608      	mov	r0, r1
 8010b26:	f004 fb4f 	bl	80151c8 <ip4_route>
    if (outif == NULL) {
 8010b2a:	b130      	cbz	r0, 8010b3a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8010b2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
  if (mtu != 0) {
 8010b2e:	b123      	cbz	r3, 8010b3a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8010b30:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	429c      	cmp	r4, r3
 8010b36:	bf28      	it	cs
 8010b38:	461c      	movcs	r4, r3
}
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	bd10      	pop	{r4, pc}
	...

08010b40 <tcp_connect>:
{
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	461d      	mov	r5, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010b44:	4604      	mov	r4, r0
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d068      	beq.n	8010c1c <tcp_connect+0xdc>
 8010b4a:	2900      	cmp	r1, #0
 8010b4c:	d066      	beq.n	8010c1c <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8010b4e:	7d03      	ldrb	r3, [r0, #20]
 8010b50:	b153      	cbz	r3, 8010b68 <tcp_connect+0x28>
 8010b52:	4b35      	ldr	r3, [pc, #212]	; (8010c28 <tcp_connect+0xe8>)
 8010b54:	f44f 725e 	mov.w	r2, #888	; 0x378
 8010b58:	4934      	ldr	r1, [pc, #208]	; (8010c2c <tcp_connect+0xec>)
 8010b5a:	4835      	ldr	r0, [pc, #212]	; (8010c30 <tcp_connect+0xf0>)
 8010b5c:	f005 fe94 	bl	8016888 <iprintf>
 8010b60:	f06f 0509 	mvn.w	r5, #9
}
 8010b64:	4628      	mov	r0, r5
 8010b66:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010b68:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;
 8010b6a:	8302      	strh	r2, [r0, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010b6c:	6043      	str	r3, [r0, #4]
  if (ip_addr_isany(&pcb->local_ip)) {
 8010b6e:	6803      	ldr	r3, [r0, #0]
 8010b70:	b933      	cbnz	r3, 8010b80 <tcp_connect+0x40>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8010b72:	3004      	adds	r0, #4
 8010b74:	f004 fb28 	bl	80151c8 <ip4_route>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d052      	beq.n	8010c22 <tcp_connect+0xe2>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b7c:	6843      	ldr	r3, [r0, #4]
 8010b7e:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8010b80:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8010b82:	2e00      	cmp	r6, #0
 8010b84:	d039      	beq.n	8010bfa <tcp_connect+0xba>
  iss = tcp_next_iss(pcb);
 8010b86:	4620      	mov	r0, r4
 8010b88:	f7ff ffbe 	bl	8010b08 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	4a29      	ldr	r2, [pc, #164]	; (8010c34 <tcp_connect+0xf4>)
  pcb->snd_nxt = iss;
 8010b90:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 8010b92:	3801      	subs	r0, #1
  pcb->rcv_nxt = 0;
 8010b94:	e9c4 3209 	strd	r3, r2, [r4, #36]	; 0x24
  pcb->lastack = iss - 1;
 8010b98:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_lbb = iss - 1;
 8010b9a:	e9c4 0015 	strd	r0, r0, [r4, #84]	; 0x54
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010b9e:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->mss = INITIAL_MSS;
 8010ba0:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->snd_wnd = TCP_WND;
 8010ba4:	f44f 6306 	mov.w	r3, #2144	; 0x860
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ba8:	1d21      	adds	r1, r4, #4
  pcb->snd_wnd = TCP_WND;
 8010baa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = INITIAL_MSS;
 8010bae:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010bb0:	f7ff ffb6 	bl	8010b20 <tcp_eff_send_mss_impl>
  pcb->cwnd = 1;
 8010bb4:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010bb6:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->connected = connected;
 8010bb8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  pcb->cwnd = 1;
 8010bbc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010bc0:	2102      	movs	r1, #2
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f001 fe5a 	bl	801287c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8010bc8:	4605      	mov	r5, r0
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	d1ca      	bne.n	8010b64 <tcp_connect+0x24>
    pcb->state = SYN_SENT;
 8010bce:	2302      	movs	r3, #2
 8010bd0:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8010bd2:	b12e      	cbz	r6, 8010be0 <tcp_connect+0xa0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010bd4:	4a18      	ldr	r2, [pc, #96]	; (8010c38 <tcp_connect+0xf8>)
 8010bd6:	6813      	ldr	r3, [r2, #0]
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	d117      	bne.n	8010c0c <tcp_connect+0xcc>
 8010bdc:	68e3      	ldr	r3, [r4, #12]
 8010bde:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8010be0:	4b16      	ldr	r3, [pc, #88]	; (8010c3c <tcp_connect+0xfc>)
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	601c      	str	r4, [r3, #0]
 8010be6:	60e2      	str	r2, [r4, #12]
 8010be8:	f002 fa46 	bl	8013078 <tcp_timer_needed>
 8010bec:	2201      	movs	r2, #1
 8010bee:	4b14      	ldr	r3, [pc, #80]	; (8010c40 <tcp_connect+0x100>)
    tcp_output(pcb);
 8010bf0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8010bf2:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8010bf4:	f001 ff2a 	bl	8012a4c <tcp_output>
 8010bf8:	e7b4      	b.n	8010b64 <tcp_connect+0x24>
    pcb->local_port = tcp_new_port();
 8010bfa:	f7ff f88d 	bl	800fd18 <tcp_new_port>
 8010bfe:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d1c0      	bne.n	8010b86 <tcp_connect+0x46>
      return ERR_BUF;
 8010c04:	f06f 0501 	mvn.w	r5, #1
 8010c08:	e7ac      	b.n	8010b64 <tcp_connect+0x24>
 8010c0a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d0e7      	beq.n	8010be0 <tcp_connect+0xa0>
 8010c10:	68da      	ldr	r2, [r3, #12]
 8010c12:	42a2      	cmp	r2, r4
 8010c14:	d1f9      	bne.n	8010c0a <tcp_connect+0xca>
 8010c16:	68e2      	ldr	r2, [r4, #12]
 8010c18:	60da      	str	r2, [r3, #12]
 8010c1a:	e7e1      	b.n	8010be0 <tcp_connect+0xa0>
    return ERR_VAL;
 8010c1c:	f06f 0505 	mvn.w	r5, #5
 8010c20:	e7a0      	b.n	8010b64 <tcp_connect+0x24>
      return ERR_RTE;
 8010c22:	f06f 0503 	mvn.w	r5, #3
 8010c26:	e79d      	b.n	8010b64 <tcp_connect+0x24>
 8010c28:	0802133a 	.word	0x0802133a
 8010c2c:	08021375 	.word	0x08021375
 8010c30:	08018495 	.word	0x08018495
 8010c34:	08600860 	.word	0x08600860
 8010c38:	2000d994 	.word	0x2000d994
 8010c3c:	2000d988 	.word	0x2000d988
 8010c40:	2000d984 	.word	0x2000d984

08010c44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8010c48:	4604      	mov	r4, r0
 8010c4a:	b180      	cbz	r0, 8010c6e <tcp_netif_ip_addr_changed+0x2a>
 8010c4c:	6803      	ldr	r3, [r0, #0]
 8010c4e:	b173      	cbz	r3, 8010c6e <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c50:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <tcp_netif_ip_addr_changed+0x40>)
 8010c52:	6819      	ldr	r1, [r3, #0]
 8010c54:	f7ff fea0 	bl	8010998 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c58:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <tcp_netif_ip_addr_changed+0x44>)
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	6819      	ldr	r1, [r3, #0]
 8010c5e:	f7ff fe9b 	bl	8010998 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c62:	b125      	cbz	r5, 8010c6e <tcp_netif_ip_addr_changed+0x2a>
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	b113      	cbz	r3, 8010c6e <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8010c68:	4b08      	ldr	r3, [pc, #32]	; (8010c8c <tcp_netif_ip_addr_changed+0x48>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	b903      	cbnz	r3, 8010c70 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c70:	6818      	ldr	r0, [r3, #0]
 8010c72:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8010c74:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c76:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c78:	bf04      	itt	eq
 8010c7a:	6829      	ldreq	r1, [r5, #0]
 8010c7c:	6019      	streq	r1, [r3, #0]
{
 8010c7e:	4613      	mov	r3, r2
 8010c80:	e7f4      	b.n	8010c6c <tcp_netif_ip_addr_changed+0x28>
 8010c82:	bf00      	nop
 8010c84:	2000d988 	.word	0x2000d988
 8010c88:	2000d994 	.word	0x2000d994
 8010c8c:	2000d990 	.word	0x2000d990

08010c90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c92:	68c3      	ldr	r3, [r0, #12]
{
 8010c94:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c96:	8998      	ldrh	r0, [r3, #12]
{
 8010c98:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c9a:	f7fd fbcb 	bl	800e434 <lwip_htons>
 8010c9e:	07c2      	lsls	r2, r0, #31
 8010ca0:	d414      	bmi.n	8010ccc <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010ca2:	4e18      	ldr	r6, [pc, #96]	; (8010d04 <tcp_oos_insert_segment+0x74>)
 8010ca4:	68e7      	ldr	r7, [r4, #12]
 8010ca6:	6830      	ldr	r0, [r6, #0]
 8010ca8:	892b      	ldrh	r3, [r5, #8]
 8010caa:	6879      	ldr	r1, [r7, #4]
 8010cac:	8922      	ldrh	r2, [r4, #8]
 8010cae:	4403      	add	r3, r0
 8010cb0:	440a      	add	r2, r1
 8010cb2:	1a9a      	subs	r2, r3, r2
    while (next &&
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	da0f      	bge.n	8010cd8 <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010cb8:	1a5b      	subs	r3, r3, r1
    if (next &&
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	dd0a      	ble.n	8010cd4 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010cbe:	1a09      	subs	r1, r1, r0
 8010cc0:	b289      	uxth	r1, r1
 8010cc2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010cc4:	6868      	ldr	r0, [r5, #4]
 8010cc6:	f7fe fdcf 	bl	800f868 <pbuf_realloc>
 8010cca:	e003      	b.n	8010cd4 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f7ff f99d 	bl	801000c <tcp_segs_free>
    next = NULL;
 8010cd2:	2400      	movs	r4, #0
    }
  }
  cseg->next = next;
 8010cd4:	602c      	str	r4, [r5, #0]
}
 8010cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010cd8:	89b8      	ldrh	r0, [r7, #12]
 8010cda:	f7fd fbab 	bl	800e434 <lwip_htons>
 8010cde:	07c3      	lsls	r3, r0, #31
 8010ce0:	d507      	bpl.n	8010cf2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010ce2:	68eb      	ldr	r3, [r5, #12]
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	899f      	ldrh	r7, [r3, #12]
 8010ce8:	f7fd fba4 	bl	800e434 <lwip_htons>
 8010cec:	68eb      	ldr	r3, [r5, #12]
 8010cee:	4338      	orrs	r0, r7
 8010cf0:	8198      	strh	r0, [r3, #12]
      next = next->next;
 8010cf2:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f7ff f97b 	bl	800fff0 <tcp_seg_free>
 8010cfa:	463c      	mov	r4, r7
    while (next &&
 8010cfc:	2f00      	cmp	r7, #0
 8010cfe:	d1d1      	bne.n	8010ca4 <tcp_oos_insert_segment+0x14>
 8010d00:	e7e8      	b.n	8010cd4 <tcp_oos_insert_segment+0x44>
 8010d02:	bf00      	nop
 8010d04:	20004fd0 	.word	0x20004fd0

08010d08 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010d08:	7d03      	ldrb	r3, [r0, #20]
{
 8010d0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010d0e:	2b03      	cmp	r3, #3
{
 8010d10:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010d12:	d806      	bhi.n	8010d22 <tcp_receive+0x1a>
 8010d14:	4b84      	ldr	r3, [pc, #528]	; (8010f28 <tcp_receive+0x220>)
 8010d16:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010d1a:	4984      	ldr	r1, [pc, #528]	; (8010f2c <tcp_receive+0x224>)
 8010d1c:	4884      	ldr	r0, [pc, #528]	; (8010f30 <tcp_receive+0x228>)
 8010d1e:	f005 fdb3 	bl	8016888 <iprintf>

  if (flags & TCP_ACK) {
 8010d22:	4b84      	ldr	r3, [pc, #528]	; (8010f34 <tcp_receive+0x22c>)
 8010d24:	4e84      	ldr	r6, [pc, #528]	; (8010f38 <tcp_receive+0x230>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f013 0f10 	tst.w	r3, #16
 8010d2c:	f000 8176 	beq.w	801101c <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d30:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 8010d34:	6831      	ldr	r1, [r6, #0]
 8010d36:	4d81      	ldr	r5, [pc, #516]	; (8010f3c <tcp_receive+0x234>)
 8010d38:	1a47      	subs	r7, r0, r1
 8010d3a:	2f00      	cmp	r7, #0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010d3c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8010d40:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010d42:	db0c      	blt.n	8010d5e <tcp_receive+0x56>
 8010d44:	4288      	cmp	r0, r1
 8010d46:	d103      	bne.n	8010d50 <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010d48:	ebac 0003 	sub.w	r0, ip, r3
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	db06      	blt.n	8010d5e <tcp_receive+0x56>
 8010d50:	459c      	cmp	ip, r3
 8010d52:	d11a      	bne.n	8010d8a <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010d54:	487a      	ldr	r0, [pc, #488]	; (8010f40 <tcp_receive+0x238>)
 8010d56:	6800      	ldr	r0, [r0, #0]
 8010d58:	89c0      	ldrh	r0, [r0, #14]
 8010d5a:	4290      	cmp	r0, r2
 8010d5c:	d915      	bls.n	8010d8a <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d5e:	4878      	ldr	r0, [pc, #480]	; (8010f40 <tcp_receive+0x238>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d60:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d64:	6800      	ldr	r0, [r0, #0]
 8010d66:	89c0      	ldrh	r0, [r0, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 8010d68:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d6c:	b287      	uxth	r7, r0
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d6e:	45be      	cmp	lr, r7
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d70:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d74:	bf38      	it	cc
 8010d76:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
 8010d7a:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8010d7e:	bb97      	cbnz	r7, 8010de6 <tcp_receive+0xde>
        if (pcb->persist_backoff == 0) {
 8010d80:	b919      	cbnz	r1, 8010d8a <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010d86:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010d8c:	4f6d      	ldr	r7, [pc, #436]	; (8010f44 <tcp_receive+0x23c>)
 8010d8e:	1a19      	subs	r1, r3, r0
 8010d90:	2900      	cmp	r1, #0
 8010d92:	dc37      	bgt.n	8010e04 <tcp_receive+0xfc>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d94:	496c      	ldr	r1, [pc, #432]	; (8010f48 <tcp_receive+0x240>)
 8010d96:	8809      	ldrh	r1, [r1, #0]
 8010d98:	bb81      	cbnz	r1, 8010dfc <tcp_receive+0xf4>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d9a:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
 8010d9e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010da0:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010da2:	4471      	add	r1, lr
 8010da4:	4291      	cmp	r1, r2
 8010da6:	d129      	bne.n	8010dfc <tcp_receive+0xf4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010da8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8010dac:	2a00      	cmp	r2, #0
 8010dae:	db25      	blt.n	8010dfc <tcp_receive+0xf4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010db0:	4298      	cmp	r0, r3
 8010db2:	d123      	bne.n	8010dfc <tcp_receive+0xf4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010db4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010db8:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 8010dba:	bf1c      	itt	ne
 8010dbc:	3301      	addne	r3, #1
 8010dbe:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010dc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d913      	bls.n	8010df2 <tcp_receive+0xea>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010dca:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010dce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010dd0:	4413      	add	r3, r2
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d201      	bcs.n	8010ddc <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 8010dd8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010ddc:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8010f28 <tcp_receive+0x220>
 8010de0:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8010f30 <tcp_receive+0x228>
 8010de4:	e10d      	b.n	8011002 <tcp_receive+0x2fa>
      } else if (pcb->persist_backoff > 0) {
 8010de6:	2900      	cmp	r1, #0
 8010de8:	d0cf      	beq.n	8010d8a <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 8010dea:	2100      	movs	r1, #0
 8010dec:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 8010df0:	e7cb      	b.n	8010d8a <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 8010df2:	d1f3      	bne.n	8010ddc <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 8010df4:	4620      	mov	r0, r4
 8010df6:	f002 f83e 	bl	8012e76 <tcp_rexmit_fast>
 8010dfa:	e7ef      	b.n	8010ddc <tcp_receive+0xd4>
        pcb->dupacks = 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e02:	e7eb      	b.n	8010ddc <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010e04:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8010e06:	1a9a      	subs	r2, r3, r2
 8010e08:	2a00      	cmp	r2, #0
 8010e0a:	f300 8089 	bgt.w	8010f20 <tcp_receive+0x218>
      if (pcb->flags & TF_INFR) {
 8010e0e:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010e10:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8010e14:	0751      	lsls	r1, r2, #29
      pcb->nrtx = 0;
 8010e16:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 8010e1a:	bf42      	ittt	mi
 8010e1c:	f022 0204 	bicmi.w	r2, r2, #4
 8010e20:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e22:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->lastack = ackno;
 8010e26:	6463      	str	r3, [r4, #68]	; 0x44
        pcb->cwnd = pcb->ssthresh;
 8010e28:	bf48      	it	mi
 8010e2a:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8010e2e:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010e30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 8010e32:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010e34:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      pcb->nrtx = 0;
 8010e38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010e3c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8010e40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 8010e44:	d90f      	bls.n	8010e66 <tcp_receive+0x15e>
        if (pcb->cwnd < pcb->ssthresh) {
 8010e46:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8010e4a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8010e4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8010e50:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010e52:	bf9c      	itt	ls
 8010e54:	435b      	mulls	r3, r3
 8010e56:	fb93 f3f2 	sdivls	r3, r3, r2
 8010e5a:	4413      	add	r3, r2
 8010e5c:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d201      	bcs.n	8010e66 <tcp_receive+0x15e>
            pcb->cwnd = new_cwnd;
 8010e62:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010e66:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8010f28 <tcp_receive+0x220>
 8010e6a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010f30 <tcp_receive+0x228>
 8010e6e:	e04a      	b.n	8010f06 <tcp_receive+0x1fe>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	6858      	ldr	r0, [r3, #4]
 8010e74:	f7fd fae1 	bl	800e43a <lwip_htonl>
 8010e78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010e7a:	4683      	mov	fp, r0
 8010e7c:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	8998      	ldrh	r0, [r3, #12]
 8010e84:	f7fd fad6 	bl	800e434 <lwip_htons>
 8010e88:	f010 0003 	ands.w	r0, r0, #3
 8010e8c:	bf18      	it	ne
 8010e8e:	2001      	movne	r0, #1
 8010e90:	682b      	ldr	r3, [r5, #0]
 8010e92:	eba8 0803 	sub.w	r8, r8, r3
 8010e96:	44d8      	add	r8, fp
 8010e98:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8010e9a:	f1b8 0f00 	cmp.w	r8, #0
 8010e9e:	dc35      	bgt.n	8010f0c <tcp_receive+0x204>
        next = pcb->unacked;
 8010ea0:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010ea4:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8010ea8:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010eac:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8010eb0:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010eb2:	f7fe fd49 	bl	800f948 <pbuf_clen>
 8010eb6:	4583      	cmp	fp, r0
 8010eb8:	d206      	bcs.n	8010ec8 <tcp_receive+0x1c0>
 8010eba:	464b      	mov	r3, r9
 8010ebc:	f240 429e 	movw	r2, #1182	; 0x49e
 8010ec0:	4922      	ldr	r1, [pc, #136]	; (8010f4c <tcp_receive+0x244>)
 8010ec2:	4650      	mov	r0, sl
 8010ec4:	f005 fce0 	bl	8016888 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010ec8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010ecc:	f7fe fd3c 	bl	800f948 <pbuf_clen>
 8010ed0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 8010ed4:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010ed6:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8010ed8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010edc:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8010ee0:	4413      	add	r3, r2
        tcp_seg_free(next);
 8010ee2:	4640      	mov	r0, r8
        recv_acked += next->len;
 8010ee4:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 8010ee6:	f7ff f883 	bl	800fff0 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8010eea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8010eee:	b153      	cbz	r3, 8010f06 <tcp_receive+0x1fe>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010ef0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010ef2:	b943      	cbnz	r3, 8010f06 <tcp_receive+0x1fe>
 8010ef4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010ef6:	b933      	cbnz	r3, 8010f06 <tcp_receive+0x1fe>
 8010ef8:	464b      	mov	r3, r9
 8010efa:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010efe:	4914      	ldr	r1, [pc, #80]	; (8010f50 <tcp_receive+0x248>)
 8010f00:	4650      	mov	r0, sl
 8010f02:	f005 fcc1 	bl	8016888 <iprintf>
      while (pcb->unacked != NULL &&
 8010f06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1b1      	bne.n	8010e70 <tcp_receive+0x168>
      if (pcb->unacked == NULL) {
 8010f0c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8010f0e:	2300      	movs	r3, #0
 8010f10:	b922      	cbnz	r2, 8010f1c <tcp_receive+0x214>
        pcb->rtime = -1;
 8010f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f16:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8010f18:	76e3      	strb	r3, [r4, #27]
 8010f1a:	e75f      	b.n	8010ddc <tcp_receive+0xd4>
        pcb->rtime = 0;
 8010f1c:	8623      	strh	r3, [r4, #48]	; 0x30
 8010f1e:	e7fb      	b.n	8010f18 <tcp_receive+0x210>
      tcp_send_empty_ack(pcb);
 8010f20:	4620      	mov	r0, r4
 8010f22:	f001 fd5e 	bl	80129e2 <tcp_send_empty_ack>
 8010f26:	e759      	b.n	8010ddc <tcp_receive+0xd4>
 8010f28:	08021824 	.word	0x08021824
 8010f2c:	08021856 	.word	0x08021856
 8010f30:	08018495 	.word	0x08018495
 8010f34:	20004fb0 	.word	0x20004fb0
 8010f38:	20004fd0 	.word	0x20004fd0
 8010f3c:	20004fac 	.word	0x20004fac
 8010f40:	20004fd8 	.word	0x20004fd8
 8010f44:	20004fc4 	.word	0x20004fc4
 8010f48:	20004fe6 	.word	0x20004fe6
 8010f4c:	0802186f 	.word	0x0802186f
 8010f50:	08021897 	.word	0x08021897
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010f54:	682a      	ldr	r2, [r5, #0]
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	9201      	str	r2, [sp, #4]
 8010f5a:	6858      	ldr	r0, [r3, #4]
 8010f5c:	f7fd fa6d 	bl	800e43a <lwip_htonl>
 8010f60:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010f62:	4683      	mov	fp, r0
 8010f64:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	8998      	ldrh	r0, [r3, #12]
 8010f6c:	f7fd fa62 	bl	800e434 <lwip_htons>
 8010f70:	f010 0003 	ands.w	r0, r0, #3
 8010f74:	bf18      	it	ne
 8010f76:	2001      	movne	r0, #1
 8010f78:	9a01      	ldr	r2, [sp, #4]
 8010f7a:	eba2 0808 	sub.w	r8, r2, r8
 8010f7e:	eba8 080b 	sub.w	r8, r8, fp
 8010f82:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8010f86:	f1b8 0f00 	cmp.w	r8, #0
 8010f8a:	db3d      	blt.n	8011008 <tcp_receive+0x300>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8010f90:	1a9b      	subs	r3, r3, r2
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	dc38      	bgt.n	8011008 <tcp_receive+0x300>
      next = pcb->unsent;
 8010f96:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8010f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f9e:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8010fa0:	b90b      	cbnz	r3, 8010fa6 <tcp_receive+0x29e>
        pcb->unsent_oversize = 0;
 8010fa2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010fa6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010faa:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8010fae:	f7fe fccb 	bl	800f948 <pbuf_clen>
 8010fb2:	4583      	cmp	fp, r0
 8010fb4:	d206      	bcs.n	8010fc4 <tcp_receive+0x2bc>
 8010fb6:	464b      	mov	r3, r9
 8010fb8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010fbc:	49b5      	ldr	r1, [pc, #724]	; (8011294 <tcp_receive+0x58c>)
 8010fbe:	4650      	mov	r0, sl
 8010fc0:	f005 fc62 	bl	8016888 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010fc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010fc8:	f7fe fcbe 	bl	800f948 <pbuf_clen>
 8010fcc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 8010fd0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010fd2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8010fd4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010fd8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8010fdc:	4413      	add	r3, r2
      tcp_seg_free(next);
 8010fde:	4640      	mov	r0, r8
      recv_acked += next->len;
 8010fe0:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 8010fe2:	f7ff f805 	bl	800fff0 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010fe6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8010fea:	b153      	cbz	r3, 8011002 <tcp_receive+0x2fa>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010fec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8010fee:	b943      	cbnz	r3, 8011002 <tcp_receive+0x2fa>
 8010ff0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010ff2:	b933      	cbnz	r3, 8011002 <tcp_receive+0x2fa>
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010ffa:	49a7      	ldr	r1, [pc, #668]	; (8011298 <tcp_receive+0x590>)
 8010ffc:	4650      	mov	r0, sl
 8010ffe:	f005 fc43 	bl	8016888 <iprintf>
    while (pcb->unsent != NULL &&
 8011002:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1a5      	bne.n	8010f54 <tcp_receive+0x24c>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8011008:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801100c:	883a      	ldrh	r2, [r7, #0]
 801100e:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011010:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8011012:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011016:	2a00      	cmp	r2, #0
 8011018:	f040 8118 	bne.w	801124c <tcp_receive+0x544>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801101c:	4f9f      	ldr	r7, [pc, #636]	; (801129c <tcp_receive+0x594>)
 801101e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011020:	8838      	ldrh	r0, [r7, #0]
 8011022:	6833      	ldr	r3, [r6, #0]
 8011024:	2800      	cmp	r0, #0
 8011026:	f000 831b 	beq.w	8011660 <tcp_receive+0x958>
 801102a:	7d21      	ldrb	r1, [r4, #20]
 801102c:	2906      	cmp	r1, #6
 801102e:	f200 8317 	bhi.w	8011660 <tcp_receive+0x958>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011032:	eba2 0a03 	sub.w	sl, r2, r3
 8011036:	f1ba 0f01 	cmp.w	sl, #1
 801103a:	f100 815a 	bmi.w	80112f2 <tcp_receive+0x5ea>
 801103e:	f1c3 0101 	rsb	r1, r3, #1
 8011042:	1a09      	subs	r1, r1, r0
 8011044:	4411      	add	r1, r2
 8011046:	2900      	cmp	r1, #0
 8011048:	f300 8153 	bgt.w	80112f2 <tcp_receive+0x5ea>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801104c:	4d94      	ldr	r5, [pc, #592]	; (80112a0 <tcp_receive+0x598>)
      off = pcb->rcv_nxt - seqno;
 801104e:	46d1      	mov	r9, sl
      struct pbuf *p = inseg.p;
 8011050:	f8d5 8004 	ldr.w	r8, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011054:	f1b8 0f00 	cmp.w	r8, #0
 8011058:	d106      	bne.n	8011068 <tcp_receive+0x360>
 801105a:	4b92      	ldr	r3, [pc, #584]	; (80112a4 <tcp_receive+0x59c>)
 801105c:	f240 523c 	movw	r2, #1340	; 0x53c
 8011060:	4991      	ldr	r1, [pc, #580]	; (80112a8 <tcp_receive+0x5a0>)
 8011062:	4892      	ldr	r0, [pc, #584]	; (80112ac <tcp_receive+0x5a4>)
 8011064:	f005 fc10 	bl	8016888 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8011068:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 801106c:	459a      	cmp	sl, r3
 801106e:	dd06      	ble.n	801107e <tcp_receive+0x376>
 8011070:	4b8c      	ldr	r3, [pc, #560]	; (80112a4 <tcp_receive+0x59c>)
 8011072:	f240 523d 	movw	r2, #1341	; 0x53d
 8011076:	498e      	ldr	r1, [pc, #568]	; (80112b0 <tcp_receive+0x5a8>)
 8011078:	488c      	ldr	r0, [pc, #560]	; (80112ac <tcp_receive+0x5a4>)
 801107a:	f005 fc05 	bl	8016888 <iprintf>
      if (inseg.p->len < off) {
 801107e:	6868      	ldr	r0, [r5, #4]
 8011080:	fa1f fb8a 	uxth.w	fp, sl
 8011084:	8943      	ldrh	r3, [r0, #10]
 8011086:	4553      	cmp	r3, sl
 8011088:	f280 8127 	bge.w	80112da <tcp_receive+0x5d2>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801108c:	8903      	ldrh	r3, [r0, #8]
 801108e:	4553      	cmp	r3, sl
 8011090:	da06      	bge.n	80110a0 <tcp_receive+0x398>
 8011092:	4b84      	ldr	r3, [pc, #528]	; (80112a4 <tcp_receive+0x59c>)
 8011094:	f240 523f 	movw	r2, #1343	; 0x53f
 8011098:	4986      	ldr	r1, [pc, #536]	; (80112b4 <tcp_receive+0x5ac>)
 801109a:	4884      	ldr	r0, [pc, #528]	; (80112ac <tcp_receive+0x5a4>)
 801109c:	f005 fbf4 	bl	8016888 <iprintf>
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80110a0:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80110a2:	686b      	ldr	r3, [r5, #4]
 80110a4:	8919      	ldrh	r1, [r3, #8]
 80110a6:	eba1 010b 	sub.w	r1, r1, fp
 80110aa:	b289      	uxth	r1, r1
        while (p->len < off) {
 80110ac:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80110b0:	454b      	cmp	r3, r9
 80110b2:	f2c0 8109 	blt.w	80112c8 <tcp_receive+0x5c0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80110b6:	f1c9 0100 	rsb	r1, r9, #0
 80110ba:	b209      	sxth	r1, r1
 80110bc:	4640      	mov	r0, r8
 80110be:	f7fe fa89 	bl	800f5d4 <pbuf_header>
 80110c2:	b130      	cbz	r0, 80110d2 <tcp_receive+0x3ca>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80110c4:	f240 524c 	movw	r2, #1356	; 0x54c
 80110c8:	4b76      	ldr	r3, [pc, #472]	; (80112a4 <tcp_receive+0x59c>)
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80110ca:	497b      	ldr	r1, [pc, #492]	; (80112b8 <tcp_receive+0x5b0>)
 80110cc:	4877      	ldr	r0, [pc, #476]	; (80112ac <tcp_receive+0x5a4>)
 80110ce:	f005 fbdb 	bl	8016888 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80110d2:	8929      	ldrh	r1, [r5, #8]
 80110d4:	6833      	ldr	r3, [r6, #0]
 80110d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80110d8:	440b      	add	r3, r1
 80110da:	1a9b      	subs	r3, r3, r2
 80110dc:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110de:	68eb      	ldr	r3, [r5, #12]
 80110e0:	6032      	str	r2, [r6, #0]
 80110e2:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110e4:	6831      	ldr	r1, [r6, #0]
 80110e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80110e8:	1a8b      	subs	r3, r1, r2
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f2c0 82b2 	blt.w	8011654 <tcp_receive+0x94c>
 80110f0:	1c4b      	adds	r3, r1, #1
 80110f2:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80110f4:	1a9b      	subs	r3, r3, r2
 80110f6:	1a1b      	subs	r3, r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f300 82ab 	bgt.w	8011654 <tcp_receive+0x94c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80110fe:	4291      	cmp	r1, r2
 8011100:	f040 81c7 	bne.w	8011492 <tcp_receive+0x78a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011104:	4d66      	ldr	r5, [pc, #408]	; (80112a0 <tcp_receive+0x598>)
 8011106:	68eb      	ldr	r3, [r5, #12]
 8011108:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801110c:	8998      	ldrh	r0, [r3, #12]
 801110e:	f7fd f991 	bl	800e434 <lwip_htons>
 8011112:	f010 0003 	ands.w	r0, r0, #3
 8011116:	bf18      	it	ne
 8011118:	2001      	movne	r0, #1

        if (tcplen > pcb->rcv_wnd) {
 801111a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801111c:	4440      	add	r0, r8
 801111e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8011120:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8011122:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8011124:	d242      	bcs.n	80111ac <tcp_receive+0x4a4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011126:	68eb      	ldr	r3, [r5, #12]
 8011128:	8998      	ldrh	r0, [r3, #12]
 801112a:	f7fd f983 	bl	800e434 <lwip_htons>
 801112e:	07c2      	lsls	r2, r0, #31
 8011130:	d510      	bpl.n	8011154 <tcp_receive+0x44c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011132:	68eb      	ldr	r3, [r5, #12]
 8011134:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8011138:	4640      	mov	r0, r8
 801113a:	f7fd f97b 	bl	800e434 <lwip_htons>
 801113e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8011142:	f7fd f977 	bl	800e434 <lwip_htons>
 8011146:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801114a:	68eb      	ldr	r3, [r5, #12]
 801114c:	ea40 0808 	orr.w	r8, r0, r8
 8011150:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011154:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011156:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011158:	68eb      	ldr	r3, [r5, #12]
 801115a:	8998      	ldrh	r0, [r3, #12]
 801115c:	f7fd f96a 	bl	800e434 <lwip_htons>
 8011160:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
 8011162:	bf48      	it	mi
 8011164:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011166:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8011168:	bf44      	itt	mi
 801116a:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 801116e:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8011170:	8929      	ldrh	r1, [r5, #8]
 8011172:	f7fe fb79 	bl	800f868 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011176:	68eb      	ldr	r3, [r5, #12]
 8011178:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801117c:	8998      	ldrh	r0, [r3, #12]
 801117e:	f7fd f959 	bl	800e434 <lwip_htons>
 8011182:	f010 0003 	ands.w	r0, r0, #3
 8011186:	bf18      	it	ne
 8011188:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801118a:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801118c:	4440      	add	r0, r8
 801118e:	b280      	uxth	r0, r0
 8011190:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011192:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011194:	4418      	add	r0, r3
 8011196:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011198:	4413      	add	r3, r2
 801119a:	4298      	cmp	r0, r3
 801119c:	d006      	beq.n	80111ac <tcp_receive+0x4a4>
 801119e:	4b41      	ldr	r3, [pc, #260]	; (80112a4 <tcp_receive+0x59c>)
 80111a0:	f240 527f 	movw	r2, #1407	; 0x57f
 80111a4:	4945      	ldr	r1, [pc, #276]	; (80112bc <tcp_receive+0x5b4>)
 80111a6:	4841      	ldr	r0, [pc, #260]	; (80112ac <tcp_receive+0x5a4>)
 80111a8:	f005 fb6e 	bl	8016888 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80111ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f000 80ae 	beq.w	8011310 <tcp_receive+0x608>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111b4:	68eb      	ldr	r3, [r5, #12]
 80111b6:	8998      	ldrh	r0, [r3, #12]
 80111b8:	f7fd f93c 	bl	800e434 <lwip_htons>
 80111bc:	07c0      	lsls	r0, r0, #31
 80111be:	f100 80a4 	bmi.w	801130a <tcp_receive+0x602>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 80111c2:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
 80111c6:	6830      	ldr	r0, [r6, #0]
 80111c8:	883b      	ldrh	r3, [r7, #0]
 80111ca:	4403      	add	r3, r0
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111cc:	f1b8 0f00 	cmp.w	r8, #0
 80111d0:	d039      	beq.n	8011246 <tcp_receive+0x53e>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111d2:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80111d6:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80111da:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80111de:	4411      	add	r1, r2
 80111e0:	1a59      	subs	r1, r3, r1
            while (next &&
 80111e2:	2900      	cmp	r1, #0
 80111e4:	f280 80c1 	bge.w	801136a <tcp_receive+0x662>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 80111e8:	1a9b      	subs	r3, r3, r2
            if (next &&
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dd2b      	ble.n	8011246 <tcp_receive+0x53e>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111ee:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80111f0:	1a12      	subs	r2, r2, r0
 80111f2:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111f4:	8998      	ldrh	r0, [r3, #12]
 80111f6:	f7fd f91d 	bl	800e434 <lwip_htons>
 80111fa:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
 80111fc:	bf48      	it	mi
 80111fe:	892b      	ldrhmi	r3, [r5, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011200:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 8011202:	bf44      	itt	mi
 8011204:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8011208:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801120a:	8929      	ldrh	r1, [r5, #8]
 801120c:	f7fe fb2c 	bl	800f868 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011210:	68eb      	ldr	r3, [r5, #12]
 8011212:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8011216:	8998      	ldrh	r0, [r3, #12]
 8011218:	f7fd f90c 	bl	800e434 <lwip_htons>
 801121c:	f010 0003 	ands.w	r0, r0, #3
 8011220:	bf18      	it	ne
 8011222:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011224:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8011226:	4448      	add	r0, r9
 8011228:	b280      	uxth	r0, r0
 801122a:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801122c:	4418      	add	r0, r3
 801122e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	4298      	cmp	r0, r3
 8011236:	d006      	beq.n	8011246 <tcp_receive+0x53e>
 8011238:	4b1a      	ldr	r3, [pc, #104]	; (80112a4 <tcp_receive+0x59c>)
 801123a:	f240 52af 	movw	r2, #1455	; 0x5af
 801123e:	4920      	ldr	r1, [pc, #128]	; (80112c0 <tcp_receive+0x5b8>)
 8011240:	481a      	ldr	r0, [pc, #104]	; (80112ac <tcp_receive+0x5a4>)
 8011242:	f005 fb21 	bl	8016888 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011246:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 801124a:	e061      	b.n	8011310 <tcp_receive+0x608>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801124c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801124e:	6829      	ldr	r1, [r5, #0]
 8011250:	1a5b      	subs	r3, r3, r1
 8011252:	2b00      	cmp	r3, #0
 8011254:	f6bf aee2 	bge.w	801101c <tcp_receive+0x314>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011258:	4b1a      	ldr	r3, [pc, #104]	; (80112c4 <tcp_receive+0x5bc>)
      m = m - (pcb->sa >> 3);
 801125a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801125e:	6819      	ldr	r1, [r3, #0]
 8011260:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8011262:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8011266:	b289      	uxth	r1, r1
 8011268:	b20b      	sxth	r3, r1
      if (m < 0) {
 801126a:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 801126c:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8011270:	4408      	add	r0, r1
        m = -m;
 8011272:	bfbc      	itt	lt
 8011274:	4249      	neglt	r1, r1
 8011276:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8011278:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 801127c:	4413      	add	r3, r2
      pcb->sa += m;
 801127e:	b200      	sxth	r0, r0
      pcb->sv += m;
 8011280:	b29b      	uxth	r3, r3
 8011282:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8011284:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8011288:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801128c:	2300      	movs	r3, #0
      pcb->sa += m;
 801128e:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8011290:	6363      	str	r3, [r4, #52]	; 0x34
 8011292:	e6c3      	b.n	801101c <tcp_receive+0x314>
 8011294:	0802186f 	.word	0x0802186f
 8011298:	08021897 	.word	0x08021897
 801129c:	20004fe6 	.word	0x20004fe6
 80112a0:	20004fb4 	.word	0x20004fb4
 80112a4:	08021824 	.word	0x08021824
 80112a8:	080218b7 	.word	0x080218b7
 80112ac:	08018495 	.word	0x08018495
 80112b0:	080218c7 	.word	0x080218c7
 80112b4:	080218d6 	.word	0x080218d6
 80112b8:	080218e6 	.word	0x080218e6
 80112bc:	080218f9 	.word	0x080218f9
 80112c0:	08021930 	.word	0x08021930
 80112c4:	2000d98c 	.word	0x2000d98c
          p->tot_len = new_tot_len;
 80112c8:	f8a8 1008 	strh.w	r1, [r8, #8]
          p->len = 0;
 80112cc:	f8a8 200a 	strh.w	r2, [r8, #10]
          off -= p->len;
 80112d0:	eba9 0903 	sub.w	r9, r9, r3
          p = p->next;
 80112d4:	f8d8 8000 	ldr.w	r8, [r8]
 80112d8:	e6e8      	b.n	80110ac <tcp_receive+0x3a4>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80112da:	f1cb 0100 	rsb	r1, fp, #0
 80112de:	b209      	sxth	r1, r1
 80112e0:	f7fe f978 	bl	800f5d4 <pbuf_header>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	f43f aef4 	beq.w	80110d2 <tcp_receive+0x3ca>
          LWIP_ASSERT("pbuf_header failed", 0);
 80112ea:	4b9b      	ldr	r3, [pc, #620]	; (8011558 <tcp_receive+0x850>)
 80112ec:	f240 5251 	movw	r2, #1361	; 0x551
 80112f0:	e6eb      	b.n	80110ca <tcp_receive+0x3c2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112f2:	1a9b      	subs	r3, r3, r2
 80112f4:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 80112f6:	bfbe      	ittt	lt
 80112f8:	7ea3      	ldrblt	r3, [r4, #26]
 80112fa:	f043 0302 	orrlt.w	r3, r3, #2
 80112fe:	76a3      	strblt	r3, [r4, #26]
 8011300:	e6f0      	b.n	80110e4 <tcp_receive+0x3dc>
              pcb->ooseq = pcb->ooseq->next;
 8011302:	6803      	ldr	r3, [r0, #0]
 8011304:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8011306:	f7fe fe73 	bl	800fff0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801130a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801130c:	2800      	cmp	r0, #0
 801130e:	d1f8      	bne.n	8011302 <tcp_receive+0x5fa>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011310:	883a      	ldrh	r2, [r7, #0]
 8011312:	6833      	ldr	r3, [r6, #0]
 8011314:	4413      	add	r3, r2
 8011316:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011318:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801131a:	4293      	cmp	r3, r2
 801131c:	d206      	bcs.n	801132c <tcp_receive+0x624>
 801131e:	4b8e      	ldr	r3, [pc, #568]	; (8011558 <tcp_receive+0x850>)
 8011320:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011324:	498d      	ldr	r1, [pc, #564]	; (801155c <tcp_receive+0x854>)
 8011326:	488e      	ldr	r0, [pc, #568]	; (8011560 <tcp_receive+0x858>)
 8011328:	f005 faae 	bl	8016888 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801132c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801132e:	883a      	ldrh	r2, [r7, #0]

        tcp_update_rcv_ann_wnd(pcb);
 8011330:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8011332:	1a9b      	subs	r3, r3, r2
 8011334:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8011336:	f7fe fdf1 	bl	800ff1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801133a:	686b      	ldr	r3, [r5, #4]
 801133c:	891a      	ldrh	r2, [r3, #8]
 801133e:	b11a      	cbz	r2, 8011348 <tcp_receive+0x640>
          recv_data = inseg.p;
 8011340:	4a88      	ldr	r2, [pc, #544]	; (8011564 <tcp_receive+0x85c>)
 8011342:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011344:	2300      	movs	r3, #0
 8011346:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011348:	68eb      	ldr	r3, [r5, #12]
 801134a:	8998      	ldrh	r0, [r3, #12]
 801134c:	f7fd f872 	bl	800e434 <lwip_htons>
 8011350:	07c5      	lsls	r5, r0, #31
 8011352:	d504      	bpl.n	801135e <tcp_receive+0x656>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011354:	4a84      	ldr	r2, [pc, #528]	; (8011568 <tcp_receive+0x860>)
 8011356:	7813      	ldrb	r3, [r2, #0]
 8011358:	f043 0320 	orr.w	r3, r3, #32
 801135c:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801135e:	4f7e      	ldr	r7, [pc, #504]	; (8011558 <tcp_receive+0x850>)
 8011360:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8011570 <tcp_receive+0x868>
 8011364:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8011560 <tcp_receive+0x858>
 8011368:	e07c      	b.n	8011464 <tcp_receive+0x75c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801136a:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 801136e:	f7fd f861 	bl	800e434 <lwip_htons>
 8011372:	07c1      	lsls	r1, r0, #31
 8011374:	d51b      	bpl.n	80113ae <tcp_receive+0x6a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011376:	68eb      	ldr	r3, [r5, #12]
 8011378:	8998      	ldrh	r0, [r3, #12]
 801137a:	f7fd f85b 	bl	800e434 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801137e:	0782      	lsls	r2, r0, #30
 8011380:	d415      	bmi.n	80113ae <tcp_receive+0x6a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011382:	68eb      	ldr	r3, [r5, #12]
 8011384:	2001      	movs	r0, #1
 8011386:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801138a:	f7fd f853 	bl	800e434 <lwip_htons>
 801138e:	68eb      	ldr	r3, [r5, #12]
 8011390:	ea49 0000 	orr.w	r0, r9, r0
 8011394:	b280      	uxth	r0, r0
 8011396:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011398:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801139c:	f7fd f84a 	bl	800e434 <lwip_htons>
 80113a0:	f010 0003 	ands.w	r0, r0, #3
 80113a4:	bf18      	it	ne
 80113a6:	2001      	movne	r0, #1
 80113a8:	4481      	add	r9, r0
 80113aa:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 80113ae:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 80113b2:	4640      	mov	r0, r8
 80113b4:	f7fe fe1c 	bl	800fff0 <tcp_seg_free>
              next = next->next;
 80113b8:	46c8      	mov	r8, r9
 80113ba:	e704      	b.n	80111c6 <tcp_receive+0x4be>
          seqno = pcb->ooseq->tcphdr->seqno;
 80113bc:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113be:	8990      	ldrh	r0, [r2, #12]
 80113c0:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80113c4:	f7fd f836 	bl	800e434 <lwip_htons>
 80113c8:	f010 0003 	ands.w	r0, r0, #3
 80113cc:	bf18      	it	ne
 80113ce:	2001      	movne	r0, #1
 80113d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113d2:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113d6:	449a      	add	sl, r3
 80113d8:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113da:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113dc:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113de:	8998      	ldrh	r0, [r3, #12]
 80113e0:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
 80113e4:	f7fd f826 	bl	800e434 <lwip_htons>
 80113e8:	f010 0003 	ands.w	r0, r0, #3
 80113ec:	bf18      	it	ne
 80113ee:	2001      	movne	r0, #1
 80113f0:	4458      	add	r0, fp
 80113f2:	4582      	cmp	sl, r0
 80113f4:	d206      	bcs.n	8011404 <tcp_receive+0x6fc>
 80113f6:	463b      	mov	r3, r7
 80113f8:	f240 52de 	movw	r2, #1502	; 0x5de
 80113fc:	4641      	mov	r1, r8
 80113fe:	4648      	mov	r0, r9
 8011400:	f005 fa42 	bl	8016888 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011404:	68eb      	ldr	r3, [r5, #12]
 8011406:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801140a:	8998      	ldrh	r0, [r3, #12]
 801140c:	f7fd f812 	bl	800e434 <lwip_htons>
 8011410:	f010 0003 	ands.w	r0, r0, #3
 8011414:	bf18      	it	ne
 8011416:	2001      	movne	r0, #1
 8011418:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801141a:	4450      	add	r0, sl
 801141c:	1a18      	subs	r0, r3, r0
 801141e:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011420:	4620      	mov	r0, r4
 8011422:	f7fe fd7b 	bl	800ff1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011426:	6869      	ldr	r1, [r5, #4]
 8011428:	890b      	ldrh	r3, [r1, #8]
 801142a:	b133      	cbz	r3, 801143a <tcp_receive+0x732>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801142c:	4b4d      	ldr	r3, [pc, #308]	; (8011564 <tcp_receive+0x85c>)
 801142e:	6818      	ldr	r0, [r3, #0]
 8011430:	b338      	cbz	r0, 8011482 <tcp_receive+0x77a>
              pbuf_cat(recv_data, cseg->p);
 8011432:	f7fe faad 	bl	800f990 <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 8011436:	2300      	movs	r3, #0
 8011438:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801143a:	68eb      	ldr	r3, [r5, #12]
 801143c:	8998      	ldrh	r0, [r3, #12]
 801143e:	f7fc fff9 	bl	800e434 <lwip_htons>
 8011442:	07c0      	lsls	r0, r0, #31
 8011444:	d509      	bpl.n	801145a <tcp_receive+0x752>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011446:	4a48      	ldr	r2, [pc, #288]	; (8011568 <tcp_receive+0x860>)
 8011448:	7813      	ldrb	r3, [r2, #0]
 801144a:	f043 0320 	orr.w	r3, r3, #32
 801144e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011450:	7d23      	ldrb	r3, [r4, #20]
 8011452:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8011454:	bf04      	itt	eq
 8011456:	2307      	moveq	r3, #7
 8011458:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801145a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801145c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801145e:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8011460:	f7fe fdc6 	bl	800fff0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011464:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8011466:	b125      	cbz	r5, 8011472 <tcp_receive+0x76a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011468:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801146a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801146c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801146e:	428b      	cmp	r3, r1
 8011470:	d0a4      	beq.n	80113bc <tcp_receive+0x6b4>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011472:	7ea3      	ldrb	r3, [r4, #26]
 8011474:	07d9      	lsls	r1, r3, #31
 8011476:	d506      	bpl.n	8011486 <tcp_receive+0x77e>
 8011478:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 801147c:	f043 0302 	orr.w	r3, r3, #2
 8011480:	e003      	b.n	801148a <tcp_receive+0x782>
              recv_data = cseg->p;
 8011482:	6019      	str	r1, [r3, #0]
 8011484:	e7d7      	b.n	8011436 <tcp_receive+0x72e>
        tcp_ack(pcb);
 8011486:	f043 0301 	orr.w	r3, r3, #1
 801148a:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 801148c:	b003      	add	sp, #12
 801148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8011492:	4620      	mov	r0, r4
 8011494:	f001 faa5 	bl	80129e2 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8011498:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801149a:	b925      	cbnz	r5, 80114a6 <tcp_receive+0x79e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801149c:	4833      	ldr	r0, [pc, #204]	; (801156c <tcp_receive+0x864>)
 801149e:	f7fe fdbf 	bl	8010020 <tcp_seg_copy>
 80114a2:	6720      	str	r0, [r4, #112]	; 0x70
 80114a4:	e7f2      	b.n	801148c <tcp_receive+0x784>
          prev = NULL;
 80114a6:	f04f 0800 	mov.w	r8, #0
            if (seqno == next->tcphdr->seqno) {
 80114aa:	6833      	ldr	r3, [r6, #0]
 80114ac:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80114b0:	f103 0c01 	add.w	ip, r3, #1
 80114b4:	68e8      	ldr	r0, [r5, #12]
 80114b6:	6842      	ldr	r2, [r0, #4]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d117      	bne.n	80114ec <tcp_receive+0x7e4>
              if (inseg.len > next->len) {
 80114bc:	482b      	ldr	r0, [pc, #172]	; (801156c <tcp_receive+0x864>)
 80114be:	892b      	ldrh	r3, [r5, #8]
 80114c0:	8902      	ldrh	r2, [r0, #8]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d9e2      	bls.n	801148c <tcp_receive+0x784>
                cseg = tcp_seg_copy(&inseg);
 80114c6:	f7fe fdab 	bl	8010020 <tcp_seg_copy>
                if (cseg != NULL) {
 80114ca:	2800      	cmp	r0, #0
 80114cc:	d0de      	beq.n	801148c <tcp_receive+0x784>
                  if (prev != NULL) {
 80114ce:	f1b8 0f00 	cmp.w	r8, #0
 80114d2:	d009      	beq.n	80114e8 <tcp_receive+0x7e0>
                    prev->next = cseg;
 80114d4:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80114d8:	4629      	mov	r1, r5
}
 80114da:	b003      	add	sp, #12
 80114dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 80114e0:	f7ff bbd6 	b.w	8010c90 <tcp_oos_insert_segment>
 80114e4:	460d      	mov	r5, r1
 80114e6:	e7e5      	b.n	80114b4 <tcp_receive+0x7ac>
                    pcb->ooseq = cseg;
 80114e8:	6720      	str	r0, [r4, #112]	; 0x70
 80114ea:	e7f5      	b.n	80114d8 <tcp_receive+0x7d0>
              if (prev == NULL) {
 80114ec:	f1b8 0f00 	cmp.w	r8, #0
 80114f0:	d109      	bne.n	8011506 <tcp_receive+0x7fe>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80114f2:	1a99      	subs	r1, r3, r2
 80114f4:	2900      	cmp	r1, #0
 80114f6:	da3d      	bge.n	8011574 <tcp_receive+0x86c>
                  cseg = tcp_seg_copy(&inseg);
 80114f8:	481c      	ldr	r0, [pc, #112]	; (801156c <tcp_receive+0x864>)
 80114fa:	f7fe fd91 	bl	8010020 <tcp_seg_copy>
                  if (cseg != NULL) {
 80114fe:	2800      	cmp	r0, #0
 8011500:	d0c4      	beq.n	801148c <tcp_receive+0x784>
                    pcb->ooseq = cseg;
 8011502:	6720      	str	r0, [r4, #112]	; 0x70
 8011504:	e7e8      	b.n	80114d8 <tcp_receive+0x7d0>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011506:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801150a:	6849      	ldr	r1, [r1, #4]
 801150c:	ebae 0101 	sub.w	r1, lr, r1
 8011510:	2900      	cmp	r1, #0
 8011512:	db2f      	blt.n	8011574 <tcp_receive+0x86c>
 8011514:	ebac 0102 	sub.w	r1, ip, r2
 8011518:	2900      	cmp	r1, #0
 801151a:	dc2b      	bgt.n	8011574 <tcp_receive+0x86c>
                  cseg = tcp_seg_copy(&inseg);
 801151c:	4813      	ldr	r0, [pc, #76]	; (801156c <tcp_receive+0x864>)
 801151e:	f7fe fd7f 	bl	8010020 <tcp_seg_copy>
                  if (cseg != NULL) {
 8011522:	4604      	mov	r4, r0
 8011524:	2800      	cmp	r0, #0
 8011526:	d0b1      	beq.n	801148c <tcp_receive+0x784>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011528:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801152c:	6831      	ldr	r1, [r6, #0]
 801152e:	685a      	ldr	r2, [r3, #4]
 8011530:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8011534:	4413      	add	r3, r2
 8011536:	1a5b      	subs	r3, r3, r1
 8011538:	2b00      	cmp	r3, #0
 801153a:	dd07      	ble.n	801154c <tcp_receive+0x844>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801153c:	1a89      	subs	r1, r1, r2
 801153e:	b289      	uxth	r1, r1
 8011540:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011544:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011548:	f7fe f98e 	bl	800f868 <pbuf_realloc>
                    prev->next = cseg;
 801154c:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8011550:	4629      	mov	r1, r5
 8011552:	4620      	mov	r0, r4
 8011554:	e7c1      	b.n	80114da <tcp_receive+0x7d2>
 8011556:	bf00      	nop
 8011558:	08021824 	.word	0x08021824
 801155c:	0802196b 	.word	0x0802196b
 8011560:	08018495 	.word	0x08018495
 8011564:	20004fc8 	.word	0x20004fc8
 8011568:	20004fcc 	.word	0x20004fcc
 801156c:	20004fb4 	.word	0x20004fb4
 8011570:	0802198a 	.word	0x0802198a
              if (next->next == NULL &&
 8011574:	6829      	ldr	r1, [r5, #0]
 8011576:	46a8      	mov	r8, r5
 8011578:	2900      	cmp	r1, #0
 801157a:	d1b3      	bne.n	80114e4 <tcp_receive+0x7dc>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801157c:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801157e:	2b00      	cmp	r3, #0
 8011580:	dd84      	ble.n	801148c <tcp_receive+0x784>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011582:	8980      	ldrh	r0, [r0, #12]
 8011584:	f7fc ff56 	bl	800e434 <lwip_htons>
 8011588:	07c2      	lsls	r2, r0, #31
 801158a:	f53f af7f 	bmi.w	801148c <tcp_receive+0x784>
                next->next = tcp_seg_copy(&inseg);
 801158e:	483a      	ldr	r0, [pc, #232]	; (8011678 <tcp_receive+0x970>)
 8011590:	f7fe fd46 	bl	8010020 <tcp_seg_copy>
 8011594:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8011596:	2800      	cmp	r0, #0
 8011598:	f43f af78 	beq.w	801148c <tcp_receive+0x784>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801159c:	68eb      	ldr	r3, [r5, #12]
 801159e:	6831      	ldr	r1, [r6, #0]
 80115a0:	685a      	ldr	r2, [r3, #4]
 80115a2:	892b      	ldrh	r3, [r5, #8]
 80115a4:	4413      	add	r3, r2
 80115a6:	1a5b      	subs	r3, r3, r1
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	dd05      	ble.n	80115b8 <tcp_receive+0x8b0>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80115ac:	1a89      	subs	r1, r1, r2
 80115ae:	b289      	uxth	r1, r1
 80115b0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80115b2:	6868      	ldr	r0, [r5, #4]
 80115b4:	f7fe f958 	bl	800f868 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80115b8:	6832      	ldr	r2, [r6, #0]
 80115ba:	883b      	ldrh	r3, [r7, #0]
 80115bc:	4413      	add	r3, r2
 80115be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80115c0:	1a9b      	subs	r3, r3, r2
 80115c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80115c4:	1a9b      	subs	r3, r3, r2
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f77f af60 	ble.w	801148c <tcp_receive+0x784>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80115cc:	682b      	ldr	r3, [r5, #0]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	8998      	ldrh	r0, [r3, #12]
 80115d2:	f7fc ff2f 	bl	800e434 <lwip_htons>
 80115d6:	07c3      	lsls	r3, r0, #31
 80115d8:	d512      	bpl.n	8011600 <tcp_receive+0x8f8>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115da:	682b      	ldr	r3, [r5, #0]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 80115e2:	4640      	mov	r0, r8
 80115e4:	f7fc ff26 	bl	800e434 <lwip_htons>
 80115e8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80115ec:	f7fc ff22 	bl	800e434 <lwip_htons>
 80115f0:	682b      	ldr	r3, [r5, #0]
 80115f2:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	ea40 0808 	orr.w	r8, r0, r8
 80115fc:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011600:	6832      	ldr	r2, [r6, #0]
 8011602:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8011604:	682b      	ldr	r3, [r5, #0]
 8011606:	1a89      	subs	r1, r1, r2
 8011608:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 801160a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801160c:	4411      	add	r1, r2
 801160e:	b289      	uxth	r1, r1
 8011610:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011612:	f7fe f929 	bl	800f868 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011616:	682b      	ldr	r3, [r5, #0]
 8011618:	891d      	ldrh	r5, [r3, #8]
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	8998      	ldrh	r0, [r3, #12]
 801161e:	f7fc ff09 	bl	800e434 <lwip_htons>
 8011622:	f010 0003 	ands.w	r0, r0, #3
 8011626:	bf18      	it	ne
 8011628:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801162a:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801162c:	4428      	add	r0, r5
 801162e:	b280      	uxth	r0, r0
 8011630:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011632:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011634:	4418      	add	r0, r3
 8011636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011638:	4413      	add	r3, r2
 801163a:	4298      	cmp	r0, r3
 801163c:	f43f af26 	beq.w	801148c <tcp_receive+0x784>
 8011640:	f240 627b 	movw	r2, #1659	; 0x67b
 8011644:	4b0d      	ldr	r3, [pc, #52]	; (801167c <tcp_receive+0x974>)
 8011646:	490e      	ldr	r1, [pc, #56]	; (8011680 <tcp_receive+0x978>)
 8011648:	480e      	ldr	r0, [pc, #56]	; (8011684 <tcp_receive+0x97c>)
}
 801164a:	b003      	add	sp, #12
 801164c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011650:	f005 b91a 	b.w	8016888 <iprintf>
      tcp_send_empty_ack(pcb);
 8011654:	4620      	mov	r0, r4
}
 8011656:	b003      	add	sp, #12
 8011658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 801165c:	f001 b9c1 	b.w	80129e2 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011660:	1a99      	subs	r1, r3, r2
 8011662:	2900      	cmp	r1, #0
 8011664:	db06      	blt.n	8011674 <tcp_receive+0x96c>
 8011666:	3301      	adds	r3, #1
 8011668:	1a9b      	subs	r3, r3, r2
 801166a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801166c:	1a9b      	subs	r3, r3, r2
 801166e:	2b00      	cmp	r3, #0
 8011670:	f77f af0c 	ble.w	801148c <tcp_receive+0x784>
      tcp_ack_now(pcb);
 8011674:	7ea3      	ldrb	r3, [r4, #26]
 8011676:	e701      	b.n	801147c <tcp_receive+0x774>
 8011678:	20004fb4 	.word	0x20004fb4
 801167c:	08021824 	.word	0x08021824
 8011680:	080218f9 	.word	0x080218f9
 8011684:	08018495 	.word	0x08018495

08011688 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011688:	4b0b      	ldr	r3, [pc, #44]	; (80116b8 <tcp_getoptbyte+0x30>)
 801168a:	490c      	ldr	r1, [pc, #48]	; (80116bc <tcp_getoptbyte+0x34>)
 801168c:	6818      	ldr	r0, [r3, #0]
 801168e:	880b      	ldrh	r3, [r1, #0]
{
 8011690:	b530      	push	{r4, r5, lr}
 8011692:	1c5a      	adds	r2, r3, #1
 8011694:	b292      	uxth	r2, r2
 8011696:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011698:	b118      	cbz	r0, 80116a2 <tcp_getoptbyte+0x1a>
 801169a:	4c09      	ldr	r4, [pc, #36]	; (80116c0 <tcp_getoptbyte+0x38>)
 801169c:	8824      	ldrh	r4, [r4, #0]
 801169e:	429c      	cmp	r4, r3
 80116a0:	d905      	bls.n	80116ae <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80116a2:	4908      	ldr	r1, [pc, #32]	; (80116c4 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 80116a4:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80116a6:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 80116a8:	440b      	add	r3, r1
 80116aa:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 80116ac:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80116ae:	1b1b      	subs	r3, r3, r4
    return tcphdr_opt2[idx];
 80116b0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80116b2:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 80116b4:	5cc0      	ldrb	r0, [r0, r3]
 80116b6:	e7f9      	b.n	80116ac <tcp_getoptbyte+0x24>
 80116b8:	20004fe0 	.word	0x20004fe0
 80116bc:	20004fd4 	.word	0x20004fd4
 80116c0:	20004fdc 	.word	0x20004fdc
 80116c4:	20004fd8 	.word	0x20004fd8

080116c8 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 80116c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80116ca:	4e1a      	ldr	r6, [pc, #104]	; (8011734 <tcp_parseopt.isra.1+0x6c>)
tcp_parseopt(struct tcp_pcb *pcb)
 80116cc:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 80116ce:	8833      	ldrh	r3, [r6, #0]
 80116d0:	b133      	cbz	r3, 80116e0 <tcp_parseopt.isra.1+0x18>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80116d2:	2300      	movs	r3, #0
 80116d4:	4d18      	ldr	r5, [pc, #96]	; (8011738 <tcp_parseopt.isra.1+0x70>)
 80116d6:	802b      	strh	r3, [r5, #0]
 80116d8:	8834      	ldrh	r4, [r6, #0]
 80116da:	882b      	ldrh	r3, [r5, #0]
 80116dc:	42a3      	cmp	r3, r4
 80116de:	d300      	bcc.n	80116e2 <tcp_parseopt.isra.1+0x1a>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 80116e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 80116e2:	f7ff ffd1 	bl	8011688 <tcp_getoptbyte>
      switch (opt) {
 80116e6:	2801      	cmp	r0, #1
 80116e8:	d0f6      	beq.n	80116d8 <tcp_parseopt.isra.1+0x10>
 80116ea:	d3f9      	bcc.n	80116e0 <tcp_parseopt.isra.1+0x18>
 80116ec:	2802      	cmp	r0, #2
 80116ee:	d117      	bne.n	8011720 <tcp_parseopt.isra.1+0x58>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80116f0:	f7ff ffca 	bl	8011688 <tcp_getoptbyte>
 80116f4:	2804      	cmp	r0, #4
 80116f6:	d1f3      	bne.n	80116e0 <tcp_parseopt.isra.1+0x18>
 80116f8:	882b      	ldrh	r3, [r5, #0]
 80116fa:	3301      	adds	r3, #1
 80116fc:	42a3      	cmp	r3, r4
 80116fe:	daef      	bge.n	80116e0 <tcp_parseopt.isra.1+0x18>
        mss = (tcp_getoptbyte() << 8);
 8011700:	f7ff ffc2 	bl	8011688 <tcp_getoptbyte>
 8011704:	0200      	lsls	r0, r0, #8
 8011706:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8011708:	f7ff ffbe 	bl	8011688 <tcp_getoptbyte>
 801170c:	4320      	orrs	r0, r4
 801170e:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011710:	1e43      	subs	r3, r0, #1
 8011712:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011716:	bf28      	it	cs
 8011718:	f44f 7006 	movcs.w	r0, #536	; 0x218
 801171c:	8038      	strh	r0, [r7, #0]
 801171e:	e7db      	b.n	80116d8 <tcp_parseopt.isra.1+0x10>
        data = tcp_getoptbyte();
 8011720:	f7ff ffb2 	bl	8011688 <tcp_getoptbyte>
        if (data < 2) {
 8011724:	2801      	cmp	r0, #1
 8011726:	d9db      	bls.n	80116e0 <tcp_parseopt.isra.1+0x18>
        tcp_optidx += data - 2;
 8011728:	882b      	ldrh	r3, [r5, #0]
 801172a:	3b02      	subs	r3, #2
 801172c:	4418      	add	r0, r3
 801172e:	8028      	strh	r0, [r5, #0]
 8011730:	e7d2      	b.n	80116d8 <tcp_parseopt.isra.1+0x10>
 8011732:	bf00      	nop
 8011734:	20004fe4 	.word	0x20004fe4
 8011738:	20004fd4 	.word	0x20004fd4

0801173c <tcp_input_delayed_close>:
{
 801173c:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 801173e:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <tcp_input_delayed_close+0x38>)
{
 8011740:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8011742:	7818      	ldrb	r0, [r3, #0]
 8011744:	f010 0010 	ands.w	r0, r0, #16
 8011748:	d012      	beq.n	8011770 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 801174a:	7ea3      	ldrb	r3, [r4, #26]
 801174c:	06db      	lsls	r3, r3, #27
 801174e:	d406      	bmi.n	801175e <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011750:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8011754:	b11b      	cbz	r3, 801175e <tcp_input_delayed_close+0x22>
 8011756:	f06f 010e 	mvn.w	r1, #14
 801175a:	6920      	ldr	r0, [r4, #16]
 801175c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801175e:	4621      	mov	r1, r4
 8011760:	4805      	ldr	r0, [pc, #20]	; (8011778 <tcp_input_delayed_close+0x3c>)
 8011762:	f7fe fedb 	bl	801051c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011766:	2001      	movs	r0, #1
 8011768:	4621      	mov	r1, r4
 801176a:	f7fd fd7b 	bl	800f264 <memp_free>
 801176e:	2001      	movs	r0, #1
}
 8011770:	bd10      	pop	{r4, pc}
 8011772:	bf00      	nop
 8011774:	20004fcc 	.word	0x20004fcc
 8011778:	2000d988 	.word	0x2000d988

0801177c <tcp_input>:
{
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8011780:	6843      	ldr	r3, [r0, #4]
 8011782:	4ea3      	ldr	r6, [pc, #652]	; (8011a10 <tcp_input+0x294>)
{
 8011784:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8011786:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8011788:	8943      	ldrh	r3, [r0, #10]
{
 801178a:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 801178c:	2b13      	cmp	r3, #19
 801178e:	f240 81b7 	bls.w	8011b00 <tcp_input+0x384>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011792:	4fa0      	ldr	r7, [pc, #640]	; (8011a14 <tcp_input+0x298>)
 8011794:	6839      	ldr	r1, [r7, #0]
 8011796:	6978      	ldr	r0, [r7, #20]
 8011798:	f003 fe99 	bl	80154ce <ip4_addr_isbroadcast_u32>
 801179c:	46b8      	mov	r8, r7
 801179e:	4604      	mov	r4, r0
 80117a0:	2800      	cmp	r0, #0
 80117a2:	f040 81ad 	bne.w	8011b00 <tcp_input+0x384>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80117ac:	2be0      	cmp	r3, #224	; 0xe0
 80117ae:	f000 81a7 	beq.w	8011b00 <tcp_input+0x384>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80117b2:	6833      	ldr	r3, [r6, #0]
 80117b4:	8998      	ldrh	r0, [r3, #12]
 80117b6:	f7fc fe3d 	bl	800e434 <lwip_htons>
 80117ba:	0a81      	lsrs	r1, r0, #10
 80117bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80117c0:	2913      	cmp	r1, #19
 80117c2:	f240 819d 	bls.w	8011b00 <tcp_input+0x384>
 80117c6:	892b      	ldrh	r3, [r5, #8]
 80117c8:	b289      	uxth	r1, r1
 80117ca:	428b      	cmp	r3, r1
 80117cc:	f0c0 8198 	bcc.w	8011b00 <tcp_input+0x384>
  if (p->len >= hdrlen_bytes) {
 80117d0:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80117d2:	4a91      	ldr	r2, [pc, #580]	; (8011a18 <tcp_input+0x29c>)
 80117d4:	f1a1 0314 	sub.w	r3, r1, #20
  tcphdr_opt2 = NULL;
 80117d8:	4f90      	ldr	r7, [pc, #576]	; (8011a1c <tcp_input+0x2a0>)
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80117da:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 80117dc:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 80117de:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80117e0:	8013      	strh	r3, [r2, #0]
 80117e2:	4614      	mov	r4, r2
 80117e4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8011a6c <tcp_input+0x2f0>
  if (p->len >= hdrlen_bytes) {
 80117e8:	d34a      	bcc.n	8011880 <tcp_input+0x104>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80117ea:	4249      	negs	r1, r1
 80117ec:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 80117ee:	f8a9 3000 	strh.w	r3, [r9]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80117f2:	f7fd feef 	bl	800f5d4 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80117f6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80117f8:	f8df a274 	ldr.w	sl, [pc, #628]	; 8011a70 <tcp_input+0x2f4>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80117fc:	8820      	ldrh	r0, [r4, #0]
 80117fe:	f7fc fe19 	bl	800e434 <lwip_htons>
 8011802:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011804:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011806:	4f86      	ldr	r7, [pc, #536]	; (8011a20 <tcp_input+0x2a4>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011808:	8860      	ldrh	r0, [r4, #2]
 801180a:	f7fc fe13 	bl	800e434 <lwip_htons>
 801180e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011810:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8011812:	f04f 0900 	mov.w	r9, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011816:	6860      	ldr	r0, [r4, #4]
 8011818:	f7fc fe0f 	bl	800e43a <lwip_htonl>
 801181c:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801181e:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011820:	f8ca 0000 	str.w	r0, [sl]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011824:	68a0      	ldr	r0, [r4, #8]
 8011826:	f7fc fe08 	bl	800e43a <lwip_htonl>
 801182a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801182c:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801182e:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011830:	89e0      	ldrh	r0, [r4, #14]
 8011832:	f7fc fdff 	bl	800e434 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8011836:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011838:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 801183a:	8998      	ldrh	r0, [r3, #12]
 801183c:	f7fc fdfa 	bl	800e434 <lwip_htons>
 8011840:	b2c0      	uxtb	r0, r0
 8011842:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8011846:	f010 0003 	ands.w	r0, r0, #3
 801184a:	bf18      	it	ne
 801184c:	2001      	movne	r0, #1
 801184e:	8929      	ldrh	r1, [r5, #8]
 8011850:	f8cd a00c 	str.w	sl, [sp, #12]
 8011854:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011856:	4973      	ldr	r1, [pc, #460]	; (8011a24 <tcp_input+0x2a8>)
 8011858:	46ba      	mov	sl, r7
 801185a:	460f      	mov	r7, r1
  flags = TCPH_FLAGS(tcphdr);
 801185c:	4a72      	ldr	r2, [pc, #456]	; (8011a28 <tcp_input+0x2ac>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801185e:	680c      	ldr	r4, [r1, #0]
  flags = TCPH_FLAGS(tcphdr);
 8011860:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8011862:	4b72      	ldr	r3, [pc, #456]	; (8011a2c <tcp_input+0x2b0>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011864:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8011a34 <tcp_input+0x2b8>
 8011868:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801186c:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801186e:	2c00      	cmp	r4, #0
 8011870:	d140      	bne.n	80118f4 <tcp_input+0x178>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011872:	4b6f      	ldr	r3, [pc, #444]	; (8011a30 <tcp_input+0x2b4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011874:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8011a34 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011878:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801187a:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8011a3c <tcp_input+0x2c0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801187e:	e146      	b.n	8011b0e <tcp_input+0x392>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b92b      	cbnz	r3, 8011890 <tcp_input+0x114>
 8011884:	4b6b      	ldr	r3, [pc, #428]	; (8011a34 <tcp_input+0x2b8>)
 8011886:	22b2      	movs	r2, #178	; 0xb2
 8011888:	496b      	ldr	r1, [pc, #428]	; (8011a38 <tcp_input+0x2bc>)
 801188a:	486c      	ldr	r0, [pc, #432]	; (8011a3c <tcp_input+0x2c0>)
 801188c:	f004 fffc 	bl	8016888 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8011890:	f06f 0113 	mvn.w	r1, #19
 8011894:	4628      	mov	r0, r5
 8011896:	f7fd fe9d 	bl	800f5d4 <pbuf_header>
    tcphdr_opt1len = p->len;
 801189a:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801189c:	8824      	ldrh	r4, [r4, #0]
    tcphdr_opt1len = p->len;
 801189e:	f8a9 1000 	strh.w	r1, [r9]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80118a2:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80118a4:	4249      	negs	r1, r1
 80118a6:	b209      	sxth	r1, r1
 80118a8:	4628      	mov	r0, r5
 80118aa:	f7fd fe93 	bl	800f5d4 <pbuf_header>
    if (opt2len > p->next->len) {
 80118ae:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80118b0:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 80118b2:	8943      	ldrh	r3, [r0, #10]
 80118b4:	42a3      	cmp	r3, r4
 80118b6:	f0c0 8123 	bcc.w	8011b00 <tcp_input+0x384>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80118ba:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 80118bc:	4261      	negs	r1, r4
 80118be:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80118c0:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 80118c2:	f7fd fe87 	bl	800f5d4 <pbuf_header>
    p->tot_len -= opt2len;
 80118c6:	892b      	ldrh	r3, [r5, #8]
 80118c8:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80118ca:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 80118cc:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80118ce:	b12b      	cbz	r3, 80118dc <tcp_input+0x160>
 80118d0:	4b58      	ldr	r3, [pc, #352]	; (8011a34 <tcp_input+0x2b8>)
 80118d2:	22cf      	movs	r2, #207	; 0xcf
 80118d4:	495a      	ldr	r1, [pc, #360]	; (8011a40 <tcp_input+0x2c4>)
 80118d6:	4859      	ldr	r0, [pc, #356]	; (8011a3c <tcp_input+0x2c0>)
 80118d8:	f004 ffd6 	bl	8016888 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80118dc:	682b      	ldr	r3, [r5, #0]
 80118de:	892a      	ldrh	r2, [r5, #8]
 80118e0:	891b      	ldrh	r3, [r3, #8]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d087      	beq.n	80117f6 <tcp_input+0x7a>
 80118e6:	4b53      	ldr	r3, [pc, #332]	; (8011a34 <tcp_input+0x2b8>)
 80118e8:	22d0      	movs	r2, #208	; 0xd0
 80118ea:	4956      	ldr	r1, [pc, #344]	; (8011a44 <tcp_input+0x2c8>)
 80118ec:	4853      	ldr	r0, [pc, #332]	; (8011a3c <tcp_input+0x2c0>)
 80118ee:	f004 ffcb 	bl	8016888 <iprintf>
 80118f2:	e780      	b.n	80117f6 <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80118f4:	7d23      	ldrb	r3, [r4, #20]
 80118f6:	b92b      	cbnz	r3, 8011904 <tcp_input+0x188>
 80118f8:	465b      	mov	r3, fp
 80118fa:	22e2      	movs	r2, #226	; 0xe2
 80118fc:	4952      	ldr	r1, [pc, #328]	; (8011a48 <tcp_input+0x2cc>)
 80118fe:	484f      	ldr	r0, [pc, #316]	; (8011a3c <tcp_input+0x2c0>)
 8011900:	f004 ffc2 	bl	8016888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011904:	7d23      	ldrb	r3, [r4, #20]
 8011906:	2b0a      	cmp	r3, #10
 8011908:	d105      	bne.n	8011916 <tcp_input+0x19a>
 801190a:	465b      	mov	r3, fp
 801190c:	22e3      	movs	r2, #227	; 0xe3
 801190e:	494f      	ldr	r1, [pc, #316]	; (8011a4c <tcp_input+0x2d0>)
 8011910:	484a      	ldr	r0, [pc, #296]	; (8011a3c <tcp_input+0x2c0>)
 8011912:	f004 ffb9 	bl	8016888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011916:	7d23      	ldrb	r3, [r4, #20]
 8011918:	2b01      	cmp	r3, #1
 801191a:	d105      	bne.n	8011928 <tcp_input+0x1ac>
 801191c:	465b      	mov	r3, fp
 801191e:	22e4      	movs	r2, #228	; 0xe4
 8011920:	494b      	ldr	r1, [pc, #300]	; (8011a50 <tcp_input+0x2d4>)
 8011922:	4846      	ldr	r0, [pc, #280]	; (8011a3c <tcp_input+0x2c0>)
 8011924:	f004 ffb0 	bl	8016888 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8011928:	6832      	ldr	r2, [r6, #0]
 801192a:	8b21      	ldrh	r1, [r4, #24]
 801192c:	8813      	ldrh	r3, [r2, #0]
 801192e:	4299      	cmp	r1, r3
 8011930:	68e3      	ldr	r3, [r4, #12]
 8011932:	d16a      	bne.n	8011a0a <tcp_input+0x28e>
 8011934:	8ae1      	ldrh	r1, [r4, #22]
 8011936:	8852      	ldrh	r2, [r2, #2]
 8011938:	4291      	cmp	r1, r2
 801193a:	d166      	bne.n	8011a0a <tcp_input+0x28e>
        pcb->local_port == tcphdr->dest &&
 801193c:	6861      	ldr	r1, [r4, #4]
 801193e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011942:	4291      	cmp	r1, r2
 8011944:	d161      	bne.n	8011a0a <tcp_input+0x28e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011946:	6821      	ldr	r1, [r4, #0]
 8011948:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801194c:	4291      	cmp	r1, r2
 801194e:	d15c      	bne.n	8011a0a <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011950:	42a3      	cmp	r3, r4
 8011952:	f040 8416 	bne.w	8012182 <tcp_input+0xa06>
 8011956:	4b37      	ldr	r3, [pc, #220]	; (8011a34 <tcp_input+0x2b8>)
 8011958:	22ec      	movs	r2, #236	; 0xec
 801195a:	493e      	ldr	r1, [pc, #248]	; (8011a54 <tcp_input+0x2d8>)
 801195c:	4837      	ldr	r0, [pc, #220]	; (8011a3c <tcp_input+0x2c0>)
 801195e:	f004 ff93 	bl	8016888 <iprintf>
      if (prev != NULL) {
 8011962:	f1b9 0f00 	cmp.w	r9, #0
 8011966:	d005      	beq.n	8011974 <tcp_input+0x1f8>
        prev->next = pcb->next;
 8011968:	68e3      	ldr	r3, [r4, #12]
 801196a:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 801196e:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 8011970:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 8011972:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011974:	68e3      	ldr	r3, [r4, #12]
 8011976:	42a3      	cmp	r3, r4
 8011978:	d105      	bne.n	8011986 <tcp_input+0x20a>
 801197a:	4b2e      	ldr	r3, [pc, #184]	; (8011a34 <tcp_input+0x2b8>)
 801197c:	22f4      	movs	r2, #244	; 0xf4
 801197e:	4936      	ldr	r1, [pc, #216]	; (8011a58 <tcp_input+0x2dc>)
 8011980:	482e      	ldr	r0, [pc, #184]	; (8011a3c <tcp_input+0x2c0>)
 8011982:	f004 ff81 	bl	8016888 <iprintf>
    inseg.next = NULL;
 8011986:	2200      	movs	r2, #0
 8011988:	4b34      	ldr	r3, [pc, #208]	; (8011a5c <tcp_input+0x2e0>)
    inseg.len = p->tot_len;
 801198a:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 801198c:	4834      	ldr	r0, [pc, #208]	; (8011a60 <tcp_input+0x2e4>)
    inseg.len = p->tot_len;
 801198e:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8011990:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8011992:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8011a74 <tcp_input+0x2f8>
    inseg.tcphdr = tcphdr;
 8011996:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 8011998:	4932      	ldr	r1, [pc, #200]	; (8011a64 <tcp_input+0x2e8>)
    inseg.next = NULL;
 801199a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801199c:	600a      	str	r2, [r1, #0]
    recv_flags = 0;
 801199e:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 80119a2:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 80119a4:	9a04      	ldr	r2, [sp, #16]
    inseg.p = p;
 80119a6:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 80119a8:	7812      	ldrb	r2, [r2, #0]
 80119aa:	4681      	mov	r9, r0
 80119ac:	f012 0f08 	tst.w	r2, #8
 80119b0:	468b      	mov	fp, r1
 80119b2:	9306      	str	r3, [sp, #24]
 80119b4:	d003      	beq.n	80119be <tcp_input+0x242>
      p->flags |= PBUF_FLAG_PUSH;
 80119b6:	7b6b      	ldrb	r3, [r5, #13]
 80119b8:	f043 0301 	orr.w	r3, r3, #1
 80119bc:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80119be:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f000 813e 	beq.w	8011c42 <tcp_input+0x4c6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80119c6:	4620      	mov	r0, r4
 80119c8:	f7fe feba 	bl	8010740 <tcp_process_refused_data>
 80119cc:	300d      	adds	r0, #13
 80119ce:	d008      	beq.n	80119e2 <tcp_input+0x266>
 80119d0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f000 8135 	beq.w	8011c42 <tcp_input+0x4c6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80119d8:	9b05      	ldr	r3, [sp, #20]
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f000 8130 	beq.w	8011c42 <tcp_input+0x4c6>
        if (pcb->rcv_ann_wnd == 0) {
 80119e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80119e4:	b913      	cbnz	r3, 80119ec <tcp_input+0x270>
          tcp_send_empty_ack(pcb);
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 fffb 	bl	80129e2 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 80119ec:	2400      	movs	r4, #0
 80119ee:	4b1e      	ldr	r3, [pc, #120]	; (8011a68 <tcp_input+0x2ec>)
    recv_data = NULL;
 80119f0:	f8cb 4000 	str.w	r4, [fp]
    tcp_input_pcb = NULL;
 80119f4:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 80119f6:	9b06      	ldr	r3, [sp, #24]
 80119f8:	6858      	ldr	r0, [r3, #4]
 80119fa:	b118      	cbz	r0, 8011a04 <tcp_input+0x288>
      pbuf_free(inseg.p);
 80119fc:	f7fd fdf0 	bl	800f5e0 <pbuf_free>
      inseg.p = NULL;
 8011a00:	9b06      	ldr	r3, [sp, #24]
 8011a02:	605c      	str	r4, [r3, #4]
}
 8011a04:	b009      	add	sp, #36	; 0x24
 8011a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a0a:	46a1      	mov	r9, r4
 8011a0c:	461c      	mov	r4, r3
 8011a0e:	e72e      	b.n	801186e <tcp_input+0xf2>
 8011a10:	20004fd8 	.word	0x20004fd8
 8011a14:	2000af94 	.word	0x2000af94
 8011a18:	20004fe4 	.word	0x20004fe4
 8011a1c:	20004fe0 	.word	0x20004fe0
 8011a20:	20004fac 	.word	0x20004fac
 8011a24:	2000d988 	.word	0x2000d988
 8011a28:	20004fb0 	.word	0x20004fb0
 8011a2c:	20004fe6 	.word	0x20004fe6
 8011a30:	2000d998 	.word	0x2000d998
 8011a34:	08021824 	.word	0x08021824
 8011a38:	0802166e 	.word	0x0802166e
 8011a3c:	08018495 	.word	0x08018495
 8011a40:	0802167e 	.word	0x0802167e
 8011a44:	0802168a 	.word	0x0802168a
 8011a48:	080216a9 	.word	0x080216a9
 8011a4c:	080216d0 	.word	0x080216d0
 8011a50:	080216fa 	.word	0x080216fa
 8011a54:	08021721 	.word	0x08021721
 8011a58:	0802174c 	.word	0x0802174c
 8011a5c:	20004fb4 	.word	0x20004fb4
 8011a60:	20004fc4 	.word	0x20004fc4
 8011a64:	20004fc8 	.word	0x20004fc8
 8011a68:	2000d99c 	.word	0x2000d99c
 8011a6c:	20004fdc 	.word	0x20004fdc
 8011a70:	20004fd0 	.word	0x20004fd0
 8011a74:	20004fcc 	.word	0x20004fcc
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a78:	7d23      	ldrb	r3, [r4, #20]
 8011a7a:	2b0a      	cmp	r3, #10
 8011a7c:	d005      	beq.n	8011a8a <tcp_input+0x30e>
 8011a7e:	464b      	mov	r3, r9
 8011a80:	22fe      	movs	r2, #254	; 0xfe
 8011a82:	49a6      	ldr	r1, [pc, #664]	; (8011d1c <tcp_input+0x5a0>)
 8011a84:	4658      	mov	r0, fp
 8011a86:	f004 feff 	bl	8016888 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011a8a:	6833      	ldr	r3, [r6, #0]
 8011a8c:	8b22      	ldrh	r2, [r4, #24]
 8011a8e:	8818      	ldrh	r0, [r3, #0]
 8011a90:	4290      	cmp	r0, r2
 8011a92:	d13b      	bne.n	8011b0c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8011a94:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8011a96:	885a      	ldrh	r2, [r3, #2]
 8011a98:	428a      	cmp	r2, r1
 8011a9a:	d137      	bne.n	8011b0c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8011a9c:	6861      	ldr	r1, [r4, #4]
 8011a9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011aa2:	4299      	cmp	r1, r3
 8011aa4:	d132      	bne.n	8011b0c <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011aa6:	6821      	ldr	r1, [r4, #0]
 8011aa8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011aac:	4299      	cmp	r1, r3
 8011aae:	d12d      	bne.n	8011b0c <tcp_input+0x390>
  if (flags & TCP_RST) {
 8011ab0:	9b04      	ldr	r3, [sp, #16]
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	075e      	lsls	r6, r3, #29
 8011ab6:	d423      	bmi.n	8011b00 <tcp_input+0x384>
 8011ab8:	9905      	ldr	r1, [sp, #20]
 8011aba:	880e      	ldrh	r6, [r1, #0]
  if (flags & TCP_SYN) {
 8011abc:	0799      	lsls	r1, r3, #30
 8011abe:	d512      	bpl.n	8011ae6 <tcp_input+0x36a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	6819      	ldr	r1, [r3, #0]
 8011ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ac6:	1acb      	subs	r3, r1, r3
 8011ac8:	d412      	bmi.n	8011af0 <tcp_input+0x374>
 8011aca:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8011acc:	1bdb      	subs	r3, r3, r7
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dc0e      	bgt.n	8011af0 <tcp_input+0x374>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ad2:	4b93      	ldr	r3, [pc, #588]	; (8011d20 <tcp_input+0x5a4>)
 8011ad4:	e9cd 2000 	strd	r2, r0, [sp]
 8011ad8:	4431      	add	r1, r6
 8011ada:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011adc:	f8da 0000 	ldr.w	r0, [sl]
 8011ae0:	f001 f92c 	bl	8012d3c <tcp_rst>
 8011ae4:	e00c      	b.n	8011b00 <tcp_input+0x384>
  } else if (flags & TCP_FIN) {
 8011ae6:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 8011ae8:	bf42      	ittt	mi
 8011aea:	4b8e      	ldrmi	r3, [pc, #568]	; (8011d24 <tcp_input+0x5a8>)
 8011aec:	681b      	ldrmi	r3, [r3, #0]
 8011aee:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8011af0:	b136      	cbz	r6, 8011b00 <tcp_input+0x384>
    tcp_output(pcb);
 8011af2:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8011af4:	7ea3      	ldrb	r3, [r4, #26]
 8011af6:	f043 0302 	orr.w	r3, r3, #2
 8011afa:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8011afc:	f000 ffa6 	bl	8012a4c <tcp_output>
  pbuf_free(p);
 8011b00:	4628      	mov	r0, r5
}
 8011b02:	b009      	add	sp, #36	; 0x24
 8011b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8011b08:	f7fd bd6a 	b.w	800f5e0 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b0c:	68e4      	ldr	r4, [r4, #12]
 8011b0e:	2c00      	cmp	r4, #0
 8011b10:	d1b2      	bne.n	8011a78 <tcp_input+0x2fc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b12:	4b85      	ldr	r3, [pc, #532]	; (8011d28 <tcp_input+0x5ac>)
      if (lpcb->local_port == tcphdr->dest) {
 8011b14:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b16:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011b18:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b1c:	4689      	mov	r9, r1
 8011b1e:	f1b9 0f00 	cmp.w	r9, #0
 8011b22:	d111      	bne.n	8011b48 <tcp_input+0x3cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011b24:	8990      	ldrh	r0, [r2, #12]
 8011b26:	f7fc fc85 	bl	800e434 <lwip_htons>
 8011b2a:	0743      	lsls	r3, r0, #29
 8011b2c:	d4e8      	bmi.n	8011b00 <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b2e:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b30:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b32:	8810      	ldrh	r0, [r2, #0]
 8011b34:	9a03      	ldr	r2, [sp, #12]
 8011b36:	6811      	ldr	r1, [r2, #0]
 8011b38:	881a      	ldrh	r2, [r3, #0]
 8011b3a:	4401      	add	r1, r0
 8011b3c:	9201      	str	r2, [sp, #4]
 8011b3e:	885b      	ldrh	r3, [r3, #2]
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	4b77      	ldr	r3, [pc, #476]	; (8011d20 <tcp_input+0x5a4>)
 8011b44:	1d1a      	adds	r2, r3, #4
 8011b46:	e7c9      	b.n	8011adc <tcp_input+0x360>
      if (lpcb->local_port == tcphdr->dest) {
 8011b48:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8011b4c:	8853      	ldrh	r3, [r2, #2]
 8011b4e:	4283      	cmp	r3, r0
 8011b50:	d107      	bne.n	8011b62 <tcp_input+0x3e6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011b52:	f8d9 3000 	ldr.w	r3, [r9]
 8011b56:	4563      	cmp	r3, ip
 8011b58:	f000 82f6 	beq.w	8012148 <tcp_input+0x9cc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f000 82f3 	beq.w	8012148 <tcp_input+0x9cc>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b62:	464c      	mov	r4, r9
 8011b64:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8011b68:	e7d9      	b.n	8011b1e <tcp_input+0x3a2>
  } else if (flags & TCP_SYN) {
 8011b6a:	0799      	lsls	r1, r3, #30
 8011b6c:	d5c8      	bpl.n	8011b00 <tcp_input+0x384>
    npcb = tcp_alloc(pcb->prio);
 8011b6e:	f899 0015 	ldrb.w	r0, [r9, #21]
 8011b72:	f7fe ff3d 	bl	80109f0 <tcp_alloc>
    if (npcb == NULL) {
 8011b76:	4682      	mov	sl, r0
 8011b78:	b950      	cbnz	r0, 8011b90 <tcp_input+0x414>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011b7a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d0be      	beq.n	8011b00 <tcp_input+0x384>
 8011b82:	4601      	mov	r1, r0
 8011b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011b8c:	4798      	blx	r3
 8011b8e:	e7b7      	b.n	8011b00 <tcp_input+0x384>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011b90:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8011b94:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011b96:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011b98:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011b9c:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8011b9e:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8011ba2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8011ba4:	7813      	ldrb	r3, [r2, #0]
 8011ba6:	7852      	ldrb	r2, [r2, #1]
 8011ba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011bac:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8011bb2:	9b03      	ldr	r3, [sp, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011bba:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011bbc:	f7fe ffa4 	bl	8010b08 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011bc0:	9b03      	ldr	r3, [sp, #12]
    npcb->snd_wl2 = iss;
 8011bc2:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011bc6:	681b      	ldr	r3, [r3, #0]
    npcb->snd_nxt = iss;
 8011bc8:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8011bd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->lastack = iss;
 8011bd6:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011bda:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8011bde:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 8011be2:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011be6:	f899 3008 	ldrb.w	r3, [r9, #8]
 8011bea:	f003 030c 	and.w	r3, r3, #12
 8011bee:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	f8c7 a000 	str.w	sl, [r7]
 8011bf8:	f8ca 300c 	str.w	r3, [sl, #12]
 8011bfc:	f001 fa3c 	bl	8013078 <tcp_timer_needed>
 8011c00:	2201      	movs	r2, #1
 8011c02:	4b4a      	ldr	r3, [pc, #296]	; (8011d2c <tcp_input+0x5b0>)
    tcp_parseopt(npcb);
 8011c04:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 8011c08:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011c0a:	f7ff fd5d 	bl	80116c8 <tcp_parseopt.isra.1>
    npcb->snd_wnd = tcphdr->wnd;
 8011c0e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c10:	f10a 0104 	add.w	r1, sl, #4
    npcb->snd_wnd = tcphdr->wnd;
 8011c14:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c16:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8011c1a:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011c1e:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c22:	f7fe ff7d 	bl	8010b20 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011c26:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c28:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011c2c:	4650      	mov	r0, sl
 8011c2e:	f000 fe25 	bl	801287c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8011c32:	b120      	cbz	r0, 8011c3e <tcp_input+0x4c2>
      tcp_abandon(npcb, 0);
 8011c34:	4621      	mov	r1, r4
 8011c36:	4650      	mov	r0, sl
 8011c38:	f7fe fe2e 	bl	8010898 <tcp_abandon>
 8011c3c:	e760      	b.n	8011b00 <tcp_input+0x384>
    tcp_output(npcb);
 8011c3e:	4650      	mov	r0, sl
 8011c40:	e75c      	b.n	8011afc <tcp_input+0x380>
    tcp_input_pcb = pcb;
 8011c42:	4b3b      	ldr	r3, [pc, #236]	; (8011d30 <tcp_input+0x5b4>)
 8011c44:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8011c46:	9b04      	ldr	r3, [sp, #16]
 8011c48:	781d      	ldrb	r5, [r3, #0]
 8011c4a:	076a      	lsls	r2, r5, #29
 8011c4c:	d53d      	bpl.n	8011cca <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 8011c4e:	7d21      	ldrb	r1, [r4, #20]
 8011c50:	2902      	cmp	r1, #2
 8011c52:	d123      	bne.n	8011c9c <tcp_input+0x520>
      if (ackno == pcb->snd_nxt) {
 8011c54:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011c56:	f8da 3000 	ldr.w	r3, [sl]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d109      	bne.n	8011c72 <tcp_input+0x4f6>
      recv_flags |= TF_RESET;
 8011c5e:	f898 3000 	ldrb.w	r3, [r8]
 8011c62:	f043 0308 	orr.w	r3, r3, #8
 8011c66:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8011c6a:	7ea3      	ldrb	r3, [r4, #26]
 8011c6c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8011c70:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8011c72:	f898 3000 	ldrb.w	r3, [r8]
 8011c76:	0719      	lsls	r1, r3, #28
 8011c78:	f140 81ff 	bpl.w	801207a <tcp_input+0x8fe>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011c7c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8011c80:	b11b      	cbz	r3, 8011c8a <tcp_input+0x50e>
 8011c82:	f06f 010d 	mvn.w	r1, #13
 8011c86:	6920      	ldr	r0, [r4, #16]
 8011c88:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4829      	ldr	r0, [pc, #164]	; (8011d34 <tcp_input+0x5b8>)
 8011c8e:	f7fe fc45 	bl	801051c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8011c92:	4621      	mov	r1, r4
 8011c94:	2001      	movs	r0, #1
 8011c96:	f7fd fae5 	bl	800f264 <memp_free>
 8011c9a:	e6a7      	b.n	80119ec <tcp_input+0x270>
      if (seqno == pcb->rcv_nxt) {
 8011c9c:	9b03      	ldr	r3, [sp, #12]
 8011c9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d007      	beq.n	8011cb6 <tcp_input+0x53a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ca6:	1a9b      	subs	r3, r3, r2
 8011ca8:	d4e3      	bmi.n	8011c72 <tcp_input+0x4f6>
 8011caa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8011cac:	1a9b      	subs	r3, r3, r2
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dcdf      	bgt.n	8011c72 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8011cb2:	7ea3      	ldrb	r3, [r4, #26]
 8011cb4:	e011      	b.n	8011cda <tcp_input+0x55e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011cb6:	2900      	cmp	r1, #0
 8011cb8:	d1d1      	bne.n	8011c5e <tcp_input+0x4e2>
 8011cba:	4b1f      	ldr	r3, [pc, #124]	; (8011d38 <tcp_input+0x5bc>)
 8011cbc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011cc0:	491e      	ldr	r1, [pc, #120]	; (8011d3c <tcp_input+0x5c0>)
 8011cc2:	481f      	ldr	r0, [pc, #124]	; (8011d40 <tcp_input+0x5c4>)
 8011cc4:	f004 fde0 	bl	8016888 <iprintf>
 8011cc8:	e7c9      	b.n	8011c5e <tcp_input+0x4e2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011cca:	f015 0202 	ands.w	r2, r5, #2
 8011cce:	7ea3      	ldrb	r3, [r4, #26]
 8011cd0:	d006      	beq.n	8011ce0 <tcp_input+0x564>
 8011cd2:	7d21      	ldrb	r1, [r4, #20]
 8011cd4:	3902      	subs	r1, #2
 8011cd6:	2901      	cmp	r1, #1
 8011cd8:	d902      	bls.n	8011ce0 <tcp_input+0x564>
      tcp_ack_now(pcb);
 8011cda:	f043 0302 	orr.w	r3, r3, #2
 8011cde:	e7c7      	b.n	8011c70 <tcp_input+0x4f4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011ce0:	06db      	lsls	r3, r3, #27
    pcb->tmr = tcp_ticks;
 8011ce2:	bf58      	it	pl
 8011ce4:	4b0f      	ldrpl	r3, [pc, #60]	; (8011d24 <tcp_input+0x5a8>)
  tcp_parseopt(pcb);
 8011ce6:	f104 0032 	add.w	r0, r4, #50	; 0x32
    pcb->tmr = tcp_ticks;
 8011cea:	bf58      	it	pl
 8011cec:	681b      	ldrpl	r3, [r3, #0]
 8011cee:	9207      	str	r2, [sp, #28]
 8011cf0:	bf58      	it	pl
 8011cf2:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8011cfa:	f7ff fce5 	bl	80116c8 <tcp_parseopt.isra.1>
  switch (pcb->state) {
 8011cfe:	7d23      	ldrb	r3, [r4, #20]
 8011d00:	9a07      	ldr	r2, [sp, #28]
 8011d02:	3b02      	subs	r3, #2
 8011d04:	2b07      	cmp	r3, #7
 8011d06:	d8b4      	bhi.n	8011c72 <tcp_input+0x4f6>
 8011d08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d0c:	009e001c 	.word	0x009e001c
 8011d10:	010c0108 	.word	0x010c0108
 8011d14:	01080156 	.word	0x01080156
 8011d18:	019e016f 	.word	0x019e016f
 8011d1c:	08021776 	.word	0x08021776
 8011d20:	2000afa4 	.word	0x2000afa4
 8011d24:	2000d98c 	.word	0x2000d98c
 8011d28:	2000d990 	.word	0x2000d990
 8011d2c:	2000d984 	.word	0x2000d984
 8011d30:	2000d99c 	.word	0x2000d99c
 8011d34:	2000d988 	.word	0x2000d988
 8011d38:	08021824 	.word	0x08021824
 8011d3c:	080217a3 	.word	0x080217a3
 8011d40:	08018495 	.word	0x08018495
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011d44:	f005 0312 	and.w	r3, r5, #18
 8011d48:	2b12      	cmp	r3, #18
 8011d4a:	d15f      	bne.n	8011e0c <tcp_input+0x690>
        && (ackno == pcb->lastack + 1)) {
 8011d4c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011d4e:	f8da 3000 	ldr.w	r3, [sl]
 8011d52:	3201      	adds	r2, #1
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d159      	bne.n	8011e0c <tcp_input+0x690>
      pcb->rcv_nxt = seqno + 1;
 8011d58:	9b03      	ldr	r3, [sp, #12]
      pcb->lastack = ackno;
 8011d5a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8011d5c:	681b      	ldr	r3, [r3, #0]
      pcb->snd_wnd = tcphdr->wnd;
 8011d5e:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8011d60:	1c59      	adds	r1, r3, #1
 8011d62:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011d64:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011d66:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8011d68:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011d6a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8011d6c:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8011d6e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8011d72:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 8011d76:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011d78:	18e1      	adds	r1, r4, r3
 8011d7a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8011d7c:	f7fe fed0 	bl	8010b20 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011d80:	f241 121c 	movw	r2, #4380	; 0x111c
 8011d84:	0043      	lsls	r3, r0, #1
 8011d86:	4293      	cmp	r3, r2
 8011d88:	bf38      	it	cc
 8011d8a:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011d8c:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011d8e:	0080      	lsls	r0, r0, #2
 8011d90:	4283      	cmp	r3, r0
 8011d92:	bf28      	it	cs
 8011d94:	4603      	movcs	r3, r0
 8011d96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011d9a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8011d9e:	b933      	cbnz	r3, 8011dae <tcp_input+0x632>
 8011da0:	4ba1      	ldr	r3, [pc, #644]	; (8012028 <tcp_input+0x8ac>)
 8011da2:	f240 321a 	movw	r2, #794	; 0x31a
 8011da6:	49a1      	ldr	r1, [pc, #644]	; (801202c <tcp_input+0x8b0>)
 8011da8:	48a1      	ldr	r0, [pc, #644]	; (8012030 <tcp_input+0x8b4>)
 8011daa:	f004 fd6d 	bl	8016888 <iprintf>
      --pcb->snd_queuelen;
 8011dae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8011db2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8011db4:	3b01      	subs	r3, #1
 8011db6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8011dba:	b9fd      	cbnz	r5, 8011dfc <tcp_input+0x680>
        rseg = pcb->unsent;
 8011dbc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8011dbe:	b935      	cbnz	r5, 8011dce <tcp_input+0x652>
 8011dc0:	4b99      	ldr	r3, [pc, #612]	; (8012028 <tcp_input+0x8ac>)
 8011dc2:	f240 3222 	movw	r2, #802	; 0x322
 8011dc6:	499b      	ldr	r1, [pc, #620]	; (8012034 <tcp_input+0x8b8>)
 8011dc8:	4899      	ldr	r0, [pc, #612]	; (8012030 <tcp_input+0x8b4>)
 8011dca:	f004 fd5d 	bl	8016888 <iprintf>
        pcb->unsent = rseg->next;
 8011dce:	682b      	ldr	r3, [r5, #0]
 8011dd0:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8011dd2:	4628      	mov	r0, r5
 8011dd4:	f7fe f90c 	bl	800fff0 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8011dd8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8011dda:	b993      	cbnz	r3, 8011e02 <tcp_input+0x686>
        pcb->rtime = -1;
 8011ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011de0:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011de2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	f43f af63 	beq.w	8011cb2 <tcp_input+0x536>
 8011dec:	2200      	movs	r2, #0
 8011dee:	4621      	mov	r1, r4
 8011df0:	6920      	ldr	r0, [r4, #16]
 8011df2:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8011df4:	300d      	adds	r0, #13
 8011df6:	f47f af5c 	bne.w	8011cb2 <tcp_input+0x536>
 8011dfa:	e5f7      	b.n	80119ec <tcp_input+0x270>
        pcb->unacked = rseg->next;
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	66e3      	str	r3, [r4, #108]	; 0x6c
 8011e00:	e7e7      	b.n	8011dd2 <tcp_input+0x656>
        pcb->rtime = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8011e06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e0a:	e7ea      	b.n	8011de2 <tcp_input+0x666>
    else if (flags & TCP_ACK) {
 8011e0c:	06e8      	lsls	r0, r5, #27
 8011e0e:	f57f af30 	bpl.w	8011c72 <tcp_input+0x4f6>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e12:	9a05      	ldr	r2, [sp, #20]
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e14:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e16:	8810      	ldrh	r0, [r2, #0]
 8011e18:	9a03      	ldr	r2, [sp, #12]
 8011e1a:	6811      	ldr	r1, [r2, #0]
 8011e1c:	881a      	ldrh	r2, [r3, #0]
 8011e1e:	4401      	add	r1, r0
 8011e20:	9201      	str	r2, [sp, #4]
 8011e22:	885b      	ldrh	r3, [r3, #2]
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	4b84      	ldr	r3, [pc, #528]	; (8012038 <tcp_input+0x8bc>)
 8011e28:	f8da 0000 	ldr.w	r0, [sl]
 8011e2c:	1d1a      	adds	r2, r3, #4
 8011e2e:	f000 ff85 	bl	8012d3c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011e32:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8011e36:	2b05      	cmp	r3, #5
 8011e38:	f63f af1b 	bhi.w	8011c72 <tcp_input+0x4f6>
        pcb->rtime = 0;
 8011e3c:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 8011e3e:	4620      	mov	r0, r4
        pcb->rtime = 0;
 8011e40:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8011e42:	f000 ffd5 	bl	8012df0 <tcp_rexmit_rto>
 8011e46:	e714      	b.n	8011c72 <tcp_input+0x4f6>
    if (flags & TCP_ACK) {
 8011e48:	06e9      	lsls	r1, r5, #27
 8011e4a:	d559      	bpl.n	8011f00 <tcp_input+0x784>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8011e4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e4e:	f8da 0000 	ldr.w	r0, [sl]
 8011e52:	43db      	mvns	r3, r3
 8011e54:	42c3      	cmn	r3, r0
 8011e56:	d444      	bmi.n	8011ee2 <tcp_input+0x766>
 8011e58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011e5a:	1ac3      	subs	r3, r0, r3
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	dc40      	bgt.n	8011ee2 <tcp_input+0x766>
        pcb->state = ESTABLISHED;
 8011e60:	2304      	movs	r3, #4
 8011e62:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8011e64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011e66:	b143      	cbz	r3, 8011e7a <tcp_input+0x6fe>
 8011e68:	699b      	ldr	r3, [r3, #24]
 8011e6a:	b933      	cbnz	r3, 8011e7a <tcp_input+0x6fe>
 8011e6c:	4b6e      	ldr	r3, [pc, #440]	; (8012028 <tcp_input+0x8ac>)
 8011e6e:	f240 3251 	movw	r2, #849	; 0x351
 8011e72:	4972      	ldr	r1, [pc, #456]	; (801203c <tcp_input+0x8c0>)
 8011e74:	486e      	ldr	r0, [pc, #440]	; (8012030 <tcp_input+0x8b4>)
 8011e76:	f004 fd07 	bl	8016888 <iprintf>
        if (pcb->listener == NULL) {
 8011e7a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011e7c:	b91b      	cbnz	r3, 8011e86 <tcp_input+0x70a>
            tcp_abort(pcb);
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f7fe fd80 	bl	8010984 <tcp_abort>
            goto aborted;
 8011e84:	e5b2      	b.n	80119ec <tcp_input+0x270>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011e86:	699b      	ldr	r3, [r3, #24]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0f8      	beq.n	8011e7e <tcp_input+0x702>
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	4621      	mov	r1, r4
 8011e90:	6920      	ldr	r0, [r4, #16]
 8011e92:	4798      	blx	r3
        if (err != ERR_OK) {
 8011e94:	b118      	cbz	r0, 8011e9e <tcp_input+0x722>
          if (err != ERR_ABRT) {
 8011e96:	300d      	adds	r0, #13
 8011e98:	f43f ada8 	beq.w	80119ec <tcp_input+0x270>
 8011e9c:	e7ef      	b.n	8011e7e <tcp_input+0x702>
        tcp_receive(pcb);
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	f7fe ff32 	bl	8010d08 <tcp_receive>
        if (recv_acked != 0) {
 8011ea4:	f8b9 3000 	ldrh.w	r3, [r9]
 8011ea8:	b113      	cbz	r3, 8011eb0 <tcp_input+0x734>
          recv_acked--;
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	f8a9 3000 	strh.w	r3, [r9]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011eb0:	f241 111c 	movw	r1, #4380	; 0x111c
 8011eb4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8011eb6:	0053      	lsls	r3, r2, #1
 8011eb8:	428b      	cmp	r3, r1
 8011eba:	bf38      	it	cc
 8011ebc:	460b      	movcc	r3, r1
 8011ebe:	0092      	lsls	r2, r2, #2
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	bf28      	it	cs
 8011ec4:	4613      	movcs	r3, r2
 8011ec6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011eca:	f898 3000 	ldrb.w	r3, [r8]
 8011ece:	069b      	lsls	r3, r3, #26
 8011ed0:	f57f aecf 	bpl.w	8011c72 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8011ed4:	7ea3      	ldrb	r3, [r4, #26]
 8011ed6:	f043 0302 	orr.w	r3, r3, #2
 8011eda:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8011edc:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 8011ede:	7523      	strb	r3, [r4, #20]
 8011ee0:	e6c7      	b.n	8011c72 <tcp_input+0x4f6>
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ee2:	9a05      	ldr	r2, [sp, #20]
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ee4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ee6:	8815      	ldrh	r5, [r2, #0]
 8011ee8:	9a03      	ldr	r2, [sp, #12]
 8011eea:	6811      	ldr	r1, [r2, #0]
 8011eec:	881a      	ldrh	r2, [r3, #0]
 8011eee:	4429      	add	r1, r5
 8011ef0:	9201      	str	r2, [sp, #4]
 8011ef2:	885b      	ldrh	r3, [r3, #2]
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	4b50      	ldr	r3, [pc, #320]	; (8012038 <tcp_input+0x8bc>)
 8011ef8:	1d1a      	adds	r2, r3, #4
 8011efa:	f000 ff1f 	bl	8012d3c <tcp_rst>
 8011efe:	e6b8      	b.n	8011c72 <tcp_input+0x4f6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011f00:	2a00      	cmp	r2, #0
 8011f02:	f43f aeb6 	beq.w	8011c72 <tcp_input+0x4f6>
 8011f06:	9a03      	ldr	r2, [sp, #12]
 8011f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f0a:	6812      	ldr	r2, [r2, #0]
 8011f0c:	3b01      	subs	r3, #1
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	f47f aeaf 	bne.w	8011c72 <tcp_input+0x4f6>
      tcp_rexmit(pcb);
 8011f14:	4620      	mov	r0, r4
 8011f16:	f000 ff85 	bl	8012e24 <tcp_rexmit>
 8011f1a:	e6aa      	b.n	8011c72 <tcp_input+0x4f6>
    tcp_receive(pcb);
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7fe fef3 	bl	8010d08 <tcp_receive>
 8011f22:	e7d2      	b.n	8011eca <tcp_input+0x74e>
    tcp_receive(pcb);
 8011f24:	4620      	mov	r0, r4
 8011f26:	f7fe feef 	bl	8010d08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8011f2a:	f898 3000 	ldrb.w	r3, [r8]
 8011f2e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f32:	9b04      	ldr	r3, [sp, #16]
 8011f34:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8011f36:	d030      	beq.n	8011f9a <tcp_input+0x81e>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f38:	f013 0f10 	tst.w	r3, #16
 8011f3c:	7ea3      	ldrb	r3, [r4, #26]
 8011f3e:	d027      	beq.n	8011f90 <tcp_input+0x814>
 8011f40:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011f42:	f8da 2000 	ldr.w	r2, [sl]
 8011f46:	4291      	cmp	r1, r2
 8011f48:	d122      	bne.n	8011f90 <tcp_input+0x814>
 8011f4a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8011f4c:	bb02      	cbnz	r2, 8011f90 <tcp_input+0x814>
        tcp_ack_now(pcb);
 8011f4e:	f043 0302 	orr.w	r3, r3, #2
 8011f52:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8011f54:	4620      	mov	r0, r4
 8011f56:	f7fe f8e1 	bl	801011c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	429c      	cmp	r4, r3
 8011f5e:	d109      	bne.n	8011f74 <tcp_input+0x7f8>
      TCP_RMV_ACTIVE(pcb);
 8011f60:	68e3      	ldr	r3, [r4, #12]
 8011f62:	603b      	str	r3, [r7, #0]
 8011f64:	e008      	b.n	8011f78 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8011f66:	68da      	ldr	r2, [r3, #12]
 8011f68:	4294      	cmp	r4, r2
 8011f6a:	d102      	bne.n	8011f72 <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 8011f6c:	68e2      	ldr	r2, [r4, #12]
 8011f6e:	60da      	str	r2, [r3, #12]
 8011f70:	e002      	b.n	8011f78 <tcp_input+0x7fc>
        TCP_RMV_ACTIVE(pcb);
 8011f72:	4613      	mov	r3, r2
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d1f6      	bne.n	8011f66 <tcp_input+0x7ea>
      TCP_RMV_ACTIVE(pcb);
 8011f78:	2201      	movs	r2, #1
 8011f7a:	4b31      	ldr	r3, [pc, #196]	; (8012040 <tcp_input+0x8c4>)
 8011f7c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8011f7e:	230a      	movs	r3, #10
 8011f80:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8011f82:	4b30      	ldr	r3, [pc, #192]	; (8012044 <tcp_input+0x8c8>)
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	601c      	str	r4, [r3, #0]
 8011f88:	60e2      	str	r2, [r4, #12]
 8011f8a:	f001 f875 	bl	8013078 <tcp_timer_needed>
 8011f8e:	e670      	b.n	8011c72 <tcp_input+0x4f6>
        tcp_ack_now(pcb);
 8011f90:	f043 0302 	orr.w	r3, r3, #2
 8011f94:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8011f96:	2308      	movs	r3, #8
 8011f98:	e7a1      	b.n	8011ede <tcp_input+0x762>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011f9a:	06df      	lsls	r7, r3, #27
 8011f9c:	f57f ae69 	bpl.w	8011c72 <tcp_input+0x4f6>
 8011fa0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011fa2:	f8da 3000 	ldr.w	r3, [sl]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	f47f ae63 	bne.w	8011c72 <tcp_input+0x4f6>
 8011fac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	f47f ae5f 	bne.w	8011c72 <tcp_input+0x4f6>
      pcb->state = FIN_WAIT_2;
 8011fb4:	2306      	movs	r3, #6
 8011fb6:	e792      	b.n	8011ede <tcp_input+0x762>
    tcp_receive(pcb);
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7fe fea5 	bl	8010d08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8011fbe:	f898 3000 	ldrb.w	r3, [r8]
 8011fc2:	069e      	lsls	r6, r3, #26
 8011fc4:	f57f ae55 	bpl.w	8011c72 <tcp_input+0x4f6>
      tcp_ack_now(pcb);
 8011fc8:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8011fca:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8011fcc:	f043 0302 	orr.w	r3, r3, #2
 8011fd0:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8011fd2:	f7fe f8a3 	bl	801011c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	429c      	cmp	r4, r3
 8011fda:	d0c1      	beq.n	8011f60 <tcp_input+0x7e4>
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d0cb      	beq.n	8011f78 <tcp_input+0x7fc>
 8011fe0:	68da      	ldr	r2, [r3, #12]
 8011fe2:	4294      	cmp	r4, r2
 8011fe4:	d0c2      	beq.n	8011f6c <tcp_input+0x7f0>
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	e7f8      	b.n	8011fdc <tcp_input+0x860>
    tcp_receive(pcb);
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7fe fe8c 	bl	8010d08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ff0:	9b04      	ldr	r3, [sp, #16]
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	06dd      	lsls	r5, r3, #27
 8011ff6:	f57f ae3c 	bpl.w	8011c72 <tcp_input+0x4f6>
 8011ffa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011ffc:	f8da 3000 	ldr.w	r3, [sl]
 8012000:	429a      	cmp	r2, r3
 8012002:	f47f ae36 	bne.w	8011c72 <tcp_input+0x4f6>
 8012006:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012008:	2b00      	cmp	r3, #0
 801200a:	f47f ae32 	bne.w	8011c72 <tcp_input+0x4f6>
      tcp_pcb_purge(pcb);
 801200e:	4620      	mov	r0, r4
 8012010:	f7fe f884 	bl	801011c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	429c      	cmp	r4, r3
 8012018:	d0a2      	beq.n	8011f60 <tcp_input+0x7e4>
 801201a:	2b00      	cmp	r3, #0
 801201c:	d0ac      	beq.n	8011f78 <tcp_input+0x7fc>
 801201e:	68da      	ldr	r2, [r3, #12]
 8012020:	4294      	cmp	r4, r2
 8012022:	d0a3      	beq.n	8011f6c <tcp_input+0x7f0>
 8012024:	4613      	mov	r3, r2
 8012026:	e7f8      	b.n	801201a <tcp_input+0x89e>
 8012028:	08021824 	.word	0x08021824
 801202c:	080217c3 	.word	0x080217c3
 8012030:	08018495 	.word	0x08018495
 8012034:	080217d9 	.word	0x080217d9
 8012038:	2000afa4 	.word	0x2000afa4
 801203c:	080217ec 	.word	0x080217ec
 8012040:	2000d984 	.word	0x2000d984
 8012044:	2000d998 	.word	0x2000d998
    tcp_receive(pcb);
 8012048:	4620      	mov	r0, r4
 801204a:	f7fe fe5d 	bl	8010d08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801204e:	9b04      	ldr	r3, [sp, #16]
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	06d8      	lsls	r0, r3, #27
 8012054:	f57f ae0d 	bpl.w	8011c72 <tcp_input+0x4f6>
 8012058:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801205a:	f8da 3000 	ldr.w	r3, [sl]
 801205e:	429a      	cmp	r2, r3
 8012060:	f47f ae07 	bne.w	8011c72 <tcp_input+0x4f6>
 8012064:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012066:	2b00      	cmp	r3, #0
 8012068:	f47f ae03 	bne.w	8011c72 <tcp_input+0x4f6>
      recv_flags |= TF_CLOSED;
 801206c:	f898 3000 	ldrb.w	r3, [r8]
 8012070:	f043 0310 	orr.w	r3, r3, #16
 8012074:	f888 3000 	strb.w	r3, [r8]
 8012078:	e5fb      	b.n	8011c72 <tcp_input+0x4f6>
        if (recv_acked > 0) {
 801207a:	f8b9 2000 	ldrh.w	r2, [r9]
 801207e:	b122      	cbz	r2, 801208a <tcp_input+0x90e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012080:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8012082:	b9f3      	cbnz	r3, 80120c2 <tcp_input+0x946>
          recv_acked = 0;
 8012084:	2300      	movs	r3, #0
 8012086:	f8a9 3000 	strh.w	r3, [r9]
        if (tcp_input_delayed_close(pcb)) {
 801208a:	4620      	mov	r0, r4
 801208c:	f7ff fb56 	bl	801173c <tcp_input_delayed_close>
 8012090:	2800      	cmp	r0, #0
 8012092:	f47f acab 	bne.w	80119ec <tcp_input+0x270>
        if (recv_data != NULL) {
 8012096:	f8db 3000 	ldr.w	r3, [fp]
 801209a:	b333      	cbz	r3, 80120ea <tcp_input+0x96e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801209c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801209e:	b133      	cbz	r3, 80120ae <tcp_input+0x932>
 80120a0:	4b3b      	ldr	r3, [pc, #236]	; (8012190 <tcp_input+0xa14>)
 80120a2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80120a6:	493b      	ldr	r1, [pc, #236]	; (8012194 <tcp_input+0xa18>)
 80120a8:	483b      	ldr	r0, [pc, #236]	; (8012198 <tcp_input+0xa1c>)
 80120aa:	f004 fbed 	bl	8016888 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80120ae:	7ea3      	ldrb	r3, [r4, #26]
 80120b0:	f8db 2000 	ldr.w	r2, [fp]
 80120b4:	f013 0310 	ands.w	r3, r3, #16
 80120b8:	d009      	beq.n	80120ce <tcp_input+0x952>
            pbuf_free(recv_data);
 80120ba:	4610      	mov	r0, r2
 80120bc:	f7fd fa90 	bl	800f5e0 <pbuf_free>
 80120c0:	e6dd      	b.n	8011e7e <tcp_input+0x702>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80120c2:	4621      	mov	r1, r4
 80120c4:	6920      	ldr	r0, [r4, #16]
 80120c6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80120c8:	300d      	adds	r0, #13
 80120ca:	d1db      	bne.n	8012084 <tcp_input+0x908>
 80120cc:	e48e      	b.n	80119ec <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80120ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80120d2:	b30d      	cbz	r5, 8012118 <tcp_input+0x99c>
 80120d4:	4621      	mov	r1, r4
 80120d6:	6920      	ldr	r0, [r4, #16]
 80120d8:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 80120da:	f110 0f0d 	cmn.w	r0, #13
 80120de:	f43f ac85 	beq.w	80119ec <tcp_input+0x270>
          if (err != ERR_OK) {
 80120e2:	b110      	cbz	r0, 80120ea <tcp_input+0x96e>
            pcb->refused_data = recv_data;
 80120e4:	f8db 3000 	ldr.w	r3, [fp]
 80120e8:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80120ea:	f898 3000 	ldrb.w	r3, [r8]
 80120ee:	069a      	lsls	r2, r3, #26
 80120f0:	d505      	bpl.n	80120fe <tcp_input+0x982>
          if (pcb->refused_data != NULL) {
 80120f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80120f4:	b1b3      	cbz	r3, 8012124 <tcp_input+0x9a8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80120f6:	7b5a      	ldrb	r2, [r3, #13]
 80120f8:	f042 0220 	orr.w	r2, r2, #32
 80120fc:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80120fe:	2200      	movs	r2, #0
 8012100:	4b26      	ldr	r3, [pc, #152]	; (801219c <tcp_input+0xa20>)
        if (tcp_input_delayed_close(pcb)) {
 8012102:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8012104:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012106:	f7ff fb19 	bl	801173c <tcp_input_delayed_close>
 801210a:	2800      	cmp	r0, #0
 801210c:	f47f ac6e 	bne.w	80119ec <tcp_input+0x270>
        tcp_output(pcb);
 8012110:	4620      	mov	r0, r4
 8012112:	f000 fc9b 	bl	8012a4c <tcp_output>
 8012116:	e469      	b.n	80119ec <tcp_input+0x270>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012118:	462b      	mov	r3, r5
 801211a:	4621      	mov	r1, r4
 801211c:	4628      	mov	r0, r5
 801211e:	f7fe fafd 	bl	801071c <tcp_recv_null>
 8012122:	e7da      	b.n	80120da <tcp_input+0x95e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012124:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8012126:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801212a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 801212e:	bf1c      	itt	ne
 8012130:	3301      	addne	r3, #1
 8012132:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8012134:	2d00      	cmp	r5, #0
 8012136:	d0e2      	beq.n	80120fe <tcp_input+0x982>
 8012138:	2300      	movs	r3, #0
 801213a:	4621      	mov	r1, r4
 801213c:	461a      	mov	r2, r3
 801213e:	6920      	ldr	r0, [r4, #16]
 8012140:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8012142:	300d      	adds	r0, #13
 8012144:	d1db      	bne.n	80120fe <tcp_input+0x982>
aborted:
 8012146:	e451      	b.n	80119ec <tcp_input+0x270>
      if (prev != NULL) {
 8012148:	b13c      	cbz	r4, 801215a <tcp_input+0x9de>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801214a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801214e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012150:	4b13      	ldr	r3, [pc, #76]	; (80121a0 <tcp_input+0xa24>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012152:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012156:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	075c      	lsls	r4, r3, #29
 8012160:	f53f acce 	bmi.w	8011b00 <tcp_input+0x384>
  if (flags & TCP_ACK) {
 8012164:	f013 0410 	ands.w	r4, r3, #16
 8012168:	f43f acff 	beq.w	8011b6a <tcp_input+0x3ee>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801216c:	9b05      	ldr	r3, [sp, #20]
 801216e:	881c      	ldrh	r4, [r3, #0]
 8012170:	9b03      	ldr	r3, [sp, #12]
 8012172:	6819      	ldr	r1, [r3, #0]
 8012174:	8813      	ldrh	r3, [r2, #0]
 8012176:	4421      	add	r1, r4
 8012178:	e9cd 0300 	strd	r0, r3, [sp]
 801217c:	4b09      	ldr	r3, [pc, #36]	; (80121a4 <tcp_input+0xa28>)
 801217e:	1d1a      	adds	r2, r3, #4
 8012180:	e4ac      	b.n	8011adc <tcp_input+0x360>
      if (prev != NULL) {
 8012182:	f1b9 0f00 	cmp.w	r9, #0
 8012186:	f47f abef 	bne.w	8011968 <tcp_input+0x1ec>
 801218a:	f7ff bbfc 	b.w	8011986 <tcp_input+0x20a>
 801218e:	bf00      	nop
 8012190:	08021824 	.word	0x08021824
 8012194:	0802180a 	.word	0x0802180a
 8012198:	08018495 	.word	0x08018495
 801219c:	2000d99c 	.word	0x2000d99c
 80121a0:	2000d990 	.word	0x2000d990
 80121a4:	2000afa4 	.word	0x2000afa4

080121a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80121a8:	4a02      	ldr	r2, [pc, #8]	; (80121b4 <tcp_trigger_input_pcb_close+0xc>)
 80121aa:	7813      	ldrb	r3, [r2, #0]
 80121ac:	f043 0310 	orr.w	r3, r3, #16
 80121b0:	7013      	strb	r3, [r2, #0]
}
 80121b2:	4770      	bx	lr
 80121b4:	20004fcc 	.word	0x20004fcc

080121b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80121b8:	b570      	push	{r4, r5, r6, lr}
 80121ba:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80121bc:	4294      	cmp	r4, r2
{
 80121be:	461e      	mov	r6, r3
 80121c0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80121c4:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 80121c6:	d228      	bcs.n	801221a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80121c8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80121cc:	07ad      	lsls	r5, r5, #30
 80121ce:	d407      	bmi.n	80121e0 <tcp_pbuf_prealloc+0x28>
 80121d0:	7e9d      	ldrb	r5, [r3, #26]
 80121d2:	066d      	lsls	r5, r5, #25
 80121d4:	d421      	bmi.n	801221a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 80121d6:	b119      	cbz	r1, 80121e0 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 80121d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80121da:	b909      	cbnz	r1, 80121e0 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 80121dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121de:	b1e3      	cbz	r3, 801221a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80121e0:	f204 231b 	addw	r3, r4, #539	; 0x21b
 80121e4:	f023 0103 	bic.w	r1, r3, #3
 80121e8:	428a      	cmp	r2, r1
 80121ea:	bf28      	it	cs
 80121ec:	460a      	movcs	r2, r1
 80121ee:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80121f0:	2200      	movs	r2, #0
 80121f2:	f7fd fa5d 	bl	800f6b0 <pbuf_alloc>
  if (p == NULL) {
 80121f6:	4605      	mov	r5, r0
 80121f8:	b168      	cbz	r0, 8012216 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80121fa:	6803      	ldr	r3, [r0, #0]
 80121fc:	b133      	cbz	r3, 801220c <tcp_pbuf_prealloc+0x54>
 80121fe:	4b08      	ldr	r3, [pc, #32]	; (8012220 <tcp_pbuf_prealloc+0x68>)
 8012200:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012204:	4907      	ldr	r1, [pc, #28]	; (8012224 <tcp_pbuf_prealloc+0x6c>)
 8012206:	4808      	ldr	r0, [pc, #32]	; (8012228 <tcp_pbuf_prealloc+0x70>)
 8012208:	f004 fb3e 	bl	8016888 <iprintf>
  *oversize = p->len - length;
 801220c:	896b      	ldrh	r3, [r5, #10]
 801220e:	1b1b      	subs	r3, r3, r4
 8012210:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012212:	812c      	strh	r4, [r5, #8]
 8012214:	816c      	strh	r4, [r5, #10]
  return p;
}
 8012216:	4628      	mov	r0, r5
 8012218:	bd70      	pop	{r4, r5, r6, pc}
 801221a:	4621      	mov	r1, r4
 801221c:	e7e8      	b.n	80121f0 <tcp_pbuf_prealloc+0x38>
 801221e:	bf00      	nop
 8012220:	08021b27 	.word	0x08021b27
 8012224:	08021b5a 	.word	0x08021b5a
 8012228:	08018495 	.word	0x08018495

0801222c <tcp_create_segment>:
{
 801222c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012230:	4681      	mov	r9, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012232:	2003      	movs	r0, #3
{
 8012234:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 8012238:	460e      	mov	r6, r1
 801223a:	4690      	mov	r8, r2
 801223c:	469a      	mov	sl, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801223e:	f7fc fff5 	bl	800f22c <memp_malloc>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012242:	ea4f 078b 	mov.w	r7, fp, lsl #2
 8012246:	b2fd      	uxtb	r5, r7
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012248:	4604      	mov	r4, r0
 801224a:	b928      	cbnz	r0, 8012258 <tcp_create_segment+0x2c>
    pbuf_free(p);
 801224c:	4630      	mov	r0, r6
 801224e:	f7fd f9c7 	bl	800f5e0 <pbuf_free>
}
 8012252:	4620      	mov	r0, r4
 8012254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 8012258:	2300      	movs	r3, #0
  seg->flags = optflags;
 801225a:	f880 b00a 	strb.w	fp, [r0, #10]
  seg->p = p;
 801225e:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012262:	8933      	ldrh	r3, [r6, #8]
 8012264:	b2bf      	uxth	r7, r7
 8012266:	42bb      	cmp	r3, r7
 8012268:	d205      	bcs.n	8012276 <tcp_create_segment+0x4a>
 801226a:	4b1b      	ldr	r3, [pc, #108]	; (80122d8 <tcp_create_segment+0xac>)
 801226c:	22ba      	movs	r2, #186	; 0xba
 801226e:	491b      	ldr	r1, [pc, #108]	; (80122dc <tcp_create_segment+0xb0>)
 8012270:	481b      	ldr	r0, [pc, #108]	; (80122e0 <tcp_create_segment+0xb4>)
 8012272:	f004 fb09 	bl	8016888 <iprintf>
  seg->len = p->tot_len - optlen;
 8012276:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8012278:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801227a:	1bdf      	subs	r7, r3, r7
 801227c:	8127      	strh	r7, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 801227e:	4630      	mov	r0, r6
 8012280:	f7fd f9a8 	bl	800f5d4 <pbuf_header>
 8012284:	4607      	mov	r7, r0
 8012286:	b120      	cbz	r0, 8012292 <tcp_create_segment+0x66>
    tcp_seg_free(seg);
 8012288:	4620      	mov	r0, r4
 801228a:	f7fd feb1 	bl	800fff0 <tcp_seg_free>
    return NULL;
 801228e:	2400      	movs	r4, #0
 8012290:	e7df      	b.n	8012252 <tcp_create_segment+0x26>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012292:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012294:	f8b9 0016 	ldrh.w	r0, [r9, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012298:	685e      	ldr	r6, [r3, #4]
 801229a:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801229c:	f7fc f8ca 	bl	800e434 <lwip_htons>
 80122a0:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80122a2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 80122a6:	68e6      	ldr	r6, [r4, #12]
 80122a8:	f7fc f8c4 	bl	800e434 <lwip_htons>
 80122ac:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80122ae:	4650      	mov	r0, sl
 80122b0:	68e6      	ldr	r6, [r4, #12]
 80122b2:	f7fc f8c2 	bl	800e43a <lwip_htonl>
 80122b6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80122b8:	02a8      	lsls	r0, r5, #10
 80122ba:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 80122be:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80122c2:	ea40 0008 	orr.w	r0, r0, r8
 80122c6:	68e6      	ldr	r6, [r4, #12]
 80122c8:	f7fc f8b4 	bl	800e434 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80122cc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80122ce:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 80122d0:	749f      	strb	r7, [r3, #18]
 80122d2:	74df      	strb	r7, [r3, #19]
  return seg;
 80122d4:	e7bd      	b.n	8012252 <tcp_create_segment+0x26>
 80122d6:	bf00      	nop
 80122d8:	08021b27 	.word	0x08021b27
 80122dc:	080219af 	.word	0x080219af
 80122e0:	08018495 	.word	0x08018495

080122e4 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80122e4:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80122e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80122e8:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 80122ea:	4605      	mov	r5, r0
 80122ec:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80122ee:	2001      	movs	r0, #1
 80122f0:	2200      	movs	r2, #0
 80122f2:	f7fd f9dd 	bl	800f6b0 <pbuf_alloc>
  if (p != NULL) {
 80122f6:	4606      	mov	r6, r0
 80122f8:	b340      	cbz	r0, 801234c <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80122fa:	8943      	ldrh	r3, [r0, #10]
 80122fc:	2b13      	cmp	r3, #19
 80122fe:	d805      	bhi.n	801230c <tcp_output_alloc_header.constprop.0+0x28>
 8012300:	4b13      	ldr	r3, [pc, #76]	; (8012350 <tcp_output_alloc_header.constprop.0+0x6c>)
 8012302:	2273      	movs	r2, #115	; 0x73
 8012304:	4913      	ldr	r1, [pc, #76]	; (8012354 <tcp_output_alloc_header.constprop.0+0x70>)
 8012306:	4814      	ldr	r0, [pc, #80]	; (8012358 <tcp_output_alloc_header.constprop.0+0x74>)
 8012308:	f004 fabe 	bl	8016888 <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 801230c:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 801230e:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8012310:	f7fc f890 	bl	800e434 <lwip_htons>
 8012314:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8012316:	8b28      	ldrh	r0, [r5, #24]
 8012318:	f7fc f88c 	bl	800e434 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801231c:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801231e:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012320:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012322:	f7fc f88a 	bl	800e43a <lwip_htonl>
 8012326:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8012328:	f245 0010 	movw	r0, #20496	; 0x5010
 801232c:	f7fc f882 	bl	800e434 <lwip_htons>
 8012330:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012332:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8012334:	f7fc f87e 	bl	800e434 <lwip_htons>
    tcphdr->chksum = 0;
 8012338:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801233a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 801233c:	7423      	strb	r3, [r4, #16]
 801233e:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8012340:	74a3      	strb	r3, [r4, #18]
 8012342:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012346:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012348:	4413      	add	r3, r2
 801234a:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 801234c:	4630      	mov	r0, r6
 801234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012350:	08021b27 	.word	0x08021b27
 8012354:	08021af9 	.word	0x08021af9
 8012358:	08018495 	.word	0x08018495

0801235c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012360:	b091      	sub	sp, #68	; 0x44
 8012362:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012364:	2300      	movs	r3, #0
 8012366:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801236a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
{
 801236c:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801236e:	9307      	str	r3, [sp, #28]
 8012370:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8012374:	9a07      	ldr	r2, [sp, #28]
 8012376:	085b      	lsrs	r3, r3, #1
 8012378:	4293      	cmp	r3, r2
 801237a:	bf28      	it	cs
 801237c:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 801237e:	2b00      	cmp	r3, #0
 8012380:	bf18      	it	ne
 8012382:	461a      	movne	r2, r3
{
 8012384:	4604      	mov	r4, r0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012386:	e9cd 2107 	strd	r2, r1, [sp, #28]
 801238a:	b959      	cbnz	r1, 80123a4 <tcp_write+0x48>
 801238c:	4ba4      	ldr	r3, [pc, #656]	; (8012620 <tcp_write+0x2c4>)
 801238e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8012392:	49a4      	ldr	r1, [pc, #656]	; (8012624 <tcp_write+0x2c8>)
 8012394:	48a4      	ldr	r0, [pc, #656]	; (8012628 <tcp_write+0x2cc>)
 8012396:	f004 fa77 	bl	8016888 <iprintf>
 801239a:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 801239e:	b011      	add	sp, #68	; 0x44
 80123a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80123a4:	7d03      	ldrb	r3, [r0, #20]
 80123a6:	2b07      	cmp	r3, #7
 80123a8:	d003      	beq.n	80123b2 <tcp_write+0x56>
      (pcb->state != CLOSE_WAIT) &&
 80123aa:	3b02      	subs	r3, #2
 80123ac:	2b02      	cmp	r3, #2
 80123ae:	f200 824c 	bhi.w	801284a <tcp_write+0x4ee>
  } else if (len == 0) {
 80123b2:	9b05      	ldr	r3, [sp, #20]
 80123b4:	b1eb      	cbz	r3, 80123f2 <tcp_write+0x96>
  if (len > pcb->snd_buf) {
 80123b6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80123ba:	9a05      	ldr	r2, [sp, #20]
 80123bc:	4293      	cmp	r3, r2
 80123be:	d206      	bcs.n	80123ce <tcp_write+0x72>
    pcb->flags |= TF_NAGLEMEMERR;
 80123c0:	7ea3      	ldrb	r3, [r4, #26]
 80123c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80123c6:	76a3      	strb	r3, [r4, #26]
  return ERR_MEM;
 80123c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123cc:	e7e7      	b.n	801239e <tcp_write+0x42>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80123ce:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80123d2:	2a08      	cmp	r2, #8
 80123d4:	d8f4      	bhi.n	80123c0 <tcp_write+0x64>
 80123d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 80123d8:	2a00      	cmp	r2, #0
 80123da:	f000 809f 	beq.w	801251c <tcp_write+0x1c0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80123de:	b943      	cbnz	r3, 80123f2 <tcp_write+0x96>
 80123e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80123e2:	b933      	cbnz	r3, 80123f2 <tcp_write+0x96>
 80123e4:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80123e8:	4b8d      	ldr	r3, [pc, #564]	; (8012620 <tcp_write+0x2c4>)
 80123ea:	4990      	ldr	r1, [pc, #576]	; (801262c <tcp_write+0x2d0>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80123ec:	488e      	ldr	r0, [pc, #568]	; (8012628 <tcp_write+0x2cc>)
 80123ee:	f004 fa4b 	bl	8016888 <iprintf>
  queuelen = pcb->snd_queuelen;
 80123f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (pcb->unsent != NULL) {
 80123f6:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 80123fa:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 80123fc:	f1b8 0f00 	cmp.w	r8, #0
 8012400:	f000 80c2 	beq.w	8012588 <tcp_write+0x22c>
 8012404:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012406:	f8d6 b000 	ldr.w	fp, [r6]
 801240a:	f1bb 0f00 	cmp.w	fp, #0
 801240e:	f040 808f 	bne.w	8012530 <tcp_write+0x1d4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8012412:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012414:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8012416:	00ad      	lsls	r5, r5, #2
 8012418:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801241c:	9a07      	ldr	r2, [sp, #28]
 801241e:	442b      	add	r3, r5
 8012420:	429a      	cmp	r2, r3
 8012422:	da06      	bge.n	8012432 <tcp_write+0xd6>
 8012424:	4b7e      	ldr	r3, [pc, #504]	; (8012620 <tcp_write+0x2c4>)
 8012426:	f240 12c7 	movw	r2, #455	; 0x1c7
 801242a:	4981      	ldr	r1, [pc, #516]	; (8012630 <tcp_write+0x2d4>)
 801242c:	487e      	ldr	r0, [pc, #504]	; (8012628 <tcp_write+0x2cc>)
 801242e:	f004 fa2b 	bl	8016888 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012432:	8937      	ldrh	r7, [r6, #8]
 8012434:	9b07      	ldr	r3, [sp, #28]
 8012436:	1bdf      	subs	r7, r3, r7
 8012438:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 801243a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 801243e:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 8012440:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    if (oversize > 0) {
 8012444:	2d00      	cmp	r5, #0
 8012446:	d075      	beq.n	8012534 <tcp_write+0x1d8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012448:	42bd      	cmp	r5, r7
 801244a:	d906      	bls.n	801245a <tcp_write+0xfe>
 801244c:	4b74      	ldr	r3, [pc, #464]	; (8012620 <tcp_write+0x2c4>)
 801244e:	f240 12d9 	movw	r2, #473	; 0x1d9
 8012452:	4978      	ldr	r1, [pc, #480]	; (8012634 <tcp_write+0x2d8>)
 8012454:	4874      	ldr	r0, [pc, #464]	; (8012628 <tcp_write+0x2cc>)
 8012456:	f004 fa17 	bl	8016888 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801245a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801245e:	9a05      	ldr	r2, [sp, #20]
      space -= oversize_used;
 8012460:	46b0      	mov	r8, r6
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012462:	429a      	cmp	r2, r3
 8012464:	bf28      	it	cs
 8012466:	461a      	movcs	r2, r3
 8012468:	42ba      	cmp	r2, r7
 801246a:	4615      	mov	r5, r2
 801246c:	bfa8      	it	ge
 801246e:	463d      	movge	r5, r7
      oversize -= oversize_used;
 8012470:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 8012472:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 8012474:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8012478:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801247a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801247e:	b153      	cbz	r3, 8012496 <tcp_write+0x13a>
 8012480:	9b05      	ldr	r3, [sp, #20]
 8012482:	429d      	cmp	r5, r3
 8012484:	f000 81e4 	beq.w	8012850 <tcp_write+0x4f4>
 8012488:	4b65      	ldr	r3, [pc, #404]	; (8012620 <tcp_write+0x2c4>)
 801248a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801248e:	496a      	ldr	r1, [pc, #424]	; (8012638 <tcp_write+0x2dc>)
 8012490:	4865      	ldr	r0, [pc, #404]	; (8012628 <tcp_write+0x2cc>)
 8012492:	f004 f9f9 	bl	8016888 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012496:	9b05      	ldr	r3, [sp, #20]
 8012498:	429d      	cmp	r5, r3
 801249a:	f080 81d9 	bcs.w	8012850 <tcp_write+0x4f4>
 801249e:	2f00      	cmp	r7, #0
 80124a0:	f000 8162 	beq.w	8012768 <tcp_write+0x40c>
 80124a4:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 80124a8:	f1ba 0f00 	cmp.w	sl, #0
 80124ac:	f000 815d 	beq.w	801276a <tcp_write+0x40e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80124b0:	eba3 0a05 	sub.w	sl, r3, r5
 80124b4:	45ba      	cmp	sl, r7
 80124b6:	bfa8      	it	ge
 80124b8:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80124ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 80124bc:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80124c0:	07db      	lsls	r3, r3, #31
 80124c2:	d539      	bpl.n	8012538 <tcp_write+0x1dc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80124c4:	2301      	movs	r3, #1
 80124c6:	9302      	str	r3, [sp, #8]
 80124c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124ca:	463a      	mov	r2, r7
 80124cc:	e9cd 4300 	strd	r4, r3, [sp]
 80124d0:	4641      	mov	r1, r8
 80124d2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80124d6:	2004      	movs	r0, #4
 80124d8:	f7ff fe6e 	bl	80121b8 <tcp_pbuf_prealloc>
 80124dc:	4681      	mov	r9, r0
 80124de:	2800      	cmp	r0, #0
 80124e0:	f000 81b0 	beq.w	8012844 <tcp_write+0x4e8>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80124e4:	9b08      	ldr	r3, [sp, #32]
 80124e6:	4642      	mov	r2, r8
 80124e8:	1959      	adds	r1, r3, r5
 80124ea:	6840      	ldr	r0, [r0, #4]
 80124ec:	f004 f913 	bl	8016716 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80124f0:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 80124f2:	f7fd fa29 	bl	800f948 <pbuf_clen>
  u16_t extendlen = 0;
 80124f6:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 80124fa:	9b06      	ldr	r3, [sp, #24]
 80124fc:	4403      	add	r3, r0
 80124fe:	b29b      	uxth	r3, r3
 8012500:	9306      	str	r3, [sp, #24]
      pos += seglen;
 8012502:	eb05 0708 	add.w	r7, r5, r8
 8012506:	46b0      	mov	r8, r6
 8012508:	b2bf      	uxth	r7, r7
 801250a:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801250e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 8012510:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012514:	f003 0301 	and.w	r3, r3, #1
 8012518:	930c      	str	r3, [sp, #48]	; 0x30
 801251a:	e0fe      	b.n	801271a <tcp_write+0x3be>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801251c:	b91b      	cbnz	r3, 8012526 <tcp_write+0x1ca>
 801251e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012520:	2b00      	cmp	r3, #0
 8012522:	f43f af66 	beq.w	80123f2 <tcp_write+0x96>
 8012526:	4b3e      	ldr	r3, [pc, #248]	; (8012620 <tcp_write+0x2c4>)
 8012528:	f240 1259 	movw	r2, #345	; 0x159
 801252c:	4943      	ldr	r1, [pc, #268]	; (801263c <tcp_write+0x2e0>)
 801252e:	e75d      	b.n	80123ec <tcp_write+0x90>
 8012530:	465e      	mov	r6, fp
 8012532:	e768      	b.n	8012406 <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012534:	46a8      	mov	r8, r5
 8012536:	e7a0      	b.n	801247a <tcp_write+0x11e>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012538:	6873      	ldr	r3, [r6, #4]
 801253a:	f8d3 9000 	ldr.w	r9, [r3]
 801253e:	f1b9 0f00 	cmp.w	r9, #0
 8012542:	d112      	bne.n	801256a <tcp_write+0x20e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012544:	7b1a      	ldrb	r2, [r3, #12]
 8012546:	2a01      	cmp	r2, #1
 8012548:	d111      	bne.n	801256e <tcp_write+0x212>
 801254a:	895a      	ldrh	r2, [r3, #10]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4413      	add	r3, r2
 8012550:	9a08      	ldr	r2, [sp, #32]
 8012552:	429a      	cmp	r2, r3
 8012554:	d10b      	bne.n	801256e <tcp_write+0x212>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012556:	b135      	cbz	r5, 8012566 <tcp_write+0x20a>
 8012558:	4b31      	ldr	r3, [pc, #196]	; (8012620 <tcp_write+0x2c4>)
 801255a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801255e:	4938      	ldr	r1, [pc, #224]	; (8012640 <tcp_write+0x2e4>)
 8012560:	4831      	ldr	r0, [pc, #196]	; (8012628 <tcp_write+0x2cc>)
 8012562:	f004 f991 	bl	8016888 <iprintf>
          extendlen = seglen;
 8012566:	46c2      	mov	sl, r8
 8012568:	e7cb      	b.n	8012502 <tcp_write+0x1a6>
 801256a:	464b      	mov	r3, r9
 801256c:	e7e5      	b.n	801253a <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801256e:	2201      	movs	r2, #1
 8012570:	4641      	mov	r1, r8
 8012572:	2004      	movs	r0, #4
 8012574:	f7fd f89c 	bl	800f6b0 <pbuf_alloc>
 8012578:	4681      	mov	r9, r0
 801257a:	2800      	cmp	r0, #0
 801257c:	f000 8162 	beq.w	8012844 <tcp_write+0x4e8>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8012580:	9b08      	ldr	r3, [sp, #32]
 8012582:	442b      	add	r3, r5
 8012584:	6043      	str	r3, [r0, #4]
 8012586:	e7b4      	b.n	80124f2 <tcp_write+0x196>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012588:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 801258c:	2f00      	cmp	r7, #0
 801258e:	f000 80ef 	beq.w	8012770 <tcp_write+0x414>
 8012592:	4b23      	ldr	r3, [pc, #140]	; (8012620 <tcp_write+0x2c4>)
 8012594:	f240 2225 	movw	r2, #549	; 0x225
 8012598:	492a      	ldr	r1, [pc, #168]	; (8012644 <tcp_write+0x2e8>)
 801259a:	4823      	ldr	r0, [pc, #140]	; (8012628 <tcp_write+0x2cc>)
 801259c:	f004 f974 	bl	8016888 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80125a0:	4646      	mov	r6, r8
  u16_t extendlen = 0;
 80125a2:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 80125a4:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 80125a6:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 80125a8:	46c1      	mov	r9, r8
 80125aa:	e7ae      	b.n	801250a <tcp_write+0x1ae>
    u16_t left = len - pos;
 80125ac:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 80125ae:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 80125b0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	4293      	cmp	r3, r2
 80125b6:	bf28      	it	cs
 80125b8:	4613      	movcs	r3, r2
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80125be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d043      	beq.n	801264c <tcp_write+0x2f0>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80125c4:	fabb f38b 	clz	r3, fp
 80125c8:	095b      	lsrs	r3, r3, #5
 80125ca:	9302      	str	r3, [sp, #8]
 80125cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80125d0:	e9cd 4300 	strd	r4, r3, [sp]
 80125d4:	2000      	movs	r0, #0
 80125d6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80125da:	f7ff fded 	bl	80121b8 <tcp_pbuf_prealloc>
 80125de:	4680      	mov	r8, r0
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d052      	beq.n	801268a <tcp_write+0x32e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80125e4:	8943      	ldrh	r3, [r0, #10]
 80125e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d206      	bcs.n	80125fa <tcp_write+0x29e>
 80125ec:	4b0c      	ldr	r3, [pc, #48]	; (8012620 <tcp_write+0x2c4>)
 80125ee:	f240 2241 	movw	r2, #577	; 0x241
 80125f2:	4915      	ldr	r1, [pc, #84]	; (8012648 <tcp_write+0x2ec>)
 80125f4:	480c      	ldr	r0, [pc, #48]	; (8012628 <tcp_write+0x2cc>)
 80125f6:	f004 f947 	bl	8016888 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80125fa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80125fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012602:	19d9      	adds	r1, r3, r7
 8012604:	f004 f887 	bl	8016716 <memcpy>
    queuelen += pbuf_clen(p);
 8012608:	4640      	mov	r0, r8
 801260a:	f7fd f99d 	bl	800f948 <pbuf_clen>
 801260e:	9b06      	ldr	r3, [sp, #24]
 8012610:	4403      	add	r3, r0
 8012612:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8012614:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 8012616:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8012618:	d960      	bls.n	80126dc <tcp_write+0x380>
      pbuf_free(p);
 801261a:	4640      	mov	r0, r8
 801261c:	e033      	b.n	8012686 <tcp_write+0x32a>
 801261e:	bf00      	nop
 8012620:	08021b27 	.word	0x08021b27
 8012624:	08021b6e 	.word	0x08021b6e
 8012628:	08018495 	.word	0x08018495
 801262c:	08021b9f 	.word	0x08021b9f
 8012630:	08021c0b 	.word	0x08021c0b
 8012634:	08021c22 	.word	0x08021c22
 8012638:	08021c42 	.word	0x08021c42
 801263c:	08021bd9 	.word	0x08021bd9
 8012640:	08021c60 	.word	0x08021c60
 8012644:	08021c89 	.word	0x08021c89
 8012648:	08021cb8 	.word	0x08021cb8
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801264c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012650:	b133      	cbz	r3, 8012660 <tcp_write+0x304>
 8012652:	4b83      	ldr	r3, [pc, #524]	; (8012860 <tcp_write+0x504>)
 8012654:	f240 224b 	movw	r2, #587	; 0x24b
 8012658:	4982      	ldr	r1, [pc, #520]	; (8012864 <tcp_write+0x508>)
 801265a:	4883      	ldr	r0, [pc, #524]	; (8012868 <tcp_write+0x50c>)
 801265c:	f004 f914 	bl	8016888 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012660:	2201      	movs	r2, #1
 8012662:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012664:	2000      	movs	r0, #0
 8012666:	f7fd f823 	bl	800f6b0 <pbuf_alloc>
 801266a:	b170      	cbz	r0, 801268a <tcp_write+0x32e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801266c:	9a08      	ldr	r2, [sp, #32]
 801266e:	900d      	str	r0, [sp, #52]	; 0x34
 8012670:	443a      	add	r2, r7
 8012672:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012674:	2200      	movs	r2, #0
 8012676:	4611      	mov	r1, r2
 8012678:	4610      	mov	r0, r2
 801267a:	f7fd f819 	bl	800f6b0 <pbuf_alloc>
 801267e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012680:	4680      	mov	r8, r0
 8012682:	bb38      	cbnz	r0, 80126d4 <tcp_write+0x378>
        pbuf_free(p2);
 8012684:	4618      	mov	r0, r3
      pbuf_free(p);
 8012686:	f7fc ffab 	bl	800f5e0 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 801268a:	7ea3      	ldrb	r3, [r4, #26]
 801268c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012690:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 8012692:	f1b9 0f00 	cmp.w	r9, #0
 8012696:	d002      	beq.n	801269e <tcp_write+0x342>
    pbuf_free(concat_p);
 8012698:	4648      	mov	r0, r9
 801269a:	f7fc ffa1 	bl	800f5e0 <pbuf_free>
  if (queue != NULL) {
 801269e:	f1bb 0f00 	cmp.w	fp, #0
 80126a2:	d002      	beq.n	80126aa <tcp_write+0x34e>
    tcp_segs_free(queue);
 80126a4:	4658      	mov	r0, fp
 80126a6:	f7fd fcb1 	bl	801000c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80126aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f43f ae8a 	beq.w	80123c8 <tcp_write+0x6c>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80126b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f47f ae86 	bne.w	80123c8 <tcp_write+0x6c>
 80126bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f47f ae82 	bne.w	80123c8 <tcp_write+0x6c>
 80126c4:	4b66      	ldr	r3, [pc, #408]	; (8012860 <tcp_write+0x504>)
 80126c6:	f240 3202 	movw	r2, #770	; 0x302
 80126ca:	4968      	ldr	r1, [pc, #416]	; (801286c <tcp_write+0x510>)
 80126cc:	4866      	ldr	r0, [pc, #408]	; (8012868 <tcp_write+0x50c>)
 80126ce:	f004 f8db 	bl	8016888 <iprintf>
 80126d2:	e679      	b.n	80123c8 <tcp_write+0x6c>
      pbuf_cat(p/*header*/, p2/*data*/);
 80126d4:	4619      	mov	r1, r3
 80126d6:	f7fd f95b 	bl	800f990 <pbuf_cat>
 80126da:	e795      	b.n	8012608 <tcp_write+0x2ac>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80126dc:	2200      	movs	r2, #0
 80126de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126e0:	4641      	mov	r1, r8
 80126e2:	9200      	str	r2, [sp, #0]
 80126e4:	443b      	add	r3, r7
 80126e6:	4620      	mov	r0, r4
 80126e8:	f7ff fda0 	bl	801222c <tcp_create_segment>
 80126ec:	4680      	mov	r8, r0
 80126ee:	2800      	cmp	r0, #0
 80126f0:	d0cb      	beq.n	801268a <tcp_write+0x32e>
    if (queue == NULL) {
 80126f2:	f1bb 0f00 	cmp.w	fp, #0
 80126f6:	d035      	beq.n	8012764 <tcp_write+0x408>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80126f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126fa:	b933      	cbnz	r3, 801270a <tcp_write+0x3ae>
 80126fc:	4b58      	ldr	r3, [pc, #352]	; (8012860 <tcp_write+0x504>)
 80126fe:	f240 2285 	movw	r2, #645	; 0x285
 8012702:	495b      	ldr	r1, [pc, #364]	; (8012870 <tcp_write+0x514>)
 8012704:	4858      	ldr	r0, [pc, #352]	; (8012868 <tcp_write+0x50c>)
 8012706:	f004 f8bf 	bl	8016888 <iprintf>
      prev_seg->next = seg;
 801270a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801270c:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 8012710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012712:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8012716:	441f      	add	r7, r3
 8012718:	b2bf      	uxth	r7, r7
  while (pos < len) {
 801271a:	9b05      	ldr	r3, [sp, #20]
 801271c:	429f      	cmp	r7, r3
 801271e:	f4ff af45 	bcc.w	80125ac <tcp_write+0x250>
  if (oversize_used > 0) {
 8012722:	b125      	cbz	r5, 801272e <tcp_write+0x3d2>
    for (p = last_unsent->p; p; p = p->next) {
 8012724:	6877      	ldr	r7, [r6, #4]
 8012726:	bb67      	cbnz	r7, 8012782 <tcp_write+0x426>
    last_unsent->len += oversize_used;
 8012728:	8933      	ldrh	r3, [r6, #8]
 801272a:	441d      	add	r5, r3
 801272c:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 801272e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012732:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 8012736:	f1b9 0f00 	cmp.w	r9, #0
 801273a:	d033      	beq.n	80127a4 <tcp_write+0x448>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801273c:	b936      	cbnz	r6, 801274c <tcp_write+0x3f0>
 801273e:	4b48      	ldr	r3, [pc, #288]	; (8012860 <tcp_write+0x504>)
 8012740:	f240 22bb 	movw	r2, #699	; 0x2bb
 8012744:	494b      	ldr	r1, [pc, #300]	; (8012874 <tcp_write+0x518>)
 8012746:	4848      	ldr	r0, [pc, #288]	; (8012868 <tcp_write+0x50c>)
 8012748:	f004 f89e 	bl	8016888 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 801274c:	4649      	mov	r1, r9
 801274e:	6870      	ldr	r0, [r6, #4]
 8012750:	f7fd f91e 	bl	800f990 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012754:	8933      	ldrh	r3, [r6, #8]
 8012756:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 801275a:	4413      	add	r3, r2
 801275c:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 801275e:	f8c6 b000 	str.w	fp, [r6]
 8012762:	e041      	b.n	80127e8 <tcp_write+0x48c>
 8012764:	4683      	mov	fp, r0
 8012766:	e7d3      	b.n	8012710 <tcp_write+0x3b4>
  u16_t extendlen = 0;
 8012768:	46ba      	mov	sl, r7
 801276a:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 801276c:	46d1      	mov	r9, sl
 801276e:	e6cc      	b.n	801250a <tcp_write+0x1ae>
  u16_t extendlen = 0;
 8012770:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 8012772:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012774:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 8012776:	46b9      	mov	r9, r7
 8012778:	e6c7      	b.n	801250a <tcp_write+0x1ae>
  if (oversize_used > 0) {
 801277a:	f04f 0a00 	mov.w	sl, #0
 801277e:	46d1      	mov	r9, sl
 8012780:	e7d0      	b.n	8012724 <tcp_write+0x3c8>
      p->tot_len += oversize_used;
 8012782:	893b      	ldrh	r3, [r7, #8]
 8012784:	442b      	add	r3, r5
 8012786:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	b94b      	cbnz	r3, 80127a0 <tcp_write+0x444>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	8978      	ldrh	r0, [r7, #10]
 8012790:	462a      	mov	r2, r5
 8012792:	4418      	add	r0, r3
 8012794:	9908      	ldr	r1, [sp, #32]
 8012796:	f003 ffbe 	bl	8016716 <memcpy>
        p->len += oversize_used;
 801279a:	897b      	ldrh	r3, [r7, #10]
 801279c:	442b      	add	r3, r5
 801279e:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80127a0:	683f      	ldr	r7, [r7, #0]
 80127a2:	e7c0      	b.n	8012726 <tcp_write+0x3ca>
  } else if (extendlen > 0) {
 80127a4:	f1ba 0f00 	cmp.w	sl, #0
 80127a8:	d01a      	beq.n	80127e0 <tcp_write+0x484>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80127aa:	b10e      	cbz	r6, 80127b0 <tcp_write+0x454>
 80127ac:	6873      	ldr	r3, [r6, #4]
 80127ae:	b933      	cbnz	r3, 80127be <tcp_write+0x462>
 80127b0:	4b2b      	ldr	r3, [pc, #172]	; (8012860 <tcp_write+0x504>)
 80127b2:	f240 22c1 	movw	r2, #705	; 0x2c1
 80127b6:	4930      	ldr	r1, [pc, #192]	; (8012878 <tcp_write+0x51c>)
 80127b8:	482b      	ldr	r0, [pc, #172]	; (8012868 <tcp_write+0x50c>)
 80127ba:	f004 f865 	bl	8016888 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80127be:	6873      	ldr	r3, [r6, #4]
 80127c0:	891a      	ldrh	r2, [r3, #8]
 80127c2:	6819      	ldr	r1, [r3, #0]
 80127c4:	4452      	add	r2, sl
 80127c6:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 80127c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80127ca:	b939      	cbnz	r1, 80127dc <tcp_write+0x480>
    p->len += extendlen;
 80127cc:	895a      	ldrh	r2, [r3, #10]
 80127ce:	4452      	add	r2, sl
 80127d0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80127d2:	8933      	ldrh	r3, [r6, #8]
 80127d4:	449a      	add	sl, r3
 80127d6:	f8a6 a008 	strh.w	sl, [r6, #8]
 80127da:	e7c0      	b.n	801275e <tcp_write+0x402>
      p->tot_len += extendlen;
 80127dc:	460b      	mov	r3, r1
 80127de:	e7ef      	b.n	80127c0 <tcp_write+0x464>
  if (last_unsent == NULL) {
 80127e0:	2e00      	cmp	r6, #0
 80127e2:	d1bc      	bne.n	801275e <tcp_write+0x402>
    pcb->unsent = queue;
 80127e4:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 80127e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127ea:	9a05      	ldr	r2, [sp, #20]
 80127ec:	4413      	add	r3, r2
 80127ee:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 80127f0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80127f4:	1a9b      	subs	r3, r3, r2
 80127f6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80127fa:	9b06      	ldr	r3, [sp, #24]
 80127fc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8012800:	b153      	cbz	r3, 8012818 <tcp_write+0x4bc>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012802:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012804:	b943      	cbnz	r3, 8012818 <tcp_write+0x4bc>
 8012806:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012808:	b933      	cbnz	r3, 8012818 <tcp_write+0x4bc>
 801280a:	4b15      	ldr	r3, [pc, #84]	; (8012860 <tcp_write+0x504>)
 801280c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8012810:	4916      	ldr	r1, [pc, #88]	; (801286c <tcp_write+0x510>)
 8012812:	4815      	ldr	r0, [pc, #84]	; (8012868 <tcp_write+0x50c>)
 8012814:	f004 f838 	bl	8016888 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8012818:	f1b8 0f00 	cmp.w	r8, #0
 801281c:	d010      	beq.n	8012840 <tcp_write+0x4e4>
 801281e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8012822:	2800      	cmp	r0, #0
 8012824:	f43f adbb 	beq.w	801239e <tcp_write+0x42>
 8012828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801282a:	f013 0502 	ands.w	r5, r3, #2
 801282e:	d107      	bne.n	8012840 <tcp_write+0x4e4>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012830:	8984      	ldrh	r4, [r0, #12]
 8012832:	2008      	movs	r0, #8
 8012834:	f7fb fdfe 	bl	800e434 <lwip_htons>
 8012838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801283c:	4320      	orrs	r0, r4
 801283e:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8012840:	2000      	movs	r0, #0
 8012842:	e5ac      	b.n	801239e <tcp_write+0x42>
      p->tot_len += extendlen;
 8012844:	f04f 0900 	mov.w	r9, #0
 8012848:	e71f      	b.n	801268a <tcp_write+0x32e>
    return ERR_CONN;
 801284a:	f06f 000a 	mvn.w	r0, #10
 801284e:	e5a6      	b.n	801239e <tcp_write+0x42>
  if (oversize_used > 0) {
 8012850:	2d00      	cmp	r5, #0
 8012852:	d192      	bne.n	801277a <tcp_write+0x41e>
  pcb->unsent_oversize = oversize;
 8012854:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012858:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 801285c:	e77f      	b.n	801275e <tcp_write+0x402>
 801285e:	bf00      	nop
 8012860:	08021b27 	.word	0x08021b27
 8012864:	08021cf6 	.word	0x08021cf6
 8012868:	08018495 	.word	0x08018495
 801286c:	08021d82 	.word	0x08021d82
 8012870:	08021d04 	.word	0x08021d04
 8012874:	08021d15 	.word	0x08021d15
 8012878:	08021d4d 	.word	0x08021d4d

0801287c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801287c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012880:	f011 0803 	ands.w	r8, r1, #3
{
 8012884:	4604      	mov	r4, r0
 8012886:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012888:	d106      	bne.n	8012898 <tcp_enqueue_flags+0x1c>
 801288a:	4b3d      	ldr	r3, [pc, #244]	; (8012980 <tcp_enqueue_flags+0x104>)
 801288c:	f240 321b 	movw	r2, #795	; 0x31b
 8012890:	493c      	ldr	r1, [pc, #240]	; (8012984 <tcp_enqueue_flags+0x108>)
 8012892:	483d      	ldr	r0, [pc, #244]	; (8012988 <tcp_enqueue_flags+0x10c>)
 8012894:	f003 fff8 	bl	8016888 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8012898:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801289c:	2b08      	cmp	r3, #8
 801289e:	d90a      	bls.n	80128b6 <tcp_enqueue_flags+0x3a>
 80128a0:	07f1      	lsls	r1, r6, #31
 80128a2:	d408      	bmi.n	80128b6 <tcp_enqueue_flags+0x3a>

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pcb->flags |= TF_NAGLEMEMERR;
 80128a8:	7ea3      	ldrb	r3, [r4, #26]
 80128aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80128ae:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80128b0:	b003      	add	sp, #12
 80128b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128b6:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 80128b8:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128bc:	ea4f 0987 	mov.w	r9, r7, lsl #2
 80128c0:	4649      	mov	r1, r9
 80128c2:	4610      	mov	r0, r2
 80128c4:	f7fc fef4 	bl	800f6b0 <pbuf_alloc>
 80128c8:	4605      	mov	r5, r0
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d0ea      	beq.n	80128a4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80128ce:	8943      	ldrh	r3, [r0, #10]
 80128d0:	454b      	cmp	r3, r9
 80128d2:	d206      	bcs.n	80128e2 <tcp_enqueue_flags+0x66>
 80128d4:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <tcp_enqueue_flags+0x104>)
 80128d6:	f240 3241 	movw	r2, #833	; 0x341
 80128da:	492c      	ldr	r1, [pc, #176]	; (801298c <tcp_enqueue_flags+0x110>)
 80128dc:	482a      	ldr	r0, [pc, #168]	; (8012988 <tcp_enqueue_flags+0x10c>)
 80128de:	f003 ffd3 	bl	8016888 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80128e2:	9700      	str	r7, [sp, #0]
 80128e4:	4629      	mov	r1, r5
 80128e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80128e8:	4632      	mov	r2, r6
 80128ea:	4620      	mov	r0, r4
 80128ec:	f7ff fc9e 	bl	801222c <tcp_create_segment>
 80128f0:	4605      	mov	r5, r0
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d0d6      	beq.n	80128a4 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80128f6:	68c3      	ldr	r3, [r0, #12]
 80128f8:	079a      	lsls	r2, r3, #30
 80128fa:	d006      	beq.n	801290a <tcp_enqueue_flags+0x8e>
 80128fc:	4b20      	ldr	r3, [pc, #128]	; (8012980 <tcp_enqueue_flags+0x104>)
 80128fe:	f240 3249 	movw	r2, #841	; 0x349
 8012902:	4923      	ldr	r1, [pc, #140]	; (8012990 <tcp_enqueue_flags+0x114>)
 8012904:	4820      	ldr	r0, [pc, #128]	; (8012988 <tcp_enqueue_flags+0x10c>)
 8012906:	f003 ffbf 	bl	8016888 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801290a:	892b      	ldrh	r3, [r5, #8]
 801290c:	b133      	cbz	r3, 801291c <tcp_enqueue_flags+0xa0>
 801290e:	4b1c      	ldr	r3, [pc, #112]	; (8012980 <tcp_enqueue_flags+0x104>)
 8012910:	f240 324a 	movw	r2, #842	; 0x34a
 8012914:	491f      	ldr	r1, [pc, #124]	; (8012994 <tcp_enqueue_flags+0x118>)
 8012916:	481c      	ldr	r0, [pc, #112]	; (8012988 <tcp_enqueue_flags+0x10c>)
 8012918:	f003 ffb6 	bl	8016888 <iprintf>
  if (pcb->unsent == NULL) {
 801291c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801291e:	bb4b      	cbnz	r3, 8012974 <tcp_enqueue_flags+0xf8>
    pcb->unsent = seg;
 8012920:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8012922:	2300      	movs	r3, #0
 8012924:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012928:	f1b8 0f00 	cmp.w	r8, #0
 801292c:	d002      	beq.n	8012934 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 801292e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012930:	3301      	adds	r3, #1
 8012932:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8012934:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8012936:	bf42      	ittt	mi
 8012938:	7ea3      	ldrbmi	r3, [r4, #26]
 801293a:	f043 0320 	orrmi.w	r3, r3, #32
 801293e:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012940:	6868      	ldr	r0, [r5, #4]
 8012942:	f7fd f801 	bl	800f948 <pbuf_clen>
 8012946:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 801294a:	4418      	add	r0, r3
 801294c:	b280      	uxth	r0, r0
 801294e:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8012952:	2800      	cmp	r0, #0
 8012954:	d0ac      	beq.n	80128b0 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012956:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012958:	b948      	cbnz	r0, 801296e <tcp_enqueue_flags+0xf2>
 801295a:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 801295c:	2c00      	cmp	r4, #0
 801295e:	d1a7      	bne.n	80128b0 <tcp_enqueue_flags+0x34>
 8012960:	4b07      	ldr	r3, [pc, #28]	; (8012980 <tcp_enqueue_flags+0x104>)
 8012962:	f240 326d 	movw	r2, #877	; 0x36d
 8012966:	490c      	ldr	r1, [pc, #48]	; (8012998 <tcp_enqueue_flags+0x11c>)
 8012968:	4807      	ldr	r0, [pc, #28]	; (8012988 <tcp_enqueue_flags+0x10c>)
 801296a:	f003 ff8d 	bl	8016888 <iprintf>
  return ERR_OK;
 801296e:	2000      	movs	r0, #0
 8012970:	e79e      	b.n	80128b0 <tcp_enqueue_flags+0x34>
 8012972:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	2a00      	cmp	r2, #0
 8012978:	d1fb      	bne.n	8012972 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 801297a:	601d      	str	r5, [r3, #0]
 801297c:	e7d1      	b.n	8012922 <tcp_enqueue_flags+0xa6>
 801297e:	bf00      	nop
 8012980:	08021b27 	.word	0x08021b27
 8012984:	080219c4 	.word	0x080219c4
 8012988:	08018495 	.word	0x08018495
 801298c:	08021a19 	.word	0x08021a19
 8012990:	08021a52 	.word	0x08021a52
 8012994:	08021a6a 	.word	0x08021a6a
 8012998:	08021a94 	.word	0x08021a94

0801299c <tcp_send_fin>:
{
 801299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 801299e:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 80129a0:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 80129a2:	b934      	cbnz	r4, 80129b2 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80129a4:	4628      	mov	r0, r5
}
 80129a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80129aa:	2101      	movs	r1, #1
 80129ac:	f7ff bf66 	b.w	801287c <tcp_enqueue_flags>
 80129b0:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129b2:	6823      	ldr	r3, [r4, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1fb      	bne.n	80129b0 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80129b8:	68e3      	ldr	r3, [r4, #12]
 80129ba:	8998      	ldrh	r0, [r3, #12]
 80129bc:	f7fb fd3a 	bl	800e434 <lwip_htons>
 80129c0:	f010 0707 	ands.w	r7, r0, #7
 80129c4:	d1ee      	bne.n	80129a4 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80129c6:	68e3      	ldr	r3, [r4, #12]
 80129c8:	2001      	movs	r0, #1
 80129ca:	899e      	ldrh	r6, [r3, #12]
 80129cc:	f7fb fd32 	bl	800e434 <lwip_htons>
 80129d0:	68e3      	ldr	r3, [r4, #12]
 80129d2:	4330      	orrs	r0, r6
 80129d4:	8198      	strh	r0, [r3, #12]
      pcb->flags |= TF_FIN;
 80129d6:	7eab      	ldrb	r3, [r5, #26]
}
 80129d8:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 80129da:	f043 0320 	orr.w	r3, r3, #32
 80129de:	76ab      	strb	r3, [r5, #26]
}
 80129e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080129e2 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80129e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80129e4:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80129e6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80129e8:	f7fb fd27 	bl	800e43a <lwip_htonl>
 80129ec:	2100      	movs	r1, #0
 80129ee:	4602      	mov	r2, r0
 80129f0:	4620      	mov	r0, r4
 80129f2:	f7ff fc77 	bl	80122e4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80129f6:	4606      	mov	r6, r0
 80129f8:	b940      	cbnz	r0, 8012a0c <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80129fa:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80129fe:	7ea3      	ldrb	r3, [r4, #26]
 8012a00:	f043 0303 	orr.w	r3, r3, #3
 8012a04:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8012a06:	4628      	mov	r0, r5
 8012a08:	b004      	add	sp, #16
 8012a0a:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012a0c:	1d25      	adds	r5, r4, #4
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f002 fbda 	bl	80151c8 <ip4_route>
  if (netif == NULL) {
 8012a14:	b1a0      	cbz	r0, 8012a40 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8012a16:	2206      	movs	r2, #6
 8012a18:	9201      	str	r2, [sp, #4]
 8012a1a:	7a62      	ldrb	r2, [r4, #9]
 8012a1c:	9002      	str	r0, [sp, #8]
 8012a1e:	9200      	str	r2, [sp, #0]
 8012a20:	7aa3      	ldrb	r3, [r4, #10]
 8012a22:	462a      	mov	r2, r5
 8012a24:	4621      	mov	r1, r4
 8012a26:	4630      	mov	r0, r6
 8012a28:	f002 fd40 	bl	80154ac <ip4_output_if>
 8012a2c:	4605      	mov	r5, r0
  pbuf_free(p);
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7fc fdd6 	bl	800f5e0 <pbuf_free>
 8012a34:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8012a36:	b135      	cbz	r5, 8012a46 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8012a38:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012a3c:	76a3      	strb	r3, [r4, #26]
 8012a3e:	e7e2      	b.n	8012a06 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8012a40:	f06f 0503 	mvn.w	r5, #3
 8012a44:	e7f3      	b.n	8012a2e <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012a46:	f023 0303 	bic.w	r3, r3, #3
 8012a4a:	e7f7      	b.n	8012a3c <tcp_send_empty_ack+0x5a>

08012a4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a50:	7d03      	ldrb	r3, [r0, #20]
{
 8012a52:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a54:	2b01      	cmp	r3, #1
{
 8012a56:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a58:	d106      	bne.n	8012a68 <tcp_output+0x1c>
 8012a5a:	4ba4      	ldr	r3, [pc, #656]	; (8012cec <tcp_output+0x2a0>)
 8012a5c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8012a60:	49a3      	ldr	r1, [pc, #652]	; (8012cf0 <tcp_output+0x2a4>)
 8012a62:	48a4      	ldr	r0, [pc, #656]	; (8012cf4 <tcp_output+0x2a8>)
 8012a64:	f003 ff10 	bl	8016888 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a68:	4ba3      	ldr	r3, [pc, #652]	; (8012cf8 <tcp_output+0x2ac>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	42a3      	cmp	r3, r4
 8012a6e:	d04f      	beq.n	8012b10 <tcp_output+0xc4>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8012a74:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8012a78:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a7a:	429e      	cmp	r6, r3
 8012a7c:	bf28      	it	cs
 8012a7e:	461e      	movcs	r6, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8012a80:	7ea3      	ldrb	r3, [r4, #26]
 8012a82:	0799      	lsls	r1, r3, #30
 8012a84:	d510      	bpl.n	8012aa8 <tcp_output+0x5c>
 8012a86:	b92d      	cbnz	r5, 8012a94 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8012a88:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8012a8a:	b007      	add	sp, #28
 8012a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8012a90:	f7ff bfa7 	b.w	80129e2 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8012a94:	68eb      	ldr	r3, [r5, #12]
 8012a96:	6858      	ldr	r0, [r3, #4]
 8012a98:	f7fb fccf 	bl	800e43a <lwip_htonl>
 8012a9c:	892b      	ldrh	r3, [r5, #8]
 8012a9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012aa0:	1a9b      	subs	r3, r3, r2
 8012aa2:	4418      	add	r0, r3
     (seg == NULL ||
 8012aa4:	42b0      	cmp	r0, r6
 8012aa6:	d8ef      	bhi.n	8012a88 <tcp_output+0x3c>
  useg = pcb->unacked;
 8012aa8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8012aaa:	2f00      	cmp	r7, #0
 8012aac:	d133      	bne.n	8012b16 <tcp_output+0xca>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012aae:	f104 0804 	add.w	r8, r4, #4
 8012ab2:	4640      	mov	r0, r8
 8012ab4:	f002 fb88 	bl	80151c8 <ip4_route>
  if (netif == NULL) {
 8012ab8:	4681      	mov	r9, r0
 8012aba:	2800      	cmp	r0, #0
 8012abc:	f000 813a 	beq.w	8012d34 <tcp_output+0x2e8>
  if (ip_addr_isany(&pcb->local_ip)) {
 8012ac0:	6823      	ldr	r3, [r4, #0]
 8012ac2:	b90b      	cbnz	r3, 8012ac8 <tcp_output+0x7c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ac4:	6843      	ldr	r3, [r0, #4]
 8012ac6:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8012ac8:	b1cd      	cbz	r5, 8012afe <tcp_output+0xb2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012aca:	68eb      	ldr	r3, [r5, #12]
 8012acc:	6858      	ldr	r0, [r3, #4]
 8012ace:	f7fb fcb4 	bl	800e43a <lwip_htonl>
 8012ad2:	892b      	ldrh	r3, [r5, #8]
 8012ad4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012ad6:	1a9b      	subs	r3, r3, r2
 8012ad8:	4418      	add	r0, r3
  if (seg != NULL &&
 8012ada:	42b0      	cmp	r0, r6
 8012adc:	d96e      	bls.n	8012bbc <tcp_output+0x170>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012ade:	2e00      	cmp	r6, #0
 8012ae0:	d06c      	beq.n	8012bbc <tcp_output+0x170>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8012ae2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8012ae6:	42b3      	cmp	r3, r6
 8012ae8:	d168      	bne.n	8012bbc <tcp_output+0x170>
 8012aea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d165      	bne.n	8012bbc <tcp_output+0x170>
    if (pcb->persist_backoff == 0) {
 8012af0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8012af4:	b91b      	cbnz	r3, 8012afe <tcp_output+0xb2>
      pcb->persist_cnt = 0;
 8012af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012afa:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 8012afe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012b00:	b913      	cbnz	r3, 8012b08 <tcp_output+0xbc>
    pcb->unsent_oversize = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8012b08:	7ea3      	ldrb	r3, [r4, #26]
 8012b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b0e:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8012b10:	2000      	movs	r0, #0
 8012b12:	e0e8      	b.n	8012ce6 <tcp_output+0x29a>
 8012b14:	461f      	mov	r7, r3
    for (; useg->next != NULL; useg = useg->next);
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d1fb      	bne.n	8012b14 <tcp_output+0xc8>
 8012b1c:	e7c7      	b.n	8012aae <tcp_output+0x62>
    pcb->unsent = seg->next;
 8012b1e:	682b      	ldr	r3, [r5, #0]
 8012b20:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8012b22:	7d23      	ldrb	r3, [r4, #20]
 8012b24:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012b26:	bf1e      	ittt	ne
 8012b28:	7ea3      	ldrbne	r3, [r4, #26]
 8012b2a:	f023 0303 	bicne.w	r3, r3, #3
 8012b2e:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b30:	68eb      	ldr	r3, [r5, #12]
 8012b32:	6858      	ldr	r0, [r3, #4]
 8012b34:	f7fb fc81 	bl	800e43a <lwip_htonl>
 8012b38:	68e9      	ldr	r1, [r5, #12]
 8012b3a:	4683      	mov	fp, r0
 8012b3c:	8988      	ldrh	r0, [r1, #12]
 8012b3e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8012b42:	f7fb fc77 	bl	800e434 <lwip_htons>
 8012b46:	f010 0003 	ands.w	r0, r0, #3
 8012b4a:	bf18      	it	ne
 8012b4c:	2001      	movne	r0, #1
 8012b4e:	eb0b 030a 	add.w	r3, fp, sl
 8012b52:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8012b56:	68ea      	ldr	r2, [r5, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b58:	1a1b      	subs	r3, r3, r0
 8012b5a:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8012b5c:	bfb8      	it	lt
 8012b5e:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8012b60:	8990      	ldrh	r0, [r2, #12]
 8012b62:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8012b66:	f7fb fc65 	bl	800e434 <lwip_htons>
 8012b6a:	f010 0003 	ands.w	r0, r0, #3
 8012b6e:	bf18      	it	ne
 8012b70:	2001      	movne	r0, #1
 8012b72:	eb10 0f0a 	cmn.w	r0, sl
 8012b76:	f000 80d9 	beq.w	8012d2c <tcp_output+0x2e0>
      seg->next = NULL;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8012b7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012b80:	b913      	cbnz	r3, 8012b88 <tcp_output+0x13c>
        pcb->unacked = seg;
 8012b82:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8012b84:	462f      	mov	r7, r5
 8012b86:	e016      	b.n	8012bb6 <tcp_output+0x16a>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012b88:	68eb      	ldr	r3, [r5, #12]
 8012b8a:	6858      	ldr	r0, [r3, #4]
 8012b8c:	f7fb fc55 	bl	800e43a <lwip_htonl>
 8012b90:	68fa      	ldr	r2, [r7, #12]
 8012b92:	4682      	mov	sl, r0
 8012b94:	6850      	ldr	r0, [r2, #4]
 8012b96:	f7fb fc50 	bl	800e43a <lwip_htonl>
 8012b9a:	ebaa 0000 	sub.w	r0, sl, r0
 8012b9e:	2800      	cmp	r0, #0
 8012ba0:	f280 80c2 	bge.w	8012d28 <tcp_output+0x2dc>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012ba4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	2a00      	cmp	r2, #0
 8012bac:	f040 80aa 	bne.w	8012d04 <tcp_output+0x2b8>
          seg->next = (*cur_seg);
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8012bb4:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8012bb6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8012bb8:	2d00      	cmp	r5, #0
 8012bba:	d0a2      	beq.n	8012b02 <tcp_output+0xb6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012bbc:	68eb      	ldr	r3, [r5, #12]
 8012bbe:	6858      	ldr	r0, [r3, #4]
 8012bc0:	f7fb fc3b 	bl	800e43a <lwip_htonl>
 8012bc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012bc6:	1ac0      	subs	r0, r0, r3
 8012bc8:	892b      	ldrh	r3, [r5, #8]
 8012bca:	4418      	add	r0, r3
  while (seg != NULL &&
 8012bcc:	42b0      	cmp	r0, r6
 8012bce:	d896      	bhi.n	8012afe <tcp_output+0xb2>
    LWIP_ASSERT("RST not expected here!",
 8012bd0:	68eb      	ldr	r3, [r5, #12]
 8012bd2:	8998      	ldrh	r0, [r3, #12]
 8012bd4:	f7fb fc2e 	bl	800e434 <lwip_htons>
 8012bd8:	0742      	lsls	r2, r0, #29
 8012bda:	d506      	bpl.n	8012bea <tcp_output+0x19e>
 8012bdc:	4b43      	ldr	r3, [pc, #268]	; (8012cec <tcp_output+0x2a0>)
 8012bde:	f240 4246 	movw	r2, #1094	; 0x446
 8012be2:	4946      	ldr	r1, [pc, #280]	; (8012cfc <tcp_output+0x2b0>)
 8012be4:	4843      	ldr	r0, [pc, #268]	; (8012cf4 <tcp_output+0x2a8>)
 8012be6:	f003 fe4f 	bl	8016888 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012bea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012bec:	b1b3      	cbz	r3, 8012c1c <tcp_output+0x1d0>
 8012bee:	7ea2      	ldrb	r2, [r4, #26]
 8012bf0:	f012 0f44 	tst.w	r2, #68	; 0x44
 8012bf4:	d112      	bne.n	8012c1c <tcp_output+0x1d0>
 8012bf6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8012bf8:	b12b      	cbz	r3, 8012c06 <tcp_output+0x1ba>
 8012bfa:	6819      	ldr	r1, [r3, #0]
 8012bfc:	b971      	cbnz	r1, 8012c1c <tcp_output+0x1d0>
 8012bfe:	8919      	ldrh	r1, [r3, #8]
 8012c00:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8012c02:	4299      	cmp	r1, r3
 8012c04:	d20a      	bcs.n	8012c1c <tcp_output+0x1d0>
 8012c06:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8012c0a:	b13b      	cbz	r3, 8012c1c <tcp_output+0x1d0>
 8012c0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8012c10:	2b08      	cmp	r3, #8
 8012c12:	d803      	bhi.n	8012c1c <tcp_output+0x1d0>
 8012c14:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8012c18:	f43f af71 	beq.w	8012afe <tcp_output+0xb2>
    if (pcb->state != SYN_SENT) {
 8012c1c:	7d23      	ldrb	r3, [r4, #20]
 8012c1e:	2b02      	cmp	r3, #2
 8012c20:	d009      	beq.n	8012c36 <tcp_output+0x1ea>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c22:	68eb      	ldr	r3, [r5, #12]
 8012c24:	2010      	movs	r0, #16
 8012c26:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 8012c2a:	f7fb fc03 	bl	800e434 <lwip_htons>
 8012c2e:	68ea      	ldr	r2, [r5, #12]
 8012c30:	ea4a 0000 	orr.w	r0, sl, r0
 8012c34:	8190      	strh	r0, [r2, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8012c36:	686b      	ldr	r3, [r5, #4]
 8012c38:	89db      	ldrh	r3, [r3, #14]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	f47f af6f 	bne.w	8012b1e <tcp_output+0xd2>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c40:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c42:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012c46:	f7fb fbf8 	bl	800e43a <lwip_htonl>
 8012c4a:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c4e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8012c50:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012c54:	f7fb fbee 	bl	800e434 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8012c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c5c:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012c60:	4413      	add	r3, r2
 8012c62:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012c64:	7aab      	ldrb	r3, [r5, #10]
 8012c66:	07db      	lsls	r3, r3, #31
 8012c68:	d50c      	bpl.n	8012c84 <tcp_output+0x238>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8012c6a:	4641      	mov	r1, r8
 8012c6c:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012c70:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8012c74:	f7fd ff54 	bl	8010b20 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012c78:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8012c7c:	f7fb fbdd 	bl	800e43a <lwip_htonl>
 8012c80:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012c84:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8012c88:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8012c8a:	bfbc      	itt	lt
 8012c8c:	2300      	movlt	r3, #0
 8012c8e:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c92:	b93b      	cbnz	r3, 8012ca4 <tcp_output+0x258>
    pcb->rttest = tcp_ticks;
 8012c94:	4a1a      	ldr	r2, [pc, #104]	; (8012d00 <tcp_output+0x2b4>)
 8012c96:	68eb      	ldr	r3, [r5, #12]
 8012c98:	6812      	ldr	r2, [r2, #0]
 8012c9a:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c9c:	6858      	ldr	r0, [r3, #4]
 8012c9e:	f7fb fbcc 	bl	800e43a <lwip_htonl>
 8012ca2:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ca4:	6868      	ldr	r0, [r5, #4]
 8012ca6:	68ea      	ldr	r2, [r5, #12]
 8012ca8:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012caa:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012cac:	1ad3      	subs	r3, r2, r3
 8012cae:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8012cb0:	1ac9      	subs	r1, r1, r3
 8012cb2:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8012cb4:	8901      	ldrh	r1, [r0, #8]

  seg->p->payload = seg->tcphdr;
 8012cb6:	6042      	str	r2, [r0, #4]
  seg->p->tot_len -= len;
 8012cb8:	1acb      	subs	r3, r1, r3
 8012cba:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	7413      	strb	r3, [r2, #16]
 8012cc0:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012cc2:	2206      	movs	r2, #6
 8012cc4:	9201      	str	r2, [sp, #4]
 8012cc6:	7a62      	ldrb	r2, [r4, #9]
 8012cc8:	7aa3      	ldrb	r3, [r4, #10]
 8012cca:	9200      	str	r2, [sp, #0]
 8012ccc:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cd0:	4642      	mov	r2, r8
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	f002 fbea 	bl	80154ac <ip4_output_if>
    if (err != ERR_OK) {
 8012cd8:	2800      	cmp	r0, #0
 8012cda:	f43f af20 	beq.w	8012b1e <tcp_output+0xd2>
      pcb->flags |= TF_NAGLEMEMERR;
 8012cde:	7ea3      	ldrb	r3, [r4, #26]
 8012ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012ce4:	76a3      	strb	r3, [r4, #26]
}
 8012ce6:	b007      	add	sp, #28
 8012ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cec:	08021b27 	.word	0x08021b27
 8012cf0:	08021abc 	.word	0x08021abc
 8012cf4:	08018495 	.word	0x08018495
 8012cf8:	2000d99c 	.word	0x2000d99c
 8012cfc:	08021ae2 	.word	0x08021ae2
 8012d00:	2000d98c 	.word	0x2000d98c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d04:	68d2      	ldr	r2, [r2, #12]
 8012d06:	9305      	str	r3, [sp, #20]
 8012d08:	6850      	ldr	r0, [r2, #4]
 8012d0a:	f7fb fb96 	bl	800e43a <lwip_htonl>
 8012d0e:	68e9      	ldr	r1, [r5, #12]
 8012d10:	4682      	mov	sl, r0
 8012d12:	6848      	ldr	r0, [r1, #4]
 8012d14:	f7fb fb91 	bl	800e43a <lwip_htonl>
 8012d18:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	9b05      	ldr	r3, [sp, #20]
 8012d20:	f6bf af46 	bge.w	8012bb0 <tcp_output+0x164>
              cur_seg = &((*cur_seg)->next );
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	e73f      	b.n	8012ba8 <tcp_output+0x15c>
          useg->next = seg;
 8012d28:	603d      	str	r5, [r7, #0]
 8012d2a:	e72b      	b.n	8012b84 <tcp_output+0x138>
      tcp_seg_free(seg);
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f7fd f95f 	bl	800fff0 <tcp_seg_free>
 8012d32:	e740      	b.n	8012bb6 <tcp_output+0x16a>
    return ERR_RTE;
 8012d34:	f06f 0003 	mvn.w	r0, #3
 8012d38:	e7d5      	b.n	8012ce6 <tcp_output+0x29a>
 8012d3a:	bf00      	nop

08012d3c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d40:	4681      	mov	r9, r0
 8012d42:	b085      	sub	sp, #20
 8012d44:	460e      	mov	r6, r1
 8012d46:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012d48:	2114      	movs	r1, #20
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	2001      	movs	r0, #1
{
 8012d4e:	461f      	mov	r7, r3
 8012d50:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8012d54:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012d58:	f7fc fcaa 	bl	800f6b0 <pbuf_alloc>
  if (p == NULL) {
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d03c      	beq.n	8012ddc <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012d62:	8943      	ldrh	r3, [r0, #10]
 8012d64:	2b13      	cmp	r3, #19
 8012d66:	d806      	bhi.n	8012d76 <tcp_rst+0x3a>
 8012d68:	4b1e      	ldr	r3, [pc, #120]	; (8012de4 <tcp_rst+0xa8>)
 8012d6a:	f240 524d 	movw	r2, #1357	; 0x54d
 8012d6e:	491e      	ldr	r1, [pc, #120]	; (8012de8 <tcp_rst+0xac>)
 8012d70:	481e      	ldr	r0, [pc, #120]	; (8012dec <tcp_rst+0xb0>)
 8012d72:	f003 fd89 	bl	8016888 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 8012d76:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 8012d78:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8012d7a:	f7fb fb5b 	bl	800e434 <lwip_htons>
 8012d7e:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012d80:	4650      	mov	r0, sl
 8012d82:	f7fb fb57 	bl	800e434 <lwip_htons>
 8012d86:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012d88:	4648      	mov	r0, r9
 8012d8a:	f7fb fb56 	bl	800e43a <lwip_htonl>
 8012d8e:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7fb fb52 	bl	800e43a <lwip_htonl>
 8012d96:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012d98:	f245 0014 	movw	r0, #20500	; 0x5014
 8012d9c:	f7fb fb4a 	bl	800e434 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012da0:	2308      	movs	r3, #8
 8012da2:	2600      	movs	r6, #0
 8012da4:	73a3      	strb	r3, [r4, #14]
 8012da6:	2360      	movs	r3, #96	; 0x60
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012da8:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012daa:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 8012dac:	7426      	strb	r6, [r4, #16]
 8012dae:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8012db0:	74a6      	strb	r6, [r4, #18]
 8012db2:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012db4:	4638      	mov	r0, r7
 8012db6:	f002 fa07 	bl	80151c8 <ip4_route>
  if (netif != NULL) {
 8012dba:	b148      	cbz	r0, 8012dd0 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012dbc:	2306      	movs	r3, #6
 8012dbe:	9002      	str	r0, [sp, #8]
 8012dc0:	e9cd 6300 	strd	r6, r3, [sp]
 8012dc4:	463a      	mov	r2, r7
 8012dc6:	23ff      	movs	r3, #255	; 0xff
 8012dc8:	4641      	mov	r1, r8
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f002 fb6e 	bl	80154ac <ip4_output_if>
  }
  pbuf_free(p);
 8012dd0:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012dd2:	b005      	add	sp, #20
 8012dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8012dd8:	f7fc bc02 	b.w	800f5e0 <pbuf_free>
}
 8012ddc:	b005      	add	sp, #20
 8012dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de2:	bf00      	nop
 8012de4:	08021b27 	.word	0x08021b27
 8012de8:	08021af9 	.word	0x08021af9
 8012dec:	08018495 	.word	0x08018495

08012df0 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8012df0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8012df2:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8012df4:	b1a2      	cbz	r2, 8012e20 <tcp_rexmit_rto+0x30>
 8012df6:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012df8:	680b      	ldr	r3, [r1, #0]
 8012dfa:	b97b      	cbnz	r3, 8012e1c <tcp_rexmit_rto+0x2c>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012dfc:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8012dfe:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e00:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012e04:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8012e08:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8012e0a:	bf1c      	itt	ne
 8012e0c:	3301      	addne	r3, #1
 8012e0e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012e12:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8012e14:	bc10      	pop	{r4}
  pcb->rttest = 0;
 8012e16:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 8012e18:	f7ff be18 	b.w	8012a4c <tcp_output>
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	e7eb      	b.n	8012df8 <tcp_rexmit_rto+0x8>
}
 8012e20:	bc10      	pop	{r4}
 8012e22:	4770      	bx	lr

08012e24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012e26:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8012e28:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8012e2a:	b1ad      	cbz	r5, 8012e58 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8012e2c:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8012e2e:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8012e32:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8012e34:	6833      	ldr	r3, [r6, #0]
 8012e36:	b983      	cbnz	r3, 8012e5a <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8012e38:	6833      	ldr	r3, [r6, #0]
 8012e3a:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8012e3c:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e3e:	682b      	ldr	r3, [r5, #0]
 8012e40:	b90b      	cbnz	r3, 8012e46 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e42:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e46:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8012e4a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8012e4c:	bf1c      	itt	ne
 8012e4e:	3301      	addne	r3, #1
 8012e50:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e54:	2300      	movs	r3, #0
 8012e56:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	6858      	ldr	r0, [r3, #4]
 8012e5e:	f7fb faec 	bl	800e43a <lwip_htonl>
 8012e62:	68eb      	ldr	r3, [r5, #12]
 8012e64:	4607      	mov	r7, r0
 8012e66:	6858      	ldr	r0, [r3, #4]
 8012e68:	f7fb fae7 	bl	800e43a <lwip_htonl>
 8012e6c:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	dae2      	bge.n	8012e38 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8012e72:	6836      	ldr	r6, [r6, #0]
 8012e74:	e7de      	b.n	8012e34 <tcp_rexmit+0x10>

08012e76 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012e76:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012e7c:	b30b      	cbz	r3, 8012ec2 <tcp_rexmit_fast+0x4c>
 8012e7e:	7e83      	ldrb	r3, [r0, #26]
 8012e80:	075b      	lsls	r3, r3, #29
 8012e82:	d41e      	bmi.n	8012ec2 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8012e84:	f7ff ffce 	bl	8012e24 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012e88:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8012e8c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8012e90:	4293      	cmp	r3, r2
 8012e92:	bf38      	it	cc
 8012e94:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012e96:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012e98:	bf28      	it	cs
 8012e9a:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012e9c:	0059      	lsls	r1, r3, #1
 8012e9e:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ea0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012ea4:	bf38      	it	cc
 8012ea6:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012eaa:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8012eae:	440b      	add	r3, r1
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012eb6:	7ea3      	ldrb	r3, [r4, #26]
 8012eb8:	f043 0304 	orr.w	r3, r3, #4
 8012ebc:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	8623      	strh	r3, [r4, #48]	; 0x30
  }
}
 8012ec2:	bd10      	pop	{r4, pc}

08012ec4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012ec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012ec6:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012ec8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012eca:	3801      	subs	r0, #1
 8012ecc:	f7fb fab5 	bl	800e43a <lwip_htonl>
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f7ff fa05 	bl	80122e4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8012eda:	4605      	mov	r5, r0
 8012edc:	b1c8      	cbz	r0, 8012f12 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012ede:	1d26      	adds	r6, r4, #4
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f002 f971 	bl	80151c8 <ip4_route>
  if (netif == NULL) {
 8012ee6:	b188      	cbz	r0, 8012f0c <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012ee8:	2200      	movs	r2, #0
 8012eea:	2106      	movs	r1, #6
 8012eec:	7aa3      	ldrb	r3, [r4, #10]
 8012eee:	e9cd 2100 	strd	r2, r1, [sp]
 8012ef2:	9002      	str	r0, [sp, #8]
 8012ef4:	4621      	mov	r1, r4
 8012ef6:	4632      	mov	r2, r6
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f002 fad7 	bl	80154ac <ip4_output_if>
 8012efe:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012f00:	4628      	mov	r0, r5
 8012f02:	f7fc fb6d 	bl	800f5e0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8012f06:	4620      	mov	r0, r4
 8012f08:	b004      	add	sp, #16
 8012f0a:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8012f0c:	f06f 0403 	mvn.w	r4, #3
 8012f10:	e7f6      	b.n	8012f00 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8012f12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012f16:	e7f6      	b.n	8012f06 <tcp_keepalive+0x42>

08012f18 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012f18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012f1c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8012f1e:	4606      	mov	r6, r0

  if (seg == NULL) {
 8012f20:	b914      	cbnz	r4, 8012f28 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8012f22:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8012f24:	2c00      	cmp	r4, #0
 8012f26:	d041      	beq.n	8012fac <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f28:	68e3      	ldr	r3, [r4, #12]
 8012f2a:	8998      	ldrh	r0, [r3, #12]
 8012f2c:	f7fb fa82 	bl	800e434 <lwip_htons>
 8012f30:	f010 0501 	ands.w	r5, r0, #1
 8012f34:	bf18      	it	ne
 8012f36:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012f38:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f3a:	bf1c      	itt	ne
 8012f3c:	fab5 f585 	clzne	r5, r5
 8012f40:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012f42:	685a      	ldr	r2, [r3, #4]
 8012f44:	f085 0101 	eor.w	r1, r5, #1
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f7ff f9cb 	bl	80122e4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8012f4e:	4607      	mov	r7, r0
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d03d      	beq.n	8012fd0 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012f54:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8012f58:	b365      	cbz	r5, 8012fb4 <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012f5a:	2011      	movs	r0, #17
 8012f5c:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8012f60:	f7fb fa68 	bl	800e434 <lwip_htons>
 8012f64:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8012f68:	b2ad      	uxth	r5, r5
 8012f6a:	4328      	orrs	r0, r5
 8012f6c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f70:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012f72:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f74:	6858      	ldr	r0, [r3, #4]
 8012f76:	f7fb fa60 	bl	800e43a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f7a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f7c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f7e:	1a1b      	subs	r3, r3, r0
 8012f80:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8012f82:	bfb8      	it	lt
 8012f84:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012f86:	4620      	mov	r0, r4
 8012f88:	f002 f91e 	bl	80151c8 <ip4_route>
  if (netif == NULL) {
 8012f8c:	b1e8      	cbz	r0, 8012fca <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012f8e:	2200      	movs	r2, #0
 8012f90:	2106      	movs	r1, #6
 8012f92:	9002      	str	r0, [sp, #8]
 8012f94:	e9cd 2100 	strd	r2, r1, [sp]
 8012f98:	7ab3      	ldrb	r3, [r6, #10]
 8012f9a:	4622      	mov	r2, r4
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4638      	mov	r0, r7
 8012fa0:	f002 fa84 	bl	80154ac <ip4_output_if>
 8012fa4:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f7fc fb1a 	bl	800f5e0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8012fac:	4620      	mov	r0, r4
 8012fae:	b004      	add	sp, #16
 8012fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012fb4:	6860      	ldr	r0, [r4, #4]
 8012fb6:	8922      	ldrh	r2, [r4, #8]
 8012fb8:	8903      	ldrh	r3, [r0, #8]
 8012fba:	f108 0114 	add.w	r1, r8, #20
 8012fbe:	1a9b      	subs	r3, r3, r2
 8012fc0:	b29b      	uxth	r3, r3
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	f7fc fdae 	bl	800fb24 <pbuf_copy_partial>
 8012fc8:	e7d2      	b.n	8012f70 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8012fca:	f06f 0403 	mvn.w	r4, #3
 8012fce:	e7ea      	b.n	8012fa6 <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8012fd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012fd4:	e7ea      	b.n	8012fac <tcp_zero_window_probe+0x94>
	...

08012fd8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012fde:	200a      	movs	r0, #10
{
 8012fe0:	460f      	mov	r7, r1
 8012fe2:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012fe4:	f7fc f922 	bl	800f22c <memp_malloc>
  if (timeout == NULL) {
 8012fe8:	4604      	mov	r4, r0
 8012fea:	b938      	cbnz	r0, 8012ffc <sys_timeout+0x24>
        t->next = timeout;
        break;
      }
    }
  }
}
 8012fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012ff0:	4b1c      	ldr	r3, [pc, #112]	; (8013064 <sys_timeout+0x8c>)
 8012ff2:	22d4      	movs	r2, #212	; 0xd4
 8012ff4:	491c      	ldr	r1, [pc, #112]	; (8013068 <sys_timeout+0x90>)
 8012ff6:	481d      	ldr	r0, [pc, #116]	; (801306c <sys_timeout+0x94>)
 8012ff8:	f003 bc46 	b.w	8016888 <iprintf>
  now = sys_now();
 8012ffc:	f7f3 f8ce 	bl	800619c <sys_now>
  if (next_timeout == NULL) {
 8013000:	4a1b      	ldr	r2, [pc, #108]	; (8013070 <sys_timeout+0x98>)
 8013002:	491c      	ldr	r1, [pc, #112]	; (8013074 <sys_timeout+0x9c>)
 8013004:	6813      	ldr	r3, [r2, #0]
 8013006:	b95b      	cbnz	r3, 8013020 <sys_timeout+0x48>
    timeouts_last_time = now;
 8013008:	6008      	str	r0, [r1, #0]
    diff = 0;
 801300a:	4618      	mov	r0, r3
  timeout->next = NULL;
 801300c:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 801300e:	4428      	add	r0, r5
  timeout->next = NULL;
 8013010:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8013012:	e9c4 7602 	strd	r7, r6, [r4, #8]
  timeout->time = msecs + diff;
 8013016:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8013018:	b92b      	cbnz	r3, 8013026 <sys_timeout+0x4e>
    next_timeout = timeout;
 801301a:	6014      	str	r4, [r2, #0]
}
 801301c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8013020:	6809      	ldr	r1, [r1, #0]
 8013022:	1a40      	subs	r0, r0, r1
 8013024:	e7f2      	b.n	801300c <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8013026:	6859      	ldr	r1, [r3, #4]
 8013028:	42a9      	cmp	r1, r5
 801302a:	d903      	bls.n	8013034 <sys_timeout+0x5c>
    next_timeout->time -= msecs;
 801302c:	1b4d      	subs	r5, r1, r5
 801302e:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8013030:	6023      	str	r3, [r4, #0]
 8013032:	e7f2      	b.n	801301a <sys_timeout+0x42>
 8013034:	4618      	mov	r0, r3
      timeout->time -= t->time;
 8013036:	6841      	ldr	r1, [r0, #4]
 8013038:	6862      	ldr	r2, [r4, #4]
 801303a:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 801303c:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 801303e:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8013040:	b139      	cbz	r1, 8013052 <sys_timeout+0x7a>
 8013042:	684e      	ldr	r6, [r1, #4]
 8013044:	42b2      	cmp	r2, r6
 8013046:	d301      	bcc.n	801304c <sys_timeout+0x74>
 8013048:	4608      	mov	r0, r1
 801304a:	e7f4      	b.n	8013036 <sys_timeout+0x5e>
          t->next->time -= timeout->time;
 801304c:	1ab2      	subs	r2, r6, r2
 801304e:	604a      	str	r2, [r1, #4]
 8013050:	e004      	b.n	801305c <sys_timeout+0x84>
        } else if (timeout->time > msecs) {
 8013052:	42aa      	cmp	r2, r5
 8013054:	d902      	bls.n	801305c <sys_timeout+0x84>
          timeout->time = msecs + next_timeout->time;
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	441d      	add	r5, r3
 801305a:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 801305c:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 801305e:	6004      	str	r4, [r0, #0]
        break;
 8013060:	e7dc      	b.n	801301c <sys_timeout+0x44>
 8013062:	bf00      	nop
 8013064:	08021dd0 	.word	0x08021dd0
 8013068:	08021e04 	.word	0x08021e04
 801306c:	08018495 	.word	0x08018495
 8013070:	20004fe8 	.word	0x20004fe8
 8013074:	20004ff0 	.word	0x20004ff0

08013078 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013078:	4b08      	ldr	r3, [pc, #32]	; (801309c <tcp_timer_needed+0x24>)
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	b962      	cbnz	r2, 8013098 <tcp_timer_needed+0x20>
 801307e:	4a08      	ldr	r2, [pc, #32]	; (80130a0 <tcp_timer_needed+0x28>)
 8013080:	6812      	ldr	r2, [r2, #0]
 8013082:	b912      	cbnz	r2, 801308a <tcp_timer_needed+0x12>
 8013084:	4a07      	ldr	r2, [pc, #28]	; (80130a4 <tcp_timer_needed+0x2c>)
 8013086:	6812      	ldr	r2, [r2, #0]
 8013088:	b132      	cbz	r2, 8013098 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801308a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801308c:	4906      	ldr	r1, [pc, #24]	; (80130a8 <tcp_timer_needed+0x30>)
    tcpip_tcp_timer_active = 1;
 801308e:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013090:	20fa      	movs	r0, #250	; 0xfa
 8013092:	2200      	movs	r2, #0
 8013094:	f7ff bfa0 	b.w	8012fd8 <sys_timeout>
}
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	20004fec 	.word	0x20004fec
 80130a0:	2000d988 	.word	0x2000d988
 80130a4:	2000d998 	.word	0x2000d998
 80130a8:	080130ad 	.word	0x080130ad

080130ac <tcpip_tcp_timer>:
{
 80130ac:	b508      	push	{r3, lr}
  tcp_tmr();
 80130ae:	f7fd fbbb 	bl	8010828 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80130b2:	4b08      	ldr	r3, [pc, #32]	; (80130d4 <tcpip_tcp_timer+0x28>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	b913      	cbnz	r3, 80130be <tcpip_tcp_timer+0x12>
 80130b8:	4b07      	ldr	r3, [pc, #28]	; (80130d8 <tcpip_tcp_timer+0x2c>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	b133      	cbz	r3, 80130cc <tcpip_tcp_timer+0x20>
}
 80130be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130c2:	2200      	movs	r2, #0
 80130c4:	4905      	ldr	r1, [pc, #20]	; (80130dc <tcpip_tcp_timer+0x30>)
 80130c6:	20fa      	movs	r0, #250	; 0xfa
 80130c8:	f7ff bf86 	b.w	8012fd8 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80130cc:	4a04      	ldr	r2, [pc, #16]	; (80130e0 <tcpip_tcp_timer+0x34>)
 80130ce:	6013      	str	r3, [r2, #0]
}
 80130d0:	bd08      	pop	{r3, pc}
 80130d2:	bf00      	nop
 80130d4:	2000d988 	.word	0x2000d988
 80130d8:	2000d998 	.word	0x2000d998
 80130dc:	080130ad 	.word	0x080130ad
 80130e0:	20004fec 	.word	0x20004fec

080130e4 <sys_timeouts_init>:
{
 80130e4:	b570      	push	{r4, r5, r6, lr}
 80130e6:	2408      	movs	r4, #8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80130e8:	4d07      	ldr	r5, [pc, #28]	; (8013108 <sys_timeouts_init+0x24>)
 80130ea:	4e08      	ldr	r6, [pc, #32]	; (801310c <sys_timeouts_init+0x28>)
 80130ec:	192a      	adds	r2, r5, r4
 80130ee:	5960      	ldr	r0, [r4, r5]
 80130f0:	4631      	mov	r1, r6
 80130f2:	3408      	adds	r4, #8
 80130f4:	f7ff ff70 	bl	8012fd8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130f8:	2c30      	cmp	r4, #48	; 0x30
 80130fa:	d1f7      	bne.n	80130ec <sys_timeouts_init+0x8>
  timeouts_last_time = sys_now();
 80130fc:	f7f3 f84e 	bl	800619c <sys_now>
 8013100:	4b03      	ldr	r3, [pc, #12]	; (8013110 <sys_timeouts_init+0x2c>)
 8013102:	6018      	str	r0, [r3, #0]
}
 8013104:	bd70      	pop	{r4, r5, r6, pc}
 8013106:	bf00      	nop
 8013108:	08021da0 	.word	0x08021da0
 801310c:	08013115 	.word	0x08013115
 8013110:	20004ff0 	.word	0x20004ff0

08013114 <cyclic_timer>:
{
 8013114:	b510      	push	{r4, lr}
 8013116:	4604      	mov	r4, r0
  cyclic->handler();
 8013118:	6843      	ldr	r3, [r0, #4]
 801311a:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801311c:	4622      	mov	r2, r4
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	4902      	ldr	r1, [pc, #8]	; (801312c <cyclic_timer+0x18>)
}
 8013122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8013126:	f7ff bf57 	b.w	8012fd8 <sys_timeout>
 801312a:	bf00      	nop
 801312c:	08013115 	.word	0x08013115

08013130 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8013130:	b470      	push	{r4, r5, r6}
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 8013132:	4c10      	ldr	r4, [pc, #64]	; (8013174 <sys_untimeout+0x44>)
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	b1db      	cbz	r3, 8013170 <sys_untimeout+0x40>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8013138:	2500      	movs	r5, #0
    if ((t->h == handler) && (t->arg == arg)) {
 801313a:	689a      	ldr	r2, [r3, #8]
 801313c:	4282      	cmp	r2, r0
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	d113      	bne.n	801316a <sys_untimeout+0x3a>
 8013142:	68de      	ldr	r6, [r3, #12]
 8013144:	428e      	cmp	r6, r1
 8013146:	d110      	bne.n	801316a <sys_untimeout+0x3a>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8013148:	b96d      	cbnz	r5, 8013166 <sys_untimeout+0x36>
        next_timeout = t->next;
 801314a:	6022      	str	r2, [r4, #0]
      } else {
        prev_t->next = t->next;
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	b11a      	cbz	r2, 8013158 <sys_untimeout+0x28>
        t->next->time += t->time;
 8013150:	6851      	ldr	r1, [r2, #4]
 8013152:	6858      	ldr	r0, [r3, #4]
 8013154:	4401      	add	r1, r0
 8013156:	6051      	str	r1, [r2, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8013158:	4619      	mov	r1, r3
      return;
    }
  }
  return;
}
 801315a:	bc70      	pop	{r4, r5, r6}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801315c:	200a      	movs	r0, #10
 801315e:	f7fc b881 	b.w	800f264 <memp_free>
 8013162:	4613      	mov	r3, r2
 8013164:	e7e9      	b.n	801313a <sys_untimeout+0xa>
        prev_t->next = t->next;
 8013166:	602a      	str	r2, [r5, #0]
 8013168:	e7f0      	b.n	801314c <sys_untimeout+0x1c>
 801316a:	461d      	mov	r5, r3
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801316c:	2a00      	cmp	r2, #0
 801316e:	d1f8      	bne.n	8013162 <sys_untimeout+0x32>
}
 8013170:	bc70      	pop	{r4, r5, r6}
 8013172:	4770      	bx	lr
 8013174:	20004fe8 	.word	0x20004fe8

08013178 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801317c:	4d24      	ldr	r5, [pc, #144]	; (8013210 <sys_timeouts_mbox_fetch+0x98>)
{
 801317e:	4681      	mov	r9, r0
 8013180:	468a      	mov	sl, r1
 8013182:	462e      	mov	r6, r5
  diff = sys_now() - timeouts_last_time;
 8013184:	4c23      	ldr	r4, [pc, #140]	; (8013214 <sys_timeouts_mbox_fetch+0x9c>)
  if (!next_timeout) {
 8013186:	682a      	ldr	r2, [r5, #0]
 8013188:	b932      	cbnz	r2, 8013198 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801318a:	4651      	mov	r1, sl
 801318c:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 801318e:	b003      	add	sp, #12
 8013190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013194:	f002 bef2 	b.w	8015f7c <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 8013198:	f7f3 f800 	bl	800619c <sys_now>
 801319c:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 801319e:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 80131a0:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 80131a2:	685a      	ldr	r2, [r3, #4]
 80131a4:	4290      	cmp	r0, r2
 80131a6:	d927      	bls.n	80131f8 <sys_timeouts_mbox_fetch+0x80>
  if (next_timeout) {
 80131a8:	6833      	ldr	r3, [r6, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0eb      	beq.n	8013186 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 80131ae:	f7f2 fff5 	bl	800619c <sys_now>
    diff = now - timeouts_last_time;
 80131b2:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 80131b4:	4f18      	ldr	r7, [pc, #96]	; (8013218 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 80131b6:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 80131ba:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80131bc:	2900      	cmp	r1, #0
 80131be:	d0e2      	beq.n	8013186 <sys_timeouts_mbox_fetch+0xe>
 80131c0:	684a      	ldr	r2, [r1, #4]
 80131c2:	455a      	cmp	r2, fp
 80131c4:	d8df      	bhi.n	8013186 <sys_timeouts_mbox_fetch+0xe>
        arg = tmptimeout->arg;
 80131c6:	e9d1 8302 	ldrd	r8, r3, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 80131ca:	6820      	ldr	r0, [r4, #0]
        diff -= tmptimeout->time;
 80131cc:	ebab 0b02 	sub.w	fp, fp, r2
        timeouts_last_time += tmptimeout->time;
 80131d0:	4410      	add	r0, r2
        next_timeout = tmptimeout->next;
 80131d2:	680a      	ldr	r2, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 80131d4:	6020      	str	r0, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80131d6:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 80131d8:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 80131da:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80131dc:	f7fc f842 	bl	800f264 <memp_free>
        if (handler != NULL) {
 80131e0:	f1b8 0f00 	cmp.w	r8, #0
 80131e4:	d0e9      	beq.n	80131ba <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 80131e6:	4638      	mov	r0, r7
 80131e8:	f002 ff5f 	bl	80160aa <sys_mutex_lock>
          handler(arg);
 80131ec:	9801      	ldr	r0, [sp, #4]
 80131ee:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 80131f0:	4638      	mov	r0, r7
 80131f2:	f002 ff5f 	bl	80160b4 <sys_mutex_unlock>
 80131f6:	e7e0      	b.n	80131ba <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80131f8:	1a12      	subs	r2, r2, r0
 80131fa:	d0d5      	beq.n	80131a8 <sys_timeouts_mbox_fetch+0x30>
 80131fc:	4651      	mov	r1, sl
 80131fe:	4648      	mov	r0, r9
 8013200:	f002 febc 	bl	8015f7c <sys_arch_mbox_fetch>
 8013204:	3001      	adds	r0, #1
 8013206:	d0cf      	beq.n	80131a8 <sys_timeouts_mbox_fetch+0x30>
}
 8013208:	b003      	add	sp, #12
 801320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801320e:	bf00      	nop
 8013210:	20004fe8 	.word	0x20004fe8
 8013214:	20004ff0 	.word	0x20004ff0
 8013218:	2000af78 	.word	0x2000af78

0801321c <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801321c:	4770      	bx	lr
	...

08013220 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013224:	8943      	ldrh	r3, [r0, #10]
{
 8013226:	b085      	sub	sp, #20
  if (p->len < UDP_HLEN) {
 8013228:	2b07      	cmp	r3, #7
{
 801322a:	4605      	mov	r5, r0
 801322c:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 801322e:	d805      	bhi.n	801323c <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013230:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013232:	b005      	add	sp, #20
 8013234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8013238:	f7fc b9d2 	b.w	800f5e0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801323c:	4e3d      	ldr	r6, [pc, #244]	; (8013334 <udp_input+0x114>)
  udphdr = (struct udp_hdr *)p->payload;
 801323e:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013240:	6831      	ldr	r1, [r6, #0]
 8013242:	6970      	ldr	r0, [r6, #20]
 8013244:	f002 f943 	bl	80154ce <ip4_addr_isbroadcast_u32>
 8013248:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 801324a:	8820      	ldrh	r0, [r4, #0]
 801324c:	f7fb f8f2 	bl	800e434 <lwip_htons>
 8013250:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8013252:	8860      	ldrh	r0, [r4, #2]
 8013254:	f7fb f8ee 	bl	800e434 <lwip_htons>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013258:	e9d6 c104 	ldrd	ip, r1, [r6, #16]
  uncon_pcb = NULL;
 801325c:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801325e:	4a36      	ldr	r2, [pc, #216]	; (8013338 <udp_input+0x118>)
  dest = lwip_ntohs(udphdr->dest);
 8013260:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013262:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 8013264:	46a6      	mov	lr, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013266:	4603      	mov	r3, r0
 8013268:	4693      	mov	fp, r2
 801326a:	9603      	str	r6, [sp, #12]
 801326c:	b99b      	cbnz	r3, 8013296 <udp_input+0x76>
  if (pcb != NULL) {
 801326e:	b91c      	cbnz	r4, 8013278 <udp_input+0x58>
  if (for_us) {
 8013270:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013274:	428b      	cmp	r3, r1
 8013276:	d1db      	bne.n	8013230 <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 8013278:	f06f 0107 	mvn.w	r1, #7
 801327c:	4628      	mov	r0, r5
 801327e:	f7fc f9a9 	bl	800f5d4 <pbuf_header>
 8013282:	2800      	cmp	r0, #0
 8013284:	d034      	beq.n	80132f0 <udp_input+0xd0>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8013286:	4b2d      	ldr	r3, [pc, #180]	; (801333c <udp_input+0x11c>)
 8013288:	f240 1255 	movw	r2, #341	; 0x155
 801328c:	492c      	ldr	r1, [pc, #176]	; (8013340 <udp_input+0x120>)
 801328e:	482d      	ldr	r0, [pc, #180]	; (8013344 <udp_input+0x124>)
 8013290:	f003 fafa 	bl	8016888 <iprintf>
 8013294:	e7cc      	b.n	8013230 <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 8013296:	8a5a      	ldrh	r2, [r3, #18]
 8013298:	4552      	cmp	r2, sl
 801329a:	d126      	bne.n	80132ea <udp_input+0xca>
 801329c:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 801329e:	b307      	cbz	r7, 80132e2 <udp_input+0xc2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132a0:	b13a      	cbz	r2, 80132b2 <udp_input+0x92>
 80132a2:	1c4e      	adds	r6, r1, #1
 80132a4:	d005      	beq.n	80132b2 <udp_input+0x92>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132a6:	404a      	eors	r2, r1
 80132a8:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132aa:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80132ae:	4216      	tst	r6, r2
 80132b0:	d11b      	bne.n	80132ea <udp_input+0xca>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80132b2:	7c1a      	ldrb	r2, [r3, #16]
 80132b4:	0752      	lsls	r2, r2, #29
 80132b6:	d402      	bmi.n	80132be <udp_input+0x9e>
 80132b8:	2c00      	cmp	r4, #0
 80132ba:	bf08      	it	eq
 80132bc:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 80132be:	8a9a      	ldrh	r2, [r3, #20]
 80132c0:	4542      	cmp	r2, r8
 80132c2:	d112      	bne.n	80132ea <udp_input+0xca>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132c4:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 80132c6:	b10a      	cbz	r2, 80132cc <udp_input+0xac>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80132c8:	4562      	cmp	r2, ip
 80132ca:	d10e      	bne.n	80132ea <udp_input+0xca>
        if (prev != NULL) {
 80132cc:	f1be 0f00 	cmp.w	lr, #0
 80132d0:	d005      	beq.n	80132de <udp_input+0xbe>
          prev->next = pcb->next;
 80132d2:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 80132d4:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 80132d8:	f8ce 200c 	str.w	r2, [lr, #12]
          pcb->next = udp_pcbs;
 80132dc:	60d8      	str	r0, [r3, #12]
 80132de:	461c      	mov	r4, r3
 80132e0:	e7ca      	b.n	8013278 <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132e2:	2a00      	cmp	r2, #0
 80132e4:	d0e5      	beq.n	80132b2 <udp_input+0x92>
 80132e6:	428a      	cmp	r2, r1
 80132e8:	d0e3      	beq.n	80132b2 <udp_input+0x92>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132ea:	469e      	mov	lr, r3
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	e7bd      	b.n	801326c <udp_input+0x4c>
    if (pcb != NULL) {
 80132f0:	b164      	cbz	r4, 801330c <udp_input+0xec>
      if (pcb->recv != NULL) {
 80132f2:	69a6      	ldr	r6, [r4, #24]
 80132f4:	2e00      	cmp	r6, #0
 80132f6:	d09b      	beq.n	8013230 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80132f8:	f8cd 8000 	str.w	r8, [sp]
 80132fc:	4b12      	ldr	r3, [pc, #72]	; (8013348 <udp_input+0x128>)
 80132fe:	462a      	mov	r2, r5
 8013300:	4621      	mov	r1, r4
 8013302:	69e0      	ldr	r0, [r4, #28]
 8013304:	47b0      	blx	r6
}
 8013306:	b005      	add	sp, #20
 8013308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801330c:	2f00      	cmp	r7, #0
 801330e:	d18f      	bne.n	8013230 <udp_input+0x10>
 8013310:	9b03      	ldr	r3, [sp, #12]
 8013312:	695b      	ldr	r3, [r3, #20]
 8013314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013318:	2be0      	cmp	r3, #224	; 0xe0
 801331a:	d089      	beq.n	8013230 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801331c:	9b03      	ldr	r3, [sp, #12]
 801331e:	4628      	mov	r0, r5
 8013320:	8999      	ldrh	r1, [r3, #12]
 8013322:	3108      	adds	r1, #8
 8013324:	b209      	sxth	r1, r1
 8013326:	f7fc f958 	bl	800f5da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801332a:	2103      	movs	r1, #3
 801332c:	4628      	mov	r0, r5
 801332e:	f001 ff41 	bl	80151b4 <icmp_dest_unreach>
 8013332:	e77d      	b.n	8013230 <udp_input+0x10>
 8013334:	2000af94 	.word	0x2000af94
 8013338:	2000d9a0 	.word	0x2000d9a0
 801333c:	08021e41 	.word	0x08021e41
 8013340:	08021e70 	.word	0x08021e70
 8013344:	08018495 	.word	0x08018495
 8013348:	2000afa4 	.word	0x2000afa4

0801334c <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801334c:	4b27      	ldr	r3, [pc, #156]	; (80133ec <udp_bind+0xa0>)
{
 801334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8013352:	2900      	cmp	r1, #0
 8013354:	bf08      	it	eq
 8013356:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8013358:	2800      	cmp	r0, #0
 801335a:	d043      	beq.n	80133e4 <udp_bind+0x98>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801335c:	4e24      	ldr	r6, [pc, #144]	; (80133f0 <udp_bind+0xa4>)
 801335e:	f8d6 c000 	ldr.w	ip, [r6]
 8013362:	4665      	mov	r5, ip
 8013364:	b9d5      	cbnz	r5, 801339c <udp_bind+0x50>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 8013366:	2a00      	cmp	r2, #0
 8013368:	d13a      	bne.n	80133e0 <udp_bind+0x94>
 801336a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801336e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8013372:	4b20      	ldr	r3, [pc, #128]	; (80133f4 <udp_bind+0xa8>)
 8013374:	881a      	ldrh	r2, [r3, #0]
 8013376:	4572      	cmp	r2, lr
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013378:	bf08      	it	eq
 801337a:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801337e:	4667      	mov	r7, ip
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013380:	bf1c      	itt	ne
 8013382:	3201      	addne	r2, #1
 8013384:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013386:	b97f      	cbnz	r7, 80133a8 <udp_bind+0x5c>
 8013388:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801338a:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 801338c:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801338e:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013390:	b915      	cbnz	r5, 8013398 <udp_bind+0x4c>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013392:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 8013396:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013398:	2000      	movs	r0, #0
 801339a:	e010      	b.n	80133be <udp_bind+0x72>
    if (pcb == ipcb) {
 801339c:	4285      	cmp	r5, r0
 801339e:	d001      	beq.n	80133a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133a0:	68ed      	ldr	r5, [r5, #12]
 80133a2:	e7df      	b.n	8013364 <udp_bind+0x18>
      rebind = 1;
 80133a4:	2501      	movs	r5, #1
 80133a6:	e7de      	b.n	8013366 <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 80133a8:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 80133ac:	4590      	cmp	r8, r2
 80133ae:	d108      	bne.n	80133c2 <udp_bind+0x76>
 80133b0:	3c01      	subs	r4, #1
 80133b2:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80133b4:	2c00      	cmp	r4, #0
 80133b6:	d1de      	bne.n	8013376 <udp_bind+0x2a>
 80133b8:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 80133ba:	f06f 0007 	mvn.w	r0, #7
}
 80133be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133c2:	68ff      	ldr	r7, [r7, #12]
 80133c4:	e7df      	b.n	8013386 <udp_bind+0x3a>
      if (pcb != ipcb) {
 80133c6:	4283      	cmp	r3, r0
 80133c8:	d006      	beq.n	80133d8 <udp_bind+0x8c>
          if ((ipcb->local_port == port) &&
 80133ca:	8a5c      	ldrh	r4, [r3, #18]
 80133cc:	4294      	cmp	r4, r2
 80133ce:	d103      	bne.n	80133d8 <udp_bind+0x8c>
 80133d0:	681f      	ldr	r7, [r3, #0]
 80133d2:	680c      	ldr	r4, [r1, #0]
 80133d4:	42a7      	cmp	r7, r4
 80133d6:	d0f0      	beq.n	80133ba <udp_bind+0x6e>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d1f3      	bne.n	80133c6 <udp_bind+0x7a>
 80133de:	e7d4      	b.n	801338a <udp_bind+0x3e>
 80133e0:	4663      	mov	r3, ip
 80133e2:	e7fa      	b.n	80133da <udp_bind+0x8e>
    return ERR_VAL;
 80133e4:	f06f 0005 	mvn.w	r0, #5
 80133e8:	e7e9      	b.n	80133be <udp_bind+0x72>
 80133ea:	bf00      	nop
 80133ec:	0802264c 	.word	0x0802264c
 80133f0:	2000d9a0 	.word	0x2000d9a0
 80133f4:	2000009a 	.word	0x2000009a

080133f8 <udp_sendto_if_src>:
{
 80133f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133fc:	460e      	mov	r6, r1
 80133fe:	b085      	sub	sp, #20
 8013400:	4690      	mov	r8, r2
 8013402:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8013404:	4607      	mov	r7, r0
 8013406:	2800      	cmp	r0, #0
 8013408:	d050      	beq.n	80134ac <udp_sendto_if_src+0xb4>
 801340a:	2a00      	cmp	r2, #0
 801340c:	d04e      	beq.n	80134ac <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 801340e:	8a42      	ldrh	r2, [r0, #18]
 8013410:	2a00      	cmp	r2, #0
 8013412:	d033      	beq.n	801347c <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 8013414:	2108      	movs	r1, #8
 8013416:	4630      	mov	r0, r6
 8013418:	f7fc f8dc 	bl	800f5d4 <pbuf_header>
 801341c:	2800      	cmp	r0, #0
 801341e:	d137      	bne.n	8013490 <udp_sendto_if_src+0x98>
 8013420:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013422:	8963      	ldrh	r3, [r4, #10]
 8013424:	2b07      	cmp	r3, #7
 8013426:	d806      	bhi.n	8013436 <udp_sendto_if_src+0x3e>
 8013428:	4b23      	ldr	r3, [pc, #140]	; (80134b8 <udp_sendto_if_src+0xc0>)
 801342a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801342e:	4923      	ldr	r1, [pc, #140]	; (80134bc <udp_sendto_if_src+0xc4>)
 8013430:	4823      	ldr	r0, [pc, #140]	; (80134c0 <udp_sendto_if_src+0xc8>)
 8013432:	f003 fa29 	bl	8016888 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8013436:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8013438:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801343a:	f7fa fffb 	bl	800e434 <lwip_htons>
 801343e:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013440:	4648      	mov	r0, r9
 8013442:	f7fa fff7 	bl	800e434 <lwip_htons>
  udphdr->chksum = 0x0000;
 8013446:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8013448:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 801344a:	71ab      	strb	r3, [r5, #6]
 801344c:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801344e:	8920      	ldrh	r0, [r4, #8]
 8013450:	f7fa fff0 	bl	800e434 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 8013456:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013458:	7abb      	ldrb	r3, [r7, #10]
 801345a:	9202      	str	r2, [sp, #8]
 801345c:	2211      	movs	r2, #17
 801345e:	9201      	str	r2, [sp, #4]
 8013460:	7a7a      	ldrb	r2, [r7, #9]
 8013462:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013464:	9200      	str	r2, [sp, #0]
 8013466:	4620      	mov	r0, r4
 8013468:	4642      	mov	r2, r8
 801346a:	f001 ffa7 	bl	80153bc <ip4_output_if_src>
  if (q != p) {
 801346e:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013470:	4605      	mov	r5, r0
  if (q != p) {
 8013472:	d009      	beq.n	8013488 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 8013474:	4620      	mov	r0, r4
 8013476:	f7fc f8b3 	bl	800f5e0 <pbuf_free>
 801347a:	e005      	b.n	8013488 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801347c:	4601      	mov	r1, r0
 801347e:	f7ff ff65 	bl	801334c <udp_bind>
    if (err != ERR_OK) {
 8013482:	4605      	mov	r5, r0
 8013484:	2800      	cmp	r0, #0
 8013486:	d0c5      	beq.n	8013414 <udp_sendto_if_src+0x1c>
}
 8013488:	4628      	mov	r0, r5
 801348a:	b005      	add	sp, #20
 801348c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013490:	2200      	movs	r2, #0
 8013492:	2108      	movs	r1, #8
 8013494:	2001      	movs	r0, #1
 8013496:	f7fc f90b 	bl	800f6b0 <pbuf_alloc>
    if (q == NULL) {
 801349a:	4604      	mov	r4, r0
 801349c:	b148      	cbz	r0, 80134b2 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 801349e:	8933      	ldrh	r3, [r6, #8]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d0be      	beq.n	8013422 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 80134a4:	4631      	mov	r1, r6
 80134a6:	f7fc faad 	bl	800fa04 <pbuf_chain>
 80134aa:	e7ba      	b.n	8013422 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 80134ac:	f06f 0505 	mvn.w	r5, #5
 80134b0:	e7ea      	b.n	8013488 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 80134b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80134b6:	e7e7      	b.n	8013488 <udp_sendto_if_src+0x90>
 80134b8:	08021e41 	.word	0x08021e41
 80134bc:	08021e84 	.word	0x08021e84
 80134c0:	08018495 	.word	0x08018495

080134c4 <udp_sendto_if>:
{
 80134c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134c6:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80134c8:	b190      	cbz	r0, 80134f0 <udp_sendto_if+0x2c>
 80134ca:	b18a      	cbz	r2, 80134f0 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134cc:	6805      	ldr	r5, [r0, #0]
 80134ce:	b11d      	cbz	r5, 80134d8 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80134d0:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134d4:	2ee0      	cmp	r6, #224	; 0xe0
 80134d6:	d106      	bne.n	80134e6 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 80134d8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80134da:	e9cd 4500 	strd	r4, r5, [sp]
 80134de:	f7ff ff8b 	bl	80133f8 <udp_sendto_if_src>
}
 80134e2:	b002      	add	sp, #8
 80134e4:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80134e6:	6866      	ldr	r6, [r4, #4]
 80134e8:	42b5      	cmp	r5, r6
 80134ea:	d104      	bne.n	80134f6 <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80134ec:	4605      	mov	r5, r0
 80134ee:	e7f4      	b.n	80134da <udp_sendto_if+0x16>
    return ERR_VAL;
 80134f0:	f06f 0005 	mvn.w	r0, #5
 80134f4:	e7f5      	b.n	80134e2 <udp_sendto_if+0x1e>
      return ERR_RTE;
 80134f6:	f06f 0003 	mvn.w	r0, #3
 80134fa:	e7f2      	b.n	80134e2 <udp_sendto_if+0x1e>

080134fc <udp_sendto>:
{
 80134fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134fe:	460e      	mov	r6, r1
 8013500:	4614      	mov	r4, r2
 8013502:	461f      	mov	r7, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8013504:	4605      	mov	r5, r0
 8013506:	b168      	cbz	r0, 8013524 <udp_sendto+0x28>
 8013508:	b162      	cbz	r2, 8013524 <udp_sendto+0x28>
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801350a:	4610      	mov	r0, r2
 801350c:	f001 fe5c 	bl	80151c8 <ip4_route>
  if (netif == NULL) {
 8013510:	b158      	cbz	r0, 801352a <udp_sendto+0x2e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013512:	9000      	str	r0, [sp, #0]
 8013514:	463b      	mov	r3, r7
 8013516:	4622      	mov	r2, r4
 8013518:	4631      	mov	r1, r6
 801351a:	4628      	mov	r0, r5
 801351c:	f7ff ffd2 	bl	80134c4 <udp_sendto_if>
}
 8013520:	b003      	add	sp, #12
 8013522:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 8013524:	f06f 0005 	mvn.w	r0, #5
 8013528:	e7fa      	b.n	8013520 <udp_sendto+0x24>
    return ERR_RTE;
 801352a:	f06f 0003 	mvn.w	r0, #3
 801352e:	e7f7      	b.n	8013520 <udp_sendto+0x24>

08013530 <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8013530:	4602      	mov	r2, r0
 8013532:	b118      	cbz	r0, 801353c <udp_send+0xc>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013534:	8a83      	ldrh	r3, [r0, #20]
 8013536:	3204      	adds	r2, #4
 8013538:	f7ff bfe0 	b.w	80134fc <udp_sendto>
}
 801353c:	f06f 0005 	mvn.w	r0, #5
 8013540:	4770      	bx	lr
	...

08013544 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013544:	b570      	push	{r4, r5, r6, lr}
 8013546:	460d      	mov	r5, r1
 8013548:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801354a:	4604      	mov	r4, r0
 801354c:	b1d0      	cbz	r0, 8013584 <udp_connect+0x40>
 801354e:	b1c9      	cbz	r1, 8013584 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 8013550:	8a42      	ldrh	r2, [r0, #18]
 8013552:	b16a      	cbz	r2, 8013570 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013554:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 8013556:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013558:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801355a:	7c23      	ldrb	r3, [r4, #16]
 801355c:	f043 0304 	orr.w	r3, r3, #4
 8013560:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013562:	4b0b      	ldr	r3, [pc, #44]	; (8013590 <udp_connect+0x4c>)
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	4610      	mov	r0, r2
 8013568:	b940      	cbnz	r0, 801357c <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801356a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801356c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 801356e:	e004      	b.n	801357a <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013570:	4601      	mov	r1, r0
 8013572:	f7ff feeb 	bl	801334c <udp_bind>
    if (err != ERR_OK) {
 8013576:	2800      	cmp	r0, #0
 8013578:	d0ec      	beq.n	8013554 <udp_connect+0x10>
}
 801357a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 801357c:	42a0      	cmp	r0, r4
 801357e:	d004      	beq.n	801358a <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013580:	68c0      	ldr	r0, [r0, #12]
 8013582:	e7f1      	b.n	8013568 <udp_connect+0x24>
    return ERR_VAL;
 8013584:	f06f 0005 	mvn.w	r0, #5
 8013588:	e7f7      	b.n	801357a <udp_connect+0x36>
      return ERR_OK;
 801358a:	2000      	movs	r0, #0
 801358c:	e7f5      	b.n	801357a <udp_connect+0x36>
 801358e:	bf00      	nop
 8013590:	2000d9a0 	.word	0x2000d9a0

08013594 <udp_disconnect>:
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013594:	2300      	movs	r3, #0
 8013596:	6043      	str	r3, [r0, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013598:	8283      	strh	r3, [r0, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 801359a:	7c03      	ldrb	r3, [r0, #16]
 801359c:	f023 0304 	bic.w	r3, r3, #4
 80135a0:	7403      	strb	r3, [r0, #16]
}
 80135a2:	4770      	bx	lr

080135a4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 80135a4:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80135a8:	4770      	bx	lr
	...

080135ac <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80135ac:	4a0a      	ldr	r2, [pc, #40]	; (80135d8 <udp_remove+0x2c>)
{
 80135ae:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 80135b0:	6813      	ldr	r3, [r2, #0]
 80135b2:	4283      	cmp	r3, r0
 80135b4:	d105      	bne.n	80135c2 <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80135b6:	68c3      	ldr	r3, [r0, #12]
 80135b8:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80135ba:	2000      	movs	r0, #0
 80135bc:	f7fb be52 	b.w	800f264 <memp_free>
 80135c0:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d0f9      	beq.n	80135ba <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80135c6:	68da      	ldr	r2, [r3, #12]
 80135c8:	2a00      	cmp	r2, #0
 80135ca:	d0f6      	beq.n	80135ba <udp_remove+0xe>
 80135cc:	428a      	cmp	r2, r1
 80135ce:	d1f7      	bne.n	80135c0 <udp_remove+0x14>
        pcb2->next = pcb->next;
 80135d0:	68ca      	ldr	r2, [r1, #12]
 80135d2:	60da      	str	r2, [r3, #12]
        break;
 80135d4:	e7f1      	b.n	80135ba <udp_remove+0xe>
 80135d6:	bf00      	nop
 80135d8:	2000d9a0 	.word	0x2000d9a0

080135dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80135dc:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80135de:	2000      	movs	r0, #0
 80135e0:	f7fb fe24 	bl	800f22c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80135e4:	4604      	mov	r4, r0
 80135e6:	b128      	cbz	r0, 80135f4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80135e8:	2220      	movs	r2, #32
 80135ea:	2100      	movs	r1, #0
 80135ec:	f003 f89e 	bl	801672c <memset>
    pcb->ttl = UDP_TTL;
 80135f0:	23ff      	movs	r3, #255	; 0xff
 80135f2:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 80135f4:	4620      	mov	r0, r4
 80135f6:	bd10      	pop	{r4, pc}

080135f8 <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 80135f8:	f7ff bff0 	b.w	80135dc <udp_new>

080135fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80135fc:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80135fe:	b138      	cbz	r0, 8013610 <udp_netif_ip_addr_changed+0x14>
 8013600:	6803      	ldr	r3, [r0, #0]
 8013602:	b12b      	cbz	r3, 8013610 <udp_netif_ip_addr_changed+0x14>
 8013604:	b121      	cbz	r1, 8013610 <udp_netif_ip_addr_changed+0x14>
 8013606:	680b      	ldr	r3, [r1, #0]
 8013608:	b113      	cbz	r3, 8013610 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801360a:	4b06      	ldr	r3, [pc, #24]	; (8013624 <udp_netif_ip_addr_changed+0x28>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	b903      	cbnz	r3, 8013612 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8013610:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013612:	681c      	ldr	r4, [r3, #0]
 8013614:	6802      	ldr	r2, [r0, #0]
 8013616:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013618:	bf04      	itt	eq
 801361a:	680a      	ldreq	r2, [r1, #0]
 801361c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	e7f5      	b.n	801360e <udp_netif_ip_addr_changed+0x12>
 8013622:	bf00      	nop
 8013624:	2000d9a0 	.word	0x2000d9a0

08013628 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8013628:	7a43      	ldrb	r3, [r0, #9]
 801362a:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 801362c:	bf1f      	itttt	ne
 801362e:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8013630:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 8013632:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 8013634:	82c3      	strhne	r3, [r0, #22]
  }
}
 8013636:	4770      	bx	lr

08013638 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8013638:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801363a:	8a83      	ldrh	r3, [r0, #20]
{
 801363c:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801363e:	3302      	adds	r3, #2
 8013640:	2b44      	cmp	r3, #68	; 0x44
{
 8013642:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013644:	d906      	bls.n	8013654 <dhcp_option_short+0x1c>
 8013646:	4b0a      	ldr	r3, [pc, #40]	; (8013670 <dhcp_option_short+0x38>)
 8013648:	f240 5282 	movw	r2, #1410	; 0x582
 801364c:	4909      	ldr	r1, [pc, #36]	; (8013674 <dhcp_option_short+0x3c>)
 801364e:	480a      	ldr	r0, [pc, #40]	; (8013678 <dhcp_option_short+0x40>)
 8013650:	f003 f91a 	bl	8016888 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013654:	8aa3      	ldrh	r3, [r4, #20]
 8013656:	6922      	ldr	r2, [r4, #16]
 8013658:	0a28      	lsrs	r0, r5, #8
 801365a:	18d1      	adds	r1, r2, r3
 801365c:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8013660:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013662:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8013664:	b29b      	uxth	r3, r3
 8013666:	4413      	add	r3, r2
 8013668:	82a1      	strh	r1, [r4, #20]
 801366a:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 801366e:	bd38      	pop	{r3, r4, r5, pc}
 8013670:	08022122 	.word	0x08022122
 8013674:	08022157 	.word	0x08022157
 8013678:	08018495 	.word	0x08018495

0801367c <dhcp_option>:
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801367c:	8a83      	ldrh	r3, [r0, #20]
{
 801367e:	b570      	push	{r4, r5, r6, lr}
 8013680:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013682:	3202      	adds	r2, #2
 8013684:	4413      	add	r3, r2
 8013686:	2b44      	cmp	r3, #68	; 0x44
{
 8013688:	4604      	mov	r4, r0
 801368a:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801368c:	d906      	bls.n	801369c <dhcp_option+0x20>
 801368e:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <dhcp_option+0x3c>)
 8013690:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8013694:	4909      	ldr	r1, [pc, #36]	; (80136bc <dhcp_option+0x40>)
 8013696:	480a      	ldr	r0, [pc, #40]	; (80136c0 <dhcp_option+0x44>)
 8013698:	f003 f8f6 	bl	8016888 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801369c:	8aa3      	ldrh	r3, [r4, #20]
 801369e:	6922      	ldr	r2, [r4, #16]
 80136a0:	18d1      	adds	r1, r2, r3
 80136a2:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80136a6:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80136a8:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	4413      	add	r3, r2
 80136ae:	82a1      	strh	r1, [r4, #20]
 80136b0:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
 80136b6:	bf00      	nop
 80136b8:	08022122 	.word	0x08022122
 80136bc:	0802205f 	.word	0x0802205f
 80136c0:	08018495 	.word	0x08018495

080136c4 <dhcp_option_byte>:
{
 80136c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80136c6:	8a83      	ldrh	r3, [r0, #20]
{
 80136c8:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80136ca:	2b43      	cmp	r3, #67	; 0x43
{
 80136cc:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80136ce:	d906      	bls.n	80136de <dhcp_option_byte+0x1a>
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <dhcp_option_byte+0x2c>)
 80136d2:	f240 527b 	movw	r2, #1403	; 0x57b
 80136d6:	4907      	ldr	r1, [pc, #28]	; (80136f4 <dhcp_option_byte+0x30>)
 80136d8:	4807      	ldr	r0, [pc, #28]	; (80136f8 <dhcp_option_byte+0x34>)
 80136da:	f003 f8d5 	bl	8016888 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80136de:	8aa2      	ldrh	r2, [r4, #20]
 80136e0:	6923      	ldr	r3, [r4, #16]
 80136e2:	1c51      	adds	r1, r2, #1
 80136e4:	4413      	add	r3, r2
 80136e6:	82a1      	strh	r1, [r4, #20]
 80136e8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 80136ec:	bd38      	pop	{r3, r4, r5, pc}
 80136ee:	bf00      	nop
 80136f0:	08022122 	.word	0x08022122
 80136f4:	080220a7 	.word	0x080220a7
 80136f8:	08018495 	.word	0x08018495

080136fc <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80136fc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80136fe:	8a83      	ldrh	r3, [r0, #20]
{
 8013700:	4605      	mov	r5, r0
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013702:	3304      	adds	r3, #4
 8013704:	2b44      	cmp	r3, #68	; 0x44
{
 8013706:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013708:	d906      	bls.n	8013718 <dhcp_option_long+0x1c>
 801370a:	4b10      	ldr	r3, [pc, #64]	; (801374c <dhcp_option_long+0x50>)
 801370c:	f240 528a 	movw	r2, #1418	; 0x58a
 8013710:	490f      	ldr	r1, [pc, #60]	; (8013750 <dhcp_option_long+0x54>)
 8013712:	4810      	ldr	r0, [pc, #64]	; (8013754 <dhcp_option_long+0x58>)
 8013714:	f003 f8b8 	bl	8016888 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013718:	8aab      	ldrh	r3, [r5, #20]
 801371a:	692a      	ldr	r2, [r5, #16]
 801371c:	0e20      	lsrs	r0, r4, #24
 801371e:	18d1      	adds	r1, r2, r3
 8013720:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8013724:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013726:	b289      	uxth	r1, r1
 8013728:	4411      	add	r1, r2
 801372a:	0c20      	lsrs	r0, r4, #16
 801372c:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8013730:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013732:	b289      	uxth	r1, r1
 8013734:	4411      	add	r1, r2
 8013736:	0a20      	lsrs	r0, r4, #8
 8013738:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801373c:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801373e:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013740:	b29b      	uxth	r3, r3
 8013742:	4413      	add	r3, r2
 8013744:	82a9      	strh	r1, [r5, #20]
 8013746:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 801374a:	bd38      	pop	{r3, r4, r5, pc}
 801374c:	08022122 	.word	0x08022122
 8013750:	080220e2 	.word	0x080220e2
 8013754:	08018495 	.word	0x08018495

08013758 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8013758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801375c:	460c      	mov	r4, r1
 801375e:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013760:	4680      	mov	r8, r0
 8013762:	b950      	cbnz	r0, 801377a <dhcp_create_msg+0x22>
 8013764:	4b61      	ldr	r3, [pc, #388]	; (80138ec <dhcp_create_msg+0x194>)
 8013766:	f240 721d 	movw	r2, #1821	; 0x71d
 801376a:	4961      	ldr	r1, [pc, #388]	; (80138f0 <dhcp_create_msg+0x198>)
 801376c:	4861      	ldr	r0, [pc, #388]	; (80138f4 <dhcp_create_msg+0x19c>)
 801376e:	f003 f88b 	bl	8016888 <iprintf>
 8013772:	f06f 000f 	mvn.w	r0, #15
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 8013776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801377a:	b949      	cbnz	r1, 8013790 <dhcp_create_msg+0x38>
 801377c:	4b5b      	ldr	r3, [pc, #364]	; (80138ec <dhcp_create_msg+0x194>)
 801377e:	f240 721e 	movw	r2, #1822	; 0x71e
 8013782:	495d      	ldr	r1, [pc, #372]	; (80138f8 <dhcp_create_msg+0x1a0>)
 8013784:	485b      	ldr	r0, [pc, #364]	; (80138f4 <dhcp_create_msg+0x19c>)
 8013786:	f003 f87f 	bl	8016888 <iprintf>
 801378a:	f06f 0005 	mvn.w	r0, #5
 801378e:	e7f2      	b.n	8013776 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8013790:	68cb      	ldr	r3, [r1, #12]
 8013792:	b133      	cbz	r3, 80137a2 <dhcp_create_msg+0x4a>
 8013794:	4b55      	ldr	r3, [pc, #340]	; (80138ec <dhcp_create_msg+0x194>)
 8013796:	f240 721f 	movw	r2, #1823	; 0x71f
 801379a:	4958      	ldr	r1, [pc, #352]	; (80138fc <dhcp_create_msg+0x1a4>)
 801379c:	4855      	ldr	r0, [pc, #340]	; (80138f4 <dhcp_create_msg+0x19c>)
 801379e:	f003 f873 	bl	8016888 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 80137a2:	6923      	ldr	r3, [r4, #16]
 80137a4:	b133      	cbz	r3, 80137b4 <dhcp_create_msg+0x5c>
 80137a6:	4b51      	ldr	r3, [pc, #324]	; (80138ec <dhcp_create_msg+0x194>)
 80137a8:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80137ac:	4954      	ldr	r1, [pc, #336]	; (8013900 <dhcp_create_msg+0x1a8>)
 80137ae:	4851      	ldr	r0, [pc, #324]	; (80138f4 <dhcp_create_msg+0x19c>)
 80137b0:	f003 f86a 	bl	8016888 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80137b4:	2200      	movs	r2, #0
 80137b6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80137ba:	4610      	mov	r0, r2
 80137bc:	f7fb ff78 	bl	800f6b0 <pbuf_alloc>
 80137c0:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 80137c2:	2800      	cmp	r0, #0
 80137c4:	f000 808e 	beq.w	80138e4 <dhcp_create_msg+0x18c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80137c8:	8943      	ldrh	r3, [r0, #10]
 80137ca:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80137ce:	d206      	bcs.n	80137de <dhcp_create_msg+0x86>
 80137d0:	4b46      	ldr	r3, [pc, #280]	; (80138ec <dhcp_create_msg+0x194>)
 80137d2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80137d6:	494b      	ldr	r1, [pc, #300]	; (8013904 <dhcp_create_msg+0x1ac>)
 80137d8:	4846      	ldr	r0, [pc, #280]	; (80138f4 <dhcp_create_msg+0x19c>)
 80137da:	f003 f855 	bl	8016888 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80137de:	2e03      	cmp	r6, #3
 80137e0:	d102      	bne.n	80137e8 <dhcp_create_msg+0x90>
 80137e2:	7a63      	ldrb	r3, [r4, #9]
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	d107      	bne.n	80137f8 <dhcp_create_msg+0xa0>
    if (dhcp->tries == 0) {
 80137e8:	7aa3      	ldrb	r3, [r4, #10]
 80137ea:	4d47      	ldr	r5, [pc, #284]	; (8013908 <dhcp_create_msg+0x1b0>)
 80137ec:	b913      	cbnz	r3, 80137f4 <dhcp_create_msg+0x9c>
      xid = LWIP_RAND();
 80137ee:	f003 f8db 	bl	80169a8 <rand>
 80137f2:	6028      	str	r0, [r5, #0]
    dhcp->xid = xid;
 80137f4:	682b      	ldr	r3, [r5, #0]
 80137f6:	6023      	str	r3, [r4, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80137f8:	68e3      	ldr	r3, [r4, #12]
  dhcp->msg_out->hops = 0;
 80137fa:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80137fc:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80137fe:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8013800:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8013802:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8013804:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8013806:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
  dhcp->msg_out->hops = 0;
 801380a:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801380c:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801380e:	6820      	ldr	r0, [r4, #0]
 8013810:	f7fa fe13 	bl	800e43a <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8013814:	6923      	ldr	r3, [r4, #16]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013816:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8013818:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 801381a:	721d      	strb	r5, [r3, #8]
 801381c:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 801381e:	729d      	strb	r5, [r3, #10]
 8013820:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8013822:	731d      	strb	r5, [r3, #12]
 8013824:	735d      	strb	r5, [r3, #13]
 8013826:	739d      	strb	r5, [r3, #14]
 8013828:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801382a:	d008      	beq.n	801383e <dhcp_create_msg+0xe6>
 801382c:	1ff2      	subs	r2, r6, #7
 801382e:	2a01      	cmp	r2, #1
 8013830:	d905      	bls.n	801383e <dhcp_create_msg+0xe6>
 8013832:	2e03      	cmp	r6, #3
 8013834:	d106      	bne.n	8013844 <dhcp_create_msg+0xec>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013836:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013838:	3a04      	subs	r2, #4
 801383a:	2a01      	cmp	r2, #1
 801383c:	d802      	bhi.n	8013844 <dhcp_create_msg+0xec>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801383e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013842:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8013844:	2200      	movs	r2, #0
 8013846:	741a      	strb	r2, [r3, #16]
 8013848:	745a      	strb	r2, [r3, #17]
 801384a:	749a      	strb	r2, [r3, #18]
 801384c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801384e:	751a      	strb	r2, [r3, #20]
 8013850:	755a      	strb	r2, [r3, #21]
 8013852:	759a      	strb	r2, [r3, #22]
 8013854:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8013856:	761a      	strb	r2, [r3, #24]
 8013858:	765a      	strb	r2, [r3, #25]
 801385a:	769a      	strb	r2, [r3, #26]
 801385c:	76da      	strb	r2, [r3, #27]
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801385e:	f898 502c 	ldrb.w	r5, [r8, #44]	; 0x2c
 8013862:	f103 001c 	add.w	r0, r3, #28
 8013866:	b291      	uxth	r1, r2
 8013868:	428d      	cmp	r5, r1
 801386a:	d939      	bls.n	80138e0 <dhcp_create_msg+0x188>
 801386c:	2905      	cmp	r1, #5
 801386e:	d837      	bhi.n	80138e0 <dhcp_create_msg+0x188>
 8013870:	eb08 0102 	add.w	r1, r8, r2
 8013874:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8013878:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801387a:	2a10      	cmp	r2, #16
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801387c:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8013880:	d1f1      	bne.n	8013866 <dhcp_create_msg+0x10e>
    dhcp->msg_out->sname[i] = 0;
 8013882:	2000      	movs	r0, #0
 8013884:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013888:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 801388c:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8013890:	428a      	cmp	r2, r1
 8013892:	d1fb      	bne.n	801388c <dhcp_create_msg+0x134>
    dhcp->msg_out->file[i] = 0;
 8013894:	2100      	movs	r1, #0
 8013896:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 801389a:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801389e:	4290      	cmp	r0, r2
 80138a0:	d1fb      	bne.n	801389a <dhcp_create_msg+0x142>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80138a2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80138a6:	2263      	movs	r2, #99	; 0x63
 80138a8:	f883 00ed 	strb.w	r0, [r3, #237]	; 0xed
 80138ac:	2053      	movs	r0, #83	; 0x53
 80138ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80138b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 80138b6:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80138b8:	f883 00ee 	strb.w	r0, [r3, #238]	; 0xee
  dhcp->options_out_len = 0;
 80138bc:	82a1      	strh	r1, [r4, #20]
 80138be:	33f0      	adds	r3, #240	; 0xf0
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80138c0:	f803 2b01 	strb.w	r2, [r3], #1
 80138c4:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80138c6:	2a44      	cmp	r2, #68	; 0x44
 80138c8:	d1fa      	bne.n	80138c0 <dhcp_create_msg+0x168>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80138ca:	2201      	movs	r2, #1
 80138cc:	2135      	movs	r1, #53	; 0x35
 80138ce:	4620      	mov	r0, r4
 80138d0:	f7ff fed4 	bl	801367c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80138d4:	4620      	mov	r0, r4
 80138d6:	4631      	mov	r1, r6
 80138d8:	f7ff fef4 	bl	80136c4 <dhcp_option_byte>
  return ERR_OK;
 80138dc:	2000      	movs	r0, #0
 80138de:	e74a      	b.n	8013776 <dhcp_create_msg+0x1e>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80138e0:	2100      	movs	r1, #0
 80138e2:	e7c9      	b.n	8013878 <dhcp_create_msg+0x120>
    return ERR_MEM;
 80138e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138e8:	e745      	b.n	8013776 <dhcp_create_msg+0x1e>
 80138ea:	bf00      	nop
 80138ec:	08022122 	.word	0x08022122
 80138f0:	08021ee3 	.word	0x08021ee3
 80138f4:	08018495 	.word	0x08018495
 80138f8:	08021f02 	.word	0x08021f02
 80138fc:	08021f20 	.word	0x08021f20
 8013900:	08021f45 	.word	0x08021f45
 8013904:	08021f6c 	.word	0x08021f6c
 8013908:	20004ffc 	.word	0x20004ffc

0801390c <dhcp_check>:
{
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013910:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013912:	2108      	movs	r1, #8
 8013914:	4620      	mov	r0, r4
 8013916:	f7ff fe87 	bl	8013628 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801391a:	2200      	movs	r2, #0
 801391c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8013920:	4628      	mov	r0, r5
 8013922:	f001 fa31 	bl	8014d88 <etharp_query>
  if (dhcp->tries < 255) {
 8013926:	7aa3      	ldrb	r3, [r4, #10]
 8013928:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 801392a:	bf1c      	itt	ne
 801392c:	3301      	addne	r3, #1
 801392e:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013930:	2301      	movs	r3, #1
 8013932:	82e3      	strh	r3, [r4, #22]
}
 8013934:	bd38      	pop	{r3, r4, r5, pc}
	...

08013938 <dhcp_bind>:
{
 8013938:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801393a:	4605      	mov	r5, r0
 801393c:	b940      	cbnz	r0, 8013950 <dhcp_bind+0x18>
 801393e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8013942:	4b39      	ldr	r3, [pc, #228]	; (8013a28 <dhcp_bind+0xf0>)
 8013944:	4939      	ldr	r1, [pc, #228]	; (8013a2c <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013946:	483a      	ldr	r0, [pc, #232]	; (8013a30 <dhcp_bind+0xf8>)
 8013948:	f002 ff9e 	bl	8016888 <iprintf>
}
 801394c:	b003      	add	sp, #12
 801394e:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8013950:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013952:	b924      	cbnz	r4, 801395e <dhcp_bind+0x26>
 8013954:	4b34      	ldr	r3, [pc, #208]	; (8013a28 <dhcp_bind+0xf0>)
 8013956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801395a:	4936      	ldr	r1, [pc, #216]	; (8013a34 <dhcp_bind+0xfc>)
 801395c:	e7f3      	b.n	8013946 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 801395e:	2300      	movs	r3, #0
 8013960:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013964:	1c5a      	adds	r2, r3, #1
 8013966:	d00b      	beq.n	8013980 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013968:	223c      	movs	r2, #60	; 0x3c
 801396a:	331e      	adds	r3, #30
 801396c:	fbb3 f3f2 	udiv	r3, r3, r2
     if (dhcp->t0_timeout == 0) {
 8013970:	2b00      	cmp	r3, #0
 8013972:	d046      	beq.n	8013a02 <dhcp_bind+0xca>
     dhcp->t0_timeout = (u16_t)timeout;
 8013974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013978:	4293      	cmp	r3, r2
 801397a:	bf28      	it	cs
 801397c:	4613      	movcs	r3, r2
       dhcp->t0_timeout = 1;
 801397e:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013982:	1c58      	adds	r0, r3, #1
 8013984:	d00d      	beq.n	80139a2 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013986:	223c      	movs	r2, #60	; 0x3c
 8013988:	331e      	adds	r3, #30
 801398a:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t1_timeout == 0) {
 801398e:	2b00      	cmp	r3, #0
 8013990:	d039      	beq.n	8013a06 <dhcp_bind+0xce>
    dhcp->t1_timeout = (u16_t)timeout;
 8013992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013996:	4293      	cmp	r3, r2
 8013998:	bf28      	it	cs
 801399a:	4613      	movcs	r3, r2
      dhcp->t1_timeout = 1;
 801399c:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801399e:	8b23      	ldrh	r3, [r4, #24]
 80139a0:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80139a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139a4:	1c59      	adds	r1, r3, #1
 80139a6:	d00c      	beq.n	80139c2 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80139a8:	223c      	movs	r2, #60	; 0x3c
 80139aa:	331e      	adds	r3, #30
 80139ac:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t2_timeout == 0) {
 80139b0:	b35b      	cbz	r3, 8013a0a <dhcp_bind+0xd2>
    dhcp->t2_timeout = (u16_t)timeout;
 80139b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139b6:	4293      	cmp	r3, r2
 80139b8:	bf28      	it	cs
 80139ba:	4613      	movcs	r3, r2
      dhcp->t2_timeout = 1;
 80139bc:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80139be:	8b63      	ldrh	r3, [r4, #26]
 80139c0:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80139c2:	8b63      	ldrh	r3, [r4, #26]
 80139c4:	8b22      	ldrh	r2, [r4, #24]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d302      	bcc.n	80139d0 <dhcp_bind+0x98>
 80139ca:	b10b      	cbz	r3, 80139d0 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 80139d0:	7ae3      	ldrb	r3, [r4, #11]
 80139d2:	b1e3      	cbz	r3, 8013a0e <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80139d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80139d6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80139d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80139da:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80139dc:	b92b      	cbnz	r3, 80139ea <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80139de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80139e0:	9a00      	ldr	r2, [sp, #0]
 80139e2:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80139e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80139e8:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80139ea:	4620      	mov	r0, r4
 80139ec:	210a      	movs	r1, #10
 80139ee:	f7ff fe1b 	bl	8013628 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80139f2:	ab01      	add	r3, sp, #4
 80139f4:	466a      	mov	r2, sp
 80139f6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80139fa:	4628      	mov	r0, r5
 80139fc:	f7fb fc7a 	bl	800f2f4 <netif_set_addr>
 8013a00:	e7a4      	b.n	801394c <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 8013a02:	2301      	movs	r3, #1
 8013a04:	e7bb      	b.n	801397e <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8013a06:	2301      	movs	r3, #1
 8013a08:	e7c8      	b.n	801399c <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e7d6      	b.n	80139bc <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013a0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 8013a12:	061a      	lsls	r2, r3, #24
 8013a14:	d401      	bmi.n	8013a1a <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013a16:	23ff      	movs	r3, #255	; 0xff
 8013a18:	e7dd      	b.n	80139d6 <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8013a1a:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013a1c:	bf8c      	ite	hi
 8013a1e:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013a22:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8013a26:	e7d6      	b.n	80139d6 <dhcp_bind+0x9e>
 8013a28:	08022122 	.word	0x08022122
 8013a2c:	08021eb2 	.word	0x08021eb2
 8013a30:	08018495 	.word	0x08018495
 8013a34:	08021ecb 	.word	0x08021ecb

08013a38 <dhcp_inc_pcb_refcount>:
{
 8013a38:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8013a3a:	4d15      	ldr	r5, [pc, #84]	; (8013a90 <dhcp_inc_pcb_refcount+0x58>)
 8013a3c:	782b      	ldrb	r3, [r5, #0]
 8013a3e:	b9f3      	cbnz	r3, 8013a7e <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013a40:	4c14      	ldr	r4, [pc, #80]	; (8013a94 <dhcp_inc_pcb_refcount+0x5c>)
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	b12b      	cbz	r3, 8013a52 <dhcp_inc_pcb_refcount+0x1a>
 8013a46:	4b14      	ldr	r3, [pc, #80]	; (8013a98 <dhcp_inc_pcb_refcount+0x60>)
 8013a48:	22d9      	movs	r2, #217	; 0xd9
 8013a4a:	4914      	ldr	r1, [pc, #80]	; (8013a9c <dhcp_inc_pcb_refcount+0x64>)
 8013a4c:	4814      	ldr	r0, [pc, #80]	; (8013aa0 <dhcp_inc_pcb_refcount+0x68>)
 8013a4e:	f002 ff1b 	bl	8016888 <iprintf>
    dhcp_pcb = udp_new();
 8013a52:	f7ff fdc3 	bl	80135dc <udp_new>
 8013a56:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 8013a58:	b1b0      	cbz	r0, 8013a88 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013a5a:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8013a5c:	4911      	ldr	r1, [pc, #68]	; (8013aa4 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013a5e:	f042 0220 	orr.w	r2, r2, #32
 8013a62:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8013a64:	2244      	movs	r2, #68	; 0x44
 8013a66:	f7ff fc71 	bl	801334c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8013a6a:	2243      	movs	r2, #67	; 0x43
 8013a6c:	490d      	ldr	r1, [pc, #52]	; (8013aa4 <dhcp_inc_pcb_refcount+0x6c>)
 8013a6e:	6820      	ldr	r0, [r4, #0]
 8013a70:	f7ff fd68 	bl	8013544 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013a74:	2200      	movs	r2, #0
 8013a76:	490c      	ldr	r1, [pc, #48]	; (8013aa8 <dhcp_inc_pcb_refcount+0x70>)
 8013a78:	6820      	ldr	r0, [r4, #0]
 8013a7a:	f7ff fd93 	bl	80135a4 <udp_recv>
  return ERR_OK;
 8013a7e:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8013a80:	782b      	ldrb	r3, [r5, #0]
 8013a82:	3301      	adds	r3, #1
 8013a84:	702b      	strb	r3, [r5, #0]
}
 8013a86:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8013a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a8c:	e7fb      	b.n	8013a86 <dhcp_inc_pcb_refcount+0x4e>
 8013a8e:	bf00      	nop
 8013a90:	20004ff8 	.word	0x20004ff8
 8013a94:	20004ff4 	.word	0x20004ff4
 8013a98:	08022122 	.word	0x08022122
 8013a9c:	0802203a 	.word	0x0802203a
 8013aa0:	08018495 	.word	0x08018495
 8013aa4:	0802264c 	.word	0x0802264c
 8013aa8:	08013efd 	.word	0x08013efd

08013aac <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8013aac:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8013aae:	4604      	mov	r4, r0
 8013ab0:	b940      	cbnz	r0, 8013ac4 <dhcp_option_trailer+0x18>
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 8013ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8013ab6:	4b16      	ldr	r3, [pc, #88]	; (8013b10 <dhcp_option_trailer+0x64>)
 8013ab8:	f240 7282 	movw	r2, #1922	; 0x782
 8013abc:	4915      	ldr	r1, [pc, #84]	; (8013b14 <dhcp_option_trailer+0x68>)
 8013abe:	4816      	ldr	r0, [pc, #88]	; (8013b18 <dhcp_option_trailer+0x6c>)
 8013ac0:	f002 bee2 	b.w	8016888 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8013ac4:	6903      	ldr	r3, [r0, #16]
 8013ac6:	b933      	cbnz	r3, 8013ad6 <dhcp_option_trailer+0x2a>
 8013ac8:	4b11      	ldr	r3, [pc, #68]	; (8013b10 <dhcp_option_trailer+0x64>)
 8013aca:	f240 7283 	movw	r2, #1923	; 0x783
 8013ace:	4913      	ldr	r1, [pc, #76]	; (8013b1c <dhcp_option_trailer+0x70>)
 8013ad0:	4811      	ldr	r0, [pc, #68]	; (8013b18 <dhcp_option_trailer+0x6c>)
 8013ad2:	f002 fed9 	bl	8016888 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013ad6:	8aa3      	ldrh	r3, [r4, #20]
 8013ad8:	2b43      	cmp	r3, #67	; 0x43
 8013ada:	d906      	bls.n	8013aea <dhcp_option_trailer+0x3e>
 8013adc:	4b0c      	ldr	r3, [pc, #48]	; (8013b10 <dhcp_option_trailer+0x64>)
 8013ade:	f240 7284 	movw	r2, #1924	; 0x784
 8013ae2:	490f      	ldr	r1, [pc, #60]	; (8013b20 <dhcp_option_trailer+0x74>)
 8013ae4:	480c      	ldr	r0, [pc, #48]	; (8013b18 <dhcp_option_trailer+0x6c>)
 8013ae6:	f002 fecf 	bl	8016888 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8013aea:	8aa3      	ldrh	r3, [r4, #20]
 8013aec:	6922      	ldr	r2, [r4, #16]
 8013aee:	1c59      	adds	r1, r3, #1
 8013af0:	82a1      	strh	r1, [r4, #20]
 8013af2:	21ff      	movs	r1, #255	; 0xff
 8013af4:	4413      	add	r3, r2
 8013af6:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8013afa:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013afc:	8aa3      	ldrh	r3, [r4, #20]
 8013afe:	2b43      	cmp	r3, #67	; 0x43
 8013b00:	d900      	bls.n	8013b04 <dhcp_option_trailer+0x58>
}
 8013b02:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8013b04:	1c58      	adds	r0, r3, #1
 8013b06:	4413      	add	r3, r2
 8013b08:	82a0      	strh	r0, [r4, #20]
 8013b0a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8013b0e:	e7f5      	b.n	8013afc <dhcp_option_trailer+0x50>
 8013b10:	08022122 	.word	0x08022122
 8013b14:	08022198 	.word	0x08022198
 8013b18:	08018495 	.word	0x08018495
 8013b1c:	080221ba 	.word	0x080221ba
 8013b20:	080221e6 	.word	0x080221e6

08013b24 <dhcp_delete_msg>:
{
 8013b24:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8013b26:	4604      	mov	r4, r0
 8013b28:	b940      	cbnz	r0, 8013b3c <dhcp_delete_msg+0x18>
}
 8013b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8013b2e:	4b10      	ldr	r3, [pc, #64]	; (8013b70 <dhcp_delete_msg+0x4c>)
 8013b30:	f240 726d 	movw	r2, #1901	; 0x76d
 8013b34:	490f      	ldr	r1, [pc, #60]	; (8013b74 <dhcp_delete_msg+0x50>)
 8013b36:	4810      	ldr	r0, [pc, #64]	; (8013b78 <dhcp_delete_msg+0x54>)
 8013b38:	f002 bea6 	b.w	8016888 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8013b3c:	68c3      	ldr	r3, [r0, #12]
 8013b3e:	b933      	cbnz	r3, 8013b4e <dhcp_delete_msg+0x2a>
 8013b40:	4b0b      	ldr	r3, [pc, #44]	; (8013b70 <dhcp_delete_msg+0x4c>)
 8013b42:	f240 726e 	movw	r2, #1902	; 0x76e
 8013b46:	490d      	ldr	r1, [pc, #52]	; (8013b7c <dhcp_delete_msg+0x58>)
 8013b48:	480b      	ldr	r0, [pc, #44]	; (8013b78 <dhcp_delete_msg+0x54>)
 8013b4a:	f002 fe9d 	bl	8016888 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8013b4e:	6923      	ldr	r3, [r4, #16]
 8013b50:	b933      	cbnz	r3, 8013b60 <dhcp_delete_msg+0x3c>
 8013b52:	4b07      	ldr	r3, [pc, #28]	; (8013b70 <dhcp_delete_msg+0x4c>)
 8013b54:	f240 726f 	movw	r2, #1903	; 0x76f
 8013b58:	4909      	ldr	r1, [pc, #36]	; (8013b80 <dhcp_delete_msg+0x5c>)
 8013b5a:	4807      	ldr	r0, [pc, #28]	; (8013b78 <dhcp_delete_msg+0x54>)
 8013b5c:	f002 fe94 	bl	8016888 <iprintf>
  if (dhcp->p_out != NULL) {
 8013b60:	68e0      	ldr	r0, [r4, #12]
 8013b62:	b108      	cbz	r0, 8013b68 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 8013b64:	f7fb fd3c 	bl	800f5e0 <pbuf_free>
  dhcp->p_out = NULL;
 8013b68:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 8013b6a:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8013b6e:	bd10      	pop	{r4, pc}
 8013b70:	08022122 	.word	0x08022122
 8013b74:	08021fd0 	.word	0x08021fd0
 8013b78:	08018495 	.word	0x08018495
 8013b7c:	08021fee 	.word	0x08021fee
 8013b80:	08022013 	.word	0x08022013

08013b84 <dhcp_discover>:
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013b84:	2300      	movs	r3, #0
{
 8013b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b88:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013b8c:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013b8e:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013b90:	4620      	mov	r0, r4
 8013b92:	f7ff fd49 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8013b96:	2201      	movs	r2, #1
 8013b98:	4621      	mov	r1, r4
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f7ff fddc 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 8013ba0:	4605      	mov	r5, r0
 8013ba2:	bb98      	cbnz	r0, 8013c0c <dhcp_discover+0x88>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	2139      	movs	r1, #57	; 0x39
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f7ff fd67 	bl	801367c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013bae:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f7ff fd41 	bl	8013638 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013bb6:	2204      	movs	r2, #4
 8013bb8:	2137      	movs	r1, #55	; 0x37
 8013bba:	4620      	mov	r0, r4
 8013bbc:	f7ff fd5e 	bl	801367c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013bc0:	2101      	movs	r1, #1
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f7ff fd7e 	bl	80136c4 <dhcp_option_byte>
 8013bc8:	2103      	movs	r1, #3
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f7ff fd7a 	bl	80136c4 <dhcp_option_byte>
 8013bd0:	211c      	movs	r1, #28
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f7ff fd76 	bl	80136c4 <dhcp_option_byte>
 8013bd8:	2106      	movs	r1, #6
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f7ff fd72 	bl	80136c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8013be0:	4620      	mov	r0, r4
 8013be2:	f7ff ff63 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013be6:	8aa1      	ldrh	r1, [r4, #20]
 8013be8:	68e0      	ldr	r0, [r4, #12]
 8013bea:	31f0      	adds	r1, #240	; 0xf0
 8013bec:	b289      	uxth	r1, r1
 8013bee:	f7fb fe3b 	bl	800f868 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013bf2:	4b13      	ldr	r3, [pc, #76]	; (8013c40 <dhcp_discover+0xbc>)
 8013bf4:	4813      	ldr	r0, [pc, #76]	; (8013c44 <dhcp_discover+0xc0>)
 8013bf6:	e9cd 6300 	strd	r6, r3, [sp]
 8013bfa:	4a13      	ldr	r2, [pc, #76]	; (8013c48 <dhcp_discover+0xc4>)
 8013bfc:	2343      	movs	r3, #67	; 0x43
 8013bfe:	68e1      	ldr	r1, [r4, #12]
 8013c00:	6800      	ldr	r0, [r0, #0]
 8013c02:	f7ff fbf9 	bl	80133f8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013c06:	4620      	mov	r0, r4
 8013c08:	f7ff ff8c 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8013c0c:	7aa3      	ldrb	r3, [r4, #10]
}
 8013c0e:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8013c10:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8013c12:	bf1c      	itt	ne
 8013c14:	3301      	addne	r3, #1
 8013c16:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013c18:	7aa2      	ldrb	r2, [r4, #10]
 8013c1a:	2a05      	cmp	r2, #5
 8013c1c:	bf96      	itet	ls
 8013c1e:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8013c22:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8013c26:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013c28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013c2c:	bf98      	it	ls
 8013c2e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013c30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c38:	82e3      	strh	r3, [r4, #22]
}
 8013c3a:	b002      	add	sp, #8
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	bf00      	nop
 8013c40:	0802264c 	.word	0x0802264c
 8013c44:	20004ff4 	.word	0x20004ff4
 8013c48:	08022650 	.word	0x08022650

08013c4c <dhcp_select>:
{
 8013c4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013c4e:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c50:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013c52:	2101      	movs	r1, #1
 8013c54:	4620      	mov	r0, r4
 8013c56:	f7ff fce7 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013c5a:	2203      	movs	r2, #3
 8013c5c:	4621      	mov	r1, r4
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f7ff fd7a 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 8013c64:	4605      	mov	r5, r0
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d14b      	bne.n	8013d02 <dhcp_select+0xb6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013c6a:	2202      	movs	r2, #2
 8013c6c:	2139      	movs	r1, #57	; 0x39
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f7ff fd04 	bl	801367c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013c74:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7ff fcde 	bl	8013638 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013c7c:	2204      	movs	r2, #4
 8013c7e:	2132      	movs	r1, #50	; 0x32
 8013c80:	4620      	mov	r0, r4
 8013c82:	f7ff fcfb 	bl	801367c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013c86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013c88:	f7fa fbd7 	bl	800e43a <lwip_htonl>
 8013c8c:	4601      	mov	r1, r0
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f7ff fd34 	bl	80136fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8013c94:	2204      	movs	r2, #4
 8013c96:	2136      	movs	r1, #54	; 0x36
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f7ff fcef 	bl	801367c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013ca0:	f7fa fbcb 	bl	800e43a <lwip_htonl>
 8013ca4:	4601      	mov	r1, r0
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f7ff fd28 	bl	80136fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013cac:	2204      	movs	r2, #4
 8013cae:	2137      	movs	r1, #55	; 0x37
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	f7ff fce3 	bl	801367c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013cb6:	2101      	movs	r1, #1
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f7ff fd03 	bl	80136c4 <dhcp_option_byte>
 8013cbe:	2103      	movs	r1, #3
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f7ff fcff 	bl	80136c4 <dhcp_option_byte>
 8013cc6:	211c      	movs	r1, #28
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7ff fcfb 	bl	80136c4 <dhcp_option_byte>
 8013cce:	2106      	movs	r1, #6
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f7ff fcf7 	bl	80136c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f7ff fee8 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013cdc:	8aa1      	ldrh	r1, [r4, #20]
 8013cde:	68e0      	ldr	r0, [r4, #12]
 8013ce0:	31f0      	adds	r1, #240	; 0xf0
 8013ce2:	b289      	uxth	r1, r1
 8013ce4:	f7fb fdc0 	bl	800f868 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013ce8:	4b12      	ldr	r3, [pc, #72]	; (8013d34 <dhcp_select+0xe8>)
 8013cea:	4813      	ldr	r0, [pc, #76]	; (8013d38 <dhcp_select+0xec>)
 8013cec:	e9cd 6300 	strd	r6, r3, [sp]
 8013cf0:	4a12      	ldr	r2, [pc, #72]	; (8013d3c <dhcp_select+0xf0>)
 8013cf2:	2343      	movs	r3, #67	; 0x43
 8013cf4:	68e1      	ldr	r1, [r4, #12]
 8013cf6:	6800      	ldr	r0, [r0, #0]
 8013cf8:	f7ff fb7e 	bl	80133f8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	f7ff ff11 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8013d02:	7aa3      	ldrb	r3, [r4, #10]
}
 8013d04:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8013d06:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8013d08:	bf1c      	itt	ne
 8013d0a:	3301      	addne	r3, #1
 8013d0c:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013d0e:	7aa2      	ldrb	r2, [r4, #10]
 8013d10:	2a05      	cmp	r2, #5
 8013d12:	bf96      	itet	ls
 8013d14:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8013d18:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8013d1c:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013d1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013d22:	bf98      	it	ls
 8013d24:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013d26:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d2e:	82e3      	strh	r3, [r4, #22]
}
 8013d30:	b002      	add	sp, #8
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
 8013d34:	0802264c 	.word	0x0802264c
 8013d38:	20004ff4 	.word	0x20004ff4
 8013d3c:	08022650 	.word	0x08022650

08013d40 <dhcp_reboot>:
{
 8013d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d42:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d44:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013d46:	2103      	movs	r1, #3
 8013d48:	4620      	mov	r0, r4
 8013d4a:	f7ff fc6d 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013d4e:	2203      	movs	r2, #3
 8013d50:	4621      	mov	r1, r4
 8013d52:	4630      	mov	r0, r6
 8013d54:	f7ff fd00 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 8013d58:	4605      	mov	r5, r0
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	d13e      	bne.n	8013ddc <dhcp_reboot+0x9c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013d5e:	2202      	movs	r2, #2
 8013d60:	2139      	movs	r1, #57	; 0x39
 8013d62:	4620      	mov	r0, r4
 8013d64:	f7ff fc8a 	bl	801367c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013d68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff fc63 	bl	8013638 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013d72:	2204      	movs	r2, #4
 8013d74:	2132      	movs	r1, #50	; 0x32
 8013d76:	4620      	mov	r0, r4
 8013d78:	f7ff fc80 	bl	801367c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013d7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013d7e:	f7fa fb5c 	bl	800e43a <lwip_htonl>
 8013d82:	4601      	mov	r1, r0
 8013d84:	4620      	mov	r0, r4
 8013d86:	f7ff fcb9 	bl	80136fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d8a:	2204      	movs	r2, #4
 8013d8c:	2137      	movs	r1, #55	; 0x37
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7ff fc74 	bl	801367c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013d94:	2101      	movs	r1, #1
 8013d96:	4620      	mov	r0, r4
 8013d98:	f7ff fc94 	bl	80136c4 <dhcp_option_byte>
 8013d9c:	2103      	movs	r1, #3
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f7ff fc90 	bl	80136c4 <dhcp_option_byte>
 8013da4:	211c      	movs	r1, #28
 8013da6:	4620      	mov	r0, r4
 8013da8:	f7ff fc8c 	bl	80136c4 <dhcp_option_byte>
 8013dac:	2106      	movs	r1, #6
 8013dae:	4620      	mov	r0, r4
 8013db0:	f7ff fc88 	bl	80136c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8013db4:	4620      	mov	r0, r4
 8013db6:	f7ff fe79 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013dba:	8aa1      	ldrh	r1, [r4, #20]
 8013dbc:	68e0      	ldr	r0, [r4, #12]
 8013dbe:	31f0      	adds	r1, #240	; 0xf0
 8013dc0:	b289      	uxth	r1, r1
 8013dc2:	f7fb fd51 	bl	800f868 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013dc6:	4813      	ldr	r0, [pc, #76]	; (8013e14 <dhcp_reboot+0xd4>)
 8013dc8:	9600      	str	r6, [sp, #0]
 8013dca:	2343      	movs	r3, #67	; 0x43
 8013dcc:	4a12      	ldr	r2, [pc, #72]	; (8013e18 <dhcp_reboot+0xd8>)
 8013dce:	68e1      	ldr	r1, [r4, #12]
 8013dd0:	6800      	ldr	r0, [r0, #0]
 8013dd2:	f7ff fb77 	bl	80134c4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f7ff fea4 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8013ddc:	7aa3      	ldrb	r3, [r4, #10]
}
 8013dde:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8013de0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8013de2:	bf1c      	itt	ne
 8013de4:	3301      	addne	r3, #1
 8013de6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013de8:	7aa3      	ldrb	r3, [r4, #10]
 8013dea:	2b09      	cmp	r3, #9
 8013dec:	bf96      	itet	ls
 8013dee:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8013df2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8013df6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013dfa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013dfe:	bf9c      	itt	ls
 8013e00:	00db      	lslls	r3, r3, #3
 8013e02:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013e04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e0c:	82e3      	strh	r3, [r4, #22]
}
 8013e0e:	b002      	add	sp, #8
 8013e10:	bd70      	pop	{r4, r5, r6, pc}
 8013e12:	bf00      	nop
 8013e14:	20004ff4 	.word	0x20004ff4
 8013e18:	08022650 	.word	0x08022650

08013e1c <dhcp_dec_pcb_refcount>:
{
 8013e1c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013e1e:	4d0a      	ldr	r5, [pc, #40]	; (8013e48 <dhcp_dec_pcb_refcount+0x2c>)
 8013e20:	782b      	ldrb	r3, [r5, #0]
 8013e22:	b92b      	cbnz	r3, 8013e30 <dhcp_dec_pcb_refcount+0x14>
 8013e24:	4b09      	ldr	r3, [pc, #36]	; (8013e4c <dhcp_dec_pcb_refcount+0x30>)
 8013e26:	22f3      	movs	r2, #243	; 0xf3
 8013e28:	4909      	ldr	r1, [pc, #36]	; (8013e50 <dhcp_dec_pcb_refcount+0x34>)
 8013e2a:	480a      	ldr	r0, [pc, #40]	; (8013e54 <dhcp_dec_pcb_refcount+0x38>)
 8013e2c:	f002 fd2c 	bl	8016888 <iprintf>
  dhcp_pcb_refcount--;
 8013e30:	782c      	ldrb	r4, [r5, #0]
 8013e32:	3c01      	subs	r4, #1
 8013e34:	b2e4      	uxtb	r4, r4
 8013e36:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8013e38:	b924      	cbnz	r4, 8013e44 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8013e3a:	4d07      	ldr	r5, [pc, #28]	; (8013e58 <dhcp_dec_pcb_refcount+0x3c>)
 8013e3c:	6828      	ldr	r0, [r5, #0]
 8013e3e:	f7ff fbb5 	bl	80135ac <udp_remove>
    dhcp_pcb = NULL;
 8013e42:	602c      	str	r4, [r5, #0]
}
 8013e44:	bd38      	pop	{r3, r4, r5, pc}
 8013e46:	bf00      	nop
 8013e48:	20004ff8 	.word	0x20004ff8
 8013e4c:	08022122 	.word	0x08022122
 8013e50:	08021fac 	.word	0x08021fac
 8013e54:	08018495 	.word	0x08018495
 8013e58:	20004ff4 	.word	0x20004ff4

08013e5c <dhcp_handle_ack.isra.4>:
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013e5c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif)
 8013e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013e60:	4d24      	ldr	r5, [pc, #144]	; (8013ef4 <dhcp_handle_ack.isra.4+0x98>)
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013e62:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013e66:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif)
 8013e68:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013e6a:	b113      	cbz	r3, 8013e72 <dhcp_handle_ack.isra.4+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013e6c:	4b22      	ldr	r3, [pc, #136]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013e72:	792b      	ldrb	r3, [r5, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d034      	beq.n	8013ee2 <dhcp_handle_ack.isra.4+0x86>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013e78:	4b1f      	ldr	r3, [pc, #124]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013e7a:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013e7c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013e7e:	796b      	ldrb	r3, [r5, #5]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d031      	beq.n	8013ee8 <dhcp_handle_ack.isra.4+0x8c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013e84:	4b1c      	ldr	r3, [pc, #112]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013e86:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013e88:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8013e8a:	6863      	ldr	r3, [r4, #4]
 8013e8c:	691b      	ldr	r3, [r3, #16]
 8013e8e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013e90:	79ab      	ldrb	r3, [r5, #6]
 8013e92:	b12b      	cbz	r3, 8013ea0 <dhcp_handle_ack.isra.4+0x44>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013e94:	4b18      	ldr	r3, [pc, #96]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013e96:	6998      	ldr	r0, [r3, #24]
 8013e98:	f7fa facf 	bl	800e43a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8013e9c:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013e9e:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 8013ea0:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013ea2:	79eb      	ldrb	r3, [r5, #7]
 8013ea4:	b123      	cbz	r3, 8013eb0 <dhcp_handle_ack.isra.4+0x54>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013ea6:	4b14      	ldr	r3, [pc, #80]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013ea8:	69d8      	ldr	r0, [r3, #28]
 8013eaa:	f7fa fac6 	bl	800e43a <lwip_htonl>
 8013eae:	6320      	str	r0, [r4, #48]	; 0x30
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8013eb0:	7a2b      	ldrb	r3, [r5, #8]
 8013eb2:	b1a3      	cbz	r3, 8013ede <dhcp_handle_ack.isra.4+0x82>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8013eb4:	4e10      	ldr	r6, [pc, #64]	; (8013ef8 <dhcp_handle_ack.isra.4+0x9c>)
 8013eb6:	ac02      	add	r4, sp, #8
 8013eb8:	6a30      	ldr	r0, [r6, #32]
 8013eba:	f7fa fabe 	bl	800e43a <lwip_htonl>
 8013ebe:	f844 0d04 	str.w	r0, [r4, #-4]!
    dns_setserver(n, &dns_addr);
 8013ec2:	4621      	mov	r1, r4
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	f7fa fdc5 	bl	800ea54 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8013eca:	7a6b      	ldrb	r3, [r5, #9]
 8013ecc:	b13b      	cbz	r3, 8013ede <dhcp_handle_ack.isra.4+0x82>
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8013ece:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8013ed0:	f7fa fab3 	bl	800e43a <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8013ed4:	4621      	mov	r1, r4
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8013ed6:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8013ed8:	2001      	movs	r0, #1
 8013eda:	f7fa fdbb 	bl	800ea54 <dns_setserver>
}
 8013ede:	b002      	add	sp, #8
 8013ee0:	bd70      	pop	{r4, r5, r6, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013ee4:	085b      	lsrs	r3, r3, #1
 8013ee6:	e7c9      	b.n	8013e7c <dhcp_handle_ack.isra.4+0x20>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013ee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013eea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013eee:	08db      	lsrs	r3, r3, #3
 8013ef0:	e7ca      	b.n	8013e88 <dhcp_handle_ack.isra.4+0x2c>
 8013ef2:	bf00      	nop
 8013ef4:	2000d9a4 	.word	0x2000d9a4
 8013ef8:	2000d9b0 	.word	0x2000d9b0

08013efc <dhcp_recv>:
{
 8013efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8013f00:	4bad      	ldr	r3, [pc, #692]	; (80141b8 <dhcp_recv+0x2bc>)
{
 8013f02:	b08b      	sub	sp, #44	; 0x2c
  struct netif *netif = ip_current_input_netif();
 8013f04:	685f      	ldr	r7, [r3, #4]
{
 8013f06:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f08:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013f0c:	f1b9 0f00 	cmp.w	r9, #0
 8013f10:	d04e      	beq.n	8013fb0 <dhcp_recv+0xb4>
 8013f12:	f899 3008 	ldrb.w	r3, [r9, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d047      	beq.n	8013faa <dhcp_recv+0xae>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013f1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013f1e:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013f20:	b133      	cbz	r3, 8013f30 <dhcp_recv+0x34>
 8013f22:	4ba6      	ldr	r3, [pc, #664]	; (80141bc <dhcp_recv+0x2c0>)
 8013f24:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8013f28:	49a5      	ldr	r1, [pc, #660]	; (80141c0 <dhcp_recv+0x2c4>)
 8013f2a:	48a6      	ldr	r0, [pc, #664]	; (80141c4 <dhcp_recv+0x2c8>)
 8013f2c:	f002 fcac 	bl	8016888 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013f30:	9b01      	ldr	r3, [sp, #4]
 8013f32:	895b      	ldrh	r3, [r3, #10]
 8013f34:	2b2b      	cmp	r3, #43	; 0x2b
 8013f36:	d938      	bls.n	8013faa <dhcp_recv+0xae>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013f38:	7823      	ldrb	r3, [r4, #0]
 8013f3a:	2b02      	cmp	r3, #2
 8013f3c:	d135      	bne.n	8013faa <dhcp_recv+0xae>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013f3e:	2300      	movs	r3, #0
 8013f40:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013f44:	b2d9      	uxtb	r1, r3
 8013f46:	428a      	cmp	r2, r1
 8013f48:	d901      	bls.n	8013f4e <dhcp_recv+0x52>
 8013f4a:	2b06      	cmp	r3, #6
 8013f4c:	d125      	bne.n	8013f9a <dhcp_recv+0x9e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013f4e:	6860      	ldr	r0, [r4, #4]
 8013f50:	f7fa fa73 	bl	800e43a <lwip_htonl>
 8013f54:	f8d9 3000 	ldr.w	r3, [r9]
 8013f58:	4298      	cmp	r0, r3
 8013f5a:	d126      	bne.n	8013faa <dhcp_recv+0xae>
  dhcp_clear_all_options(dhcp);
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	4b9a      	ldr	r3, [pc, #616]	; (80141c8 <dhcp_recv+0x2cc>)
  if (p->len < DHCP_SNAME_OFS) {
 8013f60:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8013f62:	605a      	str	r2, [r3, #4]
 8013f64:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 8013f66:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 8013f68:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8013f6a:	292b      	cmp	r1, #43	; 0x2b
 8013f6c:	d91d      	bls.n	8013faa <dhcp_recv+0xae>
  options_idx = DHCP_OPTIONS_OFS;
 8013f6e:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8013f72:	9901      	ldr	r1, [sp, #4]
  int parse_sname_as_options = 0;
 8013f74:	9204      	str	r2, [sp, #16]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8013f76:	6849      	ldr	r1, [r1, #4]
 8013f78:	9302      	str	r3, [sp, #8]
 8013f7a:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 8013f7e:	9901      	ldr	r1, [sp, #4]
 8013f80:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8013f84:	f8dd 8004 	ldr.w	r8, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8013f88:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8013f8c:	455b      	cmp	r3, fp
 8013f8e:	d915      	bls.n	8013fbc <dhcp_recv+0xc0>
  options = (u8_t*)q->payload;
 8013f90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013f94:	465c      	mov	r4, fp
 8013f96:	9305      	str	r3, [sp, #20]
 8013f98:	e137      	b.n	801420a <dhcp_recv+0x30e>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013f9a:	18f9      	adds	r1, r7, r3
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	18e0      	adds	r0, r4, r3
 8013fa0:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8013fa4:	7ec0      	ldrb	r0, [r0, #27]
 8013fa6:	4288      	cmp	r0, r1
 8013fa8:	d0cc      	beq.n	8013f44 <dhcp_recv+0x48>
    dhcp->msg_in = NULL;
 8013faa:	2300      	movs	r3, #0
 8013fac:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 8013fb0:	9801      	ldr	r0, [sp, #4]
 8013fb2:	f7fb fb15 	bl	800f5e0 <pbuf_free>
}
 8013fb6:	b00b      	add	sp, #44	; 0x2c
 8013fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 8013fbc:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx -= q->len;
 8013fc0:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 8013fc4:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx -= q->len;
 8013fc8:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 8013fcc:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8013fd0:	f1b8 0f00 	cmp.w	r8, #0
 8013fd4:	d1d8      	bne.n	8013f88 <dhcp_recv+0x8c>
 8013fd6:	e7e8      	b.n	8013faa <dhcp_recv+0xae>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8013fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 81ab 	beq.w	8014338 <dhcp_recv+0x43c>
 8013fe2:	685b      	ldr	r3, [r3, #4]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	e122      	b.n	801422e <dhcp_recv+0x332>
        decode_len = len = 0;
 8013fe8:	2500      	movs	r5, #0
    int decode_idx = -1;
 8013fea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        decode_len = len = 0;
 8013fee:	462b      	mov	r3, r5
        offset--;
 8013ff0:	3c01      	subs	r4, #1
 8013ff2:	b2a4      	uxth	r4, r4
 8013ff4:	3402      	adds	r4, #2
    offset += len + 2;
 8013ff6:	441c      	add	r4, r3
 8013ff8:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8013ffa:	2d00      	cmp	r5, #0
 8013ffc:	f000 80a4 	beq.w	8014148 <dhcp_recv+0x24c>
      u32_t value = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	9309      	str	r3, [sp, #36]	; 0x24
 8014004:	9b02      	ldr	r3, [sp, #8]
 8014006:	18f3      	adds	r3, r6, r3
 8014008:	9306      	str	r3, [sp, #24]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801400a:	2e09      	cmp	r6, #9
 801400c:	d906      	bls.n	801401c <dhcp_recv+0x120>
 801400e:	4b6b      	ldr	r3, [pc, #428]	; (80141bc <dhcp_recv+0x2c0>)
 8014010:	f240 6236 	movw	r2, #1590	; 0x636
 8014014:	496d      	ldr	r1, [pc, #436]	; (80141cc <dhcp_recv+0x2d0>)
 8014016:	486b      	ldr	r0, [pc, #428]	; (80141c4 <dhcp_recv+0x2c8>)
 8014018:	f002 fc36 	bl	8016888 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801401c:	9b06      	ldr	r3, [sp, #24]
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	f040 8091 	bne.w	8014148 <dhcp_recv+0x24c>
        copy_len = LWIP_MIN(decode_len, 4);
 8014026:	2d04      	cmp	r5, #4
 8014028:	462b      	mov	r3, r5
 801402a:	bf28      	it	cs
 801402c:	2304      	movcs	r3, #4
 801402e:	9307      	str	r3, [sp, #28]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014030:	9a07      	ldr	r2, [sp, #28]
 8014032:	9b03      	ldr	r3, [sp, #12]
 8014034:	a909      	add	r1, sp, #36	; 0x24
 8014036:	4640      	mov	r0, r8
 8014038:	f7fb fd74 	bl	800fb24 <pbuf_copy_partial>
 801403c:	9b07      	ldr	r3, [sp, #28]
 801403e:	4283      	cmp	r3, r0
 8014040:	d1b3      	bne.n	8013faa <dhcp_recv+0xae>
        if (decode_len > 4) {
 8014042:	2d04      	cmp	r5, #4
 8014044:	d974      	bls.n	8014130 <dhcp_recv+0x234>
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014046:	07aa      	lsls	r2, r5, #30
 8014048:	d05f      	beq.n	801410a <dhcp_recv+0x20e>
 801404a:	4b5c      	ldr	r3, [pc, #368]	; (80141bc <dhcp_recv+0x2c0>)
 801404c:	f240 623e 	movw	r2, #1598	; 0x63e
 8014050:	495f      	ldr	r1, [pc, #380]	; (80141d0 <dhcp_recv+0x2d4>)
 8014052:	e00c      	b.n	801406e <dhcp_recv+0x172>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014054:	2b04      	cmp	r3, #4
 8014056:	d041      	beq.n	80140dc <dhcp_recv+0x1e0>
 8014058:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801405c:	4b57      	ldr	r3, [pc, #348]	; (80141bc <dhcp_recv+0x2c0>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801405e:	495d      	ldr	r1, [pc, #372]	; (80141d4 <dhcp_recv+0x2d8>)
 8014060:	e005      	b.n	801406e <dhcp_recv+0x172>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014062:	2b03      	cmp	r3, #3
 8014064:	d83d      	bhi.n	80140e2 <dhcp_recv+0x1e6>
 8014066:	f240 52fb 	movw	r2, #1531	; 0x5fb
 801406a:	4b54      	ldr	r3, [pc, #336]	; (80141bc <dhcp_recv+0x2c0>)
 801406c:	495a      	ldr	r1, [pc, #360]	; (80141d8 <dhcp_recv+0x2dc>)
 801406e:	4855      	ldr	r0, [pc, #340]	; (80141c4 <dhcp_recv+0x2c8>)
 8014070:	f002 fc0a 	bl	8016888 <iprintf>
 8014074:	e799      	b.n	8013faa <dhcp_recv+0xae>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8014076:	2300      	movs	r3, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8014078:	0799      	lsls	r1, r3, #30
 801407a:	d004      	beq.n	8014086 <dhcp_recv+0x18a>
 801407c:	4b4f      	ldr	r3, [pc, #316]	; (80141bc <dhcp_recv+0x2c0>)
 801407e:	f240 6201 	movw	r2, #1537	; 0x601
 8014082:	4956      	ldr	r1, [pc, #344]	; (80141dc <dhcp_recv+0x2e0>)
 8014084:	e7f3      	b.n	801406e <dhcp_recv+0x172>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8014086:	2b08      	cmp	r3, #8
 8014088:	461d      	mov	r5, r3
 801408a:	bf28      	it	cs
 801408c:	2508      	movcs	r5, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801408e:	429d      	cmp	r5, r3
 8014090:	d92a      	bls.n	80140e8 <dhcp_recv+0x1ec>
 8014092:	4b4a      	ldr	r3, [pc, #296]	; (80141bc <dhcp_recv+0x2c0>)
 8014094:	f240 6204 	movw	r2, #1540	; 0x604
 8014098:	e7e8      	b.n	801406c <dhcp_recv+0x170>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801409a:	2b04      	cmp	r3, #4
 801409c:	d026      	beq.n	80140ec <dhcp_recv+0x1f0>
 801409e:	4b47      	ldr	r3, [pc, #284]	; (80141bc <dhcp_recv+0x2c0>)
 80140a0:	f240 6209 	movw	r2, #1545	; 0x609
 80140a4:	e7db      	b.n	801405e <dhcp_recv+0x162>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d004      	beq.n	80140b4 <dhcp_recv+0x1b8>
 80140aa:	f240 6217 	movw	r2, #1559	; 0x617
 80140ae:	4b43      	ldr	r3, [pc, #268]	; (80141bc <dhcp_recv+0x2c0>)
 80140b0:	494b      	ldr	r1, [pc, #300]	; (80141e0 <dhcp_recv+0x2e4>)
 80140b2:	e7dc      	b.n	801406e <dhcp_recv+0x172>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80140b4:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 80140b8:	d01b      	beq.n	80140f2 <dhcp_recv+0x1f6>
 80140ba:	4b40      	ldr	r3, [pc, #256]	; (80141bc <dhcp_recv+0x2c0>)
 80140bc:	f240 6219 	movw	r2, #1561	; 0x619
 80140c0:	4948      	ldr	r1, [pc, #288]	; (80141e4 <dhcp_recv+0x2e8>)
 80140c2:	e7d4      	b.n	801406e <dhcp_recv+0x172>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140c4:	2b04      	cmp	r3, #4
 80140c6:	d017      	beq.n	80140f8 <dhcp_recv+0x1fc>
 80140c8:	4b3c      	ldr	r3, [pc, #240]	; (80141bc <dhcp_recv+0x2c0>)
 80140ca:	f240 6221 	movw	r2, #1569	; 0x621
 80140ce:	e7c6      	b.n	801405e <dhcp_recv+0x162>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140d0:	2b04      	cmp	r3, #4
 80140d2:	d014      	beq.n	80140fe <dhcp_recv+0x202>
 80140d4:	4b39      	ldr	r3, [pc, #228]	; (80141bc <dhcp_recv+0x2c0>)
 80140d6:	f240 6225 	movw	r2, #1573	; 0x625
 80140da:	e7c0      	b.n	801405e <dhcp_recv+0x162>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140dc:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80140de:	2606      	movs	r6, #6
 80140e0:	e788      	b.n	8013ff4 <dhcp_recv+0xf8>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80140e2:	2607      	movs	r6, #7
        decode_len = 4; /* only copy the first given router */
 80140e4:	2504      	movs	r5, #4
 80140e6:	e785      	b.n	8013ff4 <dhcp_recv+0xf8>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80140e8:	2608      	movs	r6, #8
 80140ea:	e783      	b.n	8013ff4 <dhcp_recv+0xf8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140ec:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80140ee:	2603      	movs	r6, #3
 80140f0:	e780      	b.n	8013ff4 <dhcp_recv+0xf8>
    decode_len = len;
 80140f2:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80140f4:	2600      	movs	r6, #0
 80140f6:	e77d      	b.n	8013ff4 <dhcp_recv+0xf8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140f8:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80140fa:	2602      	movs	r6, #2
 80140fc:	e77a      	b.n	8013ff4 <dhcp_recv+0xf8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80140fe:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8014100:	461e      	mov	r6, r3
 8014102:	e777      	b.n	8013ff4 <dhcp_recv+0xf8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014104:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8014106:	2605      	movs	r6, #5
 8014108:	e774      	b.n	8013ff4 <dhcp_recv+0xf8>
          dhcp_got_option(dhcp, decode_idx);
 801410a:	2301      	movs	r3, #1
 801410c:	9a06      	ldr	r2, [sp, #24]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801410e:	9809      	ldr	r0, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
 8014110:	f802 3b01 	strb.w	r3, [r2], #1
 8014114:	9206      	str	r2, [sp, #24]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014116:	f7fa f990 	bl	800e43a <lwip_htonl>
 801411a:	4b33      	ldr	r3, [pc, #204]	; (80141e8 <dhcp_recv+0x2ec>)
          decode_len -= 4;
 801411c:	3d04      	subs	r5, #4
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801411e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
          val_offset += 4;
 8014122:	9b03      	ldr	r3, [sp, #12]
          decode_len -= 4;
 8014124:	b2ed      	uxtb	r5, r5
          val_offset += 4;
 8014126:	3304      	adds	r3, #4
 8014128:	b29b      	uxth	r3, r3
 801412a:	9303      	str	r3, [sp, #12]
          decode_idx++;
 801412c:	3601      	adds	r6, #1
 801412e:	e76c      	b.n	801400a <dhcp_recv+0x10e>
        } else if (decode_len == 4) {
 8014130:	d136      	bne.n	80141a0 <dhcp_recv+0x2a4>
          value = lwip_ntohl(value);
 8014132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014134:	f7fa f981 	bl	800e43a <lwip_htonl>
 8014138:	9009      	str	r0, [sp, #36]	; 0x24
        dhcp_got_option(dhcp, decode_idx);
 801413a:	2301      	movs	r3, #1
 801413c:	9a02      	ldr	r2, [sp, #8]
 801413e:	5593      	strb	r3, [r2, r6]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8014140:	4b29      	ldr	r3, [pc, #164]	; (80141e8 <dhcp_recv+0x2ec>)
 8014142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014144:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    if (offset >= q->len) {
 8014148:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801414c:	42a3      	cmp	r3, r4
 801414e:	d85c      	bhi.n	801420a <dhcp_recv+0x30e>
      offset -= q->len;
 8014150:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8014152:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8014156:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8014158:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 801415c:	4554      	cmp	r4, sl
 801415e:	d347      	bcc.n	80141f0 <dhcp_recv+0x2f4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014160:	9b02      	ldr	r3, [sp, #8]
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d172      	bne.n	801424e <dhcp_recv+0x352>
  } else if (parse_sname_as_options) {
 8014168:	9b04      	ldr	r3, [sp, #16]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d178      	bne.n	8014260 <dhcp_recv+0x364>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801416e:	9b02      	ldr	r3, [sp, #8]
 8014170:	785b      	ldrb	r3, [r3, #1]
 8014172:	2b00      	cmp	r3, #0
 8014174:	f43f af19 	beq.w	8013faa <dhcp_recv+0xae>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014178:	4a1b      	ldr	r2, [pc, #108]	; (80141e8 <dhcp_recv+0x2ec>)
 801417a:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801417c:	2b05      	cmp	r3, #5
 801417e:	f040 808b 	bne.w	8014298 <dhcp_recv+0x39c>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014182:	f899 3009 	ldrb.w	r3, [r9, #9]
 8014186:	2b01      	cmp	r3, #1
 8014188:	d17b      	bne.n	8014282 <dhcp_recv+0x386>
      dhcp_handle_ack(netif);
 801418a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801418c:	f7ff fe66 	bl	8013e5c <dhcp_handle_ack.isra.4>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014190:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
        dhcp_check(netif);
 8014194:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014196:	071b      	lsls	r3, r3, #28
 8014198:	d57b      	bpl.n	8014292 <dhcp_recv+0x396>
        dhcp_check(netif);
 801419a:	f7ff fbb7 	bl	801390c <dhcp_check>
 801419e:	e704      	b.n	8013faa <dhcp_recv+0xae>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80141a0:	2d01      	cmp	r5, #1
 80141a2:	d004      	beq.n	80141ae <dhcp_recv+0x2b2>
 80141a4:	4b05      	ldr	r3, [pc, #20]	; (80141bc <dhcp_recv+0x2c0>)
 80141a6:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80141aa:	4910      	ldr	r1, [pc, #64]	; (80141ec <dhcp_recv+0x2f0>)
 80141ac:	e75f      	b.n	801406e <dhcp_recv+0x172>
          value = ((u8_t*)&value)[0];
 80141ae:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80141b2:	9309      	str	r3, [sp, #36]	; 0x24
 80141b4:	e7c1      	b.n	801413a <dhcp_recv+0x23e>
 80141b6:	bf00      	nop
 80141b8:	2000af94 	.word	0x2000af94
 80141bc:	08022122 	.word	0x08022122
 80141c0:	08022225 	.word	0x08022225
 80141c4:	08018495 	.word	0x08018495
 80141c8:	2000d9a4 	.word	0x2000d9a4
 80141cc:	08022273 	.word	0x08022273
 80141d0:	08022284 	.word	0x08022284
 80141d4:	08022238 	.word	0x08022238
 80141d8:	08022241 	.word	0x08022241
 80141dc:	0802228b 	.word	0x0802228b
 80141e0:	08022253 	.word	0x08022253
 80141e4:	0802225c 	.word	0x0802225c
 80141e8:	2000d9b0 	.word	0x2000d9b0
 80141ec:	08022299 	.word	0x08022299
        q = q->next;
 80141f0:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80141f4:	f1b8 0f00 	cmp.w	r8, #0
 80141f8:	d104      	bne.n	8014204 <dhcp_recv+0x308>
 80141fa:	4b61      	ldr	r3, [pc, #388]	; (8014380 <dhcp_recv+0x484>)
 80141fc:	f240 6254 	movw	r2, #1620	; 0x654
 8014200:	4960      	ldr	r1, [pc, #384]	; (8014384 <dhcp_recv+0x488>)
 8014202:	e734      	b.n	801406e <dhcp_recv+0x172>
        options = (u8_t*)q->payload;
 8014204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014208:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801420a:	4554      	cmp	r4, sl
 801420c:	d2a8      	bcs.n	8014160 <dhcp_recv+0x264>
 801420e:	9b05      	ldr	r3, [sp, #20]
 8014210:	5d1a      	ldrb	r2, [r3, r4]
 8014212:	2aff      	cmp	r2, #255	; 0xff
 8014214:	d0a4      	beq.n	8014160 <dhcp_recv+0x264>
    u16_t val_offset = offset + 2;
 8014216:	1ca3      	adds	r3, r4, #2
 8014218:	b29b      	uxth	r3, r3
    if ((offset + 1) < q->len) {
 801421a:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    u16_t val_offset = offset + 2;
 801421e:	9303      	str	r3, [sp, #12]
    if ((offset + 1) < q->len) {
 8014220:	1c63      	adds	r3, r4, #1
 8014222:	428b      	cmp	r3, r1
 8014224:	f6bf aed8 	bge.w	8013fd8 <dhcp_recv+0xdc>
      len = options[offset + 1];
 8014228:	9b05      	ldr	r3, [sp, #20]
 801422a:	4423      	add	r3, r4
 801422c:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 801422e:	2a33      	cmp	r2, #51	; 0x33
 8014230:	f43f af33 	beq.w	801409a <dhcp_recv+0x19e>
 8014234:	d864      	bhi.n	8014300 <dhcp_recv+0x404>
 8014236:	2a01      	cmp	r2, #1
 8014238:	f43f af0c 	beq.w	8014054 <dhcp_recv+0x158>
 801423c:	f4ff aed4 	bcc.w	8013fe8 <dhcp_recv+0xec>
 8014240:	2a03      	cmp	r2, #3
 8014242:	f43f af0e 	beq.w	8014062 <dhcp_recv+0x166>
 8014246:	2a06      	cmp	r2, #6
 8014248:	f43f af16 	beq.w	8014078 <dhcp_recv+0x17c>
 801424c:	e084      	b.n	8014358 <dhcp_recv+0x45c>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801424e:	2200      	movs	r2, #0
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014250:	4b4d      	ldr	r3, [pc, #308]	; (8014388 <dhcp_recv+0x48c>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014252:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014254:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014256:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014258:	2b01      	cmp	r3, #1
 801425a:	d00d      	beq.n	8014278 <dhcp_recv+0x37c>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801425c:	2b02      	cmp	r3, #2
 801425e:	d106      	bne.n	801426e <dhcp_recv+0x372>
    parse_sname_as_options = 0;
 8014260:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014262:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    parse_sname_as_options = 0;
 8014266:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8014268:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 801426c:	e68a      	b.n	8013f84 <dhcp_recv+0x88>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801426e:	2b03      	cmp	r3, #3
 8014270:	f47f af7a 	bne.w	8014168 <dhcp_recv+0x26c>
      parse_sname_as_options = 1;
 8014274:	2301      	movs	r3, #1
 8014276:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014278:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 801427c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8014280:	e680      	b.n	8013f84 <dhcp_recv+0x88>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014282:	3b03      	subs	r3, #3
 8014284:	2b02      	cmp	r3, #2
 8014286:	f63f ae90 	bhi.w	8013faa <dhcp_recv+0xae>
      dhcp_handle_ack(netif);
 801428a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801428c:	f7ff fde6 	bl	8013e5c <dhcp_handle_ack.isra.4>
      dhcp_bind(netif);
 8014290:	4638      	mov	r0, r7
 8014292:	f7ff fb51 	bl	8013938 <dhcp_bind>
 8014296:	e688      	b.n	8013faa <dhcp_recv+0xae>
  else if ((msg_type == DHCP_NAK) &&
 8014298:	2b06      	cmp	r3, #6
 801429a:	d115      	bne.n	80142c8 <dhcp_recv+0x3cc>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801429c:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 80142a0:	1eda      	subs	r2, r3, #3
 80142a2:	2a02      	cmp	r2, #2
 80142a4:	d902      	bls.n	80142ac <dhcp_recv+0x3b0>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	f47f ae7f 	bne.w	8013faa <dhcp_recv+0xae>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80142ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ae:	210c      	movs	r1, #12
 80142b0:	f7ff f9ba 	bl	8013628 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80142b4:	4b35      	ldr	r3, [pc, #212]	; (801438c <dhcp_recv+0x490>)
 80142b6:	4638      	mov	r0, r7
 80142b8:	461a      	mov	r2, r3
 80142ba:	4619      	mov	r1, r3
 80142bc:	f7fb f81a 	bl	800f2f4 <netif_set_addr>
  dhcp_discover(netif);
 80142c0:	4638      	mov	r0, r7
 80142c2:	f7ff fc5f 	bl	8013b84 <dhcp_discover>
 80142c6:	e670      	b.n	8013faa <dhcp_recv+0xae>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80142c8:	2b02      	cmp	r3, #2
 80142ca:	f47f ae6e 	bne.w	8013faa <dhcp_recv+0xae>
 80142ce:	f899 3009 	ldrb.w	r3, [r9, #9]
 80142d2:	2b06      	cmp	r3, #6
 80142d4:	f47f ae69 	bne.w	8013faa <dhcp_recv+0xae>
    dhcp->request_timeout = 0;
 80142d8:	9b04      	ldr	r3, [sp, #16]
 80142da:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80142de:	9b02      	ldr	r3, [sp, #8]
 80142e0:	789b      	ldrb	r3, [r3, #2]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	f43f ae61 	beq.w	8013faa <dhcp_recv+0xae>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80142e8:	6890      	ldr	r0, [r2, #8]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80142ec:	f7fa f8a5 	bl	800e43a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80142f0:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80142f2:	6260      	str	r0, [r4, #36]	; 0x24
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80142f4:	691b      	ldr	r3, [r3, #16]
    dhcp_select(netif);
 80142f6:	4638      	mov	r0, r7
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80142f8:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 80142fa:	f7ff fca7 	bl	8013c4c <dhcp_select>
 80142fe:	e654      	b.n	8013faa <dhcp_recv+0xae>
    switch(op) {
 8014300:	2a36      	cmp	r2, #54	; 0x36
 8014302:	f43f aedf 	beq.w	80140c4 <dhcp_recv+0x1c8>
 8014306:	d80b      	bhi.n	8014320 <dhcp_recv+0x424>
 8014308:	2a34      	cmp	r2, #52	; 0x34
 801430a:	f43f aecc 	beq.w	80140a6 <dhcp_recv+0x1aa>
 801430e:	2a35      	cmp	r2, #53	; 0x35
 8014310:	d122      	bne.n	8014358 <dhcp_recv+0x45c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014312:	2b01      	cmp	r3, #1
 8014314:	f43f aef3 	beq.w	80140fe <dhcp_recv+0x202>
 8014318:	4b19      	ldr	r3, [pc, #100]	; (8014380 <dhcp_recv+0x484>)
 801431a:	f240 621d 	movw	r2, #1565	; 0x61d
 801431e:	e6c7      	b.n	80140b0 <dhcp_recv+0x1b4>
    switch(op) {
 8014320:	2a3a      	cmp	r2, #58	; 0x3a
 8014322:	f43f aed5 	beq.w	80140d0 <dhcp_recv+0x1d4>
 8014326:	2a3b      	cmp	r2, #59	; 0x3b
 8014328:	d116      	bne.n	8014358 <dhcp_recv+0x45c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801432a:	2b04      	cmp	r3, #4
 801432c:	f43f aeea 	beq.w	8014104 <dhcp_recv+0x208>
 8014330:	4b13      	ldr	r3, [pc, #76]	; (8014380 <dhcp_recv+0x484>)
 8014332:	f240 6229 	movw	r2, #1577	; 0x629
 8014336:	e692      	b.n	801405e <dhcp_recv+0x162>
    switch(op) {
 8014338:	2a33      	cmp	r2, #51	; 0x33
 801433a:	f43f aeb0 	beq.w	801409e <dhcp_recv+0x1a2>
 801433e:	d80f      	bhi.n	8014360 <dhcp_recv+0x464>
 8014340:	2a01      	cmp	r2, #1
 8014342:	f43f ae89 	beq.w	8014058 <dhcp_recv+0x15c>
 8014346:	f4ff ae4f 	bcc.w	8013fe8 <dhcp_recv+0xec>
 801434a:	2a03      	cmp	r2, #3
 801434c:	f43f ae8b 	beq.w	8014066 <dhcp_recv+0x16a>
 8014350:	2a06      	cmp	r2, #6
 8014352:	f43f ae90 	beq.w	8014076 <dhcp_recv+0x17a>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8014356:	2300      	movs	r3, #0
    offset += len + 2;
 8014358:	9a03      	ldr	r2, [sp, #12]
 801435a:	441a      	add	r2, r3
 801435c:	b294      	uxth	r4, r2
 801435e:	e6f3      	b.n	8014148 <dhcp_recv+0x24c>
    switch(op) {
 8014360:	2a36      	cmp	r2, #54	; 0x36
 8014362:	f43f aeb1 	beq.w	80140c8 <dhcp_recv+0x1cc>
 8014366:	d805      	bhi.n	8014374 <dhcp_recv+0x478>
 8014368:	2a34      	cmp	r2, #52	; 0x34
 801436a:	f43f ae9e 	beq.w	80140aa <dhcp_recv+0x1ae>
 801436e:	2a35      	cmp	r2, #53	; 0x35
 8014370:	d0d2      	beq.n	8014318 <dhcp_recv+0x41c>
 8014372:	e7f0      	b.n	8014356 <dhcp_recv+0x45a>
 8014374:	2a3a      	cmp	r2, #58	; 0x3a
 8014376:	f43f aead 	beq.w	80140d4 <dhcp_recv+0x1d8>
 801437a:	2a3b      	cmp	r2, #59	; 0x3b
 801437c:	d0d8      	beq.n	8014330 <dhcp_recv+0x434>
 801437e:	e7ea      	b.n	8014356 <dhcp_recv+0x45a>
 8014380:	08022122 	.word	0x08022122
 8014384:	080222ac 	.word	0x080222ac
 8014388:	2000d9b0 	.word	0x2000d9b0
 801438c:	0802264c 	.word	0x0802264c

08014390 <dhcp_network_changed>:
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014390:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (!dhcp)
 8014392:	b193      	cbz	r3, 80143ba <dhcp_network_changed+0x2a>
  switch (dhcp->state) {
 8014394:	7a5a      	ldrb	r2, [r3, #9]
 8014396:	2a0a      	cmp	r2, #10
 8014398:	d80b      	bhi.n	80143b2 <dhcp_network_changed+0x22>
 801439a:	e8df f002 	tbb	[pc, r2]
 801439e:	0a0e      	.short	0x0a0e
 80143a0:	0606060a 	.word	0x0606060a
 80143a4:	0a0a0a0a 	.word	0x0a0a0a0a
 80143a8:	06          	.byte	0x06
 80143a9:	00          	.byte	0x00
    dhcp->tries = 0;
 80143aa:	2200      	movs	r2, #0
 80143ac:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 80143ae:	f7ff bcc7 	b.w	8013d40 <dhcp_reboot>
    dhcp->tries = 0;
 80143b2:	2200      	movs	r2, #0
 80143b4:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 80143b6:	f7ff bbe5 	b.w	8013b84 <dhcp_discover>
}
 80143ba:	4770      	bx	lr

080143bc <dhcp_arp_reply>:
{
 80143bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80143be:	4605      	mov	r5, r0
 80143c0:	b948      	cbnz	r0, 80143d6 <dhcp_arp_reply+0x1a>
 80143c2:	f240 327b 	movw	r2, #891	; 0x37b
 80143c6:	4b23      	ldr	r3, [pc, #140]	; (8014454 <dhcp_arp_reply+0x98>)
 80143c8:	4923      	ldr	r1, [pc, #140]	; (8014458 <dhcp_arp_reply+0x9c>)
 80143ca:	4824      	ldr	r0, [pc, #144]	; (801445c <dhcp_arp_reply+0xa0>)
}
 80143cc:	b003      	add	sp, #12
 80143ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80143d2:	f002 ba59 	b.w	8016888 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80143d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80143d8:	2c00      	cmp	r4, #0
 80143da:	d039      	beq.n	8014450 <dhcp_arp_reply+0x94>
 80143dc:	7a63      	ldrb	r3, [r4, #9]
 80143de:	2b08      	cmp	r3, #8
 80143e0:	d136      	bne.n	8014450 <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80143e2:	680a      	ldr	r2, [r1, #0]
 80143e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d132      	bne.n	8014450 <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80143ea:	210c      	movs	r1, #12
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7ff f91b 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 80143f2:	2204      	movs	r2, #4
 80143f4:	4621      	mov	r1, r4
 80143f6:	4628      	mov	r0, r5
 80143f8:	f7ff f9ae 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 80143fc:	bb08      	cbnz	r0, 8014442 <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80143fe:	2204      	movs	r2, #4
 8014400:	2132      	movs	r1, #50	; 0x32
 8014402:	4620      	mov	r0, r4
 8014404:	f7ff f93a 	bl	801367c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014408:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801440a:	f7fa f816 	bl	800e43a <lwip_htonl>
 801440e:	4601      	mov	r1, r0
 8014410:	4620      	mov	r0, r4
 8014412:	f7ff f973 	bl	80136fc <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8014416:	4620      	mov	r0, r4
 8014418:	f7ff fb48 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801441c:	8aa1      	ldrh	r1, [r4, #20]
 801441e:	68e0      	ldr	r0, [r4, #12]
 8014420:	31f0      	adds	r1, #240	; 0xf0
 8014422:	b289      	uxth	r1, r1
 8014424:	f7fb fa20 	bl	800f868 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8014428:	4b0d      	ldr	r3, [pc, #52]	; (8014460 <dhcp_arp_reply+0xa4>)
 801442a:	480e      	ldr	r0, [pc, #56]	; (8014464 <dhcp_arp_reply+0xa8>)
 801442c:	e9cd 5300 	strd	r5, r3, [sp]
 8014430:	4a0d      	ldr	r2, [pc, #52]	; (8014468 <dhcp_arp_reply+0xac>)
 8014432:	2343      	movs	r3, #67	; 0x43
 8014434:	68e1      	ldr	r1, [r4, #12]
 8014436:	6800      	ldr	r0, [r0, #0]
 8014438:	f7fe ffde 	bl	80133f8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801443c:	4620      	mov	r0, r4
 801443e:	f7ff fb71 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8014442:	7aa3      	ldrb	r3, [r4, #10]
 8014444:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8014446:	bf1c      	itt	ne
 8014448:	3301      	addne	r3, #1
 801444a:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801444c:	2314      	movs	r3, #20
 801444e:	82e3      	strh	r3, [r4, #22]
}
 8014450:	b003      	add	sp, #12
 8014452:	bd30      	pop	{r4, r5, pc}
 8014454:	08022122 	.word	0x08022122
 8014458:	08021ebd 	.word	0x08021ebd
 801445c:	08018495 	.word	0x08018495
 8014460:	0802264c 	.word	0x0802264c
 8014464:	20004ff4 	.word	0x20004ff4
 8014468:	08022650 	.word	0x08022650

0801446c <dhcp_renew>:
{
 801446c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801446e:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014470:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014472:	2105      	movs	r1, #5
 8014474:	4620      	mov	r0, r4
 8014476:	f7ff f8d7 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801447a:	2203      	movs	r2, #3
 801447c:	4621      	mov	r1, r4
 801447e:	4630      	mov	r0, r6
 8014480:	f7ff f96a 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 8014484:	4605      	mov	r5, r0
 8014486:	bb90      	cbnz	r0, 80144ee <dhcp_renew+0x82>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014488:	2202      	movs	r2, #2
 801448a:	2139      	movs	r1, #57	; 0x39
 801448c:	4620      	mov	r0, r4
 801448e:	f7ff f8f5 	bl	801367c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8014492:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8014494:	4620      	mov	r0, r4
 8014496:	f7ff f8cf 	bl	8013638 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801449a:	2204      	movs	r2, #4
 801449c:	2137      	movs	r1, #55	; 0x37
 801449e:	4620      	mov	r0, r4
 80144a0:	f7ff f8ec 	bl	801367c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80144a4:	2101      	movs	r1, #1
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff f90c 	bl	80136c4 <dhcp_option_byte>
 80144ac:	2103      	movs	r1, #3
 80144ae:	4620      	mov	r0, r4
 80144b0:	f7ff f908 	bl	80136c4 <dhcp_option_byte>
 80144b4:	211c      	movs	r1, #28
 80144b6:	4620      	mov	r0, r4
 80144b8:	f7ff f904 	bl	80136c4 <dhcp_option_byte>
 80144bc:	2106      	movs	r1, #6
 80144be:	4620      	mov	r0, r4
 80144c0:	f7ff f900 	bl	80136c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80144c4:	4620      	mov	r0, r4
 80144c6:	f7ff faf1 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80144ca:	8aa1      	ldrh	r1, [r4, #20]
 80144cc:	68e0      	ldr	r0, [r4, #12]
 80144ce:	31f0      	adds	r1, #240	; 0xf0
 80144d0:	b289      	uxth	r1, r1
 80144d2:	f7fb f9c9 	bl	800f868 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80144d6:	4813      	ldr	r0, [pc, #76]	; (8014524 <dhcp_renew+0xb8>)
 80144d8:	9600      	str	r6, [sp, #0]
 80144da:	2343      	movs	r3, #67	; 0x43
 80144dc:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80144e0:	68e1      	ldr	r1, [r4, #12]
 80144e2:	6800      	ldr	r0, [r0, #0]
 80144e4:	f7fe ffee 	bl	80134c4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80144e8:	4620      	mov	r0, r4
 80144ea:	f7ff fb1b 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80144ee:	7aa3      	ldrb	r3, [r4, #10]
}
 80144f0:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 80144f2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80144f4:	bf1c      	itt	ne
 80144f6:	3301      	addne	r3, #1
 80144f8:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 80144fa:	7aa3      	ldrb	r3, [r4, #10]
 80144fc:	2b09      	cmp	r3, #9
 80144fe:	bf96      	itet	ls
 8014500:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8014504:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8014508:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801450c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8014510:	bf9c      	itt	ls
 8014512:	011b      	lslls	r3, r3, #4
 8014514:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8014516:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801451a:	fb93 f3f2 	sdiv	r3, r3, r2
 801451e:	82e3      	strh	r3, [r4, #22]
}
 8014520:	b002      	add	sp, #8
 8014522:	bd70      	pop	{r4, r5, r6, pc}
 8014524:	20004ff4 	.word	0x20004ff4

08014528 <dhcp_stop>:
{
 8014528:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801452a:	b940      	cbnz	r0, 801453e <dhcp_stop+0x16>
}
 801452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8014530:	4b0e      	ldr	r3, [pc, #56]	; (801456c <dhcp_stop+0x44>)
 8014532:	f240 5242 	movw	r2, #1346	; 0x542
 8014536:	490e      	ldr	r1, [pc, #56]	; (8014570 <dhcp_stop+0x48>)
 8014538:	480e      	ldr	r0, [pc, #56]	; (8014574 <dhcp_stop+0x4c>)
 801453a:	f002 b9a5 	b.w	8016888 <iprintf>
  dhcp = netif_dhcp_data(netif);
 801453e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (dhcp != NULL) {
 8014540:	b194      	cbz	r4, 8014568 <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014542:	6863      	ldr	r3, [r4, #4]
 8014544:	b133      	cbz	r3, 8014554 <dhcp_stop+0x2c>
 8014546:	4b09      	ldr	r3, [pc, #36]	; (801456c <dhcp_stop+0x44>)
 8014548:	f240 524f 	movw	r2, #1359	; 0x54f
 801454c:	490a      	ldr	r1, [pc, #40]	; (8014578 <dhcp_stop+0x50>)
 801454e:	4809      	ldr	r0, [pc, #36]	; (8014574 <dhcp_stop+0x4c>)
 8014550:	f002 f99a 	bl	8016888 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014554:	2100      	movs	r1, #0
 8014556:	4620      	mov	r0, r4
 8014558:	f7ff f866 	bl	8013628 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 801455c:	7a23      	ldrb	r3, [r4, #8]
 801455e:	b11b      	cbz	r3, 8014568 <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014560:	f7ff fc5c 	bl	8013e1c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	7223      	strb	r3, [r4, #8]
}
 8014568:	bd10      	pop	{r4, pc}
 801456a:	bf00      	nop
 801456c:	08022122 	.word	0x08022122
 8014570:	0802231c 	.word	0x0802231c
 8014574:	08018495 	.word	0x08018495
 8014578:	08022225 	.word	0x08022225

0801457c <dhcp_start>:
{
 801457c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801457e:	4605      	mov	r5, r0
 8014580:	b948      	cbnz	r0, 8014596 <dhcp_start+0x1a>
 8014582:	f240 22d6 	movw	r2, #726	; 0x2d6
 8014586:	4b26      	ldr	r3, [pc, #152]	; (8014620 <dhcp_start+0xa4>)
 8014588:	4926      	ldr	r1, [pc, #152]	; (8014624 <dhcp_start+0xa8>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801458a:	4827      	ldr	r0, [pc, #156]	; (8014628 <dhcp_start+0xac>)
 801458c:	f002 f97c 	bl	8016888 <iprintf>
 8014590:	f06f 000f 	mvn.w	r0, #15
}
 8014594:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014596:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 801459a:	07db      	lsls	r3, r3, #31
 801459c:	d404      	bmi.n	80145a8 <dhcp_start+0x2c>
 801459e:	4b20      	ldr	r3, [pc, #128]	; (8014620 <dhcp_start+0xa4>)
 80145a0:	f240 22d7 	movw	r2, #727	; 0x2d7
 80145a4:	4921      	ldr	r1, [pc, #132]	; (801462c <dhcp_start+0xb0>)
 80145a6:	e7f0      	b.n	801458a <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80145a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
  dhcp = netif_dhcp_data(netif);
 80145aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80145ac:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80145b0:	d202      	bcs.n	80145b8 <dhcp_start+0x3c>
    return ERR_MEM;
 80145b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145b6:	e7ed      	b.n	8014594 <dhcp_start+0x18>
  if (dhcp == NULL) {
 80145b8:	b9d4      	cbnz	r4, 80145f0 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80145ba:	2040      	movs	r0, #64	; 0x40
 80145bc:	f7fa fd3c 	bl	800f038 <mem_malloc>
    if (dhcp == NULL) {
 80145c0:	4604      	mov	r4, r0
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d0f5      	beq.n	80145b2 <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80145c6:	6268      	str	r0, [r5, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 80145c8:	2240      	movs	r2, #64	; 0x40
 80145ca:	2100      	movs	r1, #0
 80145cc:	4620      	mov	r0, r4
 80145ce:	f002 f8ad 	bl	801672c <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80145d2:	f7ff fa31 	bl	8013a38 <dhcp_inc_pcb_refcount>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d1eb      	bne.n	80145b2 <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 80145da:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 80145dc:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 80145de:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 80145e0:	f7ff fad0 	bl	8013b84 <dhcp_discover>
  if (result != ERR_OK) {
 80145e4:	2800      	cmp	r0, #0
 80145e6:	d0d5      	beq.n	8014594 <dhcp_start+0x18>
    dhcp_stop(netif);
 80145e8:	4628      	mov	r0, r5
 80145ea:	f7ff ff9d 	bl	8014528 <dhcp_stop>
 80145ee:	e7e0      	b.n	80145b2 <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 80145f0:	68e3      	ldr	r3, [r4, #12]
 80145f2:	b133      	cbz	r3, 8014602 <dhcp_start+0x86>
 80145f4:	4b0a      	ldr	r3, [pc, #40]	; (8014620 <dhcp_start+0xa4>)
 80145f6:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 80145fa:	490d      	ldr	r1, [pc, #52]	; (8014630 <dhcp_start+0xb4>)
 80145fc:	480a      	ldr	r0, [pc, #40]	; (8014628 <dhcp_start+0xac>)
 80145fe:	f002 f943 	bl	8016888 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8014602:	6863      	ldr	r3, [r4, #4]
 8014604:	b133      	cbz	r3, 8014614 <dhcp_start+0x98>
 8014606:	4b06      	ldr	r3, [pc, #24]	; (8014620 <dhcp_start+0xa4>)
 8014608:	f240 22f1 	movw	r2, #753	; 0x2f1
 801460c:	4909      	ldr	r1, [pc, #36]	; (8014634 <dhcp_start+0xb8>)
 801460e:	4806      	ldr	r0, [pc, #24]	; (8014628 <dhcp_start+0xac>)
 8014610:	f002 f93a 	bl	8016888 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 8014614:	7a23      	ldrb	r3, [r4, #8]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0d6      	beq.n	80145c8 <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801461a:	f7ff fbff 	bl	8013e1c <dhcp_dec_pcb_refcount>
 801461e:	e7d3      	b.n	80145c8 <dhcp_start+0x4c>
 8014620:	08022122 	.word	0x08022122
 8014624:	08021ebd 	.word	0x08021ebd
 8014628:	08018495 	.word	0x08018495
 801462c:	080222e3 	.word	0x080222e3
 8014630:	08022304 	.word	0x08022304
 8014634:	08022225 	.word	0x08022225

08014638 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014638:	b150      	cbz	r0, 8014650 <dhcp_supplied_address+0x18>
 801463a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801463c:	b140      	cbz	r0, 8014650 <dhcp_supplied_address+0x18>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801463e:	7a40      	ldrb	r0, [r0, #9]
 8014640:	280a      	cmp	r0, #10
 8014642:	d006      	beq.n	8014652 <dhcp_supplied_address+0x1a>
 8014644:	3804      	subs	r0, #4
 8014646:	2801      	cmp	r0, #1
 8014648:	bf8c      	ite	hi
 801464a:	2000      	movhi	r0, #0
 801464c:	2001      	movls	r0, #1
 801464e:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8014650:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014652:	2001      	movs	r0, #1
 8014654:	e7fb      	b.n	801464e <dhcp_supplied_address+0x16>
	...

08014658 <dhcp_release>:
{
 8014658:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801465a:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 801465c:	b085      	sub	sp, #20
 801465e:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8014660:	2c00      	cmp	r4, #0
 8014662:	d045      	beq.n	80146f0 <dhcp_release+0x98>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014666:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8014668:	f7ff ffe6 	bl	8014638 <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801466c:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801466e:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014670:	4620      	mov	r0, r4
 8014672:	f7fe ffd9 	bl	8013628 <dhcp_set_state>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014676:	2300      	movs	r3, #0
 8014678:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801467c:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014680:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014684:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014688:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 801468a:	b375      	cbz	r5, 80146ea <dhcp_release+0x92>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801468c:	2207      	movs	r2, #7
 801468e:	4621      	mov	r1, r4
 8014690:	4630      	mov	r0, r6
 8014692:	f7ff f861 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 8014696:	4605      	mov	r5, r0
 8014698:	bb08      	cbnz	r0, 80146de <dhcp_release+0x86>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801469a:	2204      	movs	r2, #4
 801469c:	2136      	movs	r1, #54	; 0x36
 801469e:	4620      	mov	r0, r4
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80146a0:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80146a2:	f7fe ffeb 	bl	801367c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80146a6:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 80146aa:	f7f9 fec6 	bl	800e43a <lwip_htonl>
 80146ae:	4601      	mov	r1, r0
 80146b0:	4620      	mov	r0, r4
 80146b2:	f7ff f823 	bl	80136fc <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 80146b6:	4620      	mov	r0, r4
 80146b8:	f7ff f9f8 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80146bc:	8aa1      	ldrh	r1, [r4, #20]
 80146be:	68e0      	ldr	r0, [r4, #12]
 80146c0:	31f0      	adds	r1, #240	; 0xf0
 80146c2:	b289      	uxth	r1, r1
 80146c4:	f7fb f8d0 	bl	800f868 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80146c8:	480b      	ldr	r0, [pc, #44]	; (80146f8 <dhcp_release+0xa0>)
 80146ca:	9600      	str	r6, [sp, #0]
 80146cc:	2343      	movs	r3, #67	; 0x43
 80146ce:	463a      	mov	r2, r7
 80146d0:	68e1      	ldr	r1, [r4, #12]
 80146d2:	6800      	ldr	r0, [r0, #0]
 80146d4:	f7fe fef6 	bl	80134c4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80146d8:	4620      	mov	r0, r4
 80146da:	f7ff fa23 	bl	8013b24 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80146de:	4b07      	ldr	r3, [pc, #28]	; (80146fc <dhcp_release+0xa4>)
 80146e0:	4630      	mov	r0, r6
 80146e2:	461a      	mov	r2, r3
 80146e4:	4619      	mov	r1, r3
 80146e6:	f7fa fe05 	bl	800f2f4 <netif_set_addr>
}
 80146ea:	4628      	mov	r0, r5
 80146ec:	b005      	add	sp, #20
 80146ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 80146f0:	f06f 050f 	mvn.w	r5, #15
 80146f4:	e7f9      	b.n	80146ea <dhcp_release+0x92>
 80146f6:	bf00      	nop
 80146f8:	20004ff4 	.word	0x20004ff4
 80146fc:	0802264c 	.word	0x0802264c

08014700 <dhcp_coarse_tmr>:
{
 8014700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014704:	f240 2619 	movw	r6, #537	; 0x219
  struct netif *netif = netif_list;
 8014708:	4b51      	ldr	r3, [pc, #324]	; (8014850 <dhcp_coarse_tmr+0x150>)
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801470a:	4f52      	ldr	r7, [pc, #328]	; (8014854 <dhcp_coarse_tmr+0x154>)
  struct netif *netif = netif_list;
 801470c:	681d      	ldr	r5, [r3, #0]
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801470e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8014858 <dhcp_coarse_tmr+0x158>
  while (netif != NULL) {
 8014712:	b915      	cbnz	r5, 801471a <dhcp_coarse_tmr+0x1a>
}
 8014714:	b003      	add	sp, #12
 8014716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801471a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801471c:	b17c      	cbz	r4, 801473e <dhcp_coarse_tmr+0x3e>
 801471e:	7a63      	ldrb	r3, [r4, #9]
 8014720:	b16b      	cbz	r3, 801473e <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014722:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8014724:	b169      	cbz	r1, 8014742 <dhcp_coarse_tmr+0x42>
 8014726:	8c22      	ldrh	r2, [r4, #32]
 8014728:	3201      	adds	r2, #1
 801472a:	b292      	uxth	r2, r2
 801472c:	4291      	cmp	r1, r2
 801472e:	8422      	strh	r2, [r4, #32]
 8014730:	d107      	bne.n	8014742 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 8014732:	4628      	mov	r0, r5
 8014734:	f7ff ff90 	bl	8014658 <dhcp_release>
        dhcp_discover(netif);
 8014738:	4628      	mov	r0, r5
 801473a:	f7ff fa23 	bl	8013b84 <dhcp_discover>
    netif = netif->next;
 801473e:	682d      	ldr	r5, [r5, #0]
 8014740:	e7e7      	b.n	8014712 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014742:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 8014746:	f1b9 0f00 	cmp.w	r9, #0
 801474a:	d068      	beq.n	801481e <dhcp_coarse_tmr+0x11e>
 801474c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014750:	f1b9 0f01 	cmp.w	r9, #1
 8014754:	83e2      	strh	r2, [r4, #30]
 8014756:	d162      	bne.n	801481e <dhcp_coarse_tmr+0x11e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014758:	3b01      	subs	r3, #1
 801475a:	b2db      	uxtb	r3, r3
 801475c:	2b09      	cmp	r3, #9
 801475e:	d8ee      	bhi.n	801473e <dhcp_coarse_tmr+0x3e>
 8014760:	fa26 f303 	lsr.w	r3, r6, r3
 8014764:	07db      	lsls	r3, r3, #31
 8014766:	d5ea      	bpl.n	801473e <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014768:	2104      	movs	r1, #4
 801476a:	4620      	mov	r0, r4
 801476c:	f7fe ff5c 	bl	8013628 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8014770:	2203      	movs	r2, #3
 8014772:	4621      	mov	r1, r4
 8014774:	4628      	mov	r0, r5
 8014776:	f7fe ffef 	bl	8013758 <dhcp_create_msg>
  if (result == ERR_OK) {
 801477a:	bb80      	cbnz	r0, 80147de <dhcp_coarse_tmr+0xde>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801477c:	2202      	movs	r2, #2
 801477e:	2139      	movs	r1, #57	; 0x39
 8014780:	4620      	mov	r0, r4
 8014782:	f7fe ff7b 	bl	801367c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8014786:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 8014788:	4620      	mov	r0, r4
 801478a:	f7fe ff55 	bl	8013638 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801478e:	2204      	movs	r2, #4
 8014790:	2137      	movs	r1, #55	; 0x37
 8014792:	4620      	mov	r0, r4
 8014794:	f7fe ff72 	bl	801367c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8014798:	4649      	mov	r1, r9
 801479a:	4620      	mov	r0, r4
 801479c:	f7fe ff92 	bl	80136c4 <dhcp_option_byte>
 80147a0:	2103      	movs	r1, #3
 80147a2:	4620      	mov	r0, r4
 80147a4:	f7fe ff8e 	bl	80136c4 <dhcp_option_byte>
 80147a8:	211c      	movs	r1, #28
 80147aa:	4620      	mov	r0, r4
 80147ac:	f7fe ff8a 	bl	80136c4 <dhcp_option_byte>
 80147b0:	2106      	movs	r1, #6
 80147b2:	4620      	mov	r0, r4
 80147b4:	f7fe ff86 	bl	80136c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80147b8:	4620      	mov	r0, r4
 80147ba:	f7ff f977 	bl	8013aac <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80147be:	8aa1      	ldrh	r1, [r4, #20]
 80147c0:	68e0      	ldr	r0, [r4, #12]
 80147c2:	31f0      	adds	r1, #240	; 0xf0
 80147c4:	b289      	uxth	r1, r1
 80147c6:	f7fb f84f 	bl	800f868 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80147ca:	9500      	str	r5, [sp, #0]
 80147cc:	2343      	movs	r3, #67	; 0x43
 80147ce:	4642      	mov	r2, r8
 80147d0:	68e1      	ldr	r1, [r4, #12]
 80147d2:	6838      	ldr	r0, [r7, #0]
 80147d4:	f7fe fe76 	bl	80134c4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80147d8:	4620      	mov	r0, r4
 80147da:	f7ff f9a3 	bl	8013b24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80147de:	7aa3      	ldrb	r3, [r4, #10]
 80147e0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80147e2:	bf1c      	itt	ne
 80147e4:	3301      	addne	r3, #1
 80147e6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80147e8:	7aa3      	ldrb	r3, [r4, #10]
 80147ea:	2b09      	cmp	r3, #9
 80147ec:	bf96      	itet	ls
 80147ee:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80147f2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80147f6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80147fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80147fe:	bf9c      	itt	ls
 8014800:	00db      	lslls	r3, r3, #3
 8014802:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8014804:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014808:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801480c:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801480e:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8014810:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8014812:	1a9b      	subs	r3, r3, r2
 8014814:	2b01      	cmp	r3, #1
 8014816:	dd92      	ble.n	801473e <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014818:	105b      	asrs	r3, r3, #1
 801481a:	83e3      	strh	r3, [r4, #30]
 801481c:	e78f      	b.n	801473e <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801481e:	8ba2      	ldrh	r2, [r4, #28]
 8014820:	2a00      	cmp	r2, #0
 8014822:	d08c      	beq.n	801473e <dhcp_coarse_tmr+0x3e>
 8014824:	1e51      	subs	r1, r2, #1
 8014826:	2a01      	cmp	r2, #1
 8014828:	83a1      	strh	r1, [r4, #28]
 801482a:	d188      	bne.n	801473e <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801482c:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8014830:	2a01      	cmp	r2, #1
 8014832:	d001      	beq.n	8014838 <dhcp_coarse_tmr+0x138>
 8014834:	2b0a      	cmp	r3, #10
 8014836:	d182      	bne.n	801473e <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8014838:	4628      	mov	r0, r5
 801483a:	f7ff fe17 	bl	801446c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801483e:	8b63      	ldrh	r3, [r4, #26]
 8014840:	8c22      	ldrh	r2, [r4, #32]
 8014842:	1a9b      	subs	r3, r3, r2
 8014844:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014846:	bfc4      	itt	gt
 8014848:	105b      	asrgt	r3, r3, #1
 801484a:	83a3      	strhgt	r3, [r4, #28]
 801484c:	e777      	b.n	801473e <dhcp_coarse_tmr+0x3e>
 801484e:	bf00      	nop
 8014850:	2000d978 	.word	0x2000d978
 8014854:	20004ff4 	.word	0x20004ff4
 8014858:	08022650 	.word	0x08022650

0801485c <dhcp_fine_tmr>:
{
 801485c:	b538      	push	{r3, r4, r5, lr}
        dhcp->request_timeout--;
 801485e:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 8014860:	4b1c      	ldr	r3, [pc, #112]	; (80148d4 <dhcp_fine_tmr+0x78>)
 8014862:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 8014864:	b904      	cbnz	r4, 8014868 <dhcp_fine_tmr+0xc>
}
 8014866:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014868:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 801486a:	b123      	cbz	r3, 8014876 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 801486c:	8ada      	ldrh	r2, [r3, #22]
 801486e:	2a01      	cmp	r2, #1
 8014870:	d903      	bls.n	801487a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8014872:	3a01      	subs	r2, #1
 8014874:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 8014876:	6824      	ldr	r4, [r4, #0]
 8014878:	e7f4      	b.n	8014864 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 801487a:	d1fc      	bne.n	8014876 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801487c:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 801487e:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014880:	2a0c      	cmp	r2, #12
 8014882:	d001      	beq.n	8014888 <dhcp_fine_tmr+0x2c>
 8014884:	2a06      	cmp	r2, #6
 8014886:	d103      	bne.n	8014890 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8014888:	4620      	mov	r0, r4
      dhcp_discover(netif);
 801488a:	f7ff f97b 	bl	8013b84 <dhcp_discover>
 801488e:	e7f2      	b.n	8014876 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014890:	2a01      	cmp	r2, #1
 8014892:	d109      	bne.n	80148a8 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8014894:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 8014896:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8014898:	2b05      	cmp	r3, #5
 801489a:	d802      	bhi.n	80148a2 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 801489c:	f7ff f9d6 	bl	8013c4c <dhcp_select>
 80148a0:	e7e9      	b.n	8014876 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 80148a2:	f7ff fed9 	bl	8014658 <dhcp_release>
 80148a6:	e7ef      	b.n	8014888 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80148a8:	2a08      	cmp	r2, #8
 80148aa:	d109      	bne.n	80148c0 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 80148ac:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 80148ae:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d802      	bhi.n	80148ba <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 80148b4:	f7ff f82a 	bl	801390c <dhcp_check>
 80148b8:	e7dd      	b.n	8014876 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80148ba:	f7ff f83d 	bl	8013938 <dhcp_bind>
 80148be:	e7da      	b.n	8014876 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80148c0:	2a03      	cmp	r2, #3
 80148c2:	d1d8      	bne.n	8014876 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80148c4:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 80148c6:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d8de      	bhi.n	801488a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80148cc:	f7ff fa38 	bl	8013d40 <dhcp_reboot>
 80148d0:	e7d1      	b.n	8014876 <dhcp_fine_tmr+0x1a>
 80148d2:	bf00      	nop
 80148d4:	2000d978 	.word	0x2000d978

080148d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80148d8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80148da:	2618      	movs	r6, #24
 80148dc:	4346      	muls	r6, r0
 80148de:	4c07      	ldr	r4, [pc, #28]	; (80148fc <etharp_free_entry+0x24>)
{
 80148e0:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80148e2:	59a0      	ldr	r0, [r4, r6]
 80148e4:	b118      	cbz	r0, 80148ee <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80148e6:	f7fa fe7b 	bl	800f5e0 <pbuf_free>
    arp_table[i].q = NULL;
 80148ea:	2300      	movs	r3, #0
 80148ec:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80148ee:	2318      	movs	r3, #24
 80148f0:	fb03 4405 	mla	r4, r3, r5, r4
 80148f4:	2300      	movs	r3, #0
 80148f6:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80148f8:	bd70      	pop	{r4, r5, r6, pc}
 80148fa:	bf00      	nop
 80148fc:	20005000 	.word	0x20005000

08014900 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014900:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014904:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014906:	4689      	mov	r9, r1
 8014908:	4692      	mov	sl, r2
 801490a:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801490c:	4607      	mov	r7, r0
 801490e:	b930      	cbnz	r0, 801491e <etharp_raw+0x1e>
 8014910:	4b2c      	ldr	r3, [pc, #176]	; (80149c4 <etharp_raw+0xc4>)
 8014912:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8014916:	492c      	ldr	r1, [pc, #176]	; (80149c8 <etharp_raw+0xc8>)
 8014918:	482c      	ldr	r0, [pc, #176]	; (80149cc <etharp_raw+0xcc>)
 801491a:	f001 ffb5 	bl	8016888 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801491e:	2200      	movs	r2, #0
 8014920:	211c      	movs	r1, #28
 8014922:	2002      	movs	r0, #2
 8014924:	f7fa fec4 	bl	800f6b0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014928:	4606      	mov	r6, r0
 801492a:	2800      	cmp	r0, #0
 801492c:	d047      	beq.n	80149be <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801492e:	8943      	ldrh	r3, [r0, #10]
 8014930:	2b1b      	cmp	r3, #27
 8014932:	d806      	bhi.n	8014942 <etharp_raw+0x42>
 8014934:	4b23      	ldr	r3, [pc, #140]	; (80149c4 <etharp_raw+0xc4>)
 8014936:	f240 4264 	movw	r2, #1124	; 0x464
 801493a:	4925      	ldr	r1, [pc, #148]	; (80149d0 <etharp_raw+0xd0>)
 801493c:	4823      	ldr	r0, [pc, #140]	; (80149cc <etharp_raw+0xcc>)
 801493e:	f001 ffa3 	bl	8016888 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014942:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8014946:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8014948:	f7f9 fd74 	bl	800e434 <lwip_htons>
 801494c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801494e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014952:	2b06      	cmp	r3, #6
 8014954:	d006      	beq.n	8014964 <etharp_raw+0x64>
 8014956:	4b1b      	ldr	r3, [pc, #108]	; (80149c4 <etharp_raw+0xc4>)
 8014958:	f240 426b 	movw	r2, #1131	; 0x46b
 801495c:	491d      	ldr	r1, [pc, #116]	; (80149d4 <etharp_raw+0xd4>)
 801495e:	481b      	ldr	r0, [pc, #108]	; (80149cc <etharp_raw+0xcc>)
 8014960:	f001 ff92 	bl	8016888 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014964:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014968:	464a      	mov	r2, r9
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801496a:	60a3      	str	r3, [r4, #8]
 801496c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014970:	4631      	mov	r1, r6
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014972:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014974:	682b      	ldr	r3, [r5, #0]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014976:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014978:	f8c4 3012 	str.w	r3, [r4, #18]
 801497c:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801497e:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014980:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8014982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801498a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801498c:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801498e:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8014990:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8014992:	2301      	movs	r3, #1
 8014994:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014996:	2308      	movs	r3, #8
 8014998:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 801499a:	2306      	movs	r3, #6
 801499c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801499e:	2304      	movs	r3, #4
 80149a0:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80149a2:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80149a6:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	4653      	mov	r3, sl
 80149ac:	f001 fa7c 	bl	8015ea8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80149b0:	4630      	mov	r0, r6
 80149b2:	f7fa fe15 	bl	800f5e0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80149b6:	4628      	mov	r0, r5
}
 80149b8:	b002      	add	sp, #8
 80149ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80149be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149c2:	e7f9      	b.n	80149b8 <etharp_raw+0xb8>
 80149c4:	0802242a 	.word	0x0802242a
 80149c8:	08021ebd 	.word	0x08021ebd
 80149cc:	08018495 	.word	0x08018495
 80149d0:	08022461 	.word	0x08022461
 80149d4:	08022492 	.word	0x08022492

080149d8 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80149d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t old_queue = ARP_TABLE_SIZE;
 80149dc:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80149de:	4604      	mov	r4, r0
 80149e0:	2000      	movs	r0, #0
 80149e2:	4b3d      	ldr	r3, [pc, #244]	; (8014ad8 <etharp_find_entry.isra.0+0x100>)
 80149e4:	9101      	str	r1, [sp, #4]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80149e6:	4696      	mov	lr, r2
 80149e8:	4611      	mov	r1, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80149ea:	4682      	mov	sl, r0
 80149ec:	4681      	mov	r9, r0
 80149ee:	4680      	mov	r8, r0
  s8_t empty = ARP_TABLE_SIZE;
 80149f0:	4694      	mov	ip, r2
 80149f2:	461d      	mov	r5, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80149f4:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 80149f8:	f893 b014 	ldrb.w	fp, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80149fc:	d12a      	bne.n	8014a54 <etharp_find_entry.isra.0+0x7c>
 80149fe:	f1bb 0f00 	cmp.w	fp, #0
 8014a02:	d12a      	bne.n	8014a5a <etharp_find_entry.isra.0+0x82>
      empty = i;
 8014a04:	fa4f fc80 	sxtb.w	ip, r0
 8014a08:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a0a:	280a      	cmp	r0, #10
 8014a0c:	f103 0318 	add.w	r3, r3, #24
 8014a10:	d1f0      	bne.n	80149f4 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014a12:	9b01      	ldr	r3, [sp, #4]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	d15b      	bne.n	8014ad0 <etharp_find_entry.isra.0+0xf8>
 8014a18:	f1bc 0f0a 	cmp.w	ip, #10
 8014a1c:	d03c      	beq.n	8014a98 <etharp_find_entry.isra.0+0xc0>
    i = empty;
 8014a1e:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014a22:	2318      	movs	r3, #24
 8014a24:	fb03 5306 	mla	r3, r3, r6, r5
 8014a28:	7d1b      	ldrb	r3, [r3, #20]
 8014a2a:	b133      	cbz	r3, 8014a3a <etharp_find_entry.isra.0+0x62>
 8014a2c:	4b2b      	ldr	r3, [pc, #172]	; (8014adc <etharp_find_entry.isra.0+0x104>)
 8014a2e:	f240 1287 	movw	r2, #391	; 0x187
 8014a32:	492b      	ldr	r1, [pc, #172]	; (8014ae0 <etharp_find_entry.isra.0+0x108>)
 8014a34:	482b      	ldr	r0, [pc, #172]	; (8014ae4 <etharp_find_entry.isra.0+0x10c>)
 8014a36:	f001 ff27 	bl	8016888 <iprintf>
  if (ipaddr != NULL) {
 8014a3a:	b124      	cbz	r4, 8014a46 <etharp_find_entry.isra.0+0x6e>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014a3c:	2318      	movs	r3, #24
 8014a3e:	fb03 5306 	mla	r3, r3, r6, r5
 8014a42:	6822      	ldr	r2, [r4, #0]
 8014a44:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8014a46:	2318      	movs	r3, #24
 8014a48:	fb03 5506 	mla	r5, r3, r6, r5
 8014a4c:	2300      	movs	r3, #0
  return (err_t)i;
 8014a4e:	b270      	sxtb	r0, r6
  arp_table[i].ctime = 0;
 8014a50:	826b      	strh	r3, [r5, #18]
 8014a52:	e008      	b.n	8014a66 <etharp_find_entry.isra.0+0x8e>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014a54:	f1bb 0f00 	cmp.w	fp, #0
 8014a58:	d0d6      	beq.n	8014a08 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014a5a:	b13c      	cbz	r4, 8014a6c <etharp_find_entry.isra.0+0x94>
 8014a5c:	6827      	ldr	r7, [r4, #0]
 8014a5e:	685e      	ldr	r6, [r3, #4]
 8014a60:	42b7      	cmp	r7, r6
 8014a62:	d103      	bne.n	8014a6c <etharp_find_entry.isra.0+0x94>
        return i;
 8014a64:	b240      	sxtb	r0, r0
}
 8014a66:	b003      	add	sp, #12
 8014a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 8014a6c:	f1bb 0f01 	cmp.w	fp, #1
 8014a70:	8a5f      	ldrh	r7, [r3, #18]
 8014a72:	d10c      	bne.n	8014a8e <etharp_find_entry.isra.0+0xb6>
        if (arp_table[i].q != NULL) {
 8014a74:	681e      	ldr	r6, [r3, #0]
 8014a76:	b126      	cbz	r6, 8014a82 <etharp_find_entry.isra.0+0xaa>
          if (arp_table[i].ctime >= age_queue) {
 8014a78:	4547      	cmp	r7, r8
 8014a7a:	d3c5      	bcc.n	8014a08 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 8014a7c:	b242      	sxtb	r2, r0
 8014a7e:	46b8      	mov	r8, r7
 8014a80:	e7c2      	b.n	8014a08 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 8014a82:	454f      	cmp	r7, r9
 8014a84:	d3c0      	bcc.n	8014a08 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 8014a86:	fa4f fe80 	sxtb.w	lr, r0
 8014a8a:	46b9      	mov	r9, r7
 8014a8c:	e7bc      	b.n	8014a08 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 8014a8e:	4557      	cmp	r7, sl
            old_stable = i;
 8014a90:	bf24      	itt	cs
 8014a92:	b241      	sxtbcs	r1, r0
 8014a94:	46ba      	movcs	sl, r7
 8014a96:	e7b7      	b.n	8014a08 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 8014a98:	290a      	cmp	r1, #10
 8014a9a:	d00f      	beq.n	8014abc <etharp_find_entry.isra.0+0xe4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014a9c:	2318      	movs	r3, #24
      i = old_stable;
 8014a9e:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014aa0:	4359      	muls	r1, r3
 8014aa2:	586b      	ldr	r3, [r5, r1]
 8014aa4:	b133      	cbz	r3, 8014ab4 <etharp_find_entry.isra.0+0xdc>
 8014aa6:	4b0d      	ldr	r3, [pc, #52]	; (8014adc <etharp_find_entry.isra.0+0x104>)
 8014aa8:	f240 126f 	movw	r2, #367	; 0x16f
 8014aac:	490e      	ldr	r1, [pc, #56]	; (8014ae8 <etharp_find_entry.isra.0+0x110>)
 8014aae:	480d      	ldr	r0, [pc, #52]	; (8014ae4 <etharp_find_entry.isra.0+0x10c>)
 8014ab0:	f001 feea 	bl	8016888 <iprintf>
    etharp_free_entry(i);
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	f7ff ff0f 	bl	80148d8 <etharp_free_entry>
 8014aba:	e7b2      	b.n	8014a22 <etharp_find_entry.isra.0+0x4a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014abc:	f1be 0f0a 	cmp.w	lr, #10
 8014ac0:	d002      	beq.n	8014ac8 <etharp_find_entry.isra.0+0xf0>
      i = old_pending;
 8014ac2:	fa5f f68e 	uxtb.w	r6, lr
 8014ac6:	e7f5      	b.n	8014ab4 <etharp_find_entry.isra.0+0xdc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014ac8:	2a0a      	cmp	r2, #10
 8014aca:	d001      	beq.n	8014ad0 <etharp_find_entry.isra.0+0xf8>
      i = old_queue;
 8014acc:	b2d6      	uxtb	r6, r2
 8014ace:	e7f1      	b.n	8014ab4 <etharp_find_entry.isra.0+0xdc>
    return (s8_t)ERR_MEM;
 8014ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ad4:	e7c7      	b.n	8014a66 <etharp_find_entry.isra.0+0x8e>
 8014ad6:	bf00      	nop
 8014ad8:	20005000 	.word	0x20005000
 8014adc:	0802242a 	.word	0x0802242a
 8014ae0:	0802234c 	.word	0x0802234c
 8014ae4:	08018495 	.word	0x08018495
 8014ae8:	08022335 	.word	0x08022335

08014aec <etharp_cleanup_netif>:
{
 8014aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aee:	4605      	mov	r5, r0
 8014af0:	2400      	movs	r4, #0
 8014af2:	2718      	movs	r7, #24
 8014af4:	4e07      	ldr	r6, [pc, #28]	; (8014b14 <etharp_cleanup_netif+0x28>)
 8014af6:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014afa:	7d1a      	ldrb	r2, [r3, #20]
 8014afc:	b12a      	cbz	r2, 8014b0a <etharp_cleanup_netif+0x1e>
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	42ab      	cmp	r3, r5
 8014b02:	d102      	bne.n	8014b0a <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 8014b04:	4620      	mov	r0, r4
 8014b06:	f7ff fee7 	bl	80148d8 <etharp_free_entry>
 8014b0a:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b0c:	2c0a      	cmp	r4, #10
 8014b0e:	d1f2      	bne.n	8014af6 <etharp_cleanup_netif+0xa>
}
 8014b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b12:	bf00      	nop
 8014b14:	20005000 	.word	0x20005000

08014b18 <etharp_input>:
{
 8014b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b1c:	4680      	mov	r8, r0
 8014b1e:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b20:	460c      	mov	r4, r1
 8014b22:	b949      	cbnz	r1, 8014b38 <etharp_input+0x20>
 8014b24:	4b46      	ldr	r3, [pc, #280]	; (8014c40 <etharp_input+0x128>)
 8014b26:	f44f 7222 	mov.w	r2, #648	; 0x288
 8014b2a:	4946      	ldr	r1, [pc, #280]	; (8014c44 <etharp_input+0x12c>)
 8014b2c:	4846      	ldr	r0, [pc, #280]	; (8014c48 <etharp_input+0x130>)
 8014b2e:	f001 feab 	bl	8016888 <iprintf>
}
 8014b32:	b006      	add	sp, #24
 8014b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8014b38:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8014b3a:	8833      	ldrh	r3, [r6, #0]
 8014b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b40:	d108      	bne.n	8014b54 <etharp_input+0x3c>
 8014b42:	7933      	ldrb	r3, [r6, #4]
 8014b44:	2b06      	cmp	r3, #6
 8014b46:	d105      	bne.n	8014b54 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b48:	7973      	ldrb	r3, [r6, #5]
 8014b4a:	2b04      	cmp	r3, #4
 8014b4c:	d102      	bne.n	8014b54 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b4e:	8873      	ldrh	r3, [r6, #2]
 8014b50:	2b08      	cmp	r3, #8
 8014b52:	d003      	beq.n	8014b5c <etharp_input+0x44>
  pbuf_free(p);
 8014b54:	4640      	mov	r0, r8
 8014b56:	f7fa fd43 	bl	800f5e0 <pbuf_free>
 8014b5a:	e7ea      	b.n	8014b32 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014b5c:	f8d6 300e 	ldr.w	r3, [r6, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b60:	684d      	ldr	r5, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014b62:	9305      	str	r3, [sp, #20]
 8014b64:	f106 0708 	add.w	r7, r6, #8
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8014b68:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b6a:	b115      	cbz	r5, 8014b72 <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014b6c:	429d      	cmp	r5, r3
 8014b6e:	d052      	beq.n	8014c16 <etharp_input+0xfe>
    for_us = 0;
 8014b70:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014b72:	f04f 0902 	mov.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014b76:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014b7a:	2b06      	cmp	r3, #6
 8014b7c:	d006      	beq.n	8014b8c <etharp_input+0x74>
 8014b7e:	4b30      	ldr	r3, [pc, #192]	; (8014c40 <etharp_input+0x128>)
 8014b80:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014b84:	4931      	ldr	r1, [pc, #196]	; (8014c4c <etharp_input+0x134>)
 8014b86:	4830      	ldr	r0, [pc, #192]	; (8014c48 <etharp_input+0x130>)
 8014b88:	f001 fe7e 	bl	8016888 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8014b8c:	9805      	ldr	r0, [sp, #20]
 8014b8e:	b3b0      	cbz	r0, 8014bfe <etharp_input+0xe6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b90:	4621      	mov	r1, r4
 8014b92:	f000 fc9c 	bl	80154ce <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8014b96:	4682      	mov	sl, r0
 8014b98:	bb88      	cbnz	r0, 8014bfe <etharp_input+0xe6>
      ip4_addr_ismulticast(ipaddr)) {
 8014b9a:	9b05      	ldr	r3, [sp, #20]
 8014b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ba0:	2be0      	cmp	r3, #224	; 0xe0
 8014ba2:	d02c      	beq.n	8014bfe <etharp_input+0xe6>
  i = etharp_find_entry(ipaddr, flags, netif);
 8014ba4:	4649      	mov	r1, r9
 8014ba6:	a805      	add	r0, sp, #20
 8014ba8:	f7ff ff16 	bl	80149d8 <etharp_find_entry.isra.0>
  if (i < 0) {
 8014bac:	2800      	cmp	r0, #0
 8014bae:	db26      	blt.n	8014bfe <etharp_input+0xe6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014bb0:	2318      	movs	r3, #24
 8014bb2:	4343      	muls	r3, r0
 8014bb4:	2002      	movs	r0, #2
 8014bb6:	4a26      	ldr	r2, [pc, #152]	; (8014c50 <etharp_input+0x138>)
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8014bb8:	f103 0c0c 	add.w	ip, r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014bbc:	18d1      	adds	r1, r2, r3
 8014bbe:	7508      	strb	r0, [r1, #20]
  arp_table[i].netif = netif;
 8014bc0:	608c      	str	r4, [r1, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8014bc2:	6838      	ldr	r0, [r7, #0]
 8014bc4:	eb02 0e0c 	add.w	lr, r2, ip
 8014bc8:	f842 000c 	str.w	r0, [r2, ip]
 8014bcc:	88b8      	ldrh	r0, [r7, #4]
 8014bce:	f8ae 0004 	strh.w	r0, [lr, #4]
  if (arp_table[i].q != NULL) {
 8014bd2:	f852 9003 	ldr.w	r9, [r2, r3]
  arp_table[i].ctime = 0;
 8014bd6:	f8a1 a012 	strh.w	sl, [r1, #18]
  if (arp_table[i].q != NULL) {
 8014bda:	f1b9 0f00 	cmp.w	r9, #0
 8014bde:	d00e      	beq.n	8014bfe <etharp_input+0xe6>
    arp_table[i].q = NULL;
 8014be0:	f842 a003 	str.w	sl, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014be8:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	4649      	mov	r1, r9
 8014bf0:	463b      	mov	r3, r7
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f001 f958 	bl	8015ea8 <ethernet_output>
    pbuf_free(p);
 8014bf8:	4648      	mov	r0, r9
 8014bfa:	f7fa fcf1 	bl	800f5e0 <pbuf_free>
  switch (hdr->opcode) {
 8014bfe:	88f3      	ldrh	r3, [r6, #6]
 8014c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c04:	d00a      	beq.n	8014c1c <etharp_input+0x104>
 8014c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c0a:	d1a3      	bne.n	8014b54 <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 8014c0c:	a905      	add	r1, sp, #20
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f7ff fbd4 	bl	80143bc <dhcp_arp_reply>
    break;
 8014c14:	e79e      	b.n	8014b54 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014c16:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014c18:	46a9      	mov	r9, r5
 8014c1a:	e7ac      	b.n	8014b76 <etharp_input+0x5e>
    if (for_us) {
 8014c1c:	2d00      	cmp	r5, #0
 8014c1e:	d099      	beq.n	8014b54 <etharp_input+0x3c>
      etharp_raw(netif,
 8014c20:	2202      	movs	r2, #2
 8014c22:	9203      	str	r2, [sp, #12]
 8014c24:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014c26:	f104 032d 	add.w	r3, r4, #45	; 0x2d
      etharp_raw(netif,
 8014c2a:	e9cd 7201 	strd	r7, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014c2e:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8014c30:	9200      	str	r2, [sp, #0]
 8014c32:	4619      	mov	r1, r3
 8014c34:	463a      	mov	r2, r7
 8014c36:	4620      	mov	r0, r4
 8014c38:	f7ff fe62 	bl	8014900 <etharp_raw>
 8014c3c:	e78a      	b.n	8014b54 <etharp_input+0x3c>
 8014c3e:	bf00      	nop
 8014c40:	0802242a 	.word	0x0802242a
 8014c44:	08021ebd 	.word	0x08021ebd
 8014c48:	08018495 	.word	0x08018495
 8014c4c:	08022394 	.word	0x08022394
 8014c50:	20005000 	.word	0x20005000

08014c54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014c54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c56:	2401      	movs	r4, #1
{
 8014c58:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c5a:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8014c5e:	4906      	ldr	r1, [pc, #24]	; (8014c78 <etharp_request+0x24>)
 8014c60:	f100 032d 	add.w	r3, r0, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c64:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c66:	9101      	str	r1, [sp, #4]
 8014c68:	9200      	str	r2, [sp, #0]
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	4a03      	ldr	r2, [pc, #12]	; (8014c7c <etharp_request+0x28>)
 8014c6e:	f7ff fe47 	bl	8014900 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8014c72:	b004      	add	sp, #16
 8014c74:	bd10      	pop	{r4, pc}
 8014c76:	bf00      	nop
 8014c78:	08022859 	.word	0x08022859
 8014c7c:	080227ed 	.word	0x080227ed

08014c80 <etharp_tmr>:
{
 8014c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c84:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c86:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014c88:	2704      	movs	r7, #4
 8014c8a:	4c14      	ldr	r4, [pc, #80]	; (8014cdc <etharp_tmr+0x5c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c8c:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 8014c90:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 8014c92:	b16a      	cbz	r2, 8014cb0 <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8014c94:	8963      	ldrh	r3, [r4, #10]
 8014c96:	3301      	adds	r3, #1
 8014c98:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014c9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8014c9e:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014ca0:	d203      	bcs.n	8014caa <etharp_tmr+0x2a>
 8014ca2:	2a01      	cmp	r2, #1
 8014ca4:	d10b      	bne.n	8014cbe <etharp_tmr+0x3e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014ca6:	2b04      	cmp	r3, #4
 8014ca8:	d90d      	bls.n	8014cc6 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8014caa:	4628      	mov	r0, r5
 8014cac:	f7ff fe14 	bl	80148d8 <etharp_free_entry>
 8014cb0:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cb2:	2d0a      	cmp	r5, #10
 8014cb4:	f104 0418 	add.w	r4, r4, #24
 8014cb8:	d1ea      	bne.n	8014c90 <etharp_tmr+0x10>
}
 8014cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014cbe:	2a03      	cmp	r2, #3
 8014cc0:	d108      	bne.n	8014cd4 <etharp_tmr+0x54>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014cc2:	7327      	strb	r7, [r4, #12]
 8014cc4:	e7f4      	b.n	8014cb0 <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014cc6:	2118      	movs	r1, #24
 8014cc8:	6820      	ldr	r0, [r4, #0]
 8014cca:	fb01 8105 	mla	r1, r1, r5, r8
 8014cce:	f7ff ffc1 	bl	8014c54 <etharp_request>
 8014cd2:	e7ed      	b.n	8014cb0 <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014cd4:	2a04      	cmp	r2, #4
 8014cd6:	d1eb      	bne.n	8014cb0 <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014cd8:	7326      	strb	r6, [r4, #12]
 8014cda:	e7e9      	b.n	8014cb0 <etharp_tmr+0x30>
 8014cdc:	20005008 	.word	0x20005008

08014ce0 <etharp_output_to_arp_index>:
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ce0:	2318      	movs	r3, #24
{
 8014ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014ce6:	4c23      	ldr	r4, [pc, #140]	; (8014d74 <etharp_output_to_arp_index+0x94>)
{
 8014ce8:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014cea:	fb03 4302 	mla	r3, r3, r2, r4
 8014cee:	7d1b      	ldrb	r3, [r3, #20]
{
 8014cf0:	4605      	mov	r5, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014cf2:	2b01      	cmp	r3, #1
{
 8014cf4:	4689      	mov	r9, r1
 8014cf6:	4616      	mov	r6, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014cf8:	d806      	bhi.n	8014d08 <etharp_output_to_arp_index+0x28>
 8014cfa:	4b1f      	ldr	r3, [pc, #124]	; (8014d78 <etharp_output_to_arp_index+0x98>)
 8014cfc:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014d00:	491e      	ldr	r1, [pc, #120]	; (8014d7c <etharp_output_to_arp_index+0x9c>)
 8014d02:	481f      	ldr	r0, [pc, #124]	; (8014d80 <etharp_output_to_arp_index+0xa0>)
 8014d04:	f001 fdc0 	bl	8016888 <iprintf>
 8014d08:	2118      	movs	r1, #24
 8014d0a:	4371      	muls	r1, r6
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014d0c:	1867      	adds	r7, r4, r1
 8014d0e:	7d3b      	ldrb	r3, [r7, #20]
 8014d10:	f101 060c 	add.w	r6, r1, #12
 8014d14:	2b02      	cmp	r3, #2
 8014d16:	4426      	add	r6, r4
 8014d18:	f105 082d 	add.w	r8, r5, #45	; 0x2d
 8014d1c:	d10b      	bne.n	8014d36 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014d1e:	8a7b      	ldrh	r3, [r7, #18]
 8014d20:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014d24:	d913      	bls.n	8014d4e <etharp_output_to_arp_index+0x6e>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014d26:	3104      	adds	r1, #4
 8014d28:	4421      	add	r1, r4
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f7ff ff92 	bl	8014c54 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d30:	b908      	cbnz	r0, 8014d36 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d32:	2303      	movs	r3, #3
 8014d34:	753b      	strb	r3, [r7, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d3a:	4642      	mov	r2, r8
 8014d3c:	9300      	str	r3, [sp, #0]
 8014d3e:	4649      	mov	r1, r9
 8014d40:	4633      	mov	r3, r6
 8014d42:	4628      	mov	r0, r5
 8014d44:	f001 f8b0 	bl	8015ea8 <ethernet_output>
}
 8014d48:	b005      	add	sp, #20
 8014d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014d4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014d52:	d3f0      	bcc.n	8014d36 <etharp_output_to_arp_index+0x56>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d54:	2301      	movs	r3, #1
 8014d56:	9303      	str	r3, [sp, #12]
 8014d58:	4b0a      	ldr	r3, [pc, #40]	; (8014d84 <etharp_output_to_arp_index+0xa4>)
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d5a:	3104      	adds	r1, #4
 8014d5c:	4421      	add	r1, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d5e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014d60:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d62:	9102      	str	r1, [sp, #8]
 8014d64:	9300      	str	r3, [sp, #0]
 8014d66:	4632      	mov	r2, r6
 8014d68:	4643      	mov	r3, r8
 8014d6a:	4641      	mov	r1, r8
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	f7ff fdc7 	bl	8014900 <etharp_raw>
 8014d72:	e7dd      	b.n	8014d30 <etharp_output_to_arp_index+0x50>
 8014d74:	20005000 	.word	0x20005000
 8014d78:	0802242a 	.word	0x0802242a
 8014d7c:	080223b8 	.word	0x080223b8
 8014d80:	08018495 	.word	0x08018495
 8014d84:	08022859 	.word	0x08022859

08014d88 <etharp_query>:
{
 8014d88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d8c:	4689      	mov	r9, r1
 8014d8e:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d90:	4601      	mov	r1, r0
 8014d92:	f8d9 0000 	ldr.w	r0, [r9]
{
 8014d96:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d98:	f000 fb99 	bl	80154ce <ip4_addr_isbroadcast_u32>
 8014d9c:	4605      	mov	r5, r0
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	d15a      	bne.n	8014e58 <etharp_query+0xd0>
      ip4_addr_ismulticast(ipaddr) ||
 8014da2:	f8d9 3000 	ldr.w	r3, [r9]
 8014da6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014daa:	2ae0      	cmp	r2, #224	; 0xe0
 8014dac:	d054      	beq.n	8014e58 <etharp_query+0xd0>
      ip4_addr_isany(ipaddr)) {
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d052      	beq.n	8014e58 <etharp_query+0xd0>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014db2:	2101      	movs	r1, #1
 8014db4:	4648      	mov	r0, r9
 8014db6:	f7ff fe0f 	bl	80149d8 <etharp_find_entry.isra.0>
  if (i < 0) {
 8014dba:	1e06      	subs	r6, r0, #0
 8014dbc:	db4f      	blt.n	8014e5e <etharp_query+0xd6>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014dbe:	2318      	movs	r3, #24
 8014dc0:	4c3c      	ldr	r4, [pc, #240]	; (8014eb4 <etharp_query+0x12c>)
 8014dc2:	fb03 4306 	mla	r3, r3, r6, r4
 8014dc6:	7d1a      	ldrb	r2, [r3, #20]
 8014dc8:	b91a      	cbnz	r2, 8014dd2 <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014dca:	2501      	movs	r5, #1
    arp_table[i].netif = netif;
 8014dcc:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014dd0:	751d      	strb	r5, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014dd2:	2318      	movs	r3, #24
 8014dd4:	fb03 4306 	mla	r3, r3, r6, r4
 8014dd8:	7d1b      	ldrb	r3, [r3, #20]
 8014dda:	b933      	cbnz	r3, 8014dea <etharp_query+0x62>
 8014ddc:	4b36      	ldr	r3, [pc, #216]	; (8014eb8 <etharp_query+0x130>)
 8014dde:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014de2:	4936      	ldr	r1, [pc, #216]	; (8014ebc <etharp_query+0x134>)
 8014de4:	4836      	ldr	r0, [pc, #216]	; (8014ec0 <etharp_query+0x138>)
 8014de6:	f001 fd4f 	bl	8016888 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8014dea:	b90d      	cbnz	r5, 8014df0 <etharp_query+0x68>
 8014dec:	2f00      	cmp	r7, #0
 8014dee:	d138      	bne.n	8014e62 <etharp_query+0xda>
    result = etharp_request(netif, ipaddr);
 8014df0:	4649      	mov	r1, r9
 8014df2:	4640      	mov	r0, r8
 8014df4:	f7ff ff2e 	bl	8014c54 <etharp_request>
    if (q == NULL) {
 8014df8:	bbaf      	cbnz	r7, 8014e66 <etharp_query+0xde>
}
 8014dfa:	b002      	add	sp, #8
 8014dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e00:	d1fb      	bne.n	8014dfa <etharp_query+0x72>
 8014e02:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014e04:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014eb8 <etharp_query+0x130>
 8014e08:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8014ec8 <etharp_query+0x140>
 8014e0c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8014ec0 <etharp_query+0x138>
 8014e10:	896a      	ldrh	r2, [r5, #10]
 8014e12:	892b      	ldrh	r3, [r5, #8]
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d108      	bne.n	8014e2a <etharp_query+0xa2>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b133      	cbz	r3, 8014e2a <etharp_query+0xa2>
 8014e1c:	4643      	mov	r3, r8
 8014e1e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8014e22:	4649      	mov	r1, r9
 8014e24:	4650      	mov	r0, sl
 8014e26:	f001 fd2f 	bl	8016888 <iprintf>
      if (p->type != PBUF_ROM) {
 8014e2a:	7b2b      	ldrb	r3, [r5, #12]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d12e      	bne.n	8014e8e <etharp_query+0x106>
      p = p->next;
 8014e30:	682d      	ldr	r5, [r5, #0]
    while (p) {
 8014e32:	2d00      	cmp	r5, #0
 8014e34:	d1ec      	bne.n	8014e10 <etharp_query+0x88>
      pbuf_ref(p);
 8014e36:	4638      	mov	r0, r7
 8014e38:	f7fa fd8e 	bl	800f958 <pbuf_ref>
 8014e3c:	46b8      	mov	r8, r7
      if (arp_table[i].q != NULL) {
 8014e3e:	2318      	movs	r3, #24
 8014e40:	fb03 f206 	mul.w	r2, r3, r6
 8014e44:	58a0      	ldr	r0, [r4, r2]
 8014e46:	461d      	mov	r5, r3
 8014e48:	b108      	cbz	r0, 8014e4e <etharp_query+0xc6>
        pbuf_free(arp_table[i].q);
 8014e4a:	f7fa fbc9 	bl	800f5e0 <pbuf_free>
      arp_table[i].q = p;
 8014e4e:	436e      	muls	r6, r5
      result = ERR_OK;
 8014e50:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8014e52:	f844 8006 	str.w	r8, [r4, r6]
 8014e56:	e7d0      	b.n	8014dfa <etharp_query+0x72>
    return ERR_ARG;
 8014e58:	f06f 000f 	mvn.w	r0, #15
 8014e5c:	e7cd      	b.n	8014dfa <etharp_query+0x72>
 8014e5e:	4630      	mov	r0, r6
 8014e60:	e7cb      	b.n	8014dfa <etharp_query+0x72>
  err_t result = ERR_MEM;
 8014e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014e66:	2318      	movs	r3, #24
 8014e68:	4373      	muls	r3, r6
 8014e6a:	18e2      	adds	r2, r4, r3
 8014e6c:	7d12      	ldrb	r2, [r2, #20]
 8014e6e:	2a01      	cmp	r2, #1
 8014e70:	d9c6      	bls.n	8014e00 <etharp_query+0x78>
    ETHARP_SET_HINT(netif, i);
 8014e72:	4a14      	ldr	r2, [pc, #80]	; (8014ec4 <etharp_query+0x13c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e74:	330c      	adds	r3, #12
    ETHARP_SET_HINT(netif, i);
 8014e76:	7016      	strb	r6, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e7c:	4423      	add	r3, r4
 8014e7e:	9200      	str	r2, [sp, #0]
 8014e80:	4639      	mov	r1, r7
 8014e82:	f108 022d 	add.w	r2, r8, #45	; 0x2d
 8014e86:	4640      	mov	r0, r8
 8014e88:	f001 f80e 	bl	8015ea8 <ethernet_output>
 8014e8c:	e7b5      	b.n	8014dfa <etharp_query+0x72>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8014e8e:	2200      	movs	r2, #0
 8014e90:	8929      	ldrh	r1, [r5, #8]
 8014e92:	2002      	movs	r0, #2
 8014e94:	f7fa fc0c 	bl	800f6b0 <pbuf_alloc>
      if (p != NULL) {
 8014e98:	4680      	mov	r8, r0
 8014e9a:	b138      	cbz	r0, 8014eac <etharp_query+0x124>
        if (pbuf_copy(p, q) != ERR_OK) {
 8014e9c:	4639      	mov	r1, r7
 8014e9e:	f7fa fdbb 	bl	800fa18 <pbuf_copy>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d0cb      	beq.n	8014e3e <etharp_query+0xb6>
          pbuf_free(p);
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	f7fa fb9a 	bl	800f5e0 <pbuf_free>
      result = ERR_MEM;
 8014eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eb0:	e7a3      	b.n	8014dfa <etharp_query+0x72>
 8014eb2:	bf00      	nop
 8014eb4:	20005000 	.word	0x20005000
 8014eb8:	0802242a 	.word	0x0802242a
 8014ebc:	080223e8 	.word	0x080223e8
 8014ec0:	08018495 	.word	0x08018495
 8014ec4:	200050f0 	.word	0x200050f0
 8014ec8:	08022410 	.word	0x08022410

08014ecc <etharp_output>:
{
 8014ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ece:	460e      	mov	r6, r1
 8014ed0:	b085      	sub	sp, #20
 8014ed2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	b930      	cbnz	r0, 8014ee6 <etharp_output+0x1a>
 8014ed8:	4b3d      	ldr	r3, [pc, #244]	; (8014fd0 <etharp_output+0x104>)
 8014eda:	f240 321b 	movw	r2, #795	; 0x31b
 8014ede:	493d      	ldr	r1, [pc, #244]	; (8014fd4 <etharp_output+0x108>)
 8014ee0:	483d      	ldr	r0, [pc, #244]	; (8014fd8 <etharp_output+0x10c>)
 8014ee2:	f001 fcd1 	bl	8016888 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ee6:	b936      	cbnz	r6, 8014ef6 <etharp_output+0x2a>
 8014ee8:	4b39      	ldr	r3, [pc, #228]	; (8014fd0 <etharp_output+0x104>)
 8014eea:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014eee:	493b      	ldr	r1, [pc, #236]	; (8014fdc <etharp_output+0x110>)
 8014ef0:	4839      	ldr	r0, [pc, #228]	; (8014fd8 <etharp_output+0x10c>)
 8014ef2:	f001 fcc9 	bl	8016888 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014ef6:	b935      	cbnz	r5, 8014f06 <etharp_output+0x3a>
 8014ef8:	4b35      	ldr	r3, [pc, #212]	; (8014fd0 <etharp_output+0x104>)
 8014efa:	f240 321d 	movw	r2, #797	; 0x31d
 8014efe:	4938      	ldr	r1, [pc, #224]	; (8014fe0 <etharp_output+0x114>)
 8014f00:	4835      	ldr	r0, [pc, #212]	; (8014fd8 <etharp_output+0x10c>)
 8014f02:	f001 fcc1 	bl	8016888 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014f06:	4621      	mov	r1, r4
 8014f08:	6828      	ldr	r0, [r5, #0]
 8014f0a:	f000 fae0 	bl	80154ce <ip4_addr_isbroadcast_u32>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d159      	bne.n	8014fc6 <etharp_output+0xfa>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014f12:	682b      	ldr	r3, [r5, #0]
 8014f14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8014f18:	2ae0      	cmp	r2, #224	; 0xe0
 8014f1a:	d11b      	bne.n	8014f54 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014f22:	235e      	movs	r3, #94	; 0x5e
 8014f24:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014f28:	786b      	ldrb	r3, [r5, #1]
 8014f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f2e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014f32:	78ab      	ldrb	r3, [r5, #2]
 8014f34:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014f38:	78eb      	ldrb	r3, [r5, #3]
 8014f3a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8014f3e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8014f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f44:	4631      	mov	r1, r6
 8014f46:	9200      	str	r2, [sp, #0]
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 8014f4e:	f000 ffab 	bl	8015ea8 <ethernet_output>
 8014f52:	e01f      	b.n	8014f94 <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f54:	6862      	ldr	r2, [r4, #4]
 8014f56:	68a1      	ldr	r1, [r4, #8]
 8014f58:	405a      	eors	r2, r3
 8014f5a:	420a      	tst	r2, r1
 8014f5c:	d008      	beq.n	8014f70 <etharp_output+0xa4>
 8014f5e:	f64f 62a9 	movw	r2, #65193	; 0xfea9
        !ip4_addr_islinklocal(ipaddr)) {
 8014f62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d003      	beq.n	8014f70 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014f68:	68e3      	ldr	r3, [r4, #12]
 8014f6a:	b373      	cbz	r3, 8014fca <etharp_output+0xfe>
            dst_addr = netif_ip4_gw(netif);
 8014f6c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f70:	2018      	movs	r0, #24
 8014f72:	4b1c      	ldr	r3, [pc, #112]	; (8014fe4 <etharp_output+0x118>)
 8014f74:	491c      	ldr	r1, [pc, #112]	; (8014fe8 <etharp_output+0x11c>)
 8014f76:	781a      	ldrb	r2, [r3, #0]
 8014f78:	fb00 1002 	mla	r0, r0, r2, r1
 8014f7c:	7d01      	ldrb	r1, [r0, #20]
 8014f7e:	2901      	cmp	r1, #1
 8014f80:	4619      	mov	r1, r3
 8014f82:	d909      	bls.n	8014f98 <etharp_output+0xcc>
 8014f84:	682f      	ldr	r7, [r5, #0]
 8014f86:	6843      	ldr	r3, [r0, #4]
 8014f88:	429f      	cmp	r7, r3
 8014f8a:	d105      	bne.n	8014f98 <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 8014f8c:	4631      	mov	r1, r6
 8014f8e:	4620      	mov	r0, r4
 8014f90:	f7ff fea6 	bl	8014ce0 <etharp_output_to_arp_index>
}
 8014f94:	b005      	add	sp, #20
 8014f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
 8014f98:	2200      	movs	r2, #0
 8014f9a:	4b13      	ldr	r3, [pc, #76]	; (8014fe8 <etharp_output+0x11c>)
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014f9c:	7d18      	ldrb	r0, [r3, #20]
 8014f9e:	2801      	cmp	r0, #1
 8014fa0:	d906      	bls.n	8014fb0 <etharp_output+0xe4>
 8014fa2:	682f      	ldr	r7, [r5, #0]
 8014fa4:	6858      	ldr	r0, [r3, #4]
 8014fa6:	4287      	cmp	r7, r0
 8014fa8:	d102      	bne.n	8014fb0 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 8014faa:	b2d2      	uxtb	r2, r2
 8014fac:	700a      	strb	r2, [r1, #0]
 8014fae:	e7ed      	b.n	8014f8c <etharp_output+0xc0>
 8014fb0:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014fb2:	2a0a      	cmp	r2, #10
 8014fb4:	f103 0318 	add.w	r3, r3, #24
 8014fb8:	d1f0      	bne.n	8014f9c <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 8014fba:	4632      	mov	r2, r6
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f7ff fee2 	bl	8014d88 <etharp_query>
 8014fc4:	e7e6      	b.n	8014f94 <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 8014fc6:	4b09      	ldr	r3, [pc, #36]	; (8014fec <etharp_output+0x120>)
 8014fc8:	e7ba      	b.n	8014f40 <etharp_output+0x74>
            return ERR_RTE;
 8014fca:	f06f 0003 	mvn.w	r0, #3
 8014fce:	e7e1      	b.n	8014f94 <etharp_output+0xc8>
 8014fd0:	0802242a 	.word	0x0802242a
 8014fd4:	08021ebd 	.word	0x08021ebd
 8014fd8:	08018495 	.word	0x08018495
 8014fdc:	08021203 	.word	0x08021203
 8014fe0:	08022375 	.word	0x08022375
 8014fe4:	200050f0 	.word	0x200050f0
 8014fe8:	20005000 	.word	0x20005000
 8014fec:	080227ed 	.word	0x080227ed

08014ff0 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8014ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	b087      	sub	sp, #28
 8014ff6:	460f      	mov	r7, r1
 8014ff8:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014ffa:	2124      	movs	r1, #36	; 0x24
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	2001      	movs	r0, #1
 8015000:	f7fa fb56 	bl	800f6b0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8015004:	4605      	mov	r5, r0
 8015006:	b3a0      	cbz	r0, 8015072 <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015008:	8943      	ldrh	r3, [r0, #10]
 801500a:	2b23      	cmp	r3, #35	; 0x23
 801500c:	d806      	bhi.n	801501c <icmp_send_response.isra.0+0x2c>
 801500e:	4b1a      	ldr	r3, [pc, #104]	; (8015078 <icmp_send_response.isra.0+0x88>)
 8015010:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015014:	4919      	ldr	r1, [pc, #100]	; (801507c <icmp_send_response.isra.0+0x8c>)
 8015016:	481a      	ldr	r0, [pc, #104]	; (8015080 <icmp_send_response.isra.0+0x90>)
 8015018:	f001 fc36 	bl	8016888 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801501c:	2300      	movs	r3, #0
  iphdr = (struct ip_hdr *)p->payload;
 801501e:	6822      	ldr	r2, [r4, #0]
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015020:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015022:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8015026:	7123      	strb	r3, [r4, #4]
 8015028:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 801502a:	71a3      	strb	r3, [r4, #6]
 801502c:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801502e:	4613      	mov	r3, r2
  icmphdr->type = type;
 8015030:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8015032:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015034:	f104 0108 	add.w	r1, r4, #8
 8015038:	f853 6b04 	ldr.w	r6, [r3], #4
 801503c:	4283      	cmp	r3, r0
 801503e:	f841 6b04 	str.w	r6, [r1], #4
 8015042:	d1f9      	bne.n	8015038 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015044:	68d3      	ldr	r3, [r2, #12]
 8015046:	ae06      	add	r6, sp, #24
 8015048:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801504c:	4630      	mov	r0, r6
 801504e:	f000 f8bb 	bl	80151c8 <ip4_route>
#endif
  if (netif != NULL) {
 8015052:	b158      	cbz	r0, 801506c <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015054:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015056:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8015058:	70a1      	strb	r1, [r4, #2]
 801505a:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801505c:	4632      	mov	r2, r6
 801505e:	9002      	str	r0, [sp, #8]
 8015060:	e9cd 1300 	strd	r1, r3, [sp]
 8015064:	4628      	mov	r0, r5
 8015066:	23ff      	movs	r3, #255	; 0xff
 8015068:	f000 fa20 	bl	80154ac <ip4_output_if>
  }
  pbuf_free(q);
 801506c:	4628      	mov	r0, r5
 801506e:	f7fa fab7 	bl	800f5e0 <pbuf_free>
}
 8015072:	b007      	add	sp, #28
 8015074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015076:	bf00      	nop
 8015078:	0802253a 	.word	0x0802253a
 801507c:	0802256f 	.word	0x0802256f
 8015080:	08018495 	.word	0x08018495

08015084 <icmp_input>:
{
 8015084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8015088:	4b44      	ldr	r3, [pc, #272]	; (801519c <icmp_input+0x118>)
{
 801508a:	b085      	sub	sp, #20
  iphdr_in = ip4_current_header();
 801508c:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8015090:	4604      	mov	r4, r0
  hlen = IPH_HL(iphdr_in) * 4;
 8015092:	f899 5000 	ldrb.w	r5, [r9]
{
 8015096:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8015098:	f005 050f 	and.w	r5, r5, #15
 801509c:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 801509e:	2d13      	cmp	r5, #19
 80150a0:	461f      	mov	r7, r3
 80150a2:	d92a      	bls.n	80150fa <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80150a4:	8942      	ldrh	r2, [r0, #10]
 80150a6:	2a03      	cmp	r2, #3
 80150a8:	d927      	bls.n	80150fa <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80150aa:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80150ac:	7812      	ldrb	r2, [r2, #0]
 80150ae:	2a08      	cmp	r2, #8
 80150b0:	d123      	bne.n	80150fa <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150b2:	6958      	ldr	r0, [r3, #20]
 80150b4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80150b8:	2ae0      	cmp	r2, #224	; 0xe0
 80150ba:	d01e      	beq.n	80150fa <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80150bc:	6819      	ldr	r1, [r3, #0]
 80150be:	f000 fa06 	bl	80154ce <ip4_addr_isbroadcast_u32>
 80150c2:	4606      	mov	r6, r0
 80150c4:	b9c8      	cbnz	r0, 80150fa <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80150c6:	8923      	ldrh	r3, [r4, #8]
 80150c8:	2b07      	cmp	r3, #7
 80150ca:	d916      	bls.n	80150fa <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80150cc:	f105 010e 	add.w	r1, r5, #14
 80150d0:	4620      	mov	r0, r4
 80150d2:	f7fa fa7f 	bl	800f5d4 <pbuf_header>
 80150d6:	2800      	cmp	r0, #0
 80150d8:	d04f      	beq.n	801517a <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80150da:	8921      	ldrh	r1, [r4, #8]
 80150dc:	4632      	mov	r2, r6
 80150de:	4429      	add	r1, r5
 80150e0:	b289      	uxth	r1, r1
 80150e2:	2002      	movs	r0, #2
 80150e4:	f7fa fae4 	bl	800f6b0 <pbuf_alloc>
      if (r == NULL) {
 80150e8:	4606      	mov	r6, r0
 80150ea:	b130      	cbz	r0, 80150fa <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80150ec:	8942      	ldrh	r2, [r0, #10]
 80150ee:	f105 0308 	add.w	r3, r5, #8
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d207      	bcs.n	8015106 <icmp_input+0x82>
        pbuf_free(r);
 80150f6:	f7fa fa73 	bl	800f5e0 <pbuf_free>
  pbuf_free(p);
 80150fa:	4620      	mov	r0, r4
}
 80150fc:	b005      	add	sp, #20
 80150fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8015102:	f7fa ba6d 	b.w	800f5e0 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8015106:	4649      	mov	r1, r9
 8015108:	462a      	mov	r2, r5
 801510a:	6840      	ldr	r0, [r0, #4]
 801510c:	f001 fb03 	bl	8016716 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015110:	4269      	negs	r1, r5
 8015112:	4630      	mov	r0, r6
 8015114:	f7fa fa5e 	bl	800f5d4 <pbuf_header>
 8015118:	b138      	cbz	r0, 801512a <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801511a:	4b21      	ldr	r3, [pc, #132]	; (80151a0 <icmp_input+0x11c>)
 801511c:	22af      	movs	r2, #175	; 0xaf
 801511e:	4921      	ldr	r1, [pc, #132]	; (80151a4 <icmp_input+0x120>)
 8015120:	4821      	ldr	r0, [pc, #132]	; (80151a8 <icmp_input+0x124>)
 8015122:	f001 fbb1 	bl	8016888 <iprintf>
        pbuf_free(r);
 8015126:	4630      	mov	r0, r6
 8015128:	e7e5      	b.n	80150f6 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 801512a:	4621      	mov	r1, r4
 801512c:	4630      	mov	r0, r6
 801512e:	f7fa fc73 	bl	800fa18 <pbuf_copy>
 8015132:	2800      	cmp	r0, #0
 8015134:	d1f7      	bne.n	8015126 <icmp_input+0xa2>
      pbuf_free(p);
 8015136:	4620      	mov	r0, r4
 8015138:	f7fa fa52 	bl	800f5e0 <pbuf_free>
 801513c:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 801513e:	4629      	mov	r1, r5
 8015140:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8015142:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015144:	f7fa fa46 	bl	800f5d4 <pbuf_header>
 8015148:	4602      	mov	r2, r0
 801514a:	2800      	cmp	r0, #0
 801514c:	d1d5      	bne.n	80150fa <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801514e:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8015158:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801515a:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 801515c:	70b0      	strb	r0, [r6, #2]
 801515e:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8015160:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015162:	7288      	strb	r0, [r1, #10]
 8015164:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015166:	2101      	movs	r1, #1
 8015168:	f8cd 8008 	str.w	r8, [sp, #8]
 801516c:	e9cd 0100 	strd	r0, r1, [sp]
 8015170:	490e      	ldr	r1, [pc, #56]	; (80151ac <icmp_input+0x128>)
 8015172:	4620      	mov	r0, r4
 8015174:	f000 f99a 	bl	80154ac <ip4_output_if>
 8015178:	e7bf      	b.n	80150fa <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801517a:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 801517e:	31f2      	adds	r1, #242	; 0xf2
 8015180:	b209      	sxth	r1, r1
 8015182:	4620      	mov	r0, r4
 8015184:	f7fa fa26 	bl	800f5d4 <pbuf_header>
 8015188:	2800      	cmp	r0, #0
 801518a:	d0d8      	beq.n	801513e <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801518c:	4b04      	ldr	r3, [pc, #16]	; (80151a0 <icmp_input+0x11c>)
 801518e:	22c0      	movs	r2, #192	; 0xc0
 8015190:	4907      	ldr	r1, [pc, #28]	; (80151b0 <icmp_input+0x12c>)
 8015192:	4805      	ldr	r0, [pc, #20]	; (80151a8 <icmp_input+0x124>)
 8015194:	f001 fb78 	bl	8016888 <iprintf>
        goto icmperr;
 8015198:	e7af      	b.n	80150fa <icmp_input+0x76>
 801519a:	bf00      	nop
 801519c:	2000af94 	.word	0x2000af94
 80151a0:	0802253a 	.word	0x0802253a
 80151a4:	080224d3 	.word	0x080224d3
 80151a8:	08018495 	.word	0x08018495
 80151ac:	2000afa8 	.word	0x2000afa8
 80151b0:	08022508 	.word	0x08022508

080151b4 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 80151b4:	460a      	mov	r2, r1
 80151b6:	3004      	adds	r0, #4
 80151b8:	2103      	movs	r1, #3
 80151ba:	f7ff bf19 	b.w	8014ff0 <icmp_send_response.isra.0>

080151be <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 80151be:	460a      	mov	r2, r1
 80151c0:	3004      	adds	r0, #4
 80151c2:	210b      	movs	r1, #11
 80151c4:	f7ff bf14 	b.w	8014ff0 <icmp_send_response.isra.0>

080151c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80151c8:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80151ca:	4b13      	ldr	r3, [pc, #76]	; (8015218 <ip4_route+0x50>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	b96b      	cbnz	r3, 80151ec <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151d0:	4a12      	ldr	r2, [pc, #72]	; (801521c <ip4_route+0x54>)
 80151d2:	6812      	ldr	r2, [r2, #0]
 80151d4:	b1ea      	cbz	r2, 8015212 <ip4_route+0x4a>
 80151d6:	f892 1033 	ldrb.w	r1, [r2, #51]	; 0x33
 80151da:	f001 0105 	and.w	r1, r1, #5
 80151de:	2905      	cmp	r1, #5
 80151e0:	d117      	bne.n	8015212 <ip4_route+0x4a>
 80151e2:	6851      	ldr	r1, [r2, #4]
 80151e4:	2900      	cmp	r1, #0
 80151e6:	bf18      	it	ne
 80151e8:	4613      	movne	r3, r2
 80151ea:	e012      	b.n	8015212 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151ec:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
 80151f0:	07cd      	lsls	r5, r1, #31
 80151f2:	d5eb      	bpl.n	80151cc <ip4_route+0x4>
 80151f4:	074c      	lsls	r4, r1, #29
 80151f6:	d5e9      	bpl.n	80151cc <ip4_route+0x4>
 80151f8:	685a      	ldr	r2, [r3, #4]
 80151fa:	2a00      	cmp	r2, #0
 80151fc:	d0e6      	beq.n	80151cc <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80151fe:	6804      	ldr	r4, [r0, #0]
 8015200:	689d      	ldr	r5, [r3, #8]
 8015202:	4062      	eors	r2, r4
 8015204:	422a      	tst	r2, r5
 8015206:	d004      	beq.n	8015212 <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015208:	078a      	lsls	r2, r1, #30
 801520a:	d4df      	bmi.n	80151cc <ip4_route+0x4>
 801520c:	68da      	ldr	r2, [r3, #12]
 801520e:	4294      	cmp	r4, r2
 8015210:	d1dc      	bne.n	80151cc <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8015212:	4618      	mov	r0, r3
 8015214:	bd30      	pop	{r4, r5, pc}
 8015216:	bf00      	nop
 8015218:	2000d978 	.word	0x2000d978
 801521c:	2000d97c 	.word	0x2000d97c

08015220 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015224:	6847      	ldr	r7, [r0, #4]
{
 8015226:	4605      	mov	r5, r0
  if (IPH_V(iphdr) != 4) {
 8015228:	f897 9000 	ldrb.w	r9, [r7]
{
 801522c:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 801522e:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8015232:	2b04      	cmp	r3, #4
 8015234:	d005      	beq.n	8015242 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015236:	4628      	mov	r0, r5
 8015238:	f7fa f9d2 	bl	800f5e0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801523c:	2000      	movs	r0, #0
 801523e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015242:	8878      	ldrh	r0, [r7, #2]
 8015244:	f7f9 f8f6 	bl	800e434 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8015248:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 801524a:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 801524e:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8015250:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015254:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8015256:	d903      	bls.n	8015260 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8015258:	4601      	mov	r1, r0
 801525a:	4628      	mov	r0, r5
 801525c:	f7fa fb04 	bl	800f868 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015260:	896b      	ldrh	r3, [r5, #10]
 8015262:	454b      	cmp	r3, r9
 8015264:	d3e7      	bcc.n	8015236 <ip4_input+0x16>
 8015266:	892b      	ldrh	r3, [r5, #8]
 8015268:	42a3      	cmp	r3, r4
 801526a:	d3e4      	bcc.n	8015236 <ip4_input+0x16>
 801526c:	f1b9 0f13 	cmp.w	r9, #19
 8015270:	d9e1      	bls.n	8015236 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	4c4f      	ldr	r4, [pc, #316]	; (80153b4 <ip4_input+0x194>)
 8015276:	6163      	str	r3, [r4, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015278:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801527a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801527e:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015280:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015282:	d112      	bne.n	80152aa <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015284:	f898 3033 	ldrb.w	r3, [r8, #51]	; 0x33
 8015288:	07da      	lsls	r2, r3, #31
 801528a:	d503      	bpl.n	8015294 <ip4_input+0x74>
 801528c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d162      	bne.n	801535a <ip4_input+0x13a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015294:	7a7b      	ldrb	r3, [r7, #9]
 8015296:	2b11      	cmp	r3, #17
 8015298:	d105      	bne.n	80152a6 <ip4_input+0x86>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801529a:	eb07 0309 	add.w	r3, r7, r9
 801529e:	885b      	ldrh	r3, [r3, #2]
 80152a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80152a4:	d05b      	beq.n	801535e <ip4_input+0x13e>
 80152a6:	2600      	movs	r6, #0
 80152a8:	e018      	b.n	80152dc <ip4_input+0xbc>
 80152aa:	4646      	mov	r6, r8
    int first = 1;
 80152ac:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 80152b0:	f8df b104 	ldr.w	fp, [pc, #260]	; 80153b8 <ip4_input+0x198>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152b4:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 80152b8:	07db      	lsls	r3, r3, #31
 80152ba:	d404      	bmi.n	80152c6 <ip4_input+0xa6>
      if (first) {
 80152bc:	f1ba 0f00 	cmp.w	sl, #0
 80152c0:	d13e      	bne.n	8015340 <ip4_input+0x120>
        netif = netif->next;
 80152c2:	6836      	ldr	r6, [r6, #0]
 80152c4:	e041      	b.n	801534a <ip4_input+0x12a>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152c6:	6873      	ldr	r3, [r6, #4]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d0f7      	beq.n	80152bc <ip4_input+0x9c>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152cc:	6960      	ldr	r0, [r4, #20]
 80152ce:	4283      	cmp	r3, r0
 80152d0:	d004      	beq.n	80152dc <ip4_input+0xbc>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80152d2:	4631      	mov	r1, r6
 80152d4:	f000 f8fb 	bl	80154ce <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152d8:	2800      	cmp	r0, #0
 80152da:	d0ef      	beq.n	80152bc <ip4_input+0x9c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80152dc:	6920      	ldr	r0, [r4, #16]
 80152de:	b148      	cbz	r0, 80152f4 <ip4_input+0xd4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152e0:	4641      	mov	r1, r8
 80152e2:	f000 f8f4 	bl	80154ce <ip4_addr_isbroadcast_u32>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d1a5      	bne.n	8015236 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80152ea:	6923      	ldr	r3, [r4, #16]
 80152ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80152f0:	2be0      	cmp	r3, #224	; 0xe0
 80152f2:	d0a0      	beq.n	8015236 <ip4_input+0x16>
  if (netif == NULL) {
 80152f4:	2e00      	cmp	r6, #0
 80152f6:	d09e      	beq.n	8015236 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80152f8:	88fb      	ldrh	r3, [r7, #6]
 80152fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80152fe:	b133      	cbz	r3, 801530e <ip4_input+0xee>
    p = ip4_reass(p);
 8015300:	4628      	mov	r0, r5
 8015302:	f000 fb01 	bl	8015908 <ip4_reass>
    if (p == NULL) {
 8015306:	4605      	mov	r5, r0
 8015308:	2800      	cmp	r0, #0
 801530a:	d097      	beq.n	801523c <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 801530c:	6847      	ldr	r7, [r0, #4]
  ip_data.current_input_netif = inp;
 801530e:	e9c4 6800 	strd	r6, r8, [r4]
  ip_data.current_ip4_header = iphdr;
 8015312:	60a7      	str	r7, [r4, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015314:	783b      	ldrb	r3, [r7, #0]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015316:	f1c9 0100 	rsb	r1, r9, #0
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801531a:	f003 030f 	and.w	r3, r3, #15
 801531e:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015320:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015322:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015324:	f7fa f956 	bl	800f5d4 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8015328:	7a7b      	ldrb	r3, [r7, #9]
 801532a:	2b06      	cmp	r3, #6
 801532c:	d025      	beq.n	801537a <ip4_input+0x15a>
 801532e:	2b11      	cmp	r3, #17
 8015330:	d017      	beq.n	8015362 <ip4_input+0x142>
 8015332:	2b01      	cmp	r3, #1
 8015334:	d126      	bne.n	8015384 <ip4_input+0x164>
      icmp_input(p, inp);
 8015336:	4641      	mov	r1, r8
 8015338:	4628      	mov	r0, r5
 801533a:	f7ff fea3 	bl	8015084 <icmp_input>
      break;
 801533e:	e014      	b.n	801536a <ip4_input+0x14a>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8015340:	7d23      	ldrb	r3, [r4, #20]
 8015342:	2b7f      	cmp	r3, #127	; 0x7f
 8015344:	d0a6      	beq.n	8015294 <ip4_input+0x74>
        netif = netif_list;
 8015346:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 801534a:	4546      	cmp	r6, r8
        netif = netif->next;
 801534c:	bf08      	it	eq
 801534e:	6836      	ldreq	r6, [r6, #0]
 8015350:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8015354:	2e00      	cmp	r6, #0
 8015356:	d1ad      	bne.n	80152b4 <ip4_input+0x94>
 8015358:	e79c      	b.n	8015294 <ip4_input+0x74>
 801535a:	4646      	mov	r6, r8
 801535c:	e7be      	b.n	80152dc <ip4_input+0xbc>
 801535e:	4646      	mov	r6, r8
 8015360:	e7c8      	b.n	80152f4 <ip4_input+0xd4>
      udp_input(p, inp);
 8015362:	4641      	mov	r1, r8
 8015364:	4628      	mov	r0, r5
 8015366:	f7fd ff5b 	bl	8013220 <udp_input>
  ip_data.current_netif = NULL;
 801536a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 801536c:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 8015370:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015372:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015374:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 8015378:	e760      	b.n	801523c <ip4_input+0x1c>
      tcp_input(p, inp);
 801537a:	4641      	mov	r1, r8
 801537c:	4628      	mov	r0, r5
 801537e:	f7fc f9fd 	bl	801177c <tcp_input>
      break;
 8015382:	e7f2      	b.n	801536a <ip4_input+0x14a>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015384:	4631      	mov	r1, r6
 8015386:	6960      	ldr	r0, [r4, #20]
 8015388:	f000 f8a1 	bl	80154ce <ip4_addr_isbroadcast_u32>
 801538c:	b968      	cbnz	r0, 80153aa <ip4_input+0x18a>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801538e:	6963      	ldr	r3, [r4, #20]
 8015390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015394:	2be0      	cmp	r3, #224	; 0xe0
 8015396:	d008      	beq.n	80153aa <ip4_input+0x18a>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8015398:	4649      	mov	r1, r9
 801539a:	4628      	mov	r0, r5
 801539c:	f7fa f91d 	bl	800f5da <pbuf_header_force>
        p->payload = iphdr;
 80153a0:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80153a2:	2102      	movs	r1, #2
 80153a4:	4628      	mov	r0, r5
 80153a6:	f7ff ff05 	bl	80151b4 <icmp_dest_unreach>
      pbuf_free(p);
 80153aa:	4628      	mov	r0, r5
 80153ac:	f7fa f918 	bl	800f5e0 <pbuf_free>
 80153b0:	e7db      	b.n	801536a <ip4_input+0x14a>
 80153b2:	bf00      	nop
 80153b4:	2000af94 	.word	0x2000af94
 80153b8:	2000d978 	.word	0x2000d978

080153bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80153bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80153c0:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153c2:	89c3      	ldrh	r3, [r0, #14]
{
 80153c4:	4605      	mov	r5, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153c6:	2b01      	cmp	r3, #1
{
 80153c8:	468a      	mov	sl, r1
 80153ca:	4616      	mov	r6, r2
 80153cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80153d0:	d006      	beq.n	80153e0 <ip4_output_if_src+0x24>
 80153d2:	4b30      	ldr	r3, [pc, #192]	; (8015494 <ip4_output_if_src+0xd8>)
 80153d4:	f240 3233 	movw	r2, #819	; 0x333
 80153d8:	492f      	ldr	r1, [pc, #188]	; (8015498 <ip4_output_if_src+0xdc>)
 80153da:	4830      	ldr	r0, [pc, #192]	; (801549c <ip4_output_if_src+0xe0>)
 80153dc:	f001 fa54 	bl	8016888 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80153e0:	2e00      	cmp	r6, #0
 80153e2:	d047      	beq.n	8015474 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80153e4:	2114      	movs	r1, #20
 80153e6:	4628      	mov	r0, r5
 80153e8:	f7fa f8f4 	bl	800f5d4 <pbuf_header>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d14e      	bne.n	801548e <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80153f0:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80153f2:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80153f4:	2b13      	cmp	r3, #19
 80153f6:	d806      	bhi.n	8015406 <ip4_output_if_src+0x4a>
 80153f8:	4b26      	ldr	r3, [pc, #152]	; (8015494 <ip4_output_if_src+0xd8>)
 80153fa:	f240 3261 	movw	r2, #865	; 0x361
 80153fe:	4928      	ldr	r1, [pc, #160]	; (80154a0 <ip4_output_if_src+0xe4>)
 8015400:	4826      	ldr	r0, [pc, #152]	; (801549c <ip4_output_if_src+0xe0>)
 8015402:	f001 fa41 	bl	8016888 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8015406:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 801540a:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 801540c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801540e:	6833      	ldr	r3, [r6, #0]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015410:	2700      	movs	r7, #0
    ip4_addr_copy(iphdr->dest, *dest);
 8015412:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015414:	2345      	movs	r3, #69	; 0x45
 8015416:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8015418:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801541c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80154a8 <ip4_output_if_src+0xec>
    IPH_TOS_SET(iphdr, tos);
 8015420:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015422:	8928      	ldrh	r0, [r5, #8]
 8015424:	f7f9 f806 	bl	800e434 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8015428:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801542a:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 801542c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801542e:	f8b9 0000 	ldrh.w	r0, [r9]
 8015432:	f7f8 ffff 	bl	800e434 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015436:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801543a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 801543c:	3301      	adds	r3, #1
 801543e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8015442:	f1ba 0f00 	cmp.w	sl, #0
 8015446:	d112      	bne.n	801546e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015448:	4b16      	ldr	r3, [pc, #88]	; (80154a4 <ip4_output_if_src+0xe8>)
 801544a:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801544c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801544e:	72a7      	strb	r7, [r4, #10]
 8015450:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015452:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
 8015456:	b19b      	cbz	r3, 8015480 <ip4_output_if_src+0xc4>
 8015458:	892a      	ldrh	r2, [r5, #8]
 801545a:	429a      	cmp	r2, r3
 801545c:	d910      	bls.n	8015480 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 801545e:	4632      	mov	r2, r6
 8015460:	4641      	mov	r1, r8
 8015462:	4628      	mov	r0, r5
 8015464:	f000 fbfa 	bl	8015c5c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8015468:	b002      	add	sp, #8
 801546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 801546e:	f8da 3000 	ldr.w	r3, [sl]
 8015472:	e7eb      	b.n	801544c <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015474:	686b      	ldr	r3, [r5, #4]
 8015476:	ae02      	add	r6, sp, #8
 8015478:	691b      	ldr	r3, [r3, #16]
 801547a:	f846 3d04 	str.w	r3, [r6, #-4]!
 801547e:	e7e8      	b.n	8015452 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8015480:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015484:	4632      	mov	r2, r6
 8015486:	4629      	mov	r1, r5
 8015488:	4640      	mov	r0, r8
 801548a:	4798      	blx	r3
 801548c:	e7ec      	b.n	8015468 <ip4_output_if_src+0xac>
      return ERR_BUF;
 801548e:	f06f 0001 	mvn.w	r0, #1
 8015492:	e7e9      	b.n	8015468 <ip4_output_if_src+0xac>
 8015494:	0802259b 	.word	0x0802259b
 8015498:	080225cf 	.word	0x080225cf
 801549c:	08018495 	.word	0x08018495
 80154a0:	080225db 	.word	0x080225db
 80154a4:	0802264c 	.word	0x0802264c
 80154a8:	200050f2 	.word	0x200050f2

080154ac <ip4_output_if>:
{
 80154ac:	b4f0      	push	{r4, r5, r6, r7}
 80154ae:	9c06      	ldr	r4, [sp, #24]
 80154b0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80154b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154b8:	b11a      	cbz	r2, 80154c2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80154ba:	b109      	cbz	r1, 80154c0 <ip4_output_if+0x14>
 80154bc:	680f      	ldr	r7, [r1, #0]
 80154be:	b907      	cbnz	r7, 80154c2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80154c0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154c2:	e9cd 6405 	strd	r6, r4, [sp, #20]
 80154c6:	9504      	str	r5, [sp, #16]
}
 80154c8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154ca:	f7ff bf77 	b.w	80153bc <ip4_output_if_src>

080154ce <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80154ce:	1e43      	subs	r3, r0, #1
 80154d0:	3303      	adds	r3, #3
 80154d2:	d811      	bhi.n	80154f8 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80154d4:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 80154d8:	f013 0302 	ands.w	r3, r3, #2
 80154dc:	d00e      	beq.n	80154fc <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80154de:	684a      	ldr	r2, [r1, #4]
 80154e0:	4282      	cmp	r2, r0
 80154e2:	d00b      	beq.n	80154fc <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80154e4:	688b      	ldr	r3, [r1, #8]
 80154e6:	4042      	eors	r2, r0
 80154e8:	421a      	tst	r2, r3
 80154ea:	d107      	bne.n	80154fc <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154ec:	43db      	mvns	r3, r3
 80154ee:	4383      	bics	r3, r0
    return 1;
 80154f0:	bf0c      	ite	eq
 80154f2:	2001      	moveq	r0, #1
 80154f4:	2000      	movne	r0, #0
 80154f6:	4770      	bx	lr
 80154f8:	2001      	movs	r0, #1
 80154fa:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80154fc:	2000      	movs	r0, #0
  }
}
 80154fe:	4770      	bx	lr

08015500 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8015500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015502:	b085      	sub	sp, #20
 8015504:	460d      	mov	r5, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 8015506:	2700      	movs	r7, #0
 8015508:	46ec      	mov	ip, sp
 801550a:	7803      	ldrb	r3, [r0, #0]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801550c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015510:	2a09      	cmp	r2, #9
 8015512:	eb0c 0107 	add.w	r1, ip, r7
 8015516:	f200 8084 	bhi.w	8015622 <ip4addr_aton+0x122>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
 801551a:	2b30      	cmp	r3, #48	; 0x30
 801551c:	d118      	bne.n	8015550 <ip4addr_aton+0x50>
      c = *++cp;
 801551e:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8015520:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8015524:	2a58      	cmp	r2, #88	; 0x58
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 8015526:	bf13      	iteet	ne
 8015528:	f04f 0e08 	movne.w	lr, #8
        base = 16;
 801552c:	f04f 0e10 	moveq.w	lr, #16
        c = *++cp;
 8015530:	7883      	ldrbeq	r3, [r0, #2]
      c = *++cp;
 8015532:	3001      	addne	r0, #1
        c = *++cp;
 8015534:	bf08      	it	eq
 8015536:	3002      	addeq	r0, #2
 8015538:	4606      	mov	r6, r0
        base = 8;
 801553a:	2400      	movs	r4, #0
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801553c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015540:	2a09      	cmp	r2, #9
 8015542:	d808      	bhi.n	8015556 <ip4addr_aton+0x56>
        val = (val * base) + (u32_t)(c - '0');
 8015544:	fb04 340e 	mla	r4, r4, lr, r3
 8015548:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
        c = *++cp;
 801554a:	7873      	ldrb	r3, [r6, #1]
 801554c:	3601      	adds	r6, #1
 801554e:	e7f5      	b.n	801553c <ip4addr_aton+0x3c>
    base = 10;
 8015550:	f04f 0e0a 	mov.w	lr, #10
 8015554:	e7f0      	b.n	8015538 <ip4addr_aton+0x38>
      } else if (base == 16 && isxdigit(c)) {
 8015556:	f1be 0f10 	cmp.w	lr, #16
 801555a:	d111      	bne.n	8015580 <ip4addr_aton+0x80>
 801555c:	f023 0220 	bic.w	r2, r3, #32
 8015560:	3a41      	subs	r2, #65	; 0x41
 8015562:	b2d2      	uxtb	r2, r2
 8015564:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8015568:	2a05      	cmp	r2, #5
 801556a:	b2c0      	uxtb	r0, r0
 801556c:	d808      	bhi.n	8015580 <ip4addr_aton+0x80>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801556e:	281a      	cmp	r0, #26
 8015570:	bf34      	ite	cc
 8015572:	2261      	movcc	r2, #97	; 0x61
 8015574:	2241      	movcs	r2, #65	; 0x41
 8015576:	330a      	adds	r3, #10
 8015578:	1a9b      	subs	r3, r3, r2
 801557a:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
 801557e:	e7e4      	b.n	801554a <ip4addr_aton+0x4a>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015580:	2b2e      	cmp	r3, #46	; 0x2e
 8015582:	d107      	bne.n	8015594 <ip4addr_aton+0x94>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8015584:	2f0c      	cmp	r7, #12
 8015586:	d04c      	beq.n	8015622 <ip4addr_aton+0x122>
        return 0;
      }
      *pp++ = val;
 8015588:	f84c 4007 	str.w	r4, [ip, r7]
      c = *++cp;
 801558c:	1c70      	adds	r0, r6, #1
 801558e:	7873      	ldrb	r3, [r6, #1]
 8015590:	3704      	adds	r7, #4
    if (!isdigit(c)) {
 8015592:	e7bb      	b.n	801550c <ip4addr_aton+0xc>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8015594:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8015598:	d002      	beq.n	80155a0 <ip4addr_aton+0xa0>
 801559a:	3b09      	subs	r3, #9
 801559c:	2b04      	cmp	r3, #4
 801559e:	d840      	bhi.n	8015622 <ip4addr_aton+0x122>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80155a0:	eba1 000c 	sub.w	r0, r1, ip
 80155a4:	1080      	asrs	r0, r0, #2
 80155a6:	3001      	adds	r0, #1
 80155a8:	2804      	cmp	r0, #4
 80155aa:	d832      	bhi.n	8015612 <ip4addr_aton+0x112>
 80155ac:	e8df f000 	tbb	[pc, r0]
 80155b0:	12030b3a 	.word	0x12030b3a
 80155b4:	20          	.byte	0x20
 80155b5:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80155b6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 80155ba:	d232      	bcs.n	8015622 <ip4addr_aton+0x122>
      return 0;
    }
    if (parts[0] > 0xff) {
 80155bc:	9b00      	ldr	r3, [sp, #0]
 80155be:	2bff      	cmp	r3, #255	; 0xff
 80155c0:	d82f      	bhi.n	8015622 <ip4addr_aton+0x122>
      return 0;
    }
    val |= parts[0] << 24;
 80155c2:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 80155c6:	b11d      	cbz	r5, 80155d0 <ip4addr_aton+0xd0>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80155c8:	4620      	mov	r0, r4
 80155ca:	f7f8 ff36 	bl	800e43a <lwip_htonl>
 80155ce:	6028      	str	r0, [r5, #0]
  }
  return 1;
 80155d0:	2001      	movs	r0, #1
 80155d2:	e027      	b.n	8015624 <ip4addr_aton+0x124>
    if (val > 0xffff) {
 80155d4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80155d8:	d223      	bcs.n	8015622 <ip4addr_aton+0x122>
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80155da:	9a00      	ldr	r2, [sp, #0]
 80155dc:	2aff      	cmp	r2, #255	; 0xff
 80155de:	d820      	bhi.n	8015622 <ip4addr_aton+0x122>
 80155e0:	9b01      	ldr	r3, [sp, #4]
 80155e2:	2bff      	cmp	r3, #255	; 0xff
 80155e4:	d81d      	bhi.n	8015622 <ip4addr_aton+0x122>
    val |= (parts[0] << 24) | (parts[1] << 16);
 80155e6:	041b      	lsls	r3, r3, #16
 80155e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80155ec:	431c      	orrs	r4, r3
    break;
 80155ee:	e7ea      	b.n	80155c6 <ip4addr_aton+0xc6>
    if (val > 0xff) {
 80155f0:	2cff      	cmp	r4, #255	; 0xff
 80155f2:	d816      	bhi.n	8015622 <ip4addr_aton+0x122>
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80155f4:	9900      	ldr	r1, [sp, #0]
 80155f6:	29ff      	cmp	r1, #255	; 0xff
 80155f8:	d813      	bhi.n	8015622 <ip4addr_aton+0x122>
 80155fa:	9b01      	ldr	r3, [sp, #4]
 80155fc:	2bff      	cmp	r3, #255	; 0xff
 80155fe:	d810      	bhi.n	8015622 <ip4addr_aton+0x122>
 8015600:	9a02      	ldr	r2, [sp, #8]
 8015602:	2aff      	cmp	r2, #255	; 0xff
 8015604:	d80d      	bhi.n	8015622 <ip4addr_aton+0x122>
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8015606:	041b      	lsls	r3, r3, #16
 8015608:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801560c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015610:	e7ec      	b.n	80155ec <ip4addr_aton+0xec>
    LWIP_ASSERT("unhandled", 0);
 8015612:	4b05      	ldr	r3, [pc, #20]	; (8015628 <ip4addr_aton+0x128>)
 8015614:	f240 1203 	movw	r2, #259	; 0x103
 8015618:	4904      	ldr	r1, [pc, #16]	; (801562c <ip4addr_aton+0x12c>)
 801561a:	4805      	ldr	r0, [pc, #20]	; (8015630 <ip4addr_aton+0x130>)
 801561c:	f001 f934 	bl	8016888 <iprintf>
    break;
 8015620:	e7d1      	b.n	80155c6 <ip4addr_aton+0xc6>
      return 0;
 8015622:	2000      	movs	r0, #0
}
 8015624:	b005      	add	sp, #20
 8015626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015628:	08022608 	.word	0x08022608
 801562c:	08022641 	.word	0x08022641
 8015630:	08018495 	.word	0x08018495

08015634 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015634:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  rp = buf;
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8015638:	f04f 0c0a 	mov.w	ip, #10
  rp = buf;
 801563c:	460f      	mov	r7, r1
  int len = 0;
 801563e:	2500      	movs	r5, #0
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8015640:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 8015644:	6803      	ldr	r3, [r0, #0]
 8015646:	a802      	add	r0, sp, #8
 8015648:	f840 3d04 	str.w	r3, [r0, #-4]!
  for (n = 0; n < 4; n++) {
 801564c:	ab02      	add	r3, sp, #8
 801564e:	fa5f fe83 	uxtb.w	lr, r3
    i = 0;
 8015652:	2300      	movs	r3, #0
 8015654:	f810 4b01 	ldrb.w	r4, [r0], #1
      rem = *ap % (u8_t)10;
 8015658:	fbb4 f6fc 	udiv	r6, r4, ip
 801565c:	fb0c 4416 	mls	r4, ip, r6, r4
      inv[i++] = (char)('0' + rem);
 8015660:	f10d 0a08 	add.w	sl, sp, #8
 8015664:	3430      	adds	r4, #48	; 0x30
 8015666:	449a      	add	sl, r3
 8015668:	f103 0901 	add.w	r9, r3, #1
 801566c:	f80a 4c08 	strb.w	r4, [sl, #-8]
    } while (*ap);
 8015670:	f016 04ff 	ands.w	r4, r6, #255	; 0xff
      inv[i++] = (char)('0' + rem);
 8015674:	fa5f f989 	uxtb.w	r9, r9
    } while (*ap);
 8015678:	d116      	bne.n	80156a8 <ip4addr_ntoa_r+0x74>
 801567a:	f800 4c01 	strb.w	r4, [r0, #-1]
 801567e:	462e      	mov	r6, r5
 8015680:	463c      	mov	r4, r7
    while (i--) {
 8015682:	2bff      	cmp	r3, #255	; 0xff
 8015684:	f105 0501 	add.w	r5, r5, #1
 8015688:	d110      	bne.n	80156ac <ip4addr_ntoa_r+0x78>
    if (len++ >= buflen) {
 801568a:	4296      	cmp	r6, r2
 801568c:	da1b      	bge.n	80156c6 <ip4addr_ntoa_r+0x92>
  for (n = 0; n < 4; n++) {
 801568e:	b2c3      	uxtb	r3, r0
 8015690:	459e      	cmp	lr, r3
    *rp++ = '.';
 8015692:	f104 0701 	add.w	r7, r4, #1
 8015696:	f884 8000 	strb.w	r8, [r4]
  for (n = 0; n < 4; n++) {
 801569a:	d1da      	bne.n	8015652 <ip4addr_ntoa_r+0x1e>
    ap++;
  }
  *--rp = 0;
 801569c:	2300      	movs	r3, #0
  return buf;
 801569e:	4608      	mov	r0, r1
  *--rp = 0;
 80156a0:	7023      	strb	r3, [r4, #0]
}
 80156a2:	b002      	add	sp, #8
 80156a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      inv[i++] = (char)('0' + rem);
 80156a8:	464b      	mov	r3, r9
 80156aa:	e7d5      	b.n	8015658 <ip4addr_ntoa_r+0x24>
 80156ac:	1e5f      	subs	r7, r3, #1
      if (len++ >= buflen) {
 80156ae:	4296      	cmp	r6, r2
 80156b0:	b2ff      	uxtb	r7, r7
 80156b2:	da08      	bge.n	80156c6 <ip4addr_ntoa_r+0x92>
      *rp++ = inv[i];
 80156b4:	ae02      	add	r6, sp, #8
 80156b6:	4433      	add	r3, r6
 80156b8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80156bc:	462e      	mov	r6, r5
 80156be:	f804 3b01 	strb.w	r3, [r4], #1
 80156c2:	463b      	mov	r3, r7
 80156c4:	e7dd      	b.n	8015682 <ip4addr_ntoa_r+0x4e>
        return NULL;
 80156c6:	2000      	movs	r0, #0
 80156c8:	e7eb      	b.n	80156a2 <ip4addr_ntoa_r+0x6e>
	...

080156cc <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80156cc:	2210      	movs	r2, #16
 80156ce:	4901      	ldr	r1, [pc, #4]	; (80156d4 <ip4addr_ntoa+0x8>)
 80156d0:	f7ff bfb0 	b.w	8015634 <ip4addr_ntoa_r>
 80156d4:	200050f4 	.word	0x200050f4

080156d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80156d8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80156da:	4b0c      	ldr	r3, [pc, #48]	; (801570c <ip_reass_dequeue_datagram+0x34>)
{
 80156dc:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 80156de:	681a      	ldr	r2, [r3, #0]
{
 80156e0:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80156e2:	4282      	cmp	r2, r0
 80156e4:	d107      	bne.n	80156f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80156e6:	6802      	ldr	r2, [r0, #0]
 80156e8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80156ea:	4621      	mov	r1, r4
}
 80156ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80156f0:	2004      	movs	r0, #4
 80156f2:	f7f9 bdb7 	b.w	800f264 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80156f6:	b931      	cbnz	r1, 8015706 <ip_reass_dequeue_datagram+0x2e>
 80156f8:	4b05      	ldr	r3, [pc, #20]	; (8015710 <ip_reass_dequeue_datagram+0x38>)
 80156fa:	f240 1245 	movw	r2, #325	; 0x145
 80156fe:	4905      	ldr	r1, [pc, #20]	; (8015714 <ip_reass_dequeue_datagram+0x3c>)
 8015700:	4805      	ldr	r0, [pc, #20]	; (8015718 <ip_reass_dequeue_datagram+0x40>)
 8015702:	f001 f8c1 	bl	8016888 <iprintf>
    prev->next = ipr->next;
 8015706:	6823      	ldr	r3, [r4, #0]
 8015708:	602b      	str	r3, [r5, #0]
 801570a:	e7ee      	b.n	80156ea <ip_reass_dequeue_datagram+0x12>
 801570c:	20005108 	.word	0x20005108
 8015710:	08022739 	.word	0x08022739
 8015714:	08022772 	.word	0x08022772
 8015718:	08018495 	.word	0x08018495

0801571c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801571c:	4281      	cmp	r1, r0
{
 801571e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015722:	4605      	mov	r5, r0
 8015724:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015726:	d105      	bne.n	8015734 <ip_reass_free_complete_datagram+0x18>
 8015728:	4b2f      	ldr	r3, [pc, #188]	; (80157e8 <ip_reass_free_complete_datagram+0xcc>)
 801572a:	22ab      	movs	r2, #171	; 0xab
 801572c:	492f      	ldr	r1, [pc, #188]	; (80157ec <ip_reass_free_complete_datagram+0xd0>)
 801572e:	4830      	ldr	r0, [pc, #192]	; (80157f0 <ip_reass_free_complete_datagram+0xd4>)
 8015730:	f001 f8aa 	bl	8016888 <iprintf>
  if (prev != NULL) {
 8015734:	b147      	cbz	r7, 8015748 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	42ab      	cmp	r3, r5
 801573a:	d005      	beq.n	8015748 <ip_reass_free_complete_datagram+0x2c>
 801573c:	4b2a      	ldr	r3, [pc, #168]	; (80157e8 <ip_reass_free_complete_datagram+0xcc>)
 801573e:	22ad      	movs	r2, #173	; 0xad
 8015740:	492c      	ldr	r1, [pc, #176]	; (80157f4 <ip_reass_free_complete_datagram+0xd8>)
 8015742:	482b      	ldr	r0, [pc, #172]	; (80157f0 <ip_reass_free_complete_datagram+0xd4>)
 8015744:	f001 f8a0 	bl	8016888 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015748:	686e      	ldr	r6, [r5, #4]
 801574a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 801574c:	889a      	ldrh	r2, [r3, #4]
 801574e:	bb92      	cbnz	r2, 80157b6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8015750:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015752:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8015756:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015758:	f105 0208 	add.w	r2, r5, #8
 801575c:	f852 0b04 	ldr.w	r0, [r2], #4
 8015760:	428a      	cmp	r2, r1
 8015762:	f843 0b04 	str.w	r0, [r3], #4
 8015766:	d1f9      	bne.n	801575c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015768:	2101      	movs	r1, #1
 801576a:	4630      	mov	r0, r6
 801576c:	f7ff fd27 	bl	80151be <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015770:	4630      	mov	r0, r6
 8015772:	f7fa f8e9 	bl	800f948 <pbuf_clen>
 8015776:	4604      	mov	r4, r0
    pbuf_free(p);
 8015778:	4630      	mov	r0, r6
 801577a:	f7f9 ff31 	bl	800f5e0 <pbuf_free>
  p = ipr->p;
 801577e:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015780:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80157e8 <ip_reass_free_complete_datagram+0xcc>
 8015784:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8015800 <ip_reass_free_complete_datagram+0xe4>
 8015788:	f8df a064 	ldr.w	sl, [pc, #100]	; 80157f0 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 801578c:	b9ae      	cbnz	r6, 80157ba <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 801578e:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015790:	4d19      	ldr	r5, [pc, #100]	; (80157f8 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8015792:	4639      	mov	r1, r7
 8015794:	f7ff ffa0 	bl	80156d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015798:	882b      	ldrh	r3, [r5, #0]
 801579a:	42a3      	cmp	r3, r4
 801579c:	d205      	bcs.n	80157aa <ip_reass_free_complete_datagram+0x8e>
 801579e:	4b12      	ldr	r3, [pc, #72]	; (80157e8 <ip_reass_free_complete_datagram+0xcc>)
 80157a0:	22d2      	movs	r2, #210	; 0xd2
 80157a2:	4916      	ldr	r1, [pc, #88]	; (80157fc <ip_reass_free_complete_datagram+0xe0>)
 80157a4:	4812      	ldr	r0, [pc, #72]	; (80157f0 <ip_reass_free_complete_datagram+0xd4>)
 80157a6:	f001 f86f 	bl	8016888 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80157aa:	882b      	ldrh	r3, [r5, #0]
}
 80157ac:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 80157ae:	1b1b      	subs	r3, r3, r4
 80157b0:	802b      	strh	r3, [r5, #0]
}
 80157b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80157b6:	2400      	movs	r4, #0
 80157b8:	e7e1      	b.n	801577e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80157ba:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 80157bc:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 80157be:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80157c2:	f7fa f8c1 	bl	800f948 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157c6:	4404      	add	r4, r0
 80157c8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80157cc:	db05      	blt.n	80157da <ip_reass_free_complete_datagram+0xbe>
 80157ce:	4643      	mov	r3, r8
 80157d0:	22cc      	movs	r2, #204	; 0xcc
 80157d2:	4649      	mov	r1, r9
 80157d4:	4650      	mov	r0, sl
 80157d6:	f001 f857 	bl	8016888 <iprintf>
    pbuf_free(pcur);
 80157da:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80157dc:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80157de:	f7f9 feff 	bl	800f5e0 <pbuf_free>
    p = iprh->next_pbuf;
 80157e2:	465e      	mov	r6, fp
 80157e4:	e7d2      	b.n	801578c <ip_reass_free_complete_datagram+0x70>
 80157e6:	bf00      	nop
 80157e8:	08022739 	.word	0x08022739
 80157ec:	0802278b 	.word	0x0802278b
 80157f0:	08018495 	.word	0x08018495
 80157f4:	08022797 	.word	0x08022797
 80157f8:	20005104 	.word	0x20005104
 80157fc:	080227c6 	.word	0x080227c6
 8015800:	080227a9 	.word	0x080227a9

08015804 <ip_reass_remove_oldest_datagram>:
{
 8015804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015808:	4606      	mov	r6, r0
 801580a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801580c:	2500      	movs	r5, #0
    r = reassdatagrams;
 801580e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8015878 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8015812:	2400      	movs	r4, #0
    oldest_prev = NULL;
 8015814:	4621      	mov	r1, r4
    prev = NULL;
 8015816:	46a4      	mov	ip, r4
    oldest = NULL;
 8015818:	4620      	mov	r0, r4
    r = reassdatagrams;
 801581a:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801581e:	b953      	cbnz	r3, 8015836 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8015820:	b110      	cbz	r0, 8015828 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015822:	f7ff ff7b 	bl	801571c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8015826:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015828:	42bd      	cmp	r5, r7
 801582a:	da01      	bge.n	8015830 <ip_reass_remove_oldest_datagram+0x2c>
 801582c:	2c01      	cmp	r4, #1
 801582e:	dcf0      	bgt.n	8015812 <ip_reass_remove_oldest_datagram+0xe>
}
 8015830:	4628      	mov	r0, r5
 8015832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015836:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 801583a:	695a      	ldr	r2, [r3, #20]
 801583c:	4572      	cmp	r2, lr
 801583e:	d109      	bne.n	8015854 <ip_reass_remove_oldest_datagram+0x50>
 8015840:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8015844:	699a      	ldr	r2, [r3, #24]
 8015846:	4572      	cmp	r2, lr
 8015848:	d104      	bne.n	8015854 <ip_reass_remove_oldest_datagram+0x50>
 801584a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 801584e:	88b2      	ldrh	r2, [r6, #4]
 8015850:	4596      	cmp	lr, r2
 8015852:	d008      	beq.n	8015866 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8015854:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8015856:	b160      	cbz	r0, 8015872 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8015858:	7fc2      	ldrb	r2, [r0, #31]
 801585a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 801585e:	4596      	cmp	lr, r2
 8015860:	bf9c      	itt	ls
 8015862:	4661      	movls	r1, ip
 8015864:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	2a00      	cmp	r2, #0
 801586a:	bf18      	it	ne
 801586c:	469c      	movne	ip, r3
 801586e:	4613      	mov	r3, r2
 8015870:	e7d5      	b.n	801581e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8015872:	4661      	mov	r1, ip
 8015874:	4618      	mov	r0, r3
 8015876:	e7f6      	b.n	8015866 <ip_reass_remove_oldest_datagram+0x62>
 8015878:	20005108 	.word	0x20005108

0801587c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801587c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801587e:	4604      	mov	r4, r0
 8015880:	b930      	cbnz	r0, 8015890 <ip_frag_free_pbuf_custom_ref+0x14>
 8015882:	4b06      	ldr	r3, [pc, #24]	; (801589c <ip_frag_free_pbuf_custom_ref+0x20>)
 8015884:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015888:	4905      	ldr	r1, [pc, #20]	; (80158a0 <ip_frag_free_pbuf_custom_ref+0x24>)
 801588a:	4806      	ldr	r0, [pc, #24]	; (80158a4 <ip_frag_free_pbuf_custom_ref+0x28>)
 801588c:	f000 fffc 	bl	8016888 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015890:	4621      	mov	r1, r4
}
 8015892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8015896:	2005      	movs	r0, #5
 8015898:	f7f9 bce4 	b.w	800f264 <memp_free>
 801589c:	08022739 	.word	0x08022739
 80158a0:	080211bf 	.word	0x080211bf
 80158a4:	08018495 	.word	0x08018495

080158a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80158a8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80158aa:	4604      	mov	r4, r0
 80158ac:	b930      	cbnz	r0, 80158bc <ipfrag_free_pbuf_custom+0x14>
 80158ae:	4b08      	ldr	r3, [pc, #32]	; (80158d0 <ipfrag_free_pbuf_custom+0x28>)
 80158b0:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80158b4:	4907      	ldr	r1, [pc, #28]	; (80158d4 <ipfrag_free_pbuf_custom+0x2c>)
 80158b6:	4808      	ldr	r0, [pc, #32]	; (80158d8 <ipfrag_free_pbuf_custom+0x30>)
 80158b8:	f000 ffe6 	bl	8016888 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80158bc:	6960      	ldr	r0, [r4, #20]
 80158be:	b108      	cbz	r0, 80158c4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80158c0:	f7f9 fe8e 	bl	800f5e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80158c4:	4620      	mov	r0, r4
}
 80158c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80158ca:	f7ff bfd7 	b.w	801587c <ip_frag_free_pbuf_custom_ref>
 80158ce:	bf00      	nop
 80158d0:	08022739 	.word	0x08022739
 80158d4:	080227e1 	.word	0x080227e1
 80158d8:	08018495 	.word	0x08018495

080158dc <ip_reass_tmr>:
{
 80158dc:	b538      	push	{r3, r4, r5, lr}
  struct ip_reassdata *r, *prev = NULL;
 80158de:	2400      	movs	r4, #0
  r = reassdatagrams;
 80158e0:	4b08      	ldr	r3, [pc, #32]	; (8015904 <ip_reass_tmr+0x28>)
 80158e2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80158e4:	b900      	cbnz	r0, 80158e8 <ip_reass_tmr+0xc>
}
 80158e6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80158e8:	7fc3      	ldrb	r3, [r0, #31]
 80158ea:	6805      	ldr	r5, [r0, #0]
 80158ec:	b123      	cbz	r3, 80158f8 <ip_reass_tmr+0x1c>
      r->timer--;
 80158ee:	3b01      	subs	r3, #1
 80158f0:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 80158f2:	4604      	mov	r4, r0
 80158f4:	4628      	mov	r0, r5
 80158f6:	e7f5      	b.n	80158e4 <ip_reass_tmr+0x8>
 80158f8:	4621      	mov	r1, r4
 80158fa:	f7ff ff0f 	bl	801571c <ip_reass_free_complete_datagram>
 80158fe:	4620      	mov	r0, r4
 8015900:	e7f7      	b.n	80158f2 <ip_reass_tmr+0x16>
 8015902:	bf00      	nop
 8015904:	20005108 	.word	0x20005108

08015908 <ip4_reass>:
{
 8015908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 801590c:	6845      	ldr	r5, [r0, #4]
{
 801590e:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015910:	782b      	ldrb	r3, [r5, #0]
 8015912:	f003 030f 	and.w	r3, r3, #15
 8015916:	2b05      	cmp	r3, #5
 8015918:	f040 808c 	bne.w	8015a34 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801591c:	88e8      	ldrh	r0, [r5, #6]
 801591e:	f7f8 fd89 	bl	800e434 <lwip_htons>
 8015922:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015926:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801592a:	8868      	ldrh	r0, [r5, #2]
 801592c:	f7f8 fd82 	bl	800e434 <lwip_htons>
 8015930:	782b      	ldrb	r3, [r5, #0]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015932:	4cb0      	ldr	r4, [pc, #704]	; (8015bf4 <ip4_reass+0x2ec>)
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015934:	f003 030f 	and.w	r3, r3, #15
 8015938:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 801593c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 801593e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015940:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8015942:	f7fa f801 	bl	800f948 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015946:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8015948:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801594a:	4403      	add	r3, r0
 801594c:	2b0a      	cmp	r3, #10
 801594e:	dc68      	bgt.n	8015a22 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015950:	4ea9      	ldr	r6, [pc, #676]	; (8015bf8 <ip4_reass+0x2f0>)
 8015952:	6834      	ldr	r4, [r6, #0]
 8015954:	2c00      	cmp	r4, #0
 8015956:	d172      	bne.n	8015a3e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015958:	2004      	movs	r0, #4
 801595a:	f7f9 fc67 	bl	800f22c <memp_malloc>
  if (ipr == NULL) {
 801595e:	4604      	mov	r4, r0
 8015960:	b958      	cbnz	r0, 801597a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015962:	4651      	mov	r1, sl
 8015964:	4628      	mov	r0, r5
 8015966:	f7ff ff4d 	bl	8015804 <ip_reass_remove_oldest_datagram>
 801596a:	4582      	cmp	sl, r0
 801596c:	dc62      	bgt.n	8015a34 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801596e:	2004      	movs	r0, #4
 8015970:	f7f9 fc5c 	bl	800f22c <memp_malloc>
    if (ipr == NULL)
 8015974:	4604      	mov	r4, r0
 8015976:	2800      	cmp	r0, #0
 8015978:	d05c      	beq.n	8015a34 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801597a:	221c      	movs	r2, #28
 801597c:	2100      	movs	r1, #0
 801597e:	1d20      	adds	r0, r4, #4
 8015980:	f000 fed4 	bl	801672c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015984:	2303      	movs	r3, #3
 8015986:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8015988:	6833      	ldr	r3, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801598a:	f104 0208 	add.w	r2, r4, #8
  ipr->next = reassdatagrams;
 801598e:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015990:	462b      	mov	r3, r5
  reassdatagrams = ipr;
 8015992:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015994:	f105 0114 	add.w	r1, r5, #20
 8015998:	f853 0b04 	ldr.w	r0, [r3], #4
 801599c:	428b      	cmp	r3, r1
 801599e:	f842 0b04 	str.w	r0, [r2], #4
 80159a2:	d1f9      	bne.n	8015998 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80159a4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80159a8:	f01b 0b20 	ands.w	fp, fp, #32
 80159ac:	d108      	bne.n	80159c0 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80159ae:	9b01      	ldr	r3, [sp, #4]
 80159b0:	444b      	add	r3, r9
 80159b2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80159b4:	4599      	cmp	r9, r3
 80159b6:	d83d      	bhi.n	8015a34 <ip4_reass+0x12c>
 80159b8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80159bc:	4293      	cmp	r3, r2
 80159be:	d839      	bhi.n	8015a34 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 80159c0:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80159c2:	8868      	ldrh	r0, [r5, #2]
 80159c4:	f7f8 fd36 	bl	800e434 <lwip_htons>
 80159c8:	f895 8000 	ldrb.w	r8, [r5]
 80159cc:	f008 080f 	and.w	r8, r8, #15
 80159d0:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80159d4:	88e8      	ldrh	r0, [r5, #6]
 80159d6:	f7f8 fd2d 	bl	800e434 <lwip_htons>
  for (q = ipr->p; q != NULL;) {
 80159da:	f8d4 c004 	ldr.w	ip, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80159de:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh->next_pbuf = NULL;
 80159e2:	2500      	movs	r5, #0
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80159e4:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80159e8:	00c0      	lsls	r0, r0, #3
  iprh->end = offset + len;
 80159ea:	eb08 0300 	add.w	r3, r8, r0
  for (q = ipr->p; q != NULL;) {
 80159ee:	4662      	mov	r2, ip
  int valid = 1;
 80159f0:	f04f 0801 	mov.w	r8, #1
  iprh = (struct ip_reass_helper*)new_p->payload;
 80159f4:	687e      	ldr	r6, [r7, #4]
  iprh->end = offset + len;
 80159f6:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80159f8:	7035      	strb	r5, [r6, #0]
 80159fa:	7075      	strb	r5, [r6, #1]
 80159fc:	70b5      	strb	r5, [r6, #2]
 80159fe:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8015a00:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8015a02:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8015a04:	bb52      	cbnz	r2, 8015a5c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8015a06:	2d00      	cmp	r5, #0
 8015a08:	f040 8092 	bne.w	8015b30 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015a0c:	f1bc 0f00 	cmp.w	ip, #0
 8015a10:	d07d      	beq.n	8015b0e <ip4_reass+0x206>
 8015a12:	4b7a      	ldr	r3, [pc, #488]	; (8015bfc <ip4_reass+0x2f4>)
 8015a14:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8015a18:	4979      	ldr	r1, [pc, #484]	; (8015c00 <ip4_reass+0x2f8>)
 8015a1a:	487a      	ldr	r0, [pc, #488]	; (8015c04 <ip4_reass+0x2fc>)
 8015a1c:	f000 ff34 	bl	8016888 <iprintf>
 8015a20:	e075      	b.n	8015b0e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a22:	4601      	mov	r1, r0
 8015a24:	4628      	mov	r0, r5
 8015a26:	f7ff feed 	bl	8015804 <ip_reass_remove_oldest_datagram>
 8015a2a:	b118      	cbz	r0, 8015a34 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015a2c:	8823      	ldrh	r3, [r4, #0]
 8015a2e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015a30:	2b0a      	cmp	r3, #10
 8015a32:	dd8d      	ble.n	8015950 <ip4_reass+0x48>
  pbuf_free(p);
 8015a34:	4638      	mov	r0, r7
 8015a36:	f7f9 fdd3 	bl	800f5e0 <pbuf_free>
  return NULL;
 8015a3a:	2500      	movs	r5, #0
 8015a3c:	e0d6      	b.n	8015bec <ip4_reass+0x2e4>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015a3e:	68eb      	ldr	r3, [r5, #12]
 8015a40:	6962      	ldr	r2, [r4, #20]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d108      	bne.n	8015a58 <ip4_reass+0x150>
 8015a46:	692b      	ldr	r3, [r5, #16]
 8015a48:	69a2      	ldr	r2, [r4, #24]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d104      	bne.n	8015a58 <ip4_reass+0x150>
 8015a4e:	89a2      	ldrh	r2, [r4, #12]
 8015a50:	88ab      	ldrh	r3, [r5, #4]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	f000 80de 	beq.w	8015c14 <ip4_reass+0x30c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015a58:	6824      	ldr	r4, [r4, #0]
 8015a5a:	e77b      	b.n	8015954 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8015a5c:	f8d2 e004 	ldr.w	lr, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8015a60:	f8be 1004 	ldrh.w	r1, [lr, #4]
 8015a64:	4288      	cmp	r0, r1
 8015a66:	d254      	bcs.n	8015b12 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8015a68:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8015a6a:	2d00      	cmp	r5, #0
 8015a6c:	d04d      	beq.n	8015b0a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015a6e:	88ea      	ldrh	r2, [r5, #6]
 8015a70:	4290      	cmp	r0, r2
 8015a72:	f0c0 8091 	bcc.w	8015b98 <ip4_reass+0x290>
 8015a76:	428b      	cmp	r3, r1
 8015a78:	f200 808e 	bhi.w	8015b98 <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8015a7c:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8015a7e:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8015a80:	f040 80e4 	bne.w	8015c4c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015a84:	f1bb 0f00 	cmp.w	fp, #0
 8015a88:	d004      	beq.n	8015a94 <ip4_reass+0x18c>
 8015a8a:	7fa3      	ldrb	r3, [r4, #30]
 8015a8c:	f013 0301 	ands.w	r3, r3, #1
 8015a90:	f000 808d 	beq.w	8015bae <ip4_reass+0x2a6>
    if (valid) {
 8015a94:	f1b8 0f00 	cmp.w	r8, #0
 8015a98:	d159      	bne.n	8015b4e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 8015a9a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015a9e:	4e55      	ldr	r6, [pc, #340]	; (8015bf4 <ip4_reass+0x2ec>)
 8015aa0:	8833      	ldrh	r3, [r6, #0]
 8015aa2:	449a      	add	sl, r3
 8015aa4:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8015aa8:	f1bb 0f00 	cmp.w	fp, #0
 8015aac:	d107      	bne.n	8015abe <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 8015aae:	9b01      	ldr	r3, [sp, #4]
 8015ab0:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015ab2:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8015ab4:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015ab8:	f043 0301 	orr.w	r3, r3, #1
 8015abc:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015abe:	f1b8 0f01 	cmp.w	r8, #1
 8015ac2:	d1ba      	bne.n	8015a3a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8015ac4:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ac6:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 8015aca:	3314      	adds	r3, #20
 8015acc:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015ace:	6863      	ldr	r3, [r4, #4]
 8015ad0:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ad2:	f104 0308 	add.w	r3, r4, #8
 8015ad6:	462a      	mov	r2, r5
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015ad8:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ada:	f853 0b04 	ldr.w	r0, [r3], #4
 8015ade:	428b      	cmp	r3, r1
 8015ae0:	f842 0b04 	str.w	r0, [r2], #4
 8015ae4:	d1f9      	bne.n	8015ada <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015ae6:	8ba0      	ldrh	r0, [r4, #28]
 8015ae8:	f7f8 fca4 	bl	800e434 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8015aec:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015aee:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015af0:	71ab      	strb	r3, [r5, #6]
 8015af2:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015af4:	72ab      	strb	r3, [r5, #10]
 8015af6:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8015af8:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 8015afa:	2f00      	cmp	r7, #0
 8015afc:	d159      	bne.n	8015bb2 <ip4_reass+0x2aa>
    if (ipr == reassdatagrams) {
 8015afe:	4b3e      	ldr	r3, [pc, #248]	; (8015bf8 <ip4_reass+0x2f0>)
 8015b00:	6819      	ldr	r1, [r3, #0]
 8015b02:	42a1      	cmp	r1, r4
 8015b04:	d167      	bne.n	8015bd6 <ip4_reass+0x2ce>
      ipr_prev = NULL;
 8015b06:	4639      	mov	r1, r7
 8015b08:	e067      	b.n	8015bda <ip4_reass+0x2d2>
        if (iprh->end > iprh_tmp->start) {
 8015b0a:	428b      	cmp	r3, r1
 8015b0c:	d844      	bhi.n	8015b98 <ip4_reass+0x290>
      ipr->p = new_p;
 8015b0e:	6067      	str	r7, [r4, #4]
 8015b10:	e7b8      	b.n	8015a84 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8015b12:	d041      	beq.n	8015b98 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8015b14:	f8be 2006 	ldrh.w	r2, [lr, #6]
 8015b18:	4282      	cmp	r2, r0
 8015b1a:	d83d      	bhi.n	8015b98 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8015b1c:	b125      	cbz	r5, 8015b28 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b1e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8015b20:	428a      	cmp	r2, r1
 8015b22:	bf18      	it	ne
 8015b24:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8015b28:	f8de 2000 	ldr.w	r2, [lr]
 8015b2c:	4675      	mov	r5, lr
 8015b2e:	e769      	b.n	8015a04 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b30:	88eb      	ldrh	r3, [r5, #6]
 8015b32:	4283      	cmp	r3, r0
 8015b34:	d906      	bls.n	8015b44 <ip4_reass+0x23c>
 8015b36:	4b31      	ldr	r3, [pc, #196]	; (8015bfc <ip4_reass+0x2f4>)
 8015b38:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015b3c:	4932      	ldr	r1, [pc, #200]	; (8015c08 <ip4_reass+0x300>)
 8015b3e:	4831      	ldr	r0, [pc, #196]	; (8015c04 <ip4_reass+0x2fc>)
 8015b40:	f000 fea2 	bl	8016888 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8015b44:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8015b46:	88ea      	ldrh	r2, [r5, #6]
 8015b48:	88b3      	ldrh	r3, [r6, #4]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	e798      	b.n	8015a80 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8015b4e:	6863      	ldr	r3, [r4, #4]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d0a2      	beq.n	8015a9a <ip4_reass+0x192>
 8015b54:	6859      	ldr	r1, [r3, #4]
 8015b56:	888b      	ldrh	r3, [r1, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d19e      	bne.n	8015a9a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8015b5c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8015b5e:	b99b      	cbnz	r3, 8015b88 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8015b60:	42b1      	cmp	r1, r6
 8015b62:	d106      	bne.n	8015b72 <ip4_reass+0x26a>
 8015b64:	4b25      	ldr	r3, [pc, #148]	; (8015bfc <ip4_reass+0x2f4>)
 8015b66:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015b6a:	4928      	ldr	r1, [pc, #160]	; (8015c0c <ip4_reass+0x304>)
 8015b6c:	4825      	ldr	r0, [pc, #148]	; (8015c04 <ip4_reass+0x2fc>)
 8015b6e:	f000 fe8b 	bl	8016888 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015b72:	6833      	ldr	r3, [r6, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d092      	beq.n	8015a9e <ip4_reass+0x196>
 8015b78:	4b20      	ldr	r3, [pc, #128]	; (8015bfc <ip4_reass+0x2f4>)
 8015b7a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015b7e:	4924      	ldr	r1, [pc, #144]	; (8015c10 <ip4_reass+0x308>)
 8015b80:	4820      	ldr	r0, [pc, #128]	; (8015c04 <ip4_reass+0x2fc>)
 8015b82:	f000 fe81 	bl	8016888 <iprintf>
 8015b86:	e78a      	b.n	8015a9e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8015b88:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8015b8a:	88f0      	ldrh	r0, [r6, #6]
 8015b8c:	8893      	ldrh	r3, [r2, #4]
 8015b8e:	4298      	cmp	r0, r3
 8015b90:	d183      	bne.n	8015a9a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8015b92:	6813      	ldr	r3, [r2, #0]
 8015b94:	4616      	mov	r6, r2
 8015b96:	e7e2      	b.n	8015b5e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015b98:	4638      	mov	r0, r7
 8015b9a:	f7f9 fed5 	bl	800f948 <pbuf_clen>
 8015b9e:	4a15      	ldr	r2, [pc, #84]	; (8015bf4 <ip4_reass+0x2ec>)
 8015ba0:	8813      	ldrh	r3, [r2, #0]
 8015ba2:	1a18      	subs	r0, r3, r0
 8015ba4:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8015ba6:	4638      	mov	r0, r7
 8015ba8:	f7f9 fd1a 	bl	800f5e0 <pbuf_free>
 8015bac:	e742      	b.n	8015a34 <ip4_reass+0x12c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015bae:	4698      	mov	r8, r3
 8015bb0:	e775      	b.n	8015a9e <ip4_reass+0x196>
      iprh = (struct ip_reass_helper*)r->payload;
 8015bb2:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8015bb6:	f06f 0113 	mvn.w	r1, #19
 8015bba:	4638      	mov	r0, r7
 8015bbc:	f7f9 fd0a 	bl	800f5d4 <pbuf_header>
      pbuf_cat(p, r);
 8015bc0:	4639      	mov	r1, r7
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f7f9 fee4 	bl	800f990 <pbuf_cat>
      r = iprh->next_pbuf;
 8015bc8:	f8d8 7000 	ldr.w	r7, [r8]
 8015bcc:	e795      	b.n	8015afa <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 8015bce:	680b      	ldr	r3, [r1, #0]
 8015bd0:	42a3      	cmp	r3, r4
 8015bd2:	d002      	beq.n	8015bda <ip4_reass+0x2d2>
 8015bd4:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015bd6:	2900      	cmp	r1, #0
 8015bd8:	d1f9      	bne.n	8015bce <ip4_reass+0x2c6>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f7ff fd7c 	bl	80156d8 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8015be0:	4628      	mov	r0, r5
 8015be2:	f7f9 feb1 	bl	800f948 <pbuf_clen>
 8015be6:	8833      	ldrh	r3, [r6, #0]
 8015be8:	1a18      	subs	r0, r3, r0
 8015bea:	8030      	strh	r0, [r6, #0]
}
 8015bec:	4628      	mov	r0, r5
 8015bee:	b003      	add	sp, #12
 8015bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bf4:	20005104 	.word	0x20005104
 8015bf8:	20005108 	.word	0x20005108
 8015bfc:	08022739 	.word	0x08022739
 8015c00:	080226d3 	.word	0x080226d3
 8015c04:	08018495 	.word	0x08018495
 8015c08:	080226b5 	.word	0x080226b5
 8015c0c:	0802270a 	.word	0x0802270a
 8015c10:	08022717 	.word	0x08022717
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c14:	88e8      	ldrh	r0, [r5, #6]
 8015c16:	f7f8 fc0d 	bl	800e434 <lwip_htons>
 8015c1a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	f47f aec0 	bne.w	80159a4 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015c24:	89e0      	ldrh	r0, [r4, #14]
 8015c26:	f7f8 fc05 	bl	800e434 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c2a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	f43f aeb8 	beq.w	80159a4 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015c34:	462b      	mov	r3, r5
 8015c36:	f104 0208 	add.w	r2, r4, #8
 8015c3a:	f105 0114 	add.w	r1, r5, #20
 8015c3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8015c42:	428b      	cmp	r3, r1
 8015c44:	f842 0b04 	str.w	r0, [r2], #4
 8015c48:	d1f9      	bne.n	8015c3e <ip4_reass+0x336>
 8015c4a:	e6ab      	b.n	80159a4 <ip4_reass+0x9c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015c4c:	f1bb 0f00 	cmp.w	fp, #0
 8015c50:	f43f af23 	beq.w	8015a9a <ip4_reass+0x192>
 8015c54:	f04f 0800 	mov.w	r8, #0
 8015c58:	e717      	b.n	8015a8a <ip4_reass+0x182>
 8015c5a:	bf00      	nop

08015c5c <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015c5c:	2308      	movs	r3, #8
{
 8015c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015c62:	f8b1 802a 	ldrh.w	r8, [r1, #42]	; 0x2a
{
 8015c66:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015c68:	f1a8 0814 	sub.w	r8, r8, #20
 8015c6c:	fb98 f8f3 	sdiv	r8, r8, r3
 8015c70:	fa1f f388 	uxth.w	r3, r8
 8015c74:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015c76:	6843      	ldr	r3, [r0, #4]
{
 8015c78:	4607      	mov	r7, r0
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8015c7a:	781e      	ldrb	r6, [r3, #0]
{
 8015c7c:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8015c7e:	f006 060f 	and.w	r6, r6, #15
 8015c82:	00b6      	lsls	r6, r6, #2
 8015c84:	2e14      	cmp	r6, #20
{
 8015c86:	9208      	str	r2, [sp, #32]
  original_iphdr = (struct ip_hdr *)p->payload;
 8015c88:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8015c8a:	d00b      	beq.n	8015ca4 <ip4_frag+0x48>
 8015c8c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8015c90:	4b59      	ldr	r3, [pc, #356]	; (8015df8 <ip4_frag+0x19c>)
 8015c92:	495a      	ldr	r1, [pc, #360]	; (8015dfc <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015c94:	485a      	ldr	r0, [pc, #360]	; (8015e00 <ip4_frag+0x1a4>)
 8015c96:	f000 fdf7 	bl	8016888 <iprintf>
 8015c9a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8015c9e:	b00b      	add	sp, #44	; 0x2c
 8015ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015ca4:	9b02      	ldr	r3, [sp, #8]
 8015ca6:	88d8      	ldrh	r0, [r3, #6]
 8015ca8:	f7f8 fbc4 	bl	800e434 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8015cac:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015cb0:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8015cb4:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015cb6:	d004      	beq.n	8015cc2 <ip4_frag+0x66>
 8015cb8:	4b4f      	ldr	r3, [pc, #316]	; (8015df8 <ip4_frag+0x19c>)
 8015cba:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015cbe:	4951      	ldr	r1, [pc, #324]	; (8015e04 <ip4_frag+0x1a8>)
 8015cc0:	e7e8      	b.n	8015c94 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8015cc2:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cc4:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8015cc8:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cca:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 8015cce:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cd0:	9306      	str	r3, [sp, #24]
  while (left) {
 8015cd2:	b90d      	cbnz	r5, 8015cd8 <ip4_frag+0x7c>
  return ERR_OK;
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	e7e2      	b.n	8015c9e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cd8:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015cda:	2200      	movs	r2, #0
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cdc:	42ab      	cmp	r3, r5
 8015cde:	bfa8      	it	ge
 8015ce0:	462b      	movge	r3, r5
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015ce2:	2114      	movs	r1, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 8015ce4:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015ce6:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8015ce8:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015cea:	f7f9 fce1 	bl	800f6b0 <pbuf_alloc>
    if (rambuf == NULL) {
 8015cee:	4680      	mov	r8, r0
 8015cf0:	b370      	cbz	r0, 8015d50 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015cf2:	897b      	ldrh	r3, [r7, #10]
 8015cf4:	2b13      	cmp	r3, #19
 8015cf6:	d806      	bhi.n	8015d06 <ip4_frag+0xaa>
 8015cf8:	4b3f      	ldr	r3, [pc, #252]	; (8015df8 <ip4_frag+0x19c>)
 8015cfa:	f240 3209 	movw	r2, #777	; 0x309
 8015cfe:	4942      	ldr	r1, [pc, #264]	; (8015e08 <ip4_frag+0x1ac>)
 8015d00:	483f      	ldr	r0, [pc, #252]	; (8015e00 <ip4_frag+0x1a4>)
 8015d02:	f000 fdc1 	bl	8016888 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015d06:	9b02      	ldr	r3, [sp, #8]
 8015d08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	3114      	adds	r1, #20
 8015d10:	f853 0b04 	ldr.w	r0, [r3], #4
 8015d14:	428b      	cmp	r3, r1
 8015d16:	f842 0b04 	str.w	r0, [r2], #4
 8015d1a:	d1f9      	bne.n	8015d10 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015d1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8015d20:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015d24:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8015d26:	f1b9 0f00 	cmp.w	r9, #0
 8015d2a:	d037      	beq.n	8015d9c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8015d2c:	897c      	ldrh	r4, [r7, #10]
 8015d2e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015d30:	b2a4      	uxth	r4, r4
 8015d32:	454c      	cmp	r4, r9
 8015d34:	bf28      	it	cs
 8015d36:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8015d38:	b914      	cbnz	r4, 8015d40 <ip4_frag+0xe4>
        p = p->next;
 8015d3a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8015d3c:	2600      	movs	r6, #0
 8015d3e:	e7f2      	b.n	8015d26 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8015d40:	2005      	movs	r0, #5
 8015d42:	f7f9 fa73 	bl	800f22c <memp_malloc>
      if (pcr == NULL) {
 8015d46:	4682      	mov	sl, r0
 8015d48:	b928      	cbnz	r0, 8015d56 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 8015d4a:	4640      	mov	r0, r8
 8015d4c:	f7f9 fc48 	bl	800f5e0 <pbuf_free>
  return ERR_MEM;
 8015d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d54:	e7a3      	b.n	8015c9e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d56:	9401      	str	r4, [sp, #4]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2202      	movs	r2, #2
 8015d5c:	4433      	add	r3, r6
 8015d5e:	9300      	str	r3, [sp, #0]
 8015d60:	4621      	mov	r1, r4
 8015d62:	4603      	mov	r3, r0
 8015d64:	2004      	movs	r0, #4
 8015d66:	f7f9 fbfd 	bl	800f564 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8015d6a:	b918      	cbnz	r0, 8015d74 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015d6c:	4650      	mov	r0, sl
 8015d6e:	f7ff fd85 	bl	801587c <ip_frag_free_pbuf_custom_ref>
 8015d72:	e7ea      	b.n	8015d4a <ip4_frag+0xee>
 8015d74:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 8015d76:	4638      	mov	r0, r7
 8015d78:	f7f9 fdee 	bl	800f958 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015d7c:	4b23      	ldr	r3, [pc, #140]	; (8015e0c <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 8015d7e:	eba9 0904 	sub.w	r9, r9, r4
      pcr->original = p;
 8015d82:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015d86:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 8015d8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d8c:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 8015d8e:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8015d92:	f7f9 fdfd 	bl	800f990 <pbuf_cat>
      if (left_to_copy) {
 8015d96:	f1b9 0f00 	cmp.w	r9, #0
 8015d9a:	d1ce      	bne.n	8015d3a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 8015d9c:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 8015d9e:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8015da0:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8015da4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
    poff += newpbuflen;
 8015da8:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 8015daa:	3b13      	subs	r3, #19
    if (!last) {
 8015dac:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 8015dae:	bfa8      	it	ge
 8015db0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015db4:	f7f8 fb3e 	bl	800e434 <lwip_htons>
 8015db8:	9b03      	ldr	r3, [sp, #12]
 8015dba:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8015dbc:	9b05      	ldr	r3, [sp, #20]
 8015dbe:	f103 0014 	add.w	r0, r3, #20
 8015dc2:	b280      	uxth	r0, r0
 8015dc4:	f7f8 fb36 	bl	800e434 <lwip_htons>
 8015dc8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8015dca:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8015dcc:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015dce:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8015dd0:	4641      	mov	r1, r8
    IPH_CHKSUM_SET(iphdr, 0);
 8015dd2:	7293      	strb	r3, [r2, #10]
 8015dd4:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8015dd6:	4658      	mov	r0, fp
 8015dd8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8015ddc:	9a08      	ldr	r2, [sp, #32]
 8015dde:	4798      	blx	r3
    pbuf_free(rambuf);
 8015de0:	4640      	mov	r0, r8
 8015de2:	f7f9 fbfd 	bl	800f5e0 <pbuf_free>
    left -= fragsize;
 8015de6:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8015de8:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 8015dea:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 8015dec:	9b04      	ldr	r3, [sp, #16]
    left -= fragsize;
 8015dee:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8015df0:	4413      	add	r3, r2
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	9304      	str	r3, [sp, #16]
 8015df6:	e76c      	b.n	8015cd2 <ip4_frag+0x76>
 8015df8:	08022739 	.word	0x08022739
 8015dfc:	08022654 	.word	0x08022654
 8015e00:	08018495 	.word	0x08018495
 8015e04:	0802267b 	.word	0x0802267b
 8015e08:	08022695 	.word	0x08022695
 8015e0c:	080158a9 	.word	0x080158a9

08015e10 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8015e10:	8943      	ldrh	r3, [r0, #10]
{
 8015e12:	b570      	push	{r4, r5, r6, lr}
  if (p->len <= SIZEOF_ETH_HDR) {
 8015e14:	2b0e      	cmp	r3, #14
{
 8015e16:	4604      	mov	r4, r0
 8015e18:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8015e1a:	d914      	bls.n	8015e46 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015e1c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015e1e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8015e20:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8015e22:	07d9      	lsls	r1, r3, #31
 8015e24:	d50a      	bpl.n	8015e3c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015e26:	2b01      	cmp	r3, #1
 8015e28:	d111      	bne.n	8015e4e <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e2a:	7843      	ldrb	r3, [r0, #1]
 8015e2c:	b933      	cbnz	r3, 8015e3c <ethernet_input+0x2c>
 8015e2e:	7883      	ldrb	r3, [r0, #2]
 8015e30:	2b5e      	cmp	r3, #94	; 0x5e
 8015e32:	d103      	bne.n	8015e3c <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015e34:	7b63      	ldrb	r3, [r4, #13]
 8015e36:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015e3a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8015e3c:	2e08      	cmp	r6, #8
 8015e3e:	d010      	beq.n	8015e62 <ethernet_input+0x52>
 8015e40:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8015e44:	d01e      	beq.n	8015e84 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8015e46:	4620      	mov	r0, r4
 8015e48:	f7f9 fbca 	bl	800f5e0 <pbuf_free>
  return ERR_OK;
 8015e4c:	e018      	b.n	8015e80 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015e4e:	2206      	movs	r2, #6
 8015e50:	4914      	ldr	r1, [pc, #80]	; (8015ea4 <ethernet_input+0x94>)
 8015e52:	f000 fc51 	bl	80166f8 <memcmp>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d1f0      	bne.n	8015e3c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8015e5a:	7b63      	ldrb	r3, [r4, #13]
 8015e5c:	f043 0308 	orr.w	r3, r3, #8
 8015e60:	e7eb      	b.n	8015e3a <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e62:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8015e66:	071a      	lsls	r2, r3, #28
 8015e68:	d5ed      	bpl.n	8015e46 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8015e6a:	f06f 010d 	mvn.w	r1, #13
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f7f9 fbb0 	bl	800f5d4 <pbuf_header>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	d1e6      	bne.n	8015e46 <ethernet_input+0x36>
        ip4_input(p, netif);
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	f7ff f9d0 	bl	8015220 <ip4_input>
}
 8015e80:	2000      	movs	r0, #0
 8015e82:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e84:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8015e88:	071b      	lsls	r3, r3, #28
 8015e8a:	d5dc      	bpl.n	8015e46 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8015e8c:	f06f 010d 	mvn.w	r1, #13
 8015e90:	4620      	mov	r0, r4
 8015e92:	f7f9 fb9f 	bl	800f5d4 <pbuf_header>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d1d5      	bne.n	8015e46 <ethernet_input+0x36>
        etharp_input(p, netif);
 8015e9a:	4629      	mov	r1, r5
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	f7fe fe3b 	bl	8014b18 <etharp_input>
      break;
 8015ea2:	e7ed      	b.n	8015e80 <ethernet_input+0x70>
 8015ea4:	080227ed 	.word	0x080227ed

08015ea8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8015ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eac:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015eae:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 8015eb2:	460d      	mov	r5, r1
 8015eb4:	4616      	mov	r6, r2
 8015eb6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8015eb8:	f7f8 fabc 	bl	800e434 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8015ebc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ebe:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	f7f9 fb87 	bl	800f5d4 <pbuf_header>
 8015ec6:	b9e0      	cbnz	r0, 8015f02 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8015ec8:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8015eca:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	600b      	str	r3, [r1, #0]
 8015ed2:	88bb      	ldrh	r3, [r7, #4]
 8015ed4:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 8015ed6:	6833      	ldr	r3, [r6, #0]
 8015ed8:	f8c1 3006 	str.w	r3, [r1, #6]
 8015edc:	88b3      	ldrh	r3, [r6, #4]
 8015ede:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015ee0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015ee4:	2b06      	cmp	r3, #6
 8015ee6:	d006      	beq.n	8015ef6 <ethernet_output+0x4e>
 8015ee8:	4b08      	ldr	r3, [pc, #32]	; (8015f0c <ethernet_output+0x64>)
 8015eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015eee:	4908      	ldr	r1, [pc, #32]	; (8015f10 <ethernet_output+0x68>)
 8015ef0:	4808      	ldr	r0, [pc, #32]	; (8015f14 <ethernet_output+0x6c>)
 8015ef2:	f000 fcc9 	bl	8016888 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015ef6:	69a3      	ldr	r3, [r4, #24]
 8015ef8:	4629      	mov	r1, r5
 8015efa:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8015efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8015f00:	4718      	bx	r3
}
 8015f02:	f06f 0001 	mvn.w	r0, #1
 8015f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f0a:	bf00      	nop
 8015f0c:	080227f3 	.word	0x080227f3
 8015f10:	08022828 	.word	0x08022828
 8015f14:	08018495 	.word	0x08018495

08015f18 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015f1a:	2304      	movs	r3, #4
 8015f1c:	9100      	str	r1, [sp, #0]
 8015f1e:	2100      	movs	r1, #0
{
 8015f20:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015f22:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8015f24:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015f28:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015f2a:	f7f3 fe05 	bl	8009b38 <osMessageCreate>
 8015f2e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015f30:	fab0 f080 	clz	r0, r0
 8015f34:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 8015f36:	4240      	negs	r0, r0
 8015f38:	b004      	add	sp, #16
 8015f3a:	bd10      	pop	{r4, pc}

08015f3c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015f3c:	b510      	push	{r4, lr}
 8015f3e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015f40:	6800      	ldr	r0, [r0, #0]
 8015f42:	f7f3 fe6d 	bl	8009c20 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015f46:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 8015f4c:	f7f3 be6f 	b.w	8009c2e <osMessageDelete>

08015f50 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8015f50:	b538      	push	{r3, r4, r5, lr}
 8015f52:	4604      	mov	r4, r0
 8015f54:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8015f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	6820      	ldr	r0, [r4, #0]
 8015f5e:	f7f3 fdfd 	bl	8009b5c <osMessagePut>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d1f7      	bne.n	8015f56 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8015f66:	bd38      	pop	{r3, r4, r5, pc}

08015f68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015f68:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015f6a:	2200      	movs	r2, #0
 8015f6c:	6800      	ldr	r0, [r0, #0]
 8015f6e:	f7f3 fdf5 	bl	8009b5c <osMessagePut>
 8015f72:	3000      	adds	r0, #0
 8015f74:	bf18      	it	ne
 8015f76:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8015f78:	4240      	negs	r0, r0
 8015f7a:	bd08      	pop	{r3, pc}

08015f7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f7e:	b085      	sub	sp, #20
 8015f80:	4606      	mov	r6, r0
 8015f82:	460d      	mov	r5, r1
 8015f84:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015f86:	f7f3 fcf5 	bl	8009974 <osKernelSysTick>
 8015f8a:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015f8c:	b177      	cbz	r7, 8015fac <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015f8e:	463a      	mov	r2, r7
 8015f90:	6831      	ldr	r1, [r6, #0]
 8015f92:	a801      	add	r0, sp, #4
 8015f94:	f7f3 fe0a 	bl	8009bac <osMessageGet>

    if(event.status == osEventMessage)
 8015f98:	9b01      	ldr	r3, [sp, #4]
 8015f9a:	2b10      	cmp	r3, #16
 8015f9c:	d10d      	bne.n	8015fba <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 8015f9e:	9b02      	ldr	r3, [sp, #8]
 8015fa0:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 8015fa2:	f7f3 fce7 	bl	8009974 <osKernelSysTick>
 8015fa6:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015fa8:	b005      	add	sp, #20
 8015faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8015fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015fb0:	6831      	ldr	r1, [r6, #0]
 8015fb2:	a801      	add	r0, sp, #4
 8015fb4:	f7f3 fdfa 	bl	8009bac <osMessageGet>
 8015fb8:	e7f1      	b.n	8015f9e <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 8015fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fbe:	e7f3      	b.n	8015fa8 <sys_arch_mbox_fetch+0x2c>

08015fc0 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015fc2:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	6801      	ldr	r1, [r0, #0]
 8015fc8:	a801      	add	r0, sp, #4
 8015fca:	f7f3 fdef 	bl	8009bac <osMessageGet>

  if(event.status == osEventMessage)
 8015fce:	9b01      	ldr	r3, [sp, #4]
 8015fd0:	2b10      	cmp	r3, #16
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015fd2:	bf09      	itett	eq
 8015fd4:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015fd6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 8015fda:	9b02      	ldreq	r3, [sp, #8]
 8015fdc:	6023      	streq	r3, [r4, #0]
  }
}
 8015fde:	b004      	add	sp, #16
 8015fe0:	bd10      	pop	{r4, pc}

08015fe2 <sys_mbox_valid>:
 8015fe2:	6800      	ldr	r0, [r0, #0]
 8015fe4:	3000      	adds	r0, #0
 8015fe6:	bf18      	it	ne
 8015fe8:	2001      	movne	r0, #1
 8015fea:	4770      	bx	lr

08015fec <sys_mbox_set_invalid>:
 8015fec:	2300      	movs	r3, #0
 8015fee:	6003      	str	r3, [r0, #0]
 8015ff0:	4770      	bx	lr

08015ff2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015ff4:	2400      	movs	r4, #0
{
 8015ff6:	4606      	mov	r6, r0
 8015ff8:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015ffa:	4668      	mov	r0, sp
 8015ffc:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 8015ffe:	e9cd 4400 	strd	r4, r4, [sp]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016002:	f7f3 fd49 	bl	8009a98 <osSemaphoreCreate>
 8016006:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016008:	b130      	cbz	r0, 8016018 <sys_sem_new+0x26>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 801600a:	b945      	cbnz	r5, 801601e <sys_sem_new+0x2c>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801600c:	4629      	mov	r1, r5
 801600e:	f7f3 fd69 	bl	8009ae4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016012:	4628      	mov	r0, r5
}
 8016014:	b002      	add	sp, #8
 8016016:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8016018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801601c:	e7fa      	b.n	8016014 <sys_sem_new+0x22>
  return ERR_OK;
 801601e:	4620      	mov	r0, r4
 8016020:	e7f8      	b.n	8016014 <sys_sem_new+0x22>

08016022 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016022:	b570      	push	{r4, r5, r6, lr}
 8016024:	4605      	mov	r5, r0
 8016026:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016028:	f7f3 fca4 	bl	8009974 <osKernelSysTick>
 801602c:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801602e:	b146      	cbz	r6, 8016042 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016030:	4631      	mov	r1, r6
 8016032:	6828      	ldr	r0, [r5, #0]
 8016034:	f7f3 fd56 	bl	8009ae4 <osSemaphoreWait>
 8016038:	b958      	cbnz	r0, 8016052 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 801603a:	f7f3 fc9b 	bl	8009974 <osKernelSysTick>
 801603e:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016040:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016042:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016046:	6828      	ldr	r0, [r5, #0]
 8016048:	f7f3 fd4c 	bl	8009ae4 <osSemaphoreWait>
 801604c:	2800      	cmp	r0, #0
 801604e:	d1f8      	bne.n	8016042 <sys_arch_sem_wait+0x20>
 8016050:	e7f3      	b.n	801603a <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 8016052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016056:	e7f3      	b.n	8016040 <sys_arch_sem_wait+0x1e>

08016058 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8016058:	6800      	ldr	r0, [r0, #0]
 801605a:	f7f3 bd69 	b.w	8009b30 <osSemaphoreRelease>

0801605e <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801605e:	6800      	ldr	r0, [r0, #0]
 8016060:	f7f3 bd68 	b.w	8009b34 <osSemaphoreDelete>

08016064 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8016064:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8016066:	3000      	adds	r0, #0
 8016068:	bf18      	it	ne
 801606a:	2001      	movne	r0, #1
 801606c:	4770      	bx	lr

0801606e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 801606e:	2300      	movs	r3, #0
 8016070:	6003      	str	r3, [r0, #0]
}
 8016072:	4770      	bx	lr

08016074 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016074:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016076:	4803      	ldr	r0, [pc, #12]	; (8016084 <sys_init+0x10>)
 8016078:	f7f3 fcb3 	bl	80099e2 <osMutexCreate>
 801607c:	4b02      	ldr	r3, [pc, #8]	; (8016088 <sys_init+0x14>)
 801607e:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016080:	bd08      	pop	{r3, pc}
 8016082:	bf00      	nop
 8016084:	08022860 	.word	0x08022860
 8016088:	2000d9d8 	.word	0x2000d9d8

0801608c <sys_mutex_new>:
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801608c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801608e:	b513      	push	{r0, r1, r4, lr}
 8016090:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016092:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8016094:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016098:	f7f3 fca3 	bl	80099e2 <osMutexCreate>
 801609c:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801609e:	fab0 f080 	clz	r0, r0
 80160a2:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80160a4:	4240      	negs	r0, r0
 80160a6:	b002      	add	sp, #8
 80160a8:	bd10      	pop	{r4, pc}

080160aa <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80160aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80160ae:	6800      	ldr	r0, [r0, #0]
 80160b0:	f7f3 bc9e 	b.w	80099f0 <osMutexWait>

080160b4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80160b4:	6800      	ldr	r0, [r0, #0]
 80160b6:	f7f3 bcc1 	b.w	8009a3c <osMutexRelease>

080160ba <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80160ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160bc:	4614      	mov	r4, r2
 80160be:	461d      	mov	r5, r3
 80160c0:	4607      	mov	r7, r0
 80160c2:	460e      	mov	r6, r1
 80160c4:	b089      	sub	sp, #36	; 0x24
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80160c6:	2212      	movs	r2, #18
 80160c8:	2100      	movs	r1, #0
 80160ca:	f10d 000e 	add.w	r0, sp, #14
 80160ce:	f000 fb2d 	bl	801672c <memset>
 80160d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  return osThreadCreate(&os_thread_def, arg);
 80160d4:	4621      	mov	r1, r4
 80160d6:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80160d8:	e9cd 7601 	strd	r7, r6, [sp, #4]
 80160dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80160e0:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 80160e2:	f7f3 fc4e 	bl	8009982 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80160e6:	b009      	add	sp, #36	; 0x24
 80160e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080160ec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80160ec:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80160ee:	4b04      	ldr	r3, [pc, #16]	; (8016100 <sys_arch_protect+0x14>)
 80160f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80160f4:	6818      	ldr	r0, [r3, #0]
 80160f6:	f7f3 fc7b 	bl	80099f0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 80160fa:	2001      	movs	r0, #1
 80160fc:	bd08      	pop	{r3, pc}
 80160fe:	bf00      	nop
 8016100:	2000d9d8 	.word	0x2000d9d8

08016104 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016104:	4b01      	ldr	r3, [pc, #4]	; (801610c <sys_arch_unprotect+0x8>)
 8016106:	6818      	ldr	r0, [r3, #0]
 8016108:	f7f3 bc98 	b.w	8009a3c <osMutexRelease>
 801610c:	2000d9d8 	.word	0x2000d9d8

08016110 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8016110:	2904      	cmp	r1, #4
 8016112:	d00a      	beq.n	801612a <USBH_UserProcess+0x1a>
 8016114:	2905      	cmp	r1, #5
 8016116:	d004      	beq.n	8016122 <USBH_UserProcess+0x12>
 8016118:	2902      	cmp	r1, #2
 801611a:	d105      	bne.n	8016128 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801611c:	4b04      	ldr	r3, [pc, #16]	; (8016130 <USBH_UserProcess+0x20>)
 801611e:	7019      	strb	r1, [r3, #0]
  break;
 8016120:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8016122:	2203      	movs	r2, #3
 8016124:	4b02      	ldr	r3, [pc, #8]	; (8016130 <USBH_UserProcess+0x20>)

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8016126:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8016128:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 801612a:	4b01      	ldr	r3, [pc, #4]	; (8016130 <USBH_UserProcess+0x20>)
 801612c:	2201      	movs	r2, #1
 801612e:	e7fa      	b.n	8016126 <USBH_UserProcess+0x16>
 8016130:	2000510c 	.word	0x2000510c

08016134 <MX_USB_HOST_Init>:
{
 8016134:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8016136:	2201      	movs	r2, #1
 8016138:	490b      	ldr	r1, [pc, #44]	; (8016168 <MX_USB_HOST_Init+0x34>)
 801613a:	480c      	ldr	r0, [pc, #48]	; (801616c <MX_USB_HOST_Init+0x38>)
 801613c:	f7f0 ff5a 	bl	8006ff4 <USBH_Init>
 8016140:	b108      	cbz	r0, 8016146 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8016142:	f7eb f833 	bl	80011ac <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8016146:	490a      	ldr	r1, [pc, #40]	; (8016170 <MX_USB_HOST_Init+0x3c>)
 8016148:	4808      	ldr	r0, [pc, #32]	; (801616c <MX_USB_HOST_Init+0x38>)
 801614a:	f7f0 ff9d 	bl	8007088 <USBH_RegisterClass>
 801614e:	b108      	cbz	r0, 8016154 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8016150:	f7eb f82c 	bl	80011ac <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8016154:	4805      	ldr	r0, [pc, #20]	; (801616c <MX_USB_HOST_Init+0x38>)
 8016156:	f7f1 f819 	bl	800718c <USBH_Start>
 801615a:	b118      	cbz	r0, 8016164 <MX_USB_HOST_Init+0x30>
}
 801615c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8016160:	f7eb b824 	b.w	80011ac <Error_Handler>
}
 8016164:	bd08      	pop	{r3, pc}
 8016166:	bf00      	nop
 8016168:	08016111 	.word	0x08016111
 801616c:	2000d9dc 	.word	0x2000d9dc
 8016170:	20000070 	.word	0x20000070

08016174 <HAL_HCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  if(hcdHandle->Instance==USB_OTG_FS)
 8016174:	6803      	ldr	r3, [r0, #0]
{
 8016176:	b507      	push	{r0, r1, r2, lr}
  if(hcdHandle->Instance==USB_OTG_FS)
 8016178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801617c:	d117      	bne.n	80161ae <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801617e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8016182:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8016186:	695a      	ldr	r2, [r3, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016188:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801618a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801618e:	615a      	str	r2, [r3, #20]
 8016190:	695b      	ldr	r3, [r3, #20]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016192:	2200      	movs	r2, #0
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016198:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801619a:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801619c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801619e:	f7ec f8c5 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80161a2:	2043      	movs	r0, #67	; 0x43
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80161a4:	b003      	add	sp, #12
 80161a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80161aa:	f7ec b8f3 	b.w	8002394 <HAL_NVIC_EnableIRQ>
}
 80161ae:	b003      	add	sp, #12
 80161b0:	f85d fb04 	ldr.w	pc, [sp], #4

080161b4 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80161b4:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161b8:	f7f1 ba3d 	b.w	8007636 <USBH_LL_IncTimer>

080161bc <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80161bc:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161c0:	f7f1 ba55 	b.w	800766e <USBH_LL_Connect>

080161c4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80161c4:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161c8:	f7f1 ba63 	b.w	8007692 <USBH_LL_Disconnect>

080161cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80161cc:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161d0:	f7f1 ba7d 	b.w	80076ce <USBH_LL_NotifyURBChange>

080161d4 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80161d4:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161d8:	f7f1 ba3b 	b.w	8007652 <USBH_LL_PortEnabled>

080161dc <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80161dc:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80161e0:	f7f1 ba41 	b.w	8007666 <USBH_LL_PortDisabled>

080161e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80161e4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80161e6:	f890 33c4 	ldrb.w	r3, [r0, #964]	; 0x3c4
{
 80161ea:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80161ec:	2b01      	cmp	r3, #1
 80161ee:	d11b      	bne.n	8016228 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80161f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.pData = phost;
 80161f4:	480d      	ldr	r0, [pc, #52]	; (801622c <USBH_LL_Init+0x48>)
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80161f6:	f04f 0c02 	mov.w	ip, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80161fa:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80161fc:	2208      	movs	r2, #8
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80161fe:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016202:	2300      	movs	r3, #0
  phost->pData = &hhcd_USB_OTG_FS;
 8016204:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hhcd_USB_OTG_FS.pData = phost;
 8016208:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801620c:	e9c0 c306 	strd	ip, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8016210:	f7ec fede 	bl	8002fd0 <HAL_HCD_Init>
 8016214:	b108      	cbz	r0, 801621a <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8016216:	f7ea ffc9 	bl	80011ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801621a:	4804      	ldr	r0, [pc, #16]	; (801622c <USBH_LL_Init+0x48>)
 801621c:	f7ed fad9 	bl	80037d2 <HAL_HCD_GetCurrentFrame>
 8016220:	4601      	mov	r1, r0
 8016222:	4620      	mov	r0, r4
 8016224:	f7f1 fa04 	bl	8007630 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8016228:	2000      	movs	r0, #0
 801622a:	bd10      	pop	{r4, pc}
 801622c:	2000ddb8 	.word	0x2000ddb8

08016230 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8016230:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8016232:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8016236:	f7ed fa97 	bl	8003768 <HAL_HCD_Start>
 801623a:	2803      	cmp	r0, #3
 801623c:	bf96      	itet	ls
 801623e:	4b02      	ldrls	r3, [pc, #8]	; (8016248 <USBH_LL_Start+0x18>)
 8016240:	2002      	movhi	r0, #2
 8016242:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016244:	bd08      	pop	{r3, pc}
 8016246:	bf00      	nop
 8016248:	0802286b 	.word	0x0802286b

0801624c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801624c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 801624e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8016252:	f7ed fa9e 	bl	8003792 <HAL_HCD_Stop>
 8016256:	2803      	cmp	r0, #3
 8016258:	bf96      	itet	ls
 801625a:	4b02      	ldrls	r3, [pc, #8]	; (8016264 <USBH_LL_Stop+0x18>)
 801625c:	2002      	movhi	r0, #2
 801625e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016260:	bd08      	pop	{r3, pc}
 8016262:	bf00      	nop
 8016264:	0802286b 	.word	0x0802286b

08016268 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8016268:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801626a:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 801626e:	f7ed fab3 	bl	80037d8 <HAL_HCD_GetCurrentSpeed>
 8016272:	2802      	cmp	r0, #2
 8016274:	bf96      	itet	ls
 8016276:	4b02      	ldrls	r3, [pc, #8]	; (8016280 <USBH_LL_GetSpeed+0x18>)
 8016278:	2001      	movhi	r0, #1
 801627a:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 801627c:	bd08      	pop	{r3, pc}
 801627e:	bf00      	nop
 8016280:	08022868 	.word	0x08022868

08016284 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8016284:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8016286:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 801628a:	f7ed fa94 	bl	80037b6 <HAL_HCD_ResetPort>
 801628e:	2803      	cmp	r0, #3
 8016290:	bf96      	itet	ls
 8016292:	4b02      	ldrls	r3, [pc, #8]	; (801629c <USBH_LL_ResetPort+0x18>)
 8016294:	2002      	movhi	r0, #2
 8016296:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 8016298:	bd08      	pop	{r3, pc}
 801629a:	bf00      	nop
 801629c:	0802286b 	.word	0x0802286b

080162a0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80162a0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80162a4:	f7ed ba90 	b.w	80037c8 <HAL_HCD_HC_GetXferCount>

080162a8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80162a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80162aa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80162ae:	9402      	str	r4, [sp, #8]
 80162b0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80162b4:	9401      	str	r4, [sp, #4]
 80162b6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80162ba:	9400      	str	r4, [sp, #0]
 80162bc:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80162c0:	f7ec fe3d 	bl	8002f3e <HAL_HCD_HC_Init>
 80162c4:	2803      	cmp	r0, #3
 80162c6:	bf8e      	itee	hi
 80162c8:	2002      	movhi	r0, #2
 80162ca:	4b02      	ldrls	r3, [pc, #8]	; (80162d4 <USBH_LL_OpenPipe+0x2c>)
 80162cc:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 80162ce:	b004      	add	sp, #16
 80162d0:	bd10      	pop	{r4, pc}
 80162d2:	bf00      	nop
 80162d4:	0802286b 	.word	0x0802286b

080162d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80162d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80162da:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80162de:	f7ec fe65 	bl	8002fac <HAL_HCD_HC_Halt>
 80162e2:	2803      	cmp	r0, #3
 80162e4:	bf96      	itet	ls
 80162e6:	4b02      	ldrls	r3, [pc, #8]	; (80162f0 <USBH_LL_ClosePipe+0x18>)
 80162e8:	2002      	movhi	r0, #2
 80162ea:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 80162ec:	bd08      	pop	{r3, pc}
 80162ee:	bf00      	nop
 80162f0:	0802286b 	.word	0x0802286b

080162f4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80162f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80162f6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80162fa:	9403      	str	r4, [sp, #12]
 80162fc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8016300:	9402      	str	r4, [sp, #8]
 8016302:	9c07      	ldr	r4, [sp, #28]
 8016304:	9401      	str	r4, [sp, #4]
 8016306:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801630a:	9400      	str	r4, [sp, #0]
 801630c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8016310:	f7ec fea8 	bl	8003064 <HAL_HCD_HC_SubmitRequest>
 8016314:	2803      	cmp	r0, #3
 8016316:	bf8e      	itee	hi
 8016318:	2002      	movhi	r0, #2
 801631a:	4b02      	ldrls	r3, [pc, #8]	; (8016324 <USBH_LL_SubmitURB+0x30>)
 801631c:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);

  return usb_status;
}
 801631e:	b004      	add	sp, #16
 8016320:	bd10      	pop	{r4, pc}
 8016322:	bf00      	nop
 8016324:	0802286b 	.word	0x0802286b

08016328 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8016328:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 801632c:	f7ed ba46 	b.w	80037bc <HAL_HCD_HC_GetURBState>

08016330 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8016330:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8016332:	f890 33c4 	ldrb.w	r3, [r0, #964]	; 0x3c4
 8016336:	2b01      	cmp	r3, #1
 8016338:	d102      	bne.n	8016340 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 801633a:	4608      	mov	r0, r1
 801633c:	f000 f824 	bl	8016388 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016340:	20c8      	movs	r0, #200	; 0xc8
 8016342:	f7eb ffcf 	bl	80022e4 <HAL_Delay>
  return USBH_OK;
}
 8016346:	2000      	movs	r0, #0
 8016348:	bd08      	pop	{r3, pc}

0801634a <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 801634a:	232c      	movs	r3, #44	; 0x2c
  pHandle = phost->pData;
 801634c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
  if(pHandle->hc[pipe].ep_is_in)
 8016350:	fb03 0101 	mla	r1, r3, r1, r0
 8016354:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8016358:	b11b      	cbz	r3, 8016362 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801635a:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 801635e:	2000      	movs	r0, #0
 8016360:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8016362:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 8016366:	e7fa      	b.n	801635e <USBH_LL_SetToggle+0x14>

08016368 <USBH_LL_GetToggle>:
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8016368:	232c      	movs	r3, #44	; 0x2c
  pHandle = phost->pData;
 801636a:	f8d0 23c8 	ldr.w	r2, [r0, #968]	; 0x3c8
  if(pHandle->hc[pipe].ep_is_in)
 801636e:	fb03 2101 	mla	r1, r3, r1, r2
 8016372:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8016376:	b113      	cbz	r3, 801637e <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8016378:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 801637c:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 801637e:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle;
}
 8016382:	4770      	bx	lr

08016384 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8016384:	f7eb bfae 	b.w	80022e4 <HAL_Delay>

08016388 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8016388:	fab0 f280 	clz	r2, r0
 801638c:	2101      	movs	r1, #1
 801638e:	0952      	lsrs	r2, r2, #5
 8016390:	4801      	ldr	r0, [pc, #4]	; (8016398 <MX_DriverVbusFS+0x10>)
 8016392:	f7ec bdcf 	b.w	8002f34 <HAL_GPIO_WritePin>
 8016396:	bf00      	nop
 8016398:	40011000 	.word	0x40011000

0801639c <atoi>:
 801639c:	220a      	movs	r2, #10
 801639e:	2100      	movs	r1, #0
 80163a0:	f000 bd32 	b.w	8016e08 <strtol>

080163a4 <std>:
 80163a4:	2300      	movs	r3, #0
 80163a6:	b510      	push	{r4, lr}
 80163a8:	4604      	mov	r4, r0
 80163aa:	e9c0 3300 	strd	r3, r3, [r0]
 80163ae:	6083      	str	r3, [r0, #8]
 80163b0:	8181      	strh	r1, [r0, #12]
 80163b2:	6643      	str	r3, [r0, #100]	; 0x64
 80163b4:	81c2      	strh	r2, [r0, #14]
 80163b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163ba:	6183      	str	r3, [r0, #24]
 80163bc:	4619      	mov	r1, r3
 80163be:	2208      	movs	r2, #8
 80163c0:	305c      	adds	r0, #92	; 0x5c
 80163c2:	f000 f9b3 	bl	801672c <memset>
 80163c6:	4b05      	ldr	r3, [pc, #20]	; (80163dc <std+0x38>)
 80163c8:	6224      	str	r4, [r4, #32]
 80163ca:	6263      	str	r3, [r4, #36]	; 0x24
 80163cc:	4b04      	ldr	r3, [pc, #16]	; (80163e0 <std+0x3c>)
 80163ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80163d0:	4b04      	ldr	r3, [pc, #16]	; (80163e4 <std+0x40>)
 80163d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163d4:	4b04      	ldr	r3, [pc, #16]	; (80163e8 <std+0x44>)
 80163d6:	6323      	str	r3, [r4, #48]	; 0x30
 80163d8:	bd10      	pop	{r4, pc}
 80163da:	bf00      	nop
 80163dc:	08016b6d 	.word	0x08016b6d
 80163e0:	08016b8f 	.word	0x08016b8f
 80163e4:	08016bc7 	.word	0x08016bc7
 80163e8:	08016beb 	.word	0x08016beb

080163ec <_cleanup_r>:
 80163ec:	4901      	ldr	r1, [pc, #4]	; (80163f4 <_cleanup_r+0x8>)
 80163ee:	f000 b885 	b.w	80164fc <_fwalk_reent>
 80163f2:	bf00      	nop
 80163f4:	08017105 	.word	0x08017105

080163f8 <__sfmoreglue>:
 80163f8:	b570      	push	{r4, r5, r6, lr}
 80163fa:	2568      	movs	r5, #104	; 0x68
 80163fc:	1e4a      	subs	r2, r1, #1
 80163fe:	4355      	muls	r5, r2
 8016400:	460e      	mov	r6, r1
 8016402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016406:	f000 f9e5 	bl	80167d4 <_malloc_r>
 801640a:	4604      	mov	r4, r0
 801640c:	b140      	cbz	r0, 8016420 <__sfmoreglue+0x28>
 801640e:	2100      	movs	r1, #0
 8016410:	e9c0 1600 	strd	r1, r6, [r0]
 8016414:	300c      	adds	r0, #12
 8016416:	60a0      	str	r0, [r4, #8]
 8016418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801641c:	f000 f986 	bl	801672c <memset>
 8016420:	4620      	mov	r0, r4
 8016422:	bd70      	pop	{r4, r5, r6, pc}

08016424 <__sinit>:
 8016424:	6983      	ldr	r3, [r0, #24]
 8016426:	b510      	push	{r4, lr}
 8016428:	4604      	mov	r4, r0
 801642a:	bb33      	cbnz	r3, 801647a <__sinit+0x56>
 801642c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016430:	6503      	str	r3, [r0, #80]	; 0x50
 8016432:	4b12      	ldr	r3, [pc, #72]	; (801647c <__sinit+0x58>)
 8016434:	4a12      	ldr	r2, [pc, #72]	; (8016480 <__sinit+0x5c>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	6282      	str	r2, [r0, #40]	; 0x28
 801643a:	4298      	cmp	r0, r3
 801643c:	bf04      	itt	eq
 801643e:	2301      	moveq	r3, #1
 8016440:	6183      	streq	r3, [r0, #24]
 8016442:	f000 f81f 	bl	8016484 <__sfp>
 8016446:	6060      	str	r0, [r4, #4]
 8016448:	4620      	mov	r0, r4
 801644a:	f000 f81b 	bl	8016484 <__sfp>
 801644e:	60a0      	str	r0, [r4, #8]
 8016450:	4620      	mov	r0, r4
 8016452:	f000 f817 	bl	8016484 <__sfp>
 8016456:	2200      	movs	r2, #0
 8016458:	60e0      	str	r0, [r4, #12]
 801645a:	2104      	movs	r1, #4
 801645c:	6860      	ldr	r0, [r4, #4]
 801645e:	f7ff ffa1 	bl	80163a4 <std>
 8016462:	2201      	movs	r2, #1
 8016464:	2109      	movs	r1, #9
 8016466:	68a0      	ldr	r0, [r4, #8]
 8016468:	f7ff ff9c 	bl	80163a4 <std>
 801646c:	2202      	movs	r2, #2
 801646e:	2112      	movs	r1, #18
 8016470:	68e0      	ldr	r0, [r4, #12]
 8016472:	f7ff ff97 	bl	80163a4 <std>
 8016476:	2301      	movs	r3, #1
 8016478:	61a3      	str	r3, [r4, #24]
 801647a:	bd10      	pop	{r4, pc}
 801647c:	080228d0 	.word	0x080228d0
 8016480:	080163ed 	.word	0x080163ed

08016484 <__sfp>:
 8016484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016486:	4b1b      	ldr	r3, [pc, #108]	; (80164f4 <__sfp+0x70>)
 8016488:	4607      	mov	r7, r0
 801648a:	681e      	ldr	r6, [r3, #0]
 801648c:	69b3      	ldr	r3, [r6, #24]
 801648e:	b913      	cbnz	r3, 8016496 <__sfp+0x12>
 8016490:	4630      	mov	r0, r6
 8016492:	f7ff ffc7 	bl	8016424 <__sinit>
 8016496:	3648      	adds	r6, #72	; 0x48
 8016498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801649c:	3b01      	subs	r3, #1
 801649e:	d503      	bpl.n	80164a8 <__sfp+0x24>
 80164a0:	6833      	ldr	r3, [r6, #0]
 80164a2:	b133      	cbz	r3, 80164b2 <__sfp+0x2e>
 80164a4:	6836      	ldr	r6, [r6, #0]
 80164a6:	e7f7      	b.n	8016498 <__sfp+0x14>
 80164a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164ac:	b16d      	cbz	r5, 80164ca <__sfp+0x46>
 80164ae:	3468      	adds	r4, #104	; 0x68
 80164b0:	e7f4      	b.n	801649c <__sfp+0x18>
 80164b2:	2104      	movs	r1, #4
 80164b4:	4638      	mov	r0, r7
 80164b6:	f7ff ff9f 	bl	80163f8 <__sfmoreglue>
 80164ba:	6030      	str	r0, [r6, #0]
 80164bc:	2800      	cmp	r0, #0
 80164be:	d1f1      	bne.n	80164a4 <__sfp+0x20>
 80164c0:	230c      	movs	r3, #12
 80164c2:	4604      	mov	r4, r0
 80164c4:	603b      	str	r3, [r7, #0]
 80164c6:	4620      	mov	r0, r4
 80164c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ca:	4b0b      	ldr	r3, [pc, #44]	; (80164f8 <__sfp+0x74>)
 80164cc:	6665      	str	r5, [r4, #100]	; 0x64
 80164ce:	e9c4 5500 	strd	r5, r5, [r4]
 80164d2:	60a5      	str	r5, [r4, #8]
 80164d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80164d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80164dc:	2208      	movs	r2, #8
 80164de:	4629      	mov	r1, r5
 80164e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80164e4:	f000 f922 	bl	801672c <memset>
 80164e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80164ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80164f0:	e7e9      	b.n	80164c6 <__sfp+0x42>
 80164f2:	bf00      	nop
 80164f4:	080228d0 	.word	0x080228d0
 80164f8:	ffff0001 	.word	0xffff0001

080164fc <_fwalk_reent>:
 80164fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016500:	4680      	mov	r8, r0
 8016502:	4689      	mov	r9, r1
 8016504:	2600      	movs	r6, #0
 8016506:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801650a:	b914      	cbnz	r4, 8016512 <_fwalk_reent+0x16>
 801650c:	4630      	mov	r0, r6
 801650e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016512:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016516:	3f01      	subs	r7, #1
 8016518:	d501      	bpl.n	801651e <_fwalk_reent+0x22>
 801651a:	6824      	ldr	r4, [r4, #0]
 801651c:	e7f5      	b.n	801650a <_fwalk_reent+0xe>
 801651e:	89ab      	ldrh	r3, [r5, #12]
 8016520:	2b01      	cmp	r3, #1
 8016522:	d907      	bls.n	8016534 <_fwalk_reent+0x38>
 8016524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016528:	3301      	adds	r3, #1
 801652a:	d003      	beq.n	8016534 <_fwalk_reent+0x38>
 801652c:	4629      	mov	r1, r5
 801652e:	4640      	mov	r0, r8
 8016530:	47c8      	blx	r9
 8016532:	4306      	orrs	r6, r0
 8016534:	3568      	adds	r5, #104	; 0x68
 8016536:	e7ee      	b.n	8016516 <_fwalk_reent+0x1a>

08016538 <gmtime_r>:
 8016538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801653c:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016540:	460c      	mov	r4, r1
 8016542:	4a4f      	ldr	r2, [pc, #316]	; (8016680 <gmtime_r+0x148>)
 8016544:	2300      	movs	r3, #0
 8016546:	4640      	mov	r0, r8
 8016548:	4649      	mov	r1, r9
 801654a:	f7e9 fe83 	bl	8000254 <__aeabi_ldivmod>
 801654e:	4a4c      	ldr	r2, [pc, #304]	; (8016680 <gmtime_r+0x148>)
 8016550:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8016554:	2300      	movs	r3, #0
 8016556:	4640      	mov	r0, r8
 8016558:	4649      	mov	r1, r9
 801655a:	f7e9 fe7b 	bl	8000254 <__aeabi_ldivmod>
 801655e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8016562:	2a00      	cmp	r2, #0
 8016564:	bfbc      	itt	lt
 8016566:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801656a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801656e:	fb92 f3f1 	sdiv	r3, r2, r1
 8016572:	fb01 2213 	mls	r2, r1, r3, r2
 8016576:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801657a:	60a3      	str	r3, [r4, #8]
 801657c:	fb92 f3f1 	sdiv	r3, r2, r1
 8016580:	fb01 2213 	mls	r2, r1, r3, r2
 8016584:	6022      	str	r2, [r4, #0]
 8016586:	f04f 0207 	mov.w	r2, #7
 801658a:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 801658e:	bfb8      	it	lt
 8016590:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8016594:	6063      	str	r3, [r4, #4]
 8016596:	1ceb      	adds	r3, r5, #3
 8016598:	fb93 f2f2 	sdiv	r2, r3, r2
 801659c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80165a0:	1a9b      	subs	r3, r3, r2
 80165a2:	bf48      	it	mi
 80165a4:	3307      	addmi	r3, #7
 80165a6:	2d00      	cmp	r5, #0
 80165a8:	4836      	ldr	r0, [pc, #216]	; (8016684 <gmtime_r+0x14c>)
 80165aa:	61a3      	str	r3, [r4, #24]
 80165ac:	bfbd      	ittte	lt
 80165ae:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 80165b2:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80165b6:	fb93 f0f0 	sdivlt	r0, r3, r0
 80165ba:	fb95 f0f0 	sdivge	r0, r5, r0
 80165be:	f648 61ac 	movw	r1, #36524	; 0x8eac
 80165c2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80165c6:	4b30      	ldr	r3, [pc, #192]	; (8016688 <gmtime_r+0x150>)
 80165c8:	f240 166d 	movw	r6, #365	; 0x16d
 80165cc:	fb03 5300 	mla	r3, r3, r0, r5
 80165d0:	fbb3 f1f1 	udiv	r1, r3, r1
 80165d4:	fbb3 f2f7 	udiv	r2, r3, r7
 80165d8:	4419      	add	r1, r3
 80165da:	1a89      	subs	r1, r1, r2
 80165dc:	4a2b      	ldr	r2, [pc, #172]	; (801668c <gmtime_r+0x154>)
 80165de:	fbb3 f2f2 	udiv	r2, r3, r2
 80165e2:	1a8a      	subs	r2, r1, r2
 80165e4:	f648 6194 	movw	r1, #36500	; 0x8e94
 80165e8:	fbb2 f1f1 	udiv	r1, r2, r1
 80165ec:	fbb2 f5f6 	udiv	r5, r2, r6
 80165f0:	fbb2 f2f7 	udiv	r2, r2, r7
 80165f4:	440b      	add	r3, r1
 80165f6:	2199      	movs	r1, #153	; 0x99
 80165f8:	1a9a      	subs	r2, r3, r2
 80165fa:	fb06 2315 	mls	r3, r6, r5, r2
 80165fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016602:	3202      	adds	r2, #2
 8016604:	fbb2 f2f1 	udiv	r2, r2, r1
 8016608:	2705      	movs	r7, #5
 801660a:	4351      	muls	r1, r2
 801660c:	3102      	adds	r1, #2
 801660e:	fbb1 f1f7 	udiv	r1, r1, r7
 8016612:	2a0a      	cmp	r2, #10
 8016614:	f103 0601 	add.w	r6, r3, #1
 8016618:	eba6 0101 	sub.w	r1, r6, r1
 801661c:	bf34      	ite	cc
 801661e:	2602      	movcc	r6, #2
 8016620:	f06f 0609 	mvncs.w	r6, #9
 8016624:	4416      	add	r6, r2
 8016626:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801662a:	fb02 5000 	mla	r0, r2, r0, r5
 801662e:	2e01      	cmp	r6, #1
 8016630:	bf98      	it	ls
 8016632:	3001      	addls	r0, #1
 8016634:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8016638:	d30c      	bcc.n	8016654 <gmtime_r+0x11c>
 801663a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801663e:	61e3      	str	r3, [r4, #28]
 8016640:	2300      	movs	r3, #0
 8016642:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8016646:	e9c4 6004 	strd	r6, r0, [r4, #16]
 801664a:	60e1      	str	r1, [r4, #12]
 801664c:	6223      	str	r3, [r4, #32]
 801664e:	4620      	mov	r0, r4
 8016650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016654:	07aa      	lsls	r2, r5, #30
 8016656:	d105      	bne.n	8016664 <gmtime_r+0x12c>
 8016658:	2764      	movs	r7, #100	; 0x64
 801665a:	fbb5 f2f7 	udiv	r2, r5, r7
 801665e:	fb07 5212 	mls	r2, r7, r2, r5
 8016662:	b95a      	cbnz	r2, 801667c <gmtime_r+0x144>
 8016664:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8016668:	fbb5 f2f7 	udiv	r2, r5, r7
 801666c:	fb07 5212 	mls	r2, r7, r2, r5
 8016670:	fab2 f282 	clz	r2, r2
 8016674:	0952      	lsrs	r2, r2, #5
 8016676:	333b      	adds	r3, #59	; 0x3b
 8016678:	4413      	add	r3, r2
 801667a:	e7e0      	b.n	801663e <gmtime_r+0x106>
 801667c:	2201      	movs	r2, #1
 801667e:	e7fa      	b.n	8016676 <gmtime_r+0x13e>
 8016680:	00015180 	.word	0x00015180
 8016684:	00023ab1 	.word	0x00023ab1
 8016688:	fffdc54f 	.word	0xfffdc54f
 801668c:	00023ab0 	.word	0x00023ab0

08016690 <__libc_init_array>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	2500      	movs	r5, #0
 8016694:	4e0c      	ldr	r6, [pc, #48]	; (80166c8 <__libc_init_array+0x38>)
 8016696:	4c0d      	ldr	r4, [pc, #52]	; (80166cc <__libc_init_array+0x3c>)
 8016698:	1ba4      	subs	r4, r4, r6
 801669a:	10a4      	asrs	r4, r4, #2
 801669c:	42a5      	cmp	r5, r4
 801669e:	d109      	bne.n	80166b4 <__libc_init_array+0x24>
 80166a0:	f001 fadc 	bl	8017c5c <_init>
 80166a4:	2500      	movs	r5, #0
 80166a6:	4e0a      	ldr	r6, [pc, #40]	; (80166d0 <__libc_init_array+0x40>)
 80166a8:	4c0a      	ldr	r4, [pc, #40]	; (80166d4 <__libc_init_array+0x44>)
 80166aa:	1ba4      	subs	r4, r4, r6
 80166ac:	10a4      	asrs	r4, r4, #2
 80166ae:	42a5      	cmp	r5, r4
 80166b0:	d105      	bne.n	80166be <__libc_init_array+0x2e>
 80166b2:	bd70      	pop	{r4, r5, r6, pc}
 80166b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80166b8:	4798      	blx	r3
 80166ba:	3501      	adds	r5, #1
 80166bc:	e7ee      	b.n	801669c <__libc_init_array+0xc>
 80166be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80166c2:	4798      	blx	r3
 80166c4:	3501      	adds	r5, #1
 80166c6:	e7f2      	b.n	80166ae <__libc_init_array+0x1e>
 80166c8:	08022a18 	.word	0x08022a18
 80166cc:	08022a18 	.word	0x08022a18
 80166d0:	08022a18 	.word	0x08022a18
 80166d4:	08022a1c 	.word	0x08022a1c

080166d8 <malloc>:
 80166d8:	4b02      	ldr	r3, [pc, #8]	; (80166e4 <malloc+0xc>)
 80166da:	4601      	mov	r1, r0
 80166dc:	6818      	ldr	r0, [r3, #0]
 80166de:	f000 b879 	b.w	80167d4 <_malloc_r>
 80166e2:	bf00      	nop
 80166e4:	2000009c 	.word	0x2000009c

080166e8 <free>:
 80166e8:	4b02      	ldr	r3, [pc, #8]	; (80166f4 <free+0xc>)
 80166ea:	4601      	mov	r1, r0
 80166ec:	6818      	ldr	r0, [r3, #0]
 80166ee:	f000 b825 	b.w	801673c <_free_r>
 80166f2:	bf00      	nop
 80166f4:	2000009c 	.word	0x2000009c

080166f8 <memcmp>:
 80166f8:	b530      	push	{r4, r5, lr}
 80166fa:	2400      	movs	r4, #0
 80166fc:	42a2      	cmp	r2, r4
 80166fe:	d101      	bne.n	8016704 <memcmp+0xc>
 8016700:	2000      	movs	r0, #0
 8016702:	e007      	b.n	8016714 <memcmp+0x1c>
 8016704:	5d03      	ldrb	r3, [r0, r4]
 8016706:	3401      	adds	r4, #1
 8016708:	190d      	adds	r5, r1, r4
 801670a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801670e:	42ab      	cmp	r3, r5
 8016710:	d0f4      	beq.n	80166fc <memcmp+0x4>
 8016712:	1b58      	subs	r0, r3, r5
 8016714:	bd30      	pop	{r4, r5, pc}

08016716 <memcpy>:
 8016716:	b510      	push	{r4, lr}
 8016718:	1e43      	subs	r3, r0, #1
 801671a:	440a      	add	r2, r1
 801671c:	4291      	cmp	r1, r2
 801671e:	d100      	bne.n	8016722 <memcpy+0xc>
 8016720:	bd10      	pop	{r4, pc}
 8016722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016726:	f803 4f01 	strb.w	r4, [r3, #1]!
 801672a:	e7f7      	b.n	801671c <memcpy+0x6>

0801672c <memset>:
 801672c:	4603      	mov	r3, r0
 801672e:	4402      	add	r2, r0
 8016730:	4293      	cmp	r3, r2
 8016732:	d100      	bne.n	8016736 <memset+0xa>
 8016734:	4770      	bx	lr
 8016736:	f803 1b01 	strb.w	r1, [r3], #1
 801673a:	e7f9      	b.n	8016730 <memset+0x4>

0801673c <_free_r>:
 801673c:	b538      	push	{r3, r4, r5, lr}
 801673e:	4605      	mov	r5, r0
 8016740:	2900      	cmp	r1, #0
 8016742:	d043      	beq.n	80167cc <_free_r+0x90>
 8016744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016748:	1f0c      	subs	r4, r1, #4
 801674a:	2b00      	cmp	r3, #0
 801674c:	bfb8      	it	lt
 801674e:	18e4      	addlt	r4, r4, r3
 8016750:	f000 fd9c 	bl	801728c <__malloc_lock>
 8016754:	4a1e      	ldr	r2, [pc, #120]	; (80167d0 <_free_r+0x94>)
 8016756:	6813      	ldr	r3, [r2, #0]
 8016758:	4610      	mov	r0, r2
 801675a:	b933      	cbnz	r3, 801676a <_free_r+0x2e>
 801675c:	6063      	str	r3, [r4, #4]
 801675e:	6014      	str	r4, [r2, #0]
 8016760:	4628      	mov	r0, r5
 8016762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016766:	f000 bd92 	b.w	801728e <__malloc_unlock>
 801676a:	42a3      	cmp	r3, r4
 801676c:	d90b      	bls.n	8016786 <_free_r+0x4a>
 801676e:	6821      	ldr	r1, [r4, #0]
 8016770:	1862      	adds	r2, r4, r1
 8016772:	4293      	cmp	r3, r2
 8016774:	bf01      	itttt	eq
 8016776:	681a      	ldreq	r2, [r3, #0]
 8016778:	685b      	ldreq	r3, [r3, #4]
 801677a:	1852      	addeq	r2, r2, r1
 801677c:	6022      	streq	r2, [r4, #0]
 801677e:	6063      	str	r3, [r4, #4]
 8016780:	6004      	str	r4, [r0, #0]
 8016782:	e7ed      	b.n	8016760 <_free_r+0x24>
 8016784:	4613      	mov	r3, r2
 8016786:	685a      	ldr	r2, [r3, #4]
 8016788:	b10a      	cbz	r2, 801678e <_free_r+0x52>
 801678a:	42a2      	cmp	r2, r4
 801678c:	d9fa      	bls.n	8016784 <_free_r+0x48>
 801678e:	6819      	ldr	r1, [r3, #0]
 8016790:	1858      	adds	r0, r3, r1
 8016792:	42a0      	cmp	r0, r4
 8016794:	d10b      	bne.n	80167ae <_free_r+0x72>
 8016796:	6820      	ldr	r0, [r4, #0]
 8016798:	4401      	add	r1, r0
 801679a:	1858      	adds	r0, r3, r1
 801679c:	4282      	cmp	r2, r0
 801679e:	6019      	str	r1, [r3, #0]
 80167a0:	d1de      	bne.n	8016760 <_free_r+0x24>
 80167a2:	6810      	ldr	r0, [r2, #0]
 80167a4:	6852      	ldr	r2, [r2, #4]
 80167a6:	4401      	add	r1, r0
 80167a8:	6019      	str	r1, [r3, #0]
 80167aa:	605a      	str	r2, [r3, #4]
 80167ac:	e7d8      	b.n	8016760 <_free_r+0x24>
 80167ae:	d902      	bls.n	80167b6 <_free_r+0x7a>
 80167b0:	230c      	movs	r3, #12
 80167b2:	602b      	str	r3, [r5, #0]
 80167b4:	e7d4      	b.n	8016760 <_free_r+0x24>
 80167b6:	6820      	ldr	r0, [r4, #0]
 80167b8:	1821      	adds	r1, r4, r0
 80167ba:	428a      	cmp	r2, r1
 80167bc:	bf01      	itttt	eq
 80167be:	6811      	ldreq	r1, [r2, #0]
 80167c0:	6852      	ldreq	r2, [r2, #4]
 80167c2:	1809      	addeq	r1, r1, r0
 80167c4:	6021      	streq	r1, [r4, #0]
 80167c6:	6062      	str	r2, [r4, #4]
 80167c8:	605c      	str	r4, [r3, #4]
 80167ca:	e7c9      	b.n	8016760 <_free_r+0x24>
 80167cc:	bd38      	pop	{r3, r4, r5, pc}
 80167ce:	bf00      	nop
 80167d0:	20005110 	.word	0x20005110

080167d4 <_malloc_r>:
 80167d4:	b570      	push	{r4, r5, r6, lr}
 80167d6:	1ccd      	adds	r5, r1, #3
 80167d8:	f025 0503 	bic.w	r5, r5, #3
 80167dc:	3508      	adds	r5, #8
 80167de:	2d0c      	cmp	r5, #12
 80167e0:	bf38      	it	cc
 80167e2:	250c      	movcc	r5, #12
 80167e4:	2d00      	cmp	r5, #0
 80167e6:	4606      	mov	r6, r0
 80167e8:	db01      	blt.n	80167ee <_malloc_r+0x1a>
 80167ea:	42a9      	cmp	r1, r5
 80167ec:	d903      	bls.n	80167f6 <_malloc_r+0x22>
 80167ee:	230c      	movs	r3, #12
 80167f0:	6033      	str	r3, [r6, #0]
 80167f2:	2000      	movs	r0, #0
 80167f4:	bd70      	pop	{r4, r5, r6, pc}
 80167f6:	f000 fd49 	bl	801728c <__malloc_lock>
 80167fa:	4a21      	ldr	r2, [pc, #132]	; (8016880 <_malloc_r+0xac>)
 80167fc:	6814      	ldr	r4, [r2, #0]
 80167fe:	4621      	mov	r1, r4
 8016800:	b991      	cbnz	r1, 8016828 <_malloc_r+0x54>
 8016802:	4c20      	ldr	r4, [pc, #128]	; (8016884 <_malloc_r+0xb0>)
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	b91b      	cbnz	r3, 8016810 <_malloc_r+0x3c>
 8016808:	4630      	mov	r0, r6
 801680a:	f000 f96b 	bl	8016ae4 <_sbrk_r>
 801680e:	6020      	str	r0, [r4, #0]
 8016810:	4629      	mov	r1, r5
 8016812:	4630      	mov	r0, r6
 8016814:	f000 f966 	bl	8016ae4 <_sbrk_r>
 8016818:	1c43      	adds	r3, r0, #1
 801681a:	d124      	bne.n	8016866 <_malloc_r+0x92>
 801681c:	230c      	movs	r3, #12
 801681e:	4630      	mov	r0, r6
 8016820:	6033      	str	r3, [r6, #0]
 8016822:	f000 fd34 	bl	801728e <__malloc_unlock>
 8016826:	e7e4      	b.n	80167f2 <_malloc_r+0x1e>
 8016828:	680b      	ldr	r3, [r1, #0]
 801682a:	1b5b      	subs	r3, r3, r5
 801682c:	d418      	bmi.n	8016860 <_malloc_r+0x8c>
 801682e:	2b0b      	cmp	r3, #11
 8016830:	d90f      	bls.n	8016852 <_malloc_r+0x7e>
 8016832:	600b      	str	r3, [r1, #0]
 8016834:	18cc      	adds	r4, r1, r3
 8016836:	50cd      	str	r5, [r1, r3]
 8016838:	4630      	mov	r0, r6
 801683a:	f000 fd28 	bl	801728e <__malloc_unlock>
 801683e:	f104 000b 	add.w	r0, r4, #11
 8016842:	1d23      	adds	r3, r4, #4
 8016844:	f020 0007 	bic.w	r0, r0, #7
 8016848:	1ac3      	subs	r3, r0, r3
 801684a:	d0d3      	beq.n	80167f4 <_malloc_r+0x20>
 801684c:	425a      	negs	r2, r3
 801684e:	50e2      	str	r2, [r4, r3]
 8016850:	e7d0      	b.n	80167f4 <_malloc_r+0x20>
 8016852:	684b      	ldr	r3, [r1, #4]
 8016854:	428c      	cmp	r4, r1
 8016856:	bf16      	itet	ne
 8016858:	6063      	strne	r3, [r4, #4]
 801685a:	6013      	streq	r3, [r2, #0]
 801685c:	460c      	movne	r4, r1
 801685e:	e7eb      	b.n	8016838 <_malloc_r+0x64>
 8016860:	460c      	mov	r4, r1
 8016862:	6849      	ldr	r1, [r1, #4]
 8016864:	e7cc      	b.n	8016800 <_malloc_r+0x2c>
 8016866:	1cc4      	adds	r4, r0, #3
 8016868:	f024 0403 	bic.w	r4, r4, #3
 801686c:	42a0      	cmp	r0, r4
 801686e:	d005      	beq.n	801687c <_malloc_r+0xa8>
 8016870:	1a21      	subs	r1, r4, r0
 8016872:	4630      	mov	r0, r6
 8016874:	f000 f936 	bl	8016ae4 <_sbrk_r>
 8016878:	3001      	adds	r0, #1
 801687a:	d0cf      	beq.n	801681c <_malloc_r+0x48>
 801687c:	6025      	str	r5, [r4, #0]
 801687e:	e7db      	b.n	8016838 <_malloc_r+0x64>
 8016880:	20005110 	.word	0x20005110
 8016884:	20005114 	.word	0x20005114

08016888 <iprintf>:
 8016888:	b40f      	push	{r0, r1, r2, r3}
 801688a:	4b0a      	ldr	r3, [pc, #40]	; (80168b4 <iprintf+0x2c>)
 801688c:	b513      	push	{r0, r1, r4, lr}
 801688e:	681c      	ldr	r4, [r3, #0]
 8016890:	b124      	cbz	r4, 801689c <iprintf+0x14>
 8016892:	69a3      	ldr	r3, [r4, #24]
 8016894:	b913      	cbnz	r3, 801689c <iprintf+0x14>
 8016896:	4620      	mov	r0, r4
 8016898:	f7ff fdc4 	bl	8016424 <__sinit>
 801689c:	ab05      	add	r3, sp, #20
 801689e:	9a04      	ldr	r2, [sp, #16]
 80168a0:	68a1      	ldr	r1, [r4, #8]
 80168a2:	4620      	mov	r0, r4
 80168a4:	9301      	str	r3, [sp, #4]
 80168a6:	f000 fe6d 	bl	8017584 <_vfiprintf_r>
 80168aa:	b002      	add	sp, #8
 80168ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168b0:	b004      	add	sp, #16
 80168b2:	4770      	bx	lr
 80168b4:	2000009c 	.word	0x2000009c

080168b8 <putchar>:
 80168b8:	b538      	push	{r3, r4, r5, lr}
 80168ba:	4b08      	ldr	r3, [pc, #32]	; (80168dc <putchar+0x24>)
 80168bc:	4605      	mov	r5, r0
 80168be:	681c      	ldr	r4, [r3, #0]
 80168c0:	b124      	cbz	r4, 80168cc <putchar+0x14>
 80168c2:	69a3      	ldr	r3, [r4, #24]
 80168c4:	b913      	cbnz	r3, 80168cc <putchar+0x14>
 80168c6:	4620      	mov	r0, r4
 80168c8:	f7ff fdac 	bl	8016424 <__sinit>
 80168cc:	68a2      	ldr	r2, [r4, #8]
 80168ce:	4629      	mov	r1, r5
 80168d0:	4620      	mov	r0, r4
 80168d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168d6:	f001 b8f3 	b.w	8017ac0 <_putc_r>
 80168da:	bf00      	nop
 80168dc:	2000009c 	.word	0x2000009c

080168e0 <_puts_r>:
 80168e0:	b570      	push	{r4, r5, r6, lr}
 80168e2:	460e      	mov	r6, r1
 80168e4:	4605      	mov	r5, r0
 80168e6:	b118      	cbz	r0, 80168f0 <_puts_r+0x10>
 80168e8:	6983      	ldr	r3, [r0, #24]
 80168ea:	b90b      	cbnz	r3, 80168f0 <_puts_r+0x10>
 80168ec:	f7ff fd9a 	bl	8016424 <__sinit>
 80168f0:	69ab      	ldr	r3, [r5, #24]
 80168f2:	68ac      	ldr	r4, [r5, #8]
 80168f4:	b913      	cbnz	r3, 80168fc <_puts_r+0x1c>
 80168f6:	4628      	mov	r0, r5
 80168f8:	f7ff fd94 	bl	8016424 <__sinit>
 80168fc:	4b23      	ldr	r3, [pc, #140]	; (801698c <_puts_r+0xac>)
 80168fe:	429c      	cmp	r4, r3
 8016900:	d117      	bne.n	8016932 <_puts_r+0x52>
 8016902:	686c      	ldr	r4, [r5, #4]
 8016904:	89a3      	ldrh	r3, [r4, #12]
 8016906:	071b      	lsls	r3, r3, #28
 8016908:	d51d      	bpl.n	8016946 <_puts_r+0x66>
 801690a:	6923      	ldr	r3, [r4, #16]
 801690c:	b1db      	cbz	r3, 8016946 <_puts_r+0x66>
 801690e:	3e01      	subs	r6, #1
 8016910:	68a3      	ldr	r3, [r4, #8]
 8016912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016916:	3b01      	subs	r3, #1
 8016918:	60a3      	str	r3, [r4, #8]
 801691a:	b9e9      	cbnz	r1, 8016958 <_puts_r+0x78>
 801691c:	2b00      	cmp	r3, #0
 801691e:	da2e      	bge.n	801697e <_puts_r+0x9e>
 8016920:	4622      	mov	r2, r4
 8016922:	210a      	movs	r1, #10
 8016924:	4628      	mov	r0, r5
 8016926:	f000 fa85 	bl	8016e34 <__swbuf_r>
 801692a:	3001      	adds	r0, #1
 801692c:	d011      	beq.n	8016952 <_puts_r+0x72>
 801692e:	200a      	movs	r0, #10
 8016930:	e011      	b.n	8016956 <_puts_r+0x76>
 8016932:	4b17      	ldr	r3, [pc, #92]	; (8016990 <_puts_r+0xb0>)
 8016934:	429c      	cmp	r4, r3
 8016936:	d101      	bne.n	801693c <_puts_r+0x5c>
 8016938:	68ac      	ldr	r4, [r5, #8]
 801693a:	e7e3      	b.n	8016904 <_puts_r+0x24>
 801693c:	4b15      	ldr	r3, [pc, #84]	; (8016994 <_puts_r+0xb4>)
 801693e:	429c      	cmp	r4, r3
 8016940:	bf08      	it	eq
 8016942:	68ec      	ldreq	r4, [r5, #12]
 8016944:	e7de      	b.n	8016904 <_puts_r+0x24>
 8016946:	4621      	mov	r1, r4
 8016948:	4628      	mov	r0, r5
 801694a:	f000 fad7 	bl	8016efc <__swsetup_r>
 801694e:	2800      	cmp	r0, #0
 8016950:	d0dd      	beq.n	801690e <_puts_r+0x2e>
 8016952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	2b00      	cmp	r3, #0
 801695a:	da04      	bge.n	8016966 <_puts_r+0x86>
 801695c:	69a2      	ldr	r2, [r4, #24]
 801695e:	429a      	cmp	r2, r3
 8016960:	dc06      	bgt.n	8016970 <_puts_r+0x90>
 8016962:	290a      	cmp	r1, #10
 8016964:	d004      	beq.n	8016970 <_puts_r+0x90>
 8016966:	6823      	ldr	r3, [r4, #0]
 8016968:	1c5a      	adds	r2, r3, #1
 801696a:	6022      	str	r2, [r4, #0]
 801696c:	7019      	strb	r1, [r3, #0]
 801696e:	e7cf      	b.n	8016910 <_puts_r+0x30>
 8016970:	4622      	mov	r2, r4
 8016972:	4628      	mov	r0, r5
 8016974:	f000 fa5e 	bl	8016e34 <__swbuf_r>
 8016978:	3001      	adds	r0, #1
 801697a:	d1c9      	bne.n	8016910 <_puts_r+0x30>
 801697c:	e7e9      	b.n	8016952 <_puts_r+0x72>
 801697e:	200a      	movs	r0, #10
 8016980:	6823      	ldr	r3, [r4, #0]
 8016982:	1c5a      	adds	r2, r3, #1
 8016984:	6022      	str	r2, [r4, #0]
 8016986:	7018      	strb	r0, [r3, #0]
 8016988:	e7e5      	b.n	8016956 <_puts_r+0x76>
 801698a:	bf00      	nop
 801698c:	08022890 	.word	0x08022890
 8016990:	080228b0 	.word	0x080228b0
 8016994:	08022870 	.word	0x08022870

08016998 <puts>:
 8016998:	4b02      	ldr	r3, [pc, #8]	; (80169a4 <puts+0xc>)
 801699a:	4601      	mov	r1, r0
 801699c:	6818      	ldr	r0, [r3, #0]
 801699e:	f7ff bf9f 	b.w	80168e0 <_puts_r>
 80169a2:	bf00      	nop
 80169a4:	2000009c 	.word	0x2000009c

080169a8 <rand>:
 80169a8:	b538      	push	{r3, r4, r5, lr}
 80169aa:	4b13      	ldr	r3, [pc, #76]	; (80169f8 <rand+0x50>)
 80169ac:	681c      	ldr	r4, [r3, #0]
 80169ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80169b0:	b97b      	cbnz	r3, 80169d2 <rand+0x2a>
 80169b2:	2018      	movs	r0, #24
 80169b4:	f7ff fe90 	bl	80166d8 <malloc>
 80169b8:	4a10      	ldr	r2, [pc, #64]	; (80169fc <rand+0x54>)
 80169ba:	4b11      	ldr	r3, [pc, #68]	; (8016a00 <rand+0x58>)
 80169bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80169be:	e9c0 2300 	strd	r2, r3, [r0]
 80169c2:	4b10      	ldr	r3, [pc, #64]	; (8016a04 <rand+0x5c>)
 80169c4:	2201      	movs	r2, #1
 80169c6:	6083      	str	r3, [r0, #8]
 80169c8:	230b      	movs	r3, #11
 80169ca:	8183      	strh	r3, [r0, #12]
 80169cc:	2300      	movs	r3, #0
 80169ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80169d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80169d4:	480c      	ldr	r0, [pc, #48]	; (8016a08 <rand+0x60>)
 80169d6:	690a      	ldr	r2, [r1, #16]
 80169d8:	694b      	ldr	r3, [r1, #20]
 80169da:	4350      	muls	r0, r2
 80169dc:	4c0b      	ldr	r4, [pc, #44]	; (8016a0c <rand+0x64>)
 80169de:	fb04 0003 	mla	r0, r4, r3, r0
 80169e2:	fba2 2304 	umull	r2, r3, r2, r4
 80169e6:	4403      	add	r3, r0
 80169e8:	1c54      	adds	r4, r2, #1
 80169ea:	f143 0500 	adc.w	r5, r3, #0
 80169ee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80169f2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80169f6:	bd38      	pop	{r3, r4, r5, pc}
 80169f8:	2000009c 	.word	0x2000009c
 80169fc:	abcd330e 	.word	0xabcd330e
 8016a00:	e66d1234 	.word	0xe66d1234
 8016a04:	0005deec 	.word	0x0005deec
 8016a08:	5851f42d 	.word	0x5851f42d
 8016a0c:	4c957f2d 	.word	0x4c957f2d

08016a10 <cleanup_glue>:
 8016a10:	b538      	push	{r3, r4, r5, lr}
 8016a12:	460c      	mov	r4, r1
 8016a14:	6809      	ldr	r1, [r1, #0]
 8016a16:	4605      	mov	r5, r0
 8016a18:	b109      	cbz	r1, 8016a1e <cleanup_glue+0xe>
 8016a1a:	f7ff fff9 	bl	8016a10 <cleanup_glue>
 8016a1e:	4621      	mov	r1, r4
 8016a20:	4628      	mov	r0, r5
 8016a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a26:	f7ff be89 	b.w	801673c <_free_r>
	...

08016a2c <_reclaim_reent>:
 8016a2c:	4b2c      	ldr	r3, [pc, #176]	; (8016ae0 <_reclaim_reent+0xb4>)
 8016a2e:	b570      	push	{r4, r5, r6, lr}
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	4604      	mov	r4, r0
 8016a34:	4283      	cmp	r3, r0
 8016a36:	d051      	beq.n	8016adc <_reclaim_reent+0xb0>
 8016a38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016a3a:	b143      	cbz	r3, 8016a4e <_reclaim_reent+0x22>
 8016a3c:	68db      	ldr	r3, [r3, #12]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d14a      	bne.n	8016ad8 <_reclaim_reent+0xac>
 8016a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a44:	6819      	ldr	r1, [r3, #0]
 8016a46:	b111      	cbz	r1, 8016a4e <_reclaim_reent+0x22>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f7ff fe77 	bl	801673c <_free_r>
 8016a4e:	6961      	ldr	r1, [r4, #20]
 8016a50:	b111      	cbz	r1, 8016a58 <_reclaim_reent+0x2c>
 8016a52:	4620      	mov	r0, r4
 8016a54:	f7ff fe72 	bl	801673c <_free_r>
 8016a58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016a5a:	b111      	cbz	r1, 8016a62 <_reclaim_reent+0x36>
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	f7ff fe6d 	bl	801673c <_free_r>
 8016a62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016a64:	b111      	cbz	r1, 8016a6c <_reclaim_reent+0x40>
 8016a66:	4620      	mov	r0, r4
 8016a68:	f7ff fe68 	bl	801673c <_free_r>
 8016a6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016a6e:	b111      	cbz	r1, 8016a76 <_reclaim_reent+0x4a>
 8016a70:	4620      	mov	r0, r4
 8016a72:	f7ff fe63 	bl	801673c <_free_r>
 8016a76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016a78:	b111      	cbz	r1, 8016a80 <_reclaim_reent+0x54>
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f7ff fe5e 	bl	801673c <_free_r>
 8016a80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016a82:	b111      	cbz	r1, 8016a8a <_reclaim_reent+0x5e>
 8016a84:	4620      	mov	r0, r4
 8016a86:	f7ff fe59 	bl	801673c <_free_r>
 8016a8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a8c:	b111      	cbz	r1, 8016a94 <_reclaim_reent+0x68>
 8016a8e:	4620      	mov	r0, r4
 8016a90:	f7ff fe54 	bl	801673c <_free_r>
 8016a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a96:	b111      	cbz	r1, 8016a9e <_reclaim_reent+0x72>
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f7ff fe4f 	bl	801673c <_free_r>
 8016a9e:	69a3      	ldr	r3, [r4, #24]
 8016aa0:	b1e3      	cbz	r3, 8016adc <_reclaim_reent+0xb0>
 8016aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	4798      	blx	r3
 8016aa8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016aaa:	b1b9      	cbz	r1, 8016adc <_reclaim_reent+0xb0>
 8016aac:	4620      	mov	r0, r4
 8016aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ab2:	f7ff bfad 	b.w	8016a10 <cleanup_glue>
 8016ab6:	5949      	ldr	r1, [r1, r5]
 8016ab8:	b941      	cbnz	r1, 8016acc <_reclaim_reent+0xa0>
 8016aba:	3504      	adds	r5, #4
 8016abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016abe:	2d80      	cmp	r5, #128	; 0x80
 8016ac0:	68d9      	ldr	r1, [r3, #12]
 8016ac2:	d1f8      	bne.n	8016ab6 <_reclaim_reent+0x8a>
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f7ff fe39 	bl	801673c <_free_r>
 8016aca:	e7ba      	b.n	8016a42 <_reclaim_reent+0x16>
 8016acc:	680e      	ldr	r6, [r1, #0]
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f7ff fe34 	bl	801673c <_free_r>
 8016ad4:	4631      	mov	r1, r6
 8016ad6:	e7ef      	b.n	8016ab8 <_reclaim_reent+0x8c>
 8016ad8:	2500      	movs	r5, #0
 8016ada:	e7ef      	b.n	8016abc <_reclaim_reent+0x90>
 8016adc:	bd70      	pop	{r4, r5, r6, pc}
 8016ade:	bf00      	nop
 8016ae0:	2000009c 	.word	0x2000009c

08016ae4 <_sbrk_r>:
 8016ae4:	b538      	push	{r3, r4, r5, lr}
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	4c05      	ldr	r4, [pc, #20]	; (8016b00 <_sbrk_r+0x1c>)
 8016aea:	4605      	mov	r5, r0
 8016aec:	4608      	mov	r0, r1
 8016aee:	6023      	str	r3, [r4, #0]
 8016af0:	f7ea fe8a 	bl	8001808 <_sbrk>
 8016af4:	1c43      	adds	r3, r0, #1
 8016af6:	d102      	bne.n	8016afe <_sbrk_r+0x1a>
 8016af8:	6823      	ldr	r3, [r4, #0]
 8016afa:	b103      	cbz	r3, 8016afe <_sbrk_r+0x1a>
 8016afc:	602b      	str	r3, [r5, #0]
 8016afe:	bd38      	pop	{r3, r4, r5, pc}
 8016b00:	2000e0bc 	.word	0x2000e0bc

08016b04 <sniprintf>:
 8016b04:	b40c      	push	{r2, r3}
 8016b06:	b530      	push	{r4, r5, lr}
 8016b08:	4b17      	ldr	r3, [pc, #92]	; (8016b68 <sniprintf+0x64>)
 8016b0a:	1e0c      	subs	r4, r1, #0
 8016b0c:	b09d      	sub	sp, #116	; 0x74
 8016b0e:	681d      	ldr	r5, [r3, #0]
 8016b10:	da08      	bge.n	8016b24 <sniprintf+0x20>
 8016b12:	238b      	movs	r3, #139	; 0x8b
 8016b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b18:	602b      	str	r3, [r5, #0]
 8016b1a:	b01d      	add	sp, #116	; 0x74
 8016b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b20:	b002      	add	sp, #8
 8016b22:	4770      	bx	lr
 8016b24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b2c:	bf0c      	ite	eq
 8016b2e:	4623      	moveq	r3, r4
 8016b30:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016b34:	9304      	str	r3, [sp, #16]
 8016b36:	9307      	str	r3, [sp, #28]
 8016b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b3c:	9002      	str	r0, [sp, #8]
 8016b3e:	9006      	str	r0, [sp, #24]
 8016b40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b46:	ab21      	add	r3, sp, #132	; 0x84
 8016b48:	a902      	add	r1, sp, #8
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	9301      	str	r3, [sp, #4]
 8016b4e:	f000 fbf9 	bl	8017344 <_svfiprintf_r>
 8016b52:	1c43      	adds	r3, r0, #1
 8016b54:	bfbc      	itt	lt
 8016b56:	238b      	movlt	r3, #139	; 0x8b
 8016b58:	602b      	strlt	r3, [r5, #0]
 8016b5a:	2c00      	cmp	r4, #0
 8016b5c:	d0dd      	beq.n	8016b1a <sniprintf+0x16>
 8016b5e:	2200      	movs	r2, #0
 8016b60:	9b02      	ldr	r3, [sp, #8]
 8016b62:	701a      	strb	r2, [r3, #0]
 8016b64:	e7d9      	b.n	8016b1a <sniprintf+0x16>
 8016b66:	bf00      	nop
 8016b68:	2000009c 	.word	0x2000009c

08016b6c <__sread>:
 8016b6c:	b510      	push	{r4, lr}
 8016b6e:	460c      	mov	r4, r1
 8016b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b74:	f000 ffda 	bl	8017b2c <_read_r>
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	bfab      	itete	ge
 8016b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8016b80:	181b      	addge	r3, r3, r0
 8016b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b86:	bfac      	ite	ge
 8016b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b8a:	81a3      	strhlt	r3, [r4, #12]
 8016b8c:	bd10      	pop	{r4, pc}

08016b8e <__swrite>:
 8016b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b92:	461f      	mov	r7, r3
 8016b94:	898b      	ldrh	r3, [r1, #12]
 8016b96:	4605      	mov	r5, r0
 8016b98:	05db      	lsls	r3, r3, #23
 8016b9a:	460c      	mov	r4, r1
 8016b9c:	4616      	mov	r6, r2
 8016b9e:	d505      	bpl.n	8016bac <__swrite+0x1e>
 8016ba0:	2302      	movs	r3, #2
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ba8:	f000 fae8 	bl	801717c <_lseek_r>
 8016bac:	89a3      	ldrh	r3, [r4, #12]
 8016bae:	4632      	mov	r2, r6
 8016bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016bb4:	81a3      	strh	r3, [r4, #12]
 8016bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bba:	463b      	mov	r3, r7
 8016bbc:	4628      	mov	r0, r5
 8016bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc2:	f000 b989 	b.w	8016ed8 <_write_r>

08016bc6 <__sseek>:
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	460c      	mov	r4, r1
 8016bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bce:	f000 fad5 	bl	801717c <_lseek_r>
 8016bd2:	1c43      	adds	r3, r0, #1
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	bf15      	itete	ne
 8016bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016be2:	81a3      	strheq	r3, [r4, #12]
 8016be4:	bf18      	it	ne
 8016be6:	81a3      	strhne	r3, [r4, #12]
 8016be8:	bd10      	pop	{r4, pc}

08016bea <__sclose>:
 8016bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bee:	f000 b9f3 	b.w	8016fd8 <_close_r>

08016bf2 <strchr>:
 8016bf2:	b2c9      	uxtb	r1, r1
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bfa:	b11a      	cbz	r2, 8016c04 <strchr+0x12>
 8016bfc:	428a      	cmp	r2, r1
 8016bfe:	d1f9      	bne.n	8016bf4 <strchr+0x2>
 8016c00:	4618      	mov	r0, r3
 8016c02:	4770      	bx	lr
 8016c04:	2900      	cmp	r1, #0
 8016c06:	bf18      	it	ne
 8016c08:	2300      	movne	r3, #0
 8016c0a:	e7f9      	b.n	8016c00 <strchr+0xe>

08016c0c <strcpy>:
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c12:	f803 2b01 	strb.w	r2, [r3], #1
 8016c16:	2a00      	cmp	r2, #0
 8016c18:	d1f9      	bne.n	8016c0e <strcpy+0x2>
 8016c1a:	4770      	bx	lr

08016c1c <strncasecmp>:
 8016c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c20:	4606      	mov	r6, r0
 8016c22:	460f      	mov	r7, r1
 8016c24:	eb00 0802 	add.w	r8, r0, r2
 8016c28:	45b0      	cmp	r8, r6
 8016c2a:	d019      	beq.n	8016c60 <strncasecmp+0x44>
 8016c2c:	f816 4b01 	ldrb.w	r4, [r6], #1
 8016c30:	f000 fa96 	bl	8017160 <__locale_ctype_ptr>
 8016c34:	4420      	add	r0, r4
 8016c36:	7843      	ldrb	r3, [r0, #1]
 8016c38:	f817 5b01 	ldrb.w	r5, [r7], #1
 8016c3c:	f003 0303 	and.w	r3, r3, #3
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	bf08      	it	eq
 8016c44:	3420      	addeq	r4, #32
 8016c46:	f000 fa8b 	bl	8017160 <__locale_ctype_ptr>
 8016c4a:	4428      	add	r0, r5
 8016c4c:	7842      	ldrb	r2, [r0, #1]
 8016c4e:	f002 0203 	and.w	r2, r2, #3
 8016c52:	2a01      	cmp	r2, #1
 8016c54:	bf08      	it	eq
 8016c56:	3520      	addeq	r5, #32
 8016c58:	1b60      	subs	r0, r4, r5
 8016c5a:	d102      	bne.n	8016c62 <strncasecmp+0x46>
 8016c5c:	2d00      	cmp	r5, #0
 8016c5e:	d1e3      	bne.n	8016c28 <strncasecmp+0xc>
 8016c60:	2000      	movs	r0, #0
 8016c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c66 <strncat>:
 8016c66:	4603      	mov	r3, r0
 8016c68:	b530      	push	{r4, r5, lr}
 8016c6a:	781c      	ldrb	r4, [r3, #0]
 8016c6c:	1c5d      	adds	r5, r3, #1
 8016c6e:	b944      	cbnz	r4, 8016c82 <strncat+0x1c>
 8016c70:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8016c74:	d304      	bcc.n	8016c80 <strncat+0x1a>
 8016c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c7a:	f803 4b01 	strb.w	r4, [r3], #1
 8016c7e:	b914      	cbnz	r4, 8016c86 <strncat+0x20>
 8016c80:	bd30      	pop	{r4, r5, pc}
 8016c82:	462b      	mov	r3, r5
 8016c84:	e7f1      	b.n	8016c6a <strncat+0x4>
 8016c86:	2a00      	cmp	r2, #0
 8016c88:	d1f2      	bne.n	8016c70 <strncat+0xa>
 8016c8a:	701a      	strb	r2, [r3, #0]
 8016c8c:	e7f0      	b.n	8016c70 <strncat+0xa>

08016c8e <strncmp>:
 8016c8e:	b510      	push	{r4, lr}
 8016c90:	b16a      	cbz	r2, 8016cae <strncmp+0x20>
 8016c92:	3901      	subs	r1, #1
 8016c94:	1884      	adds	r4, r0, r2
 8016c96:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016c9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	d103      	bne.n	8016caa <strncmp+0x1c>
 8016ca2:	42a0      	cmp	r0, r4
 8016ca4:	d001      	beq.n	8016caa <strncmp+0x1c>
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d1f5      	bne.n	8016c96 <strncmp+0x8>
 8016caa:	1a98      	subs	r0, r3, r2
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	4610      	mov	r0, r2
 8016cb0:	e7fc      	b.n	8016cac <strncmp+0x1e>

08016cb2 <strncpy>:
 8016cb2:	b570      	push	{r4, r5, r6, lr}
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	3901      	subs	r1, #1
 8016cb8:	b902      	cbnz	r2, 8016cbc <strncpy+0xa>
 8016cba:	bd70      	pop	{r4, r5, r6, pc}
 8016cbc:	4623      	mov	r3, r4
 8016cbe:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016cc2:	1e56      	subs	r6, r2, #1
 8016cc4:	f803 5b01 	strb.w	r5, [r3], #1
 8016cc8:	b92d      	cbnz	r5, 8016cd6 <strncpy+0x24>
 8016cca:	4414      	add	r4, r2
 8016ccc:	42a3      	cmp	r3, r4
 8016cce:	d0f4      	beq.n	8016cba <strncpy+0x8>
 8016cd0:	f803 5b01 	strb.w	r5, [r3], #1
 8016cd4:	e7fa      	b.n	8016ccc <strncpy+0x1a>
 8016cd6:	461c      	mov	r4, r3
 8016cd8:	4632      	mov	r2, r6
 8016cda:	e7ed      	b.n	8016cb8 <strncpy+0x6>

08016cdc <strstr>:
 8016cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cde:	7803      	ldrb	r3, [r0, #0]
 8016ce0:	b17b      	cbz	r3, 8016d02 <strstr+0x26>
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	7823      	ldrb	r3, [r4, #0]
 8016ce6:	4620      	mov	r0, r4
 8016ce8:	1c66      	adds	r6, r4, #1
 8016cea:	b17b      	cbz	r3, 8016d0c <strstr+0x30>
 8016cec:	1e4a      	subs	r2, r1, #1
 8016cee:	1e63      	subs	r3, r4, #1
 8016cf0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016cf4:	b14d      	cbz	r5, 8016d0a <strstr+0x2e>
 8016cf6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8016cfa:	4634      	mov	r4, r6
 8016cfc:	42af      	cmp	r7, r5
 8016cfe:	d0f7      	beq.n	8016cf0 <strstr+0x14>
 8016d00:	e7f0      	b.n	8016ce4 <strstr+0x8>
 8016d02:	780b      	ldrb	r3, [r1, #0]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	bf18      	it	ne
 8016d08:	2000      	movne	r0, #0
 8016d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	e7fc      	b.n	8016d0a <strstr+0x2e>

08016d10 <_strtol_l.isra.0>:
 8016d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d14:	4680      	mov	r8, r0
 8016d16:	4689      	mov	r9, r1
 8016d18:	4692      	mov	sl, r2
 8016d1a:	461e      	mov	r6, r3
 8016d1c:	460f      	mov	r7, r1
 8016d1e:	463d      	mov	r5, r7
 8016d20:	9808      	ldr	r0, [sp, #32]
 8016d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d26:	f000 fa17 	bl	8017158 <__locale_ctype_ptr_l>
 8016d2a:	4420      	add	r0, r4
 8016d2c:	7843      	ldrb	r3, [r0, #1]
 8016d2e:	f013 0308 	ands.w	r3, r3, #8
 8016d32:	d132      	bne.n	8016d9a <_strtol_l.isra.0+0x8a>
 8016d34:	2c2d      	cmp	r4, #45	; 0x2d
 8016d36:	d132      	bne.n	8016d9e <_strtol_l.isra.0+0x8e>
 8016d38:	2201      	movs	r2, #1
 8016d3a:	787c      	ldrb	r4, [r7, #1]
 8016d3c:	1cbd      	adds	r5, r7, #2
 8016d3e:	2e00      	cmp	r6, #0
 8016d40:	d05d      	beq.n	8016dfe <_strtol_l.isra.0+0xee>
 8016d42:	2e10      	cmp	r6, #16
 8016d44:	d109      	bne.n	8016d5a <_strtol_l.isra.0+0x4a>
 8016d46:	2c30      	cmp	r4, #48	; 0x30
 8016d48:	d107      	bne.n	8016d5a <_strtol_l.isra.0+0x4a>
 8016d4a:	782b      	ldrb	r3, [r5, #0]
 8016d4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016d50:	2b58      	cmp	r3, #88	; 0x58
 8016d52:	d14f      	bne.n	8016df4 <_strtol_l.isra.0+0xe4>
 8016d54:	2610      	movs	r6, #16
 8016d56:	786c      	ldrb	r4, [r5, #1]
 8016d58:	3502      	adds	r5, #2
 8016d5a:	2a00      	cmp	r2, #0
 8016d5c:	bf14      	ite	ne
 8016d5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016d62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016d66:	2700      	movs	r7, #0
 8016d68:	fbb1 fcf6 	udiv	ip, r1, r6
 8016d6c:	4638      	mov	r0, r7
 8016d6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016d72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016d76:	2b09      	cmp	r3, #9
 8016d78:	d817      	bhi.n	8016daa <_strtol_l.isra.0+0x9a>
 8016d7a:	461c      	mov	r4, r3
 8016d7c:	42a6      	cmp	r6, r4
 8016d7e:	dd23      	ble.n	8016dc8 <_strtol_l.isra.0+0xb8>
 8016d80:	1c7b      	adds	r3, r7, #1
 8016d82:	d007      	beq.n	8016d94 <_strtol_l.isra.0+0x84>
 8016d84:	4584      	cmp	ip, r0
 8016d86:	d31c      	bcc.n	8016dc2 <_strtol_l.isra.0+0xb2>
 8016d88:	d101      	bne.n	8016d8e <_strtol_l.isra.0+0x7e>
 8016d8a:	45a6      	cmp	lr, r4
 8016d8c:	db19      	blt.n	8016dc2 <_strtol_l.isra.0+0xb2>
 8016d8e:	2701      	movs	r7, #1
 8016d90:	fb00 4006 	mla	r0, r0, r6, r4
 8016d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d98:	e7eb      	b.n	8016d72 <_strtol_l.isra.0+0x62>
 8016d9a:	462f      	mov	r7, r5
 8016d9c:	e7bf      	b.n	8016d1e <_strtol_l.isra.0+0xe>
 8016d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8016da0:	bf04      	itt	eq
 8016da2:	1cbd      	addeq	r5, r7, #2
 8016da4:	787c      	ldrbeq	r4, [r7, #1]
 8016da6:	461a      	mov	r2, r3
 8016da8:	e7c9      	b.n	8016d3e <_strtol_l.isra.0+0x2e>
 8016daa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016dae:	2b19      	cmp	r3, #25
 8016db0:	d801      	bhi.n	8016db6 <_strtol_l.isra.0+0xa6>
 8016db2:	3c37      	subs	r4, #55	; 0x37
 8016db4:	e7e2      	b.n	8016d7c <_strtol_l.isra.0+0x6c>
 8016db6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016dba:	2b19      	cmp	r3, #25
 8016dbc:	d804      	bhi.n	8016dc8 <_strtol_l.isra.0+0xb8>
 8016dbe:	3c57      	subs	r4, #87	; 0x57
 8016dc0:	e7dc      	b.n	8016d7c <_strtol_l.isra.0+0x6c>
 8016dc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016dc6:	e7e5      	b.n	8016d94 <_strtol_l.isra.0+0x84>
 8016dc8:	1c7b      	adds	r3, r7, #1
 8016dca:	d108      	bne.n	8016dde <_strtol_l.isra.0+0xce>
 8016dcc:	2322      	movs	r3, #34	; 0x22
 8016dce:	4608      	mov	r0, r1
 8016dd0:	f8c8 3000 	str.w	r3, [r8]
 8016dd4:	f1ba 0f00 	cmp.w	sl, #0
 8016dd8:	d107      	bne.n	8016dea <_strtol_l.isra.0+0xda>
 8016dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dde:	b102      	cbz	r2, 8016de2 <_strtol_l.isra.0+0xd2>
 8016de0:	4240      	negs	r0, r0
 8016de2:	f1ba 0f00 	cmp.w	sl, #0
 8016de6:	d0f8      	beq.n	8016dda <_strtol_l.isra.0+0xca>
 8016de8:	b10f      	cbz	r7, 8016dee <_strtol_l.isra.0+0xde>
 8016dea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8016dee:	f8ca 9000 	str.w	r9, [sl]
 8016df2:	e7f2      	b.n	8016dda <_strtol_l.isra.0+0xca>
 8016df4:	2430      	movs	r4, #48	; 0x30
 8016df6:	2e00      	cmp	r6, #0
 8016df8:	d1af      	bne.n	8016d5a <_strtol_l.isra.0+0x4a>
 8016dfa:	2608      	movs	r6, #8
 8016dfc:	e7ad      	b.n	8016d5a <_strtol_l.isra.0+0x4a>
 8016dfe:	2c30      	cmp	r4, #48	; 0x30
 8016e00:	d0a3      	beq.n	8016d4a <_strtol_l.isra.0+0x3a>
 8016e02:	260a      	movs	r6, #10
 8016e04:	e7a9      	b.n	8016d5a <_strtol_l.isra.0+0x4a>
	...

08016e08 <strtol>:
 8016e08:	4b08      	ldr	r3, [pc, #32]	; (8016e2c <strtol+0x24>)
 8016e0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e0c:	681c      	ldr	r4, [r3, #0]
 8016e0e:	4d08      	ldr	r5, [pc, #32]	; (8016e30 <strtol+0x28>)
 8016e10:	6a23      	ldr	r3, [r4, #32]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	bf08      	it	eq
 8016e16:	462b      	moveq	r3, r5
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	460a      	mov	r2, r1
 8016e1e:	4601      	mov	r1, r0
 8016e20:	4620      	mov	r0, r4
 8016e22:	f7ff ff75 	bl	8016d10 <_strtol_l.isra.0>
 8016e26:	b003      	add	sp, #12
 8016e28:	bd30      	pop	{r4, r5, pc}
 8016e2a:	bf00      	nop
 8016e2c:	2000009c 	.word	0x2000009c
 8016e30:	20000100 	.word	0x20000100

08016e34 <__swbuf_r>:
 8016e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e36:	460e      	mov	r6, r1
 8016e38:	4614      	mov	r4, r2
 8016e3a:	4605      	mov	r5, r0
 8016e3c:	b118      	cbz	r0, 8016e46 <__swbuf_r+0x12>
 8016e3e:	6983      	ldr	r3, [r0, #24]
 8016e40:	b90b      	cbnz	r3, 8016e46 <__swbuf_r+0x12>
 8016e42:	f7ff faef 	bl	8016424 <__sinit>
 8016e46:	4b21      	ldr	r3, [pc, #132]	; (8016ecc <__swbuf_r+0x98>)
 8016e48:	429c      	cmp	r4, r3
 8016e4a:	d12a      	bne.n	8016ea2 <__swbuf_r+0x6e>
 8016e4c:	686c      	ldr	r4, [r5, #4]
 8016e4e:	69a3      	ldr	r3, [r4, #24]
 8016e50:	60a3      	str	r3, [r4, #8]
 8016e52:	89a3      	ldrh	r3, [r4, #12]
 8016e54:	071a      	lsls	r2, r3, #28
 8016e56:	d52e      	bpl.n	8016eb6 <__swbuf_r+0x82>
 8016e58:	6923      	ldr	r3, [r4, #16]
 8016e5a:	b363      	cbz	r3, 8016eb6 <__swbuf_r+0x82>
 8016e5c:	6923      	ldr	r3, [r4, #16]
 8016e5e:	6820      	ldr	r0, [r4, #0]
 8016e60:	b2f6      	uxtb	r6, r6
 8016e62:	1ac0      	subs	r0, r0, r3
 8016e64:	6963      	ldr	r3, [r4, #20]
 8016e66:	4637      	mov	r7, r6
 8016e68:	4283      	cmp	r3, r0
 8016e6a:	dc04      	bgt.n	8016e76 <__swbuf_r+0x42>
 8016e6c:	4621      	mov	r1, r4
 8016e6e:	4628      	mov	r0, r5
 8016e70:	f000 f948 	bl	8017104 <_fflush_r>
 8016e74:	bb28      	cbnz	r0, 8016ec2 <__swbuf_r+0x8e>
 8016e76:	68a3      	ldr	r3, [r4, #8]
 8016e78:	3001      	adds	r0, #1
 8016e7a:	3b01      	subs	r3, #1
 8016e7c:	60a3      	str	r3, [r4, #8]
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	1c5a      	adds	r2, r3, #1
 8016e82:	6022      	str	r2, [r4, #0]
 8016e84:	701e      	strb	r6, [r3, #0]
 8016e86:	6963      	ldr	r3, [r4, #20]
 8016e88:	4283      	cmp	r3, r0
 8016e8a:	d004      	beq.n	8016e96 <__swbuf_r+0x62>
 8016e8c:	89a3      	ldrh	r3, [r4, #12]
 8016e8e:	07db      	lsls	r3, r3, #31
 8016e90:	d519      	bpl.n	8016ec6 <__swbuf_r+0x92>
 8016e92:	2e0a      	cmp	r6, #10
 8016e94:	d117      	bne.n	8016ec6 <__swbuf_r+0x92>
 8016e96:	4621      	mov	r1, r4
 8016e98:	4628      	mov	r0, r5
 8016e9a:	f000 f933 	bl	8017104 <_fflush_r>
 8016e9e:	b190      	cbz	r0, 8016ec6 <__swbuf_r+0x92>
 8016ea0:	e00f      	b.n	8016ec2 <__swbuf_r+0x8e>
 8016ea2:	4b0b      	ldr	r3, [pc, #44]	; (8016ed0 <__swbuf_r+0x9c>)
 8016ea4:	429c      	cmp	r4, r3
 8016ea6:	d101      	bne.n	8016eac <__swbuf_r+0x78>
 8016ea8:	68ac      	ldr	r4, [r5, #8]
 8016eaa:	e7d0      	b.n	8016e4e <__swbuf_r+0x1a>
 8016eac:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <__swbuf_r+0xa0>)
 8016eae:	429c      	cmp	r4, r3
 8016eb0:	bf08      	it	eq
 8016eb2:	68ec      	ldreq	r4, [r5, #12]
 8016eb4:	e7cb      	b.n	8016e4e <__swbuf_r+0x1a>
 8016eb6:	4621      	mov	r1, r4
 8016eb8:	4628      	mov	r0, r5
 8016eba:	f000 f81f 	bl	8016efc <__swsetup_r>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d0cc      	beq.n	8016e5c <__swbuf_r+0x28>
 8016ec2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016ec6:	4638      	mov	r0, r7
 8016ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eca:	bf00      	nop
 8016ecc:	08022890 	.word	0x08022890
 8016ed0:	080228b0 	.word	0x080228b0
 8016ed4:	08022870 	.word	0x08022870

08016ed8 <_write_r>:
 8016ed8:	b538      	push	{r3, r4, r5, lr}
 8016eda:	4605      	mov	r5, r0
 8016edc:	4608      	mov	r0, r1
 8016ede:	4611      	mov	r1, r2
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	4c05      	ldr	r4, [pc, #20]	; (8016ef8 <_write_r+0x20>)
 8016ee4:	6022      	str	r2, [r4, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	f7ea f8f8 	bl	80010dc <_write>
 8016eec:	1c43      	adds	r3, r0, #1
 8016eee:	d102      	bne.n	8016ef6 <_write_r+0x1e>
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	b103      	cbz	r3, 8016ef6 <_write_r+0x1e>
 8016ef4:	602b      	str	r3, [r5, #0]
 8016ef6:	bd38      	pop	{r3, r4, r5, pc}
 8016ef8:	2000e0bc 	.word	0x2000e0bc

08016efc <__swsetup_r>:
 8016efc:	4b32      	ldr	r3, [pc, #200]	; (8016fc8 <__swsetup_r+0xcc>)
 8016efe:	b570      	push	{r4, r5, r6, lr}
 8016f00:	681d      	ldr	r5, [r3, #0]
 8016f02:	4606      	mov	r6, r0
 8016f04:	460c      	mov	r4, r1
 8016f06:	b125      	cbz	r5, 8016f12 <__swsetup_r+0x16>
 8016f08:	69ab      	ldr	r3, [r5, #24]
 8016f0a:	b913      	cbnz	r3, 8016f12 <__swsetup_r+0x16>
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f7ff fa89 	bl	8016424 <__sinit>
 8016f12:	4b2e      	ldr	r3, [pc, #184]	; (8016fcc <__swsetup_r+0xd0>)
 8016f14:	429c      	cmp	r4, r3
 8016f16:	d10f      	bne.n	8016f38 <__swsetup_r+0x3c>
 8016f18:	686c      	ldr	r4, [r5, #4]
 8016f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	0715      	lsls	r5, r2, #28
 8016f22:	d42c      	bmi.n	8016f7e <__swsetup_r+0x82>
 8016f24:	06d0      	lsls	r0, r2, #27
 8016f26:	d411      	bmi.n	8016f4c <__swsetup_r+0x50>
 8016f28:	2209      	movs	r2, #9
 8016f2a:	6032      	str	r2, [r6, #0]
 8016f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f30:	81a3      	strh	r3, [r4, #12]
 8016f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f36:	e03e      	b.n	8016fb6 <__swsetup_r+0xba>
 8016f38:	4b25      	ldr	r3, [pc, #148]	; (8016fd0 <__swsetup_r+0xd4>)
 8016f3a:	429c      	cmp	r4, r3
 8016f3c:	d101      	bne.n	8016f42 <__swsetup_r+0x46>
 8016f3e:	68ac      	ldr	r4, [r5, #8]
 8016f40:	e7eb      	b.n	8016f1a <__swsetup_r+0x1e>
 8016f42:	4b24      	ldr	r3, [pc, #144]	; (8016fd4 <__swsetup_r+0xd8>)
 8016f44:	429c      	cmp	r4, r3
 8016f46:	bf08      	it	eq
 8016f48:	68ec      	ldreq	r4, [r5, #12]
 8016f4a:	e7e6      	b.n	8016f1a <__swsetup_r+0x1e>
 8016f4c:	0751      	lsls	r1, r2, #29
 8016f4e:	d512      	bpl.n	8016f76 <__swsetup_r+0x7a>
 8016f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f52:	b141      	cbz	r1, 8016f66 <__swsetup_r+0x6a>
 8016f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f58:	4299      	cmp	r1, r3
 8016f5a:	d002      	beq.n	8016f62 <__swsetup_r+0x66>
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	f7ff fbed 	bl	801673c <_free_r>
 8016f62:	2300      	movs	r3, #0
 8016f64:	6363      	str	r3, [r4, #52]	; 0x34
 8016f66:	89a3      	ldrh	r3, [r4, #12]
 8016f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016f6c:	81a3      	strh	r3, [r4, #12]
 8016f6e:	2300      	movs	r3, #0
 8016f70:	6063      	str	r3, [r4, #4]
 8016f72:	6923      	ldr	r3, [r4, #16]
 8016f74:	6023      	str	r3, [r4, #0]
 8016f76:	89a3      	ldrh	r3, [r4, #12]
 8016f78:	f043 0308 	orr.w	r3, r3, #8
 8016f7c:	81a3      	strh	r3, [r4, #12]
 8016f7e:	6923      	ldr	r3, [r4, #16]
 8016f80:	b94b      	cbnz	r3, 8016f96 <__swsetup_r+0x9a>
 8016f82:	89a3      	ldrh	r3, [r4, #12]
 8016f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f8c:	d003      	beq.n	8016f96 <__swsetup_r+0x9a>
 8016f8e:	4621      	mov	r1, r4
 8016f90:	4630      	mov	r0, r6
 8016f92:	f000 f929 	bl	80171e8 <__smakebuf_r>
 8016f96:	89a2      	ldrh	r2, [r4, #12]
 8016f98:	f012 0301 	ands.w	r3, r2, #1
 8016f9c:	d00c      	beq.n	8016fb8 <__swsetup_r+0xbc>
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	60a3      	str	r3, [r4, #8]
 8016fa2:	6963      	ldr	r3, [r4, #20]
 8016fa4:	425b      	negs	r3, r3
 8016fa6:	61a3      	str	r3, [r4, #24]
 8016fa8:	6923      	ldr	r3, [r4, #16]
 8016faa:	b953      	cbnz	r3, 8016fc2 <__swsetup_r+0xc6>
 8016fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016fb4:	d1ba      	bne.n	8016f2c <__swsetup_r+0x30>
 8016fb6:	bd70      	pop	{r4, r5, r6, pc}
 8016fb8:	0792      	lsls	r2, r2, #30
 8016fba:	bf58      	it	pl
 8016fbc:	6963      	ldrpl	r3, [r4, #20]
 8016fbe:	60a3      	str	r3, [r4, #8]
 8016fc0:	e7f2      	b.n	8016fa8 <__swsetup_r+0xac>
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	e7f7      	b.n	8016fb6 <__swsetup_r+0xba>
 8016fc6:	bf00      	nop
 8016fc8:	2000009c 	.word	0x2000009c
 8016fcc:	08022890 	.word	0x08022890
 8016fd0:	080228b0 	.word	0x080228b0
 8016fd4:	08022870 	.word	0x08022870

08016fd8 <_close_r>:
 8016fd8:	b538      	push	{r3, r4, r5, lr}
 8016fda:	2300      	movs	r3, #0
 8016fdc:	4c05      	ldr	r4, [pc, #20]	; (8016ff4 <_close_r+0x1c>)
 8016fde:	4605      	mov	r5, r0
 8016fe0:	4608      	mov	r0, r1
 8016fe2:	6023      	str	r3, [r4, #0]
 8016fe4:	f7ea fc04 	bl	80017f0 <_close>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d102      	bne.n	8016ff2 <_close_r+0x1a>
 8016fec:	6823      	ldr	r3, [r4, #0]
 8016fee:	b103      	cbz	r3, 8016ff2 <_close_r+0x1a>
 8016ff0:	602b      	str	r3, [r5, #0]
 8016ff2:	bd38      	pop	{r3, r4, r5, pc}
 8016ff4:	2000e0bc 	.word	0x2000e0bc

08016ff8 <__sflush_r>:
 8016ff8:	898a      	ldrh	r2, [r1, #12]
 8016ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffe:	4605      	mov	r5, r0
 8017000:	0710      	lsls	r0, r2, #28
 8017002:	460c      	mov	r4, r1
 8017004:	d458      	bmi.n	80170b8 <__sflush_r+0xc0>
 8017006:	684b      	ldr	r3, [r1, #4]
 8017008:	2b00      	cmp	r3, #0
 801700a:	dc05      	bgt.n	8017018 <__sflush_r+0x20>
 801700c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801700e:	2b00      	cmp	r3, #0
 8017010:	dc02      	bgt.n	8017018 <__sflush_r+0x20>
 8017012:	2000      	movs	r0, #0
 8017014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801701a:	2e00      	cmp	r6, #0
 801701c:	d0f9      	beq.n	8017012 <__sflush_r+0x1a>
 801701e:	2300      	movs	r3, #0
 8017020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017024:	682f      	ldr	r7, [r5, #0]
 8017026:	6a21      	ldr	r1, [r4, #32]
 8017028:	602b      	str	r3, [r5, #0]
 801702a:	d032      	beq.n	8017092 <__sflush_r+0x9a>
 801702c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801702e:	89a3      	ldrh	r3, [r4, #12]
 8017030:	075a      	lsls	r2, r3, #29
 8017032:	d505      	bpl.n	8017040 <__sflush_r+0x48>
 8017034:	6863      	ldr	r3, [r4, #4]
 8017036:	1ac0      	subs	r0, r0, r3
 8017038:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801703a:	b10b      	cbz	r3, 8017040 <__sflush_r+0x48>
 801703c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801703e:	1ac0      	subs	r0, r0, r3
 8017040:	2300      	movs	r3, #0
 8017042:	4602      	mov	r2, r0
 8017044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017046:	6a21      	ldr	r1, [r4, #32]
 8017048:	4628      	mov	r0, r5
 801704a:	47b0      	blx	r6
 801704c:	1c43      	adds	r3, r0, #1
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	d106      	bne.n	8017060 <__sflush_r+0x68>
 8017052:	6829      	ldr	r1, [r5, #0]
 8017054:	291d      	cmp	r1, #29
 8017056:	d848      	bhi.n	80170ea <__sflush_r+0xf2>
 8017058:	4a29      	ldr	r2, [pc, #164]	; (8017100 <__sflush_r+0x108>)
 801705a:	40ca      	lsrs	r2, r1
 801705c:	07d6      	lsls	r6, r2, #31
 801705e:	d544      	bpl.n	80170ea <__sflush_r+0xf2>
 8017060:	2200      	movs	r2, #0
 8017062:	6062      	str	r2, [r4, #4]
 8017064:	6922      	ldr	r2, [r4, #16]
 8017066:	04d9      	lsls	r1, r3, #19
 8017068:	6022      	str	r2, [r4, #0]
 801706a:	d504      	bpl.n	8017076 <__sflush_r+0x7e>
 801706c:	1c42      	adds	r2, r0, #1
 801706e:	d101      	bne.n	8017074 <__sflush_r+0x7c>
 8017070:	682b      	ldr	r3, [r5, #0]
 8017072:	b903      	cbnz	r3, 8017076 <__sflush_r+0x7e>
 8017074:	6560      	str	r0, [r4, #84]	; 0x54
 8017076:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017078:	602f      	str	r7, [r5, #0]
 801707a:	2900      	cmp	r1, #0
 801707c:	d0c9      	beq.n	8017012 <__sflush_r+0x1a>
 801707e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017082:	4299      	cmp	r1, r3
 8017084:	d002      	beq.n	801708c <__sflush_r+0x94>
 8017086:	4628      	mov	r0, r5
 8017088:	f7ff fb58 	bl	801673c <_free_r>
 801708c:	2000      	movs	r0, #0
 801708e:	6360      	str	r0, [r4, #52]	; 0x34
 8017090:	e7c0      	b.n	8017014 <__sflush_r+0x1c>
 8017092:	2301      	movs	r3, #1
 8017094:	4628      	mov	r0, r5
 8017096:	47b0      	blx	r6
 8017098:	1c41      	adds	r1, r0, #1
 801709a:	d1c8      	bne.n	801702e <__sflush_r+0x36>
 801709c:	682b      	ldr	r3, [r5, #0]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d0c5      	beq.n	801702e <__sflush_r+0x36>
 80170a2:	2b1d      	cmp	r3, #29
 80170a4:	d001      	beq.n	80170aa <__sflush_r+0xb2>
 80170a6:	2b16      	cmp	r3, #22
 80170a8:	d101      	bne.n	80170ae <__sflush_r+0xb6>
 80170aa:	602f      	str	r7, [r5, #0]
 80170ac:	e7b1      	b.n	8017012 <__sflush_r+0x1a>
 80170ae:	89a3      	ldrh	r3, [r4, #12]
 80170b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170b4:	81a3      	strh	r3, [r4, #12]
 80170b6:	e7ad      	b.n	8017014 <__sflush_r+0x1c>
 80170b8:	690f      	ldr	r7, [r1, #16]
 80170ba:	2f00      	cmp	r7, #0
 80170bc:	d0a9      	beq.n	8017012 <__sflush_r+0x1a>
 80170be:	0793      	lsls	r3, r2, #30
 80170c0:	bf18      	it	ne
 80170c2:	2300      	movne	r3, #0
 80170c4:	680e      	ldr	r6, [r1, #0]
 80170c6:	bf08      	it	eq
 80170c8:	694b      	ldreq	r3, [r1, #20]
 80170ca:	eba6 0807 	sub.w	r8, r6, r7
 80170ce:	600f      	str	r7, [r1, #0]
 80170d0:	608b      	str	r3, [r1, #8]
 80170d2:	f1b8 0f00 	cmp.w	r8, #0
 80170d6:	dd9c      	ble.n	8017012 <__sflush_r+0x1a>
 80170d8:	4643      	mov	r3, r8
 80170da:	463a      	mov	r2, r7
 80170dc:	6a21      	ldr	r1, [r4, #32]
 80170de:	4628      	mov	r0, r5
 80170e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170e2:	47b0      	blx	r6
 80170e4:	2800      	cmp	r0, #0
 80170e6:	dc06      	bgt.n	80170f6 <__sflush_r+0xfe>
 80170e8:	89a3      	ldrh	r3, [r4, #12]
 80170ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ee:	81a3      	strh	r3, [r4, #12]
 80170f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170f4:	e78e      	b.n	8017014 <__sflush_r+0x1c>
 80170f6:	4407      	add	r7, r0
 80170f8:	eba8 0800 	sub.w	r8, r8, r0
 80170fc:	e7e9      	b.n	80170d2 <__sflush_r+0xda>
 80170fe:	bf00      	nop
 8017100:	20400001 	.word	0x20400001

08017104 <_fflush_r>:
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	690b      	ldr	r3, [r1, #16]
 8017108:	4605      	mov	r5, r0
 801710a:	460c      	mov	r4, r1
 801710c:	b1db      	cbz	r3, 8017146 <_fflush_r+0x42>
 801710e:	b118      	cbz	r0, 8017118 <_fflush_r+0x14>
 8017110:	6983      	ldr	r3, [r0, #24]
 8017112:	b90b      	cbnz	r3, 8017118 <_fflush_r+0x14>
 8017114:	f7ff f986 	bl	8016424 <__sinit>
 8017118:	4b0c      	ldr	r3, [pc, #48]	; (801714c <_fflush_r+0x48>)
 801711a:	429c      	cmp	r4, r3
 801711c:	d109      	bne.n	8017132 <_fflush_r+0x2e>
 801711e:	686c      	ldr	r4, [r5, #4]
 8017120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017124:	b17b      	cbz	r3, 8017146 <_fflush_r+0x42>
 8017126:	4621      	mov	r1, r4
 8017128:	4628      	mov	r0, r5
 801712a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801712e:	f7ff bf63 	b.w	8016ff8 <__sflush_r>
 8017132:	4b07      	ldr	r3, [pc, #28]	; (8017150 <_fflush_r+0x4c>)
 8017134:	429c      	cmp	r4, r3
 8017136:	d101      	bne.n	801713c <_fflush_r+0x38>
 8017138:	68ac      	ldr	r4, [r5, #8]
 801713a:	e7f1      	b.n	8017120 <_fflush_r+0x1c>
 801713c:	4b05      	ldr	r3, [pc, #20]	; (8017154 <_fflush_r+0x50>)
 801713e:	429c      	cmp	r4, r3
 8017140:	bf08      	it	eq
 8017142:	68ec      	ldreq	r4, [r5, #12]
 8017144:	e7ec      	b.n	8017120 <_fflush_r+0x1c>
 8017146:	2000      	movs	r0, #0
 8017148:	bd38      	pop	{r3, r4, r5, pc}
 801714a:	bf00      	nop
 801714c:	08022890 	.word	0x08022890
 8017150:	080228b0 	.word	0x080228b0
 8017154:	08022870 	.word	0x08022870

08017158 <__locale_ctype_ptr_l>:
 8017158:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801715c:	4770      	bx	lr
	...

08017160 <__locale_ctype_ptr>:
 8017160:	4b04      	ldr	r3, [pc, #16]	; (8017174 <__locale_ctype_ptr+0x14>)
 8017162:	4a05      	ldr	r2, [pc, #20]	; (8017178 <__locale_ctype_ptr+0x18>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	6a1b      	ldr	r3, [r3, #32]
 8017168:	2b00      	cmp	r3, #0
 801716a:	bf08      	it	eq
 801716c:	4613      	moveq	r3, r2
 801716e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017172:	4770      	bx	lr
 8017174:	2000009c 	.word	0x2000009c
 8017178:	20000100 	.word	0x20000100

0801717c <_lseek_r>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	4605      	mov	r5, r0
 8017180:	4608      	mov	r0, r1
 8017182:	4611      	mov	r1, r2
 8017184:	2200      	movs	r2, #0
 8017186:	4c05      	ldr	r4, [pc, #20]	; (801719c <_lseek_r+0x20>)
 8017188:	6022      	str	r2, [r4, #0]
 801718a:	461a      	mov	r2, r3
 801718c:	f7ea fb3a 	bl	8001804 <_lseek>
 8017190:	1c43      	adds	r3, r0, #1
 8017192:	d102      	bne.n	801719a <_lseek_r+0x1e>
 8017194:	6823      	ldr	r3, [r4, #0]
 8017196:	b103      	cbz	r3, 801719a <_lseek_r+0x1e>
 8017198:	602b      	str	r3, [r5, #0]
 801719a:	bd38      	pop	{r3, r4, r5, pc}
 801719c:	2000e0bc 	.word	0x2000e0bc

080171a0 <__swhatbuf_r>:
 80171a0:	b570      	push	{r4, r5, r6, lr}
 80171a2:	460e      	mov	r6, r1
 80171a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171a8:	b096      	sub	sp, #88	; 0x58
 80171aa:	2900      	cmp	r1, #0
 80171ac:	4614      	mov	r4, r2
 80171ae:	461d      	mov	r5, r3
 80171b0:	da07      	bge.n	80171c2 <__swhatbuf_r+0x22>
 80171b2:	2300      	movs	r3, #0
 80171b4:	602b      	str	r3, [r5, #0]
 80171b6:	89b3      	ldrh	r3, [r6, #12]
 80171b8:	061a      	lsls	r2, r3, #24
 80171ba:	d410      	bmi.n	80171de <__swhatbuf_r+0x3e>
 80171bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80171c0:	e00e      	b.n	80171e0 <__swhatbuf_r+0x40>
 80171c2:	466a      	mov	r2, sp
 80171c4:	f000 fcd2 	bl	8017b6c <_fstat_r>
 80171c8:	2800      	cmp	r0, #0
 80171ca:	dbf2      	blt.n	80171b2 <__swhatbuf_r+0x12>
 80171cc:	9a01      	ldr	r2, [sp, #4]
 80171ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80171d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80171d6:	425a      	negs	r2, r3
 80171d8:	415a      	adcs	r2, r3
 80171da:	602a      	str	r2, [r5, #0]
 80171dc:	e7ee      	b.n	80171bc <__swhatbuf_r+0x1c>
 80171de:	2340      	movs	r3, #64	; 0x40
 80171e0:	2000      	movs	r0, #0
 80171e2:	6023      	str	r3, [r4, #0]
 80171e4:	b016      	add	sp, #88	; 0x58
 80171e6:	bd70      	pop	{r4, r5, r6, pc}

080171e8 <__smakebuf_r>:
 80171e8:	898b      	ldrh	r3, [r1, #12]
 80171ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171ec:	079d      	lsls	r5, r3, #30
 80171ee:	4606      	mov	r6, r0
 80171f0:	460c      	mov	r4, r1
 80171f2:	d507      	bpl.n	8017204 <__smakebuf_r+0x1c>
 80171f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80171f8:	6023      	str	r3, [r4, #0]
 80171fa:	6123      	str	r3, [r4, #16]
 80171fc:	2301      	movs	r3, #1
 80171fe:	6163      	str	r3, [r4, #20]
 8017200:	b002      	add	sp, #8
 8017202:	bd70      	pop	{r4, r5, r6, pc}
 8017204:	ab01      	add	r3, sp, #4
 8017206:	466a      	mov	r2, sp
 8017208:	f7ff ffca 	bl	80171a0 <__swhatbuf_r>
 801720c:	9900      	ldr	r1, [sp, #0]
 801720e:	4605      	mov	r5, r0
 8017210:	4630      	mov	r0, r6
 8017212:	f7ff fadf 	bl	80167d4 <_malloc_r>
 8017216:	b948      	cbnz	r0, 801722c <__smakebuf_r+0x44>
 8017218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801721c:	059a      	lsls	r2, r3, #22
 801721e:	d4ef      	bmi.n	8017200 <__smakebuf_r+0x18>
 8017220:	f023 0303 	bic.w	r3, r3, #3
 8017224:	f043 0302 	orr.w	r3, r3, #2
 8017228:	81a3      	strh	r3, [r4, #12]
 801722a:	e7e3      	b.n	80171f4 <__smakebuf_r+0xc>
 801722c:	4b0d      	ldr	r3, [pc, #52]	; (8017264 <__smakebuf_r+0x7c>)
 801722e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017230:	89a3      	ldrh	r3, [r4, #12]
 8017232:	6020      	str	r0, [r4, #0]
 8017234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017238:	81a3      	strh	r3, [r4, #12]
 801723a:	9b00      	ldr	r3, [sp, #0]
 801723c:	6120      	str	r0, [r4, #16]
 801723e:	6163      	str	r3, [r4, #20]
 8017240:	9b01      	ldr	r3, [sp, #4]
 8017242:	b15b      	cbz	r3, 801725c <__smakebuf_r+0x74>
 8017244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017248:	4630      	mov	r0, r6
 801724a:	f000 fca1 	bl	8017b90 <_isatty_r>
 801724e:	b128      	cbz	r0, 801725c <__smakebuf_r+0x74>
 8017250:	89a3      	ldrh	r3, [r4, #12]
 8017252:	f023 0303 	bic.w	r3, r3, #3
 8017256:	f043 0301 	orr.w	r3, r3, #1
 801725a:	81a3      	strh	r3, [r4, #12]
 801725c:	89a3      	ldrh	r3, [r4, #12]
 801725e:	431d      	orrs	r5, r3
 8017260:	81a5      	strh	r5, [r4, #12]
 8017262:	e7cd      	b.n	8017200 <__smakebuf_r+0x18>
 8017264:	080163ed 	.word	0x080163ed

08017268 <__ascii_mbtowc>:
 8017268:	b082      	sub	sp, #8
 801726a:	b901      	cbnz	r1, 801726e <__ascii_mbtowc+0x6>
 801726c:	a901      	add	r1, sp, #4
 801726e:	b142      	cbz	r2, 8017282 <__ascii_mbtowc+0x1a>
 8017270:	b14b      	cbz	r3, 8017286 <__ascii_mbtowc+0x1e>
 8017272:	7813      	ldrb	r3, [r2, #0]
 8017274:	600b      	str	r3, [r1, #0]
 8017276:	7812      	ldrb	r2, [r2, #0]
 8017278:	1c10      	adds	r0, r2, #0
 801727a:	bf18      	it	ne
 801727c:	2001      	movne	r0, #1
 801727e:	b002      	add	sp, #8
 8017280:	4770      	bx	lr
 8017282:	4610      	mov	r0, r2
 8017284:	e7fb      	b.n	801727e <__ascii_mbtowc+0x16>
 8017286:	f06f 0001 	mvn.w	r0, #1
 801728a:	e7f8      	b.n	801727e <__ascii_mbtowc+0x16>

0801728c <__malloc_lock>:
 801728c:	4770      	bx	lr

0801728e <__malloc_unlock>:
 801728e:	4770      	bx	lr

08017290 <__ssputs_r>:
 8017290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017294:	688e      	ldr	r6, [r1, #8]
 8017296:	4682      	mov	sl, r0
 8017298:	429e      	cmp	r6, r3
 801729a:	460c      	mov	r4, r1
 801729c:	4690      	mov	r8, r2
 801729e:	4699      	mov	r9, r3
 80172a0:	d837      	bhi.n	8017312 <__ssputs_r+0x82>
 80172a2:	898a      	ldrh	r2, [r1, #12]
 80172a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80172a8:	d031      	beq.n	801730e <__ssputs_r+0x7e>
 80172aa:	2302      	movs	r3, #2
 80172ac:	6825      	ldr	r5, [r4, #0]
 80172ae:	6909      	ldr	r1, [r1, #16]
 80172b0:	1a6f      	subs	r7, r5, r1
 80172b2:	6965      	ldr	r5, [r4, #20]
 80172b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80172bc:	f109 0301 	add.w	r3, r9, #1
 80172c0:	443b      	add	r3, r7
 80172c2:	429d      	cmp	r5, r3
 80172c4:	bf38      	it	cc
 80172c6:	461d      	movcc	r5, r3
 80172c8:	0553      	lsls	r3, r2, #21
 80172ca:	d530      	bpl.n	801732e <__ssputs_r+0x9e>
 80172cc:	4629      	mov	r1, r5
 80172ce:	f7ff fa81 	bl	80167d4 <_malloc_r>
 80172d2:	4606      	mov	r6, r0
 80172d4:	b950      	cbnz	r0, 80172ec <__ssputs_r+0x5c>
 80172d6:	230c      	movs	r3, #12
 80172d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172dc:	f8ca 3000 	str.w	r3, [sl]
 80172e0:	89a3      	ldrh	r3, [r4, #12]
 80172e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172e6:	81a3      	strh	r3, [r4, #12]
 80172e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ec:	463a      	mov	r2, r7
 80172ee:	6921      	ldr	r1, [r4, #16]
 80172f0:	f7ff fa11 	bl	8016716 <memcpy>
 80172f4:	89a3      	ldrh	r3, [r4, #12]
 80172f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80172fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172fe:	81a3      	strh	r3, [r4, #12]
 8017300:	6126      	str	r6, [r4, #16]
 8017302:	443e      	add	r6, r7
 8017304:	6026      	str	r6, [r4, #0]
 8017306:	464e      	mov	r6, r9
 8017308:	6165      	str	r5, [r4, #20]
 801730a:	1bed      	subs	r5, r5, r7
 801730c:	60a5      	str	r5, [r4, #8]
 801730e:	454e      	cmp	r6, r9
 8017310:	d900      	bls.n	8017314 <__ssputs_r+0x84>
 8017312:	464e      	mov	r6, r9
 8017314:	4632      	mov	r2, r6
 8017316:	4641      	mov	r1, r8
 8017318:	6820      	ldr	r0, [r4, #0]
 801731a:	f000 fc57 	bl	8017bcc <memmove>
 801731e:	68a3      	ldr	r3, [r4, #8]
 8017320:	2000      	movs	r0, #0
 8017322:	1b9b      	subs	r3, r3, r6
 8017324:	60a3      	str	r3, [r4, #8]
 8017326:	6823      	ldr	r3, [r4, #0]
 8017328:	441e      	add	r6, r3
 801732a:	6026      	str	r6, [r4, #0]
 801732c:	e7dc      	b.n	80172e8 <__ssputs_r+0x58>
 801732e:	462a      	mov	r2, r5
 8017330:	f000 fc65 	bl	8017bfe <_realloc_r>
 8017334:	4606      	mov	r6, r0
 8017336:	2800      	cmp	r0, #0
 8017338:	d1e2      	bne.n	8017300 <__ssputs_r+0x70>
 801733a:	6921      	ldr	r1, [r4, #16]
 801733c:	4650      	mov	r0, sl
 801733e:	f7ff f9fd 	bl	801673c <_free_r>
 8017342:	e7c8      	b.n	80172d6 <__ssputs_r+0x46>

08017344 <_svfiprintf_r>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	461d      	mov	r5, r3
 801734a:	898b      	ldrh	r3, [r1, #12]
 801734c:	b09d      	sub	sp, #116	; 0x74
 801734e:	061f      	lsls	r7, r3, #24
 8017350:	4680      	mov	r8, r0
 8017352:	460c      	mov	r4, r1
 8017354:	4616      	mov	r6, r2
 8017356:	d50f      	bpl.n	8017378 <_svfiprintf_r+0x34>
 8017358:	690b      	ldr	r3, [r1, #16]
 801735a:	b96b      	cbnz	r3, 8017378 <_svfiprintf_r+0x34>
 801735c:	2140      	movs	r1, #64	; 0x40
 801735e:	f7ff fa39 	bl	80167d4 <_malloc_r>
 8017362:	6020      	str	r0, [r4, #0]
 8017364:	6120      	str	r0, [r4, #16]
 8017366:	b928      	cbnz	r0, 8017374 <_svfiprintf_r+0x30>
 8017368:	230c      	movs	r3, #12
 801736a:	f8c8 3000 	str.w	r3, [r8]
 801736e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017372:	e0c8      	b.n	8017506 <_svfiprintf_r+0x1c2>
 8017374:	2340      	movs	r3, #64	; 0x40
 8017376:	6163      	str	r3, [r4, #20]
 8017378:	2300      	movs	r3, #0
 801737a:	9309      	str	r3, [sp, #36]	; 0x24
 801737c:	2320      	movs	r3, #32
 801737e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017382:	2330      	movs	r3, #48	; 0x30
 8017384:	f04f 0b01 	mov.w	fp, #1
 8017388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801738c:	9503      	str	r5, [sp, #12]
 801738e:	4637      	mov	r7, r6
 8017390:	463d      	mov	r5, r7
 8017392:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017396:	b10b      	cbz	r3, 801739c <_svfiprintf_r+0x58>
 8017398:	2b25      	cmp	r3, #37	; 0x25
 801739a:	d13e      	bne.n	801741a <_svfiprintf_r+0xd6>
 801739c:	ebb7 0a06 	subs.w	sl, r7, r6
 80173a0:	d00b      	beq.n	80173ba <_svfiprintf_r+0x76>
 80173a2:	4653      	mov	r3, sl
 80173a4:	4632      	mov	r2, r6
 80173a6:	4621      	mov	r1, r4
 80173a8:	4640      	mov	r0, r8
 80173aa:	f7ff ff71 	bl	8017290 <__ssputs_r>
 80173ae:	3001      	adds	r0, #1
 80173b0:	f000 80a4 	beq.w	80174fc <_svfiprintf_r+0x1b8>
 80173b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173b6:	4453      	add	r3, sl
 80173b8:	9309      	str	r3, [sp, #36]	; 0x24
 80173ba:	783b      	ldrb	r3, [r7, #0]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	f000 809d 	beq.w	80174fc <_svfiprintf_r+0x1b8>
 80173c2:	2300      	movs	r3, #0
 80173c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173cc:	9304      	str	r3, [sp, #16]
 80173ce:	9307      	str	r3, [sp, #28]
 80173d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173d4:	931a      	str	r3, [sp, #104]	; 0x68
 80173d6:	462f      	mov	r7, r5
 80173d8:	2205      	movs	r2, #5
 80173da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80173de:	4850      	ldr	r0, [pc, #320]	; (8017520 <_svfiprintf_r+0x1dc>)
 80173e0:	f000 fbe6 	bl	8017bb0 <memchr>
 80173e4:	9b04      	ldr	r3, [sp, #16]
 80173e6:	b9d0      	cbnz	r0, 801741e <_svfiprintf_r+0xda>
 80173e8:	06d9      	lsls	r1, r3, #27
 80173ea:	bf44      	itt	mi
 80173ec:	2220      	movmi	r2, #32
 80173ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173f2:	071a      	lsls	r2, r3, #28
 80173f4:	bf44      	itt	mi
 80173f6:	222b      	movmi	r2, #43	; 0x2b
 80173f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173fc:	782a      	ldrb	r2, [r5, #0]
 80173fe:	2a2a      	cmp	r2, #42	; 0x2a
 8017400:	d015      	beq.n	801742e <_svfiprintf_r+0xea>
 8017402:	462f      	mov	r7, r5
 8017404:	2000      	movs	r0, #0
 8017406:	250a      	movs	r5, #10
 8017408:	9a07      	ldr	r2, [sp, #28]
 801740a:	4639      	mov	r1, r7
 801740c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017410:	3b30      	subs	r3, #48	; 0x30
 8017412:	2b09      	cmp	r3, #9
 8017414:	d94d      	bls.n	80174b2 <_svfiprintf_r+0x16e>
 8017416:	b1b8      	cbz	r0, 8017448 <_svfiprintf_r+0x104>
 8017418:	e00f      	b.n	801743a <_svfiprintf_r+0xf6>
 801741a:	462f      	mov	r7, r5
 801741c:	e7b8      	b.n	8017390 <_svfiprintf_r+0x4c>
 801741e:	4a40      	ldr	r2, [pc, #256]	; (8017520 <_svfiprintf_r+0x1dc>)
 8017420:	463d      	mov	r5, r7
 8017422:	1a80      	subs	r0, r0, r2
 8017424:	fa0b f000 	lsl.w	r0, fp, r0
 8017428:	4318      	orrs	r0, r3
 801742a:	9004      	str	r0, [sp, #16]
 801742c:	e7d3      	b.n	80173d6 <_svfiprintf_r+0x92>
 801742e:	9a03      	ldr	r2, [sp, #12]
 8017430:	1d11      	adds	r1, r2, #4
 8017432:	6812      	ldr	r2, [r2, #0]
 8017434:	9103      	str	r1, [sp, #12]
 8017436:	2a00      	cmp	r2, #0
 8017438:	db01      	blt.n	801743e <_svfiprintf_r+0xfa>
 801743a:	9207      	str	r2, [sp, #28]
 801743c:	e004      	b.n	8017448 <_svfiprintf_r+0x104>
 801743e:	4252      	negs	r2, r2
 8017440:	f043 0302 	orr.w	r3, r3, #2
 8017444:	9207      	str	r2, [sp, #28]
 8017446:	9304      	str	r3, [sp, #16]
 8017448:	783b      	ldrb	r3, [r7, #0]
 801744a:	2b2e      	cmp	r3, #46	; 0x2e
 801744c:	d10c      	bne.n	8017468 <_svfiprintf_r+0x124>
 801744e:	787b      	ldrb	r3, [r7, #1]
 8017450:	2b2a      	cmp	r3, #42	; 0x2a
 8017452:	d133      	bne.n	80174bc <_svfiprintf_r+0x178>
 8017454:	9b03      	ldr	r3, [sp, #12]
 8017456:	3702      	adds	r7, #2
 8017458:	1d1a      	adds	r2, r3, #4
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	9203      	str	r2, [sp, #12]
 801745e:	2b00      	cmp	r3, #0
 8017460:	bfb8      	it	lt
 8017462:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017466:	9305      	str	r3, [sp, #20]
 8017468:	4d2e      	ldr	r5, [pc, #184]	; (8017524 <_svfiprintf_r+0x1e0>)
 801746a:	2203      	movs	r2, #3
 801746c:	7839      	ldrb	r1, [r7, #0]
 801746e:	4628      	mov	r0, r5
 8017470:	f000 fb9e 	bl	8017bb0 <memchr>
 8017474:	b138      	cbz	r0, 8017486 <_svfiprintf_r+0x142>
 8017476:	2340      	movs	r3, #64	; 0x40
 8017478:	1b40      	subs	r0, r0, r5
 801747a:	fa03 f000 	lsl.w	r0, r3, r0
 801747e:	9b04      	ldr	r3, [sp, #16]
 8017480:	3701      	adds	r7, #1
 8017482:	4303      	orrs	r3, r0
 8017484:	9304      	str	r3, [sp, #16]
 8017486:	7839      	ldrb	r1, [r7, #0]
 8017488:	2206      	movs	r2, #6
 801748a:	4827      	ldr	r0, [pc, #156]	; (8017528 <_svfiprintf_r+0x1e4>)
 801748c:	1c7e      	adds	r6, r7, #1
 801748e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017492:	f000 fb8d 	bl	8017bb0 <memchr>
 8017496:	2800      	cmp	r0, #0
 8017498:	d038      	beq.n	801750c <_svfiprintf_r+0x1c8>
 801749a:	4b24      	ldr	r3, [pc, #144]	; (801752c <_svfiprintf_r+0x1e8>)
 801749c:	bb13      	cbnz	r3, 80174e4 <_svfiprintf_r+0x1a0>
 801749e:	9b03      	ldr	r3, [sp, #12]
 80174a0:	3307      	adds	r3, #7
 80174a2:	f023 0307 	bic.w	r3, r3, #7
 80174a6:	3308      	adds	r3, #8
 80174a8:	9303      	str	r3, [sp, #12]
 80174aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174ac:	444b      	add	r3, r9
 80174ae:	9309      	str	r3, [sp, #36]	; 0x24
 80174b0:	e76d      	b.n	801738e <_svfiprintf_r+0x4a>
 80174b2:	fb05 3202 	mla	r2, r5, r2, r3
 80174b6:	2001      	movs	r0, #1
 80174b8:	460f      	mov	r7, r1
 80174ba:	e7a6      	b.n	801740a <_svfiprintf_r+0xc6>
 80174bc:	2300      	movs	r3, #0
 80174be:	250a      	movs	r5, #10
 80174c0:	4619      	mov	r1, r3
 80174c2:	3701      	adds	r7, #1
 80174c4:	9305      	str	r3, [sp, #20]
 80174c6:	4638      	mov	r0, r7
 80174c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174cc:	3a30      	subs	r2, #48	; 0x30
 80174ce:	2a09      	cmp	r2, #9
 80174d0:	d903      	bls.n	80174da <_svfiprintf_r+0x196>
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d0c8      	beq.n	8017468 <_svfiprintf_r+0x124>
 80174d6:	9105      	str	r1, [sp, #20]
 80174d8:	e7c6      	b.n	8017468 <_svfiprintf_r+0x124>
 80174da:	fb05 2101 	mla	r1, r5, r1, r2
 80174de:	2301      	movs	r3, #1
 80174e0:	4607      	mov	r7, r0
 80174e2:	e7f0      	b.n	80174c6 <_svfiprintf_r+0x182>
 80174e4:	ab03      	add	r3, sp, #12
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	4622      	mov	r2, r4
 80174ea:	4b11      	ldr	r3, [pc, #68]	; (8017530 <_svfiprintf_r+0x1ec>)
 80174ec:	a904      	add	r1, sp, #16
 80174ee:	4640      	mov	r0, r8
 80174f0:	f3af 8000 	nop.w
 80174f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80174f8:	4681      	mov	r9, r0
 80174fa:	d1d6      	bne.n	80174aa <_svfiprintf_r+0x166>
 80174fc:	89a3      	ldrh	r3, [r4, #12]
 80174fe:	065b      	lsls	r3, r3, #25
 8017500:	f53f af35 	bmi.w	801736e <_svfiprintf_r+0x2a>
 8017504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017506:	b01d      	add	sp, #116	; 0x74
 8017508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801750c:	ab03      	add	r3, sp, #12
 801750e:	9300      	str	r3, [sp, #0]
 8017510:	4622      	mov	r2, r4
 8017512:	4b07      	ldr	r3, [pc, #28]	; (8017530 <_svfiprintf_r+0x1ec>)
 8017514:	a904      	add	r1, sp, #16
 8017516:	4640      	mov	r0, r8
 8017518:	f000 f9c0 	bl	801789c <_printf_i>
 801751c:	e7ea      	b.n	80174f4 <_svfiprintf_r+0x1b0>
 801751e:	bf00      	nop
 8017520:	080228da 	.word	0x080228da
 8017524:	080228e0 	.word	0x080228e0
 8017528:	080228e4 	.word	0x080228e4
 801752c:	00000000 	.word	0x00000000
 8017530:	08017291 	.word	0x08017291

08017534 <__sfputc_r>:
 8017534:	6893      	ldr	r3, [r2, #8]
 8017536:	b410      	push	{r4}
 8017538:	3b01      	subs	r3, #1
 801753a:	2b00      	cmp	r3, #0
 801753c:	6093      	str	r3, [r2, #8]
 801753e:	da07      	bge.n	8017550 <__sfputc_r+0x1c>
 8017540:	6994      	ldr	r4, [r2, #24]
 8017542:	42a3      	cmp	r3, r4
 8017544:	db01      	blt.n	801754a <__sfputc_r+0x16>
 8017546:	290a      	cmp	r1, #10
 8017548:	d102      	bne.n	8017550 <__sfputc_r+0x1c>
 801754a:	bc10      	pop	{r4}
 801754c:	f7ff bc72 	b.w	8016e34 <__swbuf_r>
 8017550:	6813      	ldr	r3, [r2, #0]
 8017552:	1c58      	adds	r0, r3, #1
 8017554:	6010      	str	r0, [r2, #0]
 8017556:	7019      	strb	r1, [r3, #0]
 8017558:	4608      	mov	r0, r1
 801755a:	bc10      	pop	{r4}
 801755c:	4770      	bx	lr

0801755e <__sfputs_r>:
 801755e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017560:	4606      	mov	r6, r0
 8017562:	460f      	mov	r7, r1
 8017564:	4614      	mov	r4, r2
 8017566:	18d5      	adds	r5, r2, r3
 8017568:	42ac      	cmp	r4, r5
 801756a:	d101      	bne.n	8017570 <__sfputs_r+0x12>
 801756c:	2000      	movs	r0, #0
 801756e:	e007      	b.n	8017580 <__sfputs_r+0x22>
 8017570:	463a      	mov	r2, r7
 8017572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017576:	4630      	mov	r0, r6
 8017578:	f7ff ffdc 	bl	8017534 <__sfputc_r>
 801757c:	1c43      	adds	r3, r0, #1
 801757e:	d1f3      	bne.n	8017568 <__sfputs_r+0xa>
 8017580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017584 <_vfiprintf_r>:
 8017584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017588:	460c      	mov	r4, r1
 801758a:	b09d      	sub	sp, #116	; 0x74
 801758c:	4617      	mov	r7, r2
 801758e:	461d      	mov	r5, r3
 8017590:	4606      	mov	r6, r0
 8017592:	b118      	cbz	r0, 801759c <_vfiprintf_r+0x18>
 8017594:	6983      	ldr	r3, [r0, #24]
 8017596:	b90b      	cbnz	r3, 801759c <_vfiprintf_r+0x18>
 8017598:	f7fe ff44 	bl	8016424 <__sinit>
 801759c:	4b7c      	ldr	r3, [pc, #496]	; (8017790 <_vfiprintf_r+0x20c>)
 801759e:	429c      	cmp	r4, r3
 80175a0:	d158      	bne.n	8017654 <_vfiprintf_r+0xd0>
 80175a2:	6874      	ldr	r4, [r6, #4]
 80175a4:	89a3      	ldrh	r3, [r4, #12]
 80175a6:	0718      	lsls	r0, r3, #28
 80175a8:	d55e      	bpl.n	8017668 <_vfiprintf_r+0xe4>
 80175aa:	6923      	ldr	r3, [r4, #16]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d05b      	beq.n	8017668 <_vfiprintf_r+0xe4>
 80175b0:	2300      	movs	r3, #0
 80175b2:	9309      	str	r3, [sp, #36]	; 0x24
 80175b4:	2320      	movs	r3, #32
 80175b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80175ba:	2330      	movs	r3, #48	; 0x30
 80175bc:	f04f 0b01 	mov.w	fp, #1
 80175c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175c4:	9503      	str	r5, [sp, #12]
 80175c6:	46b8      	mov	r8, r7
 80175c8:	4645      	mov	r5, r8
 80175ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80175ce:	b10b      	cbz	r3, 80175d4 <_vfiprintf_r+0x50>
 80175d0:	2b25      	cmp	r3, #37	; 0x25
 80175d2:	d154      	bne.n	801767e <_vfiprintf_r+0xfa>
 80175d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80175d8:	d00b      	beq.n	80175f2 <_vfiprintf_r+0x6e>
 80175da:	4653      	mov	r3, sl
 80175dc:	463a      	mov	r2, r7
 80175de:	4621      	mov	r1, r4
 80175e0:	4630      	mov	r0, r6
 80175e2:	f7ff ffbc 	bl	801755e <__sfputs_r>
 80175e6:	3001      	adds	r0, #1
 80175e8:	f000 80c2 	beq.w	8017770 <_vfiprintf_r+0x1ec>
 80175ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ee:	4453      	add	r3, sl
 80175f0:	9309      	str	r3, [sp, #36]	; 0x24
 80175f2:	f898 3000 	ldrb.w	r3, [r8]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	f000 80ba 	beq.w	8017770 <_vfiprintf_r+0x1ec>
 80175fc:	2300      	movs	r3, #0
 80175fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017606:	9304      	str	r3, [sp, #16]
 8017608:	9307      	str	r3, [sp, #28]
 801760a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801760e:	931a      	str	r3, [sp, #104]	; 0x68
 8017610:	46a8      	mov	r8, r5
 8017612:	2205      	movs	r2, #5
 8017614:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017618:	485e      	ldr	r0, [pc, #376]	; (8017794 <_vfiprintf_r+0x210>)
 801761a:	f000 fac9 	bl	8017bb0 <memchr>
 801761e:	9b04      	ldr	r3, [sp, #16]
 8017620:	bb78      	cbnz	r0, 8017682 <_vfiprintf_r+0xfe>
 8017622:	06d9      	lsls	r1, r3, #27
 8017624:	bf44      	itt	mi
 8017626:	2220      	movmi	r2, #32
 8017628:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801762c:	071a      	lsls	r2, r3, #28
 801762e:	bf44      	itt	mi
 8017630:	222b      	movmi	r2, #43	; 0x2b
 8017632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017636:	782a      	ldrb	r2, [r5, #0]
 8017638:	2a2a      	cmp	r2, #42	; 0x2a
 801763a:	d02a      	beq.n	8017692 <_vfiprintf_r+0x10e>
 801763c:	46a8      	mov	r8, r5
 801763e:	2000      	movs	r0, #0
 8017640:	250a      	movs	r5, #10
 8017642:	9a07      	ldr	r2, [sp, #28]
 8017644:	4641      	mov	r1, r8
 8017646:	f811 3b01 	ldrb.w	r3, [r1], #1
 801764a:	3b30      	subs	r3, #48	; 0x30
 801764c:	2b09      	cmp	r3, #9
 801764e:	d969      	bls.n	8017724 <_vfiprintf_r+0x1a0>
 8017650:	b360      	cbz	r0, 80176ac <_vfiprintf_r+0x128>
 8017652:	e024      	b.n	801769e <_vfiprintf_r+0x11a>
 8017654:	4b50      	ldr	r3, [pc, #320]	; (8017798 <_vfiprintf_r+0x214>)
 8017656:	429c      	cmp	r4, r3
 8017658:	d101      	bne.n	801765e <_vfiprintf_r+0xda>
 801765a:	68b4      	ldr	r4, [r6, #8]
 801765c:	e7a2      	b.n	80175a4 <_vfiprintf_r+0x20>
 801765e:	4b4f      	ldr	r3, [pc, #316]	; (801779c <_vfiprintf_r+0x218>)
 8017660:	429c      	cmp	r4, r3
 8017662:	bf08      	it	eq
 8017664:	68f4      	ldreq	r4, [r6, #12]
 8017666:	e79d      	b.n	80175a4 <_vfiprintf_r+0x20>
 8017668:	4621      	mov	r1, r4
 801766a:	4630      	mov	r0, r6
 801766c:	f7ff fc46 	bl	8016efc <__swsetup_r>
 8017670:	2800      	cmp	r0, #0
 8017672:	d09d      	beq.n	80175b0 <_vfiprintf_r+0x2c>
 8017674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017678:	b01d      	add	sp, #116	; 0x74
 801767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801767e:	46a8      	mov	r8, r5
 8017680:	e7a2      	b.n	80175c8 <_vfiprintf_r+0x44>
 8017682:	4a44      	ldr	r2, [pc, #272]	; (8017794 <_vfiprintf_r+0x210>)
 8017684:	4645      	mov	r5, r8
 8017686:	1a80      	subs	r0, r0, r2
 8017688:	fa0b f000 	lsl.w	r0, fp, r0
 801768c:	4318      	orrs	r0, r3
 801768e:	9004      	str	r0, [sp, #16]
 8017690:	e7be      	b.n	8017610 <_vfiprintf_r+0x8c>
 8017692:	9a03      	ldr	r2, [sp, #12]
 8017694:	1d11      	adds	r1, r2, #4
 8017696:	6812      	ldr	r2, [r2, #0]
 8017698:	9103      	str	r1, [sp, #12]
 801769a:	2a00      	cmp	r2, #0
 801769c:	db01      	blt.n	80176a2 <_vfiprintf_r+0x11e>
 801769e:	9207      	str	r2, [sp, #28]
 80176a0:	e004      	b.n	80176ac <_vfiprintf_r+0x128>
 80176a2:	4252      	negs	r2, r2
 80176a4:	f043 0302 	orr.w	r3, r3, #2
 80176a8:	9207      	str	r2, [sp, #28]
 80176aa:	9304      	str	r3, [sp, #16]
 80176ac:	f898 3000 	ldrb.w	r3, [r8]
 80176b0:	2b2e      	cmp	r3, #46	; 0x2e
 80176b2:	d10e      	bne.n	80176d2 <_vfiprintf_r+0x14e>
 80176b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80176b8:	2b2a      	cmp	r3, #42	; 0x2a
 80176ba:	d138      	bne.n	801772e <_vfiprintf_r+0x1aa>
 80176bc:	9b03      	ldr	r3, [sp, #12]
 80176be:	f108 0802 	add.w	r8, r8, #2
 80176c2:	1d1a      	adds	r2, r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	9203      	str	r2, [sp, #12]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	bfb8      	it	lt
 80176cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80176d0:	9305      	str	r3, [sp, #20]
 80176d2:	4d33      	ldr	r5, [pc, #204]	; (80177a0 <_vfiprintf_r+0x21c>)
 80176d4:	2203      	movs	r2, #3
 80176d6:	f898 1000 	ldrb.w	r1, [r8]
 80176da:	4628      	mov	r0, r5
 80176dc:	f000 fa68 	bl	8017bb0 <memchr>
 80176e0:	b140      	cbz	r0, 80176f4 <_vfiprintf_r+0x170>
 80176e2:	2340      	movs	r3, #64	; 0x40
 80176e4:	1b40      	subs	r0, r0, r5
 80176e6:	fa03 f000 	lsl.w	r0, r3, r0
 80176ea:	9b04      	ldr	r3, [sp, #16]
 80176ec:	f108 0801 	add.w	r8, r8, #1
 80176f0:	4303      	orrs	r3, r0
 80176f2:	9304      	str	r3, [sp, #16]
 80176f4:	f898 1000 	ldrb.w	r1, [r8]
 80176f8:	2206      	movs	r2, #6
 80176fa:	482a      	ldr	r0, [pc, #168]	; (80177a4 <_vfiprintf_r+0x220>)
 80176fc:	f108 0701 	add.w	r7, r8, #1
 8017700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017704:	f000 fa54 	bl	8017bb0 <memchr>
 8017708:	2800      	cmp	r0, #0
 801770a:	d037      	beq.n	801777c <_vfiprintf_r+0x1f8>
 801770c:	4b26      	ldr	r3, [pc, #152]	; (80177a8 <_vfiprintf_r+0x224>)
 801770e:	bb1b      	cbnz	r3, 8017758 <_vfiprintf_r+0x1d4>
 8017710:	9b03      	ldr	r3, [sp, #12]
 8017712:	3307      	adds	r3, #7
 8017714:	f023 0307 	bic.w	r3, r3, #7
 8017718:	3308      	adds	r3, #8
 801771a:	9303      	str	r3, [sp, #12]
 801771c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801771e:	444b      	add	r3, r9
 8017720:	9309      	str	r3, [sp, #36]	; 0x24
 8017722:	e750      	b.n	80175c6 <_vfiprintf_r+0x42>
 8017724:	fb05 3202 	mla	r2, r5, r2, r3
 8017728:	2001      	movs	r0, #1
 801772a:	4688      	mov	r8, r1
 801772c:	e78a      	b.n	8017644 <_vfiprintf_r+0xc0>
 801772e:	2300      	movs	r3, #0
 8017730:	250a      	movs	r5, #10
 8017732:	4619      	mov	r1, r3
 8017734:	f108 0801 	add.w	r8, r8, #1
 8017738:	9305      	str	r3, [sp, #20]
 801773a:	4640      	mov	r0, r8
 801773c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017740:	3a30      	subs	r2, #48	; 0x30
 8017742:	2a09      	cmp	r2, #9
 8017744:	d903      	bls.n	801774e <_vfiprintf_r+0x1ca>
 8017746:	2b00      	cmp	r3, #0
 8017748:	d0c3      	beq.n	80176d2 <_vfiprintf_r+0x14e>
 801774a:	9105      	str	r1, [sp, #20]
 801774c:	e7c1      	b.n	80176d2 <_vfiprintf_r+0x14e>
 801774e:	fb05 2101 	mla	r1, r5, r1, r2
 8017752:	2301      	movs	r3, #1
 8017754:	4680      	mov	r8, r0
 8017756:	e7f0      	b.n	801773a <_vfiprintf_r+0x1b6>
 8017758:	ab03      	add	r3, sp, #12
 801775a:	9300      	str	r3, [sp, #0]
 801775c:	4622      	mov	r2, r4
 801775e:	4b13      	ldr	r3, [pc, #76]	; (80177ac <_vfiprintf_r+0x228>)
 8017760:	a904      	add	r1, sp, #16
 8017762:	4630      	mov	r0, r6
 8017764:	f3af 8000 	nop.w
 8017768:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801776c:	4681      	mov	r9, r0
 801776e:	d1d5      	bne.n	801771c <_vfiprintf_r+0x198>
 8017770:	89a3      	ldrh	r3, [r4, #12]
 8017772:	065b      	lsls	r3, r3, #25
 8017774:	f53f af7e 	bmi.w	8017674 <_vfiprintf_r+0xf0>
 8017778:	9809      	ldr	r0, [sp, #36]	; 0x24
 801777a:	e77d      	b.n	8017678 <_vfiprintf_r+0xf4>
 801777c:	ab03      	add	r3, sp, #12
 801777e:	9300      	str	r3, [sp, #0]
 8017780:	4622      	mov	r2, r4
 8017782:	4b0a      	ldr	r3, [pc, #40]	; (80177ac <_vfiprintf_r+0x228>)
 8017784:	a904      	add	r1, sp, #16
 8017786:	4630      	mov	r0, r6
 8017788:	f000 f888 	bl	801789c <_printf_i>
 801778c:	e7ec      	b.n	8017768 <_vfiprintf_r+0x1e4>
 801778e:	bf00      	nop
 8017790:	08022890 	.word	0x08022890
 8017794:	080228da 	.word	0x080228da
 8017798:	080228b0 	.word	0x080228b0
 801779c:	08022870 	.word	0x08022870
 80177a0:	080228e0 	.word	0x080228e0
 80177a4:	080228e4 	.word	0x080228e4
 80177a8:	00000000 	.word	0x00000000
 80177ac:	0801755f 	.word	0x0801755f

080177b0 <_printf_common>:
 80177b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177b4:	4691      	mov	r9, r2
 80177b6:	461f      	mov	r7, r3
 80177b8:	688a      	ldr	r2, [r1, #8]
 80177ba:	690b      	ldr	r3, [r1, #16]
 80177bc:	4606      	mov	r6, r0
 80177be:	4293      	cmp	r3, r2
 80177c0:	bfb8      	it	lt
 80177c2:	4613      	movlt	r3, r2
 80177c4:	f8c9 3000 	str.w	r3, [r9]
 80177c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80177cc:	460c      	mov	r4, r1
 80177ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177d2:	b112      	cbz	r2, 80177da <_printf_common+0x2a>
 80177d4:	3301      	adds	r3, #1
 80177d6:	f8c9 3000 	str.w	r3, [r9]
 80177da:	6823      	ldr	r3, [r4, #0]
 80177dc:	0699      	lsls	r1, r3, #26
 80177de:	bf42      	ittt	mi
 80177e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80177e4:	3302      	addmi	r3, #2
 80177e6:	f8c9 3000 	strmi.w	r3, [r9]
 80177ea:	6825      	ldr	r5, [r4, #0]
 80177ec:	f015 0506 	ands.w	r5, r5, #6
 80177f0:	d107      	bne.n	8017802 <_printf_common+0x52>
 80177f2:	f104 0a19 	add.w	sl, r4, #25
 80177f6:	68e3      	ldr	r3, [r4, #12]
 80177f8:	f8d9 2000 	ldr.w	r2, [r9]
 80177fc:	1a9b      	subs	r3, r3, r2
 80177fe:	42ab      	cmp	r3, r5
 8017800:	dc29      	bgt.n	8017856 <_printf_common+0xa6>
 8017802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017806:	6822      	ldr	r2, [r4, #0]
 8017808:	3300      	adds	r3, #0
 801780a:	bf18      	it	ne
 801780c:	2301      	movne	r3, #1
 801780e:	0692      	lsls	r2, r2, #26
 8017810:	d42e      	bmi.n	8017870 <_printf_common+0xc0>
 8017812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017816:	4639      	mov	r1, r7
 8017818:	4630      	mov	r0, r6
 801781a:	47c0      	blx	r8
 801781c:	3001      	adds	r0, #1
 801781e:	d021      	beq.n	8017864 <_printf_common+0xb4>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	68e5      	ldr	r5, [r4, #12]
 8017824:	f003 0306 	and.w	r3, r3, #6
 8017828:	2b04      	cmp	r3, #4
 801782a:	bf18      	it	ne
 801782c:	2500      	movne	r5, #0
 801782e:	f8d9 2000 	ldr.w	r2, [r9]
 8017832:	f04f 0900 	mov.w	r9, #0
 8017836:	bf08      	it	eq
 8017838:	1aad      	subeq	r5, r5, r2
 801783a:	68a3      	ldr	r3, [r4, #8]
 801783c:	6922      	ldr	r2, [r4, #16]
 801783e:	bf08      	it	eq
 8017840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017844:	4293      	cmp	r3, r2
 8017846:	bfc4      	itt	gt
 8017848:	1a9b      	subgt	r3, r3, r2
 801784a:	18ed      	addgt	r5, r5, r3
 801784c:	341a      	adds	r4, #26
 801784e:	454d      	cmp	r5, r9
 8017850:	d11a      	bne.n	8017888 <_printf_common+0xd8>
 8017852:	2000      	movs	r0, #0
 8017854:	e008      	b.n	8017868 <_printf_common+0xb8>
 8017856:	2301      	movs	r3, #1
 8017858:	4652      	mov	r2, sl
 801785a:	4639      	mov	r1, r7
 801785c:	4630      	mov	r0, r6
 801785e:	47c0      	blx	r8
 8017860:	3001      	adds	r0, #1
 8017862:	d103      	bne.n	801786c <_printf_common+0xbc>
 8017864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801786c:	3501      	adds	r5, #1
 801786e:	e7c2      	b.n	80177f6 <_printf_common+0x46>
 8017870:	2030      	movs	r0, #48	; 0x30
 8017872:	18e1      	adds	r1, r4, r3
 8017874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017878:	1c5a      	adds	r2, r3, #1
 801787a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801787e:	4422      	add	r2, r4
 8017880:	3302      	adds	r3, #2
 8017882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017886:	e7c4      	b.n	8017812 <_printf_common+0x62>
 8017888:	2301      	movs	r3, #1
 801788a:	4622      	mov	r2, r4
 801788c:	4639      	mov	r1, r7
 801788e:	4630      	mov	r0, r6
 8017890:	47c0      	blx	r8
 8017892:	3001      	adds	r0, #1
 8017894:	d0e6      	beq.n	8017864 <_printf_common+0xb4>
 8017896:	f109 0901 	add.w	r9, r9, #1
 801789a:	e7d8      	b.n	801784e <_printf_common+0x9e>

0801789c <_printf_i>:
 801789c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80178a4:	460c      	mov	r4, r1
 80178a6:	7e09      	ldrb	r1, [r1, #24]
 80178a8:	b085      	sub	sp, #20
 80178aa:	296e      	cmp	r1, #110	; 0x6e
 80178ac:	4617      	mov	r7, r2
 80178ae:	4606      	mov	r6, r0
 80178b0:	4698      	mov	r8, r3
 80178b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80178b4:	f000 80b3 	beq.w	8017a1e <_printf_i+0x182>
 80178b8:	d822      	bhi.n	8017900 <_printf_i+0x64>
 80178ba:	2963      	cmp	r1, #99	; 0x63
 80178bc:	d036      	beq.n	801792c <_printf_i+0x90>
 80178be:	d80a      	bhi.n	80178d6 <_printf_i+0x3a>
 80178c0:	2900      	cmp	r1, #0
 80178c2:	f000 80b9 	beq.w	8017a38 <_printf_i+0x19c>
 80178c6:	2958      	cmp	r1, #88	; 0x58
 80178c8:	f000 8083 	beq.w	80179d2 <_printf_i+0x136>
 80178cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80178d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80178d4:	e032      	b.n	801793c <_printf_i+0xa0>
 80178d6:	2964      	cmp	r1, #100	; 0x64
 80178d8:	d001      	beq.n	80178de <_printf_i+0x42>
 80178da:	2969      	cmp	r1, #105	; 0x69
 80178dc:	d1f6      	bne.n	80178cc <_printf_i+0x30>
 80178de:	6820      	ldr	r0, [r4, #0]
 80178e0:	6813      	ldr	r3, [r2, #0]
 80178e2:	0605      	lsls	r5, r0, #24
 80178e4:	f103 0104 	add.w	r1, r3, #4
 80178e8:	d52a      	bpl.n	8017940 <_printf_i+0xa4>
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	6011      	str	r1, [r2, #0]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	da03      	bge.n	80178fa <_printf_i+0x5e>
 80178f2:	222d      	movs	r2, #45	; 0x2d
 80178f4:	425b      	negs	r3, r3
 80178f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80178fa:	486f      	ldr	r0, [pc, #444]	; (8017ab8 <_printf_i+0x21c>)
 80178fc:	220a      	movs	r2, #10
 80178fe:	e039      	b.n	8017974 <_printf_i+0xd8>
 8017900:	2973      	cmp	r1, #115	; 0x73
 8017902:	f000 809d 	beq.w	8017a40 <_printf_i+0x1a4>
 8017906:	d808      	bhi.n	801791a <_printf_i+0x7e>
 8017908:	296f      	cmp	r1, #111	; 0x6f
 801790a:	d020      	beq.n	801794e <_printf_i+0xb2>
 801790c:	2970      	cmp	r1, #112	; 0x70
 801790e:	d1dd      	bne.n	80178cc <_printf_i+0x30>
 8017910:	6823      	ldr	r3, [r4, #0]
 8017912:	f043 0320 	orr.w	r3, r3, #32
 8017916:	6023      	str	r3, [r4, #0]
 8017918:	e003      	b.n	8017922 <_printf_i+0x86>
 801791a:	2975      	cmp	r1, #117	; 0x75
 801791c:	d017      	beq.n	801794e <_printf_i+0xb2>
 801791e:	2978      	cmp	r1, #120	; 0x78
 8017920:	d1d4      	bne.n	80178cc <_printf_i+0x30>
 8017922:	2378      	movs	r3, #120	; 0x78
 8017924:	4865      	ldr	r0, [pc, #404]	; (8017abc <_printf_i+0x220>)
 8017926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801792a:	e055      	b.n	80179d8 <_printf_i+0x13c>
 801792c:	6813      	ldr	r3, [r2, #0]
 801792e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017932:	1d19      	adds	r1, r3, #4
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	6011      	str	r1, [r2, #0]
 8017938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801793c:	2301      	movs	r3, #1
 801793e:	e08c      	b.n	8017a5a <_printf_i+0x1be>
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017946:	6011      	str	r1, [r2, #0]
 8017948:	bf18      	it	ne
 801794a:	b21b      	sxthne	r3, r3
 801794c:	e7cf      	b.n	80178ee <_printf_i+0x52>
 801794e:	6813      	ldr	r3, [r2, #0]
 8017950:	6825      	ldr	r5, [r4, #0]
 8017952:	1d18      	adds	r0, r3, #4
 8017954:	6010      	str	r0, [r2, #0]
 8017956:	0628      	lsls	r0, r5, #24
 8017958:	d501      	bpl.n	801795e <_printf_i+0xc2>
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	e002      	b.n	8017964 <_printf_i+0xc8>
 801795e:	0668      	lsls	r0, r5, #25
 8017960:	d5fb      	bpl.n	801795a <_printf_i+0xbe>
 8017962:	881b      	ldrh	r3, [r3, #0]
 8017964:	296f      	cmp	r1, #111	; 0x6f
 8017966:	bf14      	ite	ne
 8017968:	220a      	movne	r2, #10
 801796a:	2208      	moveq	r2, #8
 801796c:	4852      	ldr	r0, [pc, #328]	; (8017ab8 <_printf_i+0x21c>)
 801796e:	2100      	movs	r1, #0
 8017970:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017974:	6865      	ldr	r5, [r4, #4]
 8017976:	2d00      	cmp	r5, #0
 8017978:	60a5      	str	r5, [r4, #8]
 801797a:	f2c0 8095 	blt.w	8017aa8 <_printf_i+0x20c>
 801797e:	6821      	ldr	r1, [r4, #0]
 8017980:	f021 0104 	bic.w	r1, r1, #4
 8017984:	6021      	str	r1, [r4, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d13d      	bne.n	8017a06 <_printf_i+0x16a>
 801798a:	2d00      	cmp	r5, #0
 801798c:	f040 808e 	bne.w	8017aac <_printf_i+0x210>
 8017990:	4665      	mov	r5, ip
 8017992:	2a08      	cmp	r2, #8
 8017994:	d10b      	bne.n	80179ae <_printf_i+0x112>
 8017996:	6823      	ldr	r3, [r4, #0]
 8017998:	07db      	lsls	r3, r3, #31
 801799a:	d508      	bpl.n	80179ae <_printf_i+0x112>
 801799c:	6923      	ldr	r3, [r4, #16]
 801799e:	6862      	ldr	r2, [r4, #4]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	bfde      	ittt	le
 80179a4:	2330      	movle	r3, #48	; 0x30
 80179a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80179aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80179ae:	ebac 0305 	sub.w	r3, ip, r5
 80179b2:	6123      	str	r3, [r4, #16]
 80179b4:	f8cd 8000 	str.w	r8, [sp]
 80179b8:	463b      	mov	r3, r7
 80179ba:	aa03      	add	r2, sp, #12
 80179bc:	4621      	mov	r1, r4
 80179be:	4630      	mov	r0, r6
 80179c0:	f7ff fef6 	bl	80177b0 <_printf_common>
 80179c4:	3001      	adds	r0, #1
 80179c6:	d14d      	bne.n	8017a64 <_printf_i+0x1c8>
 80179c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179cc:	b005      	add	sp, #20
 80179ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179d2:	4839      	ldr	r0, [pc, #228]	; (8017ab8 <_printf_i+0x21c>)
 80179d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80179d8:	6813      	ldr	r3, [r2, #0]
 80179da:	6821      	ldr	r1, [r4, #0]
 80179dc:	1d1d      	adds	r5, r3, #4
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	6015      	str	r5, [r2, #0]
 80179e2:	060a      	lsls	r2, r1, #24
 80179e4:	d50b      	bpl.n	80179fe <_printf_i+0x162>
 80179e6:	07ca      	lsls	r2, r1, #31
 80179e8:	bf44      	itt	mi
 80179ea:	f041 0120 	orrmi.w	r1, r1, #32
 80179ee:	6021      	strmi	r1, [r4, #0]
 80179f0:	b91b      	cbnz	r3, 80179fa <_printf_i+0x15e>
 80179f2:	6822      	ldr	r2, [r4, #0]
 80179f4:	f022 0220 	bic.w	r2, r2, #32
 80179f8:	6022      	str	r2, [r4, #0]
 80179fa:	2210      	movs	r2, #16
 80179fc:	e7b7      	b.n	801796e <_printf_i+0xd2>
 80179fe:	064d      	lsls	r5, r1, #25
 8017a00:	bf48      	it	mi
 8017a02:	b29b      	uxthmi	r3, r3
 8017a04:	e7ef      	b.n	80179e6 <_printf_i+0x14a>
 8017a06:	4665      	mov	r5, ip
 8017a08:	fbb3 f1f2 	udiv	r1, r3, r2
 8017a0c:	fb02 3311 	mls	r3, r2, r1, r3
 8017a10:	5cc3      	ldrb	r3, [r0, r3]
 8017a12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017a16:	460b      	mov	r3, r1
 8017a18:	2900      	cmp	r1, #0
 8017a1a:	d1f5      	bne.n	8017a08 <_printf_i+0x16c>
 8017a1c:	e7b9      	b.n	8017992 <_printf_i+0xf6>
 8017a1e:	6813      	ldr	r3, [r2, #0]
 8017a20:	6825      	ldr	r5, [r4, #0]
 8017a22:	1d18      	adds	r0, r3, #4
 8017a24:	6961      	ldr	r1, [r4, #20]
 8017a26:	6010      	str	r0, [r2, #0]
 8017a28:	0628      	lsls	r0, r5, #24
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	d501      	bpl.n	8017a32 <_printf_i+0x196>
 8017a2e:	6019      	str	r1, [r3, #0]
 8017a30:	e002      	b.n	8017a38 <_printf_i+0x19c>
 8017a32:	066a      	lsls	r2, r5, #25
 8017a34:	d5fb      	bpl.n	8017a2e <_printf_i+0x192>
 8017a36:	8019      	strh	r1, [r3, #0]
 8017a38:	2300      	movs	r3, #0
 8017a3a:	4665      	mov	r5, ip
 8017a3c:	6123      	str	r3, [r4, #16]
 8017a3e:	e7b9      	b.n	80179b4 <_printf_i+0x118>
 8017a40:	6813      	ldr	r3, [r2, #0]
 8017a42:	1d19      	adds	r1, r3, #4
 8017a44:	6011      	str	r1, [r2, #0]
 8017a46:	681d      	ldr	r5, [r3, #0]
 8017a48:	6862      	ldr	r2, [r4, #4]
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	f000 f8af 	bl	8017bb0 <memchr>
 8017a52:	b108      	cbz	r0, 8017a58 <_printf_i+0x1bc>
 8017a54:	1b40      	subs	r0, r0, r5
 8017a56:	6060      	str	r0, [r4, #4]
 8017a58:	6863      	ldr	r3, [r4, #4]
 8017a5a:	6123      	str	r3, [r4, #16]
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a62:	e7a7      	b.n	80179b4 <_printf_i+0x118>
 8017a64:	6923      	ldr	r3, [r4, #16]
 8017a66:	462a      	mov	r2, r5
 8017a68:	4639      	mov	r1, r7
 8017a6a:	4630      	mov	r0, r6
 8017a6c:	47c0      	blx	r8
 8017a6e:	3001      	adds	r0, #1
 8017a70:	d0aa      	beq.n	80179c8 <_printf_i+0x12c>
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	079b      	lsls	r3, r3, #30
 8017a76:	d413      	bmi.n	8017aa0 <_printf_i+0x204>
 8017a78:	68e0      	ldr	r0, [r4, #12]
 8017a7a:	9b03      	ldr	r3, [sp, #12]
 8017a7c:	4298      	cmp	r0, r3
 8017a7e:	bfb8      	it	lt
 8017a80:	4618      	movlt	r0, r3
 8017a82:	e7a3      	b.n	80179cc <_printf_i+0x130>
 8017a84:	2301      	movs	r3, #1
 8017a86:	464a      	mov	r2, r9
 8017a88:	4639      	mov	r1, r7
 8017a8a:	4630      	mov	r0, r6
 8017a8c:	47c0      	blx	r8
 8017a8e:	3001      	adds	r0, #1
 8017a90:	d09a      	beq.n	80179c8 <_printf_i+0x12c>
 8017a92:	3501      	adds	r5, #1
 8017a94:	68e3      	ldr	r3, [r4, #12]
 8017a96:	9a03      	ldr	r2, [sp, #12]
 8017a98:	1a9b      	subs	r3, r3, r2
 8017a9a:	42ab      	cmp	r3, r5
 8017a9c:	dcf2      	bgt.n	8017a84 <_printf_i+0x1e8>
 8017a9e:	e7eb      	b.n	8017a78 <_printf_i+0x1dc>
 8017aa0:	2500      	movs	r5, #0
 8017aa2:	f104 0919 	add.w	r9, r4, #25
 8017aa6:	e7f5      	b.n	8017a94 <_printf_i+0x1f8>
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d1ac      	bne.n	8017a06 <_printf_i+0x16a>
 8017aac:	7803      	ldrb	r3, [r0, #0]
 8017aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ab6:	e76c      	b.n	8017992 <_printf_i+0xf6>
 8017ab8:	080228eb 	.word	0x080228eb
 8017abc:	080228fc 	.word	0x080228fc

08017ac0 <_putc_r>:
 8017ac0:	b570      	push	{r4, r5, r6, lr}
 8017ac2:	460d      	mov	r5, r1
 8017ac4:	4614      	mov	r4, r2
 8017ac6:	4606      	mov	r6, r0
 8017ac8:	b118      	cbz	r0, 8017ad2 <_putc_r+0x12>
 8017aca:	6983      	ldr	r3, [r0, #24]
 8017acc:	b90b      	cbnz	r3, 8017ad2 <_putc_r+0x12>
 8017ace:	f7fe fca9 	bl	8016424 <__sinit>
 8017ad2:	4b13      	ldr	r3, [pc, #76]	; (8017b20 <_putc_r+0x60>)
 8017ad4:	429c      	cmp	r4, r3
 8017ad6:	d112      	bne.n	8017afe <_putc_r+0x3e>
 8017ad8:	6874      	ldr	r4, [r6, #4]
 8017ada:	68a3      	ldr	r3, [r4, #8]
 8017adc:	3b01      	subs	r3, #1
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	60a3      	str	r3, [r4, #8]
 8017ae2:	da16      	bge.n	8017b12 <_putc_r+0x52>
 8017ae4:	69a2      	ldr	r2, [r4, #24]
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	db02      	blt.n	8017af0 <_putc_r+0x30>
 8017aea:	b2eb      	uxtb	r3, r5
 8017aec:	2b0a      	cmp	r3, #10
 8017aee:	d110      	bne.n	8017b12 <_putc_r+0x52>
 8017af0:	4622      	mov	r2, r4
 8017af2:	4629      	mov	r1, r5
 8017af4:	4630      	mov	r0, r6
 8017af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017afa:	f7ff b99b 	b.w	8016e34 <__swbuf_r>
 8017afe:	4b09      	ldr	r3, [pc, #36]	; (8017b24 <_putc_r+0x64>)
 8017b00:	429c      	cmp	r4, r3
 8017b02:	d101      	bne.n	8017b08 <_putc_r+0x48>
 8017b04:	68b4      	ldr	r4, [r6, #8]
 8017b06:	e7e8      	b.n	8017ada <_putc_r+0x1a>
 8017b08:	4b07      	ldr	r3, [pc, #28]	; (8017b28 <_putc_r+0x68>)
 8017b0a:	429c      	cmp	r4, r3
 8017b0c:	bf08      	it	eq
 8017b0e:	68f4      	ldreq	r4, [r6, #12]
 8017b10:	e7e3      	b.n	8017ada <_putc_r+0x1a>
 8017b12:	6823      	ldr	r3, [r4, #0]
 8017b14:	b2e8      	uxtb	r0, r5
 8017b16:	1c5a      	adds	r2, r3, #1
 8017b18:	6022      	str	r2, [r4, #0]
 8017b1a:	701d      	strb	r5, [r3, #0]
 8017b1c:	bd70      	pop	{r4, r5, r6, pc}
 8017b1e:	bf00      	nop
 8017b20:	08022890 	.word	0x08022890
 8017b24:	080228b0 	.word	0x080228b0
 8017b28:	08022870 	.word	0x08022870

08017b2c <_read_r>:
 8017b2c:	b538      	push	{r3, r4, r5, lr}
 8017b2e:	4605      	mov	r5, r0
 8017b30:	4608      	mov	r0, r1
 8017b32:	4611      	mov	r1, r2
 8017b34:	2200      	movs	r2, #0
 8017b36:	4c05      	ldr	r4, [pc, #20]	; (8017b4c <_read_r+0x20>)
 8017b38:	6022      	str	r2, [r4, #0]
 8017b3a:	461a      	mov	r2, r3
 8017b3c:	f7e9 fe4a 	bl	80017d4 <_read>
 8017b40:	1c43      	adds	r3, r0, #1
 8017b42:	d102      	bne.n	8017b4a <_read_r+0x1e>
 8017b44:	6823      	ldr	r3, [r4, #0]
 8017b46:	b103      	cbz	r3, 8017b4a <_read_r+0x1e>
 8017b48:	602b      	str	r3, [r5, #0]
 8017b4a:	bd38      	pop	{r3, r4, r5, pc}
 8017b4c:	2000e0bc 	.word	0x2000e0bc

08017b50 <__ascii_wctomb>:
 8017b50:	b149      	cbz	r1, 8017b66 <__ascii_wctomb+0x16>
 8017b52:	2aff      	cmp	r2, #255	; 0xff
 8017b54:	bf8b      	itete	hi
 8017b56:	238a      	movhi	r3, #138	; 0x8a
 8017b58:	700a      	strbls	r2, [r1, #0]
 8017b5a:	6003      	strhi	r3, [r0, #0]
 8017b5c:	2001      	movls	r0, #1
 8017b5e:	bf88      	it	hi
 8017b60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017b64:	4770      	bx	lr
 8017b66:	4608      	mov	r0, r1
 8017b68:	4770      	bx	lr
	...

08017b6c <_fstat_r>:
 8017b6c:	b538      	push	{r3, r4, r5, lr}
 8017b6e:	2300      	movs	r3, #0
 8017b70:	4c06      	ldr	r4, [pc, #24]	; (8017b8c <_fstat_r+0x20>)
 8017b72:	4605      	mov	r5, r0
 8017b74:	4608      	mov	r0, r1
 8017b76:	4611      	mov	r1, r2
 8017b78:	6023      	str	r3, [r4, #0]
 8017b7a:	f7e9 fe3c 	bl	80017f6 <_fstat>
 8017b7e:	1c43      	adds	r3, r0, #1
 8017b80:	d102      	bne.n	8017b88 <_fstat_r+0x1c>
 8017b82:	6823      	ldr	r3, [r4, #0]
 8017b84:	b103      	cbz	r3, 8017b88 <_fstat_r+0x1c>
 8017b86:	602b      	str	r3, [r5, #0]
 8017b88:	bd38      	pop	{r3, r4, r5, pc}
 8017b8a:	bf00      	nop
 8017b8c:	2000e0bc 	.word	0x2000e0bc

08017b90 <_isatty_r>:
 8017b90:	b538      	push	{r3, r4, r5, lr}
 8017b92:	2300      	movs	r3, #0
 8017b94:	4c05      	ldr	r4, [pc, #20]	; (8017bac <_isatty_r+0x1c>)
 8017b96:	4605      	mov	r5, r0
 8017b98:	4608      	mov	r0, r1
 8017b9a:	6023      	str	r3, [r4, #0]
 8017b9c:	f7e9 fe30 	bl	8001800 <_isatty>
 8017ba0:	1c43      	adds	r3, r0, #1
 8017ba2:	d102      	bne.n	8017baa <_isatty_r+0x1a>
 8017ba4:	6823      	ldr	r3, [r4, #0]
 8017ba6:	b103      	cbz	r3, 8017baa <_isatty_r+0x1a>
 8017ba8:	602b      	str	r3, [r5, #0]
 8017baa:	bd38      	pop	{r3, r4, r5, pc}
 8017bac:	2000e0bc 	.word	0x2000e0bc

08017bb0 <memchr>:
 8017bb0:	b510      	push	{r4, lr}
 8017bb2:	b2c9      	uxtb	r1, r1
 8017bb4:	4402      	add	r2, r0
 8017bb6:	4290      	cmp	r0, r2
 8017bb8:	4603      	mov	r3, r0
 8017bba:	d101      	bne.n	8017bc0 <memchr+0x10>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	e003      	b.n	8017bc8 <memchr+0x18>
 8017bc0:	781c      	ldrb	r4, [r3, #0]
 8017bc2:	3001      	adds	r0, #1
 8017bc4:	428c      	cmp	r4, r1
 8017bc6:	d1f6      	bne.n	8017bb6 <memchr+0x6>
 8017bc8:	4618      	mov	r0, r3
 8017bca:	bd10      	pop	{r4, pc}

08017bcc <memmove>:
 8017bcc:	4288      	cmp	r0, r1
 8017bce:	b510      	push	{r4, lr}
 8017bd0:	eb01 0302 	add.w	r3, r1, r2
 8017bd4:	d807      	bhi.n	8017be6 <memmove+0x1a>
 8017bd6:	1e42      	subs	r2, r0, #1
 8017bd8:	4299      	cmp	r1, r3
 8017bda:	d00a      	beq.n	8017bf2 <memmove+0x26>
 8017bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017be0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017be4:	e7f8      	b.n	8017bd8 <memmove+0xc>
 8017be6:	4283      	cmp	r3, r0
 8017be8:	d9f5      	bls.n	8017bd6 <memmove+0xa>
 8017bea:	1881      	adds	r1, r0, r2
 8017bec:	1ad2      	subs	r2, r2, r3
 8017bee:	42d3      	cmn	r3, r2
 8017bf0:	d100      	bne.n	8017bf4 <memmove+0x28>
 8017bf2:	bd10      	pop	{r4, pc}
 8017bf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017bfc:	e7f7      	b.n	8017bee <memmove+0x22>

08017bfe <_realloc_r>:
 8017bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c00:	4607      	mov	r7, r0
 8017c02:	4614      	mov	r4, r2
 8017c04:	460e      	mov	r6, r1
 8017c06:	b921      	cbnz	r1, 8017c12 <_realloc_r+0x14>
 8017c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	f7fe bde1 	b.w	80167d4 <_malloc_r>
 8017c12:	b922      	cbnz	r2, 8017c1e <_realloc_r+0x20>
 8017c14:	f7fe fd92 	bl	801673c <_free_r>
 8017c18:	4625      	mov	r5, r4
 8017c1a:	4628      	mov	r0, r5
 8017c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1e:	f000 f814 	bl	8017c4a <_malloc_usable_size_r>
 8017c22:	42a0      	cmp	r0, r4
 8017c24:	d20f      	bcs.n	8017c46 <_realloc_r+0x48>
 8017c26:	4621      	mov	r1, r4
 8017c28:	4638      	mov	r0, r7
 8017c2a:	f7fe fdd3 	bl	80167d4 <_malloc_r>
 8017c2e:	4605      	mov	r5, r0
 8017c30:	2800      	cmp	r0, #0
 8017c32:	d0f2      	beq.n	8017c1a <_realloc_r+0x1c>
 8017c34:	4631      	mov	r1, r6
 8017c36:	4622      	mov	r2, r4
 8017c38:	f7fe fd6d 	bl	8016716 <memcpy>
 8017c3c:	4631      	mov	r1, r6
 8017c3e:	4638      	mov	r0, r7
 8017c40:	f7fe fd7c 	bl	801673c <_free_r>
 8017c44:	e7e9      	b.n	8017c1a <_realloc_r+0x1c>
 8017c46:	4635      	mov	r5, r6
 8017c48:	e7e7      	b.n	8017c1a <_realloc_r+0x1c>

08017c4a <_malloc_usable_size_r>:
 8017c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c4e:	1f18      	subs	r0, r3, #4
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	bfbc      	itt	lt
 8017c54:	580b      	ldrlt	r3, [r1, r0]
 8017c56:	18c0      	addlt	r0, r0, r3
 8017c58:	4770      	bx	lr
	...

08017c5c <_init>:
 8017c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c5e:	bf00      	nop
 8017c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c62:	bc08      	pop	{r3}
 8017c64:	469e      	mov	lr, r3
 8017c66:	4770      	bx	lr

08017c68 <_fini>:
 8017c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c6a:	bf00      	nop
 8017c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c6e:	bc08      	pop	{r3}
 8017c70:	469e      	mov	lr, r3
 8017c72:	4770      	bx	lr
